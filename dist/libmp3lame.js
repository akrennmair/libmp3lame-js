// libmp3lame.js - port of libmp3lame to JavaScript using emscripten
// by Andreas Krennmair <ak@synflood.at>

var Lame = (function() {

// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  this['Module'] = Module;

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WEB) {
    window['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    var source = Pointer_stringify(code);
    if (source[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (source.indexOf('"', 1) === source.length-1) {
        source = source.substr(1, source.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + source + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    try {
      // Module is the only 'upvar', which we provide directly. We also provide FS for legacy support.
      var evalled = eval('(function(Module, FS) { return function(' + args.join(',') + '){ ' + source + ' } })')(Module, typeof FS !== 'undefined' ? FS : null);
    } catch(e) {
      Module.printErr('error in executing inline EM_ASM code: ' + e + ' on: \n\n' + source + '\n\nwith args |' + args + '| (make sure to use the right one out of EM_ASM, EM_ASM_ARGS, etc.)');
      throw e;
    }
    return Runtime.asmConstCache[code] = evalled;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;

      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }

      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }

      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          (((codePoint - 0x10000) / 0x400)|0) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      /* TODO: use TextEncoder when present,
        var encoder = new TextEncoder();
        encoder['encoding'] = "utf-8";
        var utf8Array = encoder['encode'](aMsg.data);
      */
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + size)|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;









//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var stack = 0;
  var JSfuncs = {
    'stackSave' : function() {
      stack = Runtime.stackSave();
    },
    'stackRestore' : function() {
      Runtime.stackRestore(stack);
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args) {
    var func = getCFunc(ident);
    var cArgs = [];
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) JSfuncs['stackRestore']();
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["cwrap"] = cwrap;
Module["ccall"] = ccall;


function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))>>0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }

  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    t = HEAPU8[(((ptr)+(i))>>0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;


function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
}
Module['stringToUTF16'] = stringToUTF16;


function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;


function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
}
Module['stringToUTF32'] = stringToUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var final = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    final = parse();
  } catch(e) {
    final += '?';
  }
  if (final.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return final;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module['stackTrace'] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  // TOTAL_MEMORY is the current size of the actual array, and DYNAMICTOP is the new top.


  while (TOTAL_MEMORY <= DYNAMICTOP) { // Simple heuristic.
    TOTAL_MEMORY = alignMemoryPage(2*TOTAL_MEMORY);
  }


  assert(TOTAL_MEMORY <= Math.pow(2, 30)); // 2^30==1GB is a practical maximum - 2^31 is already close to possible negative numbers etc.
  var oldHEAP8 = HEAP8;
  var buffer = new ArrayBuffer(TOTAL_MEMORY);
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
  HEAP8.set(oldHEAP8);
  var success = _emscripten_replace_memory(buffer);
  assert(success);
}

var byteLength;
try {
  byteLength = Function.prototype.call.bind(Object.getOwnPropertyDescriptor(ArrayBuffer.prototype, 'byteLength').get);
} catch(e) { // can fail on older node/v8
  byteLength = function(buffer) { return buffer.byteLength; };
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be more reasonable');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))>>0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    HEAP8[(((buffer)+(i))>>0)]=str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))>>0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===





STATIC_BASE = 8;

STATICTOP = STATIC_BASE + Runtime.alignMemory(287275);
  /* global initializers */ __ATINIT__.push();
  

/* memory initializer */ allocate([115,116,114,97,110,103,101,32,101,114,114,111,114,32,102,108,117,115,104,105,110,103,32,98,117,102,102,101,114,32,46,46,46,32,10,0,0,0,0,0,73,110,116,101,114,110,97,108,32,98,117,102,102,101,114,32,105,110,99,111,110,115,105,115,116,101,110,99,121,46,32,102,108,117,115,104,98,105,116,115,32,60,62,32,82,101,115,118,83,105,122,101,0,0,0,0,98,105,116,32,114,101,115,101,114,118,111,105,114,32,101,114,114,111,114,58,32,10,108,51,95,115,105,100,101,45,62,109,97,105,110,95,100,97,116,97,95,98,101,103,105,110,58,32,37,105,32,10,82,101,115,118,111,105,114,32,115,105,122,101,58,32,32,32,32,32,32,32,32,32,32,32,32,32,37,105,32,10,114,101,115,118,32,100,114,97,105,110,32,40,112,111,115,116,41,32,32,32,32,32,32,32,32,32,37,105,32,10,114,101,115,118,32,100,114,97,105,110,32,40,112,114,101,41,32,32,32,32,32,32,32,32,32,32,37,105,32,10,104,101,97,100,101,114,32,97,110,100,32,115,105,100,101,105,110,102,111,58,32,32,32,32,32,32,37,105,32,10,100,97,116,97,32,98,105,116,115,58,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,37,105,32,10,116,111,116,97,108,32,98,105,116,115,58,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,37,105,32,40,114,101,109,97,105,110,100,101,114,58,32,37,105,41,32,10,98,105,116,115,112,101,114,102,114,97,109,101,58,32,32,32,32,32,32,32,32,32,32,32,32,32,37,105,32,10,0,0,84,104,105,115,32,105,115,32,97,32,102,97,116,97,108,32,101,114,114,111,114,46,32,32,73,116,32,104,97,115,32,115,101,118,101,114,97,108,32,112,111,115,115,105,98,108,101,32,99,97,117,115,101,115,58,0,57,48,37,37,32,32,76,65,77,69,32,99,111,109,112,105,108,101,100,32,119,105,116,104,32,98,117,103,103,121,32,118,101,114,115,105,111,110,32,111,102,32,103,99,99,32,117,115,105,110,103,32,97,100,118,97,110,99,101,100,32,111,112,116,105,109,105,122,97,116,105,111,110,115,0,0,0,0,0,0,32,57,37,37,32,32,89,111,117,114,32,115,121,115,116,101,109,32,105,115,32,111,118,101,114,99,108,111,99,107,101,100,0,0,0,0,0,0,0,0,32,49,37,37,32,32,98,117,103,32,105,110,32,76,65,77,69,32,101,110,99,111,100,105,110,103,32,108,105,98,114,97,114,121,0,0,0,0,0,0,69,114,114,111,114,58,32,77,65,88,95,72,69,65,68,69,82,95,66,85,70,32,116,111,111,32,115,109,97,108,108,32,105,110,32,98,105,116,115,116,114,101,97,109,46,99,32,10,0,0,0,0,0,0,0,0,0,128,64,192,32,160,96,224,16,144,80,208,48,176,112,240,8,136,72,200,40,168,104,232,24,152,88,216,56,184,120,248,4,132,68,196,36,164,100,228,20,148,84,212,52,180,116,244,12,140,76,204,44,172,108,236,28,156,92,220,60,188,124,252,2,130,66,194,34,162,98,226,18,146,82,210,50,178,114,242,10,138,74,202,42,170,106,234,26,154,90,218,58,186,122,250,6,134,70,198,38,166,102,230,22,150,86,214,54,182,118,246,14,142,78,206,46,174,110,238,30,158,94,222,62,190,126,254], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([94,131,108,63,21,239,195,62,109,196,126,63,54,189,200,61,67,236,127,63,176,10,201,60,196,254,127,63,136,15,201,59,221,1,30,61,115,47,118,192,47,250,176,188,158,20,250,64,153,188,161,186,158,119,53,193,81,220,194,184,116,225,80,65,83,153,135,188,1,154,68,193,129,18,177,60,29,186,23,65,225,231,169,188,42,236,187,192,86,189,194,59,84,76,48,64,23,210,72,59,21,174,94,191,117,48,252,56,166,136,14,62,45,12,61,59,187,242,93,61,21,159,94,192,66,120,238,188,39,159,203,64,116,13,11,188,159,194,8,193,122,116,11,188,136,161,23,65,15,206,8,188,48,10,13,193,54,239,183,60,24,84,219,64,42,177,212,188,119,161,140,192,227,27,133,60,46,141,12,64,204,220,29,187,91,68,64,191,179,14,221,59,38,166,6,62,18,27,246,186,98,72,30,62,88,65,24,192,146,25,191,189,204,80,54,64,198,233,127,189,83,84,41,192,195,60,177,60,160,42,15,64,141,230,100,189,27,243,213,191,107,217,67,61,72,195,128,63,221,177,17,59,30,72,235,190,198,2,2,61,96,182,39,62,140,213,99,188,41,29,78,189,32,117,213,59,250,86,192,60,8,103,16,188,195,30,155,62,254,109,206,191,55,145,103,190,17,54,138,63,79,222,175,189,44,92,131,190,5,120,6,61,113,172,38,190,93,7,22,188,128,210,103,190,162,171,193,188,106,76,200,62,186,131,191,187,206,177,98,190,217,136,128,61,99,84,56,61,14,238,10,183,195,81,164,60,229,233,6,59,220,52,70,59,209,172,241,188,164,63,172,62,202,209,191,191,12,238,130,190,224,157,95,63,198,63,242,189,120,245,249,61,39,37,244,61,171,200,78,191,74,115,160,189,61,4,245,62,155,0,154,187,253,11,255,189,221,42,193,187,240,154,38,189,226,118,106,61,225,172,170,61,116,82,8,60,208,143,45,189,111,248,133,188,144,228,243,60,148,49,144,188,83,247,229,62,31,210,32,191,69,246,18,190,75,222,151,62,236,79,105,190,172,192,190,190,13,131,104,188,76,24,12,59,175,11,39,61,83,49,215,190,21,234,253,189,13,83,99,62,22,214,39,61,196,1,201,59,137,153,214,61,247,48,138,61,143,176,152,188,61,242,108,61,134,205,2,189,7,1,4,61,132,146,177,59,35,242,16,63,249,36,134,191,99,48,65,191,195,71,149,62,202,81,38,62,41,63,137,190,8,118,43,62,71,89,6,60,108,141,65,190,36,174,230,62,232,94,158,62,59,32,169,190,83,31,141,190,179,5,138,61,91,28,212,59,139,246,67,189,211,25,177,61,92,87,134,60,98,50,27,189,45,15,148,60,22,191,192,187,190,188,20,63,131,166,2,191,181,32,8,191,54,36,163,190,218,83,18,190,249,108,79,190,122,105,51,62,249,208,22,62,32,205,194,60,1,112,199,62,138,81,31,62,88,186,110,190,236,195,129,190,127,224,86,189,85,103,133,60,212,73,205,188,47,187,141,61,242,19,200,60,237,111,24,189,6,255,148,60,149,162,245,187,69,87,9,63,94,65,128,190,239,223,215,190,42,39,221,190,85,217,52,187,98,70,12,189,146,207,46,61,213,159,63,189,79,51,209,189,227,53,135,62,214,104,21,62,42,194,26,62,27,131,201,188,75,199,51,190,101,108,229,189,100,191,64,190,139,76,38,189,16,94,96,61,204,36,68,61,80,177,64,61,130,177,181,188,0,0,0,0,98,120,124,63,40,114,252,191,98,120,252,191,59,253,120,63,98,120,124,63,19,41,124,63,180,33,252,191,19,41,252,191,229,96,120,63,19,41,124,63,66,185,122,63,86,171,250,191,66,185,250,191,92,142,117,63,66,185,122,63,120,174,121,63,129,154,249,191,120,174,249,191,222,132,115,63,120,174,121,63,91,33,121,63,194,9,249,191,91,33,249,191,234,113,114,63,91,33,121,63,110,236,118,63,58,195,246,191,110,236,246,191,69,43,110,63,110,236,118,63,141,200,117,63,87,148,245,191,141,200,245,191,134,249,107,63,141,200,117,63,202,100,117,63,133,44,245,191,202,100,245,191,31,58,107,63,202,100,117,63,138,43,114,63,214,203,241,191,138,43,242,191,124,22,101,63,138,43,114,63,0,0,0,0,123,0,0,0,34,0,0,0,74,0,0,0,73,0,0,0,99,0,0,0,20,0,0,0,40,0,0,0,26,0,0,0,145,0,0,0,90,0,0,0,116,0,0,0,41,0,0,0,135,0,0,0,85,0,0,0,96,0,0,0,138,0,0,0,89,0,0,0,0,0,0,0,107,0,0,0,132,0,0,0,65,0,0,0,88,0,0,0,104,0,0,0,102,0,0,0,97,0,0,0,136,0,0,0,61,0,0,0,141,0,0,0,32,0,0,0,1,0,0,0,112,0,0,0,128,0,0,0,57,0,0,0,140,0,0,0,2,0,0,0,139,0,0,0,58,0,0,0,3,0,0,0,125,0,0,0,50,0,0,0,22,0,0,0,4,0,0,0,55,0,0,0,127,0,0,0,122,0,0,0,120,0,0,0,98,0,0,0,52,0,0,0,48,0,0,0,54,0,0,0,124,0,0,0,25,0,0,0,84,0,0,0,80,0,0,0,115,0,0,0,81,0,0,0,119,0,0,0,5,0,0,0,30,0,0,0,36,0,0,0,59,0,0,0,126,0,0,0,38,0,0,0,49,0,0,0,91,0,0,0,6,0,0,0,129,0,0,0,79,0,0,0,137,0,0,0,7,0,0,0,35,0,0,0,100,0,0,0,131,0,0,0,19,0,0,0,33,0,0,0,46,0,0,0,47,0,0,0,8,0,0,0,29,0,0,0,146,0,0,0,63,0,0,0,86,0,0,0,71,0,0,0,45,0,0,0,142,0,0,0,9,0,0,0,77,0,0,0,82,0,0,0,64,0,0,0,133,0,0,0,10,0,0,0,66,0,0,0,39,0,0,0,11,0,0,0,103,0,0,0,12,0,0,0,75,0,0,0,134,0,0,0,13,0,0,0,53,0,0,0,62,0,0,0,109,0,0,0,117,0,0,0,23,0,0,0,108,0,0,0,92,0,0,0,67,0,0,0,93,0,0,0,43,0,0,0,121,0,0,0,15,0,0,0,68,0,0,0,14,0,0,0,16,0,0,0,76,0,0,0,87,0,0,0,118,0,0,0,17,0,0,0,78,0,0,0,143,0,0,0,114,0,0,0,110,0,0,0,69,0,0,0,21,0,0,0,111,0,0,0,95,0,0,0,105,0,0,0,42,0,0,0,37,0,0,0,24,0,0,0,56,0,0,0,44,0,0,0,101,0,0,0,83,0,0,0,94,0,0,0,106,0,0,0,147,0,0,0,113,0,0,0,18,0,0,0,51,0,0,0,130,0,0,0,144,0,0,0,60,0,0,0,70,0,0,0,31,0,0,0,72,0,0,0,27,0,0,0,28,0,0,0,16,30,0,0,24,30,0,0,40,30,0,0,48,30,0,0,56,30,0,0,64,30,0,0,72,30,0,0,80,30,0,0,88,30,0,0,96,30,0,0,104,30,0,0,112,30,0,0,120,30,0,0,128,30,0,0,136,30,0,0,144,30,0,0,152,30,0,0,160,30,0,0,168,30,0,0,176,30,0,0,192,30,0,0,208,30,0,0,216,30,0,0,232,30,0,0,240,30,0,0,0,31,0,0,16,31,0,0,24,31,0,0,40,31,0,0,48,31,0,0,64,31,0,0,72,31,0,0,80,31,0,0,96,31,0,0,112,31,0,0,120,31,0,0,128,31,0,0,136,31,0,0,152,31,0,0,160,31,0,0,168,31,0,0,192,31,0,0,200,31,0,0,208,31,0,0,216,31,0,0,224,31,0,0,240,31,0,0,8,32,0,0,32,32,0,0,40,32,0,0,48,32,0,0,64,32,0,0,88,32,0,0,104,32,0,0,120,32,0,0,136,32,0,0,144,32,0,0,160,32,0,0,168,32,0,0,176,32,0,0,184,32,0,0,192,32,0,0,208,32,0,0,224,32,0,0,232,32,0,0,248,32,0,0,0,33,0,0,16,33,0,0,32,33,0,0,40,33,0,0,56,33,0,0,64,33,0,0,72,33,0,0,80,33,0,0,96,33,0,0,112,33,0,0,120,33,0,0,128,33,0,0,136,33,0,0,152,33,0,0,168,33,0,0,176,33,0,0,192,33,0,0,208,33,0,0,216,33,0,0,232,33,0,0,240,33,0,0,248,33,0,0,0,34,0,0,8,34,0,0,24,34,0,0,40,34,0,0,56,34,0,0,80,34,0,0,104,34,0,0,120,34,0,0,136,34,0,0,152,34,0,0,160,34,0,0,176,34,0,0,192,34,0,0,200,34,0,0,208,34,0,0,216,34,0,0,224,34,0,0,240,34,0,0,248,34,0,0,8,35,0,0,24,35,0,0,32,35,0,0,48,35,0,0,56,35,0,0,72,35,0,0,80,35,0,0,88,35,0,0,96,35,0,0,112,35,0,0,120,35,0,0,136,35,0,0,152,35,0,0,168,35,0,0,176,35,0,0,192,35,0,0,208,35,0,0,224,35,0,0,240,35,0,0,0,36,0,0,8,36,0,0,24,36,0,0,40,36,0,0,56,36,0,0,64,36,0,0,72,36,0,0,80,36,0,0,96,36,0,0,112,36,0,0,120,36,0,0,144,36,0,0,160,36,0,0,176,36,0,0,192,36,0,0,216,36,0,0,232,36,0,0,248,36,0,0,0,37,0,0,16,37,0,0,24,37,0,0,32,37,0,0,80,78,71,0,0,0,0,0,71,73,70,56,0,0,0,0,88,88,88,0,0,0,0,0,0,0,0,0,0,0,0,0,105,109,97,103,101,47,106,112,101,103,0,0,0,0,0,0,105,109,97,103,101,47,112,110,103,0,0,0,0,0,0,0,105,109,97,103,101,47,103,105,102,0,0,0,0,0,0,0,37,100,0,0,0,0,0,0,37,108,117,0,0,0,0,0,76,65,77,69,32,37,115,32,118,101,114,115,105,111,110,32,37,115,32,40,37,115,41,0,76,65,77,69,32,118,101,114,115,105,111,110,32,37,115,32,40,37,115,41,0,0,0,0,66,108,117,101,115,0,0,0,67,108,97,115,115,105,99,32,82,111,99,107,0,0,0,0,67,111,117,110,116,114,121,0,68,97,110,99,101,0,0,0,68,105,115,99,111,0,0,0,70,117,110,107,0,0,0,0,71,114,117,110,103,101,0,0,72,105,112,45,72,111,112,0,74,97,122,122,0,0,0,0,77,101,116,97,108,0,0,0,78,101,119,32,65,103,101,0,79,108,100,105,101,115,0,0,79,116,104,101,114,0,0,0,80,111,112,0,0,0,0,0,82,38,66,0,0,0,0,0,82,97,112,0,0,0,0,0,82,101,103,103,97,101,0,0,82,111,99,107,0,0,0,0,84,101,99,104,110,111,0,0,73,110,100,117,115,116,114,105,97,108,0,0,0,0,0,0,65,108,116,101,114,110,97,116,105,118,101,0,0,0,0,0,83,107,97,0,0,0,0,0,68,101,97,116,104,32,77,101,116,97,108,0,0,0,0,0,80,114,97,110,107,115,0,0,83,111,117,110,100,116,114,97,99,107,0,0,0,0,0,0,69,117,114,111,45,84,101,99,104,110,111,0,0,0,0,0,65,109,98,105,101,110,116,0,84,114,105,112,45,72,111,112,0,0,0,0,0,0,0,0,86,111,99,97,108,0,0,0,74,97,122,122,43,70,117,110,107,0,0,0,0,0,0,0,70,117,115,105,111,110,0,0,84,114,97,110,99,101,0,0,67,108,97,115,115,105,99,97,108,0,0,0,0,0,0,0,73,110,115,116,114,117,109,101,110,116,97,108,0,0,0,0,65,99,105,100,0,0,0,0,72,111,117,115,101,0,0,0,71,97,109,101,0,0,0,0,83,111,117,110,100,32,67,108,105,112,0,0,0,0,0,0,71,111,115,112,101,108,0,0,78,111,105,115,101,0,0,0,65,108,116,101,114,110,97,116,105,118,101,32,82,111,99,107,0,0,0,0,0,0,0,0,66,97,115,115,0,0,0,0,83,111,117,108,0,0,0,0,80,117,110,107,0,0,0,0,83,112,97,99,101,0,0,0,77,101,100,105,116,97,116,105,118,101,0,0,0,0,0,0,73,110,115,116,114,117,109,101,110,116,97,108,32,80,111,112,0,0,0,0,0,0,0,0,73,110,115,116,114,117,109,101,110,116,97,108,32,82,111,99,107,0,0,0,0,0,0,0,69,116,104,110,105,99,0,0,71,111,116,104,105,99,0,0,68,97,114,107,119,97,118,101,0,0,0,0,0,0,0,0,84,101,99,104,110,111,45,73,110,100,117,115,116,114,105,97,108,0,0,0,0,0,0,0,69,108,101,99,116,114,111,110,105,99,0,0,0,0,0,0,80,111,112,45,70,111,108,107,0,0,0,0,0,0,0,0,69,117,114,111,100,97,110,99,101,0,0,0,0,0,0,0,68,114,101,97,109,0,0,0,83,111,117,116,104,101,114,110,32,82,111,99,107,0,0,0,67,111,109,101,100,121,0,0,67,117,108,116,0,0,0,0,71,97,110,103,115,116,97,0,84,111,112,32,52,48,0,0,67,104,114,105,115,116,105,97,110,32,82,97,112,0,0,0,80,111,112,47,70,117,110,107,0,0,0,0,0,0,0,0,74,117,110,103,108,101,0,0,78,97,116,105,118,101,32,85,83,0,0,0,0,0,0,0,67,97,98,97,114,101,116,0,78,101,119,32,87,97,118,101,0,0,0,0,0,0,0,0,80,115,121,99,104,101,100,101,108,105,99,0,0,0,0,0,82,97,118,101,0,0,0,0,83,104,111,119,116,117,110,101,115,0,0,0,0,0,0,0,84,114,97,105,108,101,114,0,76,111,45,70,105,0,0,0,84,114,105,98,97,108,0,0,65,99,105,100,32,80,117,110,107,0,0,0,0,0,0,0,65,99,105,100,32,74,97,122,122,0,0,0,0,0,0,0,80,111,108,107,97,0,0,0,82,101,116,114,111,0,0,0,77,117,115,105,99,97,108,0,82,111,99,107,32,38,32,82,111,108,108,0,0,0,0,0,72,97,114,100,32,82,111,99,107,0,0,0,0,0,0,0,70,111,108,107,0,0,0,0,70,111,108,107,45,82,111,99,107,0,0,0,0,0,0,0,78,97,116,105,111,110,97,108,32,70,111,108,107,0,0,0,83,119,105,110,103,0,0,0,70,97,115,116,32,70,117,115,105,111,110,0,0,0,0,0,66,101,98,111,98,0,0,0,76,97,116,105,110,0,0,0,82,101,118,105,118,97,108,0,67,101,108,116,105,99,0,0,66,108,117,101,103,114,97,115,115,0,0,0,0,0,0,0,65,118,97,110,116,103,97,114,100,101,0,0,0,0,0,0,71,111,116,104,105,99,32,82,111,99,107,0,0,0,0,0,80,114,111,103,114,101,115,115,105,118,101,32,82,111,99,107,0,0,0,0,0,0,0,0,80,115,121,99,104,101,100,101,108,105,99,32,82,111,99,107,0,0,0,0,0,0,0,0,83,121,109,112,104,111,110,105,99,32,82,111,99,107,0,0,83,108,111,119,32,82,111,99,107,0,0,0,0,0,0,0,66,105,103,32,66,97,110,100,0,0,0,0,0,0,0,0,67,104,111,114,117,115,0,0,69,97,115,121,32,76,105,115,116,101,110,105,110,103,0,0,65,99,111,117,115,116,105,99,0,0,0,0,0,0,0,0,72,117,109,111,117,114,0,0,83,112,101,101,99,104,0,0,67,104,97,110,115,111,110,0,79,112,101,114,97,0,0,0,67,104,97,109,98,101,114,32,77,117,115,105,99,0,0,0,83,111,110,97,116,97,0,0,83,121,109,112,104,111,110,121,0,0,0,0,0,0,0,0,66,111,111,116,121,32,66,97,115,115,0,0,0,0,0,0,80,114,105,109,117,115,0,0,80,111,114,110,32,71,114,111,111,118,101,0,0,0,0,0,83,97,116,105,114,101,0,0,83,108,111,119,32,74,97,109,0,0,0,0,0,0,0,0,67,108,117,98,0,0,0,0,84,97,110,103,111,0,0,0,83,97,109,98,97,0,0,0,70,111,108,107,108,111,114,101,0,0,0,0,0,0,0,0,66,97,108,108,97,100,0,0,80,111,119,101,114,32,66,97,108,108,97,100,0,0,0,0,82,104,121,116,104,109,105,99,32,83,111,117,108,0,0,0,70,114,101,101,115,116,121,108,101,0,0,0,0,0,0,0,68,117,101,116,0,0,0,0,80,117,110,107,32,82,111,99,107,0,0,0,0,0,0,0,68,114,117,109,32,83,111,108,111,0,0,0,0,0,0,0,65,32,67,97,112,112,101,108,108,97,0,0,0,0,0,0,69,117,114,111,45,72,111,117,115,101,0,0,0,0,0,0,68,97,110,99,101,32,72,97,108,108,0,0,0,0,0,0,71,111,97,0,0,0,0,0,68,114,117,109,32,38,32,66,97,115,115,0,0,0,0,0,67,108,117,98,45,72,111,117,115,101,0,0,0,0,0,0,72,97,114,100,99,111,114,101,0,0,0,0,0,0,0,0,84,101,114,114,111,114,0,0,73,110,100,105,101,0,0,0,66,114,105,116,80,111,112,0,78,101,103,101,114,112,117,110,107,0,0,0,0,0,0,0,80,111,108,115,107,32,80,117,110,107,0,0,0,0,0,0,66,101,97,116,0,0,0,0,67,104,114,105,115,116,105,97,110,32,71,97,110,103,115,116,97,0,0,0,0,0,0,0,72,101,97,118,121,32,77,101,116,97,108,0,0,0,0,0,66,108,97,99,107,32,77,101,116,97,108,0,0,0,0,0,67,114,111,115,115,111,118,101,114,0,0,0,0,0,0,0,67,111,110,116,101,109,112,111,114,97,114,121,32,67,104,114,105,115,116,105,97,110,0,0,67,104,114,105,115,116,105,97,110,32,82,111,99,107,0,0,77,101,114,101,110,103,117,101,0,0,0,0,0,0,0,0,83,97,108,115,97,0,0,0,84,104,114,97,115,104,32,77,101,116,97,108,0,0,0,0,65,110,105,109,101,0,0,0,74,80,111,112,0,0,0,0,83,121,110,116,104,80,111,112,0,0,0,0,0,0,0,0,128,187,0,0,0,0,0,0,0,0,208,64,0,0,0,0,0,0,208,64,148,92,0,0,68,172,0,0,0,0,0,0,0,0,208,64,0,0,0,0,0,0,208,64,20,85,0,0,0,125,0,0,0,0,208,64,0,0,0,65,102,102,166,64,0,0,208,64,184,61,0,0,192,93,0,0,0,0,0,65,0,0,8,65,102,102,166,64,0,0,192,64,74,46,0,0,34,86,0,0,0,0,8,65,246,40,16,65,102,102,166,64,0,0,208,64,140,42,0,0,128,62,0,0,246,40,16,65,102,102,22,65,205,204,156,64,0,0,208,64,223,30,0,0,224,46,0,0,102,102,22,65,154,153,25,65,0,0,144,64,0,0,192,64,40,23,0,0,17,43,0,0,154,153,25,65,102,102,30,65,51,51,163,64,0,0,208,64,70,21,0,0,64,31,0,0,102,102,30,65,0,0,32,65,205,204,156,64,0,0,208,64,112,15,0,0,44,76,0,0,56,74,0,0,168,72,0,0,80,70,0,0,92,68,0,0,128,62,0,0,240,60,0,0,52,58,0,0,212,48,0,0,16,39,0,0,110,15,0,0,0,0,0,0,192,93,0,0,44,76,0,0,68,72,0,0,80,70,0,0,92,68,0,0,104,66,0,0,116,64,0,0,240,60,0,0,96,59,0,0,62,28,0,0,110,15,0,0,0,0,0,0,44,76,0,0,56,74,0,0,68,72,0,0,80,70,0,0,92,68,0,0,116,64,0,0,140,60,0,0,164,56,0,0,212,48,0,0,28,37,0,0,110,15,0,0,0,0,0,0,102,102,182,64,0,0,208,64,154,153,233,64,51,51,3,65,0,0,32,65,102,102,62,65,0,0,80,65,0,0,96,65,0,0,112,65,0,0,132,65,76,65,77,69,32,37,115,32,37,115,32,40,37,115,41,10,0,0,0,0,0,0,0,0,44,32,0,0,0,0,0,0,51,68,78,111,119,33,0,0,83,83,69,50,0,0,0,0,67,80,85,32,102,101,97,116,117,114,101,115,58,32,37,115,10,0,0,0,0,0,0,0,65,117,116,111,99,111,110,118,101,114,116,105,110,103,32,102,114,111,109,32,115,116,101,114,101,111,32,116,111,32,109,111,110,111,46,32,83,101,116,116,105,110,103,32,101,110,99,111,100,105,110,103,32,116,111,32,109,111,110,111,32,109,111,100,101,46,10,0,0,0,0,0,82,101,115,97,109,112,108,105,110,103,58,32,32,105,110,112,117,116,32,37,103,32,107,72,122,32,32,111,117,116,112,117,116,32,37,103,32,107,72,122,10,0,0,0,0,0,0,0,85,115,105,110,103,32,112,111,108,121,112,104,97,115,101,32,104,105,103,104,112,97,115,115,32,102,105,108,116,101,114,44,32,116,114,97,110,115,105,116,105,111,110,32,98,97,110,100,58,32,37,53,46,48,102,32,72,122,32,45,32,37,53,46,48,102,32,72,122,10,0,0,85,115,105,110,103,32,112,111,108,121,112,104,97,115,101,32,108,111,119,112,97,115,115,32,102,105,108,116,101,114,44,32,116,114,97,110,115,105,116,105,111,110,32,98,97,110,100,58,32,37,53,46,48,102,32,72,122,32,45,32,37,53,46,48,102,32,72,122,10,0,0,0,112,111,108,121,112,104,97,115,101,32,108,111,119,112,97,115,115,32,102,105,108,116,101,114,32,100,105,115,97,98,108,101,100,10,0,0,0,0,0,0,87,97,114,110,105,110,103,58,32,109,97,110,121,32,100,101,99,111,100,101,114,115,32,99,97,110,110,111,116,32,104,97,110,100,108,101,32,102,114,101,101,32,102,111,114,109,97,116,32,98,105,116,115,116,114,101,97,109,115,10,0,0,0,0,87,97,114,110,105,110,103,58,32,109,97,110,121,32,100,101,99,111,100,101,114,115,32,99,97,110,110,111,116,32,104,97,110,100,108,101,32,102,114,101,101,32,102,111,114,109,97,116,32,98,105,116,114,97,116,101,115,32,62,51,50,48,32,107,98,112,115,32,40,115,101,101,32,100,111,99,117,109,101,110,116,97,116,105,111,110,41,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,109,105,115,99,58,10,10,0,0,0,0,0,0,0,0,9,115,99,97,108,105,110,103,58,32,37,103,10,0,0,0,9,99,104,48,32,40,108,101,102,116,41,32,115,99,97,108,105,110,103,58,32,37,103,10,0,0,0,0,0,0,0,0,9,99,104,49,32,40,114,105,103,104,116,41,32,115,99,97,108,105,110,103,58,32,37,103,10,0,0,0,0,0,0,0,110,111,114,109,97,108,0,0,98,101,115,116,32,40,111,117,116,115,105,100,101,32,108,111,111,112,41,0,0,0,0,0,98,101,115,116,32,40,105,110,115,105,100,101,32,108,111,111,112,44,32,115,108,111,119,41,0,0,0,0,0,0,0,0,9,104,117,102,102,109,97,110,32,115,101,97,114,99,104,58,32,37,115,10,0,0,0,0,9,101,120,112,101,114,105,109,101,110,116,97,108,32,89,61,37,100,10,0,0,0,0,0,9,46,46,46,10,0,0,0,10,115,116,114,101,97,109,32,102,111,114,109,97,116,58,10,10,0,0,0,0,0,0,0,50,46,53,0,0,0,0,0,49,0,0,0,0,0,0,0,50,0,0,0,0,0,0,0,63,0,0,0,0,0,0,0,9,77,80,69,71,45,37,115,32,76,97,121,101,114,32,51,10,0,0,0,0,0,0,0,106,111,105,110,116,32,115,116,101,114,101,111,0,0,0,0,115,116,101,114,101,111,0,0,100,117,97,108,32,99,104,97,110,110,101,108,0,0,0,0,109,111,110,111,0,0,0,0,110,111,116,32,115,101,116,32,40,101,114,114,111,114,41,0,117,110,107,110,111,119,110,32,40,101,114,114,111,114,41,0,9,37,100,32,99,104,97,110,110,101,108,32,45,32,37,115,10,0,0,0,0,0,0,0,111,102,102,0,0,0,0,0,97,108,108,0,0,0,0,0,9,112,97,100,100,105,110,103,58,32,37,115,10,0,0,0,40,100,101,102,97,117,108,116,41,0,0,0,0,0,0,0,40,102,114,101,101,32,102,111,114,109,97,116,41,0,0,0,9,99,111,110,115,116,97,110,116,32,98,105,116,114,97,116,101,32,45,32,67,66,82,32,37,115,10,0,0,0,0,0,9,118,97,114,105,97,98,108,101,32,98,105,116,114,97,116,101,32,45,32,65,66,82,32,37,115,10,0,0,0,0,0,9,118,97,114,105,97,98,108,101,32,98,105,116,114,97,116,101,32,45,32,86,66,82,32,114,104,32,37,115,10,0,0,9,118,97,114,105,97,98,108,101,32,98,105,116,114,97,116,101,32,45,32,86,66,82,32,109,116,32,37,115,10,0,0,9,118,97,114,105,97,98,108,101,32,98,105,116,114,97,116,101,32,45,32,86,66,82,32,109,116,114,104,32,37,115,10,0,0,0,0,0,0,0,0,9,32,63,63,32,111,111,112,115,44,32,115,111,109,101,32,110,101,119,32,111,110,101,32,63,63,32,10,0,0,0,0,9,117,115,105,110,103,32,76,65,77,69,32,84,97,103,10,0,0,0,0,0,0,0,0,10,112,115,121,99,104,111,97,99,111,117,115,116,105,99,58,10,10,0,0,0,0,0,0,97,108,108,111,119,101,100,0,99,104,97,110,110,101,108,32,99,111,117,112,108,101,100,0,100,105,115,112,101,110,115,101,100,0,0,0,0,0,0,0,102,111,114,99,101,100,0,0,9,117,115,105,110,103,32,115,104,111,114,116,32,98,108,111,99,107,115,58,32,37,115,10,0,0,0,0,0,0,0,0,9,115,117,98,98,108,111,99,107,32,103,97,105,110,58,32,37,100,10,0,0,0,0,0,9,97,100,106,117,115,116,32,109,97,115,107,105,110,103,58,32,37,103,32,100,66,10,0,9,97,100,106,117,115,116,32,109,97,115,107,105,110,103,32,115,104,111,114,116,58,32,37,103,32,100,66,10,0,0,0,9,113,117,97,110,116,105,122,97,116,105,111,110,32,99,111,109,112,97,114,105,115,111,110,58,32,37,100,10,0,0,0,9,32,94,32,99,111,109,112,97,114,105,115,111,110,32,115,104,111,114,116,32,98,108,111,99,107,115,58,32,37,100,10,0,0,0,0,0,0,0,0,9,110,111,105,115,101,32,115,104,97,112,105,110,103,58,32,37,100,10,0,0,0,0,0,9,32,94,32,97,109,112,108,105,102,105,99,97,116,105,111,110,58,32,37,100,10,0,0,9,32,94,32,115,116,111,112,112,105,110,103,58,32,37,100,10,0,0,0,0,0,0,0,117,115,105,110,103,0,0,0,116,104,101,32,111,110,108,121,32,109,97,115,107,105,110,103,32,102,111,114,32,115,104,111,114,116,32,98,108,111,99,107,115,0,0,0,0,0,0,0,116,104,101,32,111,110,108,121,32,109,97,115,107,105,110,103,0,0,0,0,0,0,0,0,110,111,116,32,117,115,101,100,0,0,0,0,0,0,0,0,9,65,84,72,58,32,37,115,10,0,0,0,0,0,0,0,9,32,94,32,116,121,112,101,58,32,37,100,10,0,0,0,9,32,94,32,115,104,97,112,101,58,32,37,103,37,115,10,0,0,0,0,0,0,0,0,32,40,111,110,108,121,32,102,111,114,32,116,121,112,101,32,52,41,0,0,0,0,0,0,9,32,94,32,108,101,118,101,108,32,97,100,106,117,115,116,101,109,101,110,116,58,32,37,103,32,100,66,10,0,0,0,9,32,94,32,97,100,106,117,115,116,32,116,121,112,101,58,32,37,100,10,0,0,0,0,9,32,94,32,97,100,106,117,115,116,32,115,101,110,115,105,116,105,118,105,116,121,32,112,111,119,101,114,58,32,37,102,10,0,0,0,0,0,0,0,9,101,120,112,101,114,105,109,101,110,116,97,108,32,112,115,121,32,116,117,110,105,110,103,115,32,98,121,32,78,97,111,107,105,32,83,104,105,98,97,116,97,10,0,0,0,0,0,9,32,32,32,97,100,106,117,115,116,32,109,97,115,107,105,110,103,32,98,97,115,115,61,37,103,32,100,66,44,32,97,108,116,111,61,37,103,32,100,66,44,32,116,114,101,98,108,101,61,37,103,32,100,66,44,32,115,102,98,50,49,61,37,103,32,100,66,10,0,0,0,121,101,115,0,0,0,0,0,110,111,0,0,0,0,0,0,9,117,115,105,110,103,32,116,101,109,112,111,114,97,108,32,109,97,115,107,105,110,103,32,101,102,102,101,99,116,58,32,37,115,10,0,0,0,0,0,9,105,110,116,101,114,99,104,97,110,110,101,108,32,109,97,115,107,105,110,103,32,114,97,116,105,111,58,32,37,103,10,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,69,114,114,111,114,58,32,99,111,117,108,100,32,110,111,116,32,117,112,100,97,116,101,32,76,65,77,69,32,116,97,103,46,10,0,0,0,0,0,0,69,114,114,111,114,58,32,99,111,117,108,100,32,110,111,116,32,117,112,100,97,116,101,32,76,65,77,69,32,116,97,103,44,32,102,105,108,101,32,110,111,116,32,115,101,101,107,97,98,108,101,46,10,0,0,0,69,114,114,111,114,58,32,99,111,117,108,100,32,110,111,116,32,117,112,100,97,116,101,32,76,65,77,69,32,116,97,103,44,32,102,105,108,101,32,110,111,116,32,114,101,97,100,97,98,108,101,46,10,0,0,0,69,114,114,111,114,58,32,99,97,110,39,116,32,97,108,108,111,99,97,116,101,32,105,110,95,98,117,102,102,101,114,32,98,117,102,102,101,114,10,0,87,97,114,110,105,110,103,58,32,104,105,103,104,112,97,115,115,32,102,105,108,116,101,114,32,100,105,115,97,98,108,101,100,46,32,32,104,105,103,104,112,97,115,115,32,102,114,101,113,117,101,110,99,121,32,116,111,111,32,115,109,97,108,108,10,0,0,0,0,0,0,0,8,0,0,0,208,7,0,0,16,0,0,0,116,14,0,0,24,0,0,0,60,15,0,0,32,0,0,0,124,21,0,0,40,0,0,0,88,27,0,0,48,0,0,0,76,29,0,0,56,0,0,0,16,39,0,0,64,0,0,0,248,42,0,0,80,0,0,0,188,52,0,0,96,0,0,0,252,58,0,0,112,0,0,0,240,60,0,0,128,0,0,0,104,66,0,0,160,0,0,0,92,68,0,0,192,0,0,0,168,72,0,0,224,0,0,0,200,75,0,0,0,1,0,0,244,76,0,0,64,1,0,0,20,80], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+5384);
/* memory initializer */ allocate([128,1,0,0,128,4,0,0,128,4,0,0,0,0,0,0,128,1,0,0,128,4,0,0,64,2,0,0,0,0,0,0,1,0,0,0,16,0,0,0,17,0,0,0,8,0,0,0,9,0,0,0,24,0,0,0,25,0,0,0,4,0,0,0,5,0,0,0,20,0,0,0,21,0,0,0,12,0,0,0,13,0,0,0,28,0,0,0,29,0,0,0,2,0,0,0,3,0,0,0,18,0,0,0,19,0,0,0,10,0,0,0,11,0,0,0,26,0,0,0,27,0,0,0,6,0,0,0,7,0,0,0,22,0,0,0,23,0,0,0,14,0,0,0,15,0,0,0,30,0,0,0,31,0,0,0,0,27,134,42,204,204,52,43,33,78,132,43,252,247,157,43,88,156,166,43,252,247,157,43,33,78,132,43,204,204,52,43,0,27,134,42,83,248,191,44,254,169,171,44,146,50,149,44,159,129,122,44,239,29,73,44,62,186,23,44,116,173,207,43,133,159,107,43,183,89,146,42,83,248,191,172,254,169,171,172,146,50,149,172,159,129,122,172,239,29,73,172,62,186,23,172,116,173,207,171,133,159,107,171,183,89,146,170,0,27,134,170,204,204,52,171,33,78,132,171,252,247,157,171,88,156,166,171,252,247,157,171,33,78,132,171,204,204,52,171,0,27,134,170,0,27,134,42,204,204,52,43,33,78,132,43,252,247,157,43,88,156,166,43,252,247,157,43,33,78,132,43,204,204,52,43,0,27,134,42,83,248,191,44,254,169,171,44,146,50,149,44,159,129,122,44,239,29,73,44,62,186,23,44,116,173,207,43,133,159,107,43,183,89,146,42,37,39,192,172,51,37,173,172,234,209,152,172,227,84,131,172,249,175,89,172,11,14,43,172,102,34,244,171,201,49,137,171,74,123,157,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,144,128,170,174,79,227,170,5,174,113,170,234,207,6,62,205,19,212,62,139,111,68,63,255,175,139,63,23,208,166,63,117,235,200,63,190,226,245,63,122,130,26,64,105,251,74,64,185,87,144,64,107,16,243,64,233,58,183,65,92,28,124,63,187,141,36,63,68,29,175,62,178,143,112,63,212,208,49,190,125,27,68,191,215,179,93,63,0,0,0,63,254,181,3,191,218,134,241,190,2,115,160,190,116,71,58,190,29,176,193,189,135,203,39,189,29,161,104,188,70,123,114,187,168,132,91,63,216,185,97,63,221,26,115,63,129,186,123,63,65,218,126,63,253,200,127,63,101,249,127,63,141,255,127,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,144,128,42,174,79,227,42,5,174,113,42,37,39,192,44,51,37,173,44,234,209,152,44,227,84,131,44,249,175,89,44,11,14,43,44,102,34,244,43,201,49,137,43,74,123,157,42,83,248,191,172,254,169,171,172,146,50,149,172,159,129,122,172,239,29,73,172,62,186,23,172,116,173,207,171,133,159,107,171,183,89,146,170,0,27,134,170,204,204,52,171,33,78,132,171,252,247,157,171,88,156,166,171,252,247,157,171,33,78,132,171,204,204,52,171,0,27,134,170,121,207,23,190,138,59,1,66,164,51,148,67,155,200,92,68,202,167,45,70,175,40,132,68,192,222,152,67,129,155,246,65,199,156,118,64,77,183,109,66,194,101,49,68,74,15,165,69,82,45,182,197,71,104,76,196,73,213,153,194,66,4,147,192,94,6,104,63,54,189,72,62,3,97,30,190,44,76,9,66,68,231,150,67,96,102,76,68,47,215,52,70,17,168,147,68,117,204,160,67,46,219,249,65,68,124,109,64,146,154,86,66,183,10,43,68,136,68,163,69,35,243,198,197,129,62,99,196,80,169,179,194,43,42,173,192,1,24,82,63,194,197,199,62,223,144,36,190,144,150,16,66,32,15,152,67,140,47,55,68,113,86,59,70,101,128,162,68,120,164,167,67,193,231,251,65,149,237,87,64,209,237,60,66,46,47,35,68,80,99,160,69,178,232,215,197,240,127,122,196,100,62,207,194,121,91,195,192,207,220,61,63,49,160,20,63,61,91,42,190,177,1,23,66,106,129,151,67,98,254,28,68,14,27,65,70,229,136,176,68,246,95,173,67,75,201,252,65,52,59,74,64,173,80,34,66,178,10,26,68,170,126,156,69,83,240,232,197,121,249,136,196,253,124,236,194,231,48,218,192,193,13,43,63,21,239,67,63,139,188,47,190,75,118,28,66,177,43,149,67,81,195,251,67,92,30,70,70,161,146,189,68,23,254,177,67,116,41,251,65,165,166,58,64,77,48,7,66,62,185,15,68,225,169,151,69,144,236,249,197,102,184,148,196,253,164,5,195,130,12,247,192,196,112,25,63,234,90,113,63,120,177,52,190,11,224,32,66,197,255,144,67,75,169,179,67,9,89,74,70,63,131,201,68,227,108,181,67,12,94,248,65,73,159,52,64,49,233,215,65,148,121,4,68,250,250,145,69,153,95,5,198,224,82,160,196,230,149,21,195,193,75,10,193,185,213,8,63,218,57,142,63,244,54,185,190,93,45,36,66,238,197,138,67,123,163,67,67,193,197,77,70,150,52,212,68,118,180,183,67,208,116,244,65,169,3,34,64,173,143,160,65,68,192,240,67,195,135,139,69,122,165,13,198,28,180,171,196,130,42,38,195,136,83,25,193,112,40,242,62,153,103,162,63,55,74,189,190,167,146,37,66,148,165,130,67,182,247,78,65,135,96,80,70,71,144,221,68,247,225,184,67,182,2,238,65,153,191,25,64,113,224,84,65,226,71,215,67,116,104,132,69,186,183,21,198,32,182,182,196,153,32,55,195,248,124,43,193,205,19,212,62,243,4,181,63,187,232,192,190,91,122,38,66,227,13,113,67,88,242,59,195,65,40,82,70,237,132,229,68,213,190,184,67,201,3,232,65,16,147,4,64,105,242,216,64,110,227,188,67,47,102,121,69,214,134,29,198,81,62,193,196,85,96,72,195,235,212,61,193,80,50,183,62,3,228,197,63,71,16,196,190,73,155,36,66,18,122,88,67,23,20,203,195,140,28,83,70,216,249,235,68,185,166,183,67,247,22,225,65,11,250,244,63,71,16,196,62,69,237,161,67,91,2,105,69,239,4,37,198,124,38,203,196,16,160,89,195,54,63,80,193,66,80,155,62,49,219,212,63,46,15,21,191,242,108,33,66,98,51,60,67,83,17,32,196,220,60,83,70,70,243,240,68,238,104,181,67,38,192,215,65,112,137,223,63,88,12,180,192,157,166,134,67,47,214,87,69,149,32,44,198,6,85,212,196,16,196,106,195,193,157,98,193,212,63,128,62,152,197,225,63,57,182,22,191,234,239,28,66,206,194,27,67,244,79,94,196,226,141,82,70,182,97,244,68,249,56,178,67,221,40,207,65,124,229,200,63,57,233,50,193,16,207,86,67,160,18,70,69,73,205,50,198,21,165,220,196,104,176,123,195,1,246,119,193,175,175,75,62,94,131,236,63,230,143,74,191,36,147,21,66,35,102,239,66,16,227,143,196,201,17,81,70,166,76,246,68,130,2,174,67,22,218,197,65,28,72,177,63,12,95,131,193,224,12,33,67,81,229,51,69,247,251,56,198,140,255,227,196,139,36,134,195,184,137,134,193,100,229,23,62,11,250,244,63,223,202,75,191,201,237,12,66,223,9,160,66,174,0,178,196,45,207,78,70,187,185,246,68,213,254,168,67,51,80,186,65,197,91,178,63,32,204,168,193,139,247,216,66,54,123,33,69,232,158,62,198,230,72,234,196,148,31,142,195,218,232,144,193,220,181,201,61,190,20,251,63,15,177,127,191,152,64,2,66,94,213,19,66,106,66,213,196,38,205,75,70,66,172,245,68,70,55,163,67,112,102,177,65,251,108,153,63,81,248,202,193,231,35,102,66,180,6,15,69,179,170,67,198,226,90,239,196,151,161,149,195,66,6,155,193,60,57,73,61,109,196,254,63,54,211,37,70,68,177,165,69,175,113,104,68,69,51,54,68,128,12,144,67,180,213,129,66,2,0,241,65,34,63,131,64,49,19,72,70,167,49,243,68,86,182,156,67,170,105,166,65,251,100,249,68,112,3,16,65,17,158,233,193,0,0,0,0,0,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,102,102,134,64,0,0,200,65,154,153,217,192,154,153,217,192,51,51,227,64,0,0,128,63,0,0,0,0,0,0,0,0,2,0,0,0,31,0,0,0,0,0,128,63,0,0,160,64,0,0,200,66,1,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,102,102,134,64,0,0,200,65,154,153,153,192,154,153,153,192,205,204,172,64,51,51,179,63,0,0,128,191,0,0,0,0,2,0,0,0,27,0,0,0,178,157,143,63,0,0,160,64,0,0,196,66,2,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,102,102,134,64,0,0,200,65,102,102,38,192,102,102,38,192,205,204,108,64,0,0,0,64,0,0,64,192,0,0,0,0,2,0,0,0,23,0,0,0,47,221,164,63,0,0,160,64,0,0,194,66,3,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,102,102,134,64,0,0,200,65,205,204,204,191,205,204,204,191,0,0,0,64,0,0,0,64,0,0,160,192,0,0,0,0,2,0,0,0,18,0,0,0,223,79,189,63,0,0,160,64,0,0,192,66,4,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,102,102,134,64,0,0,200,65,0,0,0,128,0,0,0,128,0,0,0,0,0,0,0,64,0,0,0,193,0,0,0,0,2,0,0,0,12,0,0,0,16,88,217,63,0,0,160,64,0,0,190,66,5,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,102,102,134,64,0,0,200,65,102,102,166,63,102,102,166,63,0,0,192,192,0,0,96,64,0,0,48,193,0,0,0,0,2,0,0,0,8,0,0,0,154,153,249,63,0,0,160,64,102,102,188,66,6,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,0,0,144,64,0,0,200,66,205,204,12,64,51,51,19,64,0,0,64,193,0,0,192,64,0,0,96,193,0,0,0,0,2,0,0,0,4,0,0,0,199,75,15,64,0,0,64,64,205,204,187,66,7,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,154,153,153,64,0,0,72,67,205,204,44,64,205,204,44,64,0,0,144,193,0,0,16,65,0,0,136,193,0,0,0,0,2,0,0,0,0,0,0,0,225,122,36,64,0,0,128,63,51,51,187,66,8,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,154,153,169,64,0,0,150,67,51,51,51,64,51,51,51,64,0,0,168,193,0,0,32,65,0,0,184,193,23,183,81,57,0,0,0,0,0,0,0,0,47,221,60,64,0,0,0,0,154,153,186,66,9,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,51,51,211,64,0,0,150,67,51,51,51,64,51,51,51,64,0,0,184,193,0,0,48,65,0,0,200,193,82,73,29,58,0,0,0,0,0,0,0,0,254,212,88,64,0,0,0,0,154,153,186,66,10,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,0,0,200,65,0,0,150,67,51,51,51,64,51,51,51,64,0,0,200,193,0,0,64,65,0,0,216,193,10,215,35,59,0,0,0,0,0,0,0,0,0,0,96,64,0,0,0,0,154,153,186,66,0,0,0,0,0,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,102,102,166,64,0,0,250,66,102,102,134,192,154,153,201,192,154,153,153,64,0,0,128,63,0,0,0,0,0,0,0,0,2,0,0,0,21,0,0,0,236,81,120,63,0,0,160,64,0,0,200,66,1,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,154,153,169,64,0,0,250,66,102,102,102,192,51,51,179,192,0,0,144,64,0,0,192,63,0,0,0,0,0,0,0,0,2,0,0,0,21,0,0,0,205,204,172,63,0,0,160,64,0,0,200,66,2,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,51,51,179,64,0,0,250,66,205,204,12,192,0,0,96,192,51,51,51,64,0,0,0,64,0,0,0,0,0,0,0,0,2,0,0,0,21,0,0,0,82,184,190,63,0,0,160,64,0,0,200,66,3,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,154,153,185,64,0,0,2,67,102,102,230,191,51,51,51,192,102,102,38,64,0,0,64,64,0,0,128,192,0,0,0,0,2,0,0,0,20,0,0,0,133,235,209,63,0,0,160,64,0,0,200,66,4,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,0,0,192,64,0,0,7,67,51,51,51,191,205,204,140,191,205,204,140,63,0,0,96,64,0,0,0,193,0,0,0,0,2,0,0,0,0,0,0,0,184,30,229,63,0,0,160,64,0,0,200,66,5,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,205,204,204,64,0,0,12,67,0,0,0,63,205,204,204,62,0,0,240,192,0,0,128,64,0,0,64,193,23,183,81,57,0,0,0,0,0,0,0,0,154,153,249,63,0,0,160,64,0,0,200,66,6,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,51,51,211,64,0,0,17,67,31,133,43,63,102,102,38,63,51,51,107,193,0,0,208,64,0,0,152,193,23,183,209,57,0,0,0,0,0,0,0,0,51,51,19,64,0,0,160,64,0,0,200,66,7,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,51,51,211,64,0,0,17,67,205,204,76,63,0,0,64,63,154,153,157,193,0,0,0,65,0,0,176,193,82,73,29,58,0,0,0,0,0,0,0,0,205,204,44,64,0,0,160,64,0,0,200,66,8,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,51,51,211,64,0,0,17,67,154,153,153,63,51,51,147,63,0,0,220,193,0,0,32,65,0,0,184,193,52,128,55,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,64,0,0,200,66,9,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,51,51,211,64,0,0,17,67,205,204,204,63,205,204,204,63,0,0,16,194,0,0,48,65,0,0,200,193,23,183,81,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,64,0,0,200,66,10,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,51,51,211,64,0,0,17,67,0,0,0,64,0,0,0,64,0,0,16,194,0,0,64,65,0,0,200,193,23,183,81,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,64,0,0,200,66,0,0,0,0,8,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,51,51,211,64,0,0,17,67,51,51,115,63,0,0,0,0,0,0,240,193,0,0,48,65,82,73,157,58,1,0,0,0,16,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,51,51,211,64,0,0,17,67,51,51,115,63,0,0,0,0,0,0,200,193,0,0,48,65,111,18,131,58,1,0,0,0,24,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,51,51,211,64,0,0,17,67,51,51,115,63,0,0,0,0,0,0,160,193,0,0,48,65,111,18,131,58,1,0,0,0,32,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,51,51,211,64,0,0,17,67,51,51,115,63,0,0,0,0,0,0,112,193,0,0,48,65,111,18,131,58,1,0,0,0,40,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,51,51,211,64,0,0,17,67,51,51,115,63,0,0,0,0,0,0,32,193,0,0,48,65,250,237,107,58,1,0,0,0,48,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,51,51,211,64,0,0,17,67,51,51,115,63,0,0,0,0,0,0,32,193,0,0,48,65,250,237,107,58,1,0,0,0,56,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,51,51,211,64,0,0,17,67,51,51,115,63,0,0,0,0,0,0,192,192,0,0,48,65,23,183,81,58,1,0,0,0,64,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,51,51,211,64,0,0,17,67,51,51,115,63,0,0,0,0,0,0,0,192,0,0,48,65,23,183,81,58,1,0,0,0,80,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,51,51,211,64,0,0,17,67,51,51,115,63,0,0,0,0,0,0,0,0,0,0,0,65,52,128,55,58,1,0,0,0,96,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,0,0,32,64,51,51,211,64,0,0,17,67,51,51,115,63,0,0,0,0,0,0,128,63,0,0,176,64,82,73,29,58,1,0,0,0,112,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,0,0,16,64,51,51,211,64,0,0,17,67,51,51,115,63,0,0,0,0,0,0,0,64,0,0,144,64,111,18,3,58,1,0,0,0,128,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,154,153,249,63,205,204,204,64,0,0,12,67,51,51,115,63,0,0,0,0,0,0,64,64,0,0,128,64,23,183,81,57,1,0,0,0,160,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,184,30,229,63,0,0,192,64,0,0,7,67,51,51,115,63,0,0,0,192,0,0,160,64,0,0,96,64,0,0,0,0,1,0,0,0,192,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,82,184,190,63,51,51,179,64,0,0,250,66,236,81,120,63,0,0,128,192,0,0,224,64,0,0,64,64,0,0,0,0,0,0,0,0,224,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,0,0,160,63,102,102,166,64,0,0,250,66,72,225,122,63,0,0,192,192,0,0,16,65,0,0,0,64,0,0,0,0,0,0,0,0,0,1,0,0,9,0,0,0,9,0,0,0,1,0,0,0,236,81,120,63,102,102,166,64,0,0,250,66,0,0,128,63,0,0,0,193,0,0,32,65,0,0,128,63,0,0,0,0,0,0,0,0,64,1,0,0,9,0,0,0,9,0,0,0,1,0,0,0,102,102,102,63,102,102,166,64,0,0,250,66,0,0,128,63,0,0,32,193,0,0,64,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,205,204,236,192,205,204,236,192,205,204,236,192,0,0,24,193,205,204,236,192,51,51,195,192,0,0,176,192,102,102,150,192,102,102,150,192,102,102,150,192,102,102,150,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,154,153,217,64,154,153,185,64,154,153,185,64,205,204,204,64,0,0,208,64,102,102,30,65,154,153,65,65,102,102,102,65,0,0,112,65,51,51,151,65,205,204,172,65,51,51,215,65,205,204,8,66,205,204,32,66,51,51,59,66,0,0,98,66,205,204,114,66,205,204,147,66,102,102,171,66,205,204,186,66,51,51,252,66,0,0,0,0,205,204,60,65,154,153,89,65,154,153,137,65,0,0,0,66,0,0,58,66,51,51,77,66,0,0,102,66,51,51,134,66,0,0,143,66,51,51,169,66,51,51,195,66,0,0,2,67,0,0,128,63,54,89,75,63,152,134,33,63,152,134,33,63,152,134,33,63,152,134,33,63,152,134,33,63,250,155,128,62,153,158,240,61,0,0,0,0,137,158,227,63,229,83,236,63,167,94,245,63,155,20,249,63,14,217,252,63,123,143,234,63,218,151,217,63,226,132,191,63,124,145,168,63,0,0,128,63,2,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,73,78,84,69,82,78,65,76,32,69,82,82,79,82,32,73,78,32,86,66,82,32,78,69,87,32,67,79,68,69,44,32,112,108,101,97,115,101,32,115,101,110,100,32,98,117,103,32,114,101,112,111,114,116,10,0,6,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,9,0,0,0,9,0,0,0,9,0,0,0,9,0,0,0,6,0,0,0,9,0,0,0,9,0,0,0,9,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,3,0,0,0,9,0,0,0,9,0,0,0,12,0,0,0,6,0,0,0,6,0,0,0,9,0,0,0,12,0,0,0,6,0,0,0,11,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,7,0,0,0,7,0,0,0,0,0,0,0,12,0,0,0,12,0,0,0,12,0,0,0,0,0,0,0,6,0,0,0,15,0,0,0,12,0,0,0,0,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,3,0,0,0,12,0,0,0,9,0,0,0,9,0,0,0,6,0,0,0,6,0,0,0,12,0,0,0,9,0,0,0,6,0,0,0,8,0,0,0,8,0,0,0,5,0,0,0,0,0,0,0,15,0,0,0,12,0,0,0,9,0,0,0,0,0,0,0,6,0,0,0,18,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,12,0,0,0,18,0,0,0,24,0,0,0,30,0,0,0,36,0,0,0,44,0,0,0,54,0,0,0,66,0,0,0,80,0,0,0,96,0,0,0,116,0,0,0,140,0,0,0,168,0,0,0,200,0,0,0,238,0,0,0,28,1,0,0,80,1,0,0,140,1,0,0,208,1,0,0,10,2,0,0,64,2,0,0,0,0,0,0,4,0,0,0,8,0,0,0,12,0,0,0,18,0,0,0,24,0,0,0,32,0,0,0,42,0,0,0,56,0,0,0,74,0,0,0,100,0,0,0,132,0,0,0,174,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,12,0,0,0,18,0,0,0,24,0,0,0,30,0,0,0,36,0,0,0,44,0,0,0,54,0,0,0,66,0,0,0,80,0,0,0,96,0,0,0,114,0,0,0,136,0,0,0,162,0,0,0,194,0,0,0,232,0,0,0,22,1,0,0,76,1,0,0,138,1,0,0,208,1,0,0,28,2,0,0,64,2,0,0,0,0,0,0,4,0,0,0,8,0,0,0,12,0,0,0,18,0,0,0,26,0,0,0,36,0,0,0,48,0,0,0,62,0,0,0,80,0,0,0,104,0,0,0,136,0,0,0,180,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,12,0,0,0,18,0,0,0,24,0,0,0,30,0,0,0,36,0,0,0,44,0,0,0,54,0,0,0,66,0,0,0,80,0,0,0,96,0,0,0,116,0,0,0,140,0,0,0,168,0,0,0,200,0,0,0,238,0,0,0,28,1,0,0,80,1,0,0,140,1,0,0,208,1,0,0,10,2,0,0,64,2,0,0,0,0,0,0,4,0,0,0,8,0,0,0,12,0,0,0,18,0,0,0,26,0,0,0,36,0,0,0,48,0,0,0,62,0,0,0,80,0,0,0,104,0,0,0,134,0,0,0,174,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,8,0,0,0,12,0,0,0,16,0,0,0,20,0,0,0,24,0,0,0,30,0,0,0,36,0,0,0,44,0,0,0,52,0,0,0,62,0,0,0,74,0,0,0,90,0,0,0,110,0,0,0,134,0,0,0,162,0,0,0,196,0,0,0,238,0,0,0,32,1,0,0,86,1,0,0,162,1,0,0,64,2,0,0,0,0,0,0,4,0,0,0,8,0,0,0,12,0,0,0,16,0,0,0,22,0,0,0,30,0,0,0,40,0,0,0,52,0,0,0,66,0,0,0,84,0,0,0,106,0,0,0,136,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,8,0,0,0,12,0,0,0,16,0,0,0,20,0,0,0,24,0,0,0,30,0,0,0,36,0,0,0,42,0,0,0,50,0,0,0,60,0,0,0,72,0,0,0,88,0,0,0,106,0,0,0,128,0,0,0,156,0,0,0,190,0,0,0,230,0,0,0,20,1,0,0,74,1,0,0,128,1,0,0,64,2,0,0,0,0,0,0,4,0,0,0,8,0,0,0,12,0,0,0,16,0,0,0,22,0,0,0,28,0,0,0,38,0,0,0,50,0,0,0,64,0,0,0,80,0,0,0,100,0,0,0,126,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,8,0,0,0,12,0,0,0,16,0,0,0,20,0,0,0,24,0,0,0,30,0,0,0,36,0,0,0,44,0,0,0,54,0,0,0,66,0,0,0,82,0,0,0,102,0,0,0,126,0,0,0,156,0,0,0,194,0,0,0,240,0,0,0,40,1,0,0,108,1,0,0,192,1,0,0,38,2,0,0,64,2,0,0,0,0,0,0,4,0,0,0,8,0,0,0,12,0,0,0,16,0,0,0,22,0,0,0,30,0,0,0,42,0,0,0,58,0,0,0,78,0,0,0,104,0,0,0,138,0,0,0,180,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,12,0,0,0,18,0,0,0,24,0,0,0,30,0,0,0,36,0,0,0,44,0,0,0,54,0,0,0,66,0,0,0,80,0,0,0,96,0,0,0,116,0,0,0,140,0,0,0,168,0,0,0,200,0,0,0,238,0,0,0,28,1,0,0,80,1,0,0,140,1,0,0,208,1,0,0,10,2,0,0,64,2,0,0,0,0,0,0,4,0,0,0,8,0,0,0,12,0,0,0,18,0,0,0,26,0,0,0,36,0,0,0,48,0,0,0,62,0,0,0,80,0,0,0,104,0,0,0,134,0,0,0,174,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,12,0,0,0,18,0,0,0,24,0,0,0,30,0,0,0,36,0,0,0,44,0,0,0,54,0,0,0,66,0,0,0,80,0,0,0,96,0,0,0,116,0,0,0,140,0,0,0,168,0,0,0,200,0,0,0,238,0,0,0,28,1,0,0,80,1,0,0,140,1,0,0,208,1,0,0,10,2,0,0,64,2,0,0,0,0,0,0,4,0,0,0,8,0,0,0,12,0,0,0,18,0,0,0,26,0,0,0,36,0,0,0,48,0,0,0,62,0,0,0,80,0,0,0,104,0,0,0,134,0,0,0,174,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,24,0,0,0,36,0,0,0,48,0,0,0,60,0,0,0,72,0,0,0,88,0,0,0,108,0,0,0,132,0,0,0,160,0,0,0,192,0,0,0,232,0,0,0,24,1,0,0,80,1,0,0,144,1,0,0,220,1,0,0,54,2,0,0,56,2,0,0,58,2,0,0,60,2,0,0,62,2,0,0,64,2,0,0,0,0,0,0,8,0,0,0,16,0,0,0,24,0,0,0,36,0,0,0,52,0,0,0,72,0,0,0,96,0,0,0,124,0,0,0,160,0,0,0,162,0,0,0,164,0,0,0,166,0,0,0,192], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+59964);
/* memory initializer */ allocate([1,4,3,5,0,0,0,0,1,5,5,7,5,8,7,9,5,7,7,9,7,9,9,10,4,5,5,6,5,6,6,7,5,6,6,7,6,7,7,8,1,0,1,0,1,0,0,0,1,0,2,0,1,0,3,0,1,0,1,0,3,0,2,0,0,0,0,0,0,0,0,0,1,4,7,4,5,7,6,7,8,0,0,0,0,0,0,0,3,0,2,0,1,0,1,0,1,0,1,0,3,0,2,0,0,0,0,0,0,0,0,0,2,3,7,4,4,7,6,7,8,0,0,0,0,0,0,0,1,0,2,0,6,0,5,0,3,0,1,0,4,0,4,0,7,0,5,0,7,0,1,0,6,0,1,0,1,0,0,0,1,4,7,8,4,5,8,9,7,8,9,10,8,8,9,10,7,0,3,0,5,0,1,0,6,0,2,0,3,0,2,0,5,0,4,0,4,0,1,0,3,0,3,0,2,0,0,0,3,4,6,8,4,4,6,7,5,6,7,8,7,7,8,9,1,0,2,0,10,0,19,0,16,0,10,0,3,0,3,0,7,0,10,0,5,0,3,0,11,0,4,0,13,0,17,0,8,0,4,0,12,0,11,0,18,0,15,0,11,0,2,0,7,0,6,0,9,0,14,0,3,0,1,0,6,0,4,0,5,0,3,0,2,0,0,0,1,4,7,9,9,10,4,6,8,9,9,10,7,7,9,10,10,11,8,9,10,11,11,11,8,9,10,11,11,12,9,10,11,12,12,12,0,0,0,0,3,0,4,0,6,0,18,0,12,0,5,0,5,0,1,0,2,0,16,0,9,0,3,0,7,0,3,0,5,0,14,0,7,0,3,0,19,0,17,0,15,0,13,0,10,0,4,0,13,0,5,0,8,0,11,0,5,0,1,0,12,0,4,0,4,0,1,0,1,0,0,0,2,4,7,9,9,10,4,4,6,10,10,10,7,6,8,10,10,11,9,10,10,11,11,12,9,9,10,11,12,12,10,10,11,11,13,13,0,0,0,0,7,0,5,0,9,0,14,0,15,0,7,0,6,0,4,0,5,0,5,0,6,0,7,0,7,0,6,0,8,0,8,0,8,0,5,0,15,0,6,0,9,0,10,0,5,0,1,0,11,0,7,0,9,0,6,0,4,0,1,0,14,0,4,0,6,0,2,0,6,0,0,0,3,4,6,7,9,10,4,5,6,7,8,10,5,6,7,8,9,10,7,7,8,9,9,10,8,8,9,9,10,11,9,9,10,10,11,11,0,0,0,0,1,0,2,0,10,0,23,0,35,0,30,0,12,0,17,0,3,0,3,0,8,0,12,0,18,0,21,0,12,0,7,0,11,0,9,0,15,0,21,0,32,0,40,0,19,0,6,0,14,0,13,0,22,0,34,0,46,0,23,0,18,0,7,0,20,0,19,0,33,0,47,0,27,0,22,0,9,0,3,0,31,0,22,0,41,0,26,0,21,0,20,0,5,0,3,0,14,0,13,0,10,0,11,0,16,0,6,0,5,0,1,0,9,0,8,0,7,0,8,0,4,0,4,0,2,0,0,0,1,4,7,9,10,10,10,11,4,6,8,9,10,11,10,10,7,8,9,10,11,12,11,11,8,9,10,11,12,12,11,12,9,10,11,12,12,12,12,12,10,11,12,12,13,13,12,13,9,10,11,12,12,12,13,13,10,10,11,12,12,13,13,13,3,0,4,0,10,0,24,0,34,0,33,0,21,0,15,0,5,0,3,0,4,0,10,0,32,0,17,0,11,0,10,0,11,0,7,0,13,0,18,0,30,0,31,0,20,0,5,0,25,0,11,0,19,0,59,0,27,0,18,0,12,0,5,0,35,0,33,0,31,0,58,0,30,0,16,0,7,0,5,0,28,0,26,0,32,0,19,0,17,0,15,0,8,0,14,0,14,0,12,0,9,0,13,0,14,0,9,0,4,0,1,0,11,0,4,0,6,0,6,0,6,0,3,0,2,0,0,0,2,4,6,8,9,10,9,10,4,5,6,8,10,10,9,10,6,7,8,9,10,11,10,10,8,8,9,11,10,12,10,11,9,10,10,11,11,12,11,12,9,10,11,12,12,13,12,13,9,9,9,10,11,12,12,12,9,9,10,11,12,12,12,12,9,0,6,0,16,0,33,0,41,0,39,0,38,0,26,0,7,0,5,0,6,0,9,0,23,0,16,0,26,0,11,0,17,0,7,0,11,0,14,0,21,0,30,0,10,0,7,0,17,0,10,0,15,0,12,0,18,0,28,0,14,0,5,0,32,0,13,0,22,0,19,0,18,0,16,0,9,0,5,0,40,0,17,0,31,0,29,0,17,0,13,0,4,0,2,0,27,0,12,0,11,0,15,0,10,0,7,0,4,0,1,0,27,0,12,0,8,0,12,0,6,0,3,0,1,0,0,0,4,4,6,8,9,10,10,10,4,5,6,7,9,9,10,10,6,6,7,8,9,10,9,10,7,7,8,8,9,10,10,10,8,8,9,9,10,10,10,11,9,9,10,10,10,11,10,11,9,9,9,10,10,11,11,12,10,10,10,11,11,11,11,12,1,0,5,0,14,0,21,0,34,0,51,0,46,0,71,0,42,0,52,0,68,0,52,0,67,0,44,0,43,0,19,0,3,0,4,0,12,0,19,0,31,0,26,0,44,0,33,0,31,0,24,0,32,0,24,0,31,0,35,0,22,0,14,0,15,0,13,0,23,0,36,0,59,0,49,0,77,0,65,0,29,0,40,0,30,0,40,0,27,0,33,0,42,0,16,0,22,0,20,0,37,0,61,0,56,0,79,0,73,0,64,0,43,0,76,0,56,0,37,0,26,0,31,0,25,0,14,0,35,0,16,0,60,0,57,0,97,0,75,0,114,0,91,0,54,0,73,0,55,0,41,0,48,0,53,0,23,0,24,0,58,0,27,0,50,0,96,0,76,0,70,0,93,0,84,0,77,0,58,0,79,0,29,0,74,0,49,0,41,0,17,0,47,0,45,0,78,0,74,0,115,0,94,0,90,0,79,0,69,0,83,0,71,0,50,0,59,0,38,0,36,0,15,0,72,0,34,0,56,0,95,0,92,0,85,0,91,0,90,0,86,0,73,0,77,0,65,0,51,0,44,0,43,0,42,0,43,0,20,0,30,0,44,0,55,0,78,0,72,0,87,0,78,0,61,0,46,0,54,0,37,0,30,0,20,0,16,0,53,0,25,0,41,0,37,0,44,0,59,0,54,0,81,0,66,0,76,0,57,0,54,0,37,0,18,0,39,0,11,0,35,0,33,0,31,0,57,0,42,0,82,0,72,0,80,0,47,0,58,0,55,0,21,0,22,0,26,0,38,0,22,0,53,0,25,0,23,0,38,0,70,0,60,0,51,0,36,0,55,0,26,0,34,0,23,0,27,0,14,0,9,0,7,0,34,0,32,0,28,0,39,0,49,0,75,0,30,0,52,0,48,0,40,0,52,0,28,0,18,0,17,0,9,0,5,0,45,0,21,0,34,0,64,0,56,0,50,0,49,0,45,0,31,0,19,0,12,0,15,0,10,0,7,0,6,0,3,0,48,0,23,0,20,0,39,0,36,0,35,0,53,0,21,0,16,0,23,0,13,0,10,0,6,0,1,0,4,0,2,0,16,0,15,0,17,0,27,0,25,0,20,0,29,0,11,0,17,0,12,0,16,0,8,0,1,0,1,0,0,0,1,0,1,5,7,8,9,10,10,11,10,11,12,12,13,13,14,14,4,6,8,9,10,10,11,11,11,11,12,12,13,14,14,14,7,8,9,10,11,11,12,12,11,12,12,13,13,14,15,15,8,9,10,11,11,12,12,12,12,13,13,13,13,14,15,15,9,9,11,11,12,12,13,13,12,13,13,14,14,15,15,16,10,10,11,12,12,12,13,13,13,13,14,13,15,15,16,16,10,11,12,12,13,13,13,13,13,14,14,14,15,15,16,16,11,11,12,13,13,13,14,14,14,14,15,15,15,16,18,18,10,10,11,12,12,13,13,14,14,14,14,15,15,16,17,17,11,11,12,12,13,13,13,15,14,15,15,16,16,16,18,17,11,12,12,13,13,14,14,15,14,15,16,15,16,17,18,19,12,12,12,13,14,14,14,14,15,15,15,16,17,17,17,18,12,13,13,14,14,15,14,15,16,16,17,17,17,18,18,18,13,13,14,15,15,15,16,16,16,16,16,17,18,17,18,18,14,14,14,15,15,15,17,16,16,19,17,17,17,19,18,18,13,14,15,16,16,16,17,16,17,17,18,18,21,20,21,18,1,5,7,9,10,10,11,11,12,12,12,13,13,13,14,11,4,6,8,9,10,11,11,11,12,12,12,13,14,13,14,11,7,8,9,10,11,11,12,12,13,12,13,13,13,14,14,12,9,9,10,11,11,12,12,12,13,13,14,14,14,15,15,13,10,10,11,11,12,12,13,13,13,14,14,14,15,15,15,12,10,10,11,11,12,13,13,14,13,14,14,15,15,15,16,13,11,11,11,12,13,13,13,13,14,14,14,14,15,15,16,13,11,11,12,12,13,13,13,14,14,15,15,15,15,17,17,13,11,12,12,13,13,13,14,14,15,15,15,15,16,16,16,13,12,12,12,13,13,14,14,15,15,15,15,16,15,16,15,14,12,13,12,13,14,14,14,14,15,16,16,16,17,17,16,13,13,13,13,13,14,14,15,16,16,16,16,16,16,15,16,14,13,14,14,14,14,15,15,15,15,17,16,16,16,16,18,14,15,14,14,14,15,15,16,16,16,18,17,17,17,19,17,14,14,15,13,14,16,16,15,16,16,17,18,17,19,17,16,14,11,11,11,12,12,13,13,13,14,14,14,14,14,14,14,12,7,0,12,0,18,0,53,0,47,0,76,0,124,0,108,0,89,0,123,0,108,0,119,0,107,0,81,0,122,0,63,0,13,0,5,0,16,0,27,0,46,0,36,0,61,0,51,0,42,0,70,0,52,0,83,0,65,0,41,0,59,0,36,0,19,0,17,0,15,0,24,0,41,0,34,0,59,0,48,0,40,0,64,0,50,0,78,0,62,0,80,0,56,0,33,0,29,0,28,0,25,0,43,0,39,0,63,0,55,0,93,0,76,0,59,0,93,0,72,0,54,0,75,0,50,0,29,0,52,0,22,0,42,0,40,0,67,0,57,0,95,0,79,0,72,0,57,0,89,0,69,0,49,0,66,0,46,0,27,0,77,0,37,0,35,0,66,0,58,0,52,0,91,0,74,0,62,0,48,0,79,0,63,0,90,0,62,0,40,0,38,0,125,0,32,0,60,0,56,0,50,0,92,0,78,0,65,0,55,0,87,0,71,0,51,0,73,0,51,0,70,0,30,0,109,0,53,0,49,0,94,0,88,0,75,0,66,0,122,0,91,0,73,0,56,0,42,0,64,0,44,0,21,0,25,0,90,0,43,0,41,0,77,0,73,0,63,0,56,0,92,0,77,0,66,0,47,0,67,0,48,0,53,0,36,0,20,0,71,0,34,0,67,0,60,0,58,0,49,0,88,0,76,0,67,0,106,0,71,0,54,0,38,0,39,0,23,0,15,0,109,0,53,0,51,0,47,0,90,0,82,0,58,0,57,0,48,0,72,0,57,0,41,0,23,0,27,0,62,0,9,0,86,0,42,0,40,0,37,0,70,0,64,0,52,0,43,0,70,0,55,0,42,0,25,0,29,0,18,0,11,0,11,0,118,0,68,0,30,0,55,0,50,0,46,0,74,0,65,0,49,0,39,0,24,0,16,0,22,0,13,0,14,0,7,0,91,0,44,0,39,0,38,0,34,0,63,0,52,0,45,0,31,0,52,0,28,0,19,0,14,0,8,0,9,0,3,0,123,0,60,0,58,0,53,0,47,0,43,0,32,0,22,0,37,0,24,0,17,0,12,0,15,0,10,0,2,0,1,0,71,0,37,0,34,0,30,0,28,0,20,0,17,0,26,0,21,0,16,0,10,0,6,0,8,0,6,0,2,0,0,0,3,5,6,8,8,9,10,10,10,11,11,12,12,12,13,14,5,5,7,8,9,9,10,10,10,11,11,12,12,12,13,13,6,7,7,8,9,9,10,10,10,11,11,12,12,13,13,13,7,8,8,9,9,10,10,11,11,11,12,12,12,13,13,13,8,8,9,9,10,10,11,11,11,11,12,12,12,13,13,13,9,9,9,10,10,10,11,11,11,11,12,12,13,13,13,14,10,9,10,10,10,11,11,11,11,12,12,12,13,13,14,14,10,10,10,11,11,11,11,12,12,12,12,12,13,13,13,14,10,10,10,11,11,11,11,12,12,12,12,13,13,14,14,14,10,10,11,11,11,11,12,12,12,13,13,13,13,14,14,14,11,11,11,11,12,12,12,12,12,13,13,13,13,14,15,14,11,11,11,11,12,12,12,12,13,13,13,13,14,14,14,15,12,12,11,12,12,12,13,13,13,13,13,13,14,14,15,15,12,12,12,12,12,13,13,13,13,14,14,14,14,14,15,15,13,13,13,13,13,13,13,13,14,14,14,14,15,15,14,15,13,13,13,13,13,13,13,14,14,14,14,14,15,15,15,15,1,0,5,0,14,0,44,0,74,0,63,0,110,0,93,0,172,0,149,0,138,0,242,0,225,0,195,0,120,1,17,0,3,0,4,0,12,0,20,0,35,0,62,0,53,0,47,0,83,0,75,0,68,0,119,0,201,0,107,0,207,0,9,0,15,0,13,0,23,0,38,0,67,0,58,0,103,0,90,0,161,0,72,0,127,0,117,0,110,0,209,0,206,0,16,0,45,0,21,0,39,0,69,0,64,0,114,0,99,0,87,0,158,0,140,0,252,0,212,0,199,0,131,1,109,1,26,0,75,0,36,0,68,0,65,0,115,0,101,0,179,0,164,0,155,0,8,1,246,0,226,0,139,1,126,1,106,1,9,0,66,0,30,0,59,0,56,0,102,0,185,0,173,0,9,1,142,0,253,0,232,0,144,1,132,1,122,1,189,1,16,0,111,0,54,0,52,0,100,0,184,0,178,0,160,0,133,0,1,1,244,0,228,0,217,0,129,1,110,1,203,2,10,0,98,0,48,0,91,0,88,0,165,0,157,0,148,0,5,1,248,0,151,1,141,1,116,1,124,1,121,3,116,3,8,0,85,0,84,0,81,0,159,0,156,0,143,0,4,1,249,0,171,1,145,1,136,1,127,1,215,2,201,2,196,2,7,0,154,0,76,0,73,0,141,0,131,0,0,1,245,0,170,1,150,1,138,1,128,1,223,2,103,1,198,2,96,1,11,0,139,0,129,0,67,0,125,0,247,0,233,0,229,0,219,0,137,1,231,2,225,2,208,2,117,3,114,3,183,1,4,0,243,0,120,0,118,0,115,0,227,0,223,0,140,1,234,2,230,2,224,2,209,2,200,2,194,2,223,0,180,1,6,0,202,0,224,0,222,0,218,0,216,0,133,1,130,1,125,1,108,1,120,3,187,1,195,2,184,1,181,1,192,6,4,0,235,2,211,0,210,0,208,0,114,1,123,1,222,2,211,2,202,2,199,6,115,3,109,3,108,3,131,13,97,3,2,0,121,1,113,1,102,0,187,0,214,2,210,2,102,1,199,2,197,2,98,3,198,6,103,3,130,13,102,3,178,1,0,0,12,0,10,0,7,0,11,0,10,0,17,0,11,0,9,0,13,0,12,0,10,0,7,0,5,0,3,0,1,0,3,0,1,5,7,9,10,10,11,11,12,12,12,13,13,13,14,10,4,6,8,9,10,11,11,11,12,12,12,13,14,13,14,10,7,8,9,10,11,11,12,12,13,12,13,13,13,14,14,11,9,9,10,11,11,12,12,12,13,13,14,14,14,15,15,12,10,10,11,11,12,12,13,13,13,14,14,14,15,15,15,11,10,10,11,11,12,13,13,14,13,14,14,15,15,15,16,12,11,11,11,12,13,13,13,13,14,14,14,14,15,15,16,12,11,11,12,12,13,13,13,14,14,15,15,15,15,17,17,12,11,12,12,13,13,13,14,14,15,15,15,15,16,16,16,12,12,12,12,13,13,14,14,15,15,15,15,16,15,16,15,13,12,13,12,13,14,14,14,14,15,16,16,16,17,17,16,12,13,13,13,13,14,14,15,16,16,16,16,16,16,15,16,13,13,14,14,14,14,15,15,15,15,17,16,16,16,16,18,13,15,14,14,14,15,15,16,16,16,18,17,17,17,19,17,13,14,15,13,14,16,16,15,16,16,17,18,17,19,17,16,13,10,10,10,11,11,12,12,12,13,13,13,13,13,13,13,10,15,0,13,0,46,0,80,0,146,0,6,1,248,0,178,1,170,1,157,2,141,2,137,2,109,2,5,2,8,4,88,0,14,0,12,0,21,0,38,0,71,0,130,0,122,0,216,0,209,0,198,0,71,1,89,1,63,1,41,1,23,1,42,0,47,0,22,0,41,0,74,0,68,0,128,0,120,0,221,0,207,0,194,0,182,0,84,1,59,1,39,1,29,2,18,0,81,0,39,0,75,0,70,0,134,0,125,0,116,0,220,0,204,0,190,0,178,0,69,1,55,1,37,1,15,1,16,0,147,0,72,0,69,0,135,0,127,0,118,0,112,0,210,0,200,0,188,0,96,1,67,1,50,1,29,1,28,2,14,0,7,1,66,0,129,0,126,0,119,0,114,0,214,0,202,0,192,0,180,0,85,1,61,1,45,1,25,1,6,1,12,0,249,0,123,0,121,0,117,0,113,0,215,0,206,0,195,0,185,0,91,1,74,1,52,1,35,1,16,1,8,2,10,0,179,1,115,0,111,0,109,0,211,0,203,0,196,0,187,0,97,1,76,1,57,1,42,1,27,1,19,2,125,1,17,0,171,1,212,0,208,0,205,0,201,0,193,0,186,0,177,0,169,0,64,1,47,1,30,1,12,1,2,2,121,1,16,0,79,1,199,0,197,0,191,0,189,0,181,0,174,0,77,1,65,1,49,1,33,1,19,1,9,2,123,1,115,1,11,0,156,2,184,0,183,0,179,0,175,0,88,1,75,1,58,1,48,1,34,1,21,1,18,2,127,1,117,1,110,1,10,0,140,2,90,1,171,0,168,0,164,0,62,1,53,1,43,1,31,1,20,1,7,1,1,2,119,1,112,1,106,1,6,0,136,2,66,1,60,1,56,1,51,1,46,1,36,1,28,1,13,1,5,1,0,2,120,1,114,1,108,1,103,1,4,0,108,2,44,1,40,1,38,1,32,1,26,1,17,1,10,1,3,2,124,1,118,1,113,1,109,1,105,1,101,1,2,0,9,4,24,1,22,1,18,1,11,1,8,1,3,1,126,1,122,1,116,1,111,1,107,1,104,1,102,1,100,1,0,0,43,0,20,0,19,0,17,0,15,0,13,0,11,0,9,0,7,0,6,0,4,0,7,0,5,0,3,0,1,0,3,0,4,5,7,8,9,10,10,11,11,12,12,12,12,12,13,10,5,6,7,8,9,10,10,11,11,11,12,12,12,12,12,10,7,7,8,9,9,10,10,11,11,11,11,12,12,12,13,9,8,8,9,9,10,10,10,11,11,11,11,12,12,12,12,9,9,9,9,10,10,10,10,11,11,11,12,12,12,12,13,9,10,9,10,10,10,10,11,11,11,11,12,12,12,12,12,9,10,10,10,10,10,11,11,11,11,12,12,12,12,12,13,9,11,10,10,10,11,11,11,11,12,12,12,12,12,13,13,10,11,11,11,11,11,11,11,11,11,12,12,12,12,13,13,10,11,11,11,11,11,11,11,12,12,12,12,12,13,13,13,10,12,11,11,11,11,12,12,12,12,12,12,13,13,13,13,10,12,12,11,11,11,12,12,12,12,12,12,13,13,13,13,10,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,10,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,10,13,12,12,12,12,12,12,13,13,13,13,13,13,13,13,10,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,6,1,0,10,0,8,0,20,0,12,0,20,0,16,0,32,0,14,0,12,0,24,0,0,0,28,0,16,0,24,0,16,0,15,0,28,0,26,0,48,0,22,0,40,0,36,0,64,0,14,0,24,0,20,0,32,0,12,0,16,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,152,15,2,0,112,15,2,0,3,0,0,0,0,0,0,0,160,15,2,0,184,15,2,0,3,0,0,0,0,0,0,0,200,15,2,0,224,15,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,240,15,2,0,16,16,2,0,4,0,0,0,0,0,0,0,32,16,2,0,64,16,2,0,6,0,0,0,0,0,0,0,80,16,2,0,152,16,2,0,6,0,0,0,0,0,0,0,192,16,2,0,8,17,2,0,6,0,0,0,0,0,0,0,48,17,2,0,120,17,2,0,8,0,0,0,0,0,0,0,160,17,2,0,32,18,2,0,8,0,0,0,0,0,0,0,96,18,2,0,224,18,2,0,8,0,0,0,0,0,0,0,32,19,2,0,160,19,2,0,16,0,0,0,0,0,0,0,224,19,2,0,224,21,2,0,0,0,0,0,0,0,0,0,0,0,0,0,224,22,2,0,16,0,0,0,0,0,0,0,224,23,2,0,224,25,2,0,1,0,0,0,1,0,0,0,224,26,2,0,224,28,2,0,2,0,0,0,3,0,0,0,224,26,2,0,224,28,2,0,3,0,0,0,7,0,0,0,224,26,2,0,224,28,2,0,4,0,0,0,15,0,0,0,224,26,2,0,224,28,2,0,6,0,0,0,63,0,0,0,224,26,2,0,224,28,2,0,8,0,0,0,255,0,0,0,224,26,2,0,224,28,2,0,10,0,0,0,255,3,0,0,224,26,2,0,224,28,2,0,13,0,0,0,255,31,0,0,224,26,2,0,224,28,2,0,4,0,0,0,15,0,0,0,224,29,2,0,224,31,2,0,5,0,0,0,31,0,0,0,224,29,2,0,224,31,2,0,6,0,0,0,63,0,0,0,224,29,2,0,224,31,2,0,7,0,0,0,127,0,0,0,224,29,2,0,224,31,2,0,8,0,0,0,255,0,0,0,224,29,2,0,224,31,2,0,9,0,0,0,255,1,0,0,224,29,2,0,224,31,2,0,11,0,0,0,255,7,0,0,224,29,2,0,224,31,2,0,13,0,0,0,255,31,0,0,224,29,2,0,224,31,2,0,0,0,0,0,0,0,0,0,224,32,2,0,120,15,2,0,0,0,0,0,0,0,0,0,0,33,2,0,136,15,2,0,4,0,1,0,5,0,5,0,7,0,7,0,8,0,9,0,9,0,10,0,10,0,10,0,10,0,11,0,11,0,11,0,11,0,12,0,12,0,12,0,12,0,12,0,12,0,13,0,12,0,13,0,12,0,13,0,13,0,14,0,10,0,10,0,5,0,4,0,6,0,6,0,7,0,8,0,8,0,9,0,9,0,10,0,10,0,11,0,10,0,11,0,11,0,11,0,11,0,12,0,11,0,12,0,12,0,12,0,12,0,13,0,12,0,14,0,12,0,13,0,12,0,14,0,10,0,10,0,7,0,7,0,7,0,8,0,8,0,9,0,9,0,10,0,9,0,11,0,10,0,11,0,10,0,12,0,11,0,12,0,11,0,13,0,11,0,12,0,11,0,13,0,12,0,13,0,12,0,13,0,12,0,14,0,13,0,14,0,9,0,11,0,8,0,9,0,8,0,9,0,9,0,10,0,9,0,11,0,10,0,11,0,10,0,12,0,10,0,12,0,11,0,12,0,11,0,13,0,11,0,13,0,11,0,14,0,12,0,14,0,12,0,14,0,12,0,15,0,12,0,15,0,9,0,12,0,9,0,10,0,9,0,10,0,9,0,11,0,10,0,11,0,10,0,12,0,10,0,12,0,10,0,13,0,11,0,13,0,11,0,13,0,11,0,14,0,12,0,14,0,12,0,14,0,12,0,15,0,12,0,15,0,13,0,15,0,9,0,11,0,10,0,10,0,9,0,10,0,10,0,11,0,10,0,11,0,10,0,12,0,10,0,13,0,11,0,13,0,11,0,14,0,11,0,13,0,11,0,14,0,12,0,14,0,12,0,15,0,12,0,15,0,12,0,15,0,12,0,16,0,9,0,12,0,10,0,11,0,10,0,11,0,10,0,11,0,10,0,12,0,10,0,13,0,11,0,13,0,11,0,13,0,11,0,13,0,11,0,14,0,12,0,14,0,12,0,14,0,12,0,14,0,12,0,15,0,12,0,15,0,13,0,16,0,9,0,12,0,11,0,11,0,10,0,11,0,10,0,12,0,10,0,12,0,11,0,13,0,11,0,13,0,11,0,13,0,11,0,14,0,12,0,14,0,12,0,15,0,12,0,15,0,12,0,15,0,12,0,15,0,13,0,17,0,13,0,17,0,10,0,12,0,11,0,11,0,11,0,12,0,11,0,12,0,11,0,13,0,11,0,13,0,11,0,13,0,11,0,14,0,11,0,14,0,11,0,15,0,12,0,15,0,12,0,15,0,12,0,15,0,12,0,16,0,13,0,16,0,13,0,16,0,10,0,12,0,11,0,12,0,11,0,12,0,11,0,12,0,11,0,13,0,11,0,13,0,11,0,14,0,11,0,14,0,12,0,15,0,12,0,15,0,12,0,15,0,12,0,15,0,12,0,16,0,13,0,15,0,13,0,16,0,13,0,15,0,10,0,13,0,12,0,12,0,11,0,13,0,11,0,12,0,11,0,13,0,11,0,14,0,12,0,14,0,12,0,14,0,12,0,14,0,12,0,15,0,12,0,16,0,12,0,16,0,13,0,16,0,13,0,17,0,13,0,17,0,13,0,16,0,10,0,12,0,12,0,13,0,12,0,13,0,11,0,13,0,11,0,13,0,11,0,14,0,12,0,14,0,12,0,15,0,12,0,16,0,12,0,16,0,12,0,16,0,12,0,16,0,13,0,16,0,13,0,16,0,13,0,15,0,13,0,16,0,10,0,13,0,12,0,13,0,12,0,14,0,12,0,14,0,12,0,14,0,12,0,14,0,12,0,15,0,12,0,15,0,12,0,15,0,12,0,15,0,12,0,17,0,13,0,16,0,13,0,16,0,13,0,16,0,13,0,16,0,13,0,18,0,10,0,13,0,12,0,15,0,12,0,14,0,12,0,14,0,12,0,14,0,12,0,15,0,12,0,15,0,12,0,16,0,12,0,16,0,13,0,16,0,13,0,18,0,13,0,17,0,13,0,17,0,13,0,17,0,13,0,19,0,13,0,17,0,10,0,13,0,13,0,14,0,12,0,15,0,12,0,13,0,12,0,14,0,12,0,16,0,12,0,16,0,12,0,15,0,13,0,16,0,13,0,16,0,13,0,17,0,13,0,18,0,13,0,17,0,13,0,19,0,13,0,17,0,13,0,16,0,10,0,13,0,9,0,10,0,9,0,10,0,9,0,10,0,9,0,11,0,9,0,11,0,9,0,12,0,9,0,12,0,9,0,12,0,9,0,13,0,9,0,13,0,9,0,13,0,10,0,13,0,10,0,13,0,10,0,13,0,10,0,13,0,6,0,10,0,2,0,1,0,3,0,4,0,7,0,7,0,4,0,4,0,4,0,5,0,7,0,7,0,6,0,6,0,7,0,7,0,8,0,8,0,0,0,0,0,3,0,1,0,4,0,4,0,6,0,7,0,8,0,8,0,4,0,4,0,4,0,5,0,6,0,8,0,7,0,9,0,5,0,7,0,6,0,8,0,7,0,9,0,8,0,10,0,7,0,8,0,7,0,8,0,8,0,9,0,9,0,10,0,0,0,0,0,8,0,0,0,16,0,0,0,24,0,0,0,32,0,0,0,40,0,0,0,48,0,0,0,56,0,0,0,64,0,0,0,80,0,0,0,96,0,0,0,112,0,0,0,128,0,0,0,144,0,0,0,160,0,0,0,255,255,255,255,0,0,0,0,32,0,0,0,40,0,0,0,48,0,0,0,56,0,0,0,64,0,0,0,80,0,0,0,96,0,0,0,112,0,0,0,128,0,0,0,160,0,0,0,192,0,0,0,224,0,0,0,0,1,0,0,64,1,0,0,255,255,255,255,0,0,0,0,8,0,0,0,16,0,0,0,24,0,0,0,32,0,0,0,40,0,0,0,48,0,0,0,56,0,0,0,64,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,34,86,0,0,192,93,0,0,128,62,0,0,255,255,255,255,68,172,0,0,128,187,0,0,0,125,0,0,255,255,255,255,17,43,0,0,224,46,0,0,64,31,0,0,255,255,255,255,0,0,0,0,6,0,0,0,11,0,0,0,16,0,0,0,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,2,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,3,0,0,0,4,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,4,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,5,0,0,0,6,0,0,0,5,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,6,0,0,0,7,0,0,0,6,0,0,0,7,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,1,0,0,0,2,0,0,0,5,0,0,0,7,0,0,0,7,0,0,0,10,0,0,0,10,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,0,0,0,0,15,0,0,0,15,0,0,0,7,0,0,0,7,0,0,0,15,0,0,0,15,0,0,0,7,0,0,0,0,0,0,0,7,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,31,0,0,0,31,0,0,0,0,0,0,0,7,0,0,0,7,0,0,0,7,0,0,0,0,0,0,0,3,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,18,0,0,0,36,0,0,0,54,0,0,0,54,0,0,0,36,0,0,0,54,0,0,0,72,0,0,0,54,0,0,0,72,0,0,0,90,0,0,0,72,0,0,0,90,0,0,0,108,0,0,0,108,0,0,0,126,0,0,0,0,0,0,0,18,0,0,0,36,0,0,0,54,0,0,0,51,0,0,0,35,0,0,0,53,0,0,0,71,0,0,0,52,0,0,0,70,0,0,0,88,0,0,0,69,0,0,0,87,0,0,0,105,0,0,0,104,0,0,0,122,0,0,0,0,0,0,0,10,0,0,0,20,0,0,0,30,0,0,0,33,0,0,0,21,0,0,0,31,0,0,0,41,0,0,0,32,0,0,0,42,0,0,0,52,0,0,0,43,0,0,0,53,0,0,0,63,0,0,0,64,0,0,0,74,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,8,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,16,0,0,0,16,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,8,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,8,0,0,0,2,0,0,0,4,0,0,0,8,0,0,0,2,0,0,0,4,0,0,0,8,0,0,0,4,0,0,0,8,0,0,0,8,0,0,0,16,0,0,0,24,0,0,0,32,0,0,0,40,0,0,0,48,0,0,0,56,0,0,0,64,0,0,0,80,0,0,0,96,0,0,0,112,0,0,0,128,0,0,0,160,0,0,0,192,0,0,0,224,0,0,0,0,1,0,0,64,1], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+135016);
/* memory initializer */ allocate([16,0,0,0,16,0,0,0,16,0,0,0,16,0,0,73,78,84,69,82,78,65,76,32,69,82,82,79,82,32,73,78,32,86,66,82,32,78,69,87,32,67,79,68,69,32,40,49,51,49,51,41,44,32,112,108,101,97,115,101,32,115,101,110,100,32,98,117,103,32,114,101,112,111,114,116,10,109,97,120,98,105,116,115,61,37,100,32,117,115,101,100,98,105,116,115,61,37,100,10,0,0,0,73,78,84,69,82,78,65,76,32,69,82,82,79,82,32,73,78,32,86,66,82,32,78,69,87,32,67,79,68,69,32,40,57,56,54,41,44,32,112,108,101,97,115,101,32,115,101,110,100,32,98,117,103,32,114,101,112,111,114,116,10,0,0,0,15,15,15,15,15,15,15,15,15,15,15,7,7,7,7,7,7,7,7,7,7,0,0,0,7,7,7,7,7,7,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,69,114,114,111,114,58,32,99,97,110,39,116,32,97,108,108,111,99,97,116,101,32,86,98,114,70,114,97,109,101,115,32,98,117,102,102,101,114,10,0,73,68,51,0,0,0,0,0,1,5,3,2,4,0,3,0,0,0,0,0,193,192,0,0,129,193,0,0,64,1,0,0,1,195,0,0,192,3,0,0,128,2,0,0,65,194,0,0,1,198,0,0,192,6,0,0,128,7,0,0,65,199,0,0,0,5,0,0,193,197,0,0,129,196,0,0,64,4,0,0,1,204,0,0,192,12,0,0,128,13,0,0,65,205,0,0,0,15,0,0,193,207,0,0,129,206,0,0,64,14,0,0,0,10,0,0,193,202,0,0,129,203,0,0,64,11,0,0,1,201,0,0,192,9,0,0,128,8,0,0,65,200,0,0,1,216,0,0,192,24,0,0,128,25,0,0,65,217,0,0,0,27,0,0,193,219,0,0,129,218,0,0,64,26,0,0,0,30,0,0,193,222,0,0,129,223,0,0,64,31,0,0,1,221,0,0,192,29,0,0,128,28,0,0,65,220,0,0,0,20,0,0,193,212,0,0,129,213,0,0,64,21,0,0,1,215,0,0,192,23,0,0,128,22,0,0,65,214,0,0,1,210,0,0,192,18,0,0,128,19,0,0,65,211,0,0,0,17,0,0,193,209,0,0,129,208,0,0,64,16,0,0,1,240,0,0,192,48,0,0,128,49,0,0,65,241,0,0,0,51,0,0,193,243,0,0,129,242,0,0,64,50,0,0,0,54,0,0,193,246,0,0,129,247,0,0,64,55,0,0,1,245,0,0,192,53,0,0,128,52,0,0,65,244,0,0,0,60,0,0,193,252,0,0,129,253,0,0,64,61,0,0,1,255,0,0,192,63,0,0,128,62,0,0,65,254,0,0,1,250,0,0,192,58,0,0,128,59,0,0,65,251,0,0,0,57,0,0,193,249,0,0,129,248,0,0,64,56,0,0,0,40,0,0,193,232,0,0,129,233,0,0,64,41,0,0,1,235,0,0,192,43,0,0,128,42,0,0,65,234,0,0,1,238,0,0,192,46,0,0,128,47,0,0,65,239,0,0,0,45,0,0,193,237,0,0,129,236,0,0,64,44,0,0,1,228,0,0,192,36,0,0,128,37,0,0,65,229,0,0,0,39,0,0,193,231,0,0,129,230,0,0,64,38,0,0,0,34,0,0,193,226,0,0,129,227,0,0,64,35,0,0,1,225,0,0,192,33,0,0,128,32,0,0,65,224,0,0,1,160,0,0,192,96,0,0,128,97,0,0,65,161,0,0,0,99,0,0,193,163,0,0,129,162,0,0,64,98,0,0,0,102,0,0,193,166,0,0,129,167,0,0,64,103,0,0,1,165,0,0,192,101,0,0,128,100,0,0,65,164,0,0,0,108,0,0,193,172,0,0,129,173,0,0,64,109,0,0,1,175,0,0,192,111,0,0,128,110,0,0,65,174,0,0,1,170,0,0,192,106,0,0,128,107,0,0,65,171,0,0,0,105,0,0,193,169,0,0,129,168,0,0,64,104,0,0,0,120,0,0,193,184,0,0,129,185,0,0,64,121,0,0,1,187,0,0,192,123,0,0,128,122,0,0,65,186,0,0,1,190,0,0,192,126,0,0,128,127,0,0,65,191,0,0,0,125,0,0,193,189,0,0,129,188,0,0,64,124,0,0,1,180,0,0,192,116,0,0,128,117,0,0,65,181,0,0,0,119,0,0,193,183,0,0,129,182,0,0,64,118,0,0,0,114,0,0,193,178,0,0,129,179,0,0,64,115,0,0,1,177,0,0,192,113,0,0,128,112,0,0,65,176,0,0,0,80,0,0,193,144,0,0,129,145,0,0,64,81,0,0,1,147,0,0,192,83,0,0,128,82,0,0,65,146,0,0,1,150,0,0,192,86,0,0,128,87,0,0,65,151,0,0,0,85,0,0,193,149,0,0,129,148,0,0,64,84,0,0,1,156,0,0,192,92,0,0,128,93,0,0,65,157,0,0,0,95,0,0,193,159,0,0,129,158,0,0,64,94,0,0,0,90,0,0,193,154,0,0,129,155,0,0,64,91,0,0,1,153,0,0,192,89,0,0,128,88,0,0,65,152,0,0,1,136,0,0,192,72,0,0,128,73,0,0,65,137,0,0,0,75,0,0,193,139,0,0,129,138,0,0,64,74,0,0,0,78,0,0,193,142,0,0,129,143,0,0,64,79,0,0,1,141,0,0,192,77,0,0,128,76,0,0,65,140,0,0,0,68,0,0,193,132,0,0,129,133,0,0,64,69,0,0,1,135,0,0,192,71,0,0,128,70,0,0,65,134,0,0,1,130,0,0,192,66,0,0,128,67,0,0,65,131,0,0,0,65,0,0,193,129,0,0,129,128,0,0,64,64,0,0,51,46,57,57,46,53,0,0,76,65,77,69,51,46,57,57,114,53,0,0,0,0,0,0,76,65,77,69,51,46,57,57,114,0,0,0,0,0,0,0,49,46,48,0,0,0,0,0,104,116,116,112,58,47,47,108,97,109,101,46,115,102,46,110,101,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,50,98,105,116,115,0,0,18,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,17,34,35,36,17,37,38,39,40,41,42,43,44,17,45,46,47,16,16,48,16,16,16,16,16,16,16,49,50,51,16,52,53,16,16,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,54,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,55,17,17,17,17,56,17,57,58,59,60,61,62,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,63,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,17,64,65,17,66,67,68,69,70,71,72,73,16,16,16,74,75,76,77,78,16,16,16,79,80,16,16,16,16,81,16,16,16,16,16,16,16,16,16,17,17,17,82,83,16,16,16,16,16,16,16,16,16,16,16,17,17,17,17,84,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,17,17,85,16,16,16,16,86,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,87,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,88,89,90,91,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,92,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,254,255,255,7,254,255,255,7,0,0,0,0,0,4,32,4,255,255,127,255,255,255,127,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,195,255,3,0,31,80,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,223,60,64,215,255,255,251,255,255,255,255,255,255,255,255,255,191,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,3,252,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,254,255,255,255,127,2,254,255,255,255,255,0,0,0,0,0,255,191,182,0,255,255,255,7,7,0,0,0,255,7,255,255,255,255,255,255,255,254,255,195,255,255,255,255,255,255,255,255,255,255,255,255,239,31,254,225,255,159,0,0,255,255,255,255,255,255,0,224,255,255,255,255,255,255,255,255,255,255,255,255,3,0,255,255,255,255,255,7,48,4,255,255,255,252,255,31,0,0,255,255,255,1,0,0,0,0,0,0,0,0,253,31,0,0,0,0,0,0,240,3,255,127,255,255,255,255,255,255,255,239,255,223,225,255,207,255,254,254,238,159,249,255,255,253,197,227,159,89,128,176,207,255,3,0,238,135,249,255,255,253,109,195,135,25,2,94,192,255,63,0,238,191,251,255,255,253,237,227,191,27,1,0,207,255,0,0,238,159,249,255,255,253,237,227,159,25,192,176,207,255,2,0,236,199,61,214,24,199,255,195,199,29,129,0,192,255,0,0,238,223,253,255,255,253,239,227,223,29,96,3,207,255,0,0,236,223,253,255,255,253,239,227,223,29,96,64,207,255,6,0,236,223,253,255,255,255,255,231,223,93,128,0,207,255,0,252,236,255,127,252,255,255,251,47,127,128,95,255,0,0,12,0,254,255,255,255,255,127,255,7,63,32,255,3,0,0,0,0,150,37,240,254,174,236,255,59,95,32,255,243,0,0,0,0,1,0,0,0,255,3,0,0,255,254,255,255,255,31,254,255,3,255,255,254,255,255,255,31,0,0,0,0,0,0,0,0,255,255,255,255,255,255,127,249,255,3,255,255,231,193,255,255,127,64,255,51,255,255,255,255,191,32,255,255,255,255,255,247,255,255,255,255,255,255,255,255,255,61,127,61,255,255,255,255,255,61,255,255,255,255,61,127,61,255,127,255,255,255,255,255,255,255,61,255,255,255,255,255,255,255,255,135,0,0,0,0,255,255,0,0,255,255,255,255,255,255,255,255,255,255,31,0,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,159,255,255,254,255,255,7,255,255,255,255,255,255,255,255,255,199,1,0,255,223,15,0,255,255,15,0,255,255,15,0,255,223,13,0,255,255,255,255,255,255,207,255,255,1,128,16,255,3,0,0,0,0,255,3,255,255,255,255,255,255,255,255,255,255,255,0,255,255,255,255,255,7,255,255,255,255,255,255,255,255,63,0,255,255,255,31,255,15,255,1,192,255,255,255,255,63,31,0,255,255,255,255,255,15,255,255,255,3,255,3,0,0,0,0,255,255,255,15,255,255,255,255,255,255,255,127,254,255,31,0,255,3,255,3,128,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,239,255,239,15,255,3,0,0,0,0,255,255,255,255,255,243,255,255,255,255,255,255,191,255,3,0,255,255,255,255,255,255,63,0,255,227,255,255,255,255,255,63,0,0,0,0,0,0,0,0,0,0,0,0,0,222,111,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,255,255,63,63,255,255,255,255,63,63,255,170,255,255,255,63,255,255,255,255,255,255,223,95,220,31,207,15,255,31,220,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,128,0,0,255,31,0,0,0,0,0,0,0,0,0,0,0,0,132,252,47,62,80,189,255,243,224,67,0,0,255,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,255,255,255,255,255,255,3,0,0,255,255,255,255,255,127,255,255,255,255,255,127,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,31,120,12,0,255,255,255,255,191,32,255,255,255,255,255,255,255,128,0,0,255,255,127,0,127,127,127,127,127,127,127,127,255,255,255,255,0,0,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,0,0,0,254,3,62,31,254,255,255,255,255,255,255,255,255,255,127,224,254,255,255,255,255,255,255,255,255,255,255,247,224,255,255,255,255,63,254,255,255,255,255,255,255,255,255,255,255,127,0,0,255,255,255,7,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,63,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,31,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,31,0,0,0,0,0,0,0,0,255,255,255,255,255,63,255,31,255,255,255,15,0,0,255,255,255,255,255,127,240,143,255,255,255,128,255,255,255,255,255,255,255,255,255,255,0,0,0,0,128,255,252,255,255,255,255,255,255,255,255,255,255,255,255,121,15,0,255,7,0,0,0,0,0,0,0,0,0,255,187,247,255,255,255,0,0,0,255,255,255,255,255,255,15,0,255,255,255,255,255,255,255,255,15,0,255,3,0,0,252,8,255,255,255,255,255,7,255,255,255,255,7,0,255,255,255,31,255,255,255,255,255,255,247,255,0,128,255,3,0,0,0,0,255,255,255,255,255,255,127,0,255,63,255,3,255,255,127,4,255,255,255,255,255,255,255,127,5,0,0,56,255,255,60,0,126,126,126,0,127,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,7,255,3,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,15,0,255,255,127,248,255,255,255,255,255,15,255,255,255,255,255,255,255,255,255,255,255,255,255,63,255,255,255,255,255,255,255,255,255,255,255,255,255,3,0,0,0,0,127,0,248,224,255,253,127,95,219,255,255,255,255,255,255,255,255,255,255,255,255,255,3,0,0,0,248,255,255,255,255,255,255,255,255,255,255,255,255,63,0,0,255,255,255,255,255,255,255,255,252,255,255,255,255,255,255,0,0,0,0,0,255,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,223,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,31,0,0,255,3,254,255,255,7,254,255,255,7,192,255,255,255,255,255,255,255,255,255,255,127,252,252,252,28,0,0,0,0,255,239,255,255,127,255,255,183,255,63,255,63,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,7,0,0,0,0,0,0,0,0,255,255,255,255,255,255,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,31,255,255,255,255,255,255,1,0,0,0,0,0,255,255,255,127,0,0,255,255,255,7,0,0,0,0,0,0,255,255,255,63,255,255,255,255,15,255,62,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,63,255,3,0,0,0,0,0,0,0,0,0,0,63,253,255,255,255,255,191,145,255,255,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,63,0,255,255,255,3,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,192,0,0,0,0,0,0,0,0,111,240,239,254,255,255,15,0,0,0,0,0,255,255,255,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,63,0,255,255,63,0,255,255,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,63,0,0,0,192,255,0,0,252,255,255,255,255,255,255,1,0,0,255,255,255,1,255,3,255,255,255,255,255,255,199,255,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,30,0,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,63,0,255,3,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,31,0,255,255,255,255,255,127,0,0,248,255,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,223,255,255,255,255,255,255,255,255,223,100,222,255,235,239,255,255,255,255,255,255,255,191,231,223,223,255,255,255,123,95,252,253,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,63,255,255,255,253,255,255,247,255,255,255,247,255,255,223,255,255,255,223,255,255,127,255,255,255,127,255,255,255,253,255,255,255,253,255,255,247,207,255,255,255,255,255,255,239,255,255,255,150,254,247,10,132,234,150,170,150,247,247,94,255,251,255,15,238,251,255,15,0,0,0,0,0,0,0,0,97,108,110,117,109,0,97,108,112,104,97,0,98,108,97,110,107,0,99,110,116,114,108,0,100,105,103,105,116,0,103,114,97,112,104,0,108,111,119,101,114,0,112,114,105,110,116,0,112,117,110,99,116,0,115,112,97,99,101,0,117,112,112,101,114,0,120,100,105,103,105,116,0,0,0,0,0,0,0,0,18,16,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,16,16,34,35,16,36,37,38,39,40,41,42,43,16,44,45,46,17,47,48,17,17,49,17,17,17,50,51,52,53,54,55,56,57,17,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,58,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,59,16,60,61,62,63,64,65,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,66,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,67,16,16,68,16,69,70,71,16,72,16,73,16,16,16,16,74,75,76,77,16,16,78,16,79,80,16,16,16,16,81,16,16,16,16,16,16,16,16,16,16,16,16,16,82,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,83,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,84,85,86,87,16,16,88,89,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,90,16,91,92,93,94,95,96,97,98,16,16,16,16,16,16,16,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,254,255,0,252,1,0,0,248,1,0,0,120,0,0,0,0,255,251,223,251,0,0,128,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,0,252,255,224,175,255,255,255,255,255,255,255,255,255,255,223,255,255,255,255,255,32,64,176,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,0,0,0,0,0,134,254,255,255,255,0,64,73,0,0,0,0,0,24,0,223,255,0,200,0,0,0,0,0,0,0,1,0,60,0,0,0,0,0,0,0,0,0,0,0,0,16,224,1,30,0,96,255,191,0,0,0,0,0,0,255,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,207,3,0,0,0,3,0,32,255,127,0,0,0,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,0,0,0,0,0,0,0,0,0,16,0,32,30,0,48,0,1,0,0,0,0,0,0,0,0,16,0,32,0,0,0,0,252,15,0,0,0,0,0,0,0,16,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,32,0,0,0,0,3,0,0,0,0,0,0,0,0,16,0,32,0,0,0,0,253,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,255,7,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,255,0,0,0,0,0,0,0,16,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,63,2,0,0,0,0,0,0,0,0,0,4,0,0,0,0,16,0,0,0,0,0,0,128,0,128,192,223,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,0,0,0,0,0,254,255,255,255,0,252,255,255,0,0,0,0,0,0,0,0,252,0,0,0,0,0,0,192,255,223,255,7,0,0,0,0,0,0,0,0,0,0,128,6,0,252,0,0,24,62,0,0,128,191,0,204,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,96,255,255,255,31,0,0,255,3,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,0,0,1,0,0,24,0,0,0,0,0,0,0,0,0,56,0,0,0,0,16,0,0,0,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,254,127,47,0,0,255,3,255,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,196,255,255,255,255,0,0,0,192,0,0,0,0,0,0,0,0,1,0,224,159,0,0,0,0,127,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,16,0,0,252,255,255,255,31,0,0,0,0,0,12,0,0,0,0,0,0,64,0,12,240,0,0,0,0,0,0,192,248,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,255,0,255,255,255,33,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,127,0,0,240,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,3,224,0,224,0,224,0,96,128,248,255,255,255,252,255,255,255,255,255,127,31,252,241,127,255,127,0,0,255,255,255,3,0,0,255,255,255,255,1,0,123,3,208,193,175,66,0,12,31,188,255,255,0,0,0,0,0,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,15,0,255,255,255,255,127,0,0,0,255,7,0,0,255,255,255,255,255,255,255,255,255,255,63,0,0,0,0,0,0,252,255,255,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,31,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,135,3,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,127,255,15,0,0,0,0,0,0,0,0,255,255,255,251,255,255,255,255,255,255,255,255,255,255,15,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,63,0,0,0,255,15,30,255,255,255,1,252,193,224,0,0,0,0,0,0,0,0,0,0,0,30,1,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,255,255,255,255,15,0,0,0,255,255,255,127,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,127,0,0,0,0,0,0,192,0,224,0,0,0,0,0,0,0,0,0,0,0,128,15,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,255,255,127,0,3,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,8,0,0,0,15,255,3,0,0,0,0,0,0,240,0,0,0,0,0,0,0,0,0,16,192,0,0,255,255,3,7,0,0,0,0,0,248,0,0,0,0,8,128,0,0,0,0,0,0,0,0,0,0,8,0,255,63,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,0,0,128,11,0,0,0,0,0,0,0,128,2,0,0,192,0,0,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,255,255,255,3,127,0,255,255,255,255,247,255,127,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,254,255,0,252,1,0,0,248,1,0,0,248,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,127,0,48,135,255,255,255,255,255,143,255,0,0,0,0,0,0,224,255,255,7,255,15,0,0,0,0,0,0,255,255,255,255,255,63,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,143,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,135,255,0,255,1,0,0,0,224,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,63,252,255,63,0,0,0,3,0,0,0,0,0,0,254,3,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,225,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,7,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,63,0,255,255,255,255,127,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,63,0,0,0,0,255,255,255,255,255,255,255,255,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,127,0,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,8,0,0,0,8,0,0,32,0,0,0,32,0,0,128,0,0,0,128,0,0,0,2,0,0,0,2,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,255,255,255,255,255,15,255,255,255,255,255,255,255,255,255,255,255,255,15,0,255,127,254,127,254,255,254,255,0,0,0,0,255,7,255,255,255,127,255,255,255,255,255,255,255,15,255,255,255,255,255,7,0,0,0,0,0,0,0,0,192,255,255,255,7,0,255,255,255,255,255,7,255,1,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,1,0,191,255,255,255,255,255,255,255,255,31,255,255,15,0,255,255,255,255,223,7,0,0,255,255,1,0,255,255,255,255,255,255,255,127,253,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,30,255,255,255,255,255,255,255,63,15,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,255,255,255,255,255,255,255,255,225,255,0,0,0,0,0,0,255,255,255,255,255,255,255,255,63,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,9,0,0,0,10,0,0,0,13,0,0,0,11,0,0,0,12,0,0,0,133,0,0,0,0,32,0,0,1,32,0,0,2,32,0,0,3,32,0,0,4,32,0,0,5,32,0,0,6,32,0,0,8,32,0,0,9,32,0,0,10,32,0,0,40,32,0,0,41,32,0,0,95,32,0,0,0,48,0,0,0,0,0,0,65,0,32,26,192,0,32,31,0,1,1,47,50,1,1,5,57,1,1,15,74,1,1,45,121,1,1,5,112,3,1,3,145,3,32,17,163,3,32,9,0,4,80,16,16,4,32,32,96,4,1,33,138,4,1,53,193,4,1,13,208,4,1,63,20,5,1,19,49,5,48,38,160,1,1,5,179,1,1,3,205,1,1,15,222,1,1,17,248,1,1,39,34,2,1,17,216,3,1,23,0,30,1,149,160,30,1,95,8,31,248,8,24,31,248,6,40,31,248,8,56,31,248,8,72,31,248,6,104,31,248,8,136,31,248,8,152,31,248,8,168,31,248,8,184,31,248,2,186,31,182,2,200,31,170,4,216,31,248,2,218,31,156,2,232,31,248,2,234,31,144,2,248,31,128,2,250,31,130,2,70,2,1,9,16,5,1,3,96,33,16,16,0,44,48,47,103,44,1,5,128,44,1,99,235,44,1,3,64,166,1,45,128,166,1,23,34,167,1,13,50,167,1,61,121,167,1,3,126,167,1,9,144,167,1,3,160,167,1,9,33,255,32,26,0,0,0,0,73,0,49,1,83,0,127,1,48,1,105,0,120,1,255,0,129,1,83,2,130,1,131,1,132,1,133,1,134,1,84,2,135,1,136,1,137,1,86,2,138,1,87,2,139,1,140,1,142,1,221,1,143,1,89,2,144,1,91,2,145,1,146,1,147,1,96,2,148,1,99,2,150,1,105,2,151,1,104,2,152,1,153,1,156,1,111,2,157,1,114,2,159,1,117,2,166,1,128,2,167,1,168,1,169,1,131,2,172,1,173,1,174,1,136,2,175,1,176,1,177,1,138,2,178,1,139,2,183,1,146,2,184,1,185,1,188,1,189,1,196,1,198,1,196,1,197,1,197,1,198,1,199,1,201,1,199,1,200,1,200,1,201,1,202,1,204,1,202,1,203,1,203,1,204,1,241,1,243,1,241,1,242,1,242,1,243,1,244,1,245,1,246,1,149,1,247,1,191,1,32,2,158,1,134,3,172,3,136,3,173,3,137,3,174,3,138,3,175,3,140,3,204,3,142,3,205,3,143,3,206,3,153,3,69,3,153,3,190,31,163,3,194,3,247,3,248,3,250,3,251,3,96,30,155,30,223,0,223,0,158,30,223,0,89,31,81,31,91,31,83,31,93,31,85,31,95,31,87,31,188,31,179,31,204,31,195,31,236,31,229,31,252,31,243,31,58,2,101,44,59,2,60,2,61,2,154,1,62,2,102,44,65,2,66,2,67,2,128,1,68,2,137,2,69,2,140,2,244,3,184,3,249,3,242,3,253,3,123,3,254,3,124,3,255,3,125,3,192,4,207,4,38,33,201,3,42,33,107,0,43,33,229,0,50,33,78,33,131,33,132,33,96,44,97,44,98,44,107,2,99,44,125,29,100,44,125,2,109,44,81,2,110,44,113,2,111,44,80,2,112,44,82,2,114,44,115,44,117,44,118,44,126,44,63,2,127,44,64,2,242,44,243,44,125,167,121,29,139,167,140,167,141,167,101,2,170,167,102,2,199,16,39,45,205,16,45,45,118,3,119,3,156,3,181,0,146,3,208,3,152,3,209,3,166,3,213,3,160,3,214,3,154,3,240,3,161,3,241,3,149,3,245,3,207,3,215,3,0,0,0,0,0,0,0,0,116,111,117,112,112,101,114,0,116,111,108,111,119,101,114,0,16,16,16,18,19,20,21,22,23,24,25,26,27,28,29,30,31,16,16,32,16,16,16,33,34,35,36,37,38,39,16,16,40,16,16,16,16,16,16,16,16,16,16,16,41,42,16,16,43,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,44,16,45,46,47,48,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,49,16,16,50,51,16,52,16,16,16,16,16,16,16,16,53,16,16,16,16,16,54,55,16,16,16,16,56,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,57,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,58,59,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,255,191,182,0,0,0,0,0,0,0,31,0,255,7,0,0,0,0,0,248,255,255,0,0,1,0,0,0,0,0,0,0,0,0,0,0,192,191,159,61,0,0,0,128,2,0,0,0,255,255,255,7,0,0,0,0,0,0,0,0,0,0,192,255,1,0,0,0,0,0,0,248,15,0,0,0,192,251,239,62,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,255,255,127,7,0,0,0,0,0,0,20,254,33,254,0,12,0,0,0,2,0,0,0,0,0,0,16,30,32,0,0,12,0,0,0,6,0,0,0,0,0,0,16,134,57,2,0,0,0,35,0,6,0,0,0,0,0,0,16,190,33,0,0,12,0,0,0,2,0,0,0,0,0,0,144,30,32,64,0,12,0,0,0,4,0,0,0,0,0,0,0,1,32,0,0,0,0,0,0,0,0,0,0,0,0,0,192,193,61,96,0,12,0,0,0,0,0,0,0,0,0,0,144,64,48,0,0,12,0,0,0,0,0,0,0,0,0,0,0,30,32,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,4,92,0,0,0,0,0,0,0,0,0,0,0,242,7,128,127,0,0,0,0,0,0,0,0,0,0,0,0,242,27,0,63,0,0,0,0,0,0,0,0,0,3,0,0,160,2,0,0,0,0,0,0,254,127,223,224,255,254,255,255,255,31,64,0,0,0,0,0,0,0,0,0,0,0,0,224,253,102,0,0,0,195,1,0,30,0,100,32,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,28,0,0,0,12,0,0,0,12,0,0,0,0,0,0,0,176,63,64,254,15,32,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,135,1,4,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,1,0,0,0,0,0,0,64,127,229,31,248,159,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,208,23,4,0,0,0,0,248,15,0,3,0,0,0,60,11,0,0,0,0,0,0,64,163,3,0,0,0,0,0,0,240,207,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,247,255,253,33,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,127,0,0,240,0,248,0,0,0,124,0,0,0,0,0,0,31,252,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,247,63,0,0,0,128,0,0,0,0,0,0,0,0,0,0,3,0,68,8,0,0,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,255,255,3,0,0,0,0,0,192,63,0,0,128,255,3,0,0,0,0,0,7,0,0,0,0,0,200,19,0,0,0,0,0,0,0,0,0,0,0,0,0,126,102,0,8,16,0,0,0,0,0,0,0,0,0,0,0,0,157,193,2,0,0,0,0,48,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,33,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,110,240,0,0,0,0,0,135,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,255,127,0,0,0,0,0,0,0,3], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+144537);
/* memory initializer */ allocate([0,0,0,0,0,120,38,0,0,0,0,0,0,0,0,7,0,0,0,128,239,31,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,192,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,3,248,255,231,15,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,18,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,19,16,16,16,16,16,16,16,16,16,16,20,21,22,23,24,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,25,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,26,16,16,16,16,27,16,16,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,28,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,17,17,16,16,16,29,30,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,31,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,32,16,16,16,16,16,16,16,16,16,16,16,16,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,248,0,0,0,0,0,0,0,0,0,0,252,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,251,255,255,255,255,255,255,255,255,255,255,15,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,63,0,0,0,255,15,255,255,255,255,255,255,255,127,254,255,255,255,255,255,255,255,255,255,127,254,255,255,255,255,255,255,255,255,255,255,255,255,224,255,255,255,255,63,254,255,255,255,255,255,255,255,255,255,255,127,255,255,255,255,255,7,255,255,255,255,15,0,255,255,255,255,255,127,255,255,255,255,255,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,127,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,31,255,255,255,255,255,255,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,15,0,255,255,127,248,255,255,255,255,255,15,0,0,255,3,0,0,255,255,255,255,247,255,127,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,255,255,255,255,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,255,255,255,255,255,7,255,1,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,115,58,32,0,0,0,0,58,32,0,0,0,0,0,0,117,116,102,56,0,0,200,119,99,104,97,114,116,0,0,198,117,99,115,50,0,117,99,115,50,98,101,0,0,196,117,99,115,50,108,101,0,0,197,117,116,102,49,54,0,117,116,102,49,54,98,101,0,0,194,117,116,102,49,54,108,101,0,0,193,117,99,115,52,0,117,99,115,52,98,101,0,117,116,102,51,50,0,117,116,102,51,50,98,101,0,0,192,117,99,115,52,108,101,0,117,116,102,51,50,108,101,0,0,195,97,115,99,105,105,0,117,115,97,115,99,105,105,0,105,115,111,54,52,54,0,105,115,111,54,52,54,117,115,0,0,199,101,117,99,106,112,0,0,208,115,104,105,102,116,106,105,115,0,115,106,105,115,0,0,209,103,98,49,56,48,51,48,0,0,216,103,98,107,0,0,217,103,98,50,51,49,50,0,0,218,98,105,103,53,0,98,105,103,102,105,118,101,0,99,112,57,53,48,0,98,105,103,53,104,107,115,99,115,0,0,224,101,117,99,107,114,0,107,115,99,53,54,48,49,0,107,115,120,49,48,48,49,0,99,112,57,52,57,0,0,232,105,115,111,56,56,53,57,49,0,108,97,116,105,110,49,0,0,128,105,115,111,56,56,53,57,50,0,0,32,0,84,0,137,18,0,32,1,6,0,0,152,65,134,26,127,0,48,72,32,0,88,32,201,18,0,36,17,198,35,0,156,81,198,26,128,80,66,136,32,90,0,0,192,4,0,16,113,1,0,29,0,112,2,0,41,0,0,192,7,33,48,1,5,0,0,88,1,0,0,94,208,1,128,29,0,0,128,6,0,91,0,0,0,5,0,20,129,1,0,30,0,128,2,0,42,0,0,0,8,34,52,17,5,0,0,92,1,0,0,95,212,1,192,29,0,0,144,70,36,105,115,111,56,56,53,57,51,0,0,32,0,212,0,9,0,0,4,48,3,0,0,244,64,70,11,63,0,16,64,32,0,216,0,0,0,0,0,64,3,0,0,248,80,134,11,64,0,16,128,32,0,0,0,64,0,0,108,144,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,188,0,0,0,43,0,0,0,0,0,200,33,6,0,0,0,0,64,0,0,112,160,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,192,0,0,0,44,0,0,0,0,0,204,49,70,36,105,115,111,56,56,53,57,52,0,0,32,0,84,48,4,23,0,220,96,4,0,0,152,49,66,12,108,0,48,8,0,0,88,32,73,23,0,224,112,196,35,0,156,65,130,12,109,72,65,200,20,17,0,0,0,0,0,0,0,192,14,29,0,112,2,0,37,0,0,64,14,33,56,65,69,16,0,0,0,0,0,0,224,1,0,0,0,184,1,7,0,18,0,0,0,0,0,0,0,0,15,30,0,128,2,0,38,0,0,128,14,34,60,81,133,16,0,0,0,0,0,0,228,1,0,0,0,188,17,71,36,105,115,111,56,56,53,57,53,0,0,32,0,136,51,14,57,229,152,115,14,58,233,168,179,14,59,237,0,224,206,59,240,196,35,207,60,244,212,99,207,61,248,228,163,207,62,252,244,227,207,63,0,5,36,208,64,4,21,100,208,65,8,37,164,208,66,12,53,228,208,67,16,69,36,209,68,20,85,100,209,69,24,101,164,209,70,28,117,228,209,71,32,133,36,210,72,36,149,100,210,73,40,165,164,210,74,44,181,228,210,75,53,194,20,147,76,51,209,84,147,77,55,225,148,147,78,59,13,192,83,79,105,115,111,56,56,53,57,54,0,0,32,0,4,16,64,0,0,4,16,64,0,1,4,16,64,0,115,1,16,64,0,1,4,16,64,0,1,4,16,64,0,1,4,16,0,93,1,4,16,64,93,1,216,117,23,94,121,233,181,23,95,125,249,245,23,96,129,9,54,24,97,133,25,118,24,98,137,41,182,24,99,141,57,246,88,0,1,4,16,64,0,144,69,38,217,100,148,85,102,217,101,152,101,166,217,102,156,117,230,217,103,160,133,38,90,0,1,4,16,64,0,1,4,16,64,0,1,4,16,64,0,105,115,111,56,56,53,57,55,0,0,32,0,144,88,34,0,51,210,8,0,0,0,0,160,9,0,0,0,16,128,136,0,0,0,0,0,155,112,210,9,0,158,124,2,10,0,161,0,32,202,40,164,148,98,202,41,168,164,162,202,42,172,180,226,202,43,176,196,34,203,44,180,212,18,128,45,183,224,146,139,46,187,240,210,139,47,191,0,19,140,48,195,16,83,140,49,199,32,147,140,50,203,48,211,140,51,207,64,19,141,52,211,80,83,141,53,215,96,147,141,54,219,112,211,141,55,223,128,19,78,0,105,115,111,56,56,53,57,56,0,0,32,0,4,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,0,0,0,0,0,64,0,1,4,16,64,0,1,4,16,64,0,1,4,16,64,0,1,4,16,64,0,1,4,16,64,0,1,4,16,64,0,1,4,16,64,0,1,4,16,192,136,83,81,85,149,85,87,97,149,149,86,91,113,213,149,87,95,129,21,150,88,99,145,85,150,89,103,161,149,150,90,107,177,213,86,0,1,120,248,97,0,105,115,111,56,56,53,57,57,0,0,80,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,244,64,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,80,6,0,105,115,111,56,56,53,57,49,48,0,0,32,0,84,48,66,12,57,220,16,4,0,70,132,96,6,27,131,0,0,135,20,0,88,64,130,12,58,224,32,4,0,71,136,112,70,27,132,136,24,199,20,17,0,0,0,0,0,0,0,192,14,29,0,112,2,0,37,0,0,0,0,0,56,65,5,0,0,0,0,128,27,0,224,1,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,0,15,30,0,128,2,0,38,0,0,0,0,0,60,81,5,0,0,0,0,192,27,0,228,1,0,0,0,0,0,192,16,105,115,111,56,56,53,57,49,49,0,116,105,115,54,50,48,0,0,32,0,188,6,91,108,178,205,70,91,109,182,221,134,91,110,186,237,198,91,111,190,253,6,92,112,194,13,71,92,113,198,29,135,92,114,202,45,199,92,115,206,61,7,93,116,210,77,71,93,117,214,93,135,93,118,218,109,199,93,119,222,125,7,94,120,226,141,71,94,121,230,157,135,94,0,1,4,16,64,122,234,173,199,94,123,238,189,7,95,124,242,205,71,95,125,246,221,135,95,126,250,237,199,95,127,254,253,7,96,128,2,14,72,96,129,1,4,16,64,0,105,115,111,56,56,53,57,49,51,0,0,32,0,160,8,0,0,0,164,8,0,0,13,0,192,5,0,0,0,0,192,2,0,0,0,0,0,39,2,0,0,0,16,0,208,5,0,0,0,0,128,3,21,236,16,193,5,0,0,112,194,8,29,0,240,71,9,49,4,145,131,17,102,48,225,4,0,84,0,0,0,0,120,40,1,6,28,0,4,50,8,0,22,240,32,1,6,0,0,128,2,9,30,0,0,136,9,50,8,161,195,17,103,52,241,4,0,85,0,0,0,0,121,44,17,70,28,0,8,66,72,137,105,115,111,56,56,53,57,49,52,0,0,32,0,24,120,32,0,27,112,128,32,0,20,2,96,97,130,26,2,0,128,31,10,46,248,2,12,12,54,8,128,131,21,62,120,33,132,27,98,152,97,132,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,0,0,0,0,0,0,0,128,132,0,0,0,0,0,0,0,192,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,0,0,0,0,0,0,0,192,132,0,0,0,0,0,0,0,208,7,0,105,115,111,56,56,53,57,49,53,0,108,97,116,105,110,57,0,0,36,51,2,96,6,0,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,131,0,0,0,0,132,0,0,0,0,88,100,225,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,115,111,56,56,53,57,49,54,0,0,32,0,84,96,129,18,51,166,104,6,0,103,0,160,8,0,127,0,0,72,32,0,0,208,193,18,131,160,8,0,0,132,120,176,8,0,88,100,225,135,32,0,0,0,192,4,0,92,0,0,0,0,0,0,0,0,0,0,0,0,0,33,48,1,0,0,0,88,1,0,24,118,0,0,0,0,0,156,192,8,0,0,0,0,0,5,0,96,0,0,0,0,0,0,0,0,0,0,0,0,0,34,52,1,0,0,0,92,1,64,24,119,0,0,0,0,0,160,208,8,0,99,112,49,50,53,48,0,119,105,110,100,111,119,115,49,50,53,48,0,0,0,51,6,96,98,0,41,182,168,226,138,1,184,104,198,139,96,168,49,200,31,1,144,88,226,137,40,178,8,98,136,1,216,120,6,140,97,172,65,8,32,0,60,2,137,18,0,84,0,0,0,0,0,64,6,0,0,0,0,64,32,0,0,32,201,18,0,0,0,0,0,0,88,80,6,0,72,80,146,132,32,90,0,0,192,4,0,16,113,1,0,29,0,112,2,0,41,0,0,192,7,33,48,1,5,0,0,88,1,0,0,94,208,1,128,29,0,0,128,6,0,91,0,0,0,5,0,20,129,1,0,30,0,128,2,0,42,0,0,0,8,34,52,17,5,0,0,92,1,0,0,95,212,1,192,29,0,0,144,70,36,99,112,49,50,53,49,0,119,105,110,100,111,119,115,49,50,53,49,0,0,0,227,144,99,162,76,41,182,168,226,138,51,186,168,206,139,235,180,195,206,59,49,145,88,226,137,40,178,8,98,136,1,216,136,19,140,57,237,164,83,79,0,184,195,83,58,0,248,4,0,0,226,0,80,14,0,0,0,0,0,58,0,0,112,78,77,63,1,0,0,0,48,213,56,19,0,55,153,67,147,77,240,196,35,207,60,244,212,99,207,61,248,228,163,207,62,252,244,227,207,63,0,5,36,208,64,4,21,100,208,65,8,37,164,208,66,12,53,228,208,67,16,69,36,209,68,20,85,100,209,69,24,101,164,209,70,28,117,228,209,71,32,133,36,210,72,36,149,100,210,73,40,165,164,210,74,44,181,228,210,75,99,112,49,50,53,50,0,119,105,110,100,111,119,115,49,50,53,50,0,0,0,51,6,96,98,33,41,182,168,226,138,142,184,104,198,139,88,4,48,72,0,1,144,88,226,137,40,178,8,98,136,147,216,120,6,140,89,4,64,136,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,112,49,50,53,51,0,119,105,110,100,111,119,115,49,50,53,51,0,0,0,51,6,96,98,33,41,182,168,226,138,1,184,24,192,139,1,4,16,64,0,1,144,88,226,137,40,178,8,98,136,1,216,24,0,140,1,4,16,64,0,0,112,210,9,0,0,0,0,0,0,0,0,16,0,0,0,0,0,128,136,0,0,0,0,0,155,0,0,0,0,158,124,2,10,0,161,0,32,202,40,164,148,98,202,41,168,164,162,202,42,172,180,226,202,43,176,196,34,203,44,180,212,18,128,45,183,224,146,139,46,187,240,210,139,47,191,0,19,140,48,195,16,83,140,49,199,32,147,140,50,203,48,211,140,51,207,64,19,141,52,211,80,83,141,53,215,96,147,141,54,219,112,211,141,55,223,128,19,78,0,99,112,49,50,53,52,0,119,105,110,100,111,119,115,49,50,53,52,0,0,0,51,6,96,98,33,41,182,168,226,138,142,184,104,198,139,88,4,16,64,0,1,144,88,226,137,40,178,8,98,136,147,216,120,6,140,89,4,16,128,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,244,64,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,80,6,0,99,112,49,50,53,53,0,119,105,110,100,111,119,115,49,50,53,53,0,0,0,51,6,96,98,33,41,182,168,226,138,142,184,24,192,139,1,4,16,64,0,1,144,88,226,137,40,178,8,98,136,147,216,24,0,140,1,4,16,64,0,0,0,0,0,0,49,2,0,0,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,0,0,0,0,0,0,0,64,5,37,212,80,68,21,101,212,81,72,37,21,128,82,75,49,213,148,83,79,65,21,149,84,110,189,5,87,92,114,5,16,64,0,1,4,16,64,0,83,81,85,149,85,87,97,149,149,86,91,113,213,149,87,95,129,21,150,88,99,145,85,150,89,103,161,149,150,90,107,177,213,86,0,1,120,248,97,0,99,112,49,50,53,54,0,119,105,110,100,111,119,115,49,50,53,54,0,0,0,51,146,102,98,33,41,182,168,226,138,142,184,56,218,139,88,148,134,154,105,170,145,88,226,137,40,178,8,98,136,169,217,120,26,140,89,112,216,225,106,0,204,5,0,0,0,0,0,0,0,0,0,192,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,23,0,0,0,0,64,93,173,217,117,23,94,121,233,181,23,95,125,249,245,23,96,129,9,54,24,97,133,25,118,24,98,137,41,182,24,0,140,53,230,216,99,144,69,38,217,100,0,80,6,64,101,150,93,134,25,0,0,0,0,0,0,153,105,6,0,0,155,113,214,153,103,0,124,6,26,0,161,1,32,26,0,0,120,248,161,107,99,112,49,50,53,55,0,119,105,110,100,111,119,115,49,50,53,55,0,0,0,51,6,96,98,0,41,182,168,226,138,1,184,24,192,139,1,16,240,136,2,1,144,88,226,137,40,178,8,98,136,1,216,24,0,140,1,24,32,73,0,0,4,0,0,0,0,4,0,0,0,13,0,192,5,0,0,0,0,192,2,0,0,0,0,0,0,0,0,0,0,16,0,208,5,0,0,0,0,128,3,21,236,16,193,5,0,0,112,194,8,29,0,240,71,9,49,4,145,131,17,102,48,225,4,0,84,0,0,0,0,120,40,1,6,28,0,4,50,8,0,22,240,32,1,6,0,0,128,2,9,30,0,0,136,9,50,8,161,195,17,103,52,241,4,0,85,0,0,0,0,121,44,17,70,28,0,8,66,72,36,99,112,49,50,53,56,0,119,105,110,100,111,119,115,49,50,53,56,0,0,0,51,6,96,98,33,41,182,168,226,138,142,184,24,192,139,88,4,16,64,0,1,144,88,226,137,40,178,8,98,136,147,216,24,0,140,89,4,16,128,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,4,0,0,0,0,0,0,0,0,0,0,149,0,0,0,0,33,0,128,9,0,0,24,2,0,0,0,0,0,0,0,0,32,114,9,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,150,0,0,0,0,34,0,144,9,0,0,28,2,0,0,0,0,0,0,0,0,36,34,35,0,107,111,105,56,114,0,0,0,62,254,8,100,144,66,14,73,100,145,70,30,137,164,153,103,162,153,166,154,107,178,217,38,143,110,222,136,99,142,58,238,40,64,143,7,32,144,192,3,73,42,185,36,76,76,54,233,228,147,80,70,41,229,148,84,86,105,229,149,88,102,169,165,56,91,114,217,165,151,95,130,25,166,152,99,146,89,102,1,46,65,20,145,73,20,85,68,210,68,37,97,148,145,70,27,113,212,145,71,31,189,4,82,72,34,141,100,145,68,44,173,116,17,74,45,165,116,146,74,14,193,19,143,65,244,212,67,208,60,5,225,147,143,62,251,240,211,143,63,255,60,4,80,64,2,13,100,143,60,12,45,116,15,66,13,37,116,144,66,107,111,105,56,117,0,0,0,62,254,8,100,144,66,14,73,100,145,70,30,137,164,153,103,162,153,166,154,107,178,217,38,143,110,222,136,99,142,58,238,40,64,143,7,32,144,192,3,73,42,185,36,76,51,53,89,147,77,80,70,41,229,148,84,254,100,229,149,88,102,169,165,56,229,112,121,14,58,95,130,25,166,152,99,250,84,102,1,46,65,20,145,73,20,85,68,210,68,37,97,148,145,70,27,113,212,145,71,31,189,4,82,72,34,141,100,145,68,44,173,116,17,74,45,165,116,146,74,14,193,19,143,65,244,212,67,208,60,5,225,147,143,62,251,240,211,143,63,255,60,4,80,64,2,13,100,143,60,12,45,116,15,66,13,37,116,144,66,0,0,0,0,0,0,0,0,0,48,1,48,2,48,12,255,14,255,251,48,26,255,27,255,31,255,1,255,155,48,156,48,180,0,64,255,168,0,62,255,227,255,63,255,253,48,254,48,157,48,158,48,3,48,221,78,5,48,6,48,7,48,252,48,21,32,16,32,15,255,92,0,28,48,22,32,92,255,38,32,37,32,24,32,25,32,28,32,29,32,8,255,9,255,20,48,21,48,59,255,61,255,91,255,93,255,8,48,9,48,10,48,11,48,12,48,13,48,14,48,15,48,16,48,17,48,11,255,18,34,177,0,215,0,247,0,29,255,96,34,28,255,30,255,102,34,103,34,30,34,52,34,66,38,64,38,176,0,50,32,51,32,3,33,229,255,4,255,162,0,163,0,5,255,3,255,6,255,10,255,32,255,167,0,6,38,5,38,203,37,207,37,206,37,199,37,198,37,161,37,160,37,179,37,178,37,189,37,188,37,59,32,18,48,146,33,144,33,145,33,147,33,19,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,34,11,34,134,34,135,34,130,34,131,34,42,34,41,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,34,40,34,172,0,210,33,212,33,0,34,3,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,34,165,34,18,35,2,34,7,34,97,34,82,34,106,34,107,34,26,34,61,34,29,34,53,34,43,34,44,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,33,48,32,111,38,109,38,106,38,32,32,33,32,182,0,0,0,0,0,0,0,0,0,239,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,255,17,255,18,255,19,255,20,255,21,255,22,255,23,255,24,255,25,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,255,34,255,35,255,36,255,37,255,38,255,39,255,40,255,41,255,42,255,43,255,44,255,45,255,46,255,47,255,48,255,49,255,50,255,51,255,52,255,53,255,54,255,55,255,56,255,57,255,58,255,0,0,0,0,0,0,0,0,0,0,0,0,65,255,66,255,67,255,68,255,69,255,70,255,71,255,72,255,73,255,74,255,75,255,76,255,77,255,78,255,79,255,80,255,81,255,82,255,83,255,84,255,85,255,86,255,87,255,88,255,89,255,90,255,0,0,0,0,0,0,0,0,65,48,66,48,67,48,68,48,69,48,70,48,71,48,72,48,73,48,74,48,75,48,76,48,77,48,78,48,79,48,80,48,81,48,82,48,83,48,84,48,85,48,86,48,87,48,88,48,89,48,90,48,91,48,92,48,93,48,94,48,95,48,96,48,97,48,98,48,99,48,100,48,101,48,102,48,103,48,104,48,105,48,106,48,107,48,108,48,109,48,110,48,111,48,112,48,113,48,114,48,115,48,116,48,117,48,118,48,119,48,120,48,121,48,122,48,123,48,124,48,125,48,126,48,127,48,128,48,129,48,130,48,131,48,132,48,133,48,134,48,135,48,136,48,137,48,138,48,139,48,140,48,141,48,142,48,143,48,144,48,145,48,146,48,147,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,161,48,162,48,163,48,164,48,165,48,166,48,167,48,168,48,169,48,170,48,171,48,172,48,173,48,174,48,175,48,176,48,177,48,178,48,179,48,180,48,181,48,182,48,183,48,184,48,185,48,186,48,187,48,188,48,189,48,190,48,191,48,192,48,193,48,194,48,195,48,196,48,197,48,198,48,199,48,200,48,201,48,202,48,203,48,204,48,205,48,206,48,207,48,208,48,209,48,210,48,211,48,212,48,213,48,214,48,215,48,216,48,217,48,218,48,219,48,220,48,221,48,222,48,223,48,224,48,225,48,226,48,227,48,228,48,229,48,230,48,231,48,232,48,233,48,234,48,235,48,236,48,237,48,238,48,239,48,240,48,241,48,242,48,243,48,244,48,245,48,246,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,145,3,146,3,147,3,148,3,149,3,150,3,151,3,152,3,153,3,154,3,155,3,156,3,157,3,158,3,159,3,160,3,161,3,163,3,164,3,165,3,166,3,167,3,168,3,169,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,177,3,178,3,179,3,180,3,181,3,182,3,183,3,184,3,185,3,186,3,187,3,188,3,189,3,190,3,191,3,192,3,193,3,195,3,196,3,197,3,198,3,199,3,200,3,201,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,4,17,4,18,4,19,4,20,4,21,4,1,4,22,4,23,4,24,4,25,4,26,4,27,4,28,4,29,4,30,4,31,4,32,4,33,4,34,4,35,4,36,4,37,4,38,4,39,4,40,4,41,4,42,4,43,4,44,4,45,4,46,4,47,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,4,49,4,50,4,51,4,52,4,53,4,81,4,54,4,55,4,56,4,57,4,58,4,59,4,60,4,61,4,62,4,63,4,64,4,65,4,66,4,67,4,68,4,69,4,70,4,71,4,72,4,73,4,74,4,75,4,76,4,77,4,78,4,79,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,2,37,12,37,16,37,24,37,20,37,28,37,44,37,36,37,52,37,60,37,1,37,3,37,15,37,19,37,27,37,23,37,35,37,51,37,43,37,59,37,75,37,32,37,47,37,40,37,55,37,63,37,29,37,48,37,37,37,56,37,66,37], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+154777);
/* memory initializer */ allocate([156,78,22,85,3,90,63,150,192,84,27,97,40,99,246,89,34,144,117,132,28,131,80,122,170,96,225,99,37,110,237,101,102,132,166,130,245,155,147,104,39,87,161,101,113,98,155,91,208,89,123,134,244,152,98,125,190,125,142,155,22,98,159,124,183,136,137,91,181,94,9,99,151,102,72,104,199,149,141,151,79,103,229,78,10,79,77,79,157,79,73,80,242,86,55,89,212,89,1,90,9,92,223,96,15,97,112,97,19,102,5,105,186,112,79,117,112,117,251,121,173,125,239,125,195,128,14,132,99,136,2,139,85,144,122,144,59,83,149,78,165,78,223,87,178,128,193,144,239,120,0,78,241,88,162,110,56,144,50,122,40,131,139,130,47,156,65,81,112,83,189,84,225,84,224,86,251,89,21,95,242,152,235,109,228,128,45,133,98,150,112,150,160,150,251,151,11,84,243,83,135,91,207,112,189,127,194,143,232,150,111,83,92,157,186,122,17,78,147,120,252,129,38,110,24,86,4,85,29,107,26,133,59,156,229,89,169,83,102,109,220,116,143,149,66,86,145,78,75,144,242,150,79,131,12,153,225,83,182,85,48,91,113,95,32,102,243,102,4,104,56,108,243,108,41,109,91,116,200,118,78,122,52,152,241,130,91,136,96,138,237,146,178,109,171,117,202,118,197,153,166,96,1,139,138,141,178,149,142,105,173,83,134,81,18,87,48,88,68,89,180,91,246,94,40,96,169,99,244,99,191,108,20,111,142,112,20,113,89,113,213,113,63,115,1,126,118,130,209,130,151,133,96,144,91,146,27,157,105,88,188,101,90,108,37,117,249,81,46,89,101,89,128,95,220,95,188,98,250,101,42,106,39,107,180,107,139,115,193,127,86,137,44,157,14,157,196,158,161,92,150,108,123,131,4,81,75,92,182,97,198,129,118,104,97,114,89,78,250,79,120,83,105,96,41,110,79,122,243,151,11,78,22,83,238,78,85,79,61,79,161,79,115,79,160,82,239,83,9,86,15,89,193,90,182,91,225,91,209,121,135,102,156,103,182,103,76,107,179,108,107,112,194,115,141,121,190,121,60,122,135,123,177,130,219,130,4,131,119,131,239,131,211,131,102,135,178,138,41,86,168,140,230,143,78,144,30,151,138,134,196,79,232,92,17,98,89,114,59,117,229,129,189,130,254,134,192,140,197,150,19,153,213,153,203,78,26,79,227,137,222,86,74,88,202,88,251,94,235,95,42,96,148,96,98,96,208,97,18,98,208,98,57,101,65,155,102,102,176,104,119,109,112,112,76,117,134,118,117,125,165,130,249,135,139,149,142,150,157,140,241,81,190,82,22,89,179,84,179,91,22,93,104,97,130,105,175,109,141,120,203,132,87,136,114,138,167,147,184,154,108,109,168,153,217,134,163,87,255,103,206,134,14,146,131,82,135,86,4,84,211,94,225,98,185,100,60,104,56,104,187,107,114,115,186,120,107,122,154,137,210,137,107,141,3,143,237,144,163,149,148,150,105,151,102,91,179,92,125,105,77,152,78,152,155,99,32,123,43,106,127,106,182,104,13,156,95,111,114,82,157,85,112,96,236,98,59,109,7,110,209,110,91,132,16,137,68,143,20,78,57,156,246,83,27,105,58,106,132,151,42,104,92,81,195,122,178,132,220,145,140,147,91,86,40,157,34,104,5,131,49,132,165,124,8,82,197,130,230,116,126,78,131,79,160,81,210,91,10,82,216,82,231,82,251,93,154,85,42,88,230,89,140,91,152,91,219,91,114,94,121,94,163,96,31,97,99,97,190,97,219,99,98,101,209,103,83,104,250,104,62,107,83,107,87,108,34,111,151,111,69,111,176,116,24,117,227,118,11,119,255,122,161,123,33,124,233,125,54,127,240,127,157,128,102,130,158,131,179,137,204,138,171,140,132,144,81,148,147,149,145,149,162,149,101,150,211,151,40,153,24,130,56,78,43,84,184,92,204,93,169,115,76,118,60,119,169,92,235,127,11,141,193,150,17,152,84,152,88,152,1,79,14,79,113,83,156,85,104,86,250,87,71,89,9,91,196,91,144,92,12,94,126,94,204,95,238,99,58,103,215,101,226,101,31,103,203,104,196,104,95,106,48,94,197,107,23,108,125,108,127,117,72,121,99,91,0,122,0,125,189,95,143,137,24,138,180,140,119,141,204,142,29,143,226,152,14,154,60,155,128,78,125,80,0,81,147,89,156,91,47,98,128,98,236,100,58,107,160,114,145,117,71,121,169,127,251,135,188,138,112,139,172,99,202,131,160,151,9,84,3,84,171,85,84,104,88,106,112,138,39,120,117,103,205,158,116,83,162,91,26,129,80,134,6,144,24,78,69,78,199,78,17,79,202,83,56,84,174,91,19,95,37,96,81,101,61,103,66,108,114,108,227,108,120,112,3,116,118,122,174,122,8,123,26,125,254,124,102,125,231,101,91,114,187,83,69,92,232,93,210,98,224,98,25,99,32,110,90,134,49,138,221,141,248,146,1,111,166,121,90,155,168,78,171,78,172,78,155,79,160,79,209,80,71,81,246,122,113,81,246,81,84,83,33,83,127,83,235,83,172,85,131,88,225,92,55,95,74,95,47,96,80,96,109,96,31,99,89,101,75,106,193,108,194,114,237,114,239,119,248,128,5,129,8,130,78,133,247,144,225,147,255,151,87,153,90,154,240,78,221,81,45,92,129,102,109,105,64,92,242,102,117,105,137,115,80,104,129,124,197,80,228,82,71,87,254,93,38,147,164,101,35,107,61,107,52,116,129,121,189,121,75,123,202,125,185,130,204,131,127,136,95,137,57,139,209,143,209,145,31,84,128,146,93,78,54,80,229,83,58,83,215,114,150,115,233,119,230,130,175,142,198,153,200,153,210,153,119,81,26,97,94,134,176,85,122,122,118,80,211,91,71,144,133,150,50,78,219,106,231,145,81,92,72,92,152,99,159,122,147,108,116,151,97,143,170,122,138,113,136,150,130,124,23,104,112,126,81,104,108,147,242,82,27,84,171,133,19,138,164,127,205,142,225,144,102,83,136,136,65,121,194,79,190,80,17,82,68,81,83,85,45,87,234,115,139,87,81,89,98,95,132,95,117,96,118,97,103,97,169,97,178,99,58,100,108,101,111,102,66,104,19,110,102,117,61,122,251,124,76,125,153,125,75,126,107,127,14,131,74,131,205,134,8,138,99,138,102,139,253,142,26,152,143,157,184,130,206,143,232,155,135,82,31,98,131,100,192,111,153,150,65,104,145,80,32,107,122,108,84,111,116,122,80,125,64,136,35,138,8,103,246,78,57,80,38,80,101,80,124,81,56,82,99,82,167,85,15,87,5,88,204,90,250,94,178,97,248,97,243,98,114,99,28,105,41,106,125,114,172,114,46,115,20,120,111,120,121,125,12,119,169,128,139,137,25,139,226,140,210,142,99,144,117,147,122,150,85,152,19,154,120,158,67,81,159,83,179,83,123,94,38,95,27,110,144,110,132,115,254,115,67,125,55,130,0,138,250,138,80,150,78,78,11,80,228,83,124,84,250,86,209,89,100,91,241,93,171,94,39,95,56,98,69,101,175,103,86,110,208,114,202,124,180,136,161,128,225,128,240,131,78,134,135,138,232,141,55,146,199,150,103,152,19,159,148,78,146,78,13,79,72,83,73,84,62,84,47,90,140,95,161,95,159,96,167,104,142,106,90,116,129,120,158,138,164,138,119,139,144,145,94,78,201,155,164,78,124,79,175,79,25,80,22,80,73,81,108,81,159,82,185,82,254,82,154,83,227,83,17,84,14,84,137,85,81,87,162,87,125,89,84,91,93,91,143,91,229,93,231,93,247,93,120,94,131,94,154,94,183,94,24,95,82,96,76,97,151,98,216,98,167,99,59,101,2,102,67,102,244,102,109,103,33,104,151,104,203,105,95,108,42,109,105,109,47,110,157,110,50,117,135,118,108,120,63,122,224,124,5,125,24,125,94,125,177,125,21,128,3,128,175,128,177,128,84,129,143,129,42,130,82,131,76,136,97,136,27,139,162,140,252,140,202,144,117,145,113,146,63,120,252,146,164,149,77,150,5,152,153,153,216,154,59,157,91,82,171,82,247,83,8,84,213,88,247,98,224,111,106,140,95,143,185,158,75,81,59,82,74,84,253,86,64,122,119,145,96,157,210,158,68,115,9,111,112,129,17,117,253,95,218,96,168,154,219,114,188,143,100,107,3,152,202,78,240,86,100,87,190,88,90,90,104,96,199,97,15,102,6,102,57,104,177,104,247,109,213,117,58,125,110,130,66,155,155,78,80,79,201,83,6,85,111,93,230,93,238,93,251,103,153,108,115,116,2,120,80,138,150,147,223,136,80,87,167,94,43,99,181,80,172,80,141,81,0,103,201,84,94,88,187,89,176,91,105,95,77,98,161,99,61,104,115,107,8,110,125,112,199,145,128,114,21,120,38,120,109,121,142,101,48,125,220,131,193,136,9,143,155,150,100,82,40,87,80,103,106,127,161,140,180,81,66,87,42,150,58,88,138,105,180,128,178,84,14,93,252,87,149,120,250,157,92,79,74,82,139,84,62,100,40,102,20,103,245,103,132,122,86,123,34,125,47,147,92,104,173,155,57,123,25,83,138,81,55,82,223,91,246,98,174,100,230,100,45,103,186,107,169,133,209,150,144,118,214,155,76,99,6,147,171,155,191,118,82,102,9,78,152,80,194,83,113,92,232,96,146,100,99,101,95,104,230,113,202,115,35,117,151,123,130,126,149,134,131,139,219,140,120,145,16,153,172,101,171,102,139,107,213,78,212,78,58,79,127,79,58,82,248,83,242,83,227,85,219,86,235,88,203,89,201,89,255,89,80,91,77,92,2,94,43,94,215,95,29,96,7,99,47,101,92,91,175,101,189,101,232,101,157,103,98,107,123,107,15,108,69,115,73,121,193,121,248,124,25,125,43,125,162,128,2,129,243,129,150,137,94,138,105,138,102,138,140,138,238,138,199,140,220,140,204,150,252,152,111,107,139,78,60,79,141,79,80,81,87,91,250,91,72,97,1,99,66,102,33,107,203,110,187,108,62,114,189,116,212,117,193,120,58,121,12,128,51,128,234,129,148,132,158,143,80,108,127,158,15,95,88,139,43,157,250,122,248,142,141,91,235,150,3,78,241,83,247,87,49,89,201,90,164,91,137,96,127,110,6,111,190,117,234,140,159,91,0,133,224,123,114,80,244,103,157,130,97,92,74,133,30,126,14,130,153,81,4,92,104,99,102,141,156,101,110,113,62,121,23,125,5,128,29,139,202,142,110,144,199,134,170,144,31,80,250,82,58,92,83,103,124,112,53,114,76,145,200,145,43,147,229,130,194,91,49,95,249,96,59,78,214,83,136,91,75,98,49,103,138,107,233,114,224,115,46,122,107,129,163,141,82,145,150,153,18,81,215,83,106,84,255,91,136,99,57,106,172,125,0,151,218,86,206,83,104,84,151,91,49,92,222,93,238,79,1,97,254,98,50,109,192,121,203,121,66,125,77,126,210,127,237,129,31,130,144,132,70,136,114,137,144,139,116,142,47,143,49,144,75,145,108,145,198,150,156,145,192,78,79,79,69,81,65,83,147,95,14,98,212,103,65,108,11,110,99,115,38,126,205,145,131,146,212,83,25,89,191,91,209,109,93,121,46,126,155,124,126,88,159,113,250,81,83,136,240,143,202,79,251,92,37,102,172,119,227,122,28,130,255,153,198,81,170,95,236,101,111,105,137,107,243,109,150,110,100,111,254,118,20,125,225,93,117,144,135,145,6,152,230,81,29,82,64,98,145,102,217,102,26,110,182,94,210,125,114,127,248,102,175,133,247,133,248,138,169,82,217,83,115,89,143,94,144,95,85,96,228,146,100,150,183,80,31,81,221,82,32,83,71,83,236,83,232,84,70,85,49,85,23,86,104,89,190,89,60,90,181,91,6,92,15,92,17,92,26,92,132,94,138,94,224,94,112,95,127,98,132,98,219,98,140,99,119,99,7,102,12,102,45,102,118,102,126,103,162,104,31,106,53,106,188,108,136,109,9,110,88,110,60,113,38,113,103,113,199,117,1,119,93,120,1,121,101,121,240,121,224,122,17,123,167,124,57,125,150,128,214,131,139,132,73,133,93,136,243,136,31,138,60,138,84,138,115,138,97,140,222,140,164,145,102,146,126,147,24,148,156,150,152,151,10,78,8,78,30,78,87,78,151,81,112,82,206,87,52,88,204,88,34,91,56,94,197,96,254,100,97,103,86,103,68,109,182,114,115,117,99,122,184,132,114,139,184,145,32,147,49,86,244,87,254,152,237,98,13,105,150,107,237,113,84,126,119,128,114,130,230,137,223,152,85,135,177,143,59,92,56,79,225,79,181,79,7,85,32,90,221,91,233,91,195,95,78,97,47,99,176,101,75,102,238,104,155,105,120,109,241,109,51,117,185,117,31,119,94,121,230,121,51,125,227,129,175,130,170,133,170,137,58,138,171,142,155,143,50,144,221,145,7,151,186,78,193,78,3,82,117,88,236,88,11,92,26,117,61,92,78,129,10,138,197,143,99,150,109,151,37,123,207,138,8,152,98,145,243,86,168,83,23,144,57,84,130,87,37,94,168,99,52,108,138,112,97,119,139,124,224,127,112,136,66,144,84,145,16,147,24,147,143,150,94,116,196,154,7,93,105,93,112,101,162,103,168,141,219,150,110,99,73,103,25,105,197,131,23,152,192,150,254,136,132,111,122,100,248,91,22,78,44,112,93,117,47,102,196,81,54,82,226,82,211,89,129,95,39,96,16,98,63,101,116,101,31,102,116,102,242,104,22,104,99,107,5,110,114,114,31,117,219,118,190,124,86,128,240,88,253,136,127,137,160,138,147,138,203,138,29,144,146,145,82,151,89,151,137,101,14,122,6,129,187,150,45,94,220,96,26,98,165,101,20,102,144,103,243,119,77,122,77,124,62,126,10,129,172,140,100,141,225,141,95,142,169,120,7,82,217,98,165,99,66,100,152,98,45,138,131,122,192,123,172,138,234,150,118,125,12,130,73,135,217,78,72,81,67,83,96,83,163,91,2,92,22,92,221,93,38,98,71,98,176,100,19,104,52,104,201,108,69,109,23,109,211,103,92,111,78,113,125,113,203,101,127,122,173,123,218,125,74,126,168,127,122,129,27,130,57,130,166,133,110,138,206,140,245,141,120,144,119,144,173,146,145,146,131,149,174,155,77,82,132,85,56,111,54,113,104,81,133,121,85,126,179,129,206,124,76,86,81,88,168,92,170,99,254,102,253,102,90,105,217,114,143,117,142,117,14,121,86,121,223,121,151,124,32,125,68,125,7,134,52,138,59,150,97,144,32,159,231,80,117,82,204,83,226,83,9,80,170,85,238,88,79,89,61,114,139,91,100,92,29,83,227,96,243,96,92,99,131,99,63,99,187,99,205,100,233,101,249,102,227,93,205,105,253,105,21,111,229,113,137,78,233,117,248,118,147,122,223,124,207,125,156,125,97,128,73,131,88,131,108,132,188,132,251,133,197,136,112,141,1,144,109,144,151,147,28,151,18,154,207,80,151,88,142,97,211,129,53,133,8,141,32,144,195,79,116,80,71,82,115,83,111,96,73,99,95,103,44,110,179,141,31,144,215,79,94,92,202,140,207,101,154,125,82,83,150,136,118,81,195,99,88,91,107,91,10,92,13,100,81,103,92,144,214,78,26,89,42,89,112,108,81,138,62,85,21,88,165,89,240,96,83,98,193,103,53,130,85,105,64,150,196,153,40,154,83,79,6,88,254,91,16,128,177,92,47,94,133,95,32,96,75,97,52,98,255,102,240,108,222,110,206,128,127,129,212,130,139,136,184,140,0,144,46,144,138,150,219,158,219,155,227,78,240,83,39,89,44,123,141,145,76,152,249,157,221,110,39,112,83,83,68,85,133,91,88,98,158,98,211,98,162,108,239,111,34,116,23,138,56,148,193,111,254,138,56,131,231,81,248,134,234,83,233,83,70,79,84,144,176,143,106,89,49,129,253,93,234,122,191,143,218,104,55,140,248,114,72,156,61,106,176,138,57,78,88,83,6,86,102,87,197,98,162,99,230,101,78,107,225,109,91,110,173,112,237,119,239,122,170,123,187,125,61,128,198,128,203,134,149,138,91,147,227,86,199,88,62,95,173,101,150,102,128,106,181,107,55,117,199,138,36,80,229,119,48,87,27,95,101,96,122,102,96,108,244,117,26,122,110,127,244,129,24,135,69,144,179,153,201,123,92,117,249,122,81,123,196,132,16,144,233,121,146,122,54,131,225,90,64,119,45,78,242,78,153,91,224,95,189,98,60,102,241,103,232,108,107,134,119,136,59,138,78,145,243,146,208,153,23,106,38,112,42,115,231,130,87,132,175,140,1,78,70,81,203,81,139,85,245,91,22,94,51,94,129,94,20,95,53,95,107,95,180,95,242,97,17,99,162,102,29,103,110,111,82,114,58,117,58,119,116,128,57,129,120,129,118,135,191,138,220,138,133,141,243,141,154,146,119,149,2,152,229,156,197,82,87,99,244,118,21,103,136,108,205,115,195,140,174,147,115,150,37,109,156,88,14,105,204,105,253,143,154,147,219,117,26,144,90,88,2,104,180,99,251,105,67,79,44,111,216,103,187,143,38,133,180,125,84,147,63,105,112,111,106,87,247,88,44,91,44,125,42,114,10,84,227,145,180,157,173,78,78,79,92,80,117,80,67,82,158,140,72,84,36,88,154,91,29,94,149,94,173,94,247,94,31,95,140,96,181,98,58,99,208,99,175,104,64,108,135,120,142,121,11,122,224,125,71,130,2,138,230,138,68,142,19,144,184,144,45,145,216,145,14,159,229,108,88,100,226,100,117,101,244,110,132,118,27,123,105,144,209,147,186,110,242,84,185,95,164,100,77,143,237,143,68,146,120,81,107,88,41,89,85,92,151,94,251,109,143,126,28,117,188,140,226,142,91,152,185,112,29,79,191,107,177,111,48,117,251,150,78,81,16,84,53,88,87,88,172,89,96,92,146,95,151,101,92,103,33,110,123,118,223,131,237,140,20,144,253,144,77,147,37,120,58,120,170,82,166,94,31,87,116,89,18,96,18,80,90,81,172,81,205,81,0,82,16,85,84,88,88,88,87,89,149,91,246,92,139,93,188,96,149,98,45,100,113,103,67,104,188,104,223,104,215,118,216,109,111,110,155,109,111,112,200,113,83,95,216,117,119,121,73,123,84,123,82,123,214,124,113,125,48,82,99,132,105,133,228,133,14,138,4,139,70,140,15,142,3,144,15,144,25,148,118,150,45,152,48,154,216,149,205,80,213,82,12,84,2,88,14,92,167,97,158,100,30,109,179,119,229,122,244,128,4,132,83,144,133,146,224,92,7,157,63,83,151,95,179,95,156,109,121,114,99,119,191,121,228,123,210,107,236,114,173,138,3,104,97,106,248,81,129,122,52,105,74,92,246,156,235,130,197,91,73,145,30,112,120,86,111,92,199,96,102,101,140,108,90,140,65,144,19,152,81,84,199,102,13,146,72,89,163,144,133,81,77,78,234,81,153,133,14,139,88,112,122,99,75,147,98,105,180,153,4,126,119,117,87,83,96,105,223,142,227,150,93,108,140,78,60,92,16,95,233,143,2,83,209,140,137,128,121,134,255,94,229,101,115,78,101,81,130,89,63,92,238,151,251,78,138,89,205,95,141,138,225,111,176,121,98,121,231,91,113,132,43,115,177,113,116,94,245,95,123,99,154,100,195,113,152,124,67,78,252,94,75,78,220,87,162,86,169,96,195,111,13,125,253,128,51,129,191,129,178,143,151,137,164,134,244,93,138,98,173,100,135,137,119,103,226,108,62,109,54,116,52,120,70,90,117,127,173,130,172,153,243,79,195,94,221,98,146,99,87,101,111,103,195,118,76,114,204,128,186,128,41,143,77,145,13,80,249,87,146,90,133,104,115,105,100,113,253,114,183,140,242,88,224,140,106,150,25,144,127,135,228,121,231,119,41,132,47,79,101,82,90,83,205,98,207,103,202,108,125,118,148,123,149,124,54,130,132,133,235,143,221,102,32,111,6,114,27,126,171,131,193,153,166,158,253,81,177,123,114,120,184,123,135,128,72,123,232,106,97,94,140,128,81,117,96,117,107,81,98,146,140,110,122,118,151,145,234,154,16,79,112,127,156,98,79,123,165,149,233,156,122,86,89,88,228,134,188,150,52,79,36,82,74,83,205,83,219,83,6,94,44,100,145,101,127,103,62,108,78,108,72,114,175,114,237,115,84,117,65,126,44,130,233,133,169,140,196,123,198,145,105,113,18,152,239,152,61,99,105,102,106,117,228,118,208,120,67,133,238,134,42,83,81,83,38,84,131,89,135,94,124,95,178,96,73,98,121,98,171,98,144,101,212,107,204,108,178,117,174,118,145,120,216,121,203,125,119,127,165,128,171,136,185,138,187,140,127,144,94,151,219,152,11,106,56,124,153,80,62,92,174,95,135,103,216,107,53,116,9,119,142,127,59,159,202,103,23,122,57,83,139,117,237,154,102,95,157,129,241,131,152,128,60,95,197,95,98,117,70,123,60,144,103,104,235,89,155,90,16,125,126,118,44,139,245,79,106,95,25,106,55,108,2,111,226,116,104,121,104,136,85,138,121,140,223,94,207,99,197,117,210,121,215,130,40,147,242,146,156,132,237,134,45,156,193,84,108,95,140,101,92,109,21,112,167,140,211,140,59,152,79,101,246,116,13,78,216,78,224,87,43,89,102,90,204,91,168,81,3,94,156,94,22,96,118,98,119,101,167,101,110,102,110,109,54,114,38,123,80,129,154,129,153,130,92,139,160,140,230,140,116,141,28,150,68,150,174,79,171,100,102,107,30,130,97,132,106,133,232,144,1,92,83,105,168,152,122,132,87,133,15,79,111,82,169,95,69,94,13,103,143,121,121,129,7,137,134,137,245,109,23,95,85,98,184,108,207,78,105,114,146,155,6,82,59,84,116,86,179,88,164,97,110,98,26,113,110,89,137,124,222,124,27,125,240,150,135,101,94,128,25,78,117,79,117,81,64,88,99,94,115,94,10,95,196,103,38,78,61,133,137,149,91,150,115,124,1,152,251,80,193,88,86,118,167,120,37,82,165,119,17,133,134,123,79,80,9,89,71,114,199,123,232,125,186,143,212,143,77,144,191,79,201,82,41,90,1,95,173,151,221,79,23,130,234,146,3,87,85,99,105,107,43,117,220,136,20,143,66,122,223,82,147,88,85,97,10,98,174,102,205,107,63,124,233,131,35,80,248,79,5,83,70,84,49,88,73,89,157,91,240,92,239,92,41,93,150,94,177,98,103,99,62,101,185,101,11,103,213,108,225,108,249,112,50,120,43,126,222,128,179,130,12,132,236,132,2,135,18,137,42,138,74,140,166,144,210,146,253,152,243,156,108,157,79,78,161,78,141,80,86,82,74,87,168,89,61,94,216,95,217,95,63,98,180,102,27,103,208,103,210,104,146,81,33,125,170,128,168,129,0,139,140,140,191,140,126,146,50,150,32,84,44,152,23,83,213,80,92,83,168,88,178,100,52,103,103,114,102,119,70,122,230,145,195,82,161,108,134,107,0,88,76,94,84,89,44,103,251,127,225,81,198,118,105,100,232,120,84,155,187,158,203,87,185,89,39,102,154,103,206,107,233,84,217,105,85,94,156,129,149,103,170,155,254,103,82,156,93,104,166,78,227,79,200,83,185,98,43,103,171,108,196,143,173,79,109,126,191,158,7,78,98,97,128,110,43,111,19,133,115,84,42,103,69,155,243,93,149,123,172,92,198,91,28,135,74,110,209,132,20,122,8,129,153,89,141,124,17,108,32,119,217,82,34,89,33,113,95,114,219,119,39,151,97,157,11,105,127,90,24,90,165,81,13,84,125,84,14,102,223,118,247,143,152,146,244,156,234,89,93,114,197,110,77,81,201,104,191,125,236,125,98,151,186,158,120,100,33,106,2,131,132,89,95,91,219,107,27,115,242,118,178,125,23,128,153,132,50,81,40,103,217,158,238,118,98,103,255,82,5,153,36,92,59,98,126,124,176,140,79,85,182,96,11,125,128,149,1,83,95,78,182,81,28,89,58,114,54,128,206,145,37,95,226,119,132,83,121,95,4,125,172,133,51,138,141,142,86,151,243,103,174,133,83,148,9,97,8,97,185,108,82,118,237,138,56,143,47,85,81,79,42,81,199,82,203,83,165,91,125,94,160,96,130,97,214,99,9,103,218,103,103,110,140,109,54,115,55,115,49,117,80,121,213,136,152,138,74,144,145,144,245,144,196,150,141,135,21,89,136,78,89,79,14,78,137,138,63,143,16,152,173,80,124,94,150,89,185,91,184,94,218,99,250,99,193,100,220,102,74,105,216,105,11,109,182,110,148,113,40,117,175,122,138,127,0,128,73,132,201,132,129,137,33,139,10,142,101,144,125,150,10,153,126,97,145,98,50,107,131,108,116,109,204,127,252,127,192,109,133,127,186,135,248,136,101,103,177,131,60,152,247,150,27,109,97,125,61,132,106,145,113,78,117,83,80,93,4,107,235,111,205,133,45,134,167,137,41,82,15,84,101,92,78,103,168,104,6,116,131,116,226,117,207,136,225,136,204,145,226,150,120,150,139,95,135,115,203,122,78,132,160,99,101,117,137,82,65,109,156,110,9,116,89,117,107,120,146,124,134,150,220,122,141,159,182,79,110,97,197,101,92,134,134,78,174,78,218,80,33,78,204,81,238,91,153,101,129,104,188,109,31,115,66,118,173,119,28,122,231,124,111,130,210,138,124,144,207,145,117,150,24,152,155,82,209,125,43,80,152,83,151,103,203,109,208,113,51,116,232,129,42,143,163,150,87,156,159,158,96,116,65,88,153,109,47,125,94,152,228,78,54,79,139,79,183,81,177,82,186,93,28,96,178,115,60,121,211,130,52,146,183,150,246,150,10,151,151,158,98,159,166,102,116,107,23,82,163,82,200,112,194,136,201,94,75,96,144,97,35,111,73,113,62,124,244,125,111,128,238,132,35,144,44,147,66,84,111,155,211,106,137,112,194,140,239,141,50,151,180,82,65,90,202,94,4,95,23,103,124,105,148,105,106,109,15,111,98,114,252,114,237,123,1,128,126,128,75,135,206,144,109,81,147,158,132,121,139,128,50,147,214,138,45,80,140,84,113,138,106,107,196,140,7,129,209,96,160,103,242,157,153,78,152,78,16,156,107,138,193,133,104,133,0,105,126,110,151,120,85,129,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,95,16,78,21,78,42,78,49,78,54,78,60,78,63,78,66,78,86,78,88,78,130,78,133,78,107,140,138,78,18,130,13,95,142,78,158,78,159,78,160,78,162,78,176,78,179,78,182,78,206,78,205,78,196,78,198,78,194,78,215,78,222,78,237,78,223,78,247,78,9,79,90,79,48,79,91,79,93,79,87,79,71,79,118,79,136,79,143,79,152,79,123,79,105,79,112,79,145,79,111,79,134,79,150,79,24,81,212,79,223,79,206,79,216,79,219,79,209,79,218,79,208,79,228,79,229,79,26,80,40,80,20,80,42,80,37,80,5,80,28,79,246,79,33,80,41,80,44,80,254,79,239,79,17,80,6,80,67,80,71,80,3,103,85,80,80,80,72,80,90,80,86,80,108,80,120,80,128,80,154,80,133,80,180,80,178,80,201,80,202,80,179,80,194,80,214,80,222,80,229,80,237,80,227,80,238,80,249,80,245,80,9,81,1,81,2,81,22,81,21,81,20,81,26,81,33,81,58,81,55,81,60,81,59,81,63,81,64,81,82,81,76,81,84,81,98,81,248,122,105,81,106,81,110,81,128,81,130,81,216,86,140,81,137,81,143,81,145,81,147,81,149,81,150,81,164,81,166,81,162,81,169,81,170,81,171,81,179,81,177,81,178,81,176,81,181,81,189,81,197,81,201,81,219,81,224,81,85,134,233,81,237,81,240,81,245,81,254,81,4,82,11,82,20,82,14,82,39,82,42,82,46,82,51,82,57,82,79,82,68,82,75,82,76,82,94,82,84,82,106,82,116,82,105,82,115,82,127,82,125,82,141,82,148,82,146,82,113,82,136,82,145,82,168,143,167,143,172,82,173,82,188,82,181,82,193,82,205,82,215,82,222,82,227,82,230,82,237,152,224,82,243,82,245,82,248,82,249,82,6,83,8,83,56,117,13,83,16,83,15,83,21,83,26,83,35,83,47,83,49,83,51,83,56,83,64,83,70,83,69,83,23,78,73,83,77,83,214,81,94,83,105,83,110,83,24,89,123,83,119,83,130,83,150,83,160,83,166,83,165,83,174,83,176,83,182,83,195,83,18,124,217,150,223,83,252,102,238,113,238,83,232,83,237,83,250,83,1,84,61,84,64,84,44,84,45,84,60,84,46,84,54,84,41,84,29,84,78,84,143,84,117,84,142,84,95,84,113,84,119,84,112,84,146,84,123,84,128,84,118,84,132,84,144,84,134,84,199,84,162,84,184,84,165,84,172,84,196,84,200,84,168,84,171,84,194,84,164,84,190,84,188,84,216,84,229,84,230,84,15,85,20,85,253,84,238,84,237,84,250,84,226,84,57,85,64,85,99,85,76,85,46,85,92,85,69,85,86,85,87,85,56,85,51,85,93,85,153,85,128,85,175,84,138,85,159,85,123,85,126,85,152,85,158,85,174,85,124,85,131,85,169,85,135,85,168,85,218,85,197,85,223,85,196,85,220,85,228,85,212,85,20,86,247,85,22,86,254,85,253,85,27,86,249,85,78,86,80,86,223,113,52,86,54,86,50,86,56,86,107,86,100,86,47,86,108,86,106,86,134,86,128,86,138,86,160,86,148,86,143,86,165,86,174,86,182,86,180,86,194,86,188,86,193,86,195,86,192,86,200,86,206,86,209,86,211,86,215,86,238,86,249,86,0,87,255,86,4,87,9,87,8,87,11,87,13,87,19,87,24,87,22,87,199,85,28,87,38,87,55,87,56,87,78,87,59,87,64,87,79,87,105,87,192,87,136,87,97,87,127,87,137,87,147,87,160,87,179,87,164,87,170,87,176,87,195,87,198,87,212,87,210,87,211,87,10,88,214,87,227,87,11,88,25,88,29,88,114,88,33,88,98,88,75,88,112,88,192,107,82,88,61,88,121,88,133,88,185,88,159,88,171,88,186,88,222,88,187,88,184,88,174,88,197,88,211,88,209,88,215,88,217,88,216,88,229,88,220,88,228,88,223,88,239,88,250,88,249,88,251,88,252,88,253,88,2,89,10,89,16,89,27,89,166,104,37,89,44,89,45,89,50,89,56,89,62,89,210,122,85,89,80,89,78,89,90,89,88,89,98,89,96,89,103,89,108,89,105,89,120,89,129,89,157,89,94,79,171,79,163,89,178,89,198,89,232,89,220,89,141,89,217,89,218,89,37,90,31,90,17,90,28,90,9,90,26,90,64,90,108,90,73,90,53,90,54,90,98,90,106,90,154,90,188,90,190,90,203,90,194,90,189,90,227,90,215,90,230,90,233,90,214,90,250,90,251,90,12,91,11,91,22,91,50,91,208,90,42,91,54,91,62,91,67,91,69,91,64,91,81,91,85,91,90,91,91,91,101,91,105,91,112,91,115,91,117,91,120,91,136,101,122,91,128,91,131,91,166,91,184,91,195,91,199,91,201,91,212,91,208,91,228,91,230,91,226,91,222,91,229,91,235,91,240,91,246,91,243,91,5,92,7,92,8,92,13,92,19,92,32,92,34,92,40,92,56,92,57,92,65,92,70,92,78,92,83,92,80,92,79,92,113,91,108,92,110,92,98,78,118,92,121,92,140,92,145,92,148,92,155,89,171,92,187,92,182,92,188,92,183,92,197,92,190,92,199,92,217,92,233,92,253,92,250,92,237,92,140,93,234,92,11,93,21,93,23,93,92,93,31,93,27,93,17,93,20,93,34,93,26,93,25,93,24,93,76,93,82,93,78,93,75,93,108,93,115,93,118,93,135,93,132,93,130,93,162,93,157,93,172,93,174,93,189,93,144,93,183,93,188,93,201,93,205,93,211,93,210,93,214,93,219,93,235,93,242,93,245,93,11,94,26,94,25,94,17,94,27,94,54,94,55,94,68,94,67,94,64,94,78,94,87,94,84,94,95,94,98,94,100,94,71,94,117,94,118,94,122,94,188,158,127,94,160,94,193,94,194,94,200,94,208,94,207,94,214,94,227,94,221,94,218,94,219,94,226,94,225,94,232,94,233,94,236,94,241,94,243,94,240,94,244,94,248,94,254,94,3,95,9,95,93,95,92,95,11,95,17,95,22,95,41,95,45,95,56,95,65,95,72,95,76,95,78,95,47,95,81,95,86,95,87,95,89,95,97,95,109,95,115,95,119,95,131,95,130,95,127,95,138,95,136,95,145,95,135,95,158,95,153,95,152,95,160,95,168,95,173,95,188,95,214,95,251,95,228,95,248,95,241,95,221,95,179,96,255,95,33,96,96,96,25,96,16,96,41,96,14,96,49,96,27,96,21,96,43,96,38,96,15,96,58,96,90,96,65,96,106,96,119,96,95,96,74,96,70,96,77,96,99,96,67,96,100,96,66,96,108,96,107,96,89,96,129,96,141,96,231,96,131,96,154,96,132,96,155,96,150,96,151,96,146,96,167,96,139,96,225,96,184,96,224,96,211,96,180,96,240,95,189,96,198,96,181,96,216,96,77,97,21,97,6,97,246,96,247,96,0,97,244,96,250,96,3,97,33,97,251,96,241,96,13,97,14,97,71,97,62,97,40,97,39,97,74,97,63,97,60,97,44,97,52,97,61,97,66,97,68,97,115,97,119,97,88,97,89,97,90,97,107,97,116,97,111,97,101,97,113,97,95,97,93,97,83,97,117,97,153,97,150,97,135,97,172,97,148,97,154,97,138,97,145,97,171,97,174,97,204,97,202,97,201,97,247,97,200,97,195,97,198,97,186,97,203,97,121,127,205,97,230,97,227,97,246,97,250,97,244,97,255,97,253,97,252,97,254,97,0,98,8,98,9,98,13,98,12,98,20,98,27,98,30,98,33,98,42,98,46,98,48,98,50,98,51,98,65,98,78,98,94,98,99,98,91,98,96,98,104,98,124,98,130,98,137,98,126,98,146,98,147,98,150,98,212,98,131,98,148,98,215,98,209,98,187,98,207,98,255,98,198,98,212,100,200,98,220,98,204,98,202,98,194,98,199,98,155,98,201,98,12,99,238,98,241,98,39,99,2,99,8,99,239,98,245,98,80,99,62,99,77,99,28,100,79,99,150,99,142,99,128,99,171,99,118,99,163,99,143,99,137,99,159,99,181,99,107,99,105,99,190,99,233,99,192,99,198,99,227,99,201,99,210,99,246,99,196,99,22,100,52,100,6,100,19,100,38,100,54,100,29,101,23,100,40,100,15,100,103,100,111,100,118,100,78,100,42,101,149,100,147,100,165,100,169,100,136,100,188,100,218,100,210,100,197,100,199,100,187,100,216,100,194,100,241,100,231,100,9,130,224,100,225,100,172,98,227,100,239,100,44,101,246,100,244,100,242,100,250,100,0,101,253,100,24,101,28,101,5,101,36,101,35,101,43,101,52,101,53,101,55,101,54,101,56,101,75,117,72,101,86,101,85,101,77,101,88,101,94,101,93,101,114,101,120,101,130,101,131,101,138,139,155,101,159,101,171,101,183,101,195,101,198,101,193,101,196,101,204,101,210,101,219,101,217,101,224,101,225,101,241,101,114,103,10,102,3,102,251,101,115,103,53,102,54,102,52,102,28,102,79,102,68,102,73,102,65,102,94,102,93,102,100,102,103,102,104,102,95,102,98,102,112,102,131,102,136,102,142,102,137,102,132,102,152,102,157,102,193,102,185,102,201,102,190,102,188,102,196,102,184,102,214,102,218,102,224,102,63,102,230,102,233,102,240,102,245,102,247,102,15,103,22,103,30,103,38,103,39,103,56,151,46,103,63,103,54,103,65,103,56,103,55,103,70,103,94,103,96,103,89,103,99,103,100,103,137,103,112,103,169,103,124,103,106,103,140,103,139,103,166,103,161,103,133,103,183,103,239,103,180,103,236,103,179,103,233,103,184,103,228,103,222,103,221,103,226,103,238,103,185,103,206,103,198,103,231,103,156,106,30,104,70,104,41,104,64,104,77,104,50,104,78,104,179,104,43,104,89,104,99,104,119,104,127,104,159,104,143,104,173,104,148,104,157,104,155,104,131,104,174,106,185,104,116,104,181,104,160,104,186,104,15,105,141,104,126,104,1,105,202,104,8,105,216,104,34,105,38,105,225,104,12,105,205,104,212,104,231,104,213,104,54,105,18,105,4,105,215,104,227,104,37,105,249,104,224,104,239,104,40,105,42,105,26,105,35,105,33,105,198,104,121,105,119,105,92,105,120,105,107,105,84,105,126,105,110,105,57,105,116,105,61,105,89,105,48,105,97,105,94,105,93,105,129,105,106,105,178,105,174,105,208,105,191,105,193,105,211,105,190,105,206,105,232,91,202,105,221,105,187,105,195,105,167,105,46,106,145,105,160,105,156,105,149,105,180,105,222,105,232,105,2,106,27,106,255,105,10,107,249,105,242,105,231,105,5,106,177,105,30,106,237,105,20,106,235,105,10,106,18,106,193,106,35,106,19,106,68,106,12,106,114,106,54,106,120,106,71,106,98,106,89,106,102,106,72,106,56,106,34,106,144,106,141,106,160,106,132,106,162,106,163,106,151,106,23,134,187,106,195,106,194,106,184,106,179,106,172,106,222,106,209,106,223,106,170,106,218,106,234,106,251,106,5,107,22,134,250,106,18,107,22,107,49,155,31,107,56,107,55,107,220,118,57,107,238,152,71,107,67,107,73,107,80,107,89,107,84,107,91,107,95,107,97,107,120,107,121,107,127,107,128,107,132,107,131,107,141,107,152,107,149,107,158,107,164,107,170,107,171,107,175,107,178,107,177,107,179,107,183,107,188,107,198,107,203,107,211,107,223,107,236,107,235,107,243,107,239,107,190,158,8,108,19,108,20,108,27,108,36,108,35,108,94,108,85,108,98,108,106,108,130,108,141,108,154,108,129,108,155,108,126,108,104,108,115,108,146,108,144,108,196,108,241,108,211,108,189,108,215,108,197,108,221,108,174,108,177,108,190,108,186,108,219,108,239,108,217,108,234,108,31,109,77,136,54,109,43,109,61,109,56,109,25,109,53,109,51,109,18,109,12,109,99,109,147,109,100,109,90,109,121,109,89,109,142,109,149,109,228,111,133,109,249,109,21,110,10,110,181,109,199,109,230,109,184,109,198,109,236,109,222,109,204,109,232,109,210,109,197,109,250,109,217,109,228,109,213,109,234,109,238,109,45,110,110,110,46,110,25,110,114,110,95,110,62,110,35,110,107,110,43,110,118,110,77,110,31,110,67,110,58,110,78,110,36,110,255,110,29,110,56,110,130,110,170,110,152,110,201,110,183,110,211,110,189,110,175,110,196,110,178,110,212,110,213,110,143,110,165,110,194,110,159,110,65,111,17,111,76,112,236,110,248,110,254,110,63,111,242,110,49,111,239,110,50,111,204,110,62,111,19,111,247,110,134,111,122,111,120,111,129,111,128,111,111,111,91,111,243,111,109,111,130,111,124,111,88,111,142,111,145,111,194,111,102,111,179,111,163,111,161,111,164,111,185,111,198,111,170,111,223,111,213,111,236,111,212,111,216,111,241,111,238,111,219,111,9,112,11,112,250,111,17,112,1,112,15,112,254,111,27,112,26,112,116,111,29,112,24,112,31,112,48,112,62,112,50,112,81,112,99,112,153,112,146,112,175,112,241,112,172,112,184,112,179,112,174,112,223,112,203,112,221,112,217,112,9,113,253,112,28,113,25,113,101,113,85,113,136,113,102,113,98,113,76,113,86,113,108,113,143,113,251,113,132,113,149,113,168,113,172,113,215,113,185,113,190,113,210,113,201,113,212,113,206,113,224,113,236,113,231,113,245,113,252,113,249,113,255,113,13,114,16,114,27,114,40,114,45,114,44,114,48,114,50,114,59,114,60,114,63,114,64,114,70,114,75,114,88,114,116,114,126,114,130,114,129,114,135,114,146,114,150,114,162,114,167,114,185,114,178,114,195,114,198,114,196,114,206,114,210,114,226,114,224,114,225,114,249,114,247,114,15,80,23,115,10,115,28,115,22,115,29,115,52,115,47,115,41,115,37,115,62,115,78,115,79,115,216,158,87,115,106,115,104,115,112,115,120,115,117,115,123,115,122,115,200,115,179,115,206,115,187,115,192,115,229,115,238,115,222,115,162,116,5,116,111,116,37,116,248,115,50,116,58,116,85,116,63,116,95,116,89,116,65,116,92,116,105,116,112,116,99,116,106,116,118,116,126,116,139,116,158,116,167,116,202,116,207,116,212,116,241,115,224,116,227,116,231,116,233,116,238,116,242,116,240,116,241,116,248,116,247,116,4,117,3,117,5,117,12,117,14,117,13,117,21,117,19,117,30,117,38,117,44,117,60,117,68,117,77,117,74,117,73,117,91,117,70,117,90,117,105,117,100,117,103,117,107,117,109,117,120,117,118,117,134,117,135,117,116,117,138,117,137,117,130,117,148,117,154,117,157,117,165,117,163,117,194,117,179,117,195,117,181,117,189,117,184,117,188,117,177,117,205,117,202,117,210,117,217,117,227,117,222,117,254,117,255,117,252,117,1,118,240,117,250,117,242,117,243,117,11,118,13,118,9,118,31,118,39,118,32,118,33,118,34,118,36,118,52,118,48,118,59,118,71,118,72,118,70,118,92,118,88,118,97,118,98,118,104,118,105,118,106,118,103,118,108,118,112,118,114,118,118,118,120,118,124,118,128,118,131,118,136,118,139,118,142,118,150,118,147,118,153,118,154,118,176,118,180,118,184,118,185,118,186,118,194,118,205,118,214,118,210,118,222,118,225,118,229,118,231,118,234,118,47,134,251,118,8,119,7,119,4,119,41,119,36,119,30,119,37,119,38,119,27,119,55,119,56,119,71,119,90,119,104,119,107,119,91,119,101,119,127,119,126,119,121,119,142,119,139,119,145,119,160,119,158,119,176,119,182,119,185,119,191,119,188,119,189,119,187,119,199,119,205,119,215,119,218,119,220,119,227,119,238,119,252,119,12,120,18,120,38,121,32,120,42,121,69,120,142,120,116,120,134,120,124,120,154,120,140,120,163,120,181,120,170,120,175,120,209,120,198,120,203,120,212,120,190,120,188,120,197,120,202,120,236,120,231,120,218,120,253,120,244,120,7,121,18,121,17,121,25,121,44,121,43,121,64,121,96,121,87,121,95,121,90,121,85,121,83,121,122,121,127,121,138,121,157,121,167,121,75,159,170,121,174,121,179,121,185,121,186,121,201,121,213,121,231,121,236,121,225,121,227,121,8,122,13,122,24,122,25,122,32,122,31,122,128,121,49,122,59,122,62,122,55,122,67,122,87,122,73,122,97,122,98,122,105,122,157,159,112,122,121,122,125,122,136,122,151,122,149,122,152,122,150,122,169,122,200,122,176,122,182,122,197,122,196,122,191,122,131,144,199,122,202,122,205,122,207,122,213,122,211,122,217,122,218,122,221,122,225,122,226,122,230,122,237,122,240,122,2,123,15,123,10,123,6,123,51,123,24,123,25,123,30,123,53,123,40,123,54,123,80,123,122,123,4,123,77,123,11,123,76,123,69,123,117,123,101,123,116,123,103,123,112,123,113,123,108,123,110,123,157,123,152,123,159,123,141,123,156,123,154,123,139,123,146,123,143,123,93,123,153,123,203,123,193,123,204,123,207,123,180,123,198,123,221,123,233,123,17,124,20,124,230,123,229,123,96,124,0,124,7,124,19,124,243,123,247,123,23,124,13,124,246,123,35,124,39,124,42,124,31,124,55,124,43,124,61,124,76,124,67,124,84,124,79,124,64,124,80,124,88,124,95,124,100,124,86,124,101,124,108,124,117,124,131,124,144,124,164,124,173,124,162,124,171,124,161,124,168,124,179,124,178,124,177,124,174,124,185,124,189,124,192,124,197,124,194,124,216,124,210,124,220,124,226,124,59,155,239,124,242,124,244,124,246,124,250,124,6,125,2,125,28,125,21,125,10,125,69,125,75,125,46,125,50,125,63,125,53,125,70,125,115,125,86,125,78,125,114,125,104,125,110,125,79,125,99,125,147,125,137,125,91,125,143,125,125,125,155,125,186,125,174,125,163,125,181,125,199,125,189,125,171,125,61,126,162,125,175,125,220,125,184,125,159,125,176,125,216,125,221,125,228,125,222,125,251,125,242,125,225,125,5,126,10,126,35,126,33,126,18,126,49,126,31,126,9,126,11,126,34,126,70,126,102,126,59,126,53,126,57,126,67,126,55,126,50,126,58,126,103,126,93,126,86,126,94,126,89,126,90,126,121,126,106,126,105,126,124,126,123,126,131,126,213,125,125,126,174,143,127,126,136,126,137,126,140,126,146,126,144,126,147,126,148,126,150,126,142,126,155,126,156,126,56,127,58,127,69,127,76,127,77,127,78,127,80,127,81,127,85,127,84,127,88,127,95,127,96,127,104,127,105,127,103,127,120,127,130,127,134,127,131,127,136,127,135,127,140,127,148,127,158,127,157,127,154,127,163,127,175,127,178,127,185,127,174,127,182,127,184,127,113,139,197,127,198,127,202,127,213,127,212,127,225,127,230,127,233,127,243,127,249,127,220,152], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+162876);
/* memory initializer */ allocate([6,128,4,128,11,128,18,128,24,128,25,128,28,128,33,128,40,128,63,128,59,128,74,128,70,128,82,128,88,128,90,128,95,128,98,128,104,128,115,128,114,128,112,128,118,128,121,128,125,128,127,128,132,128,134,128,133,128,155,128,147,128,154,128,173,128,144,81,172,128,219,128,229,128,217,128,221,128,196,128,218,128,214,128,9,129,239,128,241,128,27,129,41,129,35,129,47,129,75,129,139,150,70,129,62,129,83,129,81,129,252,128,113,129,110,129,101,129,102,129,116,129,131,129,136,129,138,129,128,129,130,129,160,129,149,129,164,129,163,129,95,129,147,129,169,129,176,129,181,129,190,129,184,129,189,129,192,129,194,129,186,129,201,129,205,129,209,129,217,129,216,129,200,129,218,129,223,129,224,129,231,129,250,129,251,129,254,129,1,130,2,130,5,130,7,130,10,130,13,130,16,130,22,130,41,130,43,130,56,130,51,130,64,130,89,130,88,130,93,130,90,130,95,130,100,130,98,130,104,130,106,130,107,130,46,130,113,130,119,130,120,130,126,130,141,130,146,130,171,130,159,130,187,130,172,130,225,130,227,130,223,130,210,130,244,130,243,130,250,130,147,131,3,131,251,130,249,130,222,130,6,131,220,130,9,131,217,130,53,131,52,131,22,131,50,131,49,131,64,131,57,131,80,131,69,131,47,131,43,131,23,131,24,131,133,131,154,131,170,131,159,131,162,131,150,131,35,131,142,131,135,131,138,131,124,131,181,131,115,131,117,131,160,131,137,131,168,131,244,131,19,132,235,131,206,131,253,131,3,132,216,131,11,132,193,131,247,131,7,132,224,131,242,131,13,132,34,132,32,132,189,131,56,132,6,133,251,131,109,132,42,132,60,132,90,133,132,132,119,132,107,132,173,132,110,132,130,132,105,132,70,132,44,132,111,132,121,132,53,132,202,132,98,132,185,132,191,132,159,132,217,132,205,132,187,132,218,132,208,132,193,132,198,132,214,132,161,132,33,133,255,132,244,132,23,133,24,133,44,133,31,133,21,133,20,133,252,132,64,133,99,133,88,133,72,133,65,133,2,134,75,133,85,133,128,133,164,133,136,133,145,133,138,133,168,133,109,133,148,133,155,133,234,133,135,133,156,133,119,133,126,133,144,133,201,133,186,133,207,133,185,133,208,133,213,133,221,133,229,133,220,133,249,133,10,134,19,134,11,134,254,133,250,133,6,134,34,134,26,134,48,134,63,134,77,134,85,78,84,134,95,134,103,134,113,134,147,134,163,134,169,134,170,134,139,134,140,134,182,134,175,134,196,134,198,134,176,134,201,134,35,136,171,134,212,134,222,134,233,134,236,134,223,134,219,134,239,134,18,135,6,135,8,135,0,135,3,135,251,134,17,135,9,135,13,135,249,134,10,135,52,135,63,135,55,135,59,135,37,135,41,135,26,135,96,135,95,135,120,135,76,135,78,135,116,135,87,135,104,135,110,135,89,135,83,135,99,135,106,135,5,136,162,135,159,135,130,135,175,135,203,135,189,135,192,135,208,135,214,150,171,135,196,135,179,135,199,135,198,135,187,135,239,135,242,135,224,135,15,136,13,136,254,135,246,135,247,135,14,136,210,135,17,136,22,136,21,136,34,136,33,136,49,136,54,136,57,136,39,136,59,136,68,136,66,136,82,136,89,136,94,136,98,136,107,136,129,136,126,136,158,136,117,136,125,136,181,136,114,136,130,136,151,136,146,136,174,136,153,136,162,136,141,136,164,136,176,136,191,136,177,136,195,136,196,136,212,136,216,136,217,136,221,136,249,136,2,137,252,136,244,136,232,136,242,136,4,137,12,137,10,137,19,137,67,137,30,137,37,137,42,137,43,137,65,137,68,137,59,137,54,137,56,137,76,137,29,137,96,137,94,137,102,137,100,137,109,137,106,137,111,137,116,137,119,137,126,137,131,137,136,137,138,137,147,137,152,137,161,137,169,137,166,137,172,137,175,137,178,137,186,137,189,137,191,137,192,137,218,137,220,137,221,137,231,137,244,137,248,137,3,138,22,138,16,138,12,138,27,138,29,138,37,138,54,138,65,138,91,138,82,138,70,138,72,138,124,138,109,138,108,138,98,138,133,138,130,138,132,138,168,138,161,138,145,138,165,138,166,138,154,138,163,138,196,138,205,138,194,138,218,138,235,138,243,138,231,138,228,138,241,138,20,139,224,138,226,138,247,138,222,138,219,138,12,139,7,139,26,139,225,138,22,139,16,139,23,139,32,139,51,139,171,151,38,139,43,139,62,139,40,139,65,139,76,139,79,139,78,139,73,139,86,139,91,139,90,139,107,139,95,139,108,139,111,139,116,139,125,139,128,139,140,139,142,139,146,139,147,139,150,139,153,139,154,139,58,140,65,140,63,140,72,140,76,140,78,140,80,140,85,140,98,140,108,140,120,140,122,140,130,140,137,140,133,140,138,140,141,140,142,140,148,140,124,140,152,140,29,98,173,140,170,140,189,140,178,140,179,140,174,140,182,140,200,140,193,140,228,140,227,140,218,140,253,140,250,140,251,140,4,141,5,141,10,141,7,141,15,141,13,141,16,141,78,159,19,141,205,140,20,141,22,141,103,141,109,141,113,141,115,141,129,141,153,141,194,141,190,141,186,141,207,141,218,141,214,141,204,141,219,141,203,141,234,141,235,141,223,141,227,141,252,141,8,142,9,142,255,141,29,142,30,142,16,142,31,142,66,142,53,142,48,142,52,142,74,142,71,142,73,142,76,142,80,142,72,142,89,142,100,142,96,142,42,142,99,142,85,142,118,142,114,142,124,142,129,142,135,142,133,142,132,142,139,142,138,142,147,142,145,142,148,142,153,142,170,142,161,142,172,142,176,142,198,142,177,142,190,142,197,142,200,142,203,142,219,142,227,142,252,142,251,142,235,142,254,142,10,143,5,143,21,143,18,143,25,143,19,143,28,143,31,143,27,143,12,143,38,143,51,143,59,143,57,143,69,143,66,143,62,143,76,143,73,143,70,143,78,143,87,143,92,143,98,143,99,143,100,143,156,143,159,143,163,143,173,143,175,143,183,143,218,143,229,143,226,143,234,143,239,143,135,144,244,143,5,144,249,143,250,143,17,144,21,144,33,144,13,144,30,144,22,144,11,144,39,144,54,144,53,144,57,144,248,143,79,144,80,144,81,144,82,144,14,144,73,144,62,144,86,144,88,144,94,144,104,144,111,144,118,144,168,150,114,144,130,144,125,144,129,144,128,144,138,144,137,144,143,144,168,144,175,144,177,144,181,144,226,144,228,144,72,98,219,144,2,145,18,145,25,145,50,145,48,145,74,145,86,145,88,145,99,145,101,145,105,145,115,145,114,145,139,145,137,145,130,145,162,145,171,145,175,145,170,145,181,145,180,145,186,145,192,145,193,145,201,145,203,145,208,145,214,145,223,145,225,145,219,145,252,145,245,145,246,145,30,146,255,145,20,146,44,146,21,146,17,146,94,146,87,146,69,146,73,146,100,146,72,146,149,146,63,146,75,146,80,146,156,146,150,146,147,146,155,146,90,146,207,146,185,146,183,146,233,146,15,147,250,146,68,147,46,147,25,147,34,147,26,147,35,147,58,147,53,147,59,147,92,147,96,147,124,147,110,147,86,147,176,147,172,147,173,147,148,147,185,147,214,147,215,147,232,147,229,147,216,147,195,147,221,147,208,147,200,147,228,147,26,148,20,148,19,148,3,148,7,148,16,148,54,148,43,148,53,148,33,148,58,148,65,148,82,148,68,148,91,148,96,148,98,148,94,148,106,148,41,146,112,148,117,148,119,148,125,148,90,148,124,148,126,148,129,148,127,148,130,149,135,149,138,149,148,149,150,149,152,149,153,149,160,149,168,149,167,149,173,149,188,149,187,149,185,149,190,149,202,149,246,111,195,149,205,149,204,149,213,149,212,149,214,149,220,149,225,149,229,149,226,149,33,150,40,150,46,150,47,150,66,150,76,150,79,150,75,150,119,150,92,150,94,150,93,150,95,150,102,150,114,150,108,150,141,150,152,150,149,150,151,150,170,150,167,150,177,150,178,150,176,150,180,150,182,150,184,150,185,150,206,150,203,150,201,150,205,150,77,137,220,150,13,151,213,150,249,150,4,151,6,151,8,151,19,151,14,151,17,151,15,151,22,151,25,151,36,151,42,151,48,151,57,151,61,151,62,151,68,151,70,151,72,151,66,151,73,151,92,151,96,151,100,151,102,151,104,151,210,82,107,151,113,151,121,151,133,151,124,151,129,151,122,151,134,151,139,151,143,151,144,151,156,151,168,151,166,151,163,151,179,151,180,151,195,151,198,151,200,151,203,151,220,151,237,151,79,159,242,151,223,122,246,151,245,151,15,152,12,152,56,152,36,152,33,152,55,152,61,152,70,152,79,152,75,152,107,152,111,152,112,152,113,152,116,152,115,152,170,152,175,152,177,152,182,152,196,152,195,152,198,152,233,152,235,152,3,153,9,153,18,153,20,153,24,153,33,153,29,153,30,153,36,153,32,153,44,153,46,153,61,153,62,153,66,153,73,153,69,153,80,153,75,153,81,153,82,153,76,153,85,153,151,153,152,153,165,153,173,153,174,153,188,153,223,153,219,153,221,153,216,153,209,153,237,153,238,153,241,153,242,153,251,153,248,153,1,154,15,154,5,154,226,153,25,154,43,154,55,154,69,154,66,154,64,154,67,154,62,154,85,154,77,154,91,154,87,154,95,154,98,154,101,154,100,154,105,154,107,154,106,154,173,154,176,154,188,154,192,154,207,154,209,154,211,154,212,154,222,154,223,154,226,154,227,154,230,154,239,154,235,154,238,154,244,154,241,154,247,154,251,154,6,155,24,155,26,155,31,155,34,155,35,155,37,155,39,155,40,155,41,155,42,155,46,155,47,155,50,155,68,155,67,155,79,155,77,155,78,155,81,155,88,155,116,155,147,155,131,155,145,155,150,155,151,155,159,155,160,155,168,155,180,155,192,155,202,155,185,155,198,155,207,155,209,155,210,155,227,155,226,155,228,155,212,155,225,155,58,156,242,155,241,155,240,155,21,156,20,156,9,156,19,156,12,156,6,156,8,156,18,156,10,156,4,156,46,156,27,156,37,156,36,156,33,156,48,156,71,156,50,156,70,156,62,156,90,156,96,156,103,156,118,156,120,156,231,156,236,156,240,156,9,157,8,157,235,156,3,157,6,157,42,157,38,157,175,157,35,157,31,157,68,157,21,157,18,157,65,157,63,157,62,157,70,157,72,157,93,157,94,157,100,157,81,157,80,157,89,157,114,157,137,157,135,157,171,157,111,157,122,157,154,157,164,157,169,157,178,157,196,157,193,157,187,157,184,157,186,157,198,157,207,157,194,157,217,157,211,157,248,157,230,157,237,157,239,157,253,157,26,158,27,158,30,158,117,158,121,158,125,158,129,158,136,158,139,158,140,158,146,158,149,158,145,158,157,158,165,158,169,158,184,158,170,158,173,158,97,151,204,158,206,158,207,158,208,158,212,158,220,158,222,158,221,158,224,158,229,158,232,158,239,158,244,158,246,158,247,158,249,158,251,158,252,158,253,158,7,159,8,159,183,118,21,159,33,159,44,159,62,159,74,159,82,159,84,159,99,159,95,159,96,159,97,159,102,159,103,159,108,159,106,159,119,159,114,159,118,159,149,159,156,159,160,159,47,88,199,105,89,144,100,116,220,81,153,113,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,78,4,78,5,78,6,78,15,78,18,78,23,78,31,78,32,78,33,78,35,78,38,78,41,78,46,78,47,78,49,78,51,78,53,78,55,78,60,78,64,78,65,78,66,78,68,78,70,78,74,78,81,78,85,78,87,78,90,78,91,78,98,78,99,78,100,78,101,78,103,78,104,78,106,78,107,78,108,78,109,78,110,78,111,78,114,78,116,78,117,78,118,78,119,78,120,78,121,78,122,78,123,78,124,78,125,78,127,78,128,78,129,78,130,78,131,78,132,78,133,78,135,78,138,78,144,78,150,78,151,78,153,78,156,78,157,78,158,78,163,78,170,78,175,78,176,78,177,78,180,78,182,78,183,78,184,78,185,78,188,78,189,78,190,78,200,78,204,78,207,78,208,78,210,78,218,78,219,78,220,78,224,78,226,78,230,78,231,78,233,78,237,78,238,78,239,78,241,78,244,78,248,78,249,78,250,78,252,78,254,78,0,79,2,79,3,79,4,79,5,79,6,79,7,79,8,79,11,79,12,79,18,79,19,79,20,79,21,79,22,79,28,79,29,79,33,79,35,79,40,79,41,79,44,79,45,79,46,79,49,79,51,79,53,79,55,79,57,79,59,79,62,79,63,79,64,79,65,79,66,79,68,79,69,79,71,79,72,79,73,79,74,79,75,79,76,79,82,79,84,79,86,79,97,79,98,79,102,79,104,79,106,79,107,79,109,79,110,79,113,79,114,79,117,79,119,79,120,79,121,79,122,79,125,79,128,79,129,79,130,79,133,79,134,79,135,79,138,79,140,79,142,79,144,79,146,79,147,79,149,79,150,79,152,79,153,79,154,79,156,79,158,79,159,79,161,79,162,79,164,79,171,79,173,79,176,79,177,79,178,79,179,79,180,79,182,79,183,79,184,79,185,79,186,79,187,79,188,79,189,79,190,79,192,79,193,79,194,79,198,79,199,79,200,79,201,79,203,79,204,79,205,79,210,79,211,79,212,79,213,79,214,79,217,79,219,79,224,79,226,79,228,79,229,79,231,79,235,79,236,79,240,79,242,79,244,79,245,79,246,79,247,79,249,79,251,79,252,79,253,79,255,79,0,80,1,80,2,80,3,80,4,80,5,80,6,80,7,80,8,80,9,80,10,80,11,80,14,80,16,80,17,80,19,80,21,80,22,80,23,80,27,80,29,80,30,80,32,80,34,80,35,80,36,80,39,80,43,80,47,80,48,80,49,80,50,80,51,80,52,80,53,80,54,80,55,80,56,80,57,80,59,80,61,80,63,80,64,80,65,80,66,80,68,80,69,80,70,80,73,80,74,80,75,80,77,80,80,80,81,80,82,80,83,80,84,80,86,80,87,80,88,80,89,80,91,80,93,80,94,80,95,80,96,80,97,80,98,80,99,80,100,80,102,80,103,80,104,80,105,80,106,80,107,80,109,80,110,80,111,80,112,80,113,80,114,80,115,80,116,80,117,80,120,80,121,80,122,80,124,80,125,80,129,80,130,80,131,80,132,80,134,80,135,80,137,80,138,80,139,80,140,80,142,80,143,80,144,80,145,80,146,80,147,80,148,80,149,80,150,80,151,80,152,80,153,80,154,80,155,80,156,80,157,80,158,80,159,80,160,80,161,80,162,80,164,80,166,80,170,80,171,80,173,80,174,80,175,80,176,80,177,80,179,80,180,80,181,80,182,80,183,80,184,80,185,80,188,80,189,80,190,80,191,80,192,80,193,80,194,80,195,80,196,80,197,80,198,80,199,80,200,80,201,80,202,80,203,80,204,80,205,80,206,80,208,80,209,80,210,80,211,80,212,80,213,80,215,80,216,80,217,80,219,80,220,80,221,80,222,80,223,80,224,80,225,80,226,80,227,80,228,80,229,80,232,80,233,80,234,80,235,80,239,80,240,80,241,80,242,80,244,80,246,80,247,80,248,80,249,80,250,80,252,80,253,80,254,80,255,80,0,81,1,81,2,81,3,81,4,81,5,81,8,81,9,81,10,81,12,81,13,81,14,81,15,81,16,81,17,81,19,81,20,81,21,81,22,81,23,81,24,81,25,81,26,81,27,81,28,81,29,81,30,81,31,81,32,81,34,81,35,81,36,81,37,81,38,81,39,81,40,81,41,81,42,81,43,81,44,81,45,81,46,81,47,81,48,81,49,81,50,81,51,81,52,81,53,81,54,81,55,81,56,81,57,81,58,81,59,81,60,81,61,81,62,81,66,81,71,81,74,81,76,81,78,81,79,81,80,81,82,81,83,81,87,81,88,81,89,81,91,81,93,81,94,81,95,81,96,81,97,81,99,81,100,81,102,81,103,81,105,81,106,81,111,81,114,81,122,81,126,81,127,81,131,81,132,81,134,81,135,81,138,81,139,81,142,81,143,81,144,81,145,81,147,81,148,81,152,81,154,81,157,81,158,81,159,81,161,81,163,81,166,81,167,81,168,81,169,81,170,81,173,81,174,81,180,81,184,81,185,81,186,81,190,81,191,81,193,81,194,81,195,81,197,81,200,81,202,81,205,81,206,81,208,81,210,81,211,81,212,81,213,81,214,81,215,81,216,81,217,81,218,81,220,81,222,81,223,81,226,81,227,81,229,81,230,81,231,81,232,81,233,81,234,81,236,81,238,81,241,81,242,81,244,81,247,81,254,81,4,82,5,82,9,82,11,82,12,82,15,82,16,82,19,82,20,82,21,82,28,82,30,82,31,82,33,82,34,82,35,82,37,82,38,82,39,82,42,82,44,82,47,82,49,82,50,82,52,82,53,82,60,82,62,82,68,82,69,82,70,82,71,82,72,82,73,82,75,82,78,82,79,82,82,82,83,82,85,82,87,82,88,82,89,82,90,82,91,82,93,82,95,82,96,82,98,82,99,82,100,82,102,82,104,82,107,82,108,82,109,82,110,82,112,82,113,82,115,82,116,82,117,82,118,82,119,82,120,82,121,82,122,82,123,82,124,82,126,82,128,82,131,82,132,82,133,82,134,82,135,82,137,82,138,82,139,82,140,82,141,82,142,82,143,82,145,82,146,82,148,82,149,82,150,82,151,82,152,82,153,82,154,82,156,82,164,82,165,82,166,82,167,82,174,82,175,82,176,82,180,82,181,82,182,82,183,82,184,82,185,82,186,82,187,82,188,82,189,82,192,82,193,82,194,82,196,82,197,82,198,82,200,82,202,82,204,82,205,82,206,82,207,82,209,82,211,82,212,82,213,82,215,82,217,82,218,82,219,82,220,82,221,82,222,82,224,82,225,82,226,82,227,82,229,82,230,82,231,82,232,82,233,82,234,82,235,82,236,82,237,82,238,82,239,82,241,82,242,82,243,82,244,82,245,82,246,82,247,82,248,82,251,82,252,82,253,82,1,83,2,83,3,83,4,83,7,83,9,83,10,83,11,83,12,83,14,83,17,83,18,83,19,83,20,83,24,83,27,83,28,83,30,83,31,83,34,83,36,83,37,83,39,83,40,83,41,83,43,83,44,83,45,83,47,83,48,83,49,83,50,83,51,83,52,83,53,83,54,83,55,83,56,83,60,83,61,83,64,83,66,83,68,83,70,83,75,83,76,83,77,83,80,83,84,83,88,83,89,83,91,83,93,83,101,83,104,83,106,83,108,83,109,83,114,83,118,83,121,83,123,83,124,83,125,83,126,83,128,83,129,83,131,83,135,83,136,83,138,83,142,83,143,83,144,83,145,83,146,83,147,83,148,83,150,83,151,83,153,83,155,83,156,83,158,83,160,83,161,83,164,83,167,83,170,83,171,83,172,83,173,83,175,83,176,83,177,83,178,83,179,83,180,83,181,83,183,83,184,83,185,83,186,83,188,83,189,83,190,83,192,83,195,83,196,83,197,83,198,83,199,83,206,83,207,83,208,83,210,83,211,83,213,83,218,83,220,83,221,83,222,83,225,83,226,83,231,83,244,83,250,83,254,83,255,83,0,84,2,84,5,84,7,84,11,84,20,84,24,84,25,84,26,84,28,84,34,84,36,84,37,84,42,84,48,84,51,84,54,84,55,84,58,84,61,84,63,84,65,84,66,84,68,84,69,84,71,84,73,84,76,84,77,84,78,84,79,84,81,84,90,84,93,84,94,84,95,84,96,84,97,84,99,84,101,84,103,84,105,84,106,84,107,84,108,84,109,84,110,84,111,84,112,84,116,84,121,84,122,84,126,84,127,84,129,84,131,84,133,84,135,84,136,84,137,84,138,84,141,84,145,84,147,84,151,84,152,84,156,84,158,84,159,84,160,84,161,84,162,84,165,84,174,84,176,84,178,84,181,84,182,84,183,84,185,84,186,84,188,84,190,84,195,84,197,84,202,84,203,84,214,84,216,84,219,84,224,84,225,84,226,84,227,84,228,84,235,84,236,84,239,84,240,84,241,84,244,84,245,84,246,84,247,84,248,84,249,84,251,84,254,84,0,85,2,85,3,85,4,85,5,85,8,85,10,85,11,85,12,85,13,85,14,85,18,85,19,85,21,85,22,85,23,85,24,85,25,85,26,85,28,85,29,85,30,85,31,85,33,85,37,85,38,85,40,85,41,85,43,85,45,85,50,85,52,85,53,85,54,85,56,85,57,85,58,85,59,85,61,85,64,85,66,85,69,85,71,85,72,85,75,85,76,85,77,85,78,85,79,85,81,85,82,85,83,85,84,85,87,85,88,85,89,85,90,85,91,85,93,85,94,85,95,85,96,85,98,85,99,85,104,85,105,85,107,85,111,85,112,85,113,85,114,85,115,85,116,85,121,85,122,85,125,85,127,85,133,85,134,85,140,85,141,85,142,85,144,85,146,85,147,85,149,85,150,85,151,85,154,85,155,85,158,85,160,85,161,85,162,85,163,85,164,85,165,85,166,85,168,85,169,85,170,85,171,85,172,85,173,85,174,85,175,85,176,85,178,85,180,85,182,85,184,85,186,85,188,85,191,85,192,85,193,85,194,85,195,85,198,85,199,85,200,85,202,85,203,85,206,85,207,85,208,85,213,85,215,85,216,85,217,85,218,85,219,85,222,85,224,85,226,85,231,85,233,85,237,85,238,85,240,85,241,85,244,85,246,85,248,85,249,85,250,85,251,85,252,85,255,85,2,86,3,86,4,86,5,86,6,86,7,86,10,86,11,86,13,86,16,86,17,86,18,86,19,86,20,86,21,86,22,86,23,86,25,86,26,86,28,86,29,86,32,86,33,86,34,86,37,86,38,86,40,86,41,86,42,86,43,86,46,86,47,86,48,86,51,86,53,86,55,86,56,86,58,86,60,86,61,86,62,86,64,86,65,86,66,86,67,86,68,86,69,86,70,86,71,86,72,86,73,86,74,86,75,86,79,86,80,86,81,86,82,86,83,86,85,86,86,86,90,86,91,86,93,86,94,86,95,86,96,86,97,86,99,86,101,86,102,86,103,86,109,86,110,86,111,86,112,86,114,86,115,86,116,86,117,86,119,86,120,86,121,86,122,86,125,86,126,86,127,86,128,86,129,86,130,86,131,86,132,86,135,86,136,86,137,86,138,86,139,86,140,86,141,86,144,86,145,86,146,86,148,86,149,86,150,86,151,86,152,86,153,86,154,86,155,86,156,86,157,86,158,86,159,86,160,86,161,86,162,86,164,86,165,86,166,86,167,86,168,86,169,86,170,86,171,86,172,86,173,86,174,86,176,86,177,86,178,86,179,86,180,86,181,86,182,86,184,86,185,86,186,86,187,86,189,86,190,86,191,86,192,86,193,86,194,86,195,86,196,86,197,86,198,86,199,86,200,86,201,86,203,86,204,86,205,86,206,86,207,86,208,86,209,86,210,86,211,86,213,86,214,86,216,86,217,86,220,86,227,86,229,86,230,86,231,86,232,86,233,86,234,86,236,86,238,86,239,86,242,86,243,86,246,86,247,86,248,86,251,86,252,86,0,87,1,87,2,87,5,87,7,87,11,87,12,87,13,87,14,87,15,87,16,87,17,87,18,87,19,87,20,87,21,87,22,87,23,87,24,87,25,87,26,87,27,87,29,87,30,87,32,87,33,87,34,87,36,87,37,87,38,87,39,87,43,87,49,87,50,87,52,87,53,87,54,87,55,87,56,87,60,87,61,87,63,87,65,87,67,87,68,87,69,87,70,87,72,87,73,87,75,87,82,87,83,87,84,87,85,87,86,87,88,87,89,87,98,87,99,87,101,87,103,87,108,87,110,87,112,87,113,87,114,87,116,87,117,87,120,87,121,87,122,87,125,87,126,87,127,87,128,87,129,87,135,87,136,87,137,87,138,87,141,87,142,87,143,87,144,87,145,87,148,87,149,87,150,87,151,87,152,87,153,87,154,87,156,87,157,87,158,87,159,87,165,87,168,87,170,87,172,87,175,87,176,87,177,87,179,87,181,87,182,87,183,87,185,87,186,87,187,87,188,87,189,87,190,87,191,87,192,87,193,87,196,87,197,87,198,87,199,87,200,87,201,87,202,87,204,87,205,87,208,87,209,87,211,87,214,87,215,87,219,87,220,87,222,87,225,87,226,87,227,87,229,87,230,87,231,87,232,87,233,87,234,87,235,87,236,87,238,87,240,87,241,87,242,87,243,87,245,87,246,87,247,87,251,87,252,87,254,87,255,87,1,88,3,88,4,88,5,88,8,88,9,88,10,88,12,88,14,88,15,88,16,88,18,88,19,88,20,88,22,88,23,88,24,88,26,88,27,88,28,88,29,88,31,88,34,88,35,88,37,88,38,88,39,88,40,88,41,88,43,88,44,88,45,88,46,88,47,88,49,88,50,88,51,88,52,88,54,88,55,88,56,88,57,88,58,88,59,88,60,88,61,88,62,88,63,88,64,88,65,88,66,88,67,88,69,88,70,88,71,88,72,88,73,88,74,88,75,88,78,88,79,88,80,88,82,88,83,88,85,88,86,88,87,88,89,88,90,88,91,88,92,88,93,88,95,88,96,88,97,88,98,88,99,88,100,88,102,88,103,88,104,88,105,88,106,88,109,88,110,88,111,88,112,88,113,88,114,88,115,88,116,88,117,88,118,88,119,88,120,88,121,88,122,88,123,88,124,88,125,88,127,88,130,88,132,88,134,88,135,88,136,88,138,88,139,88,140,88,141,88,142,88,143,88,144,88,145,88,148,88,149,88,150,88,151,88,152,88,155,88,156,88,157,88,160,88,161,88,162,88,163,88,164,88,165,88,166,88,167,88,170,88,171,88,172,88,173,88,174,88,175,88,176,88,177,88,178,88,179,88,180,88,181,88,182,88,183,88,184,88,185,88,186,88,187,88,189,88,190,88,191,88,192,88,194,88,195,88,196,88,198,88,199,88,200,88,201,88,202,88,203,88,204,88,205,88,206,88,207,88,208,88,210,88,211,88,212,88,214,88,215,88,216,88,217,88,218,88,219,88,220,88,221,88,222,88,223,88,224,88,225,88,226,88,227,88,229,88,230,88,231,88,232,88,233,88,234,88,237,88,239,88,241,88,242,88,244,88,245,88,247,88,248,88,250,88,251,88,252,88,253,88,254,88,255,88,0,89,1,89,3,89,5,89,6,89,8,89,9,89,10,89,11,89,12,89,14,89,16,89,17,89,18,89,19,89,23,89,24,89,27,89,29,89,30,89,32,89,33,89,34,89,35,89,38,89,40,89,44,89,48,89,50,89,51,89,53,89,54,89,59,89,61,89,62,89,63,89,64,89,67,89,69,89,70,89,74,89,76,89,77,89,80,89,82,89,83,89,89,89,91,89,92,89,93,89,94,89,95,89,97,89,99,89,100,89,102,89,103,89,104,89,105,89,106,89,107,89,108,89,109,89,110,89,111,89,112,89,113,89,114,89,117,89,119,89,122,89,123,89,124,89,126,89,127,89,128,89,133,89,137,89,139,89,140,89,142,89,143,89,144,89,145,89,148,89,149,89,152,89,154,89,155,89,156,89,157,89,159,89,160,89,161,89,162,89,166,89,167,89,172,89,173,89,176,89,177,89,179,89,180,89,181,89,182,89,183,89,184,89,186,89,188,89,189,89,191,89,192,89,193,89,194,89,195,89,196,89,197,89,199,89,200,89,201,89,204,89,205,89,206,89,207,89,213,89,214,89,217,89,219,89,222,89,223,89,224,89,225,89,226,89,228,89,230,89,231,89,233,89,234,89,235,89,237,89,238,89,239,89,240,89,241,89,242,89,243,89,244,89,245,89,246,89,247,89,248,89,250,89,252,89,253,89,254,89,0,90,2,90,10,90,11,90,13,90,14,90,15,90,16,90,18,90,20,90,21,90,22,90,23,90,25,90,26,90,27,90,29,90,30,90,33,90,34,90,36,90,38,90,39,90,40,90,42,90,43,90,44,90,45,90,46,90,47,90,48,90,51,90,53,90,55,90,56,90,57,90,58,90,59,90,61,90,62,90,63,90,65,90,66,90,67,90,68,90,69,90,71,90,72,90,75,90,76,90,77,90,78,90,79,90,80,90,81,90,82,90,83,90,84,90,86,90,87,90,88,90,89,90,91,90,92,90,93,90,94,90,95,90,96,90,97,90,99,90,100,90,101,90,102,90,104,90,105,90,107,90,108,90,109,90,110,90,111,90,112,90,113,90,114,90,115,90,120,90,121,90,123,90,124,90,125,90,126,90,128,90,129,90,130,90,131,90,132,90,133,90,134,90,135,90,136,90,137,90,138,90,139,90,140,90,141,90,142,90,143,90,144,90,145,90,147,90,148,90,149,90,150,90,151,90,152,90,153,90,156,90,157,90,158,90,159,90,160,90,161,90,162,90,163,90,164,90,165,90,166,90,167,90,168,90,169,90,171,90,172,90,173,90,174,90,175,90,176,90,177,90,180,90,182,90,183,90,185,90,186,90,187,90,188,90,189,90,191,90,192,90,195,90,196,90,197,90,198,90,199,90,200,90,202,90,203,90,205,90,206,90,207,90,208,90,209,90,211,90,213,90,215,90,217,90,218,90,219,90,221,90,222,90,223,90,226,90,228,90,229,90,231,90,232,90,234,90,236,90,237,90,238,90,239,90,240,90,242,90,243,90,244,90,245,90,246,90,247,90,248,90,249,90,250,90,251,90,252,90,253,90,254,90,255,90,0,91,1,91,2,91,3,91,4,91,5,91,6,91,7,91,8,91,10,91,11,91,12,91,13,91,14,91,15,91,16,91,17,91,18,91,19,91,20,91,21,91,24,91,25,91,26,91,27,91,28,91,29,91,30,91,31,91,32,91,33,91,34,91,35,91,36,91,37,91,38,91,39,91,40,91,41,91,42,91,43,91,44,91,45,91,46,91,47,91,48,91,49,91,51,91,53,91,54,91,56,91,57,91,58,91,59,91,60,91,61,91,62,91,63,91,65,91,66,91,67,91,68,91,69,91,70,91,71,91,72,91,73,91,74,91,75,91,76,91,77,91,78,91,79,91,82,91,86,91,94,91,96,91,97,91,103,91,104,91,107,91,109,91,110,91,111,91,114,91,116,91,118,91,119,91,120,91,121,91,123,91,124,91,126,91,127,91,130,91,134,91,138,91,141,91,142,91,144,91,145,91,146,91,148,91,150,91,159,91,167,91,168,91,169,91,172,91,173,91,174,91,175,91,177,91,178,91,183,91,186,91,187,91,188,91,192,91,193,91,195,91,200,91,201,91,202,91,203,91,205,91,206,91,207,91,209,91,212,91,213,91,214,91,215,91,216,91,217,91,218,91,219,91,220,91,224,91,226,91,227,91,230,91,231,91,233,91,234,91,235,91,236,91,237,91,239,91,241,91,242,91,243,91,244,91,245,91,246,91,247,91,253,91,254,91,0,92,2,92,3,92,5,92,7,92,8,92,11,92,12,92,13,92,14,92,16,92,18,92,19,92,23,92,25,92,27,92,30,92,31,92,32,92,33,92,35,92,38,92,40,92,41,92,42,92,43,92,45,92,46,92,47,92,48,92,50,92,51,92,53,92,54,92,55,92,67,92,68,92,70,92,71,92,76,92,77,92,82,92,83,92,84,92,86,92,87,92,88,92,90,92,91,92,92,92,93,92,95,92,98,92,100,92,103,92,104,92,105,92,106,92,107,92,108,92,109,92,112,92,114,92,115,92,116,92,117,92,118,92,119,92,120,92,123,92,124,92,125,92,126,92,128,92,131,92,132,92,133,92,134,92,135,92,137,92,138,92,139,92,142,92,143,92,146,92,147,92,149,92,157,92,158,92,159,92,160,92,161,92,164,92,165,92,166,92,167,92,168,92,170,92,174,92,175,92,176,92,178,92,180,92,182,92,185,92,186,92,187,92,188,92,190,92,192,92,194,92,195,92,197,92,198,92,199,92,200,92,201,92,202,92,204,92,205,92,206,92,207,92,208,92,209,92,211,92,212,92,213,92,214,92,215,92,216,92,218,92,219,92,220,92,221,92,222,92,223,92,224,92,226,92,227,92,231,92,233,92,235,92,236,92,238,92,239,92,241,92,242,92,243,92,244,92,245,92,246,92,247,92,248,92,249,92,250,92,252,92,253,92,254,92,255,92,0,93,1,93,4,93,5,93,8,93,9,93,10,93,11,93,12,93,13,93,15,93,16,93,17,93,18,93,19,93,21,93,23,93,24,93,25,93,26,93,28,93,29,93,31,93,32,93,33,93,34,93,35,93,37,93,40,93,42,93,43,93,44,93,47,93,48,93,49,93,50,93,51,93,53,93,54,93,55,93,56,93,57,93,58,93,59,93,60,93,63,93,64,93,65,93,66,93,67,93,68,93,69,93,70,93,72,93,73,93,77,93,78,93,79,93,80,93,81,93,82,93,83,93,84,93,85,93,86,93,87,93,89,93,90,93,92,93,94,93,95,93,96,93,97,93,98,93,99,93,100,93,101,93,102,93,103,93,104,93,106,93,109,93,110,93,112,93,113,93,114,93,115,93,117,93,118,93,119,93,120,93,121,93,122,93,123,93,124,93,125,93,126,93,127,93,128,93,129,93,131,93,132,93,133,93,134,93,135,93,136,93,137,93,138,93,139,93,140,93,141,93,142,93,143,93,144,93,145,93,146,93,147,93,148,93,149,93,150,93,151,93,152,93,154,93,155,93,156,93,158,93,159,93,160,93,161,93,162,93,163,93,164,93,165,93,166,93,167,93,168,93,169,93,170,93,171,93,172,93,173,93,174,93,175,93,176,93,177,93,178,93,179,93,180,93,181,93,182,93,184,93,185,93,186,93,187,93,188,93,189,93,190,93,191,93,192,93,193,93,194,93,195,93,196,93,198,93,199,93,200,93,201,93,202,93,203,93,204,93,206,93,207,93,208,93,209,93,210,93,211,93,212,93,213,93,214,93,215,93,216,93,217,93,218,93,220,93,223,93,224,93,227,93,228,93,234,93,236,93,237,93,240,93,245,93,246,93,248,93,249,93,250,93,251,93,252,93,255,93,0,94,4,94,7,94,9,94,10,94,11,94,13,94,14,94,18,94,19,94,23,94,30,94,31,94,32,94,33,94,34,94,35,94,36,94,37,94,40,94,41,94,42,94,43,94,44,94,47,94,48,94,50,94,51,94,52,94,53,94,54,94,57,94,58,94,62,94,63,94,64,94,65,94,67,94,70,94,71,94,72,94,73,94,74,94,75,94,77,94,78,94,79,94,80,94,81,94,82,94,83,94,86,94,87,94,88,94,89,94,90,94,92,94,93,94,95,94,96,94,99,94,100,94,101,94,102,94,103,94,104,94,105,94,106,94,107,94,108,94,109,94,110,94,111,94,112,94,113,94,117,94,119,94,121,94,126,94,129,94,130,94,131,94,133,94,136,94,137,94,140,94,141,94,142,94,146,94,152,94,155,94,157,94,161,94,162,94,163,94,164,94,168,94,169,94,170,94,171,94,172,94,174,94,175,94,176,94,177,94,178,94,180,94,186,94,187,94,188,94,189,94,191,94,192,94,193,94,194,94,195,94,196,94,197,94,198,94,199,94,200,94,203,94,204,94,205,94,206,94,207,94,208,94,212,94,213,94,215,94,216,94,217,94,218,94,220,94,221,94,222,94,223,94,224,94,225,94,226,94,227,94,228,94,229,94,230,94,231,94,233,94,235,94,236,94,237,94,238,94,239,94,240,94,241,94,242,94,243,94,245,94,248,94,249,94,251,94,252,94,253,94,5,95,6,95,7,95,9,95,12,95,13,95,14,95,16,95,18,95,20,95,22,95,25,95,26,95,28,95,29,95,30,95,33,95,34,95,35,95,36,95,40,95,43,95,44,95,46,95,48,95,50,95,51,95,52,95,53,95,54,95,55,95,56,95,59,95,61,95,62,95,63,95,65,95,66,95,67,95,68,95,69,95,70,95,71,95,72,95,73,95,74,95,75,95,76,95,77,95,78,95,79,95,81,95,84,95,89,95,90,95,91,95,92,95,94,95,95,95,96,95,99,95,101,95,103,95,104,95,107,95,110,95,111,95,114,95,116,95,117,95,118,95,120,95,122,95,125,95,126,95,127,95,131,95,134,95,141,95,142,95,143,95,145,95,147,95,148,95,150,95,154,95,155,95,157,95,158,95,159,95,160,95,162,95,163,95,164,95,165,95,166,95,167,95,169,95,171,95,172,95,175,95,176,95,177,95,178,95,179,95,180,95,182,95,184,95,185,95,186,95,187,95,190,95,191,95,192,95,193,95,194,95,199,95,200,95,202,95,203,95,206,95,211,95,212,95,213,95,218,95,219,95,220,95,222,95,223,95,226,95,227,95,229,95,230,95,232,95,233,95,236,95,239,95,240,95,242,95,243,95,244,95,246,95,247,95,249,95,250,95,252,95,7,96,8,96,9,96,11,96,12,96,16,96,17,96,19,96,23,96,24,96,26,96,30,96,31,96,34,96,35,96,36,96,44,96,45,96,46,96,48,96,49,96,50,96,51,96,52,96,54,96,55,96,56,96,57,96,58,96,61,96,62,96,64,96,68,96,69,96,70,96,71,96,72,96,73,96,74,96,76,96,78,96,79,96,81,96,83,96,84,96,86,96,87,96,88,96,91,96,92,96,94,96,95,96,96,96,97,96,101,96,102,96,110,96,113,96,114,96,116,96,117,96,119,96,126,96,128,96,129,96,130,96,133,96,134,96,135,96,136,96,138,96,139,96,142,96,143,96,144,96,145,96,147,96,149,96,151,96,152,96,153,96,156,96,158,96,161,96,162,96,164,96,165,96,167,96,169,96,170,96,174,96,176,96,179,96,181,96,182,96,183,96,185,96,186,96,189,96,190,96,191,96,192,96,193,96,194,96,195,96,196,96,199,96,200,96,201,96,204,96,205,96,206,96,207,96,208,96,210,96,211,96,212,96,214,96,215,96,217,96,219,96,222,96,225,96,226,96,227,96,228,96,229,96,234,96,241,96,242,96,245,96,247,96,248,96,251,96,252,96,253,96,254,96,255,96,2,97,3,97,4,97,5,97,7,97,10,97,11,97,12,97,16,97,17,97,18,97,19,97,20,97,22,97,23,97,24,97,25,97,27,97,28,97,29,97,30,97,33,97,34,97,37,97,40,97,41,97,42,97,44,97,45,97,46,97,47,97,48,97,49,97,50,97,51,97,52,97,53,97,54,97,55,97,56,97,57,97,58,97,59,97,60,97,61,97,62,97,64,97,65,97,66,97,67,97,68,97,69,97,70,97,71,97,73,97,75,97,77,97,79,97,80,97,82,97,83,97,84,97,86,97,87,97,88,97,89,97,90,97,91,97,92,97,94,97,95,97,96,97,97,97,99,97,100,97,101,97,102,97,105,97,106,97,107,97,108,97,109,97,110,97,111,97,113,97,114,97,115,97,116,97,118,97,120,97,121,97,122,97,123,97,124,97,125,97,126,97,127,97,128,97,129,97,130,97,131,97,132,97,133,97,134,97,135,97,136,97,137,97,138,97,140,97,141,97,143,97,144,97,145,97,146,97,147,97,149,97,150,97,151,97,152,97,153,97,154,97,155,97,156,97,158,97,159,97,160,97,161,97,162,97,163,97,164,97,165,97,166,97,170,97,171,97,173,97,174,97,175,97,176,97,177,97,178,97,179,97,180,97,181,97,182,97,184,97,185,97,186,97,187,97,188,97,189,97,191,97,192,97,193,97,195,97,196,97,197,97,198,97,199,97,201,97,204,97,205,97,206,97,207,97,208,97,211,97,213,97,214,97,215,97,216,97,217,97,218,97,219,97,220,97,221,97,222,97,223,97,224,97,225,97,226,97,227,97,228,97,229,97,231,97,232,97,233,97,234,97,235,97,236,97,237,97,238,97,239,97,240,97,241,97,242,97,243,97,244,97,246,97,247,97,248,97,249,97,250,97,251,97,252,97,253,97,254,97,0,98,1,98,2,98,3,98,4,98,5,98,7,98,9,98,19,98,20,98,25,98,28,98,29,98,30,98,32,98,35,98,38,98,39,98,40,98,41,98,43,98,45,98,47,98,48,98,49,98,50,98,53,98,54,98,56,98,57,98,58,98,59,98,60,98,66,98,68,98,69,98,70,98,74,98,79,98,80,98,85,98,86,98,87,98,89,98,90,98,92,98,93,98,94,98,95,98,96,98,97,98,98,98,100,98,101,98,104,98,113,98,114,98,116,98,117,98,119,98,120,98,122,98,123,98,125,98,129,98,130,98,131,98,133,98,134,98,135,98,136,98,139,98,140,98,141,98,142,98,143,98,144,98,148,98,153,98,156,98,157,98,158,98,163,98,166,98,167,98,169,98,170,98,173,98,174,98,175,98,176,98,178,98,179,98,180,98,182,98,183,98,184,98,186,98,190,98,192,98,193,98,195,98,203,98,207,98,209,98,213,98,221,98,222,98,224,98,225,98,228,98,234,98,235,98,240,98,242,98,245,98,248,98,249,98,250,98,251,98,0,99,3,99,4,99,5,99,6,99,10,99,11,99,12,99,13,99,15,99,16,99,18,99,19,99,20,99,21,99,23,99,24,99,25,99,28,99,38,99,39,99,41,99,44,99,45,99,46,99,48,99,49,99,51,99,52,99,53,99,54,99,55,99,56,99,59,99,60,99,62,99,63,99,64,99,65,99,68,99,71,99,72,99,74,99,81,99,82,99,83,99,84,99,86,99,87,99,88,99,89,99,90,99,91,99,92,99,93,99,96,99,100,99,101,99,102,99,104,99,106,99,107,99,108,99,111,99,112,99,114,99,115,99,116,99,117,99,120,99,121,99,124,99,125,99,126,99,127,99,129,99,131,99,132,99,133,99,134,99,139,99,141,99,145,99,147,99,148,99,149,99,151,99,153,99,154,99,155,99,156,99,157,99,158,99,159,99,161,99,164,99,166,99,171,99,175,99,177,99,178,99,181,99,182,99,185,99,187,99,189,99,191,99,192,99,193,99,194,99,195,99,197,99,199,99,200,99,202,99,203,99,204,99,209,99,211,99,212,99,213,99,215,99,216,99,217,99,218,99,219,99,220,99,221,99,223,99,226,99,228,99,229,99,230,99,231,99,232,99,235,99,236,99,238,99,239,99,240,99,241,99,243,99,245,99,247,99,249,99,250,99,251,99,252,99,254,99,3,100,4,100,6,100,7,100,8,100,9,100,10,100,13,100,14,100,17,100,18,100,21,100,22,100,23,100,24,100,25,100,26,100,29,100,31,100,34,100,35,100,36,100,37,100,39,100,40,100,41,100,43,100,46,100,47,100,48,100,49,100,50,100,51,100,53,100,54,100,55,100,56,100,57,100,59,100,60,100,62,100,64,100,66,100,67,100,73,100,75,100,76,100,77,100,78,100,79,100,80,100,81,100,83,100,85,100,86,100,87,100,89,100,90,100,91,100,92,100,93,100,95,100,96,100,97,100,98,100,99,100,100,100,101,100,102,100,104,100,106,100,107,100,108,100,110,100,111,100,112,100,113,100,114,100,115,100,116,100,117,100,118,100,119,100,123,100,124,100,125,100,126,100,127,100,128,100,129,100,131,100,134,100,136,100,137,100,138,100,139,100,140,100,141,100,142,100,143,100,144,100,147,100,148,100,151,100,152,100,154,100,155,100,156,100,157,100,159,100,160,100,161,100,162,100,163,100,165,100,166,100,167,100,168,100,170,100,171,100,175,100,177,100,178,100,179,100,180,100,182,100,185,100,187,100,189,100,190,100,191,100,193,100,195,100,196,100,198,100,199,100,200,100,201,100,202,100,203,100,204,100,207,100,209,100,211,100,212,100,213,100,214,100,217,100,218,100,219,100,220,100,221,100,223,100,224,100,225,100,227,100,229,100,231,100,232,100,233,100,234,100,235,100,236,100,237,100,238,100,239,100,240,100,241,100,242,100,243,100,244,100,245,100,246,100,247,100,248,100,249,100,250,100,251,100,252,100,253,100,254,100,255,100,1,101,2,101,3,101,4,101,5,101,6,101,7,101,8,101,10,101,11,101,12,101,13,101,14,101,15,101,16,101,17,101,19,101,20,101,21,101,22,101,23,101,25,101,26,101,27,101,28,101,29,101,30,101,31,101,32,101,33,101,34,101,35,101,36,101,38,101,39,101,40,101,41,101,42,101,44,101,45,101,48,101,49,101,50,101,51,101,55,101,58,101,60,101,61,101,64,101,65,101,66,101,67,101,68,101,70,101,71,101,74,101,75,101,77,101,78,101,80,101,82,101,83,101,84,101,87,101,88,101,90,101,92,101,95,101,96,101,97,101,100,101,101,101,103,101,104,101,105,101,106,101,109,101,110,101,111,101,113,101,115,101,117,101,118,101,120,101,121,101,122,101,123,101,124,101,125,101,126,101,127,101,128,101,129,101,130,101,131,101,132,101,133,101,134,101,136,101,137,101,138,101,141,101,142,101,143,101,146,101,148,101,149,101,150,101,152,101,154,101,157,101], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+173116);
/* memory initializer */ allocate([158,101,160,101,162,101,163,101,166,101,168,101,170,101,172,101,174,101,177,101,178,101,179,101,180,101,181,101,182,101,183,101,184,101,186,101,187,101,190,101,191,101,192,101,194,101,199,101,200,101,201,101,202,101,205,101,208,101,209,101,211,101,212,101,213,101,216,101,217,101,218,101,219,101,220,101,221,101,222,101,223,101,225,101,227,101,228,101,234,101,235,101,242,101,243,101,244,101,245,101,248,101,249,101,251,101,252,101,253,101,254,101,255,101,1,102,4,102,5,102,7,102,8,102,9,102,11,102,13,102,16,102,17,102,18,102,22,102,23,102,24,102,26,102,27,102,28,102,30,102,33,102,34,102,35,102,36,102,38,102,41,102,42,102,43,102,44,102,46,102,48,102,50,102,51,102,55,102,56,102,57,102,58,102,59,102,61,102,63,102,64,102,66,102,68,102,69,102,70,102,71,102,72,102,73,102,74,102,77,102,78,102,80,102,81,102,88,102,89,102,91,102,92,102,93,102,94,102,96,102,98,102,99,102,101,102,103,102,105,102,106,102,107,102,108,102,109,102,113,102,114,102,115,102,117,102,120,102,121,102,123,102,124,102,125,102,127,102,128,102,129,102,131,102,133,102,134,102,136,102,137,102,138,102,139,102,141,102,142,102,143,102,144,102,146,102,147,102,148,102,149,102,152,102,153,102,154,102,155,102,156,102,158,102,159,102,160,102,161,102,162,102,163,102,164,102,165,102,166,102,169,102,170,102,171,102,172,102,173,102,175,102,176,102,177,102,178,102,179,102,181,102,182,102,183,102,184,102,186,102,187,102,188,102,189,102,191,102,192,102,193,102,194,102,195,102,196,102,197,102,198,102,199,102,200,102,201,102,202,102,203,102,204,102,205,102,206,102,207,102,208,102,209,102,210,102,211,102,212,102,213,102,214,102,215,102,216,102,218,102,222,102,223,102,224,102,225,102,226,102,227,102,228,102,229,102,231,102,232,102,234,102,235,102,236,102,237,102,238,102,239,102,241,102,245,102,246,102,248,102,250,102,251,102,253,102,1,103,2,103,3,103,4,103,5,103,6,103,7,103,12,103,14,103,15,103,17,103,18,103,19,103,22,103,24,103,25,103,26,103,28,103,30,103,32,103,33,103,34,103,35,103,36,103,37,103,39,103,41,103,46,103,48,103,50,103,51,103,54,103,55,103,56,103,57,103,59,103,60,103,62,103,63,103,65,103,68,103,69,103,71,103,74,103,75,103,77,103,82,103,84,103,85,103,87,103,88,103,89,103,90,103,91,103,93,103,98,103,99,103,100,103,102,103,103,103,107,103,108,103,110,103,113,103,116,103,118,103,120,103,121,103,122,103,123,103,125,103,128,103,130,103,131,103,133,103,134,103,136,103,138,103,140,103,141,103,142,103,143,103,145,103,146,103,147,103,148,103,150,103,153,103,155,103,159,103,160,103,161,103,164,103,166,103,169,103,172,103,174,103,177,103,178,103,180,103,185,103,186,103,187,103,188,103,189,103,190,103,191,103,192,103,194,103,197,103,198,103,199,103,200,103,201,103,202,103,203,103,204,103,205,103,206,103,213,103,214,103,215,103,219,103,223,103,225,103,227,103,228,103,230,103,231,103,232,103,234,103,235,103,237,103,238,103,242,103,245,103,246,103,247,103,248,103,249,103,250,103,251,103,252,103,254,103,1,104,2,104,3,104,4,104,6,104,13,104,16,104,18,104,20,104,21,104,24,104,25,104,26,104,27,104,28,104,30,104,31,104,32,104,34,104,35,104,36,104,37,104,38,104,39,104,40,104,43,104,44,104,45,104,46,104,47,104,48,104,49,104,52,104,53,104,54,104,58,104,59,104,63,104,71,104,75,104,77,104,79,104,82,104,86,104,87,104,88,104,89,104,90,104,91,104,92,104,93,104,94,104,95,104,106,104,108,104,109,104,110,104,111,104,112,104,113,104,114,104,115,104,117,104,120,104,121,104,122,104,123,104,124,104,125,104,126,104,127,104,128,104,130,104,132,104,135,104,136,104,137,104,138,104,139,104,140,104,141,104,142,104,144,104,145,104,146,104,148,104,149,104,150,104,152,104,153,104,154,104,155,104,156,104,157,104,158,104,159,104,160,104,161,104,163,104,164,104,165,104,169,104,170,104,171,104,172,104,174,104,177,104,178,104,180,104,182,104,183,104,184,104,185,104,186,104,187,104,188,104,189,104,190,104,191,104,193,104,195,104,196,104,197,104,198,104,199,104,200,104,202,104,204,104,206,104,207,104,208,104,209,104,211,104,212,104,214,104,215,104,217,104,219,104,220,104,221,104,222,104,223,104,225,104,226,104,228,104,229,104,230,104,231,104,232,104,233,104,234,104,235,104,236,104,237,104,239,104,242,104,243,104,244,104,246,104,247,104,248,104,251,104,253,104,254,104,255,104,0,105,2,105,3,105,4,105,6,105,7,105,8,105,9,105,10,105,12,105,15,105,17,105,19,105,20,105,21,105,22,105,23,105,24,105,25,105,26,105,27,105,28,105,29,105,30,105,33,105,34,105,35,105,37,105,38,105,39,105,40,105,41,105,42,105,43,105,44,105,46,105,47,105,49,105,50,105,51,105,53,105,54,105,55,105,56,105,58,105,59,105,60,105,62,105,64,105,65,105,67,105,68,105,69,105,70,105,71,105,72,105,73,105,74,105,75,105,76,105,77,105,78,105,79,105,80,105,81,105,82,105,83,105,85,105,86,105,88,105,89,105,91,105,92,105,95,105,97,105,98,105,100,105,101,105,103,105,104,105,105,105,106,105,108,105,109,105,111,105,112,105,114,105,115,105,116,105,117,105,118,105,122,105,123,105,125,105,126,105,127,105,129,105,131,105,133,105,138,105,139,105,140,105,142,105,143,105,144,105,145,105,146,105,147,105,150,105,151,105,153,105,154,105,157,105,158,105,159,105,160,105,161,105,162,105,163,105,164,105,165,105,166,105,169,105,170,105,172,105,174,105,175,105,176,105,178,105,179,105,181,105,182,105,184,105,185,105,186,105,188,105,189,105,190,105,191,105,192,105,194,105,195,105,196,105,197,105,198,105,199,105,200,105,201,105,203,105,205,105,207,105,209,105,210,105,211,105,213,105,214,105,215,105,216,105,217,105,218,105,220,105,221,105,222,105,225,105,226,105,227,105,228,105,229,105,230,105,231,105,232,105,233,105,234,105,235,105,236,105,238,105,239,105,240,105,241,105,243,105,244,105,245,105,246,105,247,105,248,105,249,105,250,105,251,105,252,105,254,105,0,106,1,106,2,106,3,106,4,106,5,106,6,106,7,106,8,106,9,106,11,106,12,106,13,106,14,106,15,106,16,106,17,106,18,106,19,106,20,106,21,106,22,106,25,106,26,106,27,106,28,106,29,106,30,106,32,106,34,106,35,106,36,106,37,106,38,106,39,106,41,106,43,106,44,106,45,106,46,106,48,106,50,106,51,106,52,106,54,106,55,106,56,106,57,106,58,106,59,106,60,106,63,106,64,106,65,106,66,106,67,106,69,106,70,106,72,106,73,106,74,106,75,106,76,106,77,106,78,106,79,106,81,106,82,106,83,106,84,106,85,106,86,106,87,106,90,106,92,106,93,106,94,106,95,106,96,106,98,106,99,106,100,106,102,106,103,106,104,106,105,106,106,106,107,106,108,106,109,106,110,106,111,106,112,106,114,106,115,106,116,106,117,106,118,106,119,106,120,106,122,106,123,106,125,106,126,106,127,106,129,106,130,106,131,106,133,106,134,106,135,106,136,106,137,106,138,106,139,106,140,106,141,106,143,106,146,106,147,106,148,106,149,106,150,106,152,106,153,106,154,106,155,106,156,106,157,106,158,106,159,106,161,106,162,106,163,106,164,106,165,106,166,106,167,106,168,106,170,106,173,106,174,106,175,106,176,106,177,106,178,106,179,106,180,106,181,106,182,106,183,106,184,106,185,106,186,106,187,106,188,106,189,106,190,106,191,106,192,106,193,106,194,106,195,106,196,106,197,106,198,106,199,106,200,106,201,106,202,106,203,106,204,106,205,106,206,106,207,106,208,106,209,106,210,106,211,106,212,106,213,106,214,106,215,106,216,106,217,106,218,106,219,106,220,106,221,106,222,106,223,106,224,106,225,106,226,106,227,106,228,106,229,106,230,106,231,106,232,106,233,106,234,106,235,106,236,106,237,106,238,106,239,106,240,106,241,106,242,106,243,106,244,106,245,106,246,106,247,106,248,106,249,106,250,106,251,106,252,106,253,106,254,106,255,106,0,107,1,107,2,107,3,107,4,107,5,107,6,107,7,107,8,107,9,107,10,107,11,107,12,107,13,107,14,107,15,107,16,107,17,107,18,107,19,107,20,107,21,107,22,107,23,107,24,107,25,107,26,107,27,107,28,107,29,107,30,107,31,107,37,107,38,107,40,107,41,107,42,107,43,107,44,107,45,107,46,107,47,107,48,107,49,107,51,107,52,107,53,107,54,107,56,107,59,107,60,107,61,107,63,107,64,107,65,107,66,107,68,107,69,107,72,107,74,107,75,107,77,107,78,107,79,107,80,107,81,107,82,107,83,107,84,107,85,107,86,107,87,107,88,107,90,107,91,107,92,107,93,107,94,107,95,107,96,107,97,107,104,107,105,107,107,107,108,107,109,107,110,107,111,107,112,107,113,107,114,107,115,107,116,107,117,107,118,107,119,107,120,107,122,107,125,107,126,107,127,107,128,107,133,107,136,107,140,107,142,107,143,107,144,107,145,107,148,107,149,107,151,107,152,107,153,107,156,107,157,107,158,107,159,107,160,107,162,107,163,107,164,107,165,107,166,107,167,107,168,107,169,107,171,107,172,107,173,107,174,107,175,107,176,107,177,107,178,107,182,107,184,107,185,107,186,107,187,107,188,107,189,107,190,107,192,107,195,107,196,107,198,107,199,107,200,107,201,107,202,107,204,107,206,107,208,107,209,107,216,107,218,107,220,107,221,107,222,107,223,107,224,107,226,107,227,107,228,107,229,107,230,107,231,107,232,107,233,107,236,107,237,107,238,107,240,107,241,107,242,107,244,107,246,107,247,107,248,107,250,107,251,107,252,107,254,107,255,107,0,108,1,108,2,108,3,108,4,108,8,108,9,108,10,108,11,108,12,108,14,108,18,108,23,108,28,108,29,108,30,108,32,108,35,108,37,108,43,108,44,108,45,108,49,108,51,108,54,108,55,108,57,108,58,108,59,108,60,108,62,108,63,108,67,108,68,108,69,108,72,108,75,108,76,108,77,108,78,108,79,108,81,108,82,108,83,108,86,108,88,108,89,108,90,108,98,108,99,108,101,108,102,108,103,108,107,108,108,108,109,108,110,108,111,108,113,108,115,108,117,108,119,108,120,108,122,108,123,108,124,108,127,108,128,108,132,108,135,108,138,108,139,108,141,108,142,108,145,108,146,108,149,108,150,108,151,108,152,108,154,108,156,108,157,108,158,108,160,108,162,108,168,108,172,108,175,108,176,108,180,108,181,108,182,108,183,108,186,108,192,108,193,108,194,108,195,108,198,108,199,108,200,108,203,108,205,108,206,108,207,108,209,108,210,108,216,108,217,108,218,108,220,108,221,108,223,108,228,108,230,108,231,108,233,108,236,108,237,108,242,108,244,108,249,108,255,108,0,109,2,109,3,109,5,109,6,109,8,109,9,109,10,109,13,109,15,109,16,109,17,109,19,109,20,109,21,109,22,109,24,109,28,109,29,109,31,109,32,109,33,109,34,109,35,109,36,109,38,109,40,109,41,109,44,109,45,109,47,109,48,109,52,109,54,109,55,109,56,109,58,109,63,109,64,109,66,109,68,109,73,109,76,109,80,109,85,109,86,109,87,109,88,109,91,109,93,109,95,109,97,109,98,109,100,109,101,109,103,109,104,109,107,109,108,109,109,109,112,109,113,109,114,109,115,109,117,109,118,109,121,109,122,109,123,109,125,109,126,109,127,109,128,109,129,109,131,109,132,109,134,109,135,109,138,109,139,109,141,109,143,109,144,109,146,109,150,109,151,109,152,109,153,109,154,109,156,109,162,109,165,109,172,109,173,109,176,109,177,109,179,109,180,109,182,109,183,109,185,109,186,109,187,109,188,109,189,109,190,109,193,109,194,109,195,109,200,109,201,109,202,109,205,109,206,109,207,109,208,109,210,109,211,109,212,109,213,109,215,109,218,109,219,109,220,109,223,109,226,109,227,109,229,109,231,109,232,109,233,109,234,109,237,109,239,109,240,109,242,109,244,109,245,109,246,109,248,109,250,109,253,109,254,109,255,109,0,110,1,110,2,110,3,110,4,110,6,110,7,110,8,110,9,110,11,110,15,110,18,110,19,110,21,110,24,110,25,110,27,110,28,110,30,110,31,110,34,110,38,110,39,110,40,110,42,110,44,110,46,110,48,110,49,110,51,110,53,110,54,110,55,110,57,110,59,110,60,110,61,110,62,110,63,110,64,110,65,110,66,110,69,110,70,110,71,110,72,110,73,110,74,110,75,110,76,110,79,110,80,110,81,110,82,110,85,110,87,110,89,110,90,110,92,110,93,110,94,110,96,110,97,110,98,110,99,110,100,110,101,110,102,110,103,110,104,110,105,110,106,110,108,110,109,110,111,110,112,110,113,110,114,110,115,110,116,110,117,110,118,110,119,110,120,110,121,110,122,110,123,110,124,110,125,110,128,110,129,110,130,110,132,110,135,110,136,110,138,110,139,110,140,110,141,110,142,110,145,110,146,110,147,110,148,110,149,110,150,110,151,110,153,110,154,110,155,110,157,110,158,110,160,110,161,110,163,110,164,110,166,110,168,110,169,110,171,110,172,110,173,110,174,110,176,110,179,110,181,110,184,110,185,110,188,110,190,110,191,110,192,110,195,110,196,110,197,110,198,110,200,110,201,110,202,110,204,110,205,110,206,110,208,110,210,110,214,110,216,110,217,110,219,110,220,110,221,110,227,110,231,110,234,110,235,110,236,110,237,110,238,110,239,110,240,110,241,110,242,110,243,110,245,110,246,110,247,110,248,110,250,110,251,110,252,110,253,110,254,110,255,110,0,111,1,111,3,111,4,111,5,111,7,111,8,111,10,111,11,111,12,111,13,111,14,111,16,111,17,111,18,111,22,111,23,111,24,111,25,111,26,111,27,111,28,111,29,111,30,111,31,111,33,111,34,111,35,111,37,111,38,111,39,111,40,111,44,111,46,111,48,111,50,111,52,111,53,111,55,111,56,111,57,111,58,111,59,111,60,111,61,111,63,111,64,111,65,111,66,111,67,111,68,111,69,111,72,111,73,111,74,111,76,111,78,111,79,111,80,111,81,111,82,111,83,111,84,111,85,111,86,111,87,111,89,111,90,111,91,111,93,111,95,111,96,111,97,111,99,111,100,111,101,111,103,111,104,111,105,111,106,111,107,111,108,111,111,111,112,111,113,111,115,111,117,111,118,111,119,111,121,111,123,111,125,111,126,111,127,111,128,111,129,111,130,111,131,111,133,111,134,111,135,111,138,111,139,111,143,111,144,111,145,111,146,111,147,111,148,111,149,111,150,111,151,111,152,111,153,111,154,111,155,111,157,111,158,111,159,111,160,111,162,111,163,111,164,111,165,111,166,111,168,111,169,111,170,111,171,111,172,111,173,111,174,111,175,111,176,111,177,111,178,111,180,111,181,111,183,111,184,111,186,111,187,111,188,111,189,111,190,111,191,111,193,111,195,111,196,111,197,111,198,111,199,111,200,111,202,111,203,111,204,111,205,111,206,111,207,111,208,111,211,111,212,111,213,111,214,111,215,111,216,111,217,111,218,111,219,111,220,111,221,111,223,111,226,111,227,111,228,111,229,111,230,111,231,111,232,111,233,111,234,111,235,111,236,111,237,111,240,111,241,111,242,111,243,111,244,111,245,111,246,111,247,111,248,111,249,111,250,111,251,111,252,111,253,111,254,111,255,111,0,112,1,112,2,112,3,112,4,112,5,112,6,112,7,112,8,112,9,112,10,112,11,112,12,112,13,112,14,112,15,112,16,112,18,112,19,112,20,112,21,112,22,112,23,112,24,112,25,112,28,112,29,112,30,112,31,112,32,112,33,112,34,112,36,112,37,112,38,112,39,112,40,112,41,112,42,112,43,112,44,112,45,112,46,112,47,112,48,112,49,112,50,112,51,112,52,112,54,112,55,112,56,112,58,112,59,112,60,112,61,112,62,112,63,112,64,112,65,112,66,112,67,112,68,112,69,112,70,112,71,112,72,112,73,112,74,112,75,112,77,112,78,112,80,112,81,112,82,112,83,112,84,112,85,112,86,112,87,112,88,112,89,112,90,112,91,112,92,112,93,112,95,112,96,112,97,112,98,112,99,112,100,112,101,112,102,112,103,112,104,112,105,112,106,112,110,112,113,112,114,112,115,112,116,112,119,112,121,112,122,112,123,112,125,112,129,112,130,112,131,112,132,112,134,112,135,112,136,112,139,112,140,112,141,112,143,112,144,112,145,112,147,112,151,112,152,112,154,112,155,112,158,112,159,112,160,112,161,112,162,112,163,112,164,112,165,112,166,112,167,112,168,112,169,112,170,112,176,112,178,112,180,112,181,112,182,112,186,112,190,112,191,112,196,112,197,112,198,112,199,112,201,112,203,112,204,112,205,112,206,112,207,112,208,112,209,112,210,112,211,112,212,112,213,112,214,112,215,112,218,112,220,112,221,112,222,112,224,112,225,112,226,112,227,112,229,112,234,112,238,112,240,112,241,112,242,112,243,112,244,112,245,112,246,112,248,112,250,112,251,112,252,112,254,112,255,112,0,113,1,113,2,113,3,113,4,113,5,113,6,113,7,113,8,113,11,113,12,113,13,113,14,113,15,113,17,113,18,113,20,113,23,113,27,113,28,113,29,113,30,113,31,113,32,113,33,113,34,113,35,113,36,113,37,113,39,113,40,113,41,113,42,113,43,113,44,113,45,113,46,113,50,113,51,113,52,113,53,113,55,113,56,113,57,113,58,113,59,113,60,113,61,113,62,113,63,113,64,113,65,113,66,113,67,113,68,113,70,113,71,113,72,113,73,113,75,113,77,113,79,113,80,113,81,113,82,113,83,113,84,113,85,113,86,113,87,113,88,113,89,113,90,113,91,113,93,113,95,113,96,113,97,113,98,113,99,113,101,113,105,113,106,113,107,113,108,113,109,113,111,113,112,113,113,113,116,113,117,113,118,113,119,113,121,113,123,113,124,113,126,113,127,113,128,113,129,113,130,113,131,113,133,113,134,113,135,113,136,113,137,113,139,113,140,113,141,113,142,113,144,113,145,113,146,113,147,113,149,113,150,113,151,113,154,113,155,113,156,113,157,113,158,113,161,113,162,113,163,113,164,113,165,113,166,113,167,113,169,113,170,113,171,113,173,113,174,113,175,113,176,113,177,113,178,113,180,113,182,113,183,113,184,113,186,113,187,113,188,113,189,113,190,113,191,113,192,113,193,113,194,113,196,113,197,113,198,113,199,113,200,113,201,113,202,113,203,113,204,113,205,113,207,113,208,113,209,113,210,113,211,113,214,113,215,113,216,113,217,113,218,113,219,113,220,113,221,113,222,113,223,113,225,113,226,113,227,113,228,113,230,113,232,113,233,113,234,113,235,113,236,113,237,113,239,113,240,113,241,113,242,113,243,113,244,113,245,113,246,113,247,113,248,113,250,113,251,113,252,113,253,113,254,113,255,113,0,114,1,114,2,114,3,114,4,114,5,114,7,114,8,114,9,114,10,114,11,114,12,114,13,114,14,114,15,114,16,114,17,114,18,114,19,114,20,114,21,114,22,114,23,114,24,114,25,114,26,114,27,114,28,114,30,114,31,114,32,114,33,114,34,114,35,114,36,114,37,114,38,114,39,114,41,114,43,114,45,114,46,114,47,114,50,114,51,114,52,114,58,114,60,114,62,114,64,114,65,114,66,114,67,114,68,114,69,114,70,114,73,114,74,114,75,114,78,114,79,114,80,114,81,114,83,114,84,114,85,114,87,114,88,114,90,114,92,114,94,114,96,114,99,114,100,114,101,114,104,114,106,114,107,114,108,114,109,114,112,114,113,114,115,114,116,114,118,114,119,114,120,114,123,114,124,114,125,114,130,114,131,114,133,114,134,114,135,114,136,114,137,114,140,114,142,114,144,114,145,114,147,114,148,114,149,114,150,114,151,114,152,114,153,114,154,114,155,114,156,114,157,114,158,114,160,114,161,114,162,114,163,114,164,114,165,114,166,114,167,114,168,114,169,114,170,114,171,114,174,114,177,114,178,114,179,114,181,114,186,114,187,114,188,114,189,114,190,114,191,114,192,114,197,114,198,114,199,114,201,114,202,114,203,114,204,114,207,114,209,114,211,114,212,114,213,114,214,114,216,114,218,114,219,114,198,228,199,228,200,228,201,228,202,228,203,228,204,228,205,228,206,228,207,228,208,228,209,228,210,228,211,228,212,228,213,228,214,228,215,228,216,228,217,228,218,228,219,228,220,228,221,228,222,228,223,228,224,228,225,228,226,228,227,228,228,228,229,228,230,228,231,228,232,228,233,228,234,228,235,228,236,228,237,228,238,228,239,228,240,228,241,228,242,228,243,228,244,228,245,228,246,228,247,228,248,228,249,228,250,228,251,228,252,228,253,228,254,228,255,228,0,229,1,229,2,229,3,229,4,229,5,229,6,229,7,229,8,229,9,229,10,229,11,229,12,229,13,229,14,229,15,229,16,229,17,229,18,229,19,229,20,229,21,229,22,229,23,229,24,229,25,229,26,229,27,229,28,229,29,229,30,229,31,229,32,229,33,229,34,229,35,229,36,229,37,229,0,48,1,48,2,48,183,0,201,2,199,2,168,0,3,48,5,48,20,32,94,255,22,32,38,32,24,32,25,32,28,32,29,32,20,48,21,48,8,48,9,48,10,48,11,48,12,48,13,48,14,48,15,48,22,48,23,48,16,48,17,48,177,0,215,0,247,0,54,34,39,34,40,34,17,34,15,34,42,34,41,34,8,34,55,34,26,34,165,34,37,34,32,34,18,35,153,34,43,34,46,34,97,34,76,34,72,34,61,34,29,34,96,34,110,34,111,34,100,34,101,34,30,34,53,34,52,34,66,38,64,38,176,0,50,32,51,32,3,33,4,255,164,0,224,255,225,255,48,32,167,0,22,33,6,38,5,38,203,37,207,37,206,37,199,37,198,37,161,37,160,37,179,37,178,37,59,32,146,33,144,33,145,33,147,33,19,48,38,229,39,229,40,229,41,229,42,229,43,229,44,229,45,229,46,229,47,229,48,229,49,229,50,229,51,229,52,229,53,229,54,229,55,229,56,229,57,229,58,229,59,229,60,229,61,229,62,229,63,229,64,229,65,229,66,229,67,229,68,229,69,229,70,229,71,229,72,229,73,229,74,229,75,229,76,229,77,229,78,229,79,229,80,229,81,229,82,229,83,229,84,229,85,229,86,229,87,229,88,229,89,229,90,229,91,229,92,229,93,229,94,229,95,229,96,229,97,229,98,229,99,229,100,229,101,229,102,229,103,229,104,229,105,229,106,229,107,229,108,229,109,229,110,229,111,229,112,229,113,229,114,229,115,229,116,229,117,229,118,229,119,229,120,229,121,229,122,229,123,229,124,229,125,229,126,229,127,229,128,229,129,229,130,229,131,229,132,229,133,229,112,33,113,33,114,33,115,33,116,33,117,33,118,33,119,33,120,33,121,33,102,231,103,231,104,231,105,231,106,231,107,231,136,36,137,36,138,36,139,36,140,36,141,36,142,36,143,36,144,36,145,36,146,36,147,36,148,36,149,36,150,36,151,36,152,36,153,36,154,36,155,36,116,36,117,36,118,36,119,36,120,36,121,36,122,36,123,36,124,36,125,36,126,36,127,36,128,36,129,36,130,36,131,36,132,36,133,36,134,36,135,36,96,36,97,36,98,36,99,36,100,36,101,36,102,36,103,36,104,36,105,36,172,32,109,231,32,50,33,50,34,50,35,50,36,50,37,50,38,50,39,50,40,50,41,50,110,231,111,231,96,33,97,33,98,33,99,33,100,33,101,33,102,33,103,33,104,33,105,33,106,33,107,33,112,231,113,231,134,229,135,229,136,229,137,229,138,229,139,229,140,229,141,229,142,229,143,229,144,229,145,229,146,229,147,229,148,229,149,229,150,229,151,229,152,229,153,229,154,229,155,229,156,229,157,229,158,229,159,229,160,229,161,229,162,229,163,229,164,229,165,229,166,229,167,229,168,229,169,229,170,229,171,229,172,229,173,229,174,229,175,229,176,229,177,229,178,229,179,229,180,229,181,229,182,229,183,229,184,229,185,229,186,229,187,229,188,229,189,229,190,229,191,229,192,229,193,229,194,229,195,229,196,229,197,229,198,229,199,229,200,229,201,229,202,229,203,229,204,229,205,229,206,229,207,229,208,229,209,229,210,229,211,229,212,229,213,229,214,229,215,229,216,229,217,229,218,229,219,229,220,229,221,229,222,229,223,229,224,229,225,229,226,229,227,229,228,229,229,229,1,255,2,255,3,255,229,255,5,255,6,255,7,255,8,255,9,255,10,255,11,255,12,255,13,255,14,255,15,255,16,255,17,255,18,255,19,255,20,255,21,255,22,255,23,255,24,255,25,255,26,255,27,255,28,255,29,255,30,255,31,255,32,255,33,255,34,255,35,255,36,255,37,255,38,255,39,255,40,255,41,255,42,255,43,255,44,255,45,255,46,255,47,255,48,255,49,255,50,255,51,255,52,255,53,255,54,255,55,255,56,255,57,255,58,255,59,255,60,255,61,255,62,255,63,255,64,255,65,255,66,255,67,255,68,255,69,255,70,255,71,255,72,255,73,255,74,255,75,255,76,255,77,255,78,255,79,255,80,255,81,255,82,255,83,255,84,255,85,255,86,255,87,255,88,255,89,255,90,255,91,255,92,255,93,255,227,255,230,229,231,229,232,229,233,229,234,229,235,229,236,229,237,229,238,229,239,229,240,229,241,229,242,229,243,229,244,229,245,229,246,229,247,229,248,229,249,229,250,229,251,229,252,229,253,229,254,229,255,229,0,230,1,230,2,230,3,230,4,230,5,230,6,230,7,230,8,230,9,230,10,230,11,230,12,230,13,230,14,230,15,230,16,230,17,230,18,230,19,230,20,230,21,230,22,230,23,230,24,230,25,230,26,230,27,230,28,230,29,230,30,230,31,230,32,230,33,230,34,230,35,230,36,230,37,230,38,230,39,230,40,230,41,230,42,230,43,230,44,230,45,230,46,230,47,230,48,230,49,230,50,230,51,230,52,230,53,230,54,230,55,230,56,230,57,230,58,230,59,230,60,230,61,230,62,230,63,230,64,230,65,230,66,230,67,230,68,230,69,230,65,48,66,48,67,48,68,48,69,48,70,48,71,48,72,48,73,48,74,48,75,48,76,48,77,48,78,48,79,48,80,48,81,48,82,48,83,48,84,48,85,48,86,48,87,48,88,48,89,48,90,48,91,48,92,48,93,48,94,48,95,48,96,48,97,48,98,48,99,48,100,48,101,48,102,48,103,48,104,48,105,48,106,48,107,48,108,48,109,48,110,48,111,48,112,48,113,48,114,48,115,48,116,48,117,48,118,48,119,48,120,48,121,48,122,48,123,48,124,48,125,48,126,48,127,48,128,48,129,48,130,48,131,48,132,48,133,48,134,48,135,48,136,48,137,48,138,48,139,48,140,48,141,48,142,48,143,48,144,48,145,48,146,48,147,48,114,231,115,231,116,231,117,231,118,231,119,231,120,231,121,231,122,231,123,231,124,231,70,230,71,230,72,230,73,230,74,230,75,230,76,230,77,230,78,230,79,230,80,230,81,230,82,230,83,230,84,230,85,230,86,230,87,230,88,230,89,230,90,230,91,230,92,230,93,230,94,230,95,230,96,230,97,230,98,230,99,230,100,230,101,230,102,230,103,230,104,230,105,230,106,230,107,230,108,230,109,230,110,230,111,230,112,230,113,230,114,230,115,230,116,230,117,230,118,230,119,230,120,230,121,230,122,230,123,230,124,230,125,230,126,230,127,230,128,230,129,230,130,230,131,230,132,230,133,230,134,230,135,230,136,230,137,230,138,230,139,230,140,230,141,230,142,230,143,230,144,230,145,230,146,230,147,230,148,230,149,230,150,230,151,230,152,230,153,230,154,230,155,230,156,230,157,230,158,230,159,230,160,230,161,230,162,230,163,230,164,230,165,230,161,48,162,48,163,48,164,48,165,48,166,48,167,48,168,48,169,48,170,48,171,48,172,48,173,48,174,48,175,48,176,48,177,48,178,48,179,48,180,48,181,48,182,48,183,48,184,48,185,48,186,48,187,48,188,48,189,48,190,48,191,48,192,48,193,48,194,48,195,48,196,48,197,48,198,48,199,48,200,48,201,48,202,48,203,48,204,48,205,48,206,48,207,48,208,48,209,48,210,48,211,48,212,48,213,48,214,48,215,48,216,48,217,48,218,48,219,48,220,48,221,48,222,48,223,48,224,48,225,48,226,48,227,48,228,48,229,48,230,48,231,48,232,48,233,48,234,48,235,48,236,48,237,48,238,48,239,48,240,48,241,48,242,48,243,48,244,48,245,48,246,48,125,231,126,231,127,231,128,231,129,231,130,231,131,231,132,231,166,230,167,230,168,230,169,230,170,230,171,230,172,230,173,230,174,230,175,230,176,230,177,230,178,230,179,230,180,230,181,230,182,230,183,230,184,230,185,230,186,230,187,230,188,230,189,230,190,230,191,230,192,230,193,230,194,230,195,230,196,230,197,230,198,230,199,230,200,230,201,230,202,230,203,230,204,230,205,230,206,230,207,230,208,230,209,230,210,230,211,230,212,230,213,230,214,230,215,230,216,230,217,230,218,230,219,230,220,230,221,230,222,230,223,230,224,230,225,230,226,230,227,230,228,230,229,230,230,230,231,230,232,230,233,230,234,230,235,230,236,230,237,230,238,230,239,230,240,230,241,230,242,230,243,230,244,230,245,230,246,230,247,230,248,230,249,230,250,230,251,230,252,230,253,230,254,230,255,230,0,231,1,231,2,231,3,231,4,231,5,231,145,3,146,3,147,3,148,3,149,3,150,3,151,3,152,3,153,3,154,3,155,3,156,3,157,3,158,3,159,3,160,3,161,3,163,3,164,3,165,3,166,3,167,3,168,3,169,3,133,231,134,231,135,231,136,231,137,231,138,231,139,231,140,231,177,3,178,3,179,3,180,3,181,3,182,3,183,3,184,3,185,3,186,3,187,3,188,3,189,3,190,3,191,3,192,3,193,3,195,3,196,3,197,3,198,3,199,3,200,3,201,3,141,231,142,231,143,231,144,231,145,231,146,231,147,231,53,254,54,254,57,254,58,254,63,254,64,254,61,254,62,254,65,254,66,254,67,254,68,254,148,231,149,231,59,254,60,254,55,254,56,254,49,254,150,231,51,254,52,254,151,231,152,231,153,231,154,231,155,231,156,231,157,231,158,231,159,231,6,231,7,231,8,231,9,231,10,231,11,231,12,231,13,231,14,231,15,231,16,231,17,231,18,231,19,231,20,231,21,231,22,231,23,231,24,231,25,231,26,231,27,231,28,231,29,231,30,231,31,231,32,231,33,231,34,231,35,231,36,231,37,231,38,231,39,231,40,231,41,231,42,231,43,231,44,231,45,231,46,231,47,231,48,231,49,231,50,231,51,231,52,231,53,231,54,231,55,231,56,231,57,231,58,231,59,231,60,231,61,231,62,231,63,231,64,231,65,231,66,231,67,231,68,231,69,231,70,231,71,231,72,231,73,231,74,231,75,231,76,231,77,231,78,231,79,231,80,231,81,231,82,231,83,231,84,231,85,231,86,231,87,231,88,231,89,231,90,231,91,231,92,231,93,231,94,231,95,231,96,231,97,231,98,231,99,231,100,231,101,231,16,4,17,4,18,4,19,4,20,4,21,4,1,4,22,4,23,4,24,4,25,4,26,4,27,4,28,4,29,4,30,4,31,4,32,4,33,4,34,4,35,4,36,4,37,4,38,4,39,4,40,4,41,4,42,4,43,4,44,4,45,4,46,4,47,4,160,231,161,231,162,231,163,231,164,231,165,231,166,231,167,231,168,231,169,231,170,231,171,231,172,231,173,231,174,231,48,4,49,4,50,4,51,4,52,4,53,4,81,4,54,4,55,4,56,4,57,4,58,4,59,4,60,4,61,4,62,4,63,4,64,4,65,4,66,4,67,4,68,4,69,4,70,4,71,4,72,4,73,4,74,4,75,4,76,4,77,4,78,4,79,4,175,231,176,231,177,231,178,231,179,231,180,231,181,231,182,231,183,231,184,231,185,231,186,231,187,231,202,2,203,2,217,2,19,32,21,32,37,32,53,32,5,33,9,33,150,33,151,33,152,33,153,33,21,34,31,34,35,34,82,34,102,34,103,34,191,34,80,37,81,37,82,37,83,37,84,37,85,37,86,37,87,37,88,37,89,37,90,37,91,37,92,37,93,37,94,37,95,37,96,37,97,37,98,37,99,37,100,37,101,37,102,37,103,37,104,37,105,37,106,37,107,37,108,37,109,37,110,37,111,37,112,37,113,37,114,37,115,37,129,37,130,37,131,37,132,37,133,37,134,37,135,37,136,37,137,37,138,37,139,37,140,37,141,37,142,37,143,37,147,37,148,37,149,37,188,37,189,37,226,37,227,37,228,37,229,37,9,38,149,34,18,48,29,48,30,48,188,231,189,231,190,231,191,231,192,231,193,231,194,231,195,231,196,231,197,231,198,231,1,1,225,0,206,1,224,0,19,1,233,0,27,1,232,0,43,1,237,0,208,1,236,0,77,1,243,0,210,1,242,0,107,1,250,0,212,1,249,0,214,1,216,1,218,1,220,1,252,0,234,0,81,2,199,231,68,1,72,1,249,1,97,2,201,231,202,231,203,231,204,231,5,49,6,49,7,49,8,49,9,49,10,49,11,49,12,49,13,49,14,49,15,49,16,49,17,49,18,49,19,49,20,49,21,49,22,49,23,49,24,49,25,49,26,49,27,49,28,49,29,49,30,49,31,49,32,49,33,49,34,49,35,49,36,49,37,49,38,49,39,49,40,49,41,49,205,231,206,231,207,231,208,231,209,231,210,231,211,231,212,231,213,231,214,231,215,231,216,231,217,231,218,231,219,231,220,231,221,231,222,231,223,231,224,231,225,231,33,48,34,48,35,48,36,48,37,48,38,48,39,48,40,48,41,48,163,50,142,51,143,51,156,51,157,51,158,51,161,51,196,51,206,51,209,51,210,51,213,51,48,254,226,255,228,255,226,231,33,33,49,50,227,231,16,32,228,231,229,231,230,231,252,48,155,48,156,48,253,48,254,48,6,48,157,48,158,48,73,254,74,254,75,254,76,254,77,254,78,254,79,254,80,254,81,254,82,254,84,254,85,254,86,254,87,254,89,254,90,254,91,254,92,254,93,254,94,254,95,254,96,254,97,254,98,254,99,254,100,254,101,254,102,254,104,254,105,254,106,254,107,254,62,48,240,47,241,47,242,47,243,47,244,47,245,47,246,47,247,47,248,47,249,47,250,47,251,47,7,48,244,231,245,231,246,231,247,231,248,231,249,231,250,231,251,231,252,231,253,231,254,231,255,231,0,232,0,37,1,37,2,37,3,37,4,37,5,37,6,37,7,37,8,37,9,37,10,37,11,37,12,37,13,37,14,37,15,37,16,37,17,37,18,37,19,37,20,37,21,37,22,37,23,37,24,37,25,37,26,37,27,37,28,37,29,37,30,37,31,37,32,37,33,37,34,37,35,37,36,37,37,37,38,37,39,37,40,37,41,37,42,37,43,37,44,37,45,37,46,37,47,37,48,37,49,37,50,37,51,37,52,37,53,37,54,37,55,37,56,37,57,37,58,37,59,37,60,37,61,37,62,37,63,37,64,37,65,37,66,37,67,37,68,37,69,37,70,37,71,37,72,37,73,37,74,37,75,37,1,232,2,232,3,232,4,232,5,232,6,232,7,232,8,232,9,232,10,232,11,232,12,232,13,232,14,232,15,232,220,114,221,114,223,114,226,114,227,114,228,114,229,114,230,114,231,114,234,114,235,114,245,114,246,114,249,114,253,114,254,114,255,114,0,115,2,115,4,115,5,115,6,115,7,115,8,115,9,115,11,115,12,115,13,115,15,115,16,115,17,115,18,115,20,115,24,115,25,115,26,115,31,115,32,115,35,115,36,115,38,115,39,115,40,115,45,115,47,115,48,115,50,115,51,115,53,115,54,115,58,115,59,115,60,115,61,115,64,115,65,115,66,115,67,115,68,115,69,115,70,115,71,115,72,115,73,115,74,115,75,115,76,115,78,115,79,115,81,115,83,115,84,115,85,115,86,115,88,115,89,115,90,115,91,115,92,115,93,115,94,115,95,115,97,115,98,115,99,115,100,115,101,115,102,115,103,115,104,115,105,115,106,115,107,115,110,115,112,115,113,115,0,224,1,224,2,224,3,224,4,224,5,224,6,224,7,224,8,224,9,224,10,224,11,224,12,224,13,224,14,224,15,224,16,224,17,224,18,224,19,224,20,224,21,224,22,224,23,224,24,224,25,224,26,224,27,224,28,224,29,224,30,224,31,224,32,224,33,224,34,224,35,224,36,224,37,224,38,224,39,224,40,224,41,224,42,224,43,224,44,224,45,224,46,224,47,224,48,224,49,224,50,224,51,224,52,224,53,224,54,224,55,224,56,224,57,224,58,224,59,224,60,224,61,224,62,224,63,224,64,224,65,224,66,224,67,224,68,224,69,224,70,224,71,224,72,224,73,224,74,224,75,224,76,224,77,224,78,224,79,224,80,224,81,224,82,224,83,224,84,224,85,224,86,224,87,224,88,224,89,224,90,224,91,224,92,224,93,224,114,115,115,115,116,115,117,115,118,115,119,115,120,115,121,115,122,115,123,115,124,115,125,115,127,115,128,115,129,115,130,115,131,115,133,115,134,115,136,115,138,115,140,115,141,115,143,115,144,115,146,115,147,115,148,115,149,115,151,115,152,115,153,115,154,115,156,115,157,115,158,115,160,115,161,115,163,115,164,115,165,115,166,115,167,115,168,115,170,115,172,115,173,115,177,115,180,115,181,115,182,115,184,115,185,115,188,115,189,115,190,115,191,115,193,115,195,115,196,115,197,115,198,115,199,115,203,115,204,115,206,115,210,115,211,115,212,115,213,115,214,115,215,115,216,115,218,115,219,115,220,115,221,115,223,115,225,115,226,115,227,115,228,115,230,115,232,115,234,115,235,115,236,115,238,115,239,115,240,115,241,115,243,115,244,115,245,115,246,115,247,115,94,224,95,224,96,224,97,224,98,224,99,224,100,224,101,224,102,224,103,224,104,224,105,224,106,224,107,224,108,224,109,224,110,224,111,224,112,224,113,224,114,224,115,224,116,224,117,224,118,224,119,224,120,224,121,224,122,224,123,224,124,224,125,224,126,224,127,224,128,224,129,224,130,224,131,224,132,224,133,224,134,224,135,224,136,224,137,224,138,224,139,224,140,224,141,224,142,224,143,224,144,224,145,224,146,224,147,224,148,224,149,224,150,224,151,224,152,224,153,224,154,224,155,224,156,224,157,224,158,224,159,224,160,224,161,224,162,224,163,224,164,224,165,224,166,224,167,224,168,224,169,224,170,224,171,224,172,224,173,224,174,224,175,224,176,224,177,224,178,224,179,224,180,224,181,224,182,224,183,224,184,224,185,224,186,224,187,224,248,115,249,115,250,115,251,115,252,115,253,115,254,115,255,115,0,116,1,116,2,116,4,116,7,116,8,116,11,116,12,116,13,116,14,116,17,116,18,116,19,116,20,116,21,116,22,116,23,116,24,116,25,116,28,116,29,116,30,116,31,116,32,116,33,116,35,116,36,116,39,116,41,116,43,116,45,116,47,116,49,116,50,116,55,116,56,116,57,116,58,116,59,116,61,116,62,116,63,116,64,116,66,116,67,116,68,116,69,116,70,116,71,116,72,116,73,116,74,116,75,116,76,116,77,116,78,116,79,116,80,116,81,116,82,116,83,116,84,116,86,116,88,116,93,116,96,116,97,116,98,116,99,116,100,116,101,116,102,116,103,116,104,116,105,116,106,116,107,116,108,116,110,116,111,116,113,116,114,116,115,116,116,116,117,116,120,116,121,116,122,116,188,224,189,224,190,224,191,224,192,224,193,224,194,224,195,224,196,224,197,224,198,224,199,224,200,224,201,224,202,224,203,224,204,224,205,224,206,224,207,224,208,224,209,224,210,224,211,224,212,224,213,224,214,224,215,224,216,224,217,224,218,224,219,224,220,224,221,224,222,224,223,224,224,224,225,224,226,224,227,224,228,224,229,224,230,224,231,224,232,224,233,224,234,224,235,224,236,224,237,224,238,224,239,224,240,224,241,224,242,224,243,224,244,224,245,224,246,224,247,224,248,224,249,224,250,224,251,224,252,224,253,224,254,224,255,224,0,225,1,225,2,225,3,225,4,225,5,225,6,225,7,225,8,225,9,225,10,225,11,225,12,225,13,225,14,225,15,225,16,225,17,225,18,225,19,225,20,225,21,225,22,225,23,225,24,225,25,225,123,116,124,116,125,116,127,116,130,116,132,116,133,116,134,116,136,116,137,116,138,116,140,116,141,116,143,116,145,116,146,116,147,116,148,116,149,116,150,116,151,116,152,116,153,116,154,116,155,116,157,116,159,116,160,116,161,116,162,116,163,116,164,116,165,116,166,116,170,116,171,116,172,116,173,116,174,116,175,116,176,116,177,116,178,116,179,116,180,116,181,116,182,116,183,116,184,116,185,116,187,116,188,116,189,116,190,116,191,116,192,116,193,116,194,116,195,116,196,116,197,116,198,116,199,116,200,116,201,116,202,116,203,116,204,116,205,116,206,116,207,116,208,116,209,116,211,116,212,116,213,116,214,116,215,116,216,116,217,116,218,116,219,116,221,116,223,116,225,116,229,116,231,116,232,116,233,116,234,116,235,116,236,116,237,116,240,116,241,116,242,116,26,225,27,225,28,225,29,225,30,225,31,225,32,225,33,225,34,225,35,225,36,225,37,225,38,225,39,225,40,225,41,225,42,225,43,225,44,225,45,225,46,225,47,225,48,225,49,225,50,225,51,225,52,225,53,225,54,225,55,225,56,225,57,225,58,225,59,225,60,225,61,225,62,225,63,225,64,225,65,225,66,225,67,225,68,225,69,225,70,225,71,225,72,225,73,225,74,225,75,225,76,225,77,225,78,225,79,225,80,225,81,225,82,225,83,225,84,225,85,225,86,225,87,225,88,225,89,225,90,225,91,225,92,225,93,225,94,225,95,225,96,225,97,225,98,225,99,225,100,225,101,225,102,225,103,225,104,225,105,225,106,225,107,225,108,225,109,225,110,225,111,225,112,225,113,225,114,225,115,225,116,225,117,225,118,225,119,225,243,116,245,116,248,116,249,116,250,116,251,116,252,116,253,116,254,116,0,117,1,117,2,117,3,117,5,117,6,117,7,117,8,117,9,117,10,117,11,117,12,117,14,117,16,117,18,117,20,117,21,117,22,117,23,117,27,117,29,117,30,117,32,117,33,117,34,117,35,117,36,117,38,117,39,117,42,117,46,117,52,117,54,117,57,117,60,117,61,117,63,117,65,117,66,117,67,117,68,117,70,117,71,117,73,117,74,117,77,117,80,117,81,117,82,117,83,117,85,117,86,117,87,117,88,117,93,117,94,117,95,117,96,117,97,117,98,117,99,117,100,117,103,117,104,117,105,117,107,117,108,117,109,117,110,117,111,117,112,117,113,117,115,117,117,117,118,117,119,117,122,117,123,117,124,117,125,117,126,117,128,117,129,117,130,117,132,117,133,117,135,117,120,225,121,225,122,225,123,225,124,225,125,225,126,225,127,225,128,225,129,225,130,225,131,225,132,225,133,225,134,225,135,225,136,225,137,225,138,225,139,225,140,225,141,225,142,225,143,225,144,225,145,225,146,225,147,225,148,225,149,225,150,225,151,225,152,225,153,225,154,225,155,225,156,225,157,225,158,225,159,225,160,225,161,225,162,225,163,225,164,225,165,225,166,225,167,225,168,225,169,225,170,225,171,225,172,225,173,225,174,225,175,225,176,225,177,225,178,225,179,225,180,225,181,225,182,225,183,225,184,225,185,225,186,225,187,225,188,225,189,225,190,225,191,225,192,225,193,225,194,225,195,225,196,225,197,225,198,225,199,225,200,225,201,225,202,225,203,225,204,225,205,225,206,225,207,225,208,225,209,225,210,225,211,225,212,225,213,225,136,117,137,117,138,117,140,117,141,117,142,117,144,117,147,117,149,117,152,117,155,117,156,117,158,117,162,117,166,117,167,117,168,117,169,117,170,117,173,117,182,117,183,117,186,117,187,117,191,117,192,117,193,117,198,117,203,117,204,117,206,117,207,117,208,117,209,117,211,117,215,117,217,117,218,117,220,117,221,117,223,117,224,117,225,117,229,117,233,117,236,117,237,117,238,117,239,117,242,117,243,117,245,117,246,117,247,117,248,117,250,117,251,117,253,117,254,117,2,118,4,118,6,118,7,118,8,118,9,118,11,118,13,118,14,118,15,118,17,118,18,118,19,118,20,118,22,118,26,118,28,118,29,118,30,118,33,118,35,118,39,118,40,118,44,118,46,118,47,118,49,118,50,118,54,118,55,118,57,118,58,118,59,118,61,118,65,118,66,118,68,118,214,225,215,225,216,225,217,225,218,225,219,225,220,225,221,225,222,225,223,225,224,225,225,225,226,225,227,225,228,225,229,225,230,225,231,225,232,225,233,225,234,225,235,225,236,225,237,225,238,225,239,225,240,225,241,225,242,225,243,225,244,225,245,225,246,225,247,225,248,225,249,225,250,225,251,225], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+183356);
/* memory initializer */ allocate([252,225,253,225,254,225,255,225,0,226,1,226,2,226,3,226,4,226,5,226,6,226,7,226,8,226,9,226,10,226,11,226,12,226,13,226,14,226,15,226,16,226,17,226,18,226,19,226,20,226,21,226,22,226,23,226,24,226,25,226,26,226,27,226,28,226,29,226,30,226,31,226,32,226,33,226,34,226,35,226,36,226,37,226,38,226,39,226,40,226,41,226,42,226,43,226,44,226,45,226,46,226,47,226,48,226,49,226,50,226,51,226,69,118,70,118,71,118,72,118,73,118,74,118,75,118,78,118,79,118,80,118,81,118,82,118,83,118,85,118,87,118,88,118,89,118,90,118,91,118,93,118,95,118,96,118,97,118,98,118,100,118,101,118,102,118,103,118,104,118,105,118,106,118,108,118,109,118,110,118,112,118,113,118,114,118,115,118,116,118,117,118,118,118,119,118,121,118,122,118,124,118,127,118,128,118,129,118,131,118,133,118,137,118,138,118,140,118,141,118,143,118,144,118,146,118,148,118,149,118,151,118,152,118,154,118,155,118,156,118,157,118,158,118,159,118,160,118,161,118,162,118,163,118,165,118,166,118,167,118,168,118,169,118,170,118,171,118,172,118,173,118,175,118,176,118,179,118,181,118,182,118,183,118,184,118,185,118,186,118,187,118,188,118,189,118,190,118,192,118,193,118,195,118,74,85,63,150,195,87,40,99,206,84,9,85,192,84,145,118,76,118,60,133,238,119,126,130,141,120,49,114,152,150,141,151,40,108,137,91,250,79,9,99,151,102,184,92,250,128,72,104,174,128,2,102,206,118,249,81,86,101,172,113,241,127,132,136,178,80,101,89,202,97,179,111,173,130,76,99,82,98,237,83,39,84,6,123,107,81,164,117,244,93,212,98,203,141,118,151,138,98,25,128,93,87,56,151,98,127,56,114,125,118,207,103,126,118,70,100,112,79,37,141,220,98,23,122,145,101,237,115,44,100,115,98,44,130,129,152,127,103,72,114,110,98,204,98,52,79,227,116,74,83,158,82,202,126,166,144,46,94,134,104,156,105,128,129,209,126,210,104,197,120,140,134,81,149,141,80,36,140,222,130,222,128,5,83,18,137,101,82,196,118,199,118,201,118,203,118,204,118,211,118,213,118,217,118,218,118,220,118,221,118,222,118,224,118,225,118,226,118,227,118,228,118,230,118,231,118,232,118,233,118,234,118,235,118,236,118,237,118,240,118,243,118,245,118,246,118,247,118,250,118,251,118,253,118,255,118,0,119,2,119,3,119,5,119,6,119,10,119,12,119,14,119,15,119,16,119,17,119,18,119,19,119,20,119,21,119,22,119,23,119,24,119,27,119,28,119,29,119,30,119,33,119,35,119,36,119,37,119,39,119,42,119,43,119,44,119,46,119,48,119,49,119,50,119,51,119,52,119,57,119,59,119,61,119,62,119,63,119,66,119,68,119,69,119,70,119,72,119,73,119,74,119,75,119,76,119,77,119,78,119,79,119,82,119,83,119,84,119,85,119,86,119,87,119,88,119,89,119,92,119,132,133,249,150,221,79,33,88,113,153,157,91,177,98,165,98,180,102,121,140,141,156,6,114,111,103,145,120,178,96,81,83,23,83,136,143,204,128,29,141,161,148,13,80,200,114,7,89,235,96,25,113,171,136,84,89,239,130,44,103,40,123,41,93,247,126,45,117,245,108,102,142,248,143,60,144,59,159,212,107,25,145,20,123,124,95,167,120,214,132,61,133,213,107,217,107,214,107,1,94,135,94,249,117,237,149,93,101,10,95,197,95,159,143,193,88,194,129,127,144,91,150,173,151,185,143,22,127,44,141,65,98,191,79,216,83,94,83,168,143,169,143,171,143,77,144,7,104,106,95,152,129,104,136,214,156,139,97,43,82,42,118,108,95,140,101,210,111,232,110,190,91,72,100,117,81,176,81,196,103,25,78,201,121,124,153,179,112,93,119,94,119,95,119,96,119,100,119,103,119,105,119,106,119,109,119,110,119,111,119,112,119,113,119,114,119,115,119,116,119,117,119,118,119,119,119,120,119,122,119,123,119,124,119,129,119,130,119,131,119,134,119,135,119,136,119,137,119,138,119,139,119,143,119,144,119,147,119,148,119,149,119,150,119,151,119,152,119,153,119,154,119,155,119,156,119,157,119,158,119,161,119,163,119,164,119,166,119,168,119,171,119,173,119,174,119,175,119,177,119,178,119,180,119,182,119,183,119,184,119,185,119,186,119,188,119,190,119,192,119,193,119,194,119,195,119,196,119,197,119,198,119,199,119,200,119,201,119,202,119,203,119,204,119,206,119,207,119,208,119,209,119,210,119,211,119,212,119,213,119,214,119,216,119,217,119,218,119,221,119,222,119,223,119,224,119,225,119,228,119,197,117,118,94,187,115,224,131,173,100,232,98,181,148,226,108,90,83,195,82,15,100,194,148,148,123,47,79,27,94,54,130,22,129,138,129,36,110,202,108,115,154,85,99,92,83,250,84,101,136,224,87,13,78,3,94,101,107,63,124,232,144,22,96,230,100,28,115,193,136,80,103,77,98,34,141,108,119,41,142,199,145,105,95,220,131,33,133,16,153,194,83,149,134,139,107,237,96,232,96,127,112,205,130,49,130,211,78,167,108,207,133,205,100,217,124,253,105,249,102,73,131,149,83,86,123,167,79,140,81,75,109,66,92,109,142,210,99,201,83,44,131,54,131,229,103,180,120,61,100,223,91,148,92,238,93,231,139,198,98,244,103,122,140,0,100,186,99,73,135,139,153,23,140,32,127,242,148,167,78,16,150,164,152,12,102,22,115,230,119,232,119,234,119,239,119,240,119,241,119,242,119,244,119,245,119,247,119,249,119,250,119,251,119,252,119,3,120,4,120,5,120,6,120,7,120,8,120,10,120,11,120,14,120,15,120,16,120,19,120,21,120,25,120,27,120,30,120,32,120,33,120,34,120,36,120,40,120,42,120,43,120,46,120,47,120,49,120,50,120,51,120,53,120,54,120,61,120,63,120,65,120,66,120,67,120,68,120,70,120,72,120,73,120,74,120,75,120,77,120,79,120,81,120,83,120,84,120,88,120,89,120,90,120,91,120,92,120,94,120,95,120,96,120,97,120,98,120,99,120,100,120,101,120,102,120,103,120,104,120,105,120,111,120,112,120,113,120,114,120,115,120,116,120,117,120,118,120,120,120,121,120,122,120,123,120,125,120,126,120,127,120,128,120,129,120,130,120,131,120,58,87,29,92,56,94,127,149,127,80,160,128,130,83,94,101,69,117,49,85,33,80,133,141,132,98,158,148,29,103,50,86,110,111,226,93,53,84,146,112,102,143,111,98,164,100,163,99,123,95,136,111,244,144,227,129,176,143,24,92,104,102,241,95,137,108,72,150,129,141,108,136,145,100,240,121,206,87,89,106,16,98,72,84,88,78,11,122,233,96,132,111,218,139,127,98,30,144,139,154,228,121,3,84,244,117,1,99,25,83,96,108,223,143,27,95,112,154,59,128,127,159,136,79,58,92,100,141,197,127,165,101,189,112,69,81,178,81,107,134,7,93,160,91,189,98,108,145,116,117,12,142,32,122,1,97,121,123,199,78,248,126,133,119,17,78,237,129,29,82,250,81,113,106,168,83,135,142,4,149,207,150,193,110,100,150,90,105,132,120,133,120,134,120,136,120,138,120,139,120,143,120,144,120,146,120,148,120,149,120,150,120,153,120,157,120,158,120,160,120,162,120,164,120,166,120,168,120,169,120,170,120,171,120,172,120,173,120,174,120,175,120,181,120,182,120,183,120,184,120,186,120,187,120,188,120,189,120,191,120,192,120,194,120,195,120,196,120,198,120,199,120,200,120,204,120,205,120,206,120,207,120,209,120,210,120,211,120,214,120,215,120,216,120,218,120,219,120,220,120,221,120,222,120,223,120,224,120,225,120,226,120,227,120,228,120,229,120,230,120,231,120,233,120,234,120,235,120,237,120,238,120,239,120,240,120,241,120,243,120,245,120,246,120,248,120,249,120,251,120,252,120,253,120,254,120,255,120,0,121,2,121,3,121,4,121,6,121,7,121,8,121,9,121,10,121,11,121,12,121,64,120,168,80,215,119,16,100,230,137,4,89,227,99,221,93,127,122,61,105,32,79,57,130,152,85,50,78,174,117,151,122,98,94,138,94,239,149,27,82,57,84,138,112,118,99,36,149,130,87,37,102,63,105,135,145,7,85,243,109,175,126,34,136,51,98,240,126,181,117,40,131,193,120,204,150,158,143,72,97,247,116,205,139,100,107,58,82,80,141,33,107,106,128,113,132,241,86,6,83,206,78,27,78,209,81,151,124,139,145,7,124,195,79,127,142,225,123,156,122,103,100,20,93,172,80,6,129,1,118,185,124,236,109,224,127,81,103,88,91,248,91,203,120,174,100,19,100,170,99,43,99,25,149,45,100,190,143,84,123,41,118,83,98,39,89,70,84,121,107,163,80,52,98,38,94,134,107,227,78,55,141,139,136,133,95,46,144,13,121,14,121,15,121,16,121,17,121,18,121,20,121,21,121,22,121,23,121,24,121,25,121,26,121,27,121,28,121,29,121,31,121,32,121,33,121,34,121,35,121,37,121,38,121,39,121,40,121,41,121,42,121,43,121,44,121,45,121,46,121,47,121,48,121,49,121,50,121,51,121,53,121,54,121,55,121,56,121,57,121,61,121,63,121,66,121,67,121,68,121,69,121,71,121,74,121,75,121,76,121,77,121,78,121,79,121,80,121,81,121,82,121,84,121,85,121,88,121,89,121,97,121,99,121,100,121,102,121,105,121,106,121,107,121,108,121,110,121,112,121,113,121,114,121,115,121,116,121,117,121,118,121,121,121,123,121,124,121,125,121,126,121,127,121,130,121,131,121,134,121,135,121,136,121,137,121,139,121,140,121,141,121,142,121,144,121,145,121,146,121,32,96,61,128,197,98,57,78,85,83,248,144,184,99,198,128,230,101,46,108,70,79,238,96,225,109,222,139,57,95,203,134,83,95,33,99,90,81,97,131,99,104,0,82,99,99,72,142,18,80,155,92,119,121,252,91,48,82,59,122,188,96,83,144,215,118,183,95,151,95,132,118,108,142,111,112,123,118,73,123,170,119,243,81,147,144,36,88,78,79,244,110,234,143,76,101,27,123,196,114,164,109,223,127,225,90,181,98,149,94,48,87,130,132,44,123,29,94,31,95,18,144,20,127,160,152,130,99,199,110,152,120,185,112,120,81,91,151,171,87,53,117,67,79,56,117,151,94,230,96,96,89,192,109,191,107,137,120,252,83,213,150,203,81,1,82,137,99,10,84,147,148,3,140,204,141,57,114,159,120,118,135,237,143,13,140,224,83,147,121,148,121,149,121,150,121,151,121,152,121,153,121,155,121,156,121,157,121,158,121,159,121,160,121,161,121,162,121,163,121,164,121,165,121,166,121,168,121,169,121,170,121,171,121,172,121,173,121,174,121,175,121,176,121,177,121,178,121,180,121,181,121,182,121,183,121,184,121,188,121,191,121,194,121,196,121,197,121,199,121,200,121,202,121,204,121,206,121,207,121,208,121,211,121,212,121,214,121,215,121,217,121,218,121,219,121,220,121,221,121,222,121,224,121,225,121,226,121,229,121,232,121,234,121,236,121,238,121,241,121,242,121,243,121,244,121,245,121,246,121,247,121,249,121,250,121,252,121,254,121,255,121,1,122,4,122,5,122,7,122,8,122,9,122,10,122,12,122,15,122,16,122,17,122,18,122,19,122,21,122,22,122,24,122,25,122,27,122,28,122,1,78,239,118,238,83,137,148,118,152,14,159,45,149,154,91,162,139,34,78,28,78,172,81,99,132,194,97,168,82,11,104,151,79,107,96,187,81,30,109,92,81,150,98,151,101,97,150,70,140,23,144,216,117,253,144,99,119,210,107,138,114,236,114,251,139,53,88,121,119,76,141,92,103,64,149,154,128,166,94,33,110,146,89,239,122,237,119,59,149,181,107,173,101,14,127,6,88,81,81,31,150,249,91,169,88,40,84,114,142,102,101,127,152,228,86,157,148,254,118,65,144,135,99,198,84,26,89,58,89,155,87,178,142,53,103,250,141,53,130,65,82,240,96,21,88,254,134,232,92,69,158,196,79,157,152,185,139,37,90,118,96,132,83,124,98,79,144,2,145,127,153,105,96,12,128,63,81,51,128,20,92,117,153,49,109,140,78,29,122,31,122,33,122,34,122,36,122,37,122,38,122,39,122,40,122,41,122,42,122,43,122,44,122,45,122,46,122,47,122,48,122,49,122,50,122,52,122,53,122,54,122,56,122,58,122,62,122,64,122,65,122,66,122,67,122,68,122,69,122,71,122,72,122,73,122,74,122,75,122,76,122,77,122,78,122,79,122,80,122,82,122,83,122,84,122,85,122,86,122,88,122,89,122,90,122,91,122,92,122,93,122,94,122,95,122,96,122,97,122,98,122,99,122,100,122,101,122,102,122,103,122,104,122,105,122,106,122,107,122,108,122,109,122,110,122,111,122,113,122,114,122,115,122,117,122,123,122,124,122,125,122,126,122,130,122,133,122,135,122,137,122,138,122,139,122,140,122,142,122,143,122,144,122,147,122,148,122,153,122,154,122,155,122,158,122,161,122,162,122,48,141,209,83,90,127,79,123,16,79,79,78,0,150,213,108,208,115,233,133,6,94,106,117,251,127,10,106,254,119,146,148,65,126,225,81,230,112,205,83,212,143,3,131,41,141,175,114,109,153,219,108,74,87,179,130,185,101,170,128,63,98,50,150,168,89,255,78,191,139,186,126,62,101,242,131,94,151,97,85,222,152,165,128,42,83,253,139,32,84,186,128,159,94,184,108,57,141,172,130,90,145,41,84,27,108,6,82,183,126,95,87,26,113,126,108,137,124,75,89,253,78,255,95,36,97,170,124,48,78,1,92,171,103,2,135,240,92,11,149,206,152,175,117,253,112,34,144,175,81,29,127,189,139,73,89,228,81,91,79,38,84,43,89,119,101,164,128,117,91,118,98,194,98,144,143,69,94,31,108,38,123,15,79,216,79,13,103,163,122,164,122,167,122,169,122,170,122,171,122,174,122,175,122,176,122,177,122,178,122,180,122,181,122,182,122,183,122,184,122,185,122,186,122,187,122,188,122,189,122,190,122,192,122,193,122,194,122,195,122,196,122,197,122,198,122,199,122,200,122,201,122,202,122,204,122,205,122,206,122,207,122,208,122,209,122,210,122,211,122,212,122,213,122,215,122,216,122,218,122,219,122,220,122,221,122,225,122,226,122,228,122,231,122,232,122,233,122,234,122,235,122,236,122,238,122,240,122,241,122,242,122,243,122,244,122,245,122,246,122,247,122,248,122,251,122,252,122,254,122,0,123,1,123,2,123,5,123,7,123,9,123,12,123,13,123,14,123,16,123,18,123,19,123,22,123,23,123,24,123,26,123,28,123,29,123,31,123,33,123,34,123,35,123,39,123,41,123,45,123,110,109,170,109,143,121,177,136,23,95,43,117,154,98,133,143,239,79,220,145,167,101,47,129,81,129,156,94,80,129,116,141,111,82,134,137,75,141,13,89,133,80,216,78,28,150,54,114,121,129,31,141,204,91,163,139,68,150,135,89,26,127,144,84,118,86,14,86,229,139,57,101,130,105,153,148,214,118,137,110,114,94,24,117,70,103,209,103,255,122,157,128,118,141,31,97,198,121,98,101,99,141,136,81,26,82,162,148,56,127,155,128,178,126,151,92,47,110,96,103,217,123,139,118,216,154,143,129,148,127,213,124,30,100,80,149,63,122,74,84,229,84,76,107,1,100,8,98,61,158,243,128,153,117,114,82,105,151,91,132,60,104,228,134,1,150,148,150,236,148,42,78,4,84,217,126,57,104,223,141,21,128,244,102,154,94,185,127,47,123,48,123,50,123,52,123,53,123,54,123,55,123,57,123,59,123,61,123,63,123,64,123,65,123,66,123,67,123,68,123,70,123,72,123,74,123,77,123,78,123,83,123,85,123,87,123,89,123,92,123,94,123,95,123,97,123,99,123,100,123,101,123,102,123,103,123,104,123,105,123,106,123,107,123,108,123,109,123,111,123,112,123,115,123,116,123,118,123,120,123,122,123,124,123,125,123,127,123,129,123,130,123,131,123,132,123,134,123,135,123,136,123,137,123,138,123,139,123,140,123,142,123,143,123,145,123,146,123,147,123,150,123,152,123,153,123,154,123,155,123,158,123,159,123,160,123,163,123,164,123,165,123,174,123,175,123,176,123,178,123,179,123,181,123,182,123,183,123,185,123,186,123,187,123,188,123,189,123,190,123,191,123,192,123,194,123,195,123,196,123,194,87,63,128,151,104,229,93,59,101,159,82,109,96,154,159,155,79,172,142,108,81,171,91,19,95,233,93,94,108,241,98,33,141,113,81,169,148,254,82,159,108,223,130,215,114,162,87,132,103,45,141,31,89,156,143,199,131,149,84,141,123,48,79,189,108,100,91,209,89,19,159,228,83,202,134,168,154,55,140,161,128,69,101,126,152,250,86,199,150,46,82,220,116,80,82,225,91,2,99,2,137,86,78,208,98,42,96,250,104,115,81,152,91,160,81,194,137,161,123,134,153,80,127,239,96,76,112,47,141,73,81,127,94,27,144,112,116,196,137,45,87,69,120,82,95,159,159,250,149,104,143,60,155,225,139,120,118,66,104,220,103,234,141,53,141,61,82,138,143,218,110,205,104,5,149,237,144,253,86,156,103,249,136,199,143,200,84,197,123,200,123,201,123,202,123,203,123,205,123,206,123,207,123,208,123,210,123,212,123,213,123,214,123,215,123,216,123,219,123,220,123,222,123,223,123,224,123,226,123,227,123,228,123,231,123,232,123,233,123,235,123,236,123,237,123,239,123,240,123,242,123,243,123,244,123,245,123,246,123,248,123,249,123,250,123,251,123,253,123,255,123,0,124,1,124,2,124,3,124,4,124,5,124,6,124,8,124,9,124,10,124,13,124,14,124,16,124,17,124,18,124,19,124,20,124,21,124,23,124,24,124,25,124,26,124,27,124,28,124,29,124,30,124,32,124,33,124,34,124,35,124,36,124,37,124,40,124,41,124,43,124,44,124,45,124,46,124,47,124,48,124,49,124,50,124,51,124,52,124,53,124,54,124,55,124,57,124,58,124,59,124,60,124,61,124,62,124,66,124,184,154,105,91,119,109,38,108,165,78,179,91,135,154,99,145,168,97,175,144,233,151,43,84,181,109,210,91,253,81,138,85,85,127,240,127,188,100,77,99,241,101,190,97,141,96,10,113,87,108,73,108,47,89,109,103,42,130,213,88,142,86,106,140,235,107,221,144,125,89,23,128,247,83,105,109,117,84,157,85,119,131,207,131,56,104,190,121,140,84,85,79,8,84,210,118,137,140,2,150,179,108,184,109,107,141,16,137,100,158,58,141,63,86,209,158,213,117,136,95,224,114,104,96,252,84,168,78,42,106,97,136,82,96,112,143,196,84,216,112,121,134,63,158,42,109,143,91,24,95,162,126,137,85,175,79,52,115,60,84,154,83,25,80,14,84,124,84,78,78,253,95,90,116,246,88,107,132,225,128,116,135,208,114,202,124,86,110,67,124,68,124,69,124,70,124,71,124,72,124,73,124,74,124,75,124,76,124,78,124,79,124,80,124,81,124,82,124,83,124,84,124,85,124,86,124,87,124,88,124,89,124,90,124,91,124,92,124,93,124,94,124,95,124,96,124,97,124,98,124,99,124,100,124,101,124,102,124,103,124,104,124,105,124,106,124,107,124,108,124,109,124,110,124,111,124,112,124,113,124,114,124,117,124,118,124,119,124,120,124,121,124,122,124,126,124,127,124,128,124,129,124,130,124,131,124,132,124,133,124,134,124,135,124,136,124,138,124,139,124,140,124,141,124,142,124,143,124,144,124,147,124,148,124,150,124,153,124,154,124,155,124,160,124,161,124,163,124,166,124,167,124,168,124,169,124,171,124,172,124,173,124,175,124,176,124,180,124,181,124,182,124,183,124,184,124,186,124,187,124,39,95,78,134,44,85,164,98,146,78,170,108,55,98,177,130,215,84,78,83,62,115,209,110,59,117,18,82,22,83,221,139,208,105,138,95,0,96,238,109,79,87,34,107,175,115,83,104,216,143,19,127,98,99,163,96,36,85,234,117,98,140,21,113,163,109,166,91,123,94,82,131,76,97,196,158,250,120,87,135,39,124,135,118,240,81,246,96,76,113,67,102,76,94,77,96,14,140,112,112,37,99,137,143,189,95,98,96,212,134,222,86,193,107,148,96,103,97,73,83,224,96,102,102,63,141,253,121,26,79,233,112,71,108,179,139,242,139,216,126,100,131,15,102,90,90,66,155,81,109,247,109,65,140,59,109,25,79,107,112,183,131,22,98,209,96,13,151,39,141,120,121,251,81,62,87,250,87,58,103,120,117,61,122,239,121,149,123,191,124,192,124,194,124,195,124,196,124,198,124,201,124,203,124,206,124,207,124,208,124,209,124,210,124,211,124,212,124,216,124,218,124,219,124,221,124,222,124,225,124,226,124,227,124,228,124,229,124,230,124,231,124,233,124,234,124,235,124,236,124,237,124,238,124,240,124,241,124,242,124,243,124,244,124,245,124,246,124,247,124,249,124,250,124,252,124,253,124,254,124,255,124,0,125,1,125,2,125,3,125,4,125,5,125,6,125,7,125,8,125,9,125,11,125,12,125,13,125,14,125,15,125,16,125,17,125,18,125,19,125,20,125,21,125,22,125,23,125,24,125,25,125,26,125,27,125,28,125,29,125,30,125,31,125,33,125,35,125,36,125,37,125,38,125,40,125,41,125,42,125,44,125,45,125,46,125,48,125,49,125,50,125,51,125,52,125,53,125,54,125,140,128,101,153,249,143,192,111,165,139,33,158,236,89,233,126,9,127,9,84,129,103,216,104,145,143,77,124,198,150,202,83,37,96,190,117,114,108,115,83,201,90,167,126,36,99,224,81,10,129,241,93,223,132,128,98,128,81,99,91,14,79,109,121,66,82,184,96,78,109,196,91,194,91,161,139,176,139,226,101,204,95,69,150,147,89,231,126,170,126,9,86,183,103,57,89,115,79,182,91,160,82,90,131,138,152,62,141,50,117,190,148,71,80,60,122,247,78,182,103,126,154,193,90,124,107,209,118,90,87,22,92,58,123,244,149,78,113,124,81,169,128,112,130,120,89,4,127,39,131,192,104,236,103,177,120,119,120,227,98,97,99,128,123,237,79,106,82,207,81,80,131,219,105,116,146,245,141,49,141,193,137,46,149,173,123,246,78,55,125,56,125,57,125,58,125,59,125,60,125,61,125,62,125,63,125,64,125,65,125,66,125,67,125,68,125,69,125,70,125,71,125,72,125,73,125,74,125,75,125,76,125,77,125,78,125,79,125,80,125,81,125,82,125,83,125,84,125,85,125,86,125,87,125,88,125,89,125,90,125,91,125,92,125,93,125,94,125,95,125,96,125,97,125,98,125,99,125,100,125,101,125,102,125,103,125,104,125,105,125,106,125,107,125,108,125,109,125,111,125,112,125,113,125,114,125,115,125,116,125,117,125,118,125,120,125,121,125,122,125,123,125,124,125,125,125,126,125,127,125,128,125,129,125,130,125,131,125,132,125,133,125,134,125,135,125,136,125,137,125,138,125,139,125,140,125,141,125,142,125,143,125,144,125,145,125,146,125,147,125,148,125,149,125,150,125,151,125,152,125,101,80,48,130,81,82,111,153,16,110,133,110,167,109,250,94,245,80,220,89,6,92,70,109,95,108,134,117,139,132,104,104,86,89,178,139,32,83,113,145,77,150,73,133,18,105,1,121,38,113,246,128,164,78,202,144,71,109,132,154,7,90,188,86,5,100,240,148,235,119,165,79,26,129,225,114,210,137,122,153,52,127,222,126,127,82,89,101,117,145,127,143,131,143,235,83,150,122,237,99,165,99,134,118,248,121,87,136,54,150,42,98,171,82,130,130,84,104,112,103,119,99,107,119,237,122,1,109,211,126,227,137,208,89,18,98,201,133,165,130,76,117,31,80,203,78,165,117,235,139,74,92,254,93,75,123,164,101,209,145,202,78,37,109,95,137,39,125,38,149,197,78,40,140,219,143,115,151,75,102,129,121,209,143,236,112,120,109,153,125,154,125,155,125,156,125,157,125,158,125,159,125,160,125,161,125,162,125,163,125,164,125,165,125,167,125,168,125,169,125,170,125,171,125,172,125,173,125,175,125,176,125,177,125,178,125,179,125,180,125,181,125,182,125,183,125,184,125,185,125,186,125,187,125,188,125,189,125,190,125,191,125,192,125,193,125,194,125,195,125,196,125,197,125,198,125,199,125,200,125,201,125,202,125,203,125,204,125,205,125,206,125,207,125,208,125,209,125,210,125,211,125,212,125,213,125,214,125,215,125,216,125,217,125,218,125,219,125,220,125,221,125,222,125,223,125,224,125,225,125,226,125,227,125,228,125,229,125,230,125,231,125,232,125,233,125,234,125,235,125,236,125,237,125,238,125,239,125,240,125,241,125,242,125,243,125,244,125,245,125,246,125,247,125,248,125,249,125,250,125,61,92,178,82,70,131,98,81,14,131,91,119,118,102,184,156,172,78,202,96,190,124,179,124,207,126,149,78,102,139,111,102,136,152,89,151,131,88,108,101,92,149,132,95,201,117,86,151,223,122,222,122,192,81,175,112,152,122,234,99,118,122,160,126,150,115,237,151,69,78,120,112,93,78,82,145,169,83,81,101,231,101,252,129,5,130,142,84,49,92,154,117,160,151,216,98,217,114,189,117,69,92,121,154,202,131,64,92,128,84,233,119,62,78,174,108,90,128,210,98,110,99,232,93,119,81,221,141,30,142,47,149,241,79,229,83,231,96,172,112,103,82,80,99,67,158,31,90,38,80,55,119,119,83,226,126,133,100,43,101,137,98,152,99,20,80,53,114,201,137,179,81,192,139,221,126,71,87,204,131,167,148,155,81,27,84,251,92,251,125,252,125,253,125,254,125,255,125,0,126,1,126,2,126,3,126,4,126,5,126,6,126,7,126,8,126,9,126,10,126,11,126,12,126,13,126,14,126,15,126,16,126,17,126,18,126,19,126,20,126,21,126,22,126,23,126,24,126,25,126,26,126,27,126,28,126,29,126,30,126,31,126,32,126,33,126,34,126,35,126,36,126,37,126,38,126,39,126,40,126,41,126,42,126,43,126,44,126,45,126,46,126,47,126,48,126,49,126,50,126,51,126,52,126,53,126,54,126,55,126,56,126,57,126,58,126,60,126,61,126,62,126,63,126,64,126,66,126,67,126,68,126,69,126,70,126,72,126,73,126,74,126,75,126,76,126,77,126,78,126,79,126,80,126,81,126,82,126,83,126,84,126,85,126,86,126,87,126,88,126,89,126,90,126,91,126,92,126,93,126,202,79,227,122,90,109,225,144,143,154,128,85,150,84,97,83,175,84,0,95,233,99,119,105,239,81,104,97,10,82,42,88,216,82,78,87,13,120,11,119,183,94,119,97,224,124,91,98,151,98,162,78,149,112,3,128,247,98,228,112,96,151,119,87,219,130,239,103,245,104,213,120,151,152,209,121,243,88,179,84,239,83,52,110,75,81,59,82,162,91,254,139,175,128,67,85,166,87,115,96,81,87,45,84,122,122,80,96,84,91,167,99,160,98,227,83,99,98,199,91,175,103,237,84,159,122,230,130,119,145,147,94,228,136,56,89,174,87,14,99,232,141,239,128,87,87,119,123,169,79,235,95,189,91,62,107,33,83,80,123,194,114,70,104,255,119,54,119,247,101,181,81,143,78,212,118,191,92,165,122,117,132,78,89,65,155,128,80,94,126,95,126,96,126,97,126,98,126,99,126,100,126,101,126,102,126,103,126,104,126,105,126,106,126,107,126,108,126,109,126,110,126,111,126,112,126,113,126,114,126,115,126,116,126,117,126,118,126,119,126,120,126,121,126,122,126,123,126,124,126,125,126,126,126,127,126,128,126,129,126,131,126,132,126,133,126,134,126,135,126,136,126,137,126,138,126,139,126,140,126,141,126,142,126,143,126,144,126,145,126,146,126,147,126,148,126,149,126,150,126,151,126,152,126,153,126,154,126,156,126,157,126,158,126,174,126,180,126,187,126,188,126,214,126,228,126,236,126,249,126,10,127,16,127,30,127,55,127,57,127,59,127,60,127,61,127,62,127,63,127,64,127,65,127,67,127,70,127,71,127,72,127,73,127,74,127,75,127,76,127,77,127,78,127,79,127,82,127,83,127,136,153,39,97,131,110,100,87,6,102,70,99,240,86,236,98,105,98,211,94,20,150,131,87,201,98,135,85,33,135,74,129,163,143,102,85,177,131,101,103,86,141,221,132,106,90,15,104,230,98,238,123,17,150,112,81,156,111,48,140,253,99,200,137,210,97,6,127,194,112,229,110,5,116,148,105,252,114,202,94,206,144,23,103,106,109,94,99,179,82,98,114,1,128,108,79,229,89,106,145,217,112,157,109,210,82,80,78,247,150,109,149,126,133,202,120,47,125,33,81,146,87,194,100,139,128,123,124,234,108,241,104,94,105,183,81,152,83,168,104,129,114,206,158,241,123,248,114,187,121,19,111,6,116,78,103,204,145,164,156,60,121,137,131,84,131,15,84,23,104,61,78,137,83,177,82,62,120,134,83,41,82,136,80,139,79,208,79,86,127,89,127,91,127,92,127,93,127,94,127,96,127,99,127,100,127,101,127,102,127,103,127,107,127,108,127,109,127,111,127,112,127,115,127,117,127,118,127,119,127,120,127,122,127,123,127,124,127,125,127,127,127,128,127,130,127,131,127,132,127,133,127,134,127,135,127,136,127,137,127,139,127,141,127,143,127,144,127,145,127,146,127,147,127,149,127,150,127,151,127,152,127,153,127,155,127,156,127,160,127,162,127,163,127,165,127,166,127,168,127,169,127,170,127,171,127,172,127,173,127,174,127,177,127,179,127,180,127,181,127,182,127,183,127,186,127,187,127,190,127,192,127,194,127,195,127,196,127,198,127,199,127,200,127,201,127,203,127,205,127,207,127,208,127,209,127,210,127,211,127,214,127,215,127,217,127,218,127,219,127,220,127,221,127,222,127,226,127,227,127,226,117,203,122,146,124,165,108,182,150,155,82,131,116,233,84,233,79,84,128,178,131,222,143,112,149,201,94,28,96,159,109,24,94,91,101,56,129,254,148,75,96,188,112,195,126,174,124,201,81,129,104,177,124,111,130,36,78,134,143,207,145,126,102,174,78,5,140,169,100,74,128,218,80,151,117,206,113,229,91,189,143,102,111,134,78,130,100,99,149,214,94,153,101,23,82,194,136,200,112,163,82,14,115,51,116,151,103,247,120,22,151,52,78,187,144,222,156,203,109,219,81,65,141,29,84,206,98,178,115,241,131,246,150,132,159,195,148,54,79,154,127,204,81,117,112,117,150,173,92,134,152,230,83,228,78,156,110,9,116,180,105,107,120,143,153,89,117,24,82,36,118,65,109,243,103,109,81,153,159,75,128,153,84,60,123,191,122,228,127,231,127,232,127,234,127,235,127,236,127,237,127,239,127,242,127,244,127,245,127,246,127,247,127,248,127,249,127,250,127,253,127,254,127,255,127,2,128,7,128,8,128,9,128,10,128,14,128,15,128,17,128,19,128,26,128,27,128,29,128,30,128,31,128,33,128,35,128,36,128,43,128,44,128,45,128,46,128,47,128,48,128,50,128,52,128,57,128,58,128,60,128,62,128,64,128,65,128,68,128,69,128,71,128,72,128,73,128,78,128,79,128,80,128,81,128,83,128,85,128,86,128,87,128,89,128,91,128,92,128,93,128,94,128,95,128,96,128,97,128,98,128,99,128,100,128,101,128,102,128,103,128,104,128,107,128,108,128,109,128,110,128,111,128,112,128,114,128,115,128,116,128,117,128,118,128,119,128,120,128,121,128,122,128,123,128,124,128,125,128,134,150,132,87,226,98,71,150,124,105,4,90,2,100,211,123,15,111,75,150,166,130,98,83,133,152,144,94,137,112,179,99,100,83,79,134,129,156,147,158,140,120,50,151,239,141,66,141,127,158,94,111,132,121,85,95,70,150,46,98,116,154,21,84,221,148,163,79,197,101,101,92,97,92,21,127,81,134,47,108,139,95,135,115,228,110,255,126,230,92,27,99,106,91,230,110,117,83,113,78,160,99,101,117,161,98,110,143,38,79,209,78,166,108,182,126,186,139,29,132,186,135,87,127,59,144,35,149,169,123,161,154,248,136,61,132,27,109,134,154,220,126,136,89,187,158,155,115,1,120,130,134,108,154,130,154,27,86,23,84,203,87,112,78,166,158,86,83,200,143,9,129,146,119,146,153,238,134,225,110,19,133,252,102,98,97,43,111,126,128,129,128,130,128,133,128,136,128,138,128,141,128,142,128,143,128,144,128,145,128,146,128,148,128,149,128,151,128,153,128,158,128,163,128,166,128,167,128,168,128,172,128,176,128,179,128,181,128,182,128,184,128,185,128,187,128,197,128,199,128,200,128,201,128,202,128,203,128,207,128,208,128,209,128,210,128,211,128,212,128,213,128,216,128,223,128,224,128,226,128,227,128,230,128,238,128,245,128,247,128,249,128,251,128,254,128,255,128,0,129,1,129,3,129,4,129,5,129,7,129,8,129,11,129,12,129,21,129,23,129,25,129,27,129,28,129,29,129,31,129,32,129,33,129,34,129,35,129,36,129,37,129,38,129,39,129,40,129,41,129,42,129,43,129,45,129,46,129,48,129,51,129,52,129,53,129,55,129,57,129,58,129,59,129,60,129,61,129,63,129,41,140,146,130,43,131,242,118,19,108,217,95,189,131,43,115,5,131,26,149,219,107,219,119,198,148,111,83,2,131,146,81,61,94,140,140,56,141,72,78,171,115,154,103,133,104,118,145,9,151,100,113,161,108,9,119,146,90,65,149,207,107,142,127,39,102,208,91,185,89,154,90,232,149,247,149,236,78,12,132,153,132,172,106,223,118,48,149,27,115,166,104,95,91,47,119,154,145,97,151,220,124,247,143,28,140,37,95,115,124,216,121,197,137,204,108,28,135,198,91,66,94,201,104,32,119,245,126,149,81,77,81,201,82,41,90,5,127,98,151,215,130,207,99,132,119,208,133,210,121,58,110,153,94,153,89,17,133,109,112,17,108,191,98,191,118,79,101,175,96,253,149,14,102,159,135,35,158,237,148,13,84,125,84,44,140,120,100,64,129,65,129,66,129,67,129,68,129,69,129,71,129,73,129,77,129,78,129,79,129,82,129,86,129,87,129,88,129,91,129,92,129,93,129,94,129,95,129,97,129,98,129,99,129,100,129,102,129,104,129,106,129,107,129,108,129,111,129,114,129,115,129,117,129,118,129,119,129,120,129,129,129,131,129,132,129,133,129,134,129,135,129,137,129,139,129,140,129,141,129,142,129,144,129,146,129,147,129,148,129,149,129,150,129,151,129,153,129,154,129,158,129,159,129,160,129,161,129,162,129,164,129,165,129,167,129,169,129,171,129,172,129,173,129,174,129,175,129,176,129,177,129,178,129,180,129,181,129,182,129,183,129,184,129,185,129,188,129,189,129,190,129,191,129,196,129,197,129,199,129,200,129,201,129,203,129,205,129,206,129,207,129,208,129,209,129,210,129,211,129,121,100,17,134,33,106,156,129,232,120,105,100,84,155,185,98,43,103,171,131,168,88,216,158,171,108,32,111,222,91,76,150,11,140,95,114,208,103,199,98,97,114,169,78,198,89,205,107,147,88,174,102,85,94,223,82,85,97,40,103,238,118,102,119,103,114,70,122,255,98,234,84,80,84,160,148,163,144,28,90,179,126,22,108,67,78,118,89,16,128,72,89,87,83,55,117,190,150,202,86,32,99,17,129,124,96,249,149,214,109,98,84,129,153,133,81,233,90,253,128,174,89,19,151,42,80,229,108,60,92,223,98,96,79,63,83,123,129,6,144,186,110,43,133,200,98,116,94,190,120,181,100,123,99,245,95,24,90,127,145,31,158,63,92,79,99,66,128,125,91,110,85,74,149,77,149,133,109,168,96,224,103,222,114,221,81,129,91,212,129,213,129,214,129,215,129,216,129,217,129,218,129,219,129,220,129,221,129,222,129,223,129,224,129,225,129,226,129,228,129,229,129,230,129,232,129,233,129,235,129,238,129,239,129,240,129,241,129,242,129,245,129,246,129,247,129,248,129,249,129,250,129,253,129,255,129,3,130,7,130,8,130,9,130,10,130,11,130,14,130,15,130,17,130,19,130,21,130,22,130,23,130,24,130,25,130,26,130,29,130,32,130,36,130,37,130,38,130,39,130,41,130,46,130,50,130,58,130,60,130,61,130,63,130,64,130,65,130,66,130,67,130,69,130,70,130,72,130,74,130,76,130,77,130,78,130,80,130,81,130,82,130,83,130,84,130,85,130,86,130,87,130,89,130,91,130,92,130,93,130,94,130,96,130,97,130,98,130,99,130,100,130,101,130,102,130,103,130,105,130,231,98,222,108,91,114,109,98,174,148,189,126,19,129,83,109,156,81,4,95,116,89,170,82,18,96,115,89,150,102,80,134,159,117,42,99,230,97,239,124,250,139,230,84,39,107,37,158,180,107,213,133,85,84,118,80,164,108,106,85,180,141,44,114,21,94,21,96,54,116,205,98,146,99,76,114,152,95,67,110,62,109,0,101,88,111,216,118,208,120,252,118,84,117,36,82,219,83,83,78,158,94,193,101,42,128,214,128,155,98,134,84,40,82,174,112,141,136,209,141,225,108,120,84,218,128,249,87,244,136,84,141,106,150,77,145,105,79,155,108,183,85,198,118,48,120,168,98,249,112,142,111,109,95,236,132,218,104,124,120,247,123,168,129,11,103,79,158,103,99,176,120,111,87,18,120,57,151,121,98,171,98,136,82,53,116,215,107,106,130,107,130,108,130,109,130,113,130,117,130,118,130,119,130,120,130,123,130,124,130,128,130,129,130,131,130,133,130,134,130,135,130,137,130,140,130,144,130,147,130,148,130,149,130,150,130,154,130,155,130,158,130,160,130,162,130,163,130,167,130,178,130,181,130,182,130,186,130,187,130,188,130,191,130,192,130,194,130,195,130,197,130,198,130,201,130,208,130,214,130,217,130,218,130,221,130,226,130,231,130,232,130,233,130,234,130,236,130,237,130,238,130,240,130,242,130,243,130,245,130,246,130,248,130,250,130,252,130,253,130,254,130,255,130,0,131,10,131,11,131,13,131,16,131,18,131,19,131,22,131,24,131,25,131,29,131,30,131,31,131,32,131,33,131,34,131,35,131,36,131,37,131,38,131,41,131,42,131,46,131,48,131,50,131,55,131,59,131,61,131,100,85,62,129,178,117,174,118,57,83,222,117,251,80,65,92,108,139,199,123,79,80,71,114,151,154,216,152,2,111,226,116,104,121,135,100,165,119,252,98,145,152,43,141,193,84,88,128,82,78,106,87,249,130,13,132,115,94,237,81,246,116,196,139,79,92,97,87,252,108,135,152,70,90,52,120,68,155,235,143,149,124,86,82,81,98,250,148,198,78,134,131,97,132,233,131,178,132,212,87,52,103,3,87,110,102,102,109,49,140,221,102,17,112,31,103,58,107,22,104,26,98,187,89,3,78,196,81,6,111,210,103,143,108,118,81,203,104,71,89,103,107,102,117,14,93,16,129,80,159,215,101,72,121,65,121,145,154,119,141,130,92,94,78,1,79,47,84,81,89,12,120,104,86,20,108,196,143,3,95,125,108,227,108,171,139,144,99,62,131,63,131,65,131,66,131,68,131,69,131,72,131,74,131,75,131,76,131,77,131,78,131,83,131,85,131,86,131,87,131,88,131,89,131,93,131,98,131,112,131,113,131,114,131,115,131,116,131,117,131,118,131,121,131,122,131,126,131,127,131,128,131,129,131,130,131,131,131,132,131,135,131,136,131,138,131,139,131,140,131,141,131,143,131,144,131,145,131,148,131,149,131,150,131,151,131,153,131,154,131,157,131,159,131,161,131,162,131,163,131,164,131,165,131,166,131,167,131,172,131,173,131,174,131,175,131,181,131,187,131,190,131,191,131,194,131,195,131,196,131,198,131,200,131,201,131,203,131,205,131,206,131,208,131,209,131,210,131,211,131,213,131,215,131,217,131,218,131,219,131,222,131,226,131,227,131,228,131,230,131,231,131,232,131,235,131,236,131,237,131,112,96,61,109,117,114,102,98,142,148,197,148,67,83,193,143,126,123,223,78,38,140,126,78,212,158,177,148,179,148,77,82,92,111,99,144,69,109,52,140,17,88,76,93,32,107,73,107,170,103,91,84,84,129,140,127,153,88,55,133,58,95,162,98,71,106,57,149,114,101,132,96,101,104,167,119,84,78,168,79,231,93,152,151,172,100,216,127,237,92,207,79,141,122,7,82,4,131,20,78,47,96,131,122,166,148,181,79,178,78,230,121,52,116,228,82,185,130,210,100,189,121,221,91,129,108,82,151,123,143,34,108,62,80,127,83,5,110,206,100,116,102,48,108,197,96,119,152,247,139,134,94,60,116,119,122,203,121,24,78,177,144,3,116,66,108,218,86,75,145,197,108,139,141,58,83,198,134,242,102,175,142,72,92,113,154,32,110,238,131,239,131,243,131,244,131,245,131,246,131,247,131,250,131,251,131,252,131,254,131,255,131,0,132,2,132,5,132,7,132,8,132,9,132,10,132,16,132,18,132,19,132,20,132,21,132,22,132,23,132,25,132,26,132,27,132,30,132,31,132,32,132,33,132,34,132,35,132,41,132,42,132,43,132,44,132,45,132,46,132,47,132,48,132,50,132,51,132,52,132,53,132,54,132,55,132,57,132,58,132,59,132,62,132,63,132,64,132,65,132,66,132,67,132,68,132,69,132,71,132,72,132,73,132,74,132,75,132,76,132,77,132,78,132,79,132,80,132,82,132,83,132,84,132,85,132,86,132,88,132,93,132,94,132,95,132,96,132,98,132,100,132,101,132,102,132,103,132,104,132,106,132,110,132,111,132,112,132,114,132,116,132,119,132,121,132,123,132,124,132,214,83,54,90,139,159,163,141,187,83,8,87,167,152,67,103,155,145,201,108,104,81,202,117,243,98,172,114,56,82,157,82,58,127,148,112,56,118,116,83,74,158,183,105,110,120,192,150,217,136,164,127,54,113,195,113,137,81,211,103,228,116,228,88,24,101,183,86,169,139,118,153,112,98,213,126,249,96,237,112,236,88,193,78,186,78,205,95,231,151,251,78,164,139,3,82,138,89,171,126,84,98,205,78,229,101,14,98,56,131,201,132,99,131,141,135,148,113,182,110,185,91,210,126,151,81,201,99,212,103,137,128,57,131,21,136,18,81,122,91,130,89,177,143,115,78,93,108,101,81,37,137,111,143,46,150,74,133,94,116,16,149,240,149,166,109,229,130,49,95,146,100,18,109,40,132,110,129,195,156,94,88,91,141,9,78,193,83,125,132,126,132,127,132,128,132,129,132,131,132,132,132,133,132,134,132,138,132,141,132,143,132,144,132,145,132,146,132,147,132,148,132,149,132,150,132,152,132,154,132,155,132,157,132,158,132,159,132,160,132,162,132,163,132,164,132,165,132,166,132,167,132,168,132,169,132,170,132,171,132,172,132,173,132,174,132,176,132,177,132,179,132,181,132,182,132,183,132,187,132,188,132,190,132,192,132,194,132,195,132,197,132,198,132,199,132,200,132,203,132,204,132,206,132,207,132,210,132,212,132,213,132,215,132,216,132,217,132,218,132,219,132,220,132,222,132,225,132,226,132,228,132,231,132,232,132,233,132,234,132,235,132,237,132,238,132,239,132,241,132,242,132,243,132,244,132,245,132,246,132,247,132,248,132,249,132,250,132,251,132,253,132,254,132,0,133,1,133,2,133,30,79,99,101,81,104,211,85,39,78,20,100,154,154,107,98,194,90,95,116,114,130,169,109,238,104,231,80,142,131,2,120,64,103,57,82,153,108,177,126,187,80,101,85,94,113,91,123,82,102,202,115,235,130,73,103,113,92,32,82,125,113,107,136,234,149,85,150,197,100,97,141,179,129,132,85,85,108,71,98,46,127,146,88,36,79,70,85,79,141,76,102,10,78,26,92,243,136,162,104,78,99,13,122,231,112,141,130,250,82,246,151,17,92,232,84,181,144,205,126,98,89,74,141,199,134,12,130,13,130,102,141,68,100,4,92,81,97,137,109,62,121,190,139,55,120,51,117,123,84,56,79,171,142,241,109,32,90,197,126,94,121,136,108,161,91,118,90,26,117,190,128,78,97,23,110,240,88,31,117,37,117,114,114,71,83,243,126,3,133,4,133,5,133,6,133,7,133,8,133,9,133,10,133,11,133,13,133,14,133,15,133,16,133,18,133,20,133,21,133,22,133,24,133,25,133,27,133,28,133,29,133,30,133,32,133,34,133,35,133,36,133,37,133,38,133,39,133,40,133,41,133,42,133,45,133,46,133,47,133,48,133,49,133,50,133,51,133,52,133,53,133,54,133,62,133,63,133,64,133,65,133,66,133,68,133,69,133,70,133,71,133,75,133,76,133,77,133,78,133,79,133,80,133,81,133,82,133,83,133,84,133,85,133,87,133,88,133,90,133,91,133,92,133,93,133,95,133,96,133,97,133,98,133,99,133,101,133,102,133,103,133,105,133,106,133,107,133,108,133,109,133,110,133,111,133,112,133,113,133,115,133,117,133,118,133,119,133,120,133,124,133,125,133,127,133,128,133,129,133,1,119,219,118,105,82,220,128,35,87,8,94,49,89,238,114,189,101,127,110,215,139,56,92,113,134,65,83,243,119,254,98,246,101,192,78,223,152,128,134,158,91,198,139,242,83,226,119,127,79,78,92,118,154,203,89], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+193596);
/* memory initializer */ allocate([15,95,58,121,235,88,22,78,255,103,139,78,237,98,147,138,29,144,191,82,47,102,220,85,108,86,2,144,213,78,141,79,202,145,112,153,15,108,2,94,67,96,164,91,198,137,213,139,54,101,75,98,150,153,136,91,255,91,136,99,46,85,215,83,38,118,125,81,44,133,162,103,179,104,138,107,146,98,147,143,212,83,18,130,209,109,143,117,102,78,78,141,112,91,159,113,175,133,145,102,217,102,114,127,0,135,205,158,32,159,94,92,47,103,240,143,17,104,95,103,13,98,214,122,133,88,182,94,112,101,49,111,130,133,131,133,134,133,136,133,137,133,138,133,139,133,140,133,141,133,142,133,144,133,145,133,146,133,147,133,148,133,149,133,150,133,151,133,152,133,153,133,154,133,157,133,158,133,159,133,160,133,161,133,162,133,163,133,165,133,166,133,167,133,169,133,171,133,172,133,173,133,177,133,178,133,179,133,180,133,181,133,182,133,184,133,186,133,187,133,188,133,189,133,190,133,191,133,192,133,194,133,195,133,196,133,197,133,198,133,199,133,200,133,202,133,203,133,204,133,205,133,206,133,209,133,210,133,212,133,214,133,215,133,216,133,217,133,218,133,219,133,221,133,222,133,223,133,224,133,225,133,226,133,227,133,229,133,230,133,231,133,232,133,234,133,235,133,236,133,237,133,238,133,239,133,240,133,241,133,242,133,243,133,244,133,245,133,246,133,247,133,248,133,85,96,55,82,13,128,84,100,112,136,41,117,5,94,19,104,244,98,28,151,204,83,61,114,1,140,52,108,97,119,14,122,46,84,172,119,122,152,28,130,244,139,85,120,20,103,193,112,175,101,149,100,54,86,29,96,193,121,248,83,29,78,123,107,134,128,250,91,227,85,219,86,58,79,60,79,114,153,243,93,126,103,56,128,2,96,130,152,1,144,139,91,188,139,245,139,28,100,88,130,222,100,253,85,207,130,101,145,215,79,32,125,31,144,159,124,243,80,81,88,175,110,191,91,201,139,131,128,120,145,156,132,151,123,125,134,139,150,143,150,229,126,211,154,142,120,129,92,87,122,66,144,167,150,95,121,89,91,95,99,11,123,209,132,173,104,6,85,41,127,16,116,34,125,1,149,64,98,76,88,214,78,131,91,121,89,84,88,249,133,250,133,252,133,253,133,254,133,0,134,1,134,2,134,3,134,4,134,6,134,7,134,8,134,9,134,10,134,11,134,12,134,13,134,14,134,15,134,16,134,18,134,19,134,20,134,21,134,23,134,24,134,25,134,26,134,27,134,28,134,29,134,30,134,31,134,32,134,33,134,34,134,35,134,36,134,37,134,38,134,40,134,42,134,43,134,44,134,45,134,46,134,47,134,48,134,49,134,50,134,51,134,52,134,53,134,54,134,55,134,57,134,58,134,59,134,61,134,62,134,63,134,64,134,65,134,66,134,67,134,68,134,69,134,70,134,71,134,72,134,73,134,74,134,75,134,76,134,82,134,83,134,85,134,86,134,87,134,88,134,89,134,91,134,92,134,93,134,95,134,96,134,97,134,99,134,100,134,101,134,102,134,103,134,104,134,105,134,106,134,109,115,30,99,75,142,15,142,206,128,212,130,172,98,240,83,240,108,94,145,42,89,1,96,112,108,77,87,74,100,42,141,43,118,233,110,91,87,128,106,240,117,109,111,45,140,8,140,102,87,239,107,146,136,179,120,162,99,249,83,173,112,100,108,88,88,42,100,2,88,224,104,155,129,16,85,214,124,24,80,186,142,204,109,159,141,235,112,143,99,155,109,212,110,230,126,4,132,67,104,3,144,216,109,118,150,168,139,87,89,121,114,228,133,126,129,188,117,138,138,175,104,84,82,34,142,17,149,208,99,152,152,68,142,124,85,83,79,255,102,143,86,213,96,149,109,67,82,73,92,41,89,251,109,107,88,48,117,28,117,108,96,20,130,70,129,17,99,97,103,226,143,58,119,243,141,52,141,193,148,22,94,133,83,44,84,195,112,109,134,111,134,112,134,114,134,115,134,116,134,117,134,118,134,119,134,120,134,131,134,132,134,133,134,134,134,135,134,136,134,137,134,142,134,143,134,144,134,145,134,146,134,148,134,150,134,151,134,152,134,153,134,154,134,155,134,158,134,159,134,160,134,161,134,162,134,165,134,166,134,171,134,173,134,174,134,178,134,179,134,183,134,184,134,185,134,187,134,188,134,189,134,190,134,191,134,193,134,194,134,195,134,197,134,200,134,204,134,205,134,210,134,211,134,213,134,214,134,215,134,218,134,220,134,221,134,224,134,225,134,226,134,227,134,229,134,230,134,231,134,232,134,234,134,235,134,236,134,239,134,245,134,246,134,247,134,250,134,251,134,252,134,253,134,255,134,1,135,4,135,5,135,6,135,11,135,12,135,14,135,15,135,16,135,17,135,20,135,22,135,64,108,247,94,92,80,173,78,173,94,58,99,71,130,26,144,80,104,110,145,179,119,12,84,220,148,100,95,229,122,118,104,69,99,82,123,223,126,219,117,119,80,149,98,52,89,15,144,248,81,195,121,129,122,254,86,146,95,20,144,130,109,96,92,31,87,16,84,84,81,77,110,226,86,168,99,147,152,127,129,21,135,42,137,0,144,30,84,111,92,192,129,214,98,88,98,49,129,53,158,64,150,110,154,124,154,45,105,165,89,211,98,62,85,22,99,199,84,217,134,60,109,3,90,230,116,156,136,106,107,22,89,76,140,47,95,126,110,169,115,125,152,56,78,247,112,140,91,151,120,61,99,90,102,150,118,203,96,155,91,73,90,7,78,85,129,106,108,139,115,161,78,137,103,81,127,128,95,250,101,27,103,216,95,132,89,1,90,25,135,27,135,29,135,31,135,32,135,36,135,38,135,39,135,40,135,42,135,43,135,44,135,45,135,47,135,48,135,50,135,51,135,53,135,54,135,56,135,57,135,58,135,60,135,61,135,64,135,65,135,66,135,67,135,68,135,69,135,70,135,74,135,75,135,77,135,79,135,80,135,81,135,82,135,84,135,85,135,86,135,88,135,90,135,91,135,92,135,93,135,94,135,95,135,97,135,98,135,102,135,103,135,104,135,105,135,106,135,107,135,108,135,109,135,111,135,113,135,114,135,115,135,117,135,119,135,120,135,121,135,122,135,127,135,128,135,129,135,132,135,134,135,135,135,137,135,138,135,140,135,142,135,143,135,144,135,145,135,146,135,148,135,149,135,150,135,152,135,153,135,154,135,155,135,156,135,157,135,158,135,160,135,161,135,162,135,163,135,164,135,205,93,174,95,113,83,230,151,221,143,69,104,244,86,47,85,223,96,58,78,77,111,244,126,199,130,14,132,212,89,31,79,42,79,62,92,172,126,42,103,26,133,115,84,79,117,195,128,130,85,79,155,77,79,45,110,19,140,9,92,112,97,107,83,31,118,41,110,138,134,135,101,251,149,185,126,59,84,51,122,10,125,238,149,225,85,193,127,238,116,29,99,23,135,161,109,157,122,17,98,161,101,103,83,225,99,131,108,235,93,92,84,168,148,76,78,97,108,236,139,75,92,224,101,156,130,167,104,62,84,52,84,203,107,102,107,148,78,66,99,72,83,30,130,13,79,174,79,94,87,10,98,254,150,100,102,105,114,255,82,161,82,159,96,239,139,20,102,153,113,144,103,127,137,82,120,253,119,112,102,59,86,56,84,33,149,122,114,165,135,166,135,167,135,169,135,170,135,174,135,176,135,177,135,178,135,180,135,182,135,183,135,184,135,185,135,187,135,188,135,190,135,191,135,193,135,194,135,195,135,196,135,197,135,199,135,200,135,201,135,204,135,205,135,206,135,207,135,208,135,212,135,213,135,214,135,215,135,216,135,217,135,218,135,220,135,221,135,222,135,223,135,225,135,226,135,227,135,228,135,230,135,231,135,232,135,233,135,235,135,236,135,237,135,239,135,240,135,241,135,242,135,243,135,244,135,245,135,246,135,247,135,248,135,250,135,251,135,252,135,253,135,255,135,0,136,1,136,2,136,4,136,5,136,6,136,7,136,8,136,9,136,11,136,12,136,13,136,14,136,15,136,16,136,17,136,18,136,20,136,23,136,24,136,25,136,26,136,28,136,29,136,30,136,31,136,32,136,35,136,0,122,111,96,12,94,137,96,157,129,21,89,220,96,132,113,239,112,170,110,80,108,128,114,132,106,173,136,45,94,96,78,179,90,156,85,227,148,23,109,251,124,153,150,15,98,198,126,142,119,126,134,35,83,30,151,150,143,135,102,225,92,160,79,237,114,11,78,166,83,15,89,19,84,128,99,40,149,72,81,217,78,156,156,164,126,184,84,36,141,84,136,55,130,242,149,142,109,38,95,204,90,62,102,105,150,176,115,46,115,191,83,122,129,133,153,161,127,170,91,119,150,80,150,191,126,248,118,162,83,118,149,153,153,177,123,68,137,88,110,97,78,212,127,101,121,230,139,243,96,205,84,171,78,121,152,247,93,97,106,207,80,17,84,97,140,39,132,93,120,4,151,74,82,238,84,163,86,0,149,136,109,181,91,198,109,83,102,36,136,37,136,38,136,39,136,40,136,41,136,42,136,43,136,44,136,45,136,46,136,47,136,48,136,49,136,51,136,52,136,53,136,54,136,55,136,56,136,58,136,59,136,61,136,62,136,63,136,65,136,66,136,67,136,70,136,71,136,72,136,73,136,74,136,75,136,78,136,79,136,80,136,81,136,82,136,83,136,85,136,86,136,88,136,90,136,91,136,92,136,93,136,94,136,95,136,96,136,102,136,103,136,106,136,109,136,111,136,113,136,115,136,116,136,117,136,118,136,120,136,121,136,122,136,123,136,124,136,128,136,131,136,134,136,135,136,137,136,138,136,140,136,142,136,143,136,144,136,145,136,147,136,148,136,149,136,151,136,152,136,153,136,154,136,155,136,157,136,158,136,159,136,160,136,161,136,163,136,165,136,166,136,167,136,168,136,169,136,170,136,15,92,93,91,33,104,150,128,120,85,17,123,72,101,84,105,155,78,71,107,78,135,139,151,79,83,31,99,58,100,170,144,156,101,193,128,16,140,153,81,176,104,120,83,249,135,200,97,196,108,251,108,34,140,81,92,170,133,175,130,12,149,35,107,155,143,176,101,251,95,195,95,225,79,69,136,31,102,101,129,41,115,250,96,116,81,17,82,139,87,98,95,162,144,76,136,146,145,120,94,79,103,39,96,211,89,68,81,246,81,248,128,8,83,121,108,196,150,138,113,17,79,238,79,158,127,61,103,197,85,8,149,192,121,150,136,227,126,159,88,12,98,0,151,90,134,24,86,123,152,144,95,184,139,196,132,87,145,217,83,237,101,143,94,92,117,100,96,110,125,127,90,234,126,237,126,105,143,167,85,163,91,172,96,203,101,132,115,172,136,174,136,175,136,176,136,178,136,179,136,180,136,181,136,182,136,184,136,185,136,186,136,187,136,189,136,190,136,191,136,192,136,195,136,196,136,199,136,200,136,202,136,203,136,204,136,205,136,207,136,208,136,209,136,211,136,214,136,215,136,218,136,219,136,220,136,221,136,222,136,224,136,225,136,230,136,231,136,233,136,234,136,235,136,236,136,237,136,238,136,239,136,242,136,245,136,246,136,247,136,250,136,251,136,253,136,255,136,0,137,1,137,3,137,4,137,5,137,6,137,7,137,8,137,9,137,11,137,12,137,13,137,14,137,15,137,17,137,20,137,21,137,22,137,23,137,24,137,28,137,29,137,30,137,31,137,32,137,34,137,35,137,36,137,38,137,39,137,40,137,41,137,44,137,45,137,46,137,47,137,49,137,50,137,51,137,53,137,55,137,9,144,99,118,41,119,218,126,116,151,155,133,102,91,116,122,234,150,64,136,203,82,143,113,170,95,236,101,226,139,251,91,111,154,225,93,137,107,91,108,173,139,175,139,10,144,197,143,139,83,188,98,38,158,45,158,64,84,43,78,189,130,89,114,156,134,22,93,89,136,175,109,197,150,209,84,154,78,182,139,9,113,189,84,9,150,223,112,249,109,208,118,37,78,20,120,18,135,169,92,246,94,0,138,156,152,14,150,142,112,191,108,68,89,169,99,60,119,77,136,20,111,115,130,48,88,213,113,140,83,26,120,193,150,1,85,102,95,48,113,180,91,26,140,140,154,131,107,46,89,47,158,231,121,104,103,108,98,111,79,161,117,138,127,11,109,51,150,39,108,240,78,210,117,123,81,55,104,62,111,128,144,112,129,150,89,118,116,56,137,57,137,58,137,59,137,60,137,61,137,62,137,63,137,64,137,66,137,67,137,69,137,70,137,71,137,72,137,73,137,74,137,75,137,76,137,77,137,78,137,79,137,80,137,81,137,82,137,83,137,84,137,85,137,86,137,87,137,88,137,89,137,90,137,91,137,92,137,93,137,96,137,97,137,98,137,99,137,100,137,101,137,103,137,104,137,105,137,106,137,107,137,108,137,109,137,110,137,111,137,112,137,113,137,114,137,115,137,116,137,117,137,118,137,119,137,120,137,121,137,122,137,124,137,125,137,126,137,128,137,130,137,132,137,133,137,135,137,136,137,137,137,138,137,139,137,140,137,141,137,142,137,143,137,144,137,145,137,146,137,147,137,148,137,149,137,150,137,151,137,152,137,153,137,154,137,155,137,156,137,157,137,158,137,159,137,160,137,161,137,71,100,39,92,101,144,145,122,35,140,218,89,172,84,0,130,111,131,129,137,0,128,48,105,78,86,54,128,55,114,206,145,182,81,95,78,117,152,150,99,26,78,246,83,243,102,75,129,28,89,178,109,0,78,249,88,59,83,214,99,241,148,157,79,10,79,99,136,144,152,55,89,87,144,251,121,234,78,240,128,145,117,130,108,156,91,232,89,93,95,5,105,129,134,26,80,242,93,89,78,227,119,229,78,122,130,145,98,19,102,145,144,121,92,191,78,121,95,198,129,56,144,132,128,171,117,166,78,212,136,15,97,197,107,198,95,73,78,202,118,162,110,227,139,174,139,10,140,209,139,2,95,252,127,204,127,206,126,53,131,107,131,224,86,183,107,243,151,52,150,251,89,31,84,246,148,235,109,197,91,110,153,57,92,21,95,144,150,162,137,163,137,164,137,165,137,166,137,167,137,168,137,169,137,170,137,171,137,172,137,173,137,174,137,175,137,176,137,177,137,178,137,179,137,180,137,181,137,182,137,183,137,184,137,185,137,186,137,187,137,188,137,189,137,190,137,191,137,192,137,195,137,205,137,211,137,212,137,213,137,215,137,216,137,217,137,219,137,221,137,223,137,224,137,225,137,226,137,228,137,231,137,232,137,233,137,234,137,236,137,237,137,238,137,240,137,241,137,242,137,244,137,245,137,246,137,247,137,248,137,249,137,250,137,251,137,252,137,253,137,254,137,255,137,1,138,2,138,3,138,4,138,5,138,6,138,8,138,9,138,10,138,11,138,12,138,13,138,14,138,15,138,16,138,17,138,18,138,19,138,20,138,21,138,22,138,23,138,24,138,25,138,26,138,27,138,28,138,29,138,112,83,241,130,49,106,116,90,112,158,148,94,40,127,185,131,36,132,37,132,103,131,71,135,206,143,98,141,200,118,113,95,150,152,108,120,32,102,223,84,229,98,99,79,195,129,200,117,184,94,205,150,10,142,249,134,143,84,243,108,140,109,56,108,127,96,199,82,40,117,125,94,24,79,160,96,231,95,36,92,49,117,174,144,192,148,185,114,185,108,56,110,73,145,9,103,203,83,243,83,81,79,201,145,241,139,200,83,124,94,194,143,228,109,142,78,194,118,134,105,94,134,26,97,6,130,89,79,222,79,62,144,124,156,9,97,29,110,20,110,133,150,136,78,49,90,232,150,14,78,127,92,185,121,135,91,237,139,189,127,137,115,223,87,139,130,193,144,1,84,71,144,187,85,234,92,161,95,8,97,50,107,241,114,178,128,137,138,30,138,31,138,32,138,33,138,34,138,35,138,36,138,37,138,38,138,39,138,40,138,41,138,42,138,43,138,44,138,45,138,46,138,47,138,48,138,49,138,50,138,51,138,52,138,53,138,54,138,55,138,56,138,57,138,58,138,59,138,60,138,61,138,63,138,64,138,65,138,66,138,67,138,68,138,69,138,70,138,71,138,73,138,74,138,75,138,76,138,77,138,78,138,79,138,80,138,81,138,82,138,83,138,84,138,85,138,86,138,87,138,88,138,89,138,90,138,91,138,92,138,93,138,94,138,95,138,96,138,97,138,98,138,99,138,100,138,101,138,102,138,103,138,104,138,105,138,106,138,107,138,108,138,109,138,110,138,111,138,112,138,113,138,114,138,115,138,116,138,117,138,118,138,119,138,120,138,122,138,123,138,124,138,125,138,126,138,127,138,128,138,116,109,211,91,213,136,132,152,107,140,109,154,51,158,10,110,164,81,67,81,163,87,129,136,159,83,244,99,149,143,237,86,88,84,6,87,63,115,144,110,24,127,220,143,209,130,63,97,40,96,98,150,240,102,166,126,138,141,195,141,165,148,179,92,164,124,8,103,166,96,5,150,24,128,145,78,231,144,0,83,104,150,65,81,208,143,116,133,93,145,85,102,245,151,85,91,29,83,56,120,66,103,61,104,201,84,126,112,176,91,125,143,141,81,40,87,177,84,18,101,130,102,94,141,67,141,15,129,108,132,109,144,223,124,255,81,251,133,163,103,233,101,161,111,164,134,129,142,106,86,32,144,130,118,118,112,229,113,35,141,233,98,25,82,253,108,60,141,14,96,158,88,142,97,254,102,96,141,78,98,179,85,35,110,45,103,103,143,129,138,130,138,131,138,132,138,133,138,134,138,135,138,136,138,139,138,140,138,141,138,142,138,143,138,144,138,145,138,146,138,148,138,149,138,150,138,151,138,152,138,153,138,154,138,155,138,156,138,157,138,158,138,159,138,160,138,161,138,162,138,163,138,164,138,165,138,166,138,167,138,168,138,169,138,170,138,171,138,172,138,173,138,174,138,175,138,176,138,177,138,178,138,179,138,180,138,181,138,182,138,183,138,184,138,185,138,186,138,187,138,188,138,189,138,190,138,191,138,192,138,193,138,194,138,195,138,196,138,197,138,198,138,199,138,200,138,201,138,202,138,203,138,204,138,205,138,206,138,207,138,208,138,209,138,210,138,211,138,212,138,213,138,214,138,215,138,216,138,217,138,218,138,219,138,220,138,221,138,222,138,223,138,224,138,225,138,226,138,227,138,225,148,248,149,40,119,5,104,168,105,139,84,77,78,184,112,200,139,88,100,139,101,133,91,132,122,58,80,232,91,187,119,225,107,121,138,152,124,190,108,207,118,169,101,151,143,45,93,85,92,56,134,8,104,96,83,24,98,217,122,91,110,253,126,31,106,224,122,112,95,51,111,32,95,140,99,168,109,86,103,8,78,16,94,38,141,215,78,192,128,52,118,156,150,219,98,45,102,126,98,188,108,117,141,103,113,105,127,70,81,135,128,236,83,110,144,152,98,242,84,240,134,153,143,5,128,23,149,23,133,217,143,89,109,205,115,159,101,31,119,4,117,39,120,251,129,30,141,136,148,166,79,149,103,185,117,202,139,7,151,47,99,71,149,53,150,184,132,35,99,65,119,129,95,240,114,137,78,20,96,116,101,239,98,99,107,63,101,228,138,229,138,230,138,231,138,232,138,233,138,234,138,235,138,236,138,237,138,238,138,239,138,240,138,241,138,242,138,243,138,244,138,245,138,246,138,247,138,248,138,249,138,250,138,251,138,252,138,253,138,254,138,255,138,0,139,1,139,2,139,3,139,4,139,5,139,6,139,8,139,9,139,10,139,11,139,12,139,13,139,14,139,15,139,16,139,17,139,18,139,19,139,20,139,21,139,22,139,23,139,24,139,25,139,26,139,27,139,28,139,29,139,30,139,31,139,32,139,33,139,34,139,35,139,36,139,37,139,39,139,40,139,41,139,42,139,43,139,44,139,45,139,46,139,47,139,48,139,49,139,50,139,51,139,52,139,53,139,54,139,55,139,56,139,57,139,58,139,59,139,60,139,61,139,62,139,63,139,64,139,65,139,66,139,67,139,68,139,69,139,39,94,199,117,209,144,193,139,157,130,157,103,47,101,49,84,24,135,229,119,162,128,2,129,65,108,75,78,199,126,76,128,244,118,13,105,150,107,103,98,60,80,132,79,64,87,7,99,98,107,190,141,234,83,232,101,184,126,215,95,26,99,183,99,243,129,244,129,110,127,28,94,217,92,54,82,122,102,233,121,26,122,40,141,153,112,212,117,222,110,187,108,146,122,45,78,197,118,224,95,159,148,119,136,200,126,205,121,191,128,205,145,242,78,23,79,31,130,104,84,222,93,50,109,204,139,165,124,116,143,152,128,26,94,146,84,177,118,153,91,60,102,164,154,224,115,42,104,219,134,49,103,42,115,248,139,219,139,16,144,249,122,219,112,110,113,196,98,169,119,49,86,59,78,87,132,241,103,169,82,192,134,46,141,248,148,81,123,70,139,71,139,72,139,73,139,74,139,75,139,76,139,77,139,78,139,79,139,80,139,81,139,82,139,83,139,84,139,85,139,86,139,87,139,88,139,89,139,90,139,91,139,92,139,93,139,94,139,95,139,96,139,97,139,98,139,99,139,100,139,101,139,103,139,104,139,105,139,106,139,107,139,109,139,110,139,111,139,112,139,113,139,114,139,115,139,116,139,117,139,118,139,119,139,120,139,121,139,122,139,123,139,124,139,125,139,126,139,127,139,128,139,129,139,130,139,131,139,132,139,133,139,134,139,135,139,136,139,137,139,138,139,139,139,140,139,141,139,142,139,143,139,144,139,145,139,146,139,147,139,148,139,149,139,150,139,151,139,152,139,153,139,154,139,155,139,156,139,157,139,158,139,159,139,172,139,177,139,187,139,199,139,208,139,234,139,9,140,30,140,79,79,232,108,93,121,123,154,147,98,42,114,253,98,19,78,22,120,108,143,176,100,90,141,198,123,105,104,132,94,197,136,134,89,158,100,238,88,182,114,14,105,37,149,253,143,88,141,96,87,0,127,6,140,198,81,73,99,217,98,83,83,76,104,34,116,1,131,76,145,68,85,64,119,124,112,74,109,121,81,168,84,68,141,255,89,203,110,196,109,92,91,43,125,212,78,125,124,211,110,80,91,234,129,13,110,87,91,3,155,213,104,42,142,151,91,252,126,59,96,181,126,185,144,112,141,79,89,205,99,223,121,179,141,82,83,207,101,86,121,197,139,59,150,196,126,187,148,130,126,52,86,137,145,0,103,106,127,10,92,117,144,40,102,230,93,80,79,222,103,90,80,92,79,80,87,167,94,16,232,17,232,18,232,19,232,20,232,56,140,57,140,58,140,59,140,60,140,61,140,62,140,63,140,64,140,66,140,67,140,68,140,69,140,72,140,74,140,75,140,77,140,78,140,79,140,80,140,81,140,82,140,83,140,84,140,86,140,87,140,88,140,89,140,91,140,92,140,93,140,94,140,95,140,96,140,99,140,100,140,101,140,102,140,103,140,104,140,105,140,108,140,109,140,110,140,111,140,112,140,113,140,114,140,116,140,117,140,118,140,119,140,123,140,124,140,125,140,126,140,127,140,128,140,129,140,131,140,132,140,134,140,135,140,136,140,139,140,141,140,142,140,143,140,144,140,145,140,146,140,147,140,149,140,150,140,151,140,153,140,154,140,155,140,156,140,157,140,158,140,159,140,160,140,161,140,162,140,163,140,164,140,165,140,166,140,167,140,168,140,169,140,170,140,171,140,172,140,173,140,141,78,12,78,64,81,16,78,255,94,69,83,21,78,152,78,30,78,50,155,108,91,105,86,40,78,186,121,63,78,21,83,71,78,45,89,59,114,110,83,16,108,223,86,228,128,151,153,211,107,126,119,23,159,54,78,159,78,16,159,92,78,105,78,147,78,136,130,91,91,108,85,15,86,196,78,141,83,157,83,163,83,165,83,174,83,101,151,93,141,26,83,245,83,38,83,46,83,62,83,92,141,102,83,99,83,2,82,8,82,14,82,45,82,51,82,63,82,64,82,76,82,94,82,97,82,92,82,175,132,125,82,130,82,129,82,144,82,147,82,130,81,84,127,187,78,195,78,201,78,194,78,232,78,225,78,235,78,222,78,27,79,243,78,34,79,100,79,245,78,37,79,39,79,9,79,43,79,94,79,103,79,56,101,90,79,93,79,174,140,175,140,176,140,177,140,178,140,179,140,180,140,181,140,182,140,183,140,184,140,185,140,186,140,187,140,188,140,189,140,190,140,191,140,192,140,193,140,194,140,195,140,196,140,197,140,198,140,199,140,200,140,201,140,202,140,203,140,204,140,205,140,206,140,207,140,208,140,209,140,210,140,211,140,212,140,213,140,214,140,215,140,216,140,217,140,218,140,219,140,220,140,221,140,222,140,223,140,224,140,225,140,226,140,227,140,228,140,229,140,230,140,231,140,232,140,233,140,234,140,235,140,236,140,237,140,238,140,239,140,240,140,241,140,242,140,243,140,244,140,245,140,246,140,247,140,248,140,249,140,250,140,251,140,252,140,253,140,254,140,255,140,0,141,1,141,2,141,3,141,4,141,5,141,6,141,7,141,8,141,9,141,10,141,11,141,12,141,13,141,95,79,87,79,50,79,61,79,118,79,116,79,145,79,137,79,131,79,143,79,126,79,123,79,170,79,124,79,172,79,148,79,230,79,232,79,234,79,197,79,218,79,227,79,220,79,209,79,223,79,248,79,41,80,76,80,243,79,44,80,15,80,46,80,45,80,254,79,28,80,12,80,37,80,40,80,126,80,67,80,85,80,72,80,78,80,108,80,123,80,165,80,167,80,169,80,186,80,214,80,6,81,237,80,236,80,230,80,238,80,7,81,11,81,221,78,61,108,88,79,101,79,206,79,160,159,70,108,116,124,110,81,253,93,201,158,152,153,129,81,20,89,249,82,13,83,7,138,16,83,235,81,25,89,85,81,160,78,86,81,179,78,110,136,164,136,181,78,20,129,210,136,128,121,52,91,3,136,184,127,171,81,177,81,189,81,188,81,14,141,15,141,16,141,17,141,18,141,19,141,20,141,21,141,22,141,23,141,24,141,25,141,26,141,27,141,28,141,32,141,81,141,82,141,87,141,95,141,101,141,104,141,105,141,106,141,108,141,110,141,111,141,113,141,114,141,120,141,121,141,122,141,123,141,124,141,125,141,126,141,127,141,128,141,130,141,131,141,134,141,135,141,136,141,137,141,140,141,141,141,142,141,143,141,144,141,146,141,147,141,149,141,150,141,151,141,152,141,153,141,154,141,155,141,156,141,157,141,158,141,160,141,161,141,162,141,164,141,165,141,166,141,167,141,168,141,169,141,170,141,171,141,172,141,173,141,174,141,175,141,176,141,178,141,182,141,183,141,185,141,187,141,189,141,192,141,193,141,194,141,197,141,199,141,200,141,201,141,202,141,205,141,208,141,210,141,211,141,212,141,199,81,150,81,162,81,165,81,160,139,166,139,167,139,170,139,180,139,181,139,183,139,194,139,195,139,203,139,207,139,206,139,210,139,211,139,212,139,214,139,216,139,217,139,220,139,223,139,224,139,228,139,232,139,233,139,238,139,240,139,243,139,246,139,249,139,252,139,255,139,0,140,2,140,4,140,7,140,12,140,15,140,17,140,18,140,20,140,21,140,22,140,25,140,27,140,24,140,29,140,31,140,32,140,33,140,37,140,39,140,42,140,43,140,46,140,47,140,50,140,51,140,53,140,54,140,105,83,122,83,29,150,34,150,33,150,49,150,42,150,61,150,60,150,66,150,73,150,84,150,95,150,103,150,108,150,114,150,116,150,136,150,141,150,151,150,176,150,151,144,155,144,157,144,153,144,172,144,161,144,180,144,179,144,182,144,186,144,213,141,216,141,217,141,220,141,224,141,225,141,226,141,229,141,230,141,231,141,233,141,237,141,238,141,240,141,241,141,242,141,244,141,246,141,252,141,254,141,255,141,0,142,1,142,2,142,3,142,4,142,6,142,7,142,8,142,11,142,13,142,14,142,16,142,17,142,18,142,19,142,21,142,22,142,23,142,24,142,25,142,26,142,27,142,28,142,32,142,33,142,36,142,37,142,38,142,39,142,40,142,43,142,45,142,48,142,50,142,51,142,52,142,54,142,55,142,56,142,59,142,60,142,62,142,63,142,67,142,69,142,70,142,76,142,77,142,78,142,79,142,80,142,83,142,84,142,85,142,86,142,87,142,88,142,90,142,91,142,92,142,93,142,94,142,95,142,96,142,97,142,98,142,99,142,100,142,101,142,103,142,104,142,106,142,107,142,110,142,113,142,184,144,176,144,207,144,197,144,190,144,208,144,196,144,199,144,211,144,230,144,226,144,220,144,215,144,219,144,235,144,239,144,254,144,4,145,34,145,30,145,35,145,49,145,47,145,57,145,67,145,70,145,13,82,66,89,162,82,172,82,173,82,190,82,255,84,208,82,214,82,240,82,223,83,238,113,205,119,244,94,245,81,252,81,47,155,182,83,1,95,90,117,239,93,76,87,169,87,161,87,126,88,188,88,197,88,209,88,41,87,44,87,42,87,51,87,57,87,46,87,47,87,92,87,59,87,66,87,105,87,133,87,107,87,134,87,124,87,123,87,104,87,109,87,118,87,115,87,173,87,164,87,140,87,178,87,207,87,167,87,180,87,147,87,160,87,213,87,216,87,218,87,217,87,210,87,184,87,244,87,239,87,248,87,228,87,221,87,115,142,117,142,119,142,120,142,121,142,122,142,123,142,125,142,126,142,128,142,130,142,131,142,132,142,134,142,136,142,137,142,138,142,139,142,140,142,141,142,142,142,145,142,146,142,147,142,149,142,150,142,151,142,152,142,153,142,154,142,155,142,157,142,159,142,160,142,161,142,162,142,163,142,164,142,165,142,166,142,167,142,168,142,169,142,170,142,173,142,174,142,176,142,177,142,179,142,180,142,181,142,182,142,183,142,184,142,185,142,187,142,188,142,189,142,190,142,191,142,192,142,193,142,194,142,195,142,196,142,197,142,198,142,199,142,200,142,201,142,202,142,203,142,204,142,205,142,207,142,208,142,209,142,210,142,211,142,212,142,213,142,214,142,215,142,216,142,217,142,218,142,219,142,220,142,221,142,222,142,223,142,224,142,225,142,226,142,227,142,228,142,11,88,13,88,253,87,237,87,0,88,30,88,25,88,68,88,32,88,101,88,108,88,129,88,137,88,154,88,128,88,168,153,25,159,255,97,121,130,125,130,127,130,143,130,138,130,168,130,132,130,142,130,145,130,151,130,153,130,171,130,184,130,190,130,176,130,200,130,202,130,227,130,152,130,183,130,174,130,203,130,204,130,193,130,169,130,180,130,161,130,170,130,159,130,196,130,206,130,164,130,225,130,9,131,247,130,228,130,15,131,7,131,220,130,244,130,210,130,216,130,12,131,251,130,211,130,17,131,26,131,6,131,20,131,21,131,224,130,213,130,28,131,81,131,91,131,92,131,8,131,146,131,60,131,52,131,49,131,155,131,94,131,47,131,79,131,71,131,67,131,95,131,64,131,23,131,96,131,45,131,58,131,51,131,102,131,101,131,229,142,230,142,231,142,232,142,233,142,234,142,235,142,236,142,237,142,238,142,239,142,240,142,241,142,242,142,243,142,244,142,245,142,246,142,247,142,248,142,249,142,250,142,251,142,252,142,253,142,254,142,255,142,0,143,1,143,2,143,3,143,4,143,5,143,6,143,7,143,8,143,9,143,10,143,11,143,12,143,13,143,14,143,15,143,16,143,17,143,18,143,19,143,20,143,21,143,22,143,23,143,24,143,25,143,26,143,27,143,28,143,29,143,30,143,31,143,32,143,33,143,34,143,35,143,36,143,37,143,38,143,39,143,40,143,41,143,42,143,43,143,44,143,45,143,46,143,47,143,48,143,49,143,50,143,51,143,52,143,53,143,54,143,55,143,56,143,57,143,58,143,59,143,60,143,61,143,62,143,63,143,64,143,65,143,66,143,67,143,68,143,104,131,27,131,105,131,108,131,106,131,109,131,110,131,176,131,120,131,179,131,180,131,160,131,170,131,147,131,156,131,133,131,124,131,182,131,169,131,125,131,184,131,123,131,152,131,158,131,168,131,186,131,188,131,193,131,1,132,229,131,216,131,7,88,24,132,11,132,221,131,253,131,214,131,28,132,56,132,17,132,6,132,212,131,223,131,15,132,3,132,248,131,249,131,234,131,197,131,192,131,38,132,240,131,225,131,92,132,81,132,90,132,89,132,115,132,135,132,136,132,122,132,137,132,120,132,60,132,70,132,105,132,118,132,140,132,142,132,49,132,109,132,193,132,205,132,208,132,230,132,189,132,211,132,202,132,191,132,186,132,224,132,161,132,185,132,180,132,151,132,229,132,227,132,12,133,13,117,56,133,240,132,57,133,31,133,58,133,69,143,70,143,71,143,72,143,73,143,74,143,75,143,76,143,77,143,78,143,79,143,80,143,81,143,82,143,83,143,84,143,85,143,86,143,87,143,88,143,89,143,90,143,91,143,92,143,93,143,94,143,95,143,96,143,97,143,98,143,99,143,100,143,101,143,106,143,128,143,140,143,146,143,157,143,160,143,161,143,162,143,164,143,165,143,166,143,167,143,170,143,172,143,173,143,174,143,175,143,178,143,179,143,180,143,181,143,183,143,184,143,186,143,187,143,188,143,191,143,192,143,195,143,198,143,201,143,202,143,203,143,204,143,205,143,207,143,210,143,214,143,215,143,218,143,224,143,225,143,227,143,231,143,236,143,239,143,241,143,242,143,244,143,245,143,246,143,250,143,251,143,252,143,254,143,255,143,7,144,8,144,12,144,14,144,19,144,21,144,24,144,86,133,59,133,255,132,252,132,89,133,72,133,104,133,100,133,94,133,122,133,162,119,67,133,114,133,123,133,164,133,168,133,135,133,143,133,121,133,174,133,156,133,133,133,185,133,183,133,176,133,211,133,193,133,220,133,255,133,39,134,5,134,41,134,22,134,60,134,254,94,8,95,60,89,65,89,55,128,85,89,90,89,88,89,15,83,34,92,37,92,44,92,52,92,76,98,106,98,159,98,187,98,202,98,218,98,215,98,238,98,34,99,246,98,57,99,75,99,67,99,173,99,246,99,113,99,122,99,142,99,180,99,109,99,172,99,138,99,105,99,174,99,188,99,242,99,248,99,224,99,255,99,196,99,222,99,206,99,82,100,198,99,190,99,69,100,65,100,11,100,27,100,32,100,12,100,38,100,33,100,94,100,132,100,109,100,150,100,25,144,28,144,35,144,36,144,37,144,39,144,40,144,41,144,42,144,43,144,44,144,48,144,49,144,50,144,51,144,52,144,55,144,57,144,58,144,61,144,63,144,64,144,67,144,69,144,70,144,72,144,73,144,74,144,75,144,76,144,78,144,84,144,85,144,86,144,89,144,90,144,92,144,93,144,94,144,95,144,96,144,97,144,100,144,102,144,103,144,105,144,106,144,107,144,108,144,111,144,112,144,113,144,114,144,115,144,118,144,119,144,120,144,121,144,122,144,123,144,124,144,126,144,129,144,132,144,133,144,134,144,135,144,137,144,138,144,140,144,141,144,142,144,143,144,144,144,146,144,148,144,150,144,152,144,154,144,156,144,158,144,159,144,160,144,164,144,165,144,167,144,168,144,169,144,171,144,173,144,178,144,183,144,188,144,189,144,191,144,192,144,122,100,183,100,184,100,153,100,186,100,192,100,208,100,215,100,228,100,226,100,9,101,37,101,46,101,11,95,210,95,25,117,17,95,95,83,241,83,253,83,233,83,232,83,251,83,18,84,22,84,6,84,75,84,82,84,83,84,84,84,86,84,67,84,33,84,87,84,89,84,35,84,50,84,130,84,148,84,119,84,113,84,100,84,154,84,155,84,132,84,118,84,102,84,157,84,208,84,173,84,194,84,180,84,210,84,167,84,166,84,211,84,212,84,114,84,163,84,213,84,187,84,191,84,204,84,217,84,218,84,220,84,169,84,170,84,164,84,221,84,207,84,222,84,27,85,231,84,32,85,253,84,20,85,243,84,34,85,35,85,15,85,17,85,39,85,42,85,103,85,143,85,181,85,73,85,109,85,65,85,85,85,63,85,80,85,60,85,194,144,195,144,198,144,200,144,201,144,203,144,204,144,205,144,210,144,212,144,213,144,214,144,216,144,217,144,218,144,222,144,223,144,224,144,227,144,228,144,229,144,233,144,234,144,236,144,238,144,240,144,241,144,242,144,243,144,245,144,246,144,247,144,249,144,250,144,251,144,252,144,255,144,0,145,1,145,3,145,5,145,6,145,7,145,8,145,9,145,10,145,11,145,12,145,13,145,14,145,15,145,16,145,17,145,18,145,19,145,20,145,21,145,22,145,23,145,24,145,26,145,27,145,28,145,29,145,31,145,32,145,33,145,36,145,37,145,38,145,39,145,40,145,41,145,42,145,43,145,44,145,45,145,46,145,48,145,50,145,51,145,52,145,53,145,54,145,55,145,56,145,58,145,59,145,60,145,61,145,62,145,63,145,64,145,65,145,66,145,68,145,55,85,86,85,117,85,118,85,119,85,51,85,48,85,92,85,139,85,210,85,131,85,177,85,185,85,136,85,129,85,159,85,126,85,214,85,145,85,123,85,223,85,189,85,190,85,148,85,153,85,234,85,247,85,201,85,31,86,209,85,235,85,236,85,212,85,230,85,221,85,196,85,239,85,229,85,242,85,243,85,204,85,205,85,232,85,245,85,228,85,148,143,30,86,8,86,12,86,1,86,36,86,35,86,254,85,0,86,39,86,45,86,88,86,57,86,87,86,44,86,77,86,98,86,89,86,92,86,76,86,84,86,134,86,100,86,113,86,107,86,123,86,124,86,133,86,147,86,175,86,212,86,215,86,221,86,225,86,245,86,235,86,249,86,255,86,4,87,10,87,9,87,28,87,15,94,25,94,20,94,17,94,49,94,59,94,60,94,69,145,71,145,72,145,81,145,83,145,84,145,85,145,86,145,88,145,89,145,91,145,92,145,95,145,96,145,102,145,103,145,104,145,107,145,109,145,115,145,122,145,123,145,124,145,128,145,129,145,130,145,131,145,132,145,134,145,136,145,138,145,142,145,143,145,147,145,148,145,149,145,150,145,151,145,152,145,153,145,156,145,157,145,158,145,159,145,160,145,161,145,164,145,165,145,166,145,167,145,168,145,169,145,171,145,172,145,176,145,177,145,178,145,179,145,182,145,183,145,184,145,185,145,187,145,188,145,189,145,190,145,191,145,192,145,193,145,194,145,195,145,196,145,197,145,198,145,200,145,203,145,208,145,210,145,211,145,212,145,213,145,214,145,215,145,216,145,217,145,218,145,219,145,221,145,222,145,223,145,224,145,225,145,226,145,227,145,228,145,229,145,55,94,68,94,84,94,91,94,94,94,97,94,140,92,122,92,141,92,144,92,150,92,136,92,152,92,153,92,145,92,154,92,156,92,181,92,162,92,189,92,172,92,171,92,177,92,163,92,193,92,183,92,196,92,210,92,228,92,203,92,229,92,2,93,3,93,39,93,38,93,46,93,36,93,30,93,6,93,27,93,88,93,62,93,52,93,61,93,108,93,91,93,111,93,93,93,107,93,75,93,74,93,105,93,116,93,130,93,153,93,157,93,115,140,183,93,197,93,115,95,119,95,130,95,135,95,137,95,140,95,149,95,153,95,156,95,168,95,173,95,181,95,188,95,98,136,97,95,173,114,176,114,180,114,183,114,184,114,195,114,193,114,206,114,205,114,210,114,232,114,239,114,233,114,242,114,244,114,247,114,1,115,243,114,3,115,250,114,230,145,231,145,232,145,233,145,234,145,235,145,236,145,237,145,238,145,239,145,240,145,241,145,242,145,243,145,244,145,245,145,246,145,247,145,248,145,249,145,250,145,251,145,252,145,253,145,254,145,255,145,0,146,1,146,2,146,3,146,4,146,5,146,6,146,7,146,8,146,9,146,10,146,11,146,12,146,13,146,14,146,15,146,16,146,17,146,18,146,19,146,20,146,21,146,22,146,23,146,24,146,25,146,26,146,27,146,28,146,29,146,30,146,31,146,32,146,33,146,34,146,35,146,36,146,37,146,38,146,39,146,40,146,41,146,42,146,43,146,44,146,45,146,46,146,47,146,48,146,49,146,50,146,51,146,52,146,53,146,54,146,55,146,56,146,57,146,58,146,59,146,60,146,61,146,62,146,63,146,64,146,65,146,66,146,67,146,68,146,69,146,251,114,23,115,19,115,33,115,10,115,30,115,29,115,21,115,34,115,57,115,37,115,44,115,56,115,49,115,80,115,77,115,87,115,96,115,108,115,111,115,126,115,27,130,37,89,231,152,36,89,2,89,99,153,103,153,104,153,105,153,106,153,107,153,108,153,116,153,119,153,125,153,128,153,132,153,135,153,138,153,141,153,144,153,145,153,147,153,148,153,149,153,128,94,145,94,139,94,150,94,165,94,160,94,185,94,181,94,190,94,179,94,83,141,210,94,209,94,219,94,232,94,234,94,186,129,196,95,201,95,214,95,207,95,3,96,238,95,4,96,225,95,228,95,254,95,5,96,6,96,234,95,237,95,248,95,25,96,53,96,38,96,27,96,15,96,13,96,41,96,43,96,10,96,63,96,33,96,120,96,121,96,123,96,122,96,66,96,70,146,71,146,72,146,73,146,74,146,75,146,76,146,77,146,78,146,79,146,80,146,81,146,82,146,83,146,84,146,85,146,86,146,87,146,88,146,89,146,90,146,91,146,92,146,93,146,94,146,95,146,96,146,97,146,98,146,99,146,100,146,101,146,102,146,103,146,104,146,105,146,106,146,107,146,108,146,109,146,110,146,111,146,112,146,113,146,114,146,115,146,117,146,118,146,119,146,120,146,121,146,122,146,123,146,124,146,125,146,126,146,127,146,128,146,129,146,130,146,131,146,132,146,133,146,134,146,135,146,136,146,137,146,138,146,139,146,140,146,141,146,143,146,144,146,145,146,146,146,147,146,148,146,149,146,150,146,151,146,152,146,153,146,154,146,155,146,156,146,157,146,158,146,159,146,160,146,161,146,162,146,163,146,164,146,165,146,166,146,167,146,106,96,125,96,150,96,154,96,173,96,157,96,131,96,146,96,140,96,155,96,236,96,187,96,177,96,221,96,216,96,198,96,218,96,180,96,32,97,38,97,21,97,35,97,244,96,0,97,14,97,43,97,74,97,117,97,172,97,148,97,167,97,183,97,212,97,245,97,221,95,179,150,233,149,235,149,241,149,243,149,245,149,246,149,252,149,254,149,3,150,4,150,6,150,8,150,10,150,11,150,12,150,13,150,15,150,18,150,21,150,22,150,23,150,25,150,26,150,44,78,63,114,21,98,53,108,84,108,92,108,74,108,163,108,133,108,144,108,148,108,140,108,104,108,105,108,116,108,118,108,134,108,169,108,208,108,212,108,173,108,247,108,248,108,241,108,215,108,178,108,224,108,214,108,250,108,235,108,238,108,177,108,211,108,239,108,254,108,168,146,169,146,170,146,171,146,172,146,173,146,175,146,176,146,177,146,178,146,179,146,180,146,181,146,182,146,183,146,184,146,185,146,186,146,187,146,188,146,189,146,190,146,191,146,192,146,193,146,194,146,195,146,196,146,197,146,198,146,199,146,201,146,202,146,203,146,204,146,205,146,206,146,207,146,208,146,209,146,210,146,211,146,212,146,213,146,214,146,215,146,216,146,217,146,218,146,219,146,220,146,221,146,222,146,223,146,224,146,225,146,226,146,227,146,228,146,229,146,230,146,231,146,232,146,233,146,234,146,235,146,236,146,237,146,238,146,239,146,240,146,241,146,242,146,243,146,244,146,245,146,246,146,247,146,248,146,249,146,250,146,251,146,252,146,253,146,254,146,255,146,0,147,1,147,2,147,3,147,4,147,5,147,6,147,7,147,8,147,9,147,57,109,39,109,12,109,67,109,72,109,7,109,4,109,25,109,14,109,43,109,77,109,46,109,53,109,26,109,79,109,82,109,84,109,51,109,145,109,111,109,158,109,160,109,94,109,147,109,148,109,92,109,96,109,124,109,99,109,26,110,199,109,197,109,222,109,14,110,191,109,224,109,17,110,230,109,221,109,217,109,22,110,171,109,12,110,174,109,43,110,110,110,78,110,107,110,178,110,95,110,134,110,83,110,84,110,50,110,37,110,68,110,223,110,177,110,152,110,224,110,45,111,226,110,165,110,167,110,189,110,187,110,183,110,215,110,180,110,207,110,143,110,194,110,159,110,98,111,70,111,71,111,36,111,21,111,249,110,47,111,54,111,75,111,116,111,42,111,9,111,41,111,137,111,141,111,140,111,120,111,114,111,124,111,122,111,209,111,10,147,11,147,12,147,13,147,14,147,15,147,16,147,17,147,18,147,19,147,20,147,21,147,22,147,23,147,24,147,25,147,26,147,27,147,28,147,29,147,30,147,31,147,32,147,33,147,34,147,35,147,36,147,37,147,38,147,39,147,40,147,41,147,42,147,43,147,44,147,45,147,46,147,47,147,48,147,49,147,50,147,51,147,52,147,53,147,54,147,55,147,56,147,57,147,58,147,59,147,60,147,61,147,63,147,64,147,65,147,66,147,67,147,68,147,69,147,70,147,71,147,72,147,73,147,74,147,75,147,76,147,77,147,78,147,79,147,80,147,81,147,82,147,83,147,84,147,85,147,86,147,87,147,88,147,89,147,90,147,91,147,92,147,93,147,94,147,95,147,96,147,97,147,98,147,99,147,100,147,101,147,102,147,103,147,104,147,105,147,107,147,201,111,167,111,185,111,182,111,194,111,225,111,238,111,222,111,224,111,239,111,26,112,35,112,27,112,57,112,53,112,79,112,94,112,128,91], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+203836);
/* memory initializer */ allocate([132,91,149,91,147,91,165,91,184,91,47,117,158,154,52,100,228,91,238,91,48,137,240,91,71,142,7,139,182,143,211,143,213,143,229,143,238,143,228,143,233,143,230,143,243,143,232,143,5,144,4,144,11,144,38,144,17,144,13,144,22,144,33,144,53,144,54,144,45,144,47,144,68,144,81,144,82,144,80,144,104,144,88,144,98,144,91,144,185,102,116,144,125,144,130,144,136,144,131,144,139,144,80,95,87,95,86,95,88,95,59,92,171,84,80,92,89,92,113,91,99,92,102,92,188,127,42,95,41,95,45,95,116,130,60,95,59,155,110,92,129,89,131,89,141,89,169,89,170,89,163,89,108,147,109,147,110,147,111,147,112,147,113,147,114,147,115,147,116,147,117,147,118,147,119,147,120,147,121,147,122,147,123,147,124,147,125,147,126,147,127,147,128,147,129,147,130,147,131,147,132,147,133,147,134,147,135,147,136,147,137,147,138,147,139,147,140,147,141,147,142,147,144,147,145,147,146,147,147,147,148,147,149,147,150,147,151,147,152,147,153,147,154,147,155,147,156,147,157,147,158,147,159,147,160,147,161,147,162,147,163,147,164,147,165,147,166,147,167,147,168,147,169,147,170,147,171,147,172,147,173,147,174,147,175,147,176,147,177,147,178,147,179,147,180,147,181,147,182,147,183,147,184,147,185,147,186,147,187,147,188,147,189,147,190,147,191,147,192,147,193,147,194,147,195,147,196,147,197,147,198,147,199,147,200,147,201,147,203,147,204,147,205,147,151,89,202,89,171,89,158,89,164,89,210,89,178,89,175,89,215,89,190,89,5,90,6,90,221,89,8,90,227,89,216,89,249,89,12,90,9,90,50,90,52,90,17,90,35,90,19,90,64,90,103,90,74,90,85,90,60,90,98,90,117,90,236,128,170,90,155,90,119,90,122,90,190,90,235,90,178,90,210,90,212,90,184,90,224,90,227,90,241,90,214,90,230,90,216,90,220,90,9,91,23,91,22,91,50,91,55,91,64,91,21,92,28,92,90,91,101,91,115,91,81,91,83,91,98,91,117,154,119,154,120,154,122,154,127,154,125,154,128,154,129,154,133,154,136,154,138,154,144,154,146,154,147,154,150,154,152,154,155,154,156,154,157,154,159,154,160,154,162,154,163,154,165,154,167,154,159,126,161,126,163,126,165,126,168,126,169,126,206,147,207,147,208,147,209,147,210,147,211,147,212,147,213,147,215,147,216,147,217,147,218,147,219,147,220,147,221,147,222,147,223,147,224,147,225,147,226,147,227,147,228,147,229,147,230,147,231,147,232,147,233,147,234,147,235,147,236,147,237,147,238,147,239,147,240,147,241,147,242,147,243,147,244,147,245,147,246,147,247,147,248,147,249,147,250,147,251,147,252,147,253,147,254,147,255,147,0,148,1,148,2,148,3,148,4,148,5,148,6,148,7,148,8,148,9,148,10,148,11,148,12,148,13,148,14,148,15,148,16,148,17,148,18,148,19,148,20,148,21,148,22,148,23,148,24,148,25,148,26,148,27,148,28,148,29,148,30,148,31,148,32,148,33,148,34,148,35,148,36,148,37,148,38,148,39,148,40,148,41,148,42,148,43,148,44,148,45,148,46,148,173,126,176,126,190,126,192,126,193,126,194,126,201,126,203,126,204,126,208,126,212,126,215,126,219,126,224,126,225,126,232,126,235,126,238,126,239,126,241,126,242,126,13,127,246,126,250,126,251,126,254,126,1,127,2,127,3,127,7,127,8,127,11,127,12,127,15,127,17,127,18,127,23,127,25,127,28,127,27,127,31,127,33,127,34,127,35,127,36,127,37,127,38,127,39,127,42,127,43,127,44,127,45,127,47,127,48,127,49,127,50,127,51,127,53,127,122,94,127,117,219,93,62,117,149,144,142,115,145,115,174,115,162,115,159,115,207,115,194,115,209,115,183,115,179,115,192,115,201,115,200,115,229,115,217,115,124,152,10,116,233,115,231,115,222,115,186,115,242,115,15,116,42,116,91,116,38,116,37,116,40,116,48,116,46,116,44,116,47,148,48,148,49,148,50,148,51,148,52,148,53,148,54,148,55,148,56,148,57,148,58,148,59,148,60,148,61,148,63,148,64,148,65,148,66,148,67,148,68,148,69,148,70,148,71,148,72,148,73,148,74,148,75,148,76,148,77,148,78,148,79,148,80,148,81,148,82,148,83,148,84,148,85,148,86,148,87,148,88,148,89,148,90,148,91,148,92,148,93,148,94,148,95,148,96,148,97,148,98,148,99,148,100,148,101,148,102,148,103,148,104,148,105,148,106,148,108,148,109,148,110,148,111,148,112,148,113,148,114,148,115,148,116,148,117,148,118,148,119,148,120,148,121,148,122,148,123,148,124,148,125,148,126,148,127,148,128,148,129,148,130,148,131,148,132,148,145,148,150,148,152,148,199,148,207,148,211,148,212,148,218,148,230,148,251,148,28,149,32,149,27,116,26,116,65,116,92,116,87,116,85,116,89,116,119,116,109,116,126,116,156,116,142,116,128,116,129,116,135,116,139,116,158,116,168,116,169,116,144,116,167,116,210,116,186,116,234,151,235,151,236,151,76,103,83,103,94,103,72,103,105,103,165,103,135,103,106,103,115,103,152,103,167,103,117,103,168,103,158,103,173,103,139,103,119,103,124,103,240,103,9,104,216,103,10,104,233,103,176,103,12,104,217,103,181,103,218,103,179,103,221,103,0,104,195,103,184,103,226,103,14,104,193,103,253,103,50,104,51,104,96,104,97,104,78,104,98,104,68,104,100,104,131,104,29,104,85,104,102,104,65,104,103,104,64,104,62,104,74,104,73,104,41,104,181,104,143,104,116,104,119,104,147,104,107,104,194,104,110,105,252,104,31,105,32,105,249,104,39,149,51,149,61,149,67,149,72,149,75,149,85,149,90,149,96,149,110,149,116,149,117,149,119,149,120,149,121,149,122,149,123,149,124,149,125,149,126,149,128,149,129,149,130,149,131,149,132,149,133,149,134,149,135,149,136,149,137,149,138,149,139,149,140,149,141,149,142,149,143,149,144,149,145,149,146,149,147,149,148,149,149,149,150,149,151,149,152,149,153,149,154,149,155,149,156,149,157,149,158,149,159,149,160,149,161,149,162,149,163,149,164,149,165,149,166,149,167,149,168,149,169,149,170,149,171,149,172,149,173,149,174,149,175,149,176,149,177,149,178,149,179,149,180,149,181,149,182,149,183,149,184,149,185,149,186,149,187,149,188,149,189,149,190,149,191,149,192,149,193,149,194,149,195,149,196,149,197,149,198,149,199,149,200,149,201,149,202,149,203,149,36,105,240,104,11,105,1,105,87,105,227,104,16,105,113,105,57,105,96,105,66,105,93,105,132,105,107,105,128,105,152,105,120,105,52,105,204,105,135,105,136,105,206,105,137,105,102,105,99,105,121,105,155,105,167,105,187,105,171,105,173,105,212,105,177,105,193,105,202,105,223,105,149,105,224,105,141,105,255,105,47,106,237,105,23,106,24,106,101,106,242,105,68,106,62,106,160,106,80,106,91,106,53,106,142,106,121,106,61,106,40,106,88,106,124,106,145,106,144,106,169,106,151,106,171,106,55,115,82,115,129,107,130,107,135,107,132,107,146,107,147,107,141,107,154,107,155,107,161,107,170,107,107,143,109,143,113,143,114,143,115,143,117,143,118,143,120,143,119,143,121,143,122,143,124,143,126,143,129,143,130,143,132,143,135,143,139,143,204,149,205,149,206,149,207,149,208,149,209,149,210,149,211,149,212,149,213,149,214,149,215,149,216,149,217,149,218,149,219,149,220,149,221,149,222,149,223,149,224,149,225,149,226,149,227,149,228,149,229,149,230,149,231,149,236,149,255,149,7,150,19,150,24,150,27,150,30,150,32,150,35,150,36,150,37,150,38,150,39,150,40,150,41,150,43,150,44,150,45,150,47,150,48,150,55,150,56,150,57,150,58,150,62,150,65,150,67,150,74,150,78,150,79,150,81,150,82,150,83,150,86,150,87,150,88,150,89,150,90,150,92,150,93,150,94,150,96,150,99,150,101,150,102,150,107,150,109,150,110,150,111,150,112,150,113,150,115,150,120,150,121,150,122,150,123,150,124,150,125,150,126,150,127,150,128,150,129,150,130,150,131,150,132,150,135,150,137,150,138,150,141,143,142,143,143,143,152,143,154,143,206,142,11,98,23,98,27,98,31,98,34,98,33,98,37,98,36,98,44,98,231,129,239,116,244,116,255,116,15,117,17,117,19,117,52,101,238,101,239,101,240,101,10,102,25,102,114,103,3,102,21,102,0,102,133,112,247,102,29,102,52,102,49,102,54,102,53,102,6,128,95,102,84,102,65,102,79,102,86,102,97,102,87,102,119,102,132,102,140,102,167,102,157,102,190,102,219,102,220,102,230,102,233,102,50,141,51,141,54,141,59,141,61,141,64,141,69,141,70,141,72,141,73,141,71,141,77,141,85,141,89,141,199,137,202,137,203,137,204,137,206,137,207,137,208,137,209,137,110,114,159,114,93,114,102,114,111,114,126,114,127,114,132,114,139,114,141,114,143,114,146,114,8,99,50,99,176,99,140,150,142,150,145,150,146,150,147,150,149,150,150,150,154,150,155,150,157,150,158,150,159,150,160,150,161,150,162,150,163,150,164,150,165,150,166,150,168,150,169,150,170,150,171,150,172,150,173,150,174,150,175,150,177,150,178,150,180,150,181,150,183,150,184,150,186,150,187,150,191,150,194,150,195,150,200,150,202,150,203,150,208,150,209,150,211,150,212,150,214,150,215,150,216,150,217,150,218,150,219,150,220,150,221,150,222,150,223,150,225,150,226,150,227,150,228,150,229,150,230,150,231,150,235,150,236,150,237,150,238,150,240,150,241,150,242,150,244,150,245,150,248,150,250,150,251,150,252,150,253,150,255,150,2,151,3,151,5,151,10,151,11,151,12,151,16,151,17,151,18,151,20,151,21,151,23,151,24,151,25,151,26,151,27,151,29,151,31,151,32,151,63,100,216,100,4,128,234,107,243,107,253,107,245,107,249,107,5,108,7,108,6,108,13,108,21,108,24,108,25,108,26,108,33,108,41,108,36,108,42,108,50,108,53,101,85,101,107,101,77,114,82,114,86,114,48,114,98,134,22,82,159,128,156,128,147,128,188,128,10,103,189,128,177,128,171,128,173,128,180,128,183,128,231,128,232,128,233,128,234,128,219,128,194,128,196,128,217,128,205,128,215,128,16,103,221,128,235,128,241,128,244,128,237,128,13,129,14,129,242,128,252,128,21,103,18,129,90,140,54,129,30,129,44,129,24,129,50,129,72,129,76,129,83,129,116,129,89,129,90,129,113,129,96,129,105,129,124,129,125,129,109,129,103,129,77,88,181,90,136,129,130,129,145,129,213,110,163,129,170,129,204,129,38,103,202,129,187,129,33,151,34,151,35,151,36,151,37,151,38,151,39,151,40,151,41,151,43,151,44,151,46,151,47,151,49,151,51,151,52,151,53,151,54,151,55,151,58,151,59,151,60,151,61,151,63,151,64,151,65,151,66,151,67,151,68,151,69,151,70,151,71,151,72,151,73,151,74,151,75,151,76,151,77,151,78,151,79,151,80,151,81,151,84,151,85,151,87,151,88,151,90,151,92,151,93,151,95,151,99,151,100,151,102,151,103,151,104,151,106,151,107,151,108,151,109,151,110,151,111,151,112,151,113,151,114,151,117,151,119,151,120,151,121,151,122,151,123,151,125,151,126,151,127,151,128,151,129,151,130,151,131,151,132,151,134,151,135,151,136,151,137,151,138,151,140,151,142,151,143,151,144,151,147,151,149,151,150,151,151,151,153,151,154,151,155,151,156,151,157,151,193,129,166,129,36,107,55,107,57,107,67,107,70,107,89,107,209,152,210,152,211,152,213,152,217,152,218,152,179,107,64,95,194,107,243,137,144,101,81,159,147,101,188,101,198,101,196,101,195,101,204,101,206,101,210,101,214,101,128,112,156,112,150,112,157,112,187,112,192,112,183,112,171,112,177,112,232,112,202,112,16,113,19,113,22,113,47,113,49,113,115,113,92,113,104,113,69,113,114,113,74,113,120,113,122,113,152,113,179,113,181,113,168,113,160,113,224,113,212,113,231,113,249,113,29,114,40,114,108,112,24,113,102,113,185,113,62,98,61,98,67,98,72,98,73,98,59,121,64,121,70,121,73,121,91,121,92,121,83,121,90,121,98,121,87,121,96,121,111,121,103,121,122,121,133,121,138,121,154,121,167,121,179,121,209,95,208,95,158,151,159,151,161,151,162,151,164,151,165,151,166,151,167,151,168,151,169,151,170,151,172,151,174,151,176,151,177,151,179,151,181,151,182,151,183,151,184,151,185,151,186,151,187,151,188,151,189,151,190,151,191,151,192,151,193,151,194,151,195,151,196,151,197,151,198,151,199,151,200,151,201,151,202,151,203,151,204,151,205,151,206,151,207,151,208,151,209,151,210,151,211,151,212,151,213,151,214,151,215,151,216,151,217,151,218,151,219,151,220,151,221,151,222,151,223,151,224,151,225,151,226,151,227,151,228,151,229,151,232,151,238,151,239,151,240,151,241,151,242,151,244,151,247,151,248,151,249,151,250,151,251,151,252,151,253,151,254,151,255,151,0,152,1,152,2,152,3,152,4,152,5,152,6,152,7,152,8,152,9,152,10,152,11,152,12,152,13,152,14,152,60,96,93,96,90,96,103,96,65,96,89,96,99,96,171,96,6,97,13,97,93,97,169,97,157,97,203,97,209,97,6,98,128,128,127,128,147,108,246,108,252,109,246,119,248,119,0,120,9,120,23,120,24,120,17,120,171,101,45,120,28,120,29,120,57,120,58,120,59,120,31,120,60,120,37,120,44,120,35,120,41,120,78,120,109,120,86,120,87,120,38,120,80,120,71,120,76,120,106,120,155,120,147,120,154,120,135,120,156,120,161,120,163,120,178,120,185,120,165,120,212,120,217,120,201,120,236,120,242,120,5,121,244,120,19,121,36,121,30,121,52,121,155,159,249,158,251,158,252,158,241,118,4,119,13,119,249,118,7,119,8,119,26,119,34,119,25,119,45,119,38,119,53,119,56,119,80,119,81,119,71,119,67,119,90,119,104,119,15,152,16,152,17,152,18,152,19,152,20,152,21,152,22,152,23,152,24,152,25,152,26,152,27,152,28,152,29,152,30,152,31,152,32,152,33,152,34,152,35,152,36,152,37,152,38,152,39,152,40,152,41,152,42,152,43,152,44,152,45,152,46,152,47,152,48,152,49,152,50,152,51,152,52,152,53,152,54,152,55,152,56,152,57,152,58,152,59,152,60,152,61,152,62,152,63,152,64,152,65,152,66,152,67,152,68,152,69,152,70,152,71,152,72,152,73,152,74,152,75,152,76,152,77,152,78,152,79,152,80,152,81,152,82,152,83,152,84,152,85,152,86,152,87,152,88,152,89,152,90,152,91,152,92,152,93,152,94,152,95,152,96,152,97,152,98,152,99,152,100,152,101,152,102,152,103,152,104,152,105,152,106,152,107,152,108,152,109,152,110,152,98,119,101,119,127,119,141,119,125,119,128,119,140,119,145,119,159,119,160,119,176,119,181,119,189,119,58,117,64,117,78,117,75,117,72,117,91,117,114,117,121,117,131,117,88,127,97,127,95,127,72,138,104,127,116,127,113,127,121,127,129,127,126,127,205,118,229,118,50,136,133,148,134,148,135,148,139,148,138,148,140,148,141,148,143,148,144,148,148,148,151,148,149,148,154,148,155,148,156,148,163,148,164,148,171,148,170,148,173,148,172,148,175,148,176,148,178,148,180,148,182,148,183,148,184,148,185,148,186,148,188,148,189,148,191,148,196,148,200,148,201,148,202,148,203,148,204,148,205,148,206,148,208,148,209,148,210,148,213,148,214,148,215,148,217,148,216,148,219,148,222,148,223,148,224,148,226,148,228,148,229,148,231,148,232,148,234,148,111,152,112,152,113,152,114,152,115,152,116,152,139,152,142,152,146,152,149,152,153,152,163,152,168,152,169,152,170,152,171,152,172,152,173,152,174,152,175,152,176,152,177,152,178,152,179,152,180,152,181,152,182,152,183,152,184,152,185,152,186,152,187,152,188,152,189,152,190,152,191,152,192,152,193,152,194,152,195,152,196,152,197,152,198,152,199,152,200,152,201,152,202,152,203,152,204,152,205,152,207,152,208,152,212,152,214,152,215,152,219,152,220,152,221,152,224,152,225,152,226,152,227,152,228,152,229,152,230,152,233,152,234,152,235,152,236,152,237,152,238,152,239,152,240,152,241,152,242,152,243,152,244,152,245,152,246,152,247,152,248,152,249,152,250,152,251,152,252,152,253,152,254,152,255,152,0,153,1,153,2,153,3,153,4,153,5,153,6,153,7,153,233,148,235,148,238,148,239,148,243,148,244,148,245,148,247,148,249,148,252,148,253,148,255,148,3,149,2,149,6,149,7,149,9,149,10,149,13,149,14,149,15,149,18,149,19,149,20,149,21,149,22,149,24,149,27,149,29,149,30,149,31,149,34,149,42,149,43,149,41,149,44,149,49,149,50,149,52,149,54,149,55,149,56,149,60,149,62,149,63,149,66,149,53,149,68,149,69,149,70,149,73,149,76,149,78,149,79,149,82,149,83,149,84,149,86,149,87,149,88,149,89,149,91,149,94,149,95,149,93,149,97,149,98,149,100,149,101,149,102,149,103,149,104,149,105,149,106,149,107,149,108,149,111,149,113,149,114,149,115,149,58,149,231,119,236,119,201,150,213,121,237,121,227,121,235,121,6,122,71,93,3,122,2,122,30,122,20,122,8,153,9,153,10,153,11,153,12,153,14,153,15,153,17,153,18,153,19,153,20,153,21,153,22,153,23,153,24,153,25,153,26,153,27,153,28,153,29,153,30,153,31,153,32,153,33,153,34,153,35,153,36,153,37,153,38,153,39,153,40,153,41,153,42,153,43,153,44,153,45,153,47,153,48,153,49,153,50,153,51,153,52,153,53,153,54,153,55,153,56,153,57,153,58,153,59,153,60,153,61,153,62,153,63,153,64,153,65,153,66,153,67,153,68,153,69,153,70,153,71,153,72,153,73,153,74,153,75,153,76,153,77,153,78,153,79,153,80,153,81,153,82,153,83,153,86,153,87,153,88,153,89,153,90,153,91,153,92,153,93,153,94,153,95,153,96,153,97,153,98,153,100,153,102,153,115,153,120,153,121,153,123,153,126,153,130,153,131,153,137,153,57,122,55,122,81,122,207,158,165,153,112,122,136,118,142,118,147,118,153,118,164,118,222,116,224,116,44,117,32,158,34,158,40,158,41,158,42,158,43,158,44,158,50,158,49,158,54,158,56,158,55,158,57,158,58,158,62,158,65,158,66,158,68,158,70,158,71,158,72,158,73,158,75,158,76,158,78,158,81,158,85,158,87,158,90,158,91,158,92,158,94,158,99,158,102,158,103,158,104,158,105,158,106,158,107,158,108,158,113,158,109,158,115,158,146,117,148,117,150,117,160,117,157,117,172,117,163,117,179,117,180,117,184,117,196,117,177,117,176,117,195,117,194,117,214,117,205,117,227,117,232,117,230,117,228,117,235,117,231,117,3,118,241,117,252,117,255,117,16,118,0,118,5,118,12,118,23,118,10,118,37,118,24,118,21,118,25,118,140,153,142,153,154,153,155,153,156,153,157,153,158,153,159,153,160,153,161,153,162,153,163,153,164,153,166,153,167,153,169,153,170,153,171,153,172,153,173,153,174,153,175,153,176,153,177,153,178,153,179,153,180,153,181,153,182,153,183,153,184,153,185,153,186,153,187,153,188,153,189,153,190,153,191,153,192,153,193,153,194,153,195,153,196,153,197,153,198,153,199,153,200,153,201,153,202,153,203,153,204,153,205,153,206,153,207,153,208,153,209,153,210,153,211,153,212,153,213,153,214,153,215,153,216,153,217,153,218,153,219,153,220,153,221,153,222,153,223,153,224,153,225,153,226,153,227,153,228,153,229,153,230,153,231,153,232,153,233,153,234,153,235,153,236,153,237,153,238,153,239,153,240,153,241,153,242,153,243,153,244,153,245,153,246,153,247,153,248,153,249,153,27,118,60,118,34,118,32,118,64,118,45,118,48,118,63,118,53,118,67,118,62,118,51,118,77,118,94,118,84,118,92,118,86,118,107,118,111,118,202,127,230,122,120,122,121,122,128,122,134,122,136,122,149,122,166,122,160,122,172,122,168,122,173,122,179,122,100,136,105,136,114,136,125,136,127,136,130,136,162,136,198,136,183,136,188,136,201,136,226,136,206,136,227,136,229,136,241,136,26,137,252,136,232,136,254,136,240,136,33,137,25,137,19,137,27,137,10,137,52,137,43,137,54,137,65,137,102,137,123,137,139,117,229,128,178,118,180,118,220,119,18,128,20,128,22,128,28,128,32,128,34,128,37,128,38,128,39,128,41,128,40,128,49,128,11,128,53,128,67,128,70,128,77,128,82,128,105,128,113,128,131,137,120,152,128,152,131,152,250,153,251,153,252,153,253,153,254,153,255,153,0,154,1,154,2,154,3,154,4,154,5,154,6,154,7,154,8,154,9,154,10,154,11,154,12,154,13,154,14,154,15,154,16,154,17,154,18,154,19,154,20,154,21,154,22,154,23,154,24,154,25,154,26,154,27,154,28,154,29,154,30,154,31,154,32,154,33,154,34,154,35,154,36,154,37,154,38,154,39,154,40,154,41,154,42,154,43,154,44,154,45,154,46,154,47,154,48,154,49,154,50,154,51,154,52,154,53,154,54,154,55,154,56,154,57,154,58,154,59,154,60,154,61,154,62,154,63,154,64,154,65,154,66,154,67,154,68,154,69,154,70,154,71,154,72,154,73,154,74,154,75,154,76,154,77,154,78,154,79,154,80,154,81,154,82,154,83,154,84,154,85,154,86,154,87,154,88,154,89,154,137,152,140,152,141,152,143,152,148,152,154,152,155,152,158,152,159,152,161,152,162,152,165,152,166,152,77,134,84,134,108,134,110,134,127,134,122,134,124,134,123,134,168,134,141,134,139,134,172,134,157,134,167,134,163,134,170,134,147,134,169,134,182,134,196,134,181,134,206,134,176,134,186,134,177,134,175,134,201,134,207,134,180,134,233,134,241,134,242,134,237,134,243,134,208,134,19,135,222,134,244,134,223,134,216,134,209,134,3,135,7,135,248,134,8,135,10,135,13,135,9,135,35,135,59,135,30,135,37,135,46,135,26,135,62,135,72,135,52,135,49,135,41,135,55,135,63,135,130,135,34,135,125,135,126,135,123,135,96,135,112,135,76,135,110,135,139,135,83,135,99,135,124,135,100,135,89,135,101,135,147,135,175,135,168,135,210,135,90,154,91,154,92,154,93,154,94,154,95,154,96,154,97,154,98,154,99,154,100,154,101,154,102,154,103,154,104,154,105,154,106,154,107,154,114,154,131,154,137,154,141,154,142,154,148,154,149,154,153,154,166,154,169,154,170,154,171,154,172,154,173,154,174,154,175,154,178,154,179,154,180,154,181,154,185,154,187,154,189,154,190,154,191,154,195,154,196,154,198,154,199,154,200,154,201,154,202,154,205,154,206,154,207,154,208,154,210,154,212,154,213,154,214,154,215,154,217,154,218,154,219,154,220,154,221,154,222,154,224,154,226,154,227,154,228,154,229,154,231,154,232,154,233,154,234,154,236,154,238,154,240,154,241,154,242,154,243,154,244,154,245,154,246,154,247,154,248,154,250,154,252,154,253,154,254,154,255,154,0,155,1,155,2,155,4,155,5,155,6,155,198,135,136,135,133,135,173,135,151,135,131,135,171,135,229,135,172,135,181,135,179,135,203,135,211,135,189,135,209,135,192,135,202,135,219,135,234,135,224,135,238,135,22,136,19,136,254,135,10,136,27,136,33,136,57,136,60,136,54,127,66,127,68,127,69,127,16,130,250,122,253,122,8,123,3,123,4,123,21,123,10,123,43,123,15,123,71,123,56,123,42,123,25,123,46,123,49,123,32,123,37,123,36,123,51,123,62,123,30,123,88,123,90,123,69,123,117,123,76,123,93,123,96,123,110,123,123,123,98,123,114,123,113,123,144,123,166,123,167,123,184,123,172,123,157,123,168,123,133,123,170,123,156,123,162,123,171,123,180,123,209,123,193,123,204,123,221,123,218,123,229,123,230,123,234,123,12,124,254,123,252,123,15,124,22,124,11,124,7,155,9,155,10,155,11,155,12,155,13,155,14,155,16,155,17,155,18,155,20,155,21,155,22,155,23,155,24,155,25,155,26,155,27,155,28,155,29,155,30,155,32,155,33,155,34,155,36,155,37,155,38,155,39,155,40,155,41,155,42,155,43,155,44,155,45,155,46,155,48,155,49,155,51,155,52,155,53,155,54,155,55,155,56,155,57,155,58,155,61,155,62,155,63,155,64,155,70,155,74,155,75,155,76,155,78,155,80,155,82,155,83,155,85,155,86,155,87,155,88,155,89,155,90,155,91,155,92,155,93,155,94,155,95,155,96,155,97,155,98,155,99,155,100,155,101,155,102,155,103,155,104,155,105,155,106,155,107,155,108,155,109,155,110,155,111,155,112,155,113,155,114,155,115,155,116,155,117,155,118,155,119,155,120,155,121,155,122,155,123,155,31,124,42,124,38,124,56,124,65,124,64,124,254,129,1,130,2,130,4,130,236,129,68,136,33,130,34,130,35,130,45,130,47,130,40,130,43,130,56,130,59,130,51,130,52,130,62,130,68,130,73,130,75,130,79,130,90,130,95,130,104,130,126,136,133,136,136,136,216,136,223,136,94,137,157,127,159,127,167,127,175,127,176,127,178,127,124,124,73,101,145,124,157,124,156,124,158,124,162,124,178,124,188,124,189,124,193,124,199,124,204,124,205,124,200,124,197,124,215,124,232,124,110,130,168,102,191,127,206,127,213,127,229,127,225,127,230,127,233,127,238,127,243,127,248,124,119,125,166,125,174,125,71,126,155,126,184,158,180,158,115,141,132,141,148,141,145,141,177,141,103,141,109,141,71,140,73,140,74,145,80,145,78,145,79,145,100,145,124,155,125,155,126,155,127,155,128,155,129,155,130,155,131,155,132,155,133,155,134,155,135,155,136,155,137,155,138,155,139,155,140,155,141,155,142,155,143,155,144,155,145,155,146,155,147,155,148,155,149,155,150,155,151,155,152,155,153,155,154,155,155,155,156,155,157,155,158,155,159,155,160,155,161,155,162,155,163,155,164,155,165,155,166,155,167,155,168,155,169,155,170,155,171,155,172,155,173,155,174,155,175,155,176,155,177,155,178,155,179,155,180,155,181,155,182,155,183,155,184,155,185,155,186,155,187,155,188,155,189,155,190,155,191,155,192,155,193,155,194,155,195,155,196,155,197,155,198,155,199,155,200,155,201,155,202,155,203,155,204,155,205,155,206,155,207,155,208,155,209,155,210,155,211,155,212,155,213,155,214,155,215,155,216,155,217,155,218,155,219,155,98,145,97,145,112,145,105,145,111,145,125,145,126,145,114,145,116,145,121,145,140,145,133,145,144,145,141,145,145,145,162,145,163,145,170,145,173,145,174,145,175,145,181,145,180,145,186,145,85,140,126,158,184,141,235,141,5,142,89,142,105,142,181,141,191,141,188,141,186,141,196,141,214,141,215,141,218,141,222,141,206,141,207,141,219,141,198,141,236,141,247,141,248,141,227,141,249,141,251,141,228,141,9,142,253,141,20,142,29,142,31,142,44,142,46,142,35,142,47,142,58,142,64,142,57,142,53,142,61,142,49,142,73,142,65,142,66,142,81,142,82,142,74,142,112,142,118,142,124,142,111,142,116,142,133,142,143,142,148,142,144,142,156,142,158,142,120,140,130,140,138,140,133,140,152,140,148,140,155,101,214,137,222,137,218,137,220,137,220,155,221,155,222,155,223,155,224,155,225,155,226,155,227,155,228,155,229,155,230,155,231,155,232,155,233,155,234,155,235,155,236,155,237,155,238,155,239,155,240,155,241,155,242,155,243,155,244,155,245,155,246,155,247,155,248,155,249,155,250,155,251,155,252,155,253,155,254,155,255,155,0,156,1,156,2,156,3,156,4,156,5,156,6,156,7,156,8,156,9,156,10,156,11,156,12,156,13,156,14,156,15,156,16,156,17,156,18,156,19,156,20,156,21,156,22,156,23,156,24,156,25,156,26,156,27,156,28,156,29,156,30,156,31,156,32,156,33,156,34,156,35,156,36,156,37,156,38,156,39,156,40,156,41,156,42,156,43,156,44,156,45,156,46,156,47,156,48,156,49,156,50,156,51,156,52,156,53,156,54,156,55,156,56,156,57,156,58,156,59,156,229,137,235,137,239,137,62,138,38,139,83,151,233,150,243,150,239,150,6,151,1,151,8,151,15,151,14,151,42,151,45,151,48,151,62,151,128,159,131,159,133,159,134,159,135,159,136,159,137,159,138,159,140,159,254,158,11,159,13,159,185,150,188,150,189,150,206,150,210,150,191,119,224,150,142,146,174,146,200,146,62,147,106,147,202,147,143,147,62,148,107,148,127,156,130,156,133,156,134,156,135,156,136,156,35,122,139,156,142,156,144,156,145,156,146,156,148,156,149,156,154,156,155,156,158,156,159,156,160,156,161,156,162,156,163,156,165,156,166,156,167,156,168,156,169,156,171,156,173,156,174,156,176,156,177,156,178,156,179,156,180,156,181,156,182,156,183,156,186,156,187,156,188,156,189,156,196,156,197,156,198,156,199,156,202,156,203,156,60,156,61,156,62,156,63,156,64,156,65,156,66,156,67,156,68,156,69,156,70,156,71,156,72,156,73,156,74,156,75,156,76,156,77,156,78,156,79,156,80,156,81,156,82,156,83,156,84,156,85,156,86,156,87,156,88,156,89,156,90,156,91,156,92,156,93,156,94,156,95,156,96,156,97,156,98,156,99,156,100,156,101,156,102,156,103,156,104,156,105,156,106,156,107,156,108,156,109,156,110,156,111,156,112,156,113,156,114,156,115,156,116,156,117,156,118,156,119,156,120,156,121,156,122,156,123,156,125,156,126,156,128,156,131,156,132,156,137,156,138,156,140,156,143,156,147,156,150,156,151,156,152,156,153,156,157,156,170,156,172,156,175,156,185,156,190,156,191,156,192,156,193,156,194,156,200,156,201,156,209,156,210,156,218,156,219,156,224,156,225,156,204,156,205,156,206,156,207,156,208,156,211,156,212,156,213,156,215,156,216,156,217,156,220,156,221,156,223,156,226,156,124,151,133,151,145,151,146,151,148,151,175,151,171,151,163,151,178,151,180,151,177,154,176,154,183,154,88,158,182,154,186,154,188,154,193,154,192,154,197,154,194,154,203,154,204,154,209,154,69,155,67,155,71,155,73,155,72,155,77,155,81,155,232,152,13,153,46,153,85,153,84,153,223,154,225,154,230,154,239,154,235,154,251,154,237,154,249,154,8,155,15,155,19,155,31,155,35,155,189,158,190,158,59,126,130,158,135,158,136,158,139,158,146,158,214,147,157,158,159,158,219,158,220,158,221,158,224,158,223,158,226,158,233,158,231,158,229,158,234,158,239,158,34,159,44,159,47,159,57,159,55,159,61,159,62,159,68,159,227,156,228,156,229,156,230,156,231,156,232,156,233,156,234,156,235,156,236,156,237,156,238,156,239,156,240,156,241,156,242,156,243,156,244,156,245,156,246,156,247,156,248,156,249,156,250,156,251,156,252,156,253,156,254,156,255,156,0,157,1,157,2,157,3,157,4,157,5,157,6,157,7,157,8,157,9,157,10,157,11,157,12,157,13,157,14,157,15,157,16,157,17,157,18,157,19,157,20,157,21,157,22,157,23,157,24,157,25,157,26,157,27,157,28,157,29,157,30,157,31,157,32,157,33,157,34,157,35,157,36,157,37,157,38,157,39,157,40,157,41,157,42,157,43,157,44,157,45,157,46,157,47,157,48,157,49,157,50,157,51,157,52,157,53,157,54,157,55,157,56,157,57,157,58,157,59,157,60,157,61,157,62,157,63,157,64,157,65,157,66,157,52,226,53,226,54,226,55,226,56,226,57,226,58,226,59,226,60,226,61,226,62,226,63,226,64,226,65,226,66,226,67,226,68,226,69,226,70,226,71,226,72,226,73,226,74,226,75,226,76,226,77,226,78,226,79,226,80,226,81,226,82,226,83,226,84,226,85,226,86,226,87,226,88,226,89,226,90,226,91,226,92,226,93,226,94,226,95,226,96,226,97,226,98,226,99,226,100,226,101,226,102,226,103,226,104,226,105,226,106,226,107,226,108,226,109,226,110,226,111,226,112,226,113,226,114,226,115,226,116,226,117,226,118,226,119,226,120,226,121,226,122,226,123,226,124,226,125,226,126,226,127,226,128,226,129,226,130,226,131,226,132,226,133,226,134,226,135,226,136,226,137,226,138,226,139,226,140,226,141,226,142,226,143,226,144,226,145,226,67,157,68,157,69,157,70,157,71,157,72,157,73,157,74,157,75,157,76,157,77,157,78,157,79,157,80,157,81,157,82,157,83,157,84,157,85,157,86,157,87,157,88,157,89,157,90,157,91,157,92,157,93,157,94,157,95,157,96,157,97,157,98,157,99,157,100,157,101,157,102,157,103,157,104,157,105,157,106,157,107,157,108,157,109,157,110,157,111,157,112,157,113,157,114,157,115,157,116,157,117,157,118,157,119,157,120,157,121,157,122,157,123,157,124,157,125,157,126,157,127,157,128,157,129,157,130,157,131,157,132,157,133,157,134,157,135,157,136,157,137,157,138,157,139,157,140,157,141,157,142,157,143,157,144,157,145,157,146,157,147,157,148,157,149,157,150,157,151,157,152,157,153,157,154,157,155,157,156,157,157,157,158,157,159,157,160,157,161,157,162,157,146,226,147,226,148,226,149,226,150,226,151,226,152,226,153,226,154,226,155,226,156,226,157,226,158,226,159,226,160,226,161,226,162,226,163,226,164,226,165,226,166,226,167,226,168,226,169,226,170,226,171,226,172,226,173,226,174,226,175,226,176,226,177,226,178,226,179,226,180,226,181,226,182,226,183,226,184,226,185,226,186,226,187,226,188,226,189,226,190,226,191,226,192,226,193,226,194,226,195,226,196,226,197,226,198,226,199,226,200,226,201,226,202,226,203,226,204,226,205,226,206,226,207,226,208,226,209,226,210,226,211,226,212,226,213,226,214,226,215,226,216,226,217,226,218,226,219,226,220,226,221,226,222,226,223,226,224,226,225,226,226,226,227,226,228,226,229,226,230,226,231,226,232,226,233,226,234,226,235,226,236,226,237,226,238,226,239,226,163,157,164,157,165,157,166,157,167,157,168,157,169,157,170,157,171,157,172,157,173,157,174,157,175,157,176,157,177,157,178,157,179,157,180,157,181,157,182,157,183,157,184,157,185,157,186,157,187,157,188,157,189,157,190,157,191,157,192,157,193,157,194,157,195,157,196,157,197,157,198,157,199,157,200,157,201,157,202,157,203,157,204,157,205,157,206,157,207,157,208,157,209,157,210,157,211,157,212,157,213,157,214,157,215,157,216,157,217,157,218,157,219,157,220,157,221,157,222,157,223,157,224,157,225,157,226,157,227,157,228,157,229,157,230,157,231,157,232,157,233,157,234,157,235,157,236,157,237,157,238,157,239,157,240,157,241,157,242,157,243,157,244,157,245,157,246,157,247,157,248,157,249,157,250,157,251,157,252,157,253,157,254,157,255,157,0,158,1,158,2,158,240,226,241,226,242,226,243,226,244,226,245,226,246,226,247,226,248,226,249,226,250,226,251,226,252,226,253,226,254,226,255,226,0,227,1,227,2,227,3,227,4,227,5,227,6,227,7,227,8,227,9,227,10,227,11,227,12,227,13,227,14,227,15,227,16,227,17,227,18,227,19,227,20,227,21,227,22,227,23,227,24,227,25,227,26,227,27,227,28,227,29,227,30,227,31,227,32,227,33,227,34,227,35,227,36,227,37,227,38,227,39,227,40,227,41,227,42,227,43,227,44,227,45,227,46,227,47,227,48,227,49,227,50,227,51,227,52,227,53,227,54,227,55,227,56,227,57,227,58,227,59,227,60,227,61,227,62,227,63,227,64,227,65,227,66,227,67,227,68,227,69,227,70,227,71,227,72,227,73,227,74,227,75,227,76,227,77,227,3,158,4,158,5,158,6,158,7,158,8,158,9,158,10,158,11,158,12,158,13,158,14,158,15,158,16,158,17,158,18,158,19,158,20,158,21,158,22,158,23,158,24,158,25,158,26,158,27,158,28,158,29,158,30,158,36,158,39,158,46,158,48,158,52,158,59,158,60,158,64,158,77,158,80,158,82,158,83,158,84,158,86,158,89,158,93,158,95,158,96,158,97,158,98,158,101,158,110,158,111,158,114,158,116,158,117,158,118,158,119,158,120,158,121,158,122,158,123,158,124,158,125,158,128,158,129,158,131,158,132,158,133,158,134,158,137,158,138,158,140,158,141,158,142,158,143,158,144,158,145,158,148,158,149,158,150,158,151,158,152,158,153,158,154,158,155,158,156,158,158,158,160,158,161,158,162,158,163,158,164,158,165,158,167,158,168,158,169,158,170,158,78,227,79,227,80,227,81,227,82,227,83,227,84,227,85,227,86,227,87,227,88,227,89,227,90,227,91,227,92,227,93,227,94,227,95,227,96,227,97,227,98,227,99,227,100,227,101,227,102,227,103,227,104,227,105,227,106,227,107,227,108,227,109,227,110,227,111,227,112,227,113,227,114,227,115,227,116,227,117,227,118,227,119,227,120,227,121,227,122,227,123,227,124,227,125,227,126,227,127,227,128,227,129,227,130,227,131,227,132,227,133,227,134,227,135,227,136,227,137,227,138,227,139,227,140,227,141,227,142,227,143,227,144,227,145,227,146,227,147,227,148,227,149,227,150,227,151,227,152,227,153,227,154,227,155,227,156,227,157,227,158,227,159,227,160,227,161,227,162,227,163,227,164,227,165,227,166,227,167,227,168,227,169,227,170,227,171,227,171,158,172,158,173,158,174,158,175,158,176,158,177,158,178,158,179,158,181,158,182,158,183,158,185,158,186,158,188,158,191,158,192,158,193,158,194,158,195,158,197,158,198,158,199,158,200,158,202,158,203,158,204,158,208,158,210,158,211,158,213,158,214,158,215,158,217,158,218,158,222,158,225,158,227,158,228,158,230,158,232,158,235,158,236,158,237,158,238,158,240,158,241,158,242,158,243,158,244,158,245,158,246,158,247,158,248,158,250,158,253,158,255,158,0,159,1,159,2,159,3,159,4,159,5,159,6,159,7,159,8,159,9,159,10,159,12,159,15,159,17,159,18,159,20,159,21,159,22,159,24,159,26,159,27,159,28,159,29,159,30,159,31,159,33,159,35,159,36,159,37,159,38,159,39,159,40,159,41,159,42,159,43,159,45,159,46,159,48,159,49,159,172,227,173,227,174,227,175,227,176,227,177,227,178,227,179,227,180,227,181,227,182,227,183,227,184,227,185,227,186,227,187,227,188,227,189,227,190,227,191,227,192,227,193,227,194,227,195,227,196,227,197,227,198,227,199,227,200,227,201,227,202,227,203,227,204,227,205,227,206,227,207,227,208,227,209,227,210,227,211,227,212,227,213,227,214,227,215,227,216,227,217,227,218,227,219,227,220,227,221,227,222,227,223,227,224,227,225,227,226,227,227,227,228,227,229,227,230,227,231,227,232,227,233,227,234,227,235,227,236,227,237,227,238,227,239,227,240,227,241,227,242,227,243,227,244,227,245,227,246,227,247,227,248,227,249,227,250,227,251,227,252,227,253,227,254,227,255,227,0,228,1,228,2,228,3,228,4,228,5,228,6,228,7,228,8,228,9,228,50,159,51,159,52,159,53,159,54,159,56,159,58,159,60,159,63,159,64,159,65,159,66,159,67,159,69,159,70,159,71,159,72,159,73,159,74,159,75,159,76,159,77,159,78,159,79,159,82,159,83,159,84,159,85,159,86,159,87,159,88,159,89,159,90,159,91,159,92,159,93,159,94,159,95,159,96,159,97,159,98,159,99,159,100,159,101,159,102,159,103,159,104,159,105,159,106,159,107,159,108,159,109,159,110,159,111,159,112,159,113,159,114,159,115,159,116,159,117,159,118,159,119,159,120,159,121,159,122,159,123,159,124,159,125,159,126,159,129,159,130,159,141,159,142,159,143,159,144,159,145,159,146,159,147,159,148,159,149,159,150,159,151,159,152,159,156,159,157,159,158,159,161,159,162,159,163,159,164,159,165,159,44,249,121,249,149,249,231,249,241,249,10,228,11,228,12,228,13,228,14,228,15,228,16,228,17,228,18,228,19,228,20,228,21,228,22,228,23,228,24,228,25,228,26,228,27,228,28,228,29,228,30,228,31,228,32,228,33,228,34,228,35,228,36,228,37,228,38,228,39,228,40,228,41,228,42,228,43,228,44,228,45,228,46,228,47,228,48,228,49,228,50,228,51,228,52,228,53,228,54,228,55,228,56,228,57,228,58,228,59,228,60,228,61,228,62,228,63,228,64,228,65,228,66,228,67,228,68,228,69,228,70,228,71,228,72,228,73,228,74,228,75,228,76,228,77,228,78,228,79,228,80,228,81,228,82,228,83,228,84,228,85,228,86,228,87,228,88,228,89,228,90,228,91,228,92,228,93,228,94,228,95,228,96,228,97,228,98,228,99,228,100,228,101,228,102,228,103,228,12,250,13,250,14,250,15,250,17,250,19,250,20,250,24,250,31,250,32,250,33,250,35,250,36,250,39,250,40,250,41,250,129,46,22,232,23,232,24,232,132,46,115,52,71,52,136,46,139,46,30,232,158,53,26,54,14,54,140,46,151,46,110,57,24,57,38,232,207,57,223,57,115,58,208,57,43,232,44,232,78,59,110,60,224,60,167,46,49,232,50,232,170,46,86,64,95,65,174,46,55,67,179,46,182,46,183,46,59,232,177,67,172,67,187,46,221,67,214,68,97,70,76,70,67,232,35,71,41,71,124,71,141,71,202,46,71,73,122,73,125,73,130,73,131,73,133,73,134,73,159,73,155,73,183,73,182,73,84,232,85,232,163,76,159,76,160,76,161,76,119,76,162,76,19,77,20,77,21,77,22,77,23,77,24,77,25,77,174,77,100,232,104,228,105,228,106,228,107,228,108,228,109,228,110,228,111,228,112,228,113,228,114,228,115,228,116,228,117,228,118,228,119,228,120,228,121,228,122,228,123,228,124,228,125,228,126,228,127,228,128,228,129,228,130,228,131,228,132,228,133,228,134,228,135,228,136,228,137,228,138,228,139,228,140,228,141,228,142,228,143,228,144,228,145,228,146,228,147,228,148,228,149,228,150,228,151,228,152,228,153,228,154,228,155,228,156,228,157,228,158,228,159,228,160,228,161,228,162,228,163,228,164,228,165,228,166,228,167,228,168,228,169,228,170,228,171,228,172,228,173,228,174,228,175,228,176,228,177,228,178,228,179,228,180,228,181,228,182,228,183,228,184,228,185,228,186,228,187,228,188,228,189,228,190,228,191,228,192,228,193,228,194,228,195,228,196,228,197,228,240,67,50,76,3,70,166,69,120,69,103,114,119,77,179,69,177,124,226,76,197,124,149,59,54,71,68,71,71,76,64,76,191,66,23,54,82,115,139,110,210,112,87,76,81,163,79,71,218,69,133,76,108,124,7,77,164,74,161,70,35,107,37,114,84,90,99,26,6,62,97,63,77,102,251,86,0,0,149,125,29,89,185,139,244,61,52,151,239,123,219,91,94,29,164,90,37,54,176,158,209,90,183,91,252,92,110,103,147,133,69,153,97,116,157,116,117,56,83,29,158,54,33,96,236,62,222,88,245,58,252,122,151,159,97,65,13,137,234,49,138,10,94,50,10,67,132,132,150,159,47,148,48,73,19,134,150,88,74,151,24,146,208,121,50,122,96,102,41,106,157,136,76,116,197,123,130,103,44,122,79,82,70,144,230,52,196,115,185,93,198,116,199,159,179,87,47,73,76,84,49,65,142,54,24,88,114,122,101,123,143,139,174,70,136,110,129,65,153,93,174,123,188,36,200,159,193,36,201,36,204,36,201,159,4,133,187,53,180,64,202,159,225,68,255,173,193,98,110,112,203,159,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,49,193,49,194,49,195,49,196,49,12,1,197,49,209,0,205,0,198,49,199,49,203,0,232,31,200,49,202,0,201,49,202,49,203,49,204,49,14,1,205,49,206,49,0,1,193,0,205,1,192,0,18,1,201,0,26,1,200,0,76,1,211,0,209,1,210,0,0,220,190,30,4,220,192,30,202,0,1,1,225,0,206,1,224,0,81,2,19,1,233,0,27,1,232,0,43,1,237,0,208,1,236,0,77,1,243,0,210,1,242,0,107,1,250,0,212,1,249,0,214,1,216,1,218,1,220,1,252,0,8,220,191,30,12,220,193,30,234,0,97,2,218,35,219,35], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+214076);
/* memory initializer */ allocate([169,163,69,17,0,0,10,101,0,0,0,0,61,78,221,110,78,157,223,145,0,0,0,0,53,119,145,100,26,79,40,79,168,79,86,81,116,81,156,81,228,81,161,82,168,82,59,83,78,83,209,83,216,83,226,86,240,88,4,89,7,89,50,89,52,89,102,91,158,91,159,91,154,92,134,94,59,96,137,101,254,103,4,104,101,104,78,109,188,112,53,117,164,126,172,126,186,126,199,126,207,126,223,126,6,127,55,127,122,130,207,130,111,131,198,137,190,139,226,139,102,143,103,143,110,143,17,116,252,124,205,125,70,105,201,122,39,82,0,0,0,0,0,0,0,0,140,145,184,120,94,145,188,128,0,0,11,141,246,128,231,9,0,0,0,0,159,128,199,158,205,76,201,157,12,158,62,76,246,157,14,112,10,158,51,161,193,53,0,0,154,110,62,130,25,117,0,0,17,73,108,154,143,154,153,159,135,121,108,132,202,29,208,5,230,42,36,78,129,78,128,78,135,78,191,78,235,78,55,79,76,52,189,79,72,62,3,80,136,80,125,52,147,52,165,52,134,81,5,89,219,81,252,81,5,82,137,78,121,82,144,82,39,83,199,53,169,83,81,53,176,83,83,53,194,83,35,84,109,53,114,53,129,54,147,84,163,84,180,84,185,84,208,84,239,84,24,85,35,85,40,85,152,53,63,85,165,53,191,53,215,85,197,53,132,125,37,85,0,0,66,12,21,13,43,81,144,85,198,44,236,57,65,3,70,142,184,77,229,148,83,64,190,128,122,119,56,44,52,58,213,71,93,129,242,105,234,77,221,100,124,13,180,15,213,12,244,16,141,100,126,142,150,14,11,12,100,15,169,44,86,130,211,68,0,0,70,13,77,154,233,128,244,71,167,78,194,44,178,154,103,58,244,149,237,63,6,53,199,82,212,151,200,120,68,45,110,157,21,152,0,0,217,67,165,96,180,100,227,84,76,45,202,43,119,16,251,57,111,16,218,102,22,103,160,121,234,100,82,80,67,12,104,142,161,33,76,139,49,7,0,0,11,72,169,1,250,63,115,88,141,45,0,0,200,69,252,4,151,96,76,15,150,13,121,85,187,64,186,67,0,0,180,74,102,42,157,16,170,129,245,152,156,13,121,99,254,57,117,39,192,141,161,86,124,100,67,62,0,0,1,166,9,14,207,42,201,44,0,0,200,16,194,57,146,57,6,58,155,130,120,53,73,94,199,32,82,86,49,15,178,44,32,151,188,52,61,108,59,78,0,0,0,0,116,117,139,46,8,34,91,166,205,140,122,14,52,12,28,104,147,127,207,16,3,40,57,41,251,53,227,81,140,14,141,15,170,14,147,63,48,15,71,13,79,17,76,14,0,0,171,14,169,11,72,13,192,16,61,17,249,63,150,38,50,100,173,15,244,51,57,118,206,43,126,13,127,13,81,44,85,44,24,58,152,14,199,16,46,15,50,166,80,107,210,140,153,141,202,140,170,149,204,84,196,130,185,85,0,0,195,158,38,156,182,154,94,119,238,45,64,113,109,129,236,128,28,92,114,101,52,129,151,55,95,83,189,128,182,145,250,14,15,14,119,14,251,14,221,53,235,77,9,54,214,12,175,86,181,39,201,16,16,14,120,14,120,16,72,17,7,130,85,20,121,14,80,78,164,45,84,90,29,16,30,16,245,16,246,16,156,87,17,14,148,118,205,130,181,15,123,14,126,81,3,55,182,15,128,17,216,82,189,162,218,73,58,24,119,65,124,130,153,88,104,82,26,54,61,87,178,123,104,91,0,72,44,75,39,159,231,73,31,156,141,155,116,91,61,49,251,85,242,53,137,86,40,78,2,89,193,27,120,248,81,151,134,0,91,78,187,78,62,53,35,92,81,95,196,95,250,56,76,98,53,101,122,107,53,108,58,108,108,112,43,114,44,78,173,114,233,72,82,127,59,121,249,124,83,127,106,98,193,52,0,0,75,99,2,128,128,128,18,102,81,105,93,83,100,136,193,137,178,120,160,139,29,141,133,148,120,149,127,149,232,149,15,142,230,151,117,152,206,152,222,152,99,153,16,152,124,156,31,158,196,158,111,107,7,249,55,78,135,0,29,150,55,98,162,148,0,0,59,80,254,109,115,156,166,159,201,61,143,136,78,65,119,112,245,92,32,75,205,81,89,53,48,93,34,97,50,138,167,143,246,145,145,113,25,103,186,115,129,50,7,161,139,60,128,25,16,75,228,120,2,116,174,81,15,135,9,64,99,106,186,162,35,66,15,134,111,10,42,122,71,153,234,138,85,151,77,112,36,83,126,32,244,147,217,118,227,137,167,159,221,119,163,78,240,79,188,80,47,78,23,79,168,159,52,84,139,125,146,88,208,88,182,29,146,94,153,94,194,95,18,39,139,101,249,51,25,105,67,106,99,60,255,108,0,0,0,114,5,69,140,115,219,62,19,74,21,91,185,116,131,139,164,92,149,86,147,122,236,123,195,124,108,126,248,130,151,133,169,159,144,136,170,159,185,142,171,159,207,143,95,133,224,153,33,146,172,159,185,141,63,20,113,64,162,66,26,90,0,0,0,0,0,0,104,152,107,103,118,66,61,87,0,0,214,133,123,73,191,130,13,113,129,76,116,109,123,93,21,107,190,111,173,159,174,159,150,91,175,159,231,102,91,126,87,110,202,121,136,61,195,68,86,50,150,39,154,67,54,69,0,0,213,92,26,59,249,138,120,92,18,61,81,53,120,93,178,159,87,113,88,69,236,64,35,30,119,76,120,57,74,52,164,1,65,108,204,138,180,79,57,2,191,89,108,129,86,152,250,152,59,95,159,11,0,0,193,33,109,137,2,65,187,70,121,144,7,63,179,159,181,161,248,64,214,55,247,70,70,108,124,65,178,134,255,115,109,69,212,56,154,84,97,69,27,69,137,77,123,76,118,77,234,69,200,63,15,75,97,54,222,68,189,68,237,65,62,93,72,93,86,93,252,61,15,56,164,93,185,93,32,56,56,56,66,94,189,94,37,95,131,95,8,57,20,57,63,57,77,57,215,96,61,97,229,92,137,57,183,97,185,97,207,97,184,57,44,98,144,98,229,98,24,99,248,57,177,86,3,58,226,99,251,99,7,100,90,100,75,58,192,100,21,93,33,86,159,159,151,58,134,101,189,58,255,101,83,102,242,58,146,102,34,59,22,103,66,59,164,103,0,104,88,59,74,104,132,104,114,59,113,59,123,59,9,105,67,105,92,114,100,105,159,105,133,105,188,59,214,105,221,59,101,106,116,106,113,106,130,106,236,59,153,106,242,59,171,106,181,106,212,106,246,106,129,107,193,107,234,107,117,108,170,108,203,60,2,109,6,109,38,109,129,109,239,60,164,109,177,109,21,110,24,110,41,110,134,110,192,137,187,110,226,110,218,110,127,159,232,110,233,110,36,111,52,111,70,61,65,63,129,111,190,111,106,61,117,61,183,113,153,92,138,61,44,112,145,61,80,112,84,112,111,112,127,112,137,112,37,3,193,67,241,53,216,14,215,62,190,87,211,110,62,113,224,87,78,54,162,105,233,139,116,91,73,122,225,88,217,148,101,122,125,122,172,89,187,122,176,122,194,122,195,122,209,113,141,100,202,65,218,122,221,122,234,122,239,65,178,84,1,92,11,123,85,123,41,123,14,83,254,92,162,123,111,123,156,131,180,91,127,108,208,123,33,132,146,123,0,0,32,93,173,61,101,92,146,132,250,123,0,0,53,124,193,92,68,124,131,124,130,72,166,124,125,102,120,69,201,124,199,124,230,124,116,124,243,124,245,124,0,0,103,126,29,69,68,110,93,125,214,110,141,116,137,125,171,125,53,113,179,125,0,0,87,64,41,96,228,125,19,61,245,125,249,23,229,125,109,131,0,0,33,97,90,97,110,126,146,126,43,67,108,148,39,126,64,127,65,127,71,127,54,121,208,98,225,153,151,127,81,99,163,127,97,22,104,0,92,69,102,55,3,69,58,131,250,127,137,100,0,0,8,128,29,128,0,0,47,128,135,160,195,108,59,128,60,128,97,128,20,39,137,73,38,102,227,61,232,102,37,103,167,128,72,138,7,129,26,129,176,88,246,38,127,108,152,100,184,79,231,100,138,20,24,130,94,24,83,106,101,74,149,74,122,68,41,130,13,11,82,106,126,61,249,79,253,20,226,132,98,131,10,107,167,73,48,53,115,23,248,61,170,130,27,105,148,249,219,65,75,133,208,130,26,131,22,14,180,23,193,54,125,49,90,53,123,130,226,130,24,131,139,62,163,109,5,107,151,107,206,53,191,61,29,131,236,85,133,131,11,69,165,109,172,131,0,0,211,131,126,52,212,110,87,106,90,133,150,52,66,110,239,46,88,132,228,91,113,132,211,61,228,68,167,106,74,132,181,60,88,121,0,0,150,107,119,110,67,110,222,132,0,0,145,131,160,68,147,132,228,132,145,92,64,66,192,92,67,69,52,133,242,90,153,110,39,69,115,133,22,69,191,103,22,134,37,134,59,134,193,133,136,112,2,134,130,21,205,112,178,249,106,69,40,134,72,54,162,24,247,83,154,115,126,134,113,135,248,160,238,135,39,44,177,135,218,135,15,136,97,86,108,134,86,104,15,70,69,136,70,136,224,117,185,61,228,117,94,136,156,136,91,70,180,136,181,136,193,99,197,136,119,119,15,119,135,137,138,137,0,0,0,0,167,137,188,137,37,138,231,137,36,121,189,122,156,138,147,119,254,145,144,138,89,122,233,122,58,123,143,63,19,71,56,123,124,113,12,139,31,139,48,84,101,85,63,139,76,139,77,139,169,138,122,74,144,139,155,139,175,138,223,22,21,70,79,136,155,140,84,125,143,125,212,249,37,55,83,125,214,140,152,125,189,125,18,141,3,141,16,25,219,140,92,112,17,141,201,76,208,62,0,0,169,141,2,128,20,16,138,73,124,59,188,129,12,113,231,122,173,142,182,142,195,142,212,146,25,143,45,143,101,131,18,132,165,143,3,147,159,162,80,10,179,143,42,73,222,137,61,133,187,61,248,94,98,50,249,143,20,160,188,134,1,133,37,35,128,57,215,110,55,144,60,133,190,122,97,144,108,133,11,134,168,144,19,135,196,144,230,134,174,144,0,0,103,145,240,58,169,145,196,145,172,124,51,137,137,30,14,146,159,108,65,146,98,146,185,85,0,0,198,138,155,60,12,139,219,85,49,13,44,147,107,147,225,138,235,139,143,112,195,90,226,138,229,138,101,73,68,146,236,139,57,140,255,139,115,147,91,148,188,142,133,149,166,149,38,148,160,149,246,111,185,66,122,38,216,134,124,18,46,62,223,73,28,108,123,150,150,150,108,65,163,150,213,110,218,97,182,150,245,120,224,138,189,150,204,83,161,73,184,108,116,2,16,100,175,144,229,144,209,74,21,25,10,51,49,151,66,134,54,151,15,74,61,69,133,69,233,74,117,112,65,91,27,151,0,0,213,145,87,151,74,91,235,145,95,151,37,148,208,80,183,48,188,48,137,151,159,151,177,151,190,151,192,151,210,151,224,151,108,84,238,151,28,116,51,148,0,0,245,151,29,148,122,121,209,74,52,152,51,152,75,152,102,152,14,59,117,113,81,61,48,6,92,65,6,87,202,152,183,152,200,152,199,152,255,74,39,109,211,22,176,85,225,152,230,152,236,152,120,147,57,153,41,74,114,75,87,152,5,153,245,153,12,154,59,154,16,154,88,154,37,87,196,54,177,144,213,155,224,154,226,154,5,155,244,154,14,76,20,155,45,155,0,134,52,80,52,155,168,105,195,56,125,48,80,155,64,155,62,157,69,90,99,24,142,155,75,66,2,156,255,155,12,156,104,158,212,157,183,159,146,161,171,161,225,160,35,161,223,161,126,157,131,157,52,161,14,158,136,104,196,157,91,33,147,161,32,162,59,25,51,162,57,157,185,160,180,162,144,158,149,158,158,158,162,158,52,77,170,158,175,158,100,67,193,158,96,59,229,57,29,61,50,79,190,55,43,140,2,159,8,159,150,75,36,148,162,109,23,159,0,0,57,159,159,86,138,86,69,159,184,153,139,144,242,151,127,132,98,159,105,159,220,122,142,159,22,114,190,75,117,73,187,73,119,113,248,73,72,67,81,74,158,115,218,139,250,24,159,121,126,137,54,142,105,147,243,147,68,138,236,146,129,147,203,147,108,137,185,68,23,114,235,62,114,119,67,122,208,112,115,68,248,67,126,113,239,23,163,112,190,24,153,53,199,62,133,24,47,84,248,23,34,55,251,22,57,24,225,54,116,23,209,24,75,95,35,55,192,22,91,87,37,74,254,19,168,18,198,19,182,20,3,133,166,54,0,0,85,132,148,73,101,113,49,62,92,85,251,62,82,112,244,68,238,54,157,153,38,111,249,103,51,55,21,60,231,61,108,88,34,25,16,104,87,64,63,55,225,64,139,64,15,65,33,108,203,84,158,86,177,102,146,86,223,15,168,11,13,14,198,147,19,139,156,147,248,78,43,81,25,56,54,68,188,78,101,4,127,3,75,79,138,79,81,86,104,90,171,1,203,3,153,57,10,3,20,4,53,52,41,79,192,2,179,142,117,2,218,138,12,2,152,78,205,80,13,81,162,79,3,79,14,74,138,62,66,79,46,80,108,80,129,80,204,79,229,79,88,80,252,80,0,0,0,0,0,0,0,0,118,110,149,53,57,62,191,62,114,109,132,24,137,62,168,81,195,81,224,5,221,68,163,4,146,4,145,4,122,141,156,138,14,7,89,82,164,82,115,8,225,82,0,0,122,70,140,113,140,67,32,12,172,73,228,16,209,105,29,14,0,0,222,62,153,116,20,116,86,116,152,115,142,75,188,74,141,64,208,83,132,53,15,114,201,64,180,85,69,3,205,84,198,11,29,87,93,146,244,150,102,147,221,87,141,87,127,87,62,54,203,88,153,90,70,138,250,22,111,23,16,23,44,90,184,89,143,146,126,90,207,90,18,90,70,89,243,25,97,24,149,66,245,54,5,109,67,116,33,90,131,94,129,90,215,139,19,4,224,147,140,116,3,19,5,113,114,73,8,148,251,137,189,147,160,55,30,92,158,92,94,94,72,94,150,25,124,25,238,58,205,94,79,91,3,25,4,25,1,55,160,24,221,54,254,22,211,54,42,129,71,138,186,29,114,52,168,137,12,95,14,95,39,25,171,23,107,90,59,23,68,91,20,134,253,117,96,136,126,96,96,40,43,38,219,95,184,62,175,37,190,37,136,144,115,111,192,97,62,0,70,0,27,38,153,97,152,97,117,96,155,44,7,45,212,70,77,145,113,100,101,70,106,43,41,58,34,43,80,52,234,152,120,46,55,99,91,164,182,100,49,99,209,99,227,73,103,45,164,98,161,44,59,100,107,101,114,105,244,59,142,48,173,50,137,73,171,50,13,85,224,50,217,24,63,148,206,102,137,50,179,49,224,58,144,65,132,85,34,139,143,85,252,22,91,85,37,84,238,120,3,49,42,24,52,50,100,52,15,50,130,49,201,66,142,102,36,109,107,102,147,75,48,102,112,120,235,29,99,102,210,50,225,50,30,102,114,88,209,56,58,56,188,55,153,59,162,55,254,51,208,116,150,59,143,103,42,70,182,104,30,104,196,59,190,106,99,56,213,55,135,68,51,106,82,106,201,106,5,107,18,25,17,101,152,104,76,106,215,59,122,106,87,107,192,63,154,60,160,147,242,146,234,139,203,138,137,146,30,128,220,137,103,148,165,109,11,111,236,73,0,0,127,63,143,61,4,110,60,64,61,90,10,110,71,88,36,109,66,120,59,113,26,67,118,66,241,112,80,114,135,114,148,114,143,71,37,71,121,81,164,74,235,5,122,116,248,62,95,54,74,74,23,73,225,95,6,63,177,62,223,74,35,140,53,63,167,96,243,62,204,116,60,116,135,147,55,116,159,68,234,109,81,69,131,117,99,63,217,76,6,77,88,63,85,117,115,118,198,165,25,59,104,116,204,138,171,73,142,73,251,58,205,61,78,74,255,62,197,73,243,72,250,145,50,87,66,147,227,138,100,24,223,80,33,82,231,81,120,119,50,50,14,119,15,119,123,119,151,70,129,55,94,58,240,72,56,116,155,116,191,62,186,74,199,74,200,64,150,74,174,97,7,147,129,85,30,120,141,120,136,120,210,120,208,115,89,121,65,119,227,86,14,65,0,0,150,132,165,121,45,106,250,62,58,122,244,121,110,65,230,22,50,65,53,146,241,121,76,13,140,73,153,2,186,61,110,23,151,53,107,85,112,53,170,54,212,1,13,12,226,122,89,90,245,38,175,90,156,90,13,90,91,2,240,120,42,90,198,91,254,122,249,65,93,124,109,124,17,66,179,91,188,94,166,94,205,124,249,73,176,23,142,124,124,124,174,124,178,106,220,125,7,126,211,125,78,127,97,98,92,97,72,123,151,125,130,94,106,66,117,107,22,9,214,103,78,0,207,53,196,87,18,100,248,99,98,73,221,127,39,123,44,8,233,90,67,93,12,123,14,94,230,153,69,134,99,154,28,106,63,52,226,57,247,73,173,101,31,154,160,101,128,132,39,113,209,108,234,68,55,129,2,68,198,128,9,129,66,129,180,103,195,152,66,106,98,130,101,130,81,106,83,132,167,109,16,134,27,114,134,90,127,65,64,24,43,91,161,24,228,90,216,24,160,134,188,249,143,61,45,136,34,116,2,90,110,136,69,79,135,136,191,136,230,136,101,137,77,137,131,86,84,137,133,119,132,119,245,139,217,139,156,139,249,137,173,62,163,132,245,70,207,70,242,55,61,138,28,138,72,148,77,95,43,146,132,66,212,101,41,113,196,112,69,24,109,157,159,140,233,140,220,125,154,89,195,119,240,89,110,67,212,54,42,142,167,142,9,76,48,143,74,143,244,66,88,108,187,111,33,35,155,72,121,111,139,110,218,23,233,155,181,54,47,73,187,144,0,0,113,85,6,73,187,145,4,148,75,138,98,64,252,138,39,148,29,140,59,140,229,132,43,138,153,149,167,149,151,149,150,149,52,141,69,116,194,62,255,72,66,74,234,67,231,62,37,50,143,150,231,142,102,142,101,142,204,62,237,73,120,74,238,63,18,116,107,116,252,62,65,151,176,144,71,104,29,74,147,144,223,87,0,0,104,147,137,137,38,140,47,139,190,99,186,146,17,91,105,139,60,73,249,115,27,66,155,151,113,151,56,153,38,15,193,93,197,139,178,74,31,152,218,148,246,146,215,149,229,145,192,68,80,139,103,74,100,139,220,152,69,138,0,63,42,146,37,73,20,132,59,153,77,153,6,123,253,61,155,153,111,75,170,153,92,154,101,139,200,88,143,106,33,154,254,90,47,154,241,152,144,75,72,153,188,153,189,75,151,75,125,147,114,88,2,19,34,88,184,73,232,20,68,120,31,39,184,61,197,104,125,61,88,148,39,57,80,97,129,39,107,41,7,97,79,156,83,156,123,156,53,156,16,156,127,155,207,155,45,158,159,155,245,161,254,160,33,157,174,76,4,65,24,158,176,76,12,157,180,161,237,160,243,160,47,153,165,157,189,132,18,110,223,111,130,107,252,133,51,69,164,109,132,110,240,109,32,132,238,133,0,110,215,55,100,96,226,121,156,53,64,54,45,73,222,73,98,61,219,147,190,146,72,147,191,2,185,120,119,146,77,148,228,79,64,52,100,144,93,85,61,120,84,120,182,120,75,120,87,23,201,49,65,73,154,54,114,79,218,111,217,111,0,0,30,112,20,84,181,65,187,87,243,88,138,87,22,157,215,87,52,113,175,52,172,65,235,113,64,108,151,79,0,0,181,23,73,138,12,97,206,90,11,90,188,66,136,68,44,55,123,75,252,137,187,147,184,147,214,24,29,15,114,132,192,108,19,20,250,66,38,44,193,67,148,89,183,61,65,103,168,125,91,97,164,96,185,73,139,73,250,137,229,146,226,115,233,62,180,116,99,139,159,24,225,62,179,74,216,106,243,115,251,115,214,62,62,74,148,74,217,23,102,74,167,3,36,20,229,73,72,116,22,73,165,112,118,73,132,146,230,115,95,147,254,4,49,147,206,138,22,138,134,147,231,139,213,85,53,73,130,138,107,113,67,73,255,12,164,86,26,6,235,11,184,12,2,85,196,121,250,23,254,125,194,22,80,74,82,24,46,69,1,148,10,55,192,138,173,73,176,89,191,24,131,24,132,116,161,90,226,54,91,61,176,54,95,146,121,90,129,138,98,24,116,147,205,60,180,10,150,74,138,57,244,80,105,61,76,61,156,19,117,113,251,66,24,130,15,110,228,144,235,68,87,109,79,126,103,112,175,108,214,60,237,63,45,62,2,110,12,111,111,61,245,3,81,117,188,54,200,52,128,70,218,62,113,72,196,89,110,146,62,73,65,143,28,140,192,107,18,88,200,87,214,54,82,20,254,112,98,67,113,74,227,47,176,18,189,35,185,104,103,105,152,19,229,52,244,123,223,54,131,138,214,55,250,51,159,76,26,106,173,54,183,108,62,132,223,68,206,68,38,109,81,109,130,108,222,111,23,111,9,113,61,131,58,23,237,131,128,108,83,112,219,23,137,89,130,90,179,23,97,90,113,90,5,25,252,65,45,55,239,89,60,23,199,54,142,113,144,147,154,102,165,66,110,90,43,90,147,66,43,106,249,62,54,119,91,68,202,66,29,113,89,66,225,137,176,79,40,109,194,92,206,68,77,126,189,67,12,106,86,66,4,19,166,112,51,113,233,67,165,61,223,108,37,248,79,74,101,126,235,89,47,93,243,61,92,95,93,74,223,23,164,125,38,132,133,84,250,58,0,51,20,2,126,87,213,8,25,6,229,63,158,31,182,162,3,112,91,145,112,93,143,115,211,124,89,138,32,148,200,79,231,127,205,114,16,115,244,122,56,115,57,115,246,86,65,115,72,115,169,62,24,123,108,144,245,113,242,72,225,115,246,129,202,62,12,119,209,62,162,108,253,86,25,116,30,116,31,116,226,62,240,62,244,62,250,62,211,116,14,63,83,63,66,117,109,117,114,117,141,117,124,63,200,117,220,117,192,63,77,118,215,63,116,118,220,63,122,118,92,79,136,113,35,86,128,137,105,88,29,64,67,119,57,64,97,103,69,64,219,53,152,119,106,64,111,64,94,92,190,119,203,119,242,88,24,120,185,112,28,120,168,64,57,120,71,120,81,120,102,120,72,132,53,85,51,121,3,104,50,121,3,65,9,65,145,121,153,121,187,143,6,122,188,143,103,65,145,122,178,65,188,122,121,130,196,65,207,122,219,122,207,65,33,78,98,123,108,123,123,123,18,124,27,124,96,66,122,66,123,124,156,124,140,66,184,124,148,66,237,124,147,143,192,112,207,12,207,125,212,125,208,125,253,125,174,127,180,127,159,114,151,67,32,128,37,128,57,123,46,128,49,128,84,128,204,61,180,87,160,112,183,128,233,128,237,67,12,129,42,115,14,129,18,129,96,117,20,129,1,68,57,59,86,129,89,129,90,129,19,68,58,88,124,129,132,129,37,68,147,129,45,68,165,129,239,87,193,129,228,129,84,130,143,68,166,130,118,130,202,130,216,130,255,130,176,68,87,131,105,150,138,105,5,132,245,112,100,132,227,96,136,132,4,69,190,132,225,132,248,132,16,133,56,133,82,133,59,69,111,133,112,133,224,133,119,69,114,134,146,134,178,134,239,134,69,150,139,135,6,70,23,70,174,136,255,136,36,137,71,137,145,137,103,121,41,138,56,138,148,138,180,138,81,140,212,140,242,140,28,141,152,71,95,88,195,141,237,71,238,78,58,142,216,85,84,87,113,142,245,85,176,142,55,72,206,142,226,142,228,142,237,142,242,142,183,143,193,143,202,143,204,143,51,144,196,153,173,72,224,152,19,146,30,73,40,146,88,146,107,146,177,146,174,146,191,146,227,146,235,146,243,146,244,146,253,146,67,147,132,147,173,147,69,73,81,73,191,158,23,148,1,83,29,148,45,148,62,148,106,73,84,148,121,148,45,149,162,149,167,73,244,149,51,150,229,73,160,103,36,74,64,151,53,74,178,151,194,151,84,86,228,74,232,96,185,152,25,75,241,152,68,88,14,153,25,153,180,81,28,153,55,153,66,153,93,153,98,153,112,75,197,153,157,75,60,154,15,155,131,122,105,155,129,155,221,155,241,155,244,155,109,76,32,156,111,55,194,27,73,157,58,156,254,158,80,86,147,157,189,157,192,157,252,157,246,148,182,143,123,158,172,158,177,158,189,158,198,158,220,148,226,158,241,158,248,158,200,122,68,159,148,0,183,2,160,3,26,105,195,148,172,89,215,4,64,88,193,148,185,55,213,5,21,6,118,6,186,22,87,87,115,113,194,10,205,10,191,11,106,84,59,248,203,11,158,84,251,11,59,12,83,12,101,12,124,12,231,96,141,12,122,86,181,12,221,12,237,12,111,13,178,13,200,13,85,105,47,156,165,135,4,14,14,14,215,14,144,15,45,15,115,14,32,92,188,15,11,94,92,16,79,16,118,16,30,103,123,16,136,16,150,16,71,54,191,16,211,16,47,17,59,17,100,83,173,132,227,18,117,19,54,19,129,139,119,21,25,22,195,23,199,23,120,78,187,112,45,24,106,25,45,26,69,26,42,28,112,28,172,28,200,30,195,98,213,30,21,31,152,113,85,104,69,32,233,105,200,54,124,34,215,35,250,35,42,39,113,40,79,41,253,130,103,41,147,41,213,42,165,137,232,42,160,143,14,43,184,151,63,43,71,152,189,154,76,44,0,0,136,44,183,44,232,91,8,45,18,45,183,45,149,45,66,46,116,47,204,47,51,48,102,48,31,51,222,51,177,95,72,102,191,102,121,122,103,53,243,53,0,0,186,73,0,0,26,54,22,55,0,0,70,3,181,88,14,103,24,105,167,58,87,118,226,95,17,62,185,62,254,117,154,32,208,72,184,74,25,65,154,138,238,66,13,67,59,64,52,67,150,67,69,74,202,5,210,81,17,6,159,89,168,30,190,59,255,60,4,68,214,68,136,87,116,70,155,57,47,71,232,133,201,153,98,55,195,33,94,139,78,139,0,0,18,72,251,72,21,74,9,114,192,74,120,12,101,89,165,78,134,79,121,7,218,142,44,80,143,82,63,87,113,113,153,82,25,84,74,63,167,74,188,85,70,84,110,84,82,107,0,0,115,52,63,85,50,118,94,85,24,71,98,85,102,85,199,87,63,73,93,88,102,80,251,52,204,51,0,0,3,89,124,71,72,137,174,90,137,91,6,92,144,29,161,87,81,113,0,0,2,97,18,124,86,144,178,97,154,79,98,139,2,100,74,100,91,93,247,107,0,0,132,100,28,25,234,138,246,73,136,100,239,63,18,101,192,75,191,101,181,102,27,39,101,148,225,87,149,97,39,90,205,248,0,0,185,86,33,69,252,102,106,78,52,73,86,150,143,109,189,108,24,54,119,137,153,103,110,104,17,100,94,104,0,0,199,104,66,123,192,144,17,10,38,105,0,0,57,105,69,122,0,0,250,105,38,154,45,106,95,54,105,100,33,0,131,121,52,106,91,107,44,93,25,53,0,0,157,107,208,70,164,108,59,117,101,136,174,109,182,88,28,55,141,37,75,112,205,113,84,60,128,114,133,114,129,146,122,33,139,114,48,147,230,114,208,73,57,108,159,148,80,116,248,14,39,136,245,136,38,41,115,132,177,23,184,110,42,74,32,24,164,57,185,54,0,0,0,0,63,69,182,102,173,156,164,152,67,137,204,119,88,120,214,86,223,64,10,22,161,57,47,55,232,128,197,19,173,113,102,131,221,121,168,145,0,0,183,76,175,112,171,137,253,121,10,122,11,123,102,125,122,65,67,123,126,121,9,128,181,111,223,162,3,106,24,131,162,83,7,110,191,147,54,104,93,151,111,129,35,128,181,105,237,19,47,50,72,128,133,93,48,140,131,128,21,87,35,152,73,137,171,93,136,73,190,101,213,105,210,83,165,74,129,63,17,60,54,103,144,128,244,128,46,129,161,31,79,129,137,129,175,129,26,130,6,131,47,131,138,131,202,53,104,132,170,134,250,72,230,99,86,137,8,120,85,146,184,137,242,67,231,137,223,67,232,137,70,139,212,139,248,89,9,140,0,0,197,143,236,144,0,0,16,145,60,145,247,61,94,145,202,74,208,143,143,114,139,86,231,148,233,149,176,149,184,149,50,151,209,152,73,153,106,153,195,153,40,154,14,155,90,157,155,157,159,126,248,158,35,159,164,76,71,149,147,162,162,113,255,162,145,77,18,144,203,165,156,77,156,12,190,143,193,85,186,143,176,36,185,143,147,74,9,69,127,126,86,111,177,106,234,78,228,52,44,139,157,120,58,55,128,142,245,23,36,128,108,139,153,139,62,122,175,102,235,61,85,118,183,60,53,86,86,89,154,78,129,94,88,98,191,86,109,14,14,142,109,91,136,62,158,76,222,99,0,0,246,23,123,24,48,101,45,86,74,92,26,84,17,83,198,61,152,157,125,76,34,86,30,86,73,127,216,94,117,89,64,61,112,135,28,78,234,15,73,13,186,54,23,129,94,157,24,141,59,118,69,156,78,118,185,119,69,147,50,84,72,129,247,130,37,86,50,129,24,132,189,128,234,85,98,121,67,86,22,84,157,14,206,53,5,86,241,85,241,102,226,130,45,54,52,117,240,85,186,85,151,84,114,85,65,12,150,12,208,94,72,81,118,14,98,44,162,14,171,158,90,125,222,85,117,16,157,98,109,151,148,84,205,140,246,113,118,145,252,99,185,99,254,99,105,85,67,43,114,156,179,46,154,81,223,52,167,13,167,81,77,84,30,85,19,85,102,118,45,142,138,104,177,117,182,128,4,136,134,135,199,136,182,129,28,132,193,16,236,68,4,115,6,71,144,91,11,131,147,104,123,86,244,38,47,125,163,65,115,125,208,110,182,114,112,145,217,17,8,146,252,60,169,166,172,14,249,14,102,114,162,28,78,71,194,79,249,127,235,15,250,64,93,156,31,101,160,45,243,72,224,71,124,157,236,15,10,14,0,0,163,117,237,15,0,0,72,96,135,17,163,113,142,126,80,157,26,78,4,78,119,53,13,91,178,108,103,83,172,54,220,57,125,83,165,54,24,70,154,88,110,75,45,130,75,84,170,87,149,90,121,9,0,0,82,58,101,36,116,115,172,158,9,77,237,155,254,60,48,159,91,76,169,79,158,149,222,159,92,132,182,61,178,114,179,103,32,55,46,99,37,125,247,62,44,62,42,58,8,144,204,82,116,62,122,54,233,69,142,4,64,118,240,90,182,14,122,120,46,127,167,88,191,64,124,86,139,155,116,93,84,118,52,164,133,158,225,76,0,0,251,55,25,97,218,48,242,67,0,0,93,86,169,18,167,87,99,73,6,158,52,82,174,112,173,53,0,0,124,157,86,124,57,155,222,87,108,23,83,92,211,100,208,148,53,99,100,113,173,134,40,13,34,109,226,74,113,13,0,0,254,81,15,31,142,93,3,151,209,29,129,158,76,144,31,123,2,155,209,92,163,123,104,98,53,99,255,154,207,123,42,155,126,124,0,0,66,124,134,124,21,156,252,123,9,155,0,0,27,156,62,73,90,159,115,85,195,91,253,79,152,158,242,79,96,82,6,62,209,82,103,87,86,80,183,89,18,94,200,151,171,157,92,143,105,84,180,151,64,153,186,151,44,83,48,97,44,105,218,83,10,156,2,157,59,76,65,150,128,105,166,80,70,117,109,23,218,153,115,82,0,0,89,145,129,150,92,145,0,0,81,145,151,142,127,99,35,109,202,106,17,86,142,145,122,117,133,98,252,3,79,115,112,124,33,92,253,60,0,0,25,73,214,118,157,155,42,78,212,12,190,131,66,136,0,0,74,92,192,105,0,0,122,87,31,82,245,93,206,78,49,108,242,1,57,79,156,84,218,84,154,82,130,141,254,53,0,0,243,53,0,0,82,107,124,145,165,159,151,155,46,152,180,152,186,154,168,158,132,158,122,113,20,123,0,0,250,107,24,136,120,127,0,0,32,86,74,166,119,142,83,159,0,0,212,141,79,142,28,158,1,142,130,98,125,131,40,142,117,142,211,122,119,74,62,122,216,120,234,108,103,138,7,118,90,138,38,159,206,108,214,135,195,117,178,162,83,120,64,248,12,141,226,114,113,115,45,139,2,115,241,116,235,140,187,74,47,134,186,95,160,136,183,68,0,0,59,24,5,110,0,0,126,138,27,37,0,0,253,96,103,118,215,154,68,157,110,147,143,155,245,135,0,0,0,0,247,140,44,115,33,151,176,155,214,53,178,114,7,76,81,124,74,153,89,97,89,97,4,76,150,158,125,97,0,0,95,87,111,97,166,98,57,98,0,0,92,58,226,97,170,83,245,51,100,99,2,104,210,53,87,93,194,139,218,143,57,142,0,0,217,80,70,29,6,121,50,83,56,150,59,15,101,64,0,0,254,119,0,0,194,124,26,95,218,124,45,122,102,128,99,128,77,125,5,117,242,116,148,137,26,130,12,103,98,128,134,116,91,128,240,116,3,129,36,119,137,137,204,103,83,117,209,110,169,135,206,135,200,129,140,135,73,138,173,140,67,139,43,119,248,116,218,132,53,54,178,105,166,141,0,0,169,137,0,0,185,109,193,135,17,64,231,116,219,61,118,113,164,96,156,97,209,60,0,0,119,96,0,0,113,127,45,139,0,0,233,96,126,75,32,82,24,60,199,60,215,94,86,118,49,85,68,25,254,18,3,153,220,109,173,112,193,92,173,97,15,138,119,54,238,0,70,104,14,79,98,69,31,91,76,99,80,159,166,158,107,98,71,5,219,146,223,5,197,63,76,133,181,66,239,115,181,81,73,54,66,73,228,137,68,147,219,25,238,130,200,60,60,120,68,103,223,98,51,73,170,137,160,2,179,107,5,19,171,79,237,36,8,80,41,109,132,122,0,54,177,74,19,37,0,0,126,3,164,95,128,3,71,3,219,110,31,4,0,0,1,81,122,52,14,81,108,152,67,55,22,132,164,73,135,4,96,81,180,51,106,81,255,11,252,32,229,2,48,37,142,5,51,50,131,25,130,91,125,135,179,5,153,60,178,81,184,81,52,157,201,81,207,81,209,81,220,60,211,81,166,74,179,81,226,81,66,83,237,81,205,131,62,105,45,55,123,95,11,82,38,82,60,82,181,82,87,82,148,82,185,82,197,82,21,124,66,133,224,82,13,134,19,107,0,0,222,138,73,85,217,110,128,63,84,9,236,63,51,83,0,0,226,11,203,108,38,23,27,104,213,115,74,96,170,62,204,56,232,22,221,113,162,68,109,83,116,83,171,134,126,83,0,0,150,21,19,22,230,119,147,83,155,138,160,83,171,83,174,83,167,115,114,87,89,63,156,115,193,83,197,83,73,108,73,78,254,87,217,83,171,58,143,11,224,83,235,63,163,45,246,83,119,12,19,84,121,112,43,85,87,102,91,109,109,84,83,107,116,13,93,85,143,84,164,84,166,71,13,23,221,14,180,61,77,13,188,137,152,38,71,85,237,76,47,84,23,116,134,85,169,85,0,0,215,24,58,64,82,69,53,68,179,102,180,16,55,86,205,102,138,50,164,102,173,102,77,86,79,86,241,120,241,86,135,151,254,83,0,87,239,86,237,86,102,139,35,54,79,18,70,87,165,65,110,108,139,112,66,87,177,54,126,108,230,87,22,20,3,88,84,20,99,67,38,88,245,75,92,88,170,88,97,53,224,88,220,88,60,18,251,88,255,91,67,87,80,161,120,66,211,147,161,53,31,89,166,104,195,54,89,110,62,22,36,90,83,85,146,22,5,133,201,89,78,13,129,108,42,109,220,23,217,89,251,23,178,23,166,109,113,109,40,24,213,22,249,89,69,110,171,90,99,90,230,54,169,73,0,0,8,55,150,90,101,116,211,90,161,111,84,37,133,61,17,25,50,55,184,22,131,94,208,82,118,91,136,101,124,91,14,122,4,64,93,72,4,2,213,91,96,97,52,26,204,89,165,5,243,91,157,91,16,77,5,92,68,27,19,92,206,115,20,92,165,28,40,107,73,92,221,72,133,92,233,92,239,92,139,93,249,29,55,30,16,93,24,93,70,93,164,30,186,92,215,93,252,130,45,56,1,73,73,32,115,33,135,130,54,56,194,59,46,94,138,106,0,0,122,94,188,68,211,12,166,83,183,78,0,0,168,83,113,23,9,94,244,94,130,132,249,94,251,94,160,56,252,94,62,104,27,148,13,95,193,1,148,248,222,58,174,72,58,19,58,95,136,104,208,35,0,0,113,36,99,95,189,151,110,110,114,95,64,147,54,138,167,95,182,93,95,61,80,82,106,31,248,112,104,38,214,145,158,2,41,138,49,96,133,102,119,24,99,57,199,61,57,54,144,87,180,39,113,121,64,62,158,96,0,0,179,96,130,73,143,73,83,122,164,116,225,80,160,90,100,97,36,132,66,97,166,248,210,110,129,97,244,81,86,6,135,97,170,91,183,63,95,40,211,97,157,139,93,153,208,97,50,57,128,41,193,40,35,96,92,97,30,101,139,99,24,1,197,98,112,23,213,98,13,46,108,99,223,73,23,58,56,100,248,99,142,19,252,23,0,0,138,111,54,46,20,152,140,64,29,87,225,100,229,100,123,148,102,58,58,100,87,58,77,101,22,111,40,74,35,74,133,101,109,101,95,101,126,48,181,101,64,73,55,75,209,101,216,64,41,24,224,101,227,101,223,95,0,52,24,102,247,49,248,49,68,102,164,49,165,49,75,102,117,14,103,102,230,81,115,102,0,0,61,30,49,50,244,133,200,49,19,83,197,119,247,40,164,153,2,103,156,67,33,74,43,59,250,105,194,55,0,0,103,103,98,103,205,65,237,144,215,103,233,68,34,104,80,110,60,146,1,104,230,51,160,109,93,104,111,52,225,105,11,106,223,138,115,105,195,104,205,53,1,105,0,105,50,61,1,58,60,54,128,59,172,103,97,105,74,138,252,66,54,105,152,105,161,59,201,3,99,131,144,80,249,105,89,54,42,33,69,106,3,55,157,106,243,59,177,103,200,106,156,145,13,60,29,107,35,9,222,96,53,107,116,107,205,39,181,110,219,58,181,3,88,25,64,55,33,84,90,59,225,107,252,62,220,107,55,108,139,36,241,72,81,107,90,108,38,130,121,108,188,61,197,68,189,61,164,65,12,73,0,73,201,60,229,54,235,60,50,13,131,155,249,49,145,36,143,127,55,104,37,109,161,109,235,109,150,109,92,109,124,110,4,111,127,73,133,64,114,110,51,133,116,111,199,81,0,0,0,0,46,132,33,139,0,0,47,62,83,116,130,63,204,121,79,110,145,90,75,48,248,111,13,55,157,111,48,62,250,110,151,20,61,64,85,69,240,147,68,111,92,111,78,61,116,111,112,145,59,61,159,111,68,65,211,111,145,64,85,65,57,64,240,63,180,63,63,65,223,81,86,65,87,65,64,65,221,97,75,112,126,112,167,112,129,112,204,112,213,112,214,112,223,112,4,65,232,61,180,113,150,113,119,66,43,113,69,113,136,90,74,113,0,0,156,92,101,67,79,113,98,147,193,66,44,113,90,68,39,74,34,74,186,113,232,139,189,112,14,114,66,148,21,114,17,89,67,148,36,114,65,147,5,86,46,114,64,114,116,73,189,104,85,114,87,114,85,62,68,48,13,104,61,111,130,114,0,0,43,115,35,72,43,136,237,72,4,136,40,115,46,115,207,115,170,115,58,12,46,106,201,115,73,116,226,65,231,22,36,74,35,102,197,54,183,73,141,73,251,73,247,115,21,116,3,105,38,74,57,116,195,5,215,62,0,0,173,40,96,116,178,142,71,116,228,115,118,116,185,131,108,116,48,55,116,116,241,147,44,106,130,116,83,73,140,74,95,65,121,74,143,139,70,91,3,140,158,24,200,116,136,25,14,117,0,0,30,117,217,142,75,26,215,91,172,142,133,147,77,117,74,117,103,117,110,117,130,79,4,63,19,77,142,117,93,116,158,117,180,117,2,118,44,118,81,118,79,118,111,118,118,118,245,99,144,118,239,129,248,55,17,105,14,105,161,118,165,118,183,118,204,118,159,111,98,132,157,80,125,81,28,30,30,119,38,119,64,119,175,100,32,82,88,119,172,50,175,119,100,137,104,137,193,22,244,119,0,0,118,19,18,74,202,104,175,120,199,120,211,120,165,150,46,121,224,85,215,120,52,121,177,120,12,118,184,143,132,136,43,139,131,96,28,38,134,121,0,137,2,105,128,121,87,88,157,121,57,123,60,121,169,121,42,110,38,113,168,62,198,121,13,145,212,121,32,5,95,68,15,82,130,184,248,0,0,64,32,169,78,4,0,0,0,0,52,11,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,64,0,0,0,0,0,0,0,0,4,88,0,60,0,0,0,0,0,128,92,173,220,243,187,201,67,238,237,164,15,38,193,155,118,242,239,222,251,250,247,15,50,68,175,254,239,253,254,17,96,176,0,0,33,25,129,32,16,136,168,96,33,105,36,0,68,137,196,0,0,3,64,53,0,67,132,49,81,147,104,2,2,0,0,0,0,0,0,0,0,0,0,0,64,0,1,128,172,100,130,64,140,161,144,4,80,96,212,0,210,42,24,157,104,53,151,79,216,248,32,196,130,28,40,130,117,148,2,56,64,160,161,197,16,113,77,196,13,152,185,94,91,1,67,159,153,3,120,32,226,31,8,137,1,201,64,7,3,13,154,144,82,209,79,124,3,2,33,32,192,110,19,131,181,219,245,229,119,144,79,23,154,54,23,12,0,110,186,9,47,96,84,0,30,120,104,34,112,86,158,37,243,142,183,23,11,239,230,119,23,91,27,193,16,152,141,18,24,182,207,1,49,114,26,91,44,182,192,32,226,195,92,130,27,224,218,206,133,214,64,169,84,11,208,15,72,68,64,16,9,212,64,174,59,100,30,68,43,23,8,134,130,54,24,160,137,231,156,91,8,132,3,2,218,144,236,219,135,133,191,162,173,157,142,157,152,32,37,70,0,70,159,127,227,213,201,132,244,214,77,6,227,182,24,18,9,0,0,0,4,0,0,32,0,0,0,0,2,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,142,120,110,95,63,126,221,61,247,252,155,252,174,210,255,143,107,241,231,191,186,174,110,23,239,220,167,62,182,181,119,201,146,215,165,182,74,110,155,185,129,77,103,254,84,241,155,98,254,111,82,215,54,254,191,41,69,129,249,189,101,166,66,57,0,0,66,96,143,0,148,64,64,210,175,215,209,219,0,160,152,178,123,6,82,32,152,22,200,61,9,0,0,1,0,0,0,1,10,178,8,128,0,0,0,4,136,32,20,16,76,0,0,4,0,161,68,16,0,65,1,0,8,64,240,223,79,54,88,241,245,181,128,245,103,128,64,0,80,78,65,200,132,0,90,96,216,1,43,1,80,161,22,196,64,242,110,17,172,32,57,196,192,8,7,12,9,152,150,196,155,16,28,152,108,134,42,166,1,70,17,109,229,203,196,192,146,16,33,22,18,157,114,244,105,14,23,42,162,129,244,123,0,8,164,11,144,16,44,204,57,74,1,240,22,11,10,64,12,29,234,12,68,14,69,2,0,8,4,4,8,4,4,8,2,4,0,0,0,0,0,0,0,195,138,204,132,195,138,204,140,195,170,204,132,195,170,204,140,0,0,0,0,0,0,0,0,0,48,12,255,1,48,2,48,14,255,39,32,27,255,26,255,31,255,1,255,48,254,38,32,37,32,80,254,81,254,82,254,183,0,84,254,85,254,86,254,87,254,92,255,19,32,49,254,20,32,51,254,116,37,52,254,79,254,8,255,9,255,53,254,54,254,91,255,93,255,55,254,56,254,20,48,21,48,57,254,58,254,16,48,17,48,59,254,60,254,10,48,11,48,61,254,62,254,8,48,9,48,63,254,64,254,12,48,13,48,65,254,66,254,14,48,15,48,67,254,68,254,89,254,90,254,91,254,92,254,93,254,94,254,24,32,25,32,28,32,29,32,29,48,30,48,53,32,50,32,3,255,6,255,10,255,59,32,167,0,3,48,203,37,207,37,179,37,178,37,206,37,6,38,5,38,199,37,198,37,161,37,160,37,189,37,188,37,163,50,5,33,175,0,227,255,63,255,205,2,73,254,74,254,77,254,78,254,75,254,76,254,95,254,96,254,97,254,11,255,13,255,215,0,247,0,177,0,26,34,28,255,30,255,29,255,102,34,103,34,96,34,30,34,82,34,97,34,98,254,99,254,100,254,101,254,102,254,94,255,41,34,42,34,165,34,32,34,31,34,191,34,210,51,209,51,43,34,46,34,53,34,52,34,64,38,66,38,149,34,153,34,145,33,147,33,144,33,146,33,150,33,151,33,153,33,152,33,37,34,35,34,15,255,60,255,21,34,104,254,4,255,229,255,18,48,224,255,225,255,5,255,32,255,3,33,9,33,105,254,106,254,107,254,213,51,156,51,157,51,158,51,206,51,161,51,142,51,143,51,196,51,176,0,89,81,91,81,94,81,93,81,97,81,99,81,231,85,233,116,206,124,129,37,130,37,131,37,132,37,133,37,134,37,135,37,136,37,143,37,142,37,141,37,140,37,139,37,138,37,137,37,60,37,52,37,44,37,36,37,28,37,148,37,0,37,2,37,149,37,12,37,16,37,20,37,24,37,109,37,110,37,112,37,111,37,80,37,94,37,106,37,97,37,226,37,227,37,229,37,228,37,113,37,114,37,115,37,16,255,17,255,18,255,19,255,20,255,21,255,22,255,23,255], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+224356);
/* memory initializer */ allocate([24,255,25,255,96,33,97,33,98,33,99,33,100,33,101,33,102,33,103,33,104,33,105,33,33,48,34,48,35,48,36,48,37,48,38,48,39,48,40,48,41,48,65,83,68,83,69,83,33,255,34,255,35,255,36,255,37,255,38,255,39,255,40,255,41,255,42,255,43,255,44,255,45,255,46,255,47,255,48,255,49,255,50,255,51,255,52,255,53,255,54,255,55,255,56,255,57,255,58,255,65,255,66,255,67,255,68,255,69,255,70,255,71,255,72,255,73,255,74,255,75,255,76,255,77,255,78,255,79,255,80,255,81,255,82,255,83,255,84,255,85,255,86,255,87,255,88,255,89,255,90,255,145,3,146,3,147,3,148,3,149,3,150,3,151,3,152,3,153,3,154,3,155,3,156,3,157,3,158,3,159,3,160,3,161,3,163,3,164,3,165,3,166,3,167,3,168,3,169,3,177,3,178,3,179,3,180,3,181,3,182,3,183,3,184,3,185,3,186,3,187,3,188,3,189,3,190,3,191,3,192,3,193,3,195,3,196,3,197,3,198,3,199,3,200,3,201,3,5,49,6,49,7,49,8,49,9,49,10,49,11,49,12,49,13,49,14,49,15,49,16,49,17,49,18,49,19,49,20,49,21,49,22,49,23,49,24,49,25,49,26,49,27,49,28,49,29,49,30,49,31,49,32,49,33,49,34,49,35,49,36,49,37,49,38,49,39,49,40,49,41,49,217,2,201,2,202,2,199,2,203,2,0,36,1,36,2,36,3,36,4,36,5,36,6,36,7,36,8,36,9,36,10,36,11,36,12,36,13,36,14,36,15,36,16,36,17,36,18,36,19,36,20,36,21,36,22,36,23,36,24,36,25,36,26,36,27,36,28,36,29,36,30,36,31,36,33,36,172,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,89,78,1,78,3,78,67,78,93,78,134,78,140,78,186,78,63,81,101,81,107,81,224,81,0,82,1,82,155,82,21,83,65,83,92,83,200,83,9,78,11,78,8,78,10,78,43,78,56,78,225,81,69,78,72,78,95,78,94,78,142,78,161,78,64,81,3,82,250,82,67,83,201,83,227,83,31,87,235,88,21,89,39,89,115,89,80,91,81,91,83,91,248,91,15,92,34,92,56,92,113,92,221,93,229,93,241,93,242,93,243,93,254,93,114,94,254,94,11,95,19,95,77,98,17,78,16,78,13,78,45,78,48,78,57,78,75,78,57,92,136,78,145,78,149,78,146,78,148,78,162,78,193,78,192,78,195,78,198,78,199,78,205,78,202,78,203,78,196,78,67,81,65,81,103,81,109,81,110,81,108,81,151,81,246,81,6,82,7,82,8,82,251,82,254,82,255,82,22,83,57,83,72,83,71,83,69,83,94,83,132,83,203,83,202,83,205,83,236,88,41,89,43,89,42,89,45,89,84,91,17,92,36,92,58,92,111,92,244,93,123,94,255,94,20,95,21,95,195,95,8,98,54,98,75,98,78,98,47,101,135,101,151,101,164,101,185,101,229,101,240,102,8,103,40,103,32,107,98,107,121,107,203,107,212,107,219,107,15,108,52,108,107,112,42,114,54,114,59,114,71,114,89,114,91,114,172,114,139,115,25,78,22,78,21,78,20,78,24,78,59,78,77,78,79,78,78,78,229,78,216,78,212,78,213,78,214,78,215,78,227,78,228,78,217,78,222,78,69,81,68,81,137,81,138,81,172,81,249,81,250,81,248,81,10,82,160,82,159,82,5,83,6,83,23,83,29,83,223,78,74,83,73,83,97,83,96,83,111,83,110,83,187,83,239,83,228,83,243,83,236,83,238,83,233,83,232,83,252,83,248,83,245,83,235,83,230,83,234,83,242,83,241,83,240,83,229,83,237,83,251,83,219,86,218,86,22,89,46,89,49,89,116,89,118,89,85,91,131,91,60,92,232,93,231,93,230,93,2,94,3,94,115,94,124,94,1,95,24,95,23,95,197,95,10,98,83,98,84,98,82,98,81,98,165,101,230,101,46,103,44,103,42,103,43,103,45,103,99,107,205,107,17,108,16,108,56,108,65,108,64,108,62,108,175,114,132,115,137,115,220,116,230,116,24,117,31,117,40,117,41,117,48,117,49,117,50,117,51,117,139,117,125,118,174,118,191,118,238,118,219,119,226,119,243,119,58,121,190,121,116,122,203,122,30,78,31,78,82,78,83,78,105,78,153,78,164,78,166,78,165,78,255,78,9,79,25,79,10,79,21,79,13,79,16,79,17,79,15,79,242,78,246,78,251,78,240,78,243,78,253,78,1,79,11,79,73,81,71,81,70,81,72,81,104,81,113,81,141,81,176,81,23,82,17,82,18,82,14,82,22,82,163,82,8,83,33,83,32,83,112,83,113,83,9,84,15,84,12,84,10,84,16,84,1,84,11,84,4,84,17,84,13,84,8,84,3,84,14,84,6,84,18,84,224,86,222,86,221,86,51,87,48,87,40,87,45,87,44,87,47,87,41,87,25,89,26,89,55,89,56,89,132,89,120,89,131,89,125,89,121,89,130,89,129,89,87,91,88,91,135,91,136,91,133,91,137,91,250,91,22,92,121,92,222,93,6,94,118,94,116,94,15,95,27,95,217,95,214,95,14,98,12,98,13,98,16,98,99,98,91,98,88,98,54,101,233,101,232,101,236,101,237,101,242,102,243,102,9,103,61,103,52,103,49,103,53,103,33,107,100,107,123,107,22,108,93,108,87,108,89,108,95,108,96,108,80,108,85,108,97,108,91,108,77,108,78,108,112,112,95,114,93,114,126,118,249,122,115,124,248,124,54,127,138,127,189,127,1,128,3,128,12,128,18,128,51,128,127,128,137,128,139,128,140,128,227,129,234,129,243,129,252,129,12,130,27,130,31,130,110,130,114,130,126,130,107,134,64,136,76,136,99,136,127,137,33,150,50,78,168,78,77,79,79,79,71,79,87,79,94,79,52,79,91,79,85,79,48,79,80,79,81,79,61,79,58,79,56,79,67,79,84,79,60,79,70,79,99,79,92,79,96,79,47,79,78,79,54,79,89,79,93,79,72,79,90,79,76,81,75,81,77,81,117,81,182,81,183,81,37,82,36,82,41,82,42,82,40,82,171,82,169,82,170,82,172,82,35,83,115,83,117,83,29,84,45,84,30,84,62,84,38,84,78,84,39,84,70,84,67,84,51,84,72,84,66,84,27,84,41,84,74,84,57,84,59,84,56,84,46,84,53,84,54,84,32,84,60,84,64,84,49,84,43,84,31,84,44,84,234,86,240,86,228,86,235,86,74,87,81,87,64,87,77,87,71,87,78,87,62,87,80,87,79,87,59,87,239,88,62,89,157,89,146,89,168,89,158,89,163,89,153,89,150,89,141,89,164,89,147,89,138,89,165,89,93,91,92,91,90,91,91,91,140,91,139,91,143,91,44,92,64,92,65,92,63,92,62,92,144,92,145,92,148,92,140,92,235,93,12,94,143,94,135,94,138,94,247,94,4,95,31,95,100,95,98,95,119,95,121,95,216,95,204,95,215,95,205,95,241,95,235,95,248,95,234,95,18,98,17,98,132,98,151,98,150,98,128,98,118,98,137,98,109,98,138,98,124,98,126,98,121,98,115,98,146,98,111,98,152,98,110,98,149,98,147,98,145,98,134,98,57,101,59,101,56,101,241,101,244,102,95,103,78,103,79,103,80,103,81,103,92,103,86,103,94,103,73,103,70,103,96,103,83,103,87,103,101,107,207,107,66,108,94,108,153,108,129,108,136,108,137,108,133,108,155,108,106,108,122,108,144,108,112,108,140,108,104,108,150,108,146,108,125,108,131,108,114,108,126,108,116,108,134,108,118,108,141,108,148,108,152,108,130,108,118,112,124,112,125,112,120,112,98,114,97,114,96,114,196,114,194,114,150,115,44,117,43,117,55,117,56,117,130,118,239,118,227,119,193,121,192,121,191,121,118,122,251,124,85,127,150,128,147,128,157,128,152,128,155,128,154,128,178,128,111,130,146,130,139,130,141,130,139,137,210,137,0,138,55,140,70,140,85,140,157,140,100,141,112,141,179,141,171,142,202,142,155,143,176,143,194,143,198,143,197,143,196,143,225,93,145,144,162,144,170,144,166,144,163,144,73,145,198,145,204,145,50,150,46,150,49,150,42,150,44,150,38,78,86,78,115,78,139,78,155,78,158,78,171,78,172,78,111,79,157,79,141,79,115,79,127,79,108,79,155,79,139,79,134,79,131,79,112,79,117,79,136,79,105,79,123,79,150,79,126,79,143,79,145,79,122,79,84,81,82,81,85,81,105,81,119,81,118,81,120,81,189,81,253,81,59,82,56,82,55,82,58,82,48,82,46,82,54,82,65,82,190,82,187,82,82,83,84,83,83,83,81,83,102,83,119,83,120,83,121,83,214,83,212,83,215,83,115,84,117,84,150,84,120,84,149,84,128,84,123,84,119,84,132,84,146,84,134,84,124,84,144,84,113,84,118,84,140,84,154,84,98,84,104,84,139,84,125,84,142,84,250,86,131,87,119,87,106,87,105,87,97,87,102,87,100,87,124,87,28,89,73,89,71,89,72,89,68,89,84,89,190,89,187,89,212,89,185,89,174,89,209,89,198,89,208,89,205,89,203,89,211,89,202,89,175,89,179,89,210,89,197,89,95,91,100,91,99,91,151,91,154,91,152,91,156,91,153,91,155,91,26,92,72,92,69,92,70,92,183,92,161,92,184,92,169,92,171,92,177,92,179,92,24,94,26,94,22,94,21,94,27,94,17,94,120,94,154,94,151,94,156,94,149,94,150,94,246,94,38,95,39,95,41,95,128,95,129,95,127,95,124,95,221,95,224,95,253,95,245,95,255,95,15,96,20,96,47,96,53,96,22,96,42,96,21,96,33,96,39,96,41,96,43,96,27,96,22,98,21,98,63,98,62,98,64,98,127,98,201,98,204,98,196,98,191,98,194,98,185,98,210,98,219,98,171,98,211,98,212,98,203,98,200,98,168,98,189,98,188,98,208,98,217,98,199,98,205,98,181,98,218,98,177,98,216,98,214,98,215,98,198,98,172,98,206,98,62,101,167,101,188,101,250,101,20,102,19,102,12,102,6,102,2,102,14,102,0,102,15,102,21,102,10,102,7,102,13,103,11,103,109,103,139,103,149,103,113,103,156,103,115,103,119,103,135,103,157,103,151,103,111,103,112,103,127,103,137,103,126,103,144,103,117,103,154,103,147,103,124,103,106,103,114,103,35,107,102,107,103,107,127,107,19,108,27,108,227,108,232,108,243,108,177,108,204,108,229,108,179,108,189,108,190,108,188,108,226,108,171,108,213,108,211,108,184,108,196,108,185,108,193,108,174,108,215,108,197,108,241,108,191,108,187,108,225,108,219,108,202,108,172,108,239,108,220,108,214,108,224,108,149,112,142,112,146,112,138,112,153,112,44,114,45,114,56,114,72,114,103,114,105,114,192,114,206,114,217,114,215,114,208,114,169,115,168,115,159,115,171,115,165,115,61,117,157,117,153,117,154,117,132,118,194,118,242,118,244,118,229,119,253,119,62,121,64,121,65,121,201,121,200,121,122,122,121,122,250,122,254,124,84,127,140,127,139,127,5,128,186,128,165,128,162,128,177,128,161,128,171,128,169,128,180,128,170,128,175,128,229,129,254,129,13,130,179,130,157,130,153,130,173,130,189,130,159,130,185,130,177,130,172,130,165,130,175,130,184,130,163,130,176,130,190,130,183,130,78,134,113,134,29,82,104,136,203,142,206,143,212,143,209,143,181,144,184,144,177,144,182,144,199,145,209,145,119,149,128,149,28,150,64,150,63,150,59,150,68,150,66,150,185,150,232,150,82,151,94,151,159,78,173,78,174,78,225,79,181,79,175,79,191,79,224,79,209,79,207,79,221,79,195,79,182,79,216,79,223,79,202,79,215,79,174,79,208,79,196,79,194,79,218,79,206,79,222,79,183,79,87,81,146,81,145,81,160,81,78,82,67,82,74,82,77,82,76,82,75,82,71,82,199,82,201,82,195,82,193,82,13,83,87,83,123,83,154,83,219,83,172,84,192,84,168,84,206,84,201,84,184,84,166,84,179,84,199,84,194,84,189,84,170,84,193,84,196,84,200,84,175,84,171,84,177,84,187,84,169,84,167,84,191,84,255,86,130,87,139,87,160,87,163,87,162,87,206,87,174,87,147,87,85,89,81,89,79,89,78,89,80,89,220,89,216,89,255,89,227,89,232,89,3,90,229,89,234,89,218,89,230,89,1,90,251,89,105,91,163,91,166,91,164,91,162,91,165,91,1,92,78,92,79,92,77,92,75,92,217,92,210,92,247,93,29,94,37,94,31,94,125,94,160,94,166,94,250,94,8,95,45,95,101,95,136,95,133,95,138,95,139,95,135,95,140,95,137,95,18,96,29,96,32,96,37,96,14,96,40,96,77,96,112,96,104,96,98,96,70,96,67,96,108,96,107,96,106,96,100,96,65,98,220,98,22,99,9,99,252,98,237,98,1,99,238,98,253,98,7,99,241,98,247,98,239,98,236,98,254,98,244,98,17,99,2,99,63,101,69,101,171,101,189,101,226,101,37,102,45,102,32,102,39,102,47,102,31,102,40,102,49,102,36,102,247,102,255,103,211,103,241,103,212,103,208,103,236,103,182,103,175,103,245,103,233,103,239,103,196,103,209,103,180,103,218,103,229,103,184,103,207,103,222,103,243,103,176,103,217,103,226,103,221,103,210,103,106,107,131,107,134,107,181,107,210,107,215,107,31,108,201,108,11,109,50,109,42,109,65,109,37,109,12,109,49,109,30,109,23,109,59,109,61,109,62,109,54,109,27,109,245,108,57,109,39,109,56,109,41,109,46,109,53,109,14,109,43,109,171,112,186,112,179,112,172,112,175,112,173,112,184,112,174,112,164,112,48,114,114,114,111,114,116,114,233,114,224,114,225,114,183,115,202,115,187,115,178,115,205,115,192,115,179,115,26,117,45,117,79,117,76,117,78,117,75,117,171,117,164,117,165,117,162,117,163,117,120,118,134,118,135,118,136,118,200,118,198,118,195,118,197,118,1,119,249,118,248,118,9,119,11,119,254,118,252,118,7,119,220,119,2,120,20,120,12,120,13,120,70,121,73,121,72,121,71,121,185,121,186,121,209,121,210,121,203,121,127,122,129,122,255,122,253,122,125,124,2,125,5,125,0,125,9,125,7,125,4,125,6,125,56,127,142,127,191,127,4,128,16,128,13,128,17,128,54,128,214,128,229,128,218,128,195,128,196,128,204,128,225,128,219,128,206,128,222,128,228,128,221,128,244,129,34,130,231,130,3,131,5,131,227,130,219,130,230,130,4,131,229,130,2,131,9,131,210,130,215,130,241,130,1,131,220,130,212,130,209,130,222,130,211,130,223,130,239,130,6,131,80,134,121,134,123,134,122,134,77,136,107,136,129,137,212,137,8,138,2,138,3,138,158,140,160,140,116,141,115,141,180,141,205,142,204,142,240,143,230,143,226,143,234,143,229,143,237,143,235,143,228,143,232,143,202,144,206,144,193,144,195,144,75,145,74,145,205,145,130,149,80,150,75,150,76,150,77,150,98,151,105,151,203,151,237,151,243,151,1,152,168,152,219,152,223,152,150,153,153,153,88,78,179,78,12,80,13,80,35,80,239,79,38,80,37,80,248,79,41,80,22,80,6,80,60,80,31,80,26,80,18,80,17,80,250,79,0,80,20,80,40,80,241,79,33,80,11,80,25,80,24,80,243,79,238,79,45,80,42,80,254,79,43,80,9,80,124,81,164,81,165,81,162,81,205,81,204,81,198,81,203,81,86,82,92,82,84,82,91,82,93,82,42,83,127,83,159,83,157,83,223,83,232,84,16,85,1,85,55,85,252,84,229,84,242,84,6,85,250,84,20,85,233,84,237,84,225,84,9,85,238,84,234,84,230,84,39,85,7,85,253,84,15,85,3,87,4,87,194,87,212,87,203,87,195,87,9,88,15,89,87,89,88,89,90,89,17,90,24,90,28,90,31,90,27,90,19,90,236,89,32,90,35,90,41,90,37,90,12,90,9,90,107,91,88,92,176,91,179,91,182,91,180,91,174,91,181,91,185,91,184,91,4,92,81,92,85,92,80,92,237,92,253,92,251,92,234,92,232,92,240,92,246,92,1,93,244,92,238,93,45,94,43,94,171,94,173,94,167,94,49,95,146,95,145,95,144,95,89,96,99,96,101,96,80,96,85,96,109,96,105,96,111,96,132,96,159,96,154,96,141,96,148,96,140,96,133,96,150,96,71,98,243,98,8,99,255,98,78,99,62,99,47,99,85,99,66,99,70,99,79,99,73,99,58,99,80,99,61,99,42,99,43,99,40,99,77,99,76,99,72,101,73,101,153,101,193,101,197,101,66,102,73,102,79,102,67,102,82,102,76,102,69,102,65,102,248,102,20,103,21,103,23,103,33,104,56,104,72,104,70,104,83,104,57,104,66,104,84,104,41,104,179,104,23,104,76,104,81,104,61,104,244,103,80,104,64,104,60,104,67,104,42,104,69,104,19,104,24,104,65,104,138,107,137,107,183,107,35,108,39,108,40,108,38,108,36,108,240,108,106,109,149,109,136,109,135,109,102,109,120,109,119,109,89,109,147,109,108,109,137,109,110,109,90,109,116,109,105,109,140,109,138,109,121,109,133,109,101,109,148,109,202,112,216,112,228,112,217,112,200,112,207,112,57,114,121,114,252,114,249,114,253,114,248,114,247,114,134,115,237,115,9,116,238,115,224,115,234,115,222,115,84,117,93,117,92,117,90,117,89,117,190,117,197,117,199,117,178,117,179,117,189,117,188,117,185,117,194,117,184,117,139,118,176,118,202,118,205,118,206,118,41,119,31,119,32,119,40,119,233,119,48,120,39,120,56,120,29,120,52,120,55,120,37,120,45,120,32,120,31,120,50,120,85,121,80,121,96,121,95,121,86,121,94,121,93,121,87,121,90,121,228,121,227,121,231,121,223,121,230,121,233,121,216,121,132,122,136,122,217,122,6,123,17,123,137,124,33,125,23,125,11,125,10,125,32,125,34,125,20,125,16,125,21,125,26,125,28,125,13,125,25,125,27,125,58,127,95,127,148,127,197,127,193,127,6,128,24,128,21,128,25,128,23,128,61,128,63,128,241,128,2,129,240,128,5,129,237,128,244,128,6,129,248,128,243,128,8,129,253,128,10,129,252,128,239,128,237,129,236,129,0,130,16,130,42,130,43,130,40,130,44,130,187,130,43,131,82,131,84,131,74,131,56,131,80,131,73,131,53,131,52,131,79,131,50,131,57,131,54,131,23,131,64,131,49,131,40,131,67,131,84,134,138,134,170,134,147,134,164,134,169,134,140,134,163,134,156,134,112,136,119,136,129,136,130,136,125,136,121,136,24,138,16,138,14,138,12,138,21,138,10,138,23,138,19,138,22,138,15,138,17,138,72,140,122,140,121,140,161,140,162,140,119,141,172,142,210,142,212,142,207,142,177,143,1,144,6,144,247,143,0,144,250,143,244,143,3,144,253,143,5,144,248,143,149,144,225,144,221,144,226,144,82,145,77,145,76,145,216,145,221,145,215,145,220,145,217,145,131,149,98,150,99,150,97,150,91,150,93,150,100,150,88,150,94,150,187,150,226,152,172,153,168,154,216,154,37,155,50,155,60,155,126,78,122,80,125,80,92,80,71,80,67,80,76,80,90,80,73,80,101,80,118,80,78,80,85,80,117,80,116,80,119,80,79,80,15,80,111,80,109,80,92,81,149,81,240,81,106,82,111,82,210,82,217,82,216,82,213,82,16,83,15,83,25,83,63,83,64,83,62,83,195,83,252,102,70,85,106,85,102,85,68,85,94,85,97,85,67,85,74,85,49,85,86,85,79,85,85,85,47,85,100,85,56,85,46,85,92,85,44,85,99,85,51,85,65,85,87,85,8,87,11,87,9,87,223,87,5,88,10,88,6,88,224,87,228,87,250,87,2,88,53,88,247,87,249,87,32,89,98,89,54,90,65,90,73,90,102,90,106,90,64,90,60,90,98,90,90,90,70,90,74,90,112,91,199,91,197,91,196,91,194,91,191,91,198,91,9,92,8,92,7,92,96,92,92,92,93,92,7,93,6,93,14,93,27,93,22,93,34,93,17,93,41,93,20,93,25,93,36,93,39,93,23,93,226,93,56,94,54,94,51,94,55,94,183,94,184,94,182,94,181,94,190,94,53,95,55,95,87,95,108,95,105,95,107,95,151,95,153,95,158,95,152,95,161,95,160,95,156,95,127,96,163,96,137,96,160,96,168,96,203,96,180,96,230,96,189,96,197,96,187,96,181,96,220,96,188,96,216,96,213,96,198,96,223,96,184,96,218,96,199,96,26,98,27,98,72,98,160,99,167,99,114,99,150,99,162,99,165,99,119,99,103,99,152,99,170,99,113,99,169,99,137,99,131,99,155,99,107,99,168,99,132,99,136,99,153,99,161,99,172,99,146,99,143,99,128,99,123,99,105,99,104,99,122,99,93,101,86,101,81,101,89,101,87,101,95,85,79,101,88,101,85,101,84,101,156,101,155,101,172,101,207,101,203,101,204,101,206,101,93,102,90,102,100,102,104,102,102,102,94,102,249,102,215,82,27,103,129,104,175,104,162,104,147,104,181,104,127,104,118,104,177,104,167,104,151,104,176,104,131,104,196,104,173,104,134,104,133,104,148,104,157,104,168,104,159,104,161,104,130,104,50,107,186,107,235,107,236,107,43,108,142,109,188,109,243,109,217,109,178,109,225,109,204,109,228,109,251,109,250,109,5,110,199,109,203,109,175,109,209,109,174,109,222,109,249,109,184,109,247,109,245,109,197,109,210,109,26,110,181,109,218,109,235,109,216,109,234,109,241,109,238,109,232,109,198,109,196,109,170,109,236,109,191,109,230,109,249,112,9,113,10,113,253,112,239,112,61,114,125,114,129,114,28,115,27,115,22,115,19,115,25,115,135,115,5,116,10,116,3,116,6,116,254,115,13,116,224,116,246,116,247,116,28,117,34,117,101,117,102,117,98,117,112,117,143,117,212,117,213,117,181,117,202,117,205,117,142,118,212,118,210,118,219,118,55,119,62,119,60,119,54,119,56,119,58,119,107,120,67,120,78,120,101,121,104,121,109,121,251,121,146,122,149,122,32,123,40,123,27,123,44,123,38,123,25,123,30,123,46,123,146,124,151,124,149,124,70,125,67,125,113,125,46,125,57,125,60,125,64,125,48,125,51,125,68,125,47,125,66,125,50,125,49,125,61,127,158,127,154,127,204,127,206,127,210,127,28,128,74,128,70,128,47,129,22,129,35,129,43,129,41,129,48,129,36,129,2,130,53,130,55,130,54,130,57,130,142,131,158,131,152,131,120,131,162,131,150,131,189,131,171,131,146,131,138,131,147,131,137,131,160,131,119,131,123,131,124,131,134,131,167,131,85,134,106,95,199,134,192,134,182,134,196,134,181,134,198,134,203,134,177,134,175,134,201,134,83,136,158,136,136,136,171,136,146,136,150,136,141,136,139,136,147,137,143,137,42,138,29,138,35,138,37,138,49,138,45,138,31,138,27,138,34,138,73,140,90,140,169,140,172,140,171,140,168,140,170,140,167,140,103,141,102,141,190,141,186,141,219,142,223,142,25,144,13,144,26,144,23,144,35,144,31,144,29,144,16,144,21,144,30,144,32,144,15,144,34,144,22,144,27,144,20,144,232,144,237,144,253,144,87,145,206,145,245,145,230,145,227,145,231,145,237,145,233,145,137,149,106,150,117,150,115,150,120,150,112,150,116,150,118,150,119,150,108,150,192,150,234,150,233,150,224,122,223,122,2,152,3,152,90,155,229,156,117,158,127,158,165,158,187,158,162,80,141,80,133,80,153,80,145,80,128,80,150,80,152,80,154,80,0,103,241,81,114,82,116,82,117,82,105,82,222,82,221,82,219,82,90,83,165,83,123,85,128,85,167,85,124,85,138,85,157,85,152,85,130,85,156,85,170,85,148,85,135,85,139,85,131,85,179,85,174,85,159,85,62,85,178,85,154,85,187,85,172,85,177,85,126,85,137,85,171,85,153,85,13,87,47,88,42,88,52,88,36,88,48,88,49,88,33,88,29,88,32,88,249,88,250,88,96,89,119,90,154,90,127,90,146,90,155,90,167,90,115,91,113,91,210,91,204,91,211,91,208,91,10,92,11,92,49,92,76,93,80,93,52,93,71,93,253,93,69,94,61,94,64,94,67,94,126,94,202,94,193,94,194,94,196,94,60,95,109,95,169,95,170,95,168,95,209,96,225,96,178,96,182,96,224,96,28,97,35,97,250,96,21,97,240,96,251,96,244,96,104,97,241,96,14,97,246,96,9,97,0,97,18,97,31,98,73,98,163,99,140,99,207,99,192,99,233,99,201,99,198,99,205,99,210,99,227,99,208,99,225,99,214,99,237,99,238,99,118,99,244,99,234,99,219,99,82,100,218,99,249,99,94,101,102,101,98,101,99,101,145,101,144,101,175,101,110,102,112,102,116,102,118,102,111,102,145,102,122,102,126,102,119,102,254,102,255,102,31,103,29,103,250,104,213,104,224,104,216,104,215,104,5,105,223,104,245,104,238,104,231,104,249,104,210,104,242,104,227,104,203,104,205,104,13,105,18,105,14,105,201,104,218,104,110,105,251,104,62,107,58,107,61,107,152,107,150,107,188,107,239,107,46,108,47,108,44,108,47,110,56,110,84,110,33,110,50,110,103,110,74,110,32,110,37,110,35,110,27,110,91,110,88,110,36,110,86,110,110,110,45,110,38,110,111,110,52,110,77,110,58,110,44,110,67,110,29,110,62,110,203,110,137,110,25,110,78,110,99,110,68,110,114,110,105,110,95,110,25,113,26,113,38,113,48,113,33,113,54,113,110,113,28,113,76,114,132,114,128,114,54,115,37,115,52,115,41,115,58,116,42,116,51,116,34,116,37,116,53,116,54,116,52,116,47,116,27,116,38,116,40,116,37,117,38,117,107,117,106,117,226,117,219,117,227,117,217,117,216,117,222,117,224,117,123,118,124,118,150,118,147,118,180,118,220,118,79,119,237,119,93,120,108,120,111,120,13,122,8,122,11,122,5,122,0,122,152,122,151,122,150,122,229,122,227,122,73,123,86,123,70,123,80,123,82,123,84,123,77,123,75,123,79,123,81,123,159,124,165,124,94,125,80,125,104,125,85,125,43,125,110,125,114,125,97,125,102,125,98,125,112,125,115,125,132,85,212,127,213,127,11,128,82,128,133,128,85,129,84,129,75,129,81,129,78,129,57,129,70,129,62,129,76,129,83,129,116,129,18,130,28,130,233,131,3,132,248,131,13,132,224,131,197,131,11,132,193,131,239,131,241,131,244,131,87,132,10,132,240,131,12,132,204,131,253,131,242,131,202,131,56,132,14,132,4,132,220,131,7,132,212,131,223,131,91,134,223,134,217,134,237,134,212,134,219,134,228,134,208,134,222,134,87,136,193,136,194,136,177,136,131,137,150,137,59,138,96,138,85,138,94,138,60,138,65,138,84,138,91,138,80,138,70,138,52,138,58,138,54,138,86,138,97,140,130,140,175,140,188,140,179,140,189,140,193,140,187,140,192,140,180,140,183,140,182,140,191,140,184,140,138,141,133,141,129,141,206,141,221,141,203,141,218,141,209,141,204,141,219,141,198,141,251,142,248,142,252,142,156,143,46,144,53,144,49,144,56,144,50,144,54,144,2,145,245,144,9,145,254,144,99,145,101,145,207,145,20,146,21,146,35,146,9,146,30,146,13,146,16,146,7,146,17,146,148,149,143,149,139,149,145,149,147,149,146,149,142,149,138,150,142,150,139,150,125,150,133,150,134,150,141,150,114,150,132,150,193,150,197,150,196,150,198,150,199,150,239,150,242,150,204,151,5,152,6,152,8,152,231,152,234,152,239,152,233,152,242,152,237,152,174,153,173,153,195,158,205,158,209,158,130,78,173,80,181,80,178,80,179,80,197,80,190,80,172,80,183,80,187,80,175,80,199,80,127,82,119,82,125,82,223,82,230,82,228,82,226,82,227,82,47,83,223,85,232,85,211,85,230,85,206,85,220,85,199,85,209,85,227,85,228,85,239,85,218,85,225,85,197,85,198,85,229,85,201,85,18,87,19,87,94,88,81,88,88,88,87,88,90,88,84,88,107,88,76,88,109,88,74,88,98,88,82,88,75,88,103,89,193,90,201,90,204,90,190,90,189,90,188,90,179,90,194,90,178,90,105,93,111,93,76,94,121,94,201,94,200,94,18,95,89,95,172,95,174,95,26,97,15,97,72,97,31,97,243,96,27,97,249,96,1,97,8,97,78,97,76,97,68,97,77,97,62,97,52,97,39,97,13,97,6,97,55,97,33,98,34,98,19,100,62,100,30,100,42,100,45,100,61,100,44,100,15,100,28,100,20,100,13,100,54,100,22,100,23,100,6,100,108,101,159,101,176,101,151,102,137,102,135,102,136,102,150,102,132,102,152,102,141,102,3,103,148,105,109,105,90,105,119,105,96,105,84,105,117,105,48,105,130,105,74,105,104,105,107,105,94,105,83,105,121,105,134,105,93,105,99,105,91,105,71,107,114,107,192,107,191,107,211,107,253,107,162,110,175,110,211,110,182,110,194,110,144,110,157,110,199,110,197,110,165,110,152,110,188,110,186,110,171,110,209,110,150,110,156,110,196,110,212,110,170,110,167,110,180,110,78,113,89,113,105,113,100,113,73,113,103,113,92,113,108,113,102,113,76,113,101,113,94,113,70,113,104,113,86,113,58,114,82,114,55,115,69,115,63,115,62,115,111,116,90,116,85,116,95,116,94,116,65,116,63,116,89,116,91,116,92,116,118,117,120,117,0,118,240,117,1,118,242,117,241,117,250,117,255,117,244,117,243,117,222,118,223,118,91,119,107,119,102,119,94,119,99,119,121,119,106,119,108,119,92,119,101,119,104,119,98,119,238,119,142,120,176,120,151,120,152,120,140,120,137,120,124,120,145,120,147,120,127,120,122,121,127,121,129,121,44,132,189,121,28,122,26,122,32,122,20,122,31,122,30,122,159,122,160,122,119,123,192,123,96,123,110,123,103,123,177,124,179,124,181,124,147,125,121,125,145,125,129,125,143,125,91,125,110,127,105,127,106,127,114,127,169,127,168,127,164,127,86,128,88,128,134,128,132,128,113,129,112,129,120,129,101,129,110,129,115,129,107,129,121,129,122,129,102,129,5,130,71,130,130,132,119,132,61,132,49,132,117,132,102,132,107,132,73,132,108,132,91,132,60,132,53,132,97,132,99,132,105,132,109,132,70,132,94,134,92,134,95,134,249,134,19,135,8,135,7,135,0,135,254,134,251,134,2,135,3,135,6,135,10,135,89,136,223,136,212,136,217,136,220,136,216,136,221,136,225,136,202,136,213,136,210,136,156,137,227,137,107,138,114,138,115,138,102,138,105,138,112,138,135,138,124,138,99,138,160,138,113,138,133,138,109,138,98,138,110,138,108,138,121,138,123,138,62,138,104,138,98,140,138,140,137,140,202,140,199,140,200,140,196,140,178,140,195,140,194,140,197,140,225,141,223,141,232,141,239,141,243,141,250,141,234,141,228,141,230,141,178,142,3,143,9,143,254,142,10,143,159,143,178,143,75,144,74,144,83,144,66,144,84,144,60,144,85,144,80,144,71,144,79,144,78,144,77,144,81,144,62,144,65,144,18,145,23,145,108,145,106,145,105,145,201,145,55,146,87,146,56,146,61,146,64,146,62,146,91,146,75,146,100,146,81,146,52,146,73,146,77,146,69,146,57,146,63,146,90,146,152,149,152,150,148,150,149,150,205,150,203,150,201,150,202,150,247,150,251,150,249,150,246,150,86,151,116,151,118,151,16,152,17,152,19,152,10,152,18,152,12,152,252,152,244,152,253,152,254,152,179,153,177,153,180,153,225,154,233,156,130,158,14,159,19,159,32,159,231,80,238,80,229,80,214,80,237,80,218,80,213,80,207,80,209,80,241,80,206,80,233,80,98,81,243,81,131,82,130,82,49,83,173,83,254,85,0,86,27,86,23,86,253,85,20,86,6,86,9,86,13,86,14,86,247,85,22,86,31,86,8,86,16,86,246,85,24,87,22,87,117,88,126,88,131,88,147,88,138,88,121,88,133,88,125,88,253,88,37,89,34,89,36,89,106,89,105,89,225,90,230,90,233,90,215,90,214,90,216,90,227,90,117,91,222,91,231,91,225,91,229,91,230,91,232,91,226,91,228,91,223,91,13,92,98,92,132,93,135,93,91,94,99,94,85,94,87,94,84,94,211,94,214,94,10,95,70,95,112,95,185,95,71,97,63,97,75,97,119,97,98,97,99,97,95,97,90,97,88,97,117,97,42,98,135,100,88,100,84,100,164,100,120,100,95,100,122,100,81,100,103,100,52,100,109,100,123,100,114,101,161,101,215,101,214,101,162,102,168,102,157,102,156,105,168,105,149,105,193,105,174,105,211,105,203,105,155,105,183,105,187,105,171,105,180,105,208,105,205,105,173,105,204,105,166,105,195,105,163,105,73,107,76,107,51,108,51,111,20,111,254,110,19,111,244,110,41,111,62,111,32,111,44,111,15,111,2,111,34,111,255,110,239,110,6,111,49,111,56,111,50,111,35,111,21,111,43,111,47,111,136,111,42,111,236,110,1,111,242,110,204,110,247,110,148,113,153,113,125,113,138,113,132,113,146,113,62,114,146,114,150,114,68,115,80,115,100,116,99,116,106,116,112,116,109,116,4,117,145,117,39,118,13,118,11,118,9,118,19,118,225,118,227,118,132,119,125,119,127,119,97,119,193,120,159,120,167,120,179,120,169,120,163,120,142,121,143,121,141,121,46,122,49,122,170,122,169,122,237,122,239,122,161,123,149,123,139,123,117,123,151,123,157,123,148,123,143,123,184,123,135,123,132,123,185,124,189,124,190,124,187,125,176,125,156,125,189,125,190,125,160,125,202,125,180,125,178,125,177,125,186,125,162,125,191,125,181,125,184,125,173,125,210,125,199,125,172,125,112,127,224,127,225,127,223,127,94,128,90,128,135,128,80,129,128,129,143,129,136,129,138,129,127,129,130,129,231,129,250,129,7,130,20,130,30,130,75,130,201,132,191,132,198,132,196,132,153,132,158,132,178,132,156,132,203,132,184,132,192,132,211,132,144,132,188,132,209,132,202,132,63,135,28,135,59,135,34,135,37,135,52,135,24,135,85,135,55,135,41,135,243,136,2,137,244,136,249,136,248,136,253,136,232,136,26,137,239,136,166,138,140,138,158,138,163,138,141,138,161,138,147,138,164,138,170,138,165,138,168,138,152,138,145,138,154,138,167,138,106,140,141,140,140,140,211,140,209,140,210,140,107,141,153,141,149,141,252,141,20,143,18,143,21,143,19,143,163,143,96,144,88,144,92,144,99,144,89,144,94,144,98,144,93,144,91,144,25,145,24,145,30,145,117,145,120,145,119,145,116,145,120,146,128,146,133,146,152,146,150,146,123,146,147,146,156,146,168,146,124,146,145,146,161,149,168,149,169,149,163,149,165,149,164,149,153,150,156,150,155,150,204,150,210,150,0,151,124,151,133,151,246,151,23,152,24,152,175,152,177,152,3,153,5,153,12,153,9,153,193,153,175,154,176,154,230,154,65,155,66,155,244,156,246,156,243,156,188,158,59,159,74,159,4,81,0,81,251,80,245,80,249,80,2,81,8,81,9,81,5,81,220,81,135,82,136,82,137,82,141,82,138,82,240,82,178,83,46,86,59,86,57,86,50,86,63,86,52,86,41,86,83,86,78,86,87,86,116,86,54,86,47,86,48,86,128,88,159,88,158,88,179,88,156,88,174,88,169,88,166,88,109,89,9,91,251,90,11,91,245,90,12,91,8,91,238,91,236,91,233,91,235,91,100,92,101,92,157,93,148,93,98,94,95,94,97,94,226,94,218,94,223,94,221,94,227,94,224,94,72,95,113,95,183,95,181,95,118,97,103,97,110,97,93,97,85,97,130,97,124,97,112,97,107,97,126,97,167,97,144,97,171,97,142,97,172,97,154,97,164,97,148,97,174,97,46,98,105,100,111,100,121,100,158,100,178,100,136,100,144,100,176,100,165,100,147,100,149,100,169,100,146,100,174,100,173,100,171,100,154,100,172,100,153,100,162,100,179,100,117,101,119,101,120,101,174,102,171,102,180,102,177,102,35,106,31,106,232,105,1,106,30,106,25,106,253,105,33,106,19,106,10,106,243,105,2,106,5,106,237,105,17,106,80,107,78,107,164,107,197,107,198,107,63,111,124,111,132,111,81,111,102,111,84,111,134,111,109,111,91,111,120,111,110,111,142,111,122,111,112,111,100,111,151,111,88,111,213,110,111,111,96,111,95,111,159,113,172,113,177,113,168,113,86,114,155,114,78,115,87,115,105,116,139,116,131,116,126,116,128,116,127,117,32,118,41,118,31,118,36,118,38,118,33,118,34,118,154,118,186,118,228,118,142,119,135,119,140,119,145,119,139,119,203,120,197,120,186,120,202,120,190,120,213,120,188,120,208,120,63,122,60,122,64,122,61,122,55,122,59,122,175,122,174,122,173,123,177,123,196,123,180,123,198,123,199,123,193,123,160,123,204,123,202,124,224,125,244,125,239,125,251,125,216,125,236,125,221,125,232,125,227,125,218,125,222,125,233,125,158,125,217,125,242,125,249,125,117,127,119,127,175,127,233,127,38,128,155,129,156,129,157,129,160,129,154,129,152,129,23,133,61,133,26,133,238,132,44,133,45,133,19,133,17,133,35,133,33,133,20,133,236,132,37,133,255,132,6,133,130,135,116,135,118,135,96,135,102,135,120,135,104,135,89,135,87,135,76,135,83,135,91,136,93,136,16,137,7,137,18,137,19,137,21,137,10,137,188,138,210,138,199,138,196,138,149,138,203,138,248,138,178,138,201,138,194,138,191,138,176,138,214,138,205,138,182,138,185,138,219,138,76,140,78,140,108,140,224,140,222,140,230,140,228,140,236,140,237,140,226,140,227,140,220,140,234,140,225,140,109,141,159,141,163,141,43,142,16,142,29,142,34,142,15,142,41,142,31,142,33,142,30,142,186,142,29,143,27,143,31,143,41,143,38,143,42,143,28,143,30,143,37,143,105,144,110,144,104,144,109,144,119,144,48,145,45,145,39,145,49,145,135,145,137,145,139,145,131,145,197,146,187,146,183,146,234,146,172,146,228,146,193,146,179,146,188,146,210,146,199,146,240,146,178,146,173,149,177,149,4,151,6,151,7,151,9,151,96,151,141,151,139,151,143,151,33,152,43,152,28,152,179,152,10,153,19,153,18,153,24,153,221,153,208,153,223,153,219,153,209,153,213,153,210,153,217,153,183,154,238,154,239,154,39,155,69,155,68,155,119,155,111,155,6,157,9,157,3,157,169,158,190,158,206,158,168,88,82,159,18,81,24,81,20,81,16,81,21,81,128,81,170,81,221,81,145,82,147,82,243,82,89,86,107,86,121,86,105,86,100,86,120,86,106,86,104,86,101,86,113,86,111,86,108,86,98,86,118,86,193,88,190,88,199,88,197,88,110,89,29,91,52,91,120,91,240,91,14,92,74,95,178,97,145,97,169,97,138,97,205,97,182,97,190,97,202,97,200,97,48,98,197,100,193,100,203,100,187,100,188,100,218,100,196,100,199,100,194,100,205,100,191,100,210,100,212,100,190,100,116,101,198,102,201,102,185,102,196,102,199,102,184,102,61,106,56,106,58,106,89,106,107,106,88,106,57,106,68,106,98,106,97,106,75,106,71,106,53,106,95,106,72,106,89,107,119,107,5,108,194,111,177,111,161,111,195,111,164,111,193,111,167,111,179,111,192,111,185,111,182,111,166,111,160,111,180,111,190,113,201,113,208,113,210,113,200,113,213,113,185,113,206,113,217,113,220,113,195,113,196,113,104,115,156,116,163,116,152,116,159,116,158,116,226,116,12,117,13,117,52,118,56,118,58,118,231,118,229,118,160,119,158,119,159,119,165,119,232,120,218,120,236,120,231,120,166,121,77,122,78,122,70,122,76,122,75,122,186,122,217,123,17,124,201,123,228,123,219,123,225,123,233,123,230,123,213,124,214,124,10,126,17,126,8,126,27,126,35,126,30,126,29,126,9,126,16,126,121,127,178,127,240,127,241,127,238,127,40,128,179,129,169,129,168,129,251,129,8,130,88,130,89,130,74,133,89,133,72,133,104,133,105,133,67,133,73,133,109,133,106,133,94,133,131,135,159,135,158,135,162,135,141,135,97,136,42,137,50,137,37,137,43,137,33,137,170,137,166,137,230,138,250,138,235,138,241,138,0,139,220,138,231,138,238,138,254,138,1,139,2,139,247,138,237,138,243,138,246,138,252,138,107,140,109,140,147,140,244,140,68,142,49,142,52,142,66,142,57,142,53,142,59,143,47,143,56,143,51,143,168,143,166,143,117,144,116,144,120,144,114,144,124,144,122,144,52,145,146,145,32,147,54,147,248,146,51,147,47,147,34,147,252,146,43,147,4,147,26,147,16,147,38,147,33,147,21,147,46,147,25,147,187,149,167,150,168,150,170,150,213,150,14,151,17,151,22,151,13,151,19,151,15,151,91,151,92,151,102,151,152,151,48,152,56,152,59,152,55,152,45,152,57,152,36,152,16,153,40,153,30,153,27,153,33,153,26,153,237,153,226,153,241,153,184,154,188,154,251,154,237,154,40,155,145,155,21,157,35,157,38,157,40,157,18,157,27,157,216,158,212,158,141,159,156,159,42,81,31,81,33,81,50,81,245,82,142,86,128,86,144,86,133,86,135,86,143,86,213,88,211,88,209,88,206,88,48,91,42,91,36,91,122,91,55,92,104,92,188,93,186,93,189,93,184,93,107,94,76,95,189,95,201,97,194,97,199,97,230,97,203,97,50,98,52,98,206,100,202,100,216,100,224,100,240,100,230,100,236,100,241,100,226,100,237,100,130,101,131,101,217,102,214,102,128,106,148,106,132,106,162,106,156,106,219,106,163,106,126,106,151,106,144,106,160,106,92,107,174,107,218,107,8,108,216,111,241,111,223,111,224,111,219,111,228,111,235,111,239,111,128,111,236,111,225,111,233,111,213,111,238,111,240,111,231,113,223,113,238,113,230,113,229,113,237,113,236,113,244,113,224,113,53,114,70,114,112,115,114,115,169,116,176,116,166,116,168,116,70,118,66,118,76,118,234,118,179,119,170,119,176,119,172,119,167,119,173,119,239,119,247,120,250,120,244,120,239,120,1,121,167,121,170,121,87,122,191,122,7,124,13,124,254,123,247,123,12,124,224,123,224,124,220,124,222,124,226,124,223,124,217,124,221,124,46,126,62,126,70,126,55,126,50,126,67,126,43,126,61,126,49,126,69,126,65,126,52,126,57,126,72,126,53,126,63,126,47,126,68,127,243,127,252,127,113,128,114,128,112,128,111,128,115,128,198,129,195,129,186,129,194,129,192,129,191,129,189,129,201,129,190,129,232,129,9,130,113,130,170,133,132,133,126,133,156,133,145,133,148,133,175,133,155,133,135,133,168,133,138,133,103,134,192,135,209,135,179,135,210,135,198,135,171,135,187,135,186,135,200,135,203,135,59,137,54,137,68,137,56,137,61,137,172,137,14,139,23,139,25,139,27,139,10,139,32,139,29,139,4,139,16,139,65,140,63,140,115,140,250,140,253,140,252,140,248,140,251,140,168,141,73,142,75,142,72,142,74,142,68,143,62,143,66,143,69,143,63,143,127,144,125,144,132,144,129,144,130,144,128,144,57,145,163,145,158,145,156,145,77,147,130,147,40,147,117,147,74,147,101,147,75,147,24,147,126,147,108,147,91,147,112,147,90,147,84,147,202,149,203,149,204,149,200,149,198,149,177,150,184,150,214,150,28,151,30,151,160,151,211,151,70,152,182,152,53,153,1,154,255,153,174,155,171,155,170,155,173,155,59,157,63,157,139,158,207,158,222,158,220,158,221,158,219,158,62,159,75,159,226,83,149,86,174,86,217,88,216,88,56,91,93,95,227,97,51,98,244,100,242,100,254,100,6,101,250,100,251,100,247,100,183,101,220,102,38,103,179,106,172,106,195,106,187,106,184,106,194,106,174,106,175,106,95,107,120,107,175,107,9,112,11,112,254,111,6,112,250,111,17,112,15,112,251,113,252,113,254,113,248,113,119,115,117,115,167,116,191,116,21,117,86,118,88,118,82,118,189,119,191,119,187,119,188,119,14,121,174,121,97,122,98,122,96,122,196,122,197,122,43,124,39,124,42,124,30,124,35,124,33,124,231,124,84,126,85,126,94,126,90,126,97,126,82,126,89,126,72,127,249,127,251,127,119,128,118,128,205,129,207,129,10,130,207,133,169,133,205,133,208,133,201,133,176,133,186,133,185,133,166,133,239,135,236,135,242,135,224,135,134,137,178,137,244,137,40,139,57,139,44,139,43,139,80,140,5,141,89,142,99,142,102,142,100,142,95,142,85,142,192,142,73,143,77,143,135,144,131,144,136,144,171,145,172,145,208,145,148,147,138,147,150,147,162,147,179,147,174,147,172,147,176,147,152,147,154,147,151,147,212,149,214,149,208,149,213,149,226,150,220,150,217,150,219,150,222,150,36,151,163,151,166,151,173,151,249,151,77,152,79,152,76,152,78,152,83,152,186,152,62,153,63,153,61,153,46,153,165,153,14,154,193,154,3,155,6,155,79,155,78,155,77,155,202,155,201,155,253,155,200,155], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+234596);
/* memory initializer */ allocate([192,155,81,157,93,157,96,157,224,158,21,159,44,159,51,81,165,86,222,88,223,88,226,88,245,91,144,159,236,94,242,97,247,97,246,97,245,97,0,101,15,101,224,102,221,102,229,106,221,106,218,106,211,106,27,112,31,112,40,112,26,112,29,112,21,112,24,112,6,114,13,114,88,114,162,114,120,115,122,115,189,116,202,116,227,116,135,117,134,117,95,118,97,118,199,119,25,121,177,121,107,122,105,122,62,124,63,124,56,124,61,124,55,124,64,124,107,126,109,126,121,126,105,126,106,126,133,127,115,126,182,127,185,127,184,127,216,129,233,133,221,133,234,133,213,133,228,133,229,133,247,133,251,135,5,136,13,136,249,135,254,135,96,137,95,137,86,137,94,137,65,139,92,139,88,139,73,139,90,139,78,139,79,139,70,139,89,139,8,141,10,141,124,142,114,142,135,142,118,142,108,142,122,142,116,142,84,143,78,143,173,143,138,144,139,144,177,145,174,145,225,147,209,147,223,147,195,147,200,147,220,147,221,147,214,147,226,147,205,147,216,147,228,147,215,147,232,147,220,149,180,150,227,150,42,151,39,151,97,151,220,151,251,151,94,152,88,152,91,152,188,152,69,153,73,153,22,154,25,154,13,155,232,155,231,155,214,155,219,155,137,157,97,157,114,157,106,157,108,157,146,158,151,158,147,158,180,158,248,82,168,86,183,86,182,86,180,86,188,86,228,88,64,91,67,91,125,91,246,91,201,93,248,97,250,97,24,101,20,101,25,101,230,102,39,103,236,106,62,112,48,112,50,112,16,114,123,115,207,116,98,118,101,118,38,121,42,121,44,121,43,121,199,122,246,122,76,124,67,124,77,124,239,124,240,124,174,143,125,126,124,126,130,126,76,127,0,128,218,129,102,130,251,133,249,133,17,134,250,133,6,134,11,134,7,134,10,134,20,136,21,136,100,137,186,137,248,137,112,139,108,139,102,139,111,139,95,139,107,139,15,141,13,141,137,142,129,142,133,142,130,142,180,145,203,145,24,148,3,148,253,147,225,149,48,151,196,152,82,153,81,153,168,153,43,154,48,154,55,154,53,154,19,156,13,156,121,158,181,158,232,158,47,159,95,159,99,159,97,159,55,81,56,81,193,86,192,86,194,86,20,89,108,92,205,93,252,97,254,97,29,101,28,101,149,101,233,102,251,106,4,107,250,106,178,107,76,112,27,114,167,114,214,116,212,116,105,118,211,119,80,124,143,126,140,126,188,127,23,134,45,134,26,134,35,136,34,136,33,136,31,136,106,137,108,137,189,137,116,139,119,139,125,139,19,141,138,142,141,142,139,142,95,143,175,143,186,145,46,148,51,148,53,148,58,148,56,148,50,148,43,148,226,149,56,151,57,151,50,151,255,151,103,152,101,152,87,153,69,154,67,154,64,154,62,154,207,154,84,155,81,155,45,156,37,156,175,157,180,157,194,157,184,157,157,158,239,158,25,159,92,159,102,159,103,159,60,81,59,81,200,86,202,86,201,86,127,91,212,93,210,93,78,95,255,97,36,101,10,107,97,107,81,112,88,112,128,115,228,116,138,117,110,118,108,118,179,121,96,124,95,124,126,128,125,128,223,129,114,137,111,137,252,137,128,139,22,141,23,141,145,142,147,142,97,143,72,145,68,148,81,148,82,148,61,151,62,151,195,151,193,151,107,152,85,153,85,154,77,154,210,154,26,155,73,156,49,156,62,156,59,156,211,157,215,157,52,159,108,159,106,159,148,159,204,86,214,93,0,98,35,101,43,101,42,101,236,102,16,107,218,116,202,122,100,124,99,124,101,124,147,126,150,126,148,126,226,129,56,134,63,134,49,136,138,139,144,144,143,144,99,148,96,148,100,148,104,151,111,152,92,153,90,154,91,154,87,154,211,154,212,154,209,154,84,156,87,156,86,156,229,157,159,158,244,158,209,86,233,88,44,101,94,112,113,118,114,118,215,119,80,127,136,127,54,136,57,136,98,136,147,139,146,139,150,139,119,130,27,141,192,145,106,148,66,151,72,151,68,151,198,151,112,152,95,154,34,155,88,155,95,156,249,157,250,157,124,158,125,158,7,159,119,159,114,159,243,94,22,107,99,112,108,124,110,124,59,136,192,137,161,142,193,145,114,148,112,148,113,152,94,153,214,154,35,155,204,158,100,112,218,119,154,139,119,148,201,151,98,154,101,154,156,126,156,139,170,142,197,145,125,148,126,148,124,148,119,156,120,156,247,158,84,140,127,148,26,158,40,114,106,154,49,155,27,158,30,158,114,124,96,36,97,36,98,36,99,36,100,36,101,36,102,36,103,36,104,36,105,36,116,36,117,36,118,36,119,36,120,36,121,36,122,36,123,36,124,36,125,36,112,33,113,33,114,33,115,33,116,33,117,33,118,33,119,33,120,33,121,33,54,78,63,78,133,78,160,78,130,81,150,81,171,81,249,82,56,83,105,83,182,83,10,89,128,91,219,93,122,94,127,94,244,94,80,95,97,95,52,101,224,101,146,117,118,118,181,143,182,150,168,0,198,2,253,48,254,48,157,48,158,48,0,0,0,0,5,48,6,48,7,48,252,48,59,255,61,255,61,39,65,48,66,48,67,48,68,48,69,48,70,48,71,48,72,48,73,48,74,48,75,48,76,48,77,48,78,48,79,48,80,48,81,48,82,48,83,48,84,48,85,48,86,48,87,48,88,48,89,48,90,48,91,48,92,48,93,48,94,48,95,48,96,48,97,48,98,48,99,48,100,48,101,48,102,48,103,48,104,48,105,48,106,48,107,48,108,48,109,48,110,48,111,48,112,48,113,48,114,48,115,48,116,48,117,48,118,48,119,48,120,48,121,48,122,48,123,48,124,48,125,48,126,48,127,48,128,48,129,48,130,48,131,48,132,48,133,48,134,48,135,48,136,48,137,48,138,48,139,48,140,48,141,48,142,48,143,48,144,48,145,48,146,48,147,48,161,48,162,48,163,48,164,48,165,48,166,48,167,48,168,48,169,48,170,48,171,48,172,48,173,48,174,48,175,48,176,48,177,48,178,48,179,48,180,48,181,48,182,48,183,48,184,48,185,48,186,48,187,48,188,48,189,48,190,48,191,48,192,48,193,48,194,48,195,48,196,48,197,48,198,48,199,48,200,48,201,48,202,48,203,48,204,48,205,48,206,48,207,48,208,48,209,48,210,48,211,48,212,48,213,48,214,48,215,48,216,48,217,48,218,48,219,48,220,48,221,48,222,48,223,48,224,48,225,48,226,48,227,48,228,48,229,48,230,48,231,48,232,48,233,48,234,48,235,48,236,48,237,48,238,48,239,48,240,48,241,48,242,48,243,48,244,48,245,48,246,48,16,4,17,4,18,4,19,4,20,4,21,4,1,4,22,4,23,4,24,4,25,4,26,4,27,4,28,4,29,4,30,4,31,4,32,4,33,4,34,4,35,4,36,4,37,4,38,4,39,4,40,4,41,4,42,4,43,4,44,4,45,4,46,4,47,4,48,4,49,4,50,4,51,4,52,4,53,4,81,4,54,4,55,4,56,4,57,4,58,4,59,4,60,4,61,4,62,4,63,4,64,4,65,4,66,4,67,4,68,4,69,4,70,4,71,4,72,4,73,4,74,4,75,4,76,4,77,4,78,4,79,4,231,33,184,33,185,33,207,49,204,0,90,78,138,0,2,82,145,68,176,159,136,81,177,159,7,118,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,226,255,228,255,7,255,2,255,49,50,22,33,33,33,155,48,156,48,128,46,132,46,134,46,135,46,136,46,138,46,140,46,141,46,149,46,156,46,157,46,165,46,167,46,170,46,172,46,174,46,182,46,188,46,190,46,198,46,202,46,204,46,205,46,207,46,214,46,215,46,222,46,227,46,0,0,0,0,0,0,131,2,80,2,91,2,84,2,117,2,83,1,248,0,75,1,138,2,106,2,66,78,92,78,245,81,26,83,130,83,7,78,12,78,71,78,141,78,215,86,12,250,110,92,115,95,15,78,135,81,14,78,46,78,147,78,194,78,201,78,200,78,152,81,252,82,108,83,185,83,32,87,3,89,44,89,16,92,255,93,225,101,179,107,204,107,20,108,63,114,49,78,60,78,232,78,220,78,233,78,225,78,221,78,218,78,12,82,28,83,76,83,34,87,35,87,23,89,47,89,129,91,132,91,18,92,59,92,116,92,115,92,4,94,128,94,130,94,201,95,9,98,80,98,21,108,54,108,67,108,63,108,59,108,174,114,176,114,138,115,184,121,138,128,30,150,14,79,24,79,44,79,245,78,20,79,241,78,0,79,247,78,8,79,29,79,2,79,5,79,34,79,19,79,4,79,244,78,18,79,177,81,19,82,9,82,16,82,166,82,34,83,31,83,77,83,138,83,7,84,225,86,223,86,46,87,42,87,52,87,60,89,128,89,124,89,133,89,123,89,126,89,119,89,127,89,86,91,21,92,37,92,124,92,122,92,123,92,126,92,223,93,117,94,132,94,2,95,26,95,116,95,213,95,212,95,207,95,92,98,94,98,100,98,97,98,102,98,98,98,89,98,96,98,90,98,101,98,239,101,238,101,62,103,57,103,56,103,59,103,58,103,63,103,60,103,51,103,24,108,70,108,82,108,92,108,79,108,74,108,84,108,75,108,76,108,113,112,94,114,180,114,181,114,142,115,42,117,127,118,117,122,81,127,120,130,124,130,128,130,125,130,127,130,77,134,126,137,153,144,151,144,152,144,155,144,148,144,34,150,36,150,32,150,35,150,86,79,59,79,98,79,73,79,83,79,100,79,62,79,103,79,82,79,95,79,65,79,88,79,45,79,51,79,63,79,97,79,143,81,185,81,28,82,30,82,33,82,173,82,174,82,9,83,99,83,114,83,142,83,143,83,48,84,55,84,42,84,84,84,69,84,25,84,28,84,37,84,24,84,61,84,79,84,65,84,40,84,36,84,71,84,238,86,231,86,229,86,65,87,69,87,76,87,73,87,75,87,82,87,6,89,64,89,166,89,152,89,160,89,151,89,142,89,162,89,144,89,143,89,167,89,161,89,142,91,146,91,40,92,42,92,141,92,143,92,136,92,139,92,137,92,146,92,138,92,134,92,147,92,149,92,224,93,10,94,14,94,139,94,137,94,140,94,136,94,141,94,5,95,29,95,120,95,118,95,210,95,209,95,208,95,237,95,232,95,238,95,243,95,225,95,228,95,227,95,250,95,239,95,247,95,251,95,0,96,244,95,58,98,131,98,140,98,142,98,143,98,148,98,135,98,113,98,123,98,122,98,112,98,129,98,136,98,119,98,125,98,114,98,116,98,55,101,240,101,244,101,243,101,242,101,245,101,69,103,71,103,89,103,85,103,76,103,72,103,93,103,77,103,90,103,75,103,208,107,25,108,26,108,120,108,103,108,107,108,132,108,139,108,143,108,113,108,111,108,105,108,154,108,109,108,135,108,149,108,156,108,102,108,115,108,101,108,123,108,142,108,116,112,122,112,99,114,191,114,189,114,195,114,198,114,193,114,186,114,197,114,149,115,151,115,147,115,148,115,146,115,58,117,57,117,148,117,149,117,129,118,61,121,52,128,149,128,153,128,144,128,146,128,156,128,144,130,143,130,133,130,142,130,145,130,147,130,138,130,131,130,132,130,120,140,201,143,191,143,159,144,161,144,165,144,158,144,167,144,160,144,48,150,40,150,47,150,45,150,51,78,152,79,124,79,133,79,125,79,128,79,135,79,118,79,116,79,137,79,132,79,119,79,76,79,151,79,106,79,154,79,121,79,129,79,120,79,144,79,156,79,148,79,158,79,146,79,130,79,149,79,107,79,110,79,158,81,188,81,190,81,53,82,50,82,51,82,70,82,49,82,188,82,10,83,11,83,60,83,146,83,148,83,135,84,127,84,129,84,145,84,130,84,136,84,107,84,122,84,126,84,101,84,108,84,116,84,102,84,141,84,111,84,97,84,96,84,152,84,99,84,103,84,100,84,247,86,249,86,111,87,114,87,109,87,107,87,113,87,112,87,118,87,128,87,117,87,123,87,115,87,116,87,98,87,104,87,125,87,12,89,69,89,181,89,186,89,207,89,206,89,178,89,204,89,193,89,182,89,188,89,195,89,214,89,177,89,189,89,192,89,200,89,180,89,199,89,98,91,101,91,147,91,149,91,68,92,71,92,174,92,164,92,160,92,181,92,175,92,168,92,172,92,159,92,163,92,173,92,162,92,170,92,167,92,157,92,165,92,182,92,176,92,166,92,23,94,20,94,25,94,40,95,34,95,35,95,36,95,84,95,130,95,126,95,125,95,222,95,229,95,45,96,38,96,25,96,50,96,11,96,52,96,10,96,23,96,51,96,26,96,30,96,44,96,34,96,13,96,16,96,46,96,19,96,17,96,12,96,9,96,28,96,20,98,61,98,173,98,180,98,209,98,190,98,170,98,182,98,202,98,174,98,179,98,175,98,187,98,169,98,176,98,184,98,61,101,168,101,187,101,9,102,252,101,4,102,18,102,8,102,251,101,3,102,11,102,13,102,5,102,253,101,17,102,16,102,246,102,10,103,133,103,108,103,142,103,146,103,118,103,123,103,152,103,134,103,132,103,116,103,141,103,140,103,122,103,159,103,145,103,153,103,131,103,125,103,129,103,120,103,121,103,148,103,37,107,128,107,126,107,222,107,29,108,147,108,236,108,235,108,238,108,217,108,182,108,212,108,173,108,231,108,183,108,208,108,194,108,186,108,195,108,198,108,237,108,242,108,210,108,221,108,180,108,138,108,157,108,128,108,222,108,192,108,48,109,205,108,199,108,176,108,249,108,207,108,233,108,209,108,148,112,152,112,133,112,147,112,134,112,132,112,145,112,150,112,130,112,154,112,131,112,106,114,214,114,203,114,216,114,201,114,220,114,210,114,212,114,218,114,204,114,209,114,164,115,161,115,173,115,166,115,162,115,160,115,172,115,157,115,221,116,232,116,63,117,64,117,62,117,140,117,152,117,175,118,243,118,241,118,240,118,245,118,248,119,252,119,249,119,251,119,250,119,247,119,66,121,63,121,197,121,120,122,123,122,251,122,117,124,253,124,53,128,143,128,174,128,163,128,184,128,181,128,173,128,32,130,160,130,192,130,171,130,154,130,152,130,155,130,181,130,167,130,174,130,188,130,158,130,186,130,180,130,168,130,161,130,169,130,194,130,164,130,195,130,182,130,162,130,112,134,111,134,109,134,110,134,86,140,210,143,203,143,211,143,205,143,214,143,213,143,215,143,178,144,180,144,175,144,179,144,176,144,57,150,61,150,60,150,58,150,67,150,205,79,197,79,211,79,178,79,201,79,203,79,193,79,212,79,220,79,217,79,187,79,179,79,219,79,199,79,214,79,186,79,192,79,185,79,236,79,68,82,73,82,192,82,194,82,61,83,124,83,151,83,150,83,153,83,152,83,186,84,161,84,173,84,165,84,207,84,195,84,13,131,183,84,174,84,214,84,182,84,197,84,198,84,160,84,112,84,188,84,162,84,190,84,114,84,222,84,176,84,181,87,158,87,159,87,164,87,140,87,151,87,157,87,155,87,148,87,152,87,143,87,153,87,165,87,154,87,149,87,244,88,13,89,83,89,225,89,222,89,238,89,0,90,241,89,221,89,250,89,253,89,252,89,246,89,228,89,242,89,247,89,219,89,233,89,243,89,245,89,224,89,254,89,244,89,237,89,168,91,76,92,208,92,216,92,204,92,215,92,203,92,219,92,222,92,218,92,201,92,199,92,202,92,214,92,211,92,212,92,207,92,200,92,198,92,206,92,223,92,248,92,249,93,33,94,34,94,35,94,32,94,36,94,176,94,164,94,162,94,155,94,163,94,165,94,7,95,46,95,86,95,134,95,55,96,57,96,84,96,114,96,94,96,69,96,83,96,71,96,73,96,91,96,76,96,64,96,66,96,95,96,36,96,68,96,88,96,102,96,110,96,66,98,67,98,207,98,13,99,11,99,245,98,14,99,3,99,235,98,249,98,15,99,12,99,248,98,246,98,0,99,19,99,20,99,250,98,21,99,251,98,240,98,65,101,67,101,170,101,191,101,54,102,33,102,50,102,53,102,28,102,38,102,34,102,51,102,43,102,58,102,29,102,52,102,57,102,46,102,15,103,16,103,193,103,242,103,200,103,186,103,220,103,187,103,248,103,216,103,192,103,183,103,197,103,235,103,228,103,223,103,181,103,205,103,179,103,247,103,246,103,238,103,227,103,194,103,185,103,206,103,231,103,240,103,178,103,252,103,198,103,237,103,204,103,174,103,230,103,219,103,250,103,201,103,202,103,195,103,234,103,203,103,40,107,130,107,132,107,182,107,214,107,216,107,224,107,32,108,33,108,40,109,52,109,45,109,31,109,60,109,63,109,18,109,10,109,218,108,51,109,4,109,25,109,58,109,26,109,17,109,0,109,29,109,66,109,1,109,24,109,55,109,3,109,15,109,64,109,7,109,32,109,44,109,8,109,34,109,9,109,16,109,183,112,159,112,190,112,177,112,176,112,161,112,180,112,181,112,169,112,65,114,73,114,74,114,108,114,112,114,115,114,110,114,202,114,228,114,232,114,235,114,223,114,234,114,230,114,227,114,133,115,204,115,194,115,200,115,197,115,185,115,182,115,181,115,180,115,235,115,191,115,199,115,190,115,195,115,198,115,184,115,203,115,236,116,238,116,46,117,71,117,72,117,167,117,170,117,121,118,196,118,8,119,3,119,4,119,5,119,10,119,247,118,251,118,250,118,231,119,232,119,6,120,17,120,18,120,5,120,16,120,15,120,14,120,9,120,3,120,19,120,74,121,76,121,75,121,69,121,68,121,213,121,205,121,207,121,214,121,206,121,128,122,126,122,209,122,0,123,1,123,122,124,120,124,121,124,127,124,128,124,129,124,3,125,8,125,1,125,88,127,145,127,141,127,190,127,7,128,14,128,15,128,20,128,55,128,216,128,199,128,224,128,209,128,200,128,194,128,208,128,197,128,227,128,217,128,220,128,202,128,213,128,201,128,207,128,215,128,230,128,205,128,255,129,33,130,148,130,217,130,254,130,249,130,7,131,232,130,0,131,213,130,58,131,235,130,214,130,244,130,236,130,225,130,242,130,245,130,12,131,251,130,246,130,240,130,234,130,228,130,224,130,250,130,243,130,237,130,119,134,116,134,124,134,115,134,65,136,78,136,103,136,106,136,105,136,211,137,4,138,7,138,114,141,227,143,225,143,238,143,224,143,241,144,189,144,191,144,213,144,197,144,190,144,199,144,203,144,200,144,212,145,211,145,84,150,79,150,81,150,83,150,74,150,78,150,30,80,5,80,7,80,19,80,34,80,48,80,27,80,245,79,244,79,51,80,55,80,44,80,246,79,247,79,23,80,28,80,32,80,39,80,53,80,47,80,49,80,14,80,90,81,148,81,147,81,202,81,196,81,197,81,200,81,206,81,97,82,90,82,82,82,94,82,95,82,85,82,98,82,205,82,14,83,158,83,38,85,226,84,23,85,18,85,231,84,243,84,228,84,26,85,255,84,4,85,8,85,235,84,17,85,5,85,241,84,10,85,251,84,247,84,248,84,224,84,14,85,3,85,11,85,1,87,2,87,204,87,50,88,213,87,210,87,186,87,198,87,189,87,188,87,184,87,182,87,191,87,199,87,208,87,185,87,193,87,14,89,74,89,25,90,22,90,45,90,46,90,21,90,15,90,23,90,10,90,30,90,51,90,108,91,167,91,173,91,172,91,3,92,86,92,84,92,236,92,255,92,238,92,241,92,247,92,0,93,249,92,41,94,40,94,168,94,174,94,170,94,172,94,51,95,48,95,103,95,93,96,90,96,103,96,65,96,162,96,136,96,128,96,146,96,129,96,157,96,131,96,149,96,155,96,151,96,135,96,156,96,142,96,25,98,70,98,242,98,16,99,86,99,44,99,68,99,69,99,54,99,67,99,228,99,57,99,75,99,74,99,60,99,41,99,65,99,52,99,88,99,84,99,89,99,45,99,71,99,51,99,90,99,81,99,56,99,87,99,64,99,72,99,74,101,70,101,198,101,195,101,196,101,194,101,74,102,95,102,71,102,81,102,18,103,19,103,31,104,26,104,73,104,50,104,51,104,59,104,75,104,79,104,22,104,49,104,28,104,53,104,43,104,45,104,47,104,78,104,68,104,52,104,29,104,18,104,20,104,38,104,40,104,46,104,77,104,58,104,37,104,32,104,44,107,47,107,45,107,49,107,52,107,109,107,130,128,136,107,230,107,228,107,232,107,227,107,226,107,231,107,37,108,122,109,99,109,100,109,118,109,13,109,97,109,146,109,88,109,98,109,109,109,111,109,145,109,141,109,239,109,127,109,134,109,94,109,103,109,96,109,151,109,112,109,124,109,95,109,130,109,152,109,47,109,104,109,139,109,126,109,128,109,132,109,22,109,131,109,123,109,125,109,117,109,144,109,220,112,211,112,209,112,221,112,203,112,57,127,226,112,215,112,210,112,222,112,224,112,212,112,205,112,197,112,198,112,199,112,218,112,206,112,225,112,66,114,120,114,119,114,118,114,0,115,250,114,244,114,254,114,246,114,243,114,251,114,1,115,211,115,217,115,229,115,214,115,188,115,231,115,227,115,233,115,220,115,210,115,219,115,212,115,221,115,218,115,215,115,216,115,232,115,222,116,223,116,244,116,245,116,33,117,91,117,95,117,176,117,193,117,187,117,196,117,192,117,191,117,182,117,186,117,138,118,201,118,29,119,27,119,16,119,19,119,18,119,35,119,17,119,21,119,25,119,26,119,34,119,39,119,35,120,44,120,34,120,53,120,47,120,40,120,46,120,43,120,33,120,41,120,51,120,42,120,49,120,84,121,91,121,79,121,92,121,83,121,82,121,81,121,235,121,236,121,224,121,238,121,237,121,234,121,220,121,222,121,221,121,134,122,137,122,133,122,139,122,140,122,138,122,135,122,216,122,16,123,4,123,19,123,5,123,15,123,8,123,10,123,14,123,9,123,18,123,132,124,145,124,138,124,140,124,136,124,141,124,133,124,30,125,29,125,17,125,14,125,24,125,22,125,19,125,31,125,18,125,15,125,12,125,92,127,97,127,94,127,96,127,93,127,91,127,150,127,146,127,195,127,194,127,192,127,22,128,62,128,57,128,250,128,242,128,249,128,245,128,1,129,251,128,0,129,1,130,47,130,37,130,51,131,45,131,68,131,25,131,81,131,37,131,86,131,63,131,65,131,38,131,28,131,34,131,66,131,78,131,27,131,42,131,8,131,60,131,77,131,22,131,36,131,32,131,55,131,47,131,41,131,71,131,69,131,76,131,83,131,30,131,44,131,75,131,39,131,72,131,83,134,82,134,162,134,168,134,150,134,141,134,145,134,158,134,135,134,151,134,134,134,139,134,154,134,133,134,165,134,153,134,161,134,167,134,149,134,152,134,142,134,157,134,144,134,148,134,67,136,68,136,109,136,117,136,118,136,114,136,128,136,113,136,127,136,111,136,131,136,126,136,116,136,124,136,18,138,71,140,87,140,123,140,164,140,163,140,118,141,120,141,181,141,183,141,182,141,209,142,211,142,254,143,245,143,2,144,255,143,251,143,4,144,252,143,246,143,214,144,224,144,217,144,218,144,227,144,223,144,229,144,216,144,219,144,215,144,220,144,228,144,80,145,78,145,79,145,213,145,226,145,218,145,92,150,95,150,188,150,227,152,223,154,47,155,127,78,112,80,106,80,97,80,94,80,96,80,83,80,75,80,93,80,114,80,72,80,77,80,65,80,91,80,74,80,98,80,21,80,69,80,95,80,105,80,107,80,99,80,100,80,70,80,64,80,110,80,115,80,87,80,81,80,208,81,107,82,109,82,108,82,110,82,214,82,211,82,45,83,156,83,117,85,118,85,60,85,77,85,80,85,52,85,42,85,81,85,98,85,54,85,53,85,48,85,82,85,69,85,12,85,50,85,101,85,78,85,57,85,72,85,45,85,59,85,64,85,75,85,10,87,7,87,251,87,20,88,226,87,246,87,220,87,244,87,0,88,237,87,253,87,8,88,248,87,11,88,243,87,207,87,7,88,238,87,227,87,242,87,229,87,236,87,225,87,14,88,252,87,16,88,231,87,1,88,12,88,241,87,233,87,240,87,13,88,4,88,92,89,96,90,88,90,85,90,103,90,94,90,56,90,53,90,109,90,80,90,95,90,101,90,108,90,83,90,100,90,87,90,67,90,93,90,82,90,68,90,91,90,72,90,142,90,62,90,77,90,57,90,76,90,112,90,105,90,71,90,81,90,86,90,66,90,92,90,114,91,110,91,193,91,192,91,89,92,30,93,11,93,29,93,26,93,32,93,12,93,40,93,13,93,38,93,37,93,15,93,48,93,18,93,35,93,31,93,46,93,62,94,52,94,177,94,180,94,185,94,178,94,179,94,54,95,56,95,155,95,150,95,159,95,138,96,144,96,134,96,190,96,176,96,186,96,211,96,212,96,207,96,228,96,217,96,221,96,200,96,177,96,219,96,183,96,202,96,191,96,195,96,205,96,192,96,50,99,101,99,138,99,130,99,125,99,189,99,158,99,173,99,157,99,151,99,171,99,142,99,111,99,135,99,144,99,110,99,175,99,117,99,156,99,109,99,174,99,124,99,164,99,59,99,159,99,120,99,133,99,129,99,145,99,141,99,112,99,83,101,205,101,101,102,97,102,91,102,89,102,92,102,98,102,24,103,121,104,135,104,144,104,156,104,109,104,110,104,174,104,171,104,86,105,111,104,163,104,172,104,169,104,117,104,116,104,178,104,143,104,119,104,146,104,124,104,107,104,114,104,170,104,128,104,113,104,126,104,155,104,150,104,139,104,160,104,137,104,164,104,120,104,123,104,145,104,140,104,138,104,125,104,54,107,51,107,55,107,56,107,145,107,143,107,141,107,142,107,140,107,42,108,192,109,171,109,180,109,179,109,116,110,172,109,233,109,226,109,183,109,246,109,212,109,0,110,200,109,224,109,223,109,214,109,190,109,229,109,220,109,221,109,219,109,244,109,202,109,189,109,237,109,240,109,186,109,213,109,194,109,207,109,201,109,208,109,242,109,211,109,253,109,215,109,205,109,227,109,187,109,250,112,13,113,247,112,23,113,244,112,12,113,240,112,4,113,243,112,16,113,252,112,255,112,6,113,19,113,0,113,248,112,246,112,11,113,2,113,14,113,126,114,123,114,124,114,127,114,29,115,23,115,7,115,17,115,24,115,10,115,8,115,255,114,15,115,30,115,136,115,246,115,248,115,245,115,4,116,1,116,253,115,7,116,0,116,250,115,252,115,255,115,12,116,11,116,244,115,8,116,100,117,99,117,206,117,210,117,207,117,203,117,204,117,209,117,208,117,143,118,137,118,211,118,57,119,47,119,45,119,49,119,50,119,52,119,51,119,61,119,37,119,59,119,53,119,72,120,82,120,73,120,77,120,74,120,76,120,38,120,69,120,80,120,100,121,103,121,105,121,106,121,99,121,107,121,97,121,187,121,250,121,248,121,246,121,247,121,143,122,148,122,144,122,53,123,71,123,52,123,37,123,48,123,34,123,36,123,51,123,24,123,42,123,29,123,49,123,43,123,45,123,47,123,50,123,56,123,26,123,35,123,148,124,152,124,150,124,163,124,53,125,61,125,56,125,54,125,58,125,69,125,44,125,41,125,65,125,71,125,62,125,63,125,74,125,59,125,40,125,99,127,149,127,156,127,157,127,155,127,202,127,203,127,205,127,208,127,209,127,199,127,207,127,201,127,31,128,30,128,27,128,71,128,67,128,72,128,24,129,37,129,25,129,27,129,45,129,31,129,44,129,30,129,33,129,21,129,39,129,29,129,34,129,17,130,56,130,51,130,58,130,52,130,50,130,116,130,144,131,163,131,168,131,141,131,122,131,115,131,164,131,116,131,143,131,129,131,149,131,153,131,117,131,148,131,169,131,125,131,131,131,140,131,157,131,155,131,170,131,139,131,126,131,165,131,175,131,136,131,151,131,176,131,127,131,166,131,135,131,174,131,118,131,154,131,89,134,86,134,191,134,183,134,194,134,193,134,197,134,186,134,176,134,200,134,185,134,179,134,184,134,204,134,180,134,187,134,188,134,195,134,189,134,190,134,82,136,137,136,149,136,168,136,162,136,170,136,154,136,145,136,161,136,159,136,152,136,167,136,153,136,155,136,151,136,164,136,172,136,140,136,147,136,142,136,130,137,214,137,217,137,213,137,48,138,39,138,44,138,30,138,57,140,59,140,92,140,93,140,125,140,165,140,125,141,123,141,121,141,188,141,194,141,185,141,191,141,193,141,216,142,222,142,221,142,220,142,215,142,224,142,225,142,36,144,11,144,17,144,28,144,12,144,33,144,239,144,234,144,240,144,244,144,242,144,243,144,212,144,235,144,236,144,233,144,86,145,88,145,90,145,83,145,85,145,236,145,244,145,241,145,243,145,248,145,228,145,249,145,234,145,235,145,247,145,232,145,238,145,122,149,134,149,136,149,124,150,109,150,107,150,113,150,111,150,191,150,106,151,4,152,229,152,151,153,155,80,149,80,148,80,158,80,139,80,163,80,131,80,140,80,142,80,157,80,104,80,156,80,146,80,130,80,135,80,95,81,212,81,18,83,17,83,164,83,167,83,145,85,168,85,165,85,173,85,119,85,69,86,162,85,147,85,136,85,143,85,181,85,129,85,163,85,146,85,164,85,125,85,140,85,166,85,127,85,149,85,161,85,142,85,12,87,41,88,55,88,25,88,30,88,39,88,35,88,40,88,245,87,72,88,37,88,28,88,27,88,51,88,63,88,54,88,46,88,57,88,56,88,45,88,44,88,59,88,97,89,175,90,148,90,159,90,122,90,162,90,158,90,120,90,166,90,124,90,165,90,172,90,149,90,174,90,55,90,132,90,138,90,151,90,131,90,139,90,169,90,123,90,125,90,140,90,156,90,143,90,147,90,157,90,234,91,205,91,203,91,212,91,209,91,202,91,206,91,12,92,48,92,55,93,67,93,107,93,65,93,75,93,63,93,53,93,81,93,78,93,85,93,51,93,58,93,82,93,61,93,49,93,89,93,66,93,57,93,73,93,56,93,60,93,50,93,54,93,64,93,69,93,68,94,65,94,88,95,166,95,165,95,171,95,201,96,185,96,204,96,226,96,206,96,196,96,20,97,242,96,10,97,22,97,5,97,245,96,19,97,248,96,252,96,254,96,193,96,3,97,24,97,29,97,16,97,255,96,4,97,11,97,74,98,148,99,177,99,176,99,206,99,229,99,232,99,239,99,195,99,157,100,243,99,202,99,224,99,246,99,213,99,242,99,245,99,97,100,223,99,190,99,221,99,220,99,196,99,216,99,211,99,194,99,199,99,204,99,203,99,200,99,240,99,215,99,217,99,50,101,103,101,106,101,100,101,92,101,104,101,101,101,140,101,157,101,158,101,174,101,208,101,210,101,124,102,108,102,123,102,128,102,113,102,121,102,106,102,114,102,1,103,12,105,211,104,4,105,220,104,42,105,236,104,234,104,241,104,15,105,214,104,247,104,235,104,228,104,246,104,19,105,16,105,243,104,225,104,7,105,204,104,8,105,112,105,180,104,17,105,239,104,198,104,20,105,248,104,208,104,253,104,252,104,232,104,11,105,10,105,23,105,206,104,200,104,221,104,222,104,230,104,244,104,209,104,6,105,212,104,233,104,21,105,37,105,199,104,57,107,59,107,63,107,60,107,148,107,151,107,153,107,149,107,189,107,240,107,242,107,243,107,48,108,252,109,70,110,71,110,31,110,73,110,136,110,60,110,61,110,69,110,98,110,43,110,63,110,65,110,93,110,115,110,28,110,51,110,75,110,64,110,81,110,59,110,3,110,46,110,94,110,104,110,92,110,97,110,49,110,40,110,96,110,113,110,107,110,57,110,34,110,48,110,83,110,101,110,39,110,120,110,100,110,119,110,85,110,121,110,82,110,102,110,53,110,54,110,90,110,32,113,30,113,47,113,251,112,46,113,49,113,35,113,37,113,34,113,50,113,31,113,40,113,58,113,27,113,75,114,90,114,136,114,137,114,134,114,133,114,139,114,18,115,11,115,48,115,34,115,49,115,51,115,39,115,50,115,45,115,38,115,35,115,53,115,12,115,46,116,44,116,48,116,43,116,22,116,26,116,33,116,45,116,49,116,36,116,35,116,29,116,41,116,32,116,50,116,251,116,47,117,111,117,108,117,231,117,218,117,225,117,230,117,221,117,223,117,228,117,215,117,149,118,146,118,218,118,70,119,71,119,68,119,77,119,69,119,74,119,78,119,75,119,76,119,222,119,236,119,96,120,100,120,101,120,92,120,109,120,113,120,106,120,110,120,112,120,105,120,104,120,94,120,98,120,116,121,115,121,114,121,112,121,2,122,10,122,3,122,12,122,4,122,153,122,230,122,228,122,74,123,59,123,68,123,72,123,76,123,78,123,64,123,88,123,69,123,162,124,158,124,168,124,161,124,88,125,111,125,99,125,83,125,86,125,103,125,106,125,79,125,109,125,92,125,107,125,82,125,84,125,105,125,81,125,95,125,78,125,62,127,63,127,101,127,102,127,162,127,160,127,161,127,215,127,81,128,79,128,80,128,254,128,212,128,67,129,74,129,82,129,79,129,71,129,61,129,77,129,58,129,230,129,238,129,247,129,248,129,249,129,4,130,60,130,61,130,63,130,117,130,59,131,207,131,249,131,35,132,192,131,232,131,18,132,231,131,228,131,252,131,246,131,16,132,198,131,200,131,235,131,227,131,191,131,1,132,221,131,229,131,216,131,255,131,225,131,203,131,206,131,214,131,245,131,201,131,9,132,15,132,222,131,17,132,6,132,194,131,243,131,213,131,250,131,199,131,209,131,234,131,19,132,195,131,236,131,238,131,196,131,251,131,215,131,226,131,27,132,219,131,254,131,216,134,226,134,230,134,211,134,227,134,218,134,234,134,221,134,235,134,220,134,236,134,233,134,215,134,232,134,209,134,72,136,86,136,85,136,186,136,215,136,185,136,184,136,192,136,190,136,182,136,188,136,183,136,189,136,178,136,1,137,201,136,149,137,152,137,151,137,221,137,218,137,219,137,78,138,77,138,57,138,89,138,64,138,87,138,88,138,68,138,69,138,82,138,72,138,81,138,74,138,76,138,79,138,95,140,129,140,128,140,186,140,190,140,176,140,185,140,181,140,132,141,128,141,137,141,216,141,211,141,205,141,199,141,214,141,220,141,207,141,213,141,217,141,200,141,215,141,197,141,239,142,247,142,250,142,249,142,230,142,238,142,229,142,245,142,231,142,232,142,246,142,235,142,241,142,236,142,244,142,233,142,45,144,52,144,47,144,6,145,44,145,4,145,255,144,252,144,8,145,249,144,251,144,1,145,0,145,7,145,5,145,3,145,97,145,100,145,95,145,98,145,96,145,1,146,10,146,37,146,3,146,26,146,38,146,15,146,12,146,0,146,18,146,255,145,253,145,6,146,4,146,39,146,2,146,28,146,36,146,25,146,23,146,5,146,22,146,123,149,141,149,140,149,144,149,135,150,126,150,136,150,137,150,131,150,128,150,194,150,200,150,195,150,241,150,240,150,108,151,112,151,110,151,7,152,169,152,235,152,230,156,249,158,131,78,132,78,182,78,189,80,191,80,198,80,174,80,196,80,202,80,180,80,200,80,194,80,176,80,193,80,186,80,177,80,203,80,201,80,182,80,184,80,215,81,122,82,120,82,123,82,124,82,195,85,219,85,204,85,208,85,203,85,202,85,221,85,192,85,212,85,196,85,233,85,191,85,210,85,141,85,207,85,213,85,226,85,214,85,200,85,242,85,205,85,217,85,194,85,20,87,83,88,104,88,100,88,79,88,77,88,73,88,111,88,85,88,78,88,93,88,89,88,101,88,91,88,61,88,99,88,113,88,252,88,199,90,196,90,203,90,186,90,184,90,177,90,181,90,176,90,191,90,200,90,187,90,198,90,183,90,192,90,202,90,180,90,182,90,205,90,185,90,144,90,214,91,216,91,217,91,31,92,51,92,113,93,99,93,74,93,101,93,114,93,108,93,94,93,104,93,103,93,98,93,240,93,79,94,78,94,74,94,77,94,75,94,197,94,204,94,198,94,203,94,199,94,64,95,175,95,173,95,247,96,73,97,74,97,43,97,69,97,54,97,50,97,46,97,70,97,47,97,79,97,41,97,64,97,32,98,104,145,35,98,37,98,36,98,197,99,241,99,235,99,16,100,18,100,9,100,32,100,36,100,51,100,67,100,31,100,21,100,24,100,57,100,55,100,34,100,35,100,12,100,38,100,48,100,40,100,65,100,53,100,47,100,10,100,26,100,64,100,37,100,39,100,11,100,231,99,27,100,46,100,33,100,14,100,111,101,146,101,211,101,134,102,140,102,149,102,144,102,139,102,138,102,153,102,148,102,120,102,32,103,102,105,95,105,56,105,78,105,98,105,113,105,63,105,69,105,106,105,57,105,66,105,87,105,89,105,122,105,72,105,73,105,53,105,108,105,51,105,61,105,101,105,240,104,120,105,52,105,105,105,64,105,111,105,68,105,118,105,88,105,65,105,116,105,76,105,59,105,75,105,55,105,92,105,79,105,81,105,50,105,82,105,47,105,123,105,60,105,70,107,69,107,67,107,66,107,72,107,65,107,155,107,13,250,251,107,252,107,249,107,247,107,248,107,155,110,214,110,200,110,143,110,192,110,159,110,147,110,148,110,160,110,177,110,185,110,198,110,210,110,189,110,193,110,158,110,201,110,183,110,176,110,205,110,166,110,207,110,178,110,190,110,195,110,220,110,216,110,153,110,146,110,142,110,141,110,164,110,161,110,191,110,179,110,208,110,202,110,151,110,174,110,163,110,71,113,84,113,82,113,99,113,96,113,65,113,93,113,98,113,114,113,120,113,106,113,97,113,66,113,88,113,67,113,75,113,112,113,95,113,80,113,83,113,68,113,77,113,90,113,79,114,141,114,140,114,145,114,144,114,142,114,60,115,66,115,59,115,58,115,64,115,74,115,73,115,68,116,74,116,75,116,82,116,81,116,87,116,64,116,79,116,80,116,78,116,66,116,70,116,77,116,84,116,225,116,255,116,254,116,253,116,29,117,121,117,119,117,131,105,239,117,15,118,3,118,247,117,254,117,252,117,249,117,248,117,16,118,251,117,246,117,237,117,245,117,253,117,153,118,181,118,221,118,85,119,95,119,96,119,82,119,86,119,90,119,105,119,103,119,84,119,89,119,109,119,224,119,135,120,154,120,148,120,143,120,132,120,149,120,133,120,134,120,161,120,131,120,121,120,153,120,128,120,150,120,123,120,124,121,130,121,125,121,121,121,17,122,24,122,25,122,18,122,23,122,21,122,34,122,19,122,27,122,16,122,163,122,162,122,158,122,235,122,102,123,100,123,109,123,116,123,105,123,114,123,101,123,115,123,113,123,112,123,97,123,120,123,118,123,99,123,178,124,180,124,175,124,136,125,134,125,128,125,141,125,127,125,133,125,122,125,142,125,123,125,131,125,124,125,140,125,148,125,132,125,125,125,146,125,109,127,107,127,103,127,104,127,108,127,166,127,165,127,167,127,219,127,220,127,33,128,100,129,96,129,119,129,92,129,105,129,91,129,98,129,114,129,33,103,94,129,118,129,103,129,111,129,68,129,97,129,29,130,73,130,68,130,64,130,66,130,69,130,241,132,63,132,86,132,118,132,121,132,143,132,141,132,101,132,81,132,64,132,134,132,103,132,48,132,77,132,125,132,90,132,89,132,116,132,115,132,93,132,7,133,94,132,55,132,58,132,52,132,122,132,67,132,120,132,50,132,69,132,41,132,217,131,75,132,47,132,66,132,45,132,95,132,112,132,57,132,78,132,76,132,82,132,111,132,197,132,142,132,59,132,71,132,54,132,51,132,104,132,126,132,68,132,43,132,96,132,84,132,110,132,80,132,11,135,4,135,247,134,12,135,250,134,214,134,245,134,77,135,248,134,14,135,9,135,1,135,246,134,13,135,5,135,214,136,203,136,205,136,206,136,222,136,219,136,218,136,204,136,208,136,133,137,155,137,223,137,229,137,228,137,225,137,224,137,226,137,220,137,230,137,118,138,134,138,127,138,97,138,63,138,119,138,130,138,132,138,117,138,131,138,129,138,116,138,122,138,60,140,75,140,74,140,101,140,100,140,102,140,134,140,132,140,133,140,204,140,104,141,105,141,145,141,140,141,142,141,143,141,141,141,147,141,148,141,144,141,146,141,240,141,224,141,236,141,241,141,238,141,208,141,233,141,227,141,226,141,231,141,242,141,235,141,244,141,6,143,255,142,1,143,0,143,5,143,7,143,8,143,2,143,11,143,82,144,63,144,68,144,73,144,61,144,16,145,13,145,15,145,17,145,22,145,20,145,11,145,14,145,110,145,111,145,72,146,82,146,48,146,58,146,102,146,51,146,101,146,94,146,131,146,46,146,74,146,70,146,109,146,108,146,79,146,96,146,103,146,111,146,54,146,97,146,112,146,49,146,84,146,99,146,80,146,114,146,78,146,83,146,76,146,86,146,50,146,159,149,156,149,158,149,155,149,146,150,147,150,145,150,151,150,206,150,250,150,253,150,248,150,245,150,115,151,119,151,120,151,114,151,15,152,13,152,14,152,172,152,246,152,249,152,175,153,178,153,176,153,181,153,173,154,171,154,91,155,234,156,237,156,231,156,128,158,253,158,230,80,212,80,215,80,232,80,243,80,219,80,234,80,221,80,228,80,211,80,236,80,240,80,239,80,227,80,224,80,216,81,128,82,129,82,233,82,235,82,48,83,172,83,39,86,21,86,12,86,18,86,252,85,15,86,28,86,1,86,19,86,2,86,250,85,29,86,4,86,255,85,249,85,137,88,124,88,144,88,152,88,134,88,129,88,127,88,116,88,139,88,122,88,135,88,145,88,142,88,118,88,130,88,136,88,123,88,148,88,143,88,254,88,107,89,220,90,238,90,229,90,213,90,234,90,218,90,237,90,235,90,243,90,226,90,224,90,219,90,236,90,222,90,221,90,217,90,232,90,223,90,119,91,224,91,227,91,99,92,130,93,128,93,125,93,134,93,122,93,129,93,119,93,138,93,137,93,136,93,126,93,124,93,141,93,121,93,127,93,88,94,89,94,83,94,216,94,209,94,215,94,206,94,220,94,213,94,217,94,210,94,212,94,68,95,67,95,111,95,182,95,44,97,40,97,65,97,94,97,113,97,115,97,82,97,83,97,114,97,108,97,128,97,116,97,84,97,122,97,91,97,101,97,59,97,106,97,97,97,86,97,41,98,39,98,43,98,43,100,77,100,91,100,93,100,116,100,118,100,114,100,115,100,125,100,117,100,102,100,166,100,78,100,130,100,94,100,92,100,75,100,83,100,96,100,80,100,127,100,63,100,108,100,107,100,89,100,101,100,119,100,115,101,160,101,161,102,160,102,159,102,5,103,4,103,34,103,177,105,182,105,201,105,160,105,206,105,150,105,176,105,172,105,188,105,145,105,153,105,142,105,167,105,141,105,169,105,190,105,175,105,191,105,196,105,189,105,164,105,212,105,185,105,202,105,154,105,207,105,179,105,147,105,170,105,161,105,158,105,217,105,151,105,144,105,194,105,181,105,165,105,198,105,74,107,77,107,75,107,158,107,159,107,160,107,195,107,196,107,254,107,206,110,245,110,241,110,3,111,37,111,248,110,55,111,251,110,46,111,9,111,78,111,25,111,26,111,39,111,24,111,59,111,18,111,237,110,10,111,54,111,115,111,249,110,238,110,45,111,64,111,48,111,60,111,53,111,235,110,7,111,14,111,67,111,5,111,253,110,246,110,57,111,28,111,252,110,58,111,31,111,13,111,30,111,8,111,33,111,135,113,144,113,137,113,128,113,133,113,130,113,143,113,123,113,134,113,129,113,151,113,68,114,83,114,151,114,149,114,147,114,67,115,77,115,81,115,76,115,98,116,115,116,113,116,117,116,114,116,103,116,110,116,0,117,2,117,3,117,125,117,144,117,22,118,8,118,12,118,21,118,17,118,10,118,20,118,184,118,129,119,124,119,133,119,130,119,110,119,128,119,111,119,126,119,131,119,178,120,170,120,180,120,173,120,168,120,126,120,171,120,158,120,165,120,160,120,172,120,162,120,164,120,152,121,138,121,139,121,150,121,149,121,148,121,147,121,151,121,136,121,146,121,144,121,43,122,74,122,48,122,47,122,40,122,38,122,168,122,171,122,172,122,238,122,136,123,156,123,138,123,145,123,144,123,150,123,141,123,140,123,155,123,142,123,133,123,152,123,132,82,153,123,164,123,130,123,187,124,191,124,188,124,186,124,167,125,183,125,194,125,163,125,170,125,193,125,192,125,197,125,157,125,206,125,196,125,198,125,203,125,204,125,175,125,185,125,150,125,188,125,159,125,166,125,174,125,169,125,161,125,201,125,115,127,226,127,227,127,229,127,222,127,36,128,93,128,92,128,137,129,134,129,131,129,135,129,141,129,140,129,139,129,21,130,151,132,164,132,161,132,159,132,186,132,206,132,194,132,172,132,174,132,171,132,185,132,180,132,193,132,205,132,170,132,154,132,177,132,208,132,157,132,167,132,187,132,162,132,148,132,199,132,204,132,155,132,169,132,175,132,168,132,214,132,152,132,182,132,207,132,160,132,215,132,212,132,210,132,219,132,176,132,145,132,97,134,51,135,35,135,40,135,107,135,64,135], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+244836);
/* memory initializer */ allocate([46,135,30,135,33,135,25,135,27,135,67,135,44,135,65,135,62,135,70,135,32,135,50,135,42,135,45,135,60,135,18,135,58,135,49,135,53,135,66,135,38,135,39,135,56,135,36,135,26,135,48,135,17,135,247,136,231,136,241,136,242,136,250,136,254,136,238,136,252,136,246,136,251,136,240,136,236,136,235,136,157,137,161,137,159,137,158,137,233,137,235,137,232,137,171,138,153,138,139,138,146,138,143,138,150,138,61,140,104,140,105,140,213,140,207,140,215,140,150,141,9,142,2,142,255,141,13,142,253,141,10,142,3,142,7,142,6,142,5,142,254,141,0,142,4,142,16,143,17,143,14,143,13,143,35,145,28,145,32,145,34,145,31,145,29,145,26,145,36,145,33,145,27,145,122,145,114,145,121,145,115,145,165,146,164,146,118,146,155,146,122,146,160,146,148,146,170,146,141,146,166,146,154,146,171,146,121,146,151,146,127,146,163,146,238,146,142,146,130,146,149,146,162,146,125,146,136,146,161,146,138,146,134,146,140,146,153,146,167,146,126,146,135,146,169,146,157,146,139,146,45,146,158,150,161,150,255,150,88,151,125,151,122,151,126,151,131,151,128,151,130,151,123,151,132,151,129,151,127,151,206,151,205,151,22,152,173,152,174,152,2,153,0,153,7,153,157,153,156,153,195,153,185,153,187,153,186,153,194,153,189,153,199,153,177,154,227,154,231,154,62,155,63,155,96,155,97,155,95,155,241,156,242,156,245,156,167,158,255,80,3,81,48,81,248,80,6,81,7,81,246,80,254,80,11,81,12,81,253,80,10,81,139,82,140,82,241,82,239,82,72,86,66,86,76,86,53,86,65,86,74,86,73,86,70,86,88,86,90,86,64,86,51,86,61,86,44,86,62,86,56,86,42,86,58,86,26,87,171,88,157,88,177,88,160,88,163,88,175,88,172,88,165,88,161,88,255,88,255,90,244,90,253,90,247,90,246,90,3,91,248,90,2,91,249,90,1,91,7,91,5,91,15,91,103,92,153,93,151,93,159,93,146,93,162,93,147,93,149,93,160,93,156,93,161,93,154,93,158,93,105,94,93,94,96,94,92,94,243,125,219,94,222,94,225,94,73,95,178,95,139,97,131,97,121,97,177,97,176,97,162,97,137,97,155,97,147,97,175,97,173,97,159,97,146,97,170,97,161,97,141,97,102,97,179,97,45,98,110,100,112,100,150,100,160,100,133,100,151,100,156,100,143,100,139,100,138,100,140,100,163,100,159,100,104,100,177,100,152,100,118,101,122,101,121,101,123,101,178,101,179,101,181,102,176,102,169,102,178,102,183,102,170,102,175,102,0,106,6,106,23,106,229,105,248,105,21,106,241,105,228,105,32,106,255,105,236,105,226,105,27,106,29,106,254,105,39,106,242,105,238,105,20,106,247,105,231,105,64,106,8,106,230,105,251,105,13,106,252,105,235,105,9,106,4,106,24,106,37,106,15,106,246,105,38,106,7,106,244,105,22,106,81,107,165,107,163,107,162,107,166,107,1,108,0,108,255,107,2,108,65,111,38,111,126,111,135,111,198,111,146,111,141,111,137,111,140,111,98,111,79,111,133,111,90,111,150,111,118,111,108,111,130,111,85,111,114,111,82,111,80,111,87,111,148,111,147,111,93,111,0,111,97,111,107,111,125,111,103,111,144,111,83,111,139,111,105,111,127,111,149,111,99,111,119,111,106,111,123,111,178,113,175,113,155,113,176,113,160,113,154,113,169,113,181,113,157,113,165,113,158,113,164,113,161,113,170,113,156,113,167,113,179,113,152,114,154,114,88,115,82,115,94,115,95,115,96,115,93,115,91,115,97,115,90,115,89,115,98,115,135,116,137,116,138,116,134,116,129,116,125,116,133,116,136,116,124,116,121,116,8,117,7,117,126,117,37,118,30,118,25,118,29,118,28,118,35,118,26,118,40,118,27,118,156,118,157,118,158,118,155,118,141,119,143,119,137,119,136,119,205,120,187,120,207,120,204,120,209,120,206,120,212,120,200,120,195,120,196,120,201,120,154,121,161,121,160,121,156,121,162,121,155,121,118,107,57,122,178,122,180,122,179,122,183,123,203,123,190,123,172,123,206,123,175,123,185,123,202,123,181,123,197,124,200,124,204,124,203,124,247,125,219,125,234,125,231,125,215,125,225,125,3,126,250,125,230,125,246,125,241,125,240,125,238,125,223,125,118,127,172,127,176,127,173,127,237,127,235,127,234,127,236,127,230,127,232,127,100,128,103,128,163,129,159,129,158,129,149,129,162,129,153,129,151,129,22,130,79,130,83,130,82,130,80,130,78,130,81,130,36,133,59,133,15,133,0,133,41,133,14,133,9,133,13,133,31,133,10,133,39,133,28,133,251,132,43,133,250,132,8,133,12,133,244,132,42,133,242,132,21,133,247,132,235,132,243,132,252,132,18,133,234,132,233,132,22,133,254,132,40,133,29,133,46,133,2,133,253,132,30,133,246,132,49,133,38,133,231,132,232,132,240,132,239,132,249,132,24,133,32,133,48,133,11,133,25,133,47,133,98,134,86,135,99,135,100,135,119,135,225,135,115,135,88,135,84,135,91,135,82,135,97,135,90,135,81,135,94,135,109,135,106,135,80,135,78,135,95,135,93,135,111,135,108,135,122,135,110,135,92,135,101,135,79,135,123,135,117,135,98,135,103,135,105,135,90,136,5,137,12,137,20,137,11,137,23,137,24,137,25,137,6,137,22,137,17,137,14,137,9,137,162,137,164,137,163,137,237,137,240,137,236,137,207,138,198,138,184,138,211,138,209,138,212,138,213,138,187,138,215,138,190,138,192,138,197,138,216,138,195,138,186,138,189,138,217,138,62,140,77,140,143,140,229,140,223,140,217,140,232,140,218,140,221,140,231,140,160,141,156,141,161,141,155,141,32,142,35,142,37,142,36,142,46,142,21,142,27,142,22,142,17,142,25,142,38,142,39,142,20,142,18,142,24,142,19,142,28,142,23,142,26,142,44,143,36,143,24,143,26,143,32,143,35,143,22,143,23,143,115,144,112,144,111,144,103,144,107,144,47,145,43,145,41,145,42,145,50,145,38,145,46,145,133,145,134,145,138,145,129,145,130,145,132,145,128,145,208,146,195,146,196,146,192,146,217,146,182,146,207,146,241,146,223,146,216,146,233,146,215,146,221,146,204,146,239,146,194,146,232,146,202,146,200,146,206,146,230,146,205,146,213,146,201,146,224,146,222,146,231,146,209,146,211,146,181,146,225,146,198,146,180,146,124,149,172,149,171,149,174,149,176,149,164,150,162,150,211,150,5,151,8,151,2,151,90,151,138,151,142,151,136,151,208,151,207,151,30,152,29,152,38,152,41,152,40,152,32,152,27,152,39,152,178,152,8,153,250,152,17,153,20,153,22,153,23,153,21,153,220,153,205,153,207,153,211,153,212,153,206,153,201,153,214,153,216,153,203,153,215,153,204,153,179,154,236,154,235,154,243,154,242,154,241,154,70,155,67,155,103,155,116,155,113,155,102,155,118,155,117,155,112,155,104,155,100,155,108,155,252,156,250,156,253,156,255,156,247,156,7,157,0,157,249,156,251,156,8,157,5,157,4,157,131,158,211,158,15,159,16,159,28,81,19,81,23,81,26,81,17,81,222,81,52,83,225,83,112,86,96,86,110,86,115,86,102,86,99,86,109,86,114,86,94,86,119,86,28,87,27,87,200,88,189,88,201,88,191,88,186,88,194,88,188,88,198,88,23,91,25,91,27,91,33,91,20,91,19,91,16,91,22,91,40,91,26,91,32,91,30,91,239,91,172,93,177,93,169,93,167,93,181,93,176,93,174,93,170,93,168,93,178,93,173,93,175,93,180,93,103,94,104,94,102,94,111,94,233,94,231,94,230,94,232,94,229,94,75,95,188,95,157,97,168,97,150,97,197,97,180,97,198,97,193,97,204,97,186,97,191,97,184,97,140,97,215,100,214,100,208,100,207,100,201,100,189,100,137,100,195,100,219,100,243,100,217,100,51,101,127,101,124,101,162,101,200,102,190,102,192,102,202,102,203,102,207,102,189,102,187,102,186,102,204,102,35,103,52,106,102,106,73,106,103,106,50,106,104,106,62,106,93,106,109,106,118,106,91,106,81,106,40,106,90,106,59,106,63,106,65,106,106,106,100,106,80,106,79,106,84,106,111,106,105,106,96,106,60,106,94,106,86,106,85,106,77,106,78,106,70,106,85,107,84,107,86,107,167,107,170,107,171,107,200,107,199,107,4,108,3,108,6,108,173,111,203,111,163,111,199,111,188,111,206,111,200,111,94,111,196,111,189,111,158,111,202,111,168,111,4,112,165,111,174,111,186,111,172,111,170,111,207,111,191,111,184,111,162,111,201,111,171,111,205,111,175,111,178,111,176,111,197,113,194,113,191,113,184,113,214,113,192,113,193,113,203,113,212,113,202,113,199,113,207,113,189,113,216,113,188,113,198,113,218,113,219,113,157,114,158,114,105,115,102,115,103,115,108,115,101,115,107,115,106,115,127,116,154,116,160,116,148,116,146,116,149,116,161,116,11,117,128,117,47,118,45,118,49,118,61,118,51,118,60,118,53,118,50,118,48,118,187,118,230,118,154,119,157,119,161,119,156,119,155,119,162,119,163,119,149,119,153,119,151,119,221,120,233,120,229,120,234,120,222,120,227,120,219,120,225,120,226,120,237,120,223,120,224,120,164,121,68,122,72,122,71,122,182,122,184,122,181,122,177,122,183,122,222,123,227,123,231,123,221,123,213,123,229,123,218,123,232,123,249,123,212,123,234,123,226,123,220,123,235,123,216,123,223,123,210,124,212,124,215,124,208,124,209,124,18,126,33,126,23,126,12,126,31,126,32,126,19,126,14,126,28,126,21,126,26,126,34,126,11,126,15,126,22,126,13,126,20,126,37,126,36,126,67,127,123,127,124,127,122,127,177,127,239,127,42,128,41,128,108,128,177,129,166,129,174,129,185,129,181,129,171,129,176,129,172,129,180,129,178,129,183,129,167,129,242,129,85,130,86,130,87,130,86,133,69,133,107,133,77,133,83,133,97,133,88,133,64,133,70,133,100,133,65,133,98,133,68,133,81,133,71,133,99,133,62,133,91,133,113,133,78,133,110,133,117,133,85,133,103,133,96,133,140,133,102,133,93,133,84,133,101,133,108,133,99,134,101,134,100,134,155,135,143,135,151,135,147,135,146,135,136,135,129,135,150,135,152,135,121,135,135,135,163,135,133,135,144,135,145,135,157,135,132,135,148,135,156,135,154,135,137,135,30,137,38,137,48,137,45,137,46,137,39,137,49,137,34,137,41,137,35,137,47,137,44,137,31,137,241,137,224,138,226,138,242,138,244,138,245,138,221,138,20,139,228,138,223,138,240,138,200,138,222,138,225,138,232,138,255,138,239,138,251,138,145,140,146,140,144,140,245,140,238,140,241,140,240,140,243,140,108,141,110,141,165,141,167,141,51,142,62,142,56,142,64,142,69,142,54,142,60,142,61,142,65,142,48,142,63,142,189,142,54,143,46,143,53,143,50,143,57,143,55,143,52,143,118,144,121,144,123,144,134,144,250,144,51,145,53,145,54,145,147,145,144,145,145,145,141,145,143,145,39,147,30,147,8,147,31,147,6,147,15,147,122,147,56,147,60,147,27,147,35,147,18,147,1,147,70,147,45,147,14,147,13,147,203,146,29,147,250,146,37,147,19,147,249,146,247,146,52,147,2,147,36,147,255,146,41,147,57,147,53,147,42,147,20,147,12,147,11,147,254,146,9,147,0,147,251,146,22,147,188,149,205,149,190,149,185,149,186,149,182,149,191,149,181,149,189,149,169,150,212,150,11,151,18,151,16,151,153,151,151,151,148,151,240,151,248,151,53,152,47,152,50,152,36,153,31,153,39,153,41,153,158,153,238,153,236,153,229,153,228,153,240,153,227,153,234,153,233,153,231,153,185,154,191,154,180,154,187,154,246,154,250,154,249,154,247,154,51,155,128,155,133,155,135,155,124,155,126,155,123,155,130,155,147,155,146,155,144,155,122,155,149,155,125,155,136,155,37,157,23,157,32,157,30,157,20,157,41,157,29,157,24,157,34,157,16,157,25,157,31,157,136,158,134,158,135,158,174,158,173,158,213,158,214,158,250,158,18,159,61,159,38,81,37,81,34,81,36,81,32,81,41,81,244,82,147,86,140,86,141,86,134,86,132,86,131,86,126,86,130,86,127,86,129,86,214,88,212,88,207,88,210,88,45,91,37,91,50,91,35,91,44,91,39,91,38,91,47,91,46,91,123,91,241,91,242,91,183,93,108,94,106,94,190,95,187,95,195,97,181,97,188,97,231,97,224,97,229,97,228,97,232,97,222,97,239,100,233,100,227,100,235,100,228,100,232,100,129,101,128,101,182,101,218,101,210,102,141,106,150,106,129,106,165,106,137,106,159,106,155,106,161,106,158,106,135,106,147,106,142,106,149,106,131,106,168,106,164,106,145,106,127,106,166,106,154,106,133,106,140,106,146,106,91,107,173,107,9,108,204,111,169,111,244,111,212,111,227,111,220,111,237,111,231,111,230,111,222,111,242,111,221,111,226,111,232,111,225,113,241,113,232,113,242,113,228,113,240,113,226,113,115,115,110,115,111,115,151,116,178,116,171,116,144,116,170,116,173,116,177,116,165,116,175,116,16,117,17,117,18,117,15,117,132,117,67,118,72,118,73,118,71,118,164,118,233,118,181,119,171,119,178,119,183,119,182,119,180,119,177,119,168,119,240,119,243,120,253,120,2,121,251,120,252,120,242,120,5,121,249,120,254,120,4,121,171,121,168,121,92,122,91,122,86,122,88,122,84,122,90,122,190,122,192,122,193,122,5,124,15,124,242,123,0,124,255,123,251,123,14,124,244,123,11,124,243,123,2,124,9,124,3,124,1,124,248,123,253,123,6,124,240,123,241,123,16,124,10,124,232,124,45,126,60,126,66,126,51,126,72,152,56,126,42,126,73,126,64,126,71,126,41,126,76,126,48,126,59,126,54,126,68,126,58,126,69,127,127,127,126,127,125,127,244,127,242,127,44,128,187,129,196,129,204,129,202,129,197,129,199,129,188,129,233,129,91,130,90,130,92,130,131,133,128,133,143,133,167,133,149,133,160,133,139,133,163,133,123,133,164,133,154,133,158,133,119,133,124,133,137,133,161,133,122,133,120,133,87,133,142,133,150,133,134,133,141,133,153,133,157,133,129,133,162,133,130,133,136,133,133,133,121,133,118,133,152,133,144,133,159,133,104,134,190,135,170,135,173,135,197,135,176,135,172,135,185,135,181,135,188,135,174,135,201,135,195,135,194,135,204,135,183,135,175,135,196,135,202,135,180,135,182,135,191,135,184,135,189,135,222,135,178,135,53,137,51,137,60,137,62,137,65,137,82,137,55,137,66,137,173,137,175,137,174,137,242,137,243,137,30,139,24,139,22,139,17,139,5,139,11,139,34,139,15,139,18,139,21,139,7,139,13,139,8,139,6,139,28,139,19,139,26,139,79,140,112,140,114,140,113,140,111,140,149,140,148,140,249,140,111,141,78,142,77,142,83,142,80,142,76,142,71,142,67,143,64,143,133,144,126,144,56,145,154,145,162,145,155,145,153,145,159,145,161,145,157,145,160,145,161,147,131,147,175,147,100,147,86,147,71,147,124,147,88,147,92,147,118,147,73,147,80,147,81,147,96,147,109,147,143,147,76,147,106,147,121,147,87,147,85,147,82,147,79,147,113,147,119,147,123,147,97,147,94,147,99,147,103,147,128,147,78,147,89,147,199,149,192,149,201,149,195,149,197,149,183,149,174,150,176,150,172,150,32,151,31,151,24,151,29,151,25,151,154,151,161,151,156,151,158,151,157,151,213,151,212,151,241,151,65,152,68,152,74,152,73,152,69,152,67,152,37,153,43,153,44,153,42,153,51,153,50,153,47,153,45,153,49,153,48,153,152,153,163,153,161,153,2,154,250,153,244,153,247,153,249,153,248,153,246,153,251,153,253,153,254,153,252,153,3,154,190,154,254,154,253,154,1,155,252,154,72,155,154,155,168,155,158,155,155,155,166,155,161,155,165,155,164,155,134,155,162,155,160,155,175,155,51,157,65,157,103,157,54,157,46,157,47,157,49,157,56,157,48,157,69,157,66,157,67,157,62,157,55,157,64,157,61,157,245,127,45,157,138,158,137,158,141,158,176,158,200,158,218,158,251,158,255,158,36,159,35,159,34,159,84,159,160,159,49,81,45,81,46,81,152,86,156,86,151,86,154,86,157,86,153,86,112,89,60,91,105,92,106,92,192,93,109,94,110,94,216,97,223,97,237,97,238,97,241,97,234,97,240,97,235,97,214,97,233,97,255,100,4,101,253,100,248,100,1,101,3,101,252,100,148,101,219,101,218,102,219,102,216,102,197,106,185,106,189,106,225,106,198,106,186,106,182,106,183,106,199,106,180,106,173,106,94,107,201,107,11,108,7,112,12,112,13,112,1,112,5,112,20,112,14,112,255,111,0,112,251,111,38,112,252,111,247,111,10,112,1,114,255,113,249,113,3,114,253,113,118,115,184,116,192,116,181,116,193,116,190,116,182,116,187,116,194,116,20,117,19,117,92,118,100,118,89,118,80,118,83,118,87,118,90,118,166,118,189,118,236,118,194,119,186,119,255,120,12,121,19,121,20,121,9,121,16,121,18,121,17,121,173,121,172,121,95,122,28,124,41,124,25,124,32,124,31,124,45,124,29,124,38,124,40,124,34,124,37,124,48,124,92,126,80,126,86,126,99,126,88,126,98,126,95,126,81,126,96,126,87,126,83,126,181,127,179,127,247,127,248,127,117,128,209,129,210,129,208,129,95,130,94,130,180,133,198,133,192,133,195,133,194,133,179,133,181,133,189,133,199,133,196,133,191,133,203,133,206,133,200,133,197,133,177,133,182,133,210,133,36,134,184,133,183,133,190,133,105,134,231,135,230,135,226,135,219,135,235,135,234,135,229,135,223,135,243,135,228,135,212,135,220,135,211,135,237,135,216,135,227,135,164,135,215,135,217,135,1,136,244,135,232,135,221,135,83,137,75,137,79,137,76,137,70,137,80,137,81,137,73,137,42,139,39,139,35,139,51,139,48,139,53,139,71,139,47,139,60,139,62,139,49,139,37,139,55,139,38,139,54,139,46,139,36,139,59,139,61,139,58,139,66,140,117,140,153,140,152,140,151,140,254,140,4,141,2,141,0,141,92,142,98,142,96,142,87,142,86,142,94,142,101,142,103,142,91,142,90,142,97,142,93,142,105,142,84,142,70,143,71,143,72,143,75,143,40,145,58,145,59,145,62,145,168,145,165,145,167,145,175,145,170,145,181,147,140,147,146,147,183,147,155,147,157,147,137,147,167,147,142,147,170,147,158,147,166,147,149,147,136,147,153,147,159,147,141,147,177,147,145,147,178,147,164,147,168,147,180,147,163,147,165,147,210,149,211,149,209,149,179,150,215,150,218,150,194,93,223,150,216,150,221,150,35,151,34,151,37,151,172,151,174,151,168,151,171,151,164,151,170,151,162,151,165,151,215,151,217,151,214,151,216,151,250,151,80,152,81,152,82,152,184,152,65,153,60,153,58,153,15,154,11,154,9,154,13,154,4,154,17,154,10,154,5,154,7,154,6,154,192,154,220,154,8,155,4,155,5,155,41,155,53,155,74,155,76,155,75,155,199,155,198,155,195,155,191,155,193,155,181,155,184,155,211,155,182,155,196,155,185,155,189,155,92,157,83,157,79,157,74,157,91,157,75,157,89,157,86,157,76,157,87,157,82,157,84,157,95,157,88,157,90,157,142,158,140,158,223,158,1,159,0,159,22,159,37,159,43,159,42,159,41,159,40,159,76,159,85,159,52,81,53,81,150,82,247,82,180,83,171,86,173,86,166,86,167,86,170,86,172,86,218,88,221,88,219,88,18,89,61,91,62,91,63,91,195,93,112,94,191,95,251,97,7,101,16,101,13,101,9,101,12,101,14,101,132,101,222,101,221,101,222,102,231,106,224,106,204,106,209,106,217,106,203,106,223,106,220,106,208,106,235,106,207,106,205,106,222,106,96,107,176,107,12,108,25,112,39,112,32,112,22,112,43,112,33,112,34,112,35,112,41,112,23,112,36,112,28,112,42,112,12,114,10,114,7,114,2,114,5,114,165,114,166,114,164,114,163,114,161,114,203,116,197,116,183,116,195,116,22,117,96,118,201,119,202,119,196,119,241,119,29,121,27,121,33,121,28,121,23,121,30,121,176,121,103,122,104,122,51,124,60,124,57,124,44,124,59,124,236,124,234,124,118,126,117,126,120,126,112,126,119,126,111,126,122,126,114,126,116,126,104,126,75,127,74,127,131,127,134,127,183,127,253,127,254,127,120,128,215,129,213,129,100,130,97,130,99,130,235,133,241,133,237,133,217,133,225,133,232,133,218,133,215,133,236,133,242,133,248,133,216,133,223,133,227,133,220,133,209,133,240,133,230,133,239,133,222,133,226,133,0,136,250,135,3,136,246,135,247,135,9,136,12,136,11,136,6,136,252,135,8,136,255,135,10,136,2,136,98,137,90,137,91,137,87,137,97,137,92,137,88,137,93,137,89,137,136,137,183,137,182,137,246,137,80,139,72,139,74,139,64,139,83,139,86,139,84,139,75,139,85,139,81,139,66,139,82,139,87,139,67,140,119,140,118,140,154,140,6,141,7,141,9,141,172,141,170,141,173,141,171,141,109,142,120,142,115,142,106,142,111,142,123,142,194,142,82,143,81,143,79,143,80,143,83,143,180,143,64,145,63,145,176,145,173,145,222,147,199,147,207,147,194,147,218,147,208,147,249,147,236,147,204,147,217,147,169,147,230,147,202,147,212,147,238,147,227,147,213,147,196,147,206,147,192,147,210,147,231,147,125,149,218,149,219,149,225,150,41,151,43,151,44,151,40,151,38,151,179,151,183,151,182,151,221,151,222,151,223,151,92,152,89,152,93,152,87,152,191,152,189,152,187,152,190,152,72,153,71,153,67,153,166,153,167,153,26,154,21,154,37,154,29,154,36,154,27,154,34,154,32,154,39,154,35,154,30,154,28,154,20,154,194,154,11,155,10,155,14,155,12,155,55,155,234,155,235,155,224,155,222,155,228,155,230,155,226,155,240,155,212,155,215,155,236,155,220,155,217,155,229,155,213,155,225,155,218,155,119,157,129,157,138,157,132,157,136,157,113,157,128,157,120,157,134,157,139,157,140,157,125,157,107,157,116,157,117,157,112,157,105,157,133,157,115,157,123,157,130,157,111,157,121,157,127,157,135,157,104,157,148,158,145,158,192,158,252,158,45,159,64,159,65,159,77,159,86,159,87,159,88,159,55,83,178,86,181,86,179,86,227,88,69,91,198,93,199,93,238,94,239,94,192,95,193,95,249,97,23,101,22,101,21,101,19,101,223,101,232,102,227,102,228,102,243,106,240,106,234,106,232,106,249,106,241,106,238,106,239,106,60,112,53,112,47,112,55,112,52,112,49,112,66,112,56,112,63,112,58,112,57,112,64,112,59,112,51,112,65,112,19,114,20,114,168,114,125,115,124,115,186,116,171,118,170,118,190,118,237,118,204,119,206,119,207,119,205,119,242,119,37,121,35,121,39,121,40,121,36,121,41,121,178,121,110,122,108,122,109,122,247,122,73,124,72,124,74,124,71,124,69,124,238,124,123,126,126,126,129,126,128,126,186,127,255,127,121,128,219,129,217,129,11,130,104,130,105,130,34,134,255,133,1,134,254,133,27,134,0,134,246,133,4,134,9,134,5,134,12,134,253,133,25,136,16,136,17,136,23,136,19,136,22,136,99,137,102,137,185,137,247,137,96,139,106,139,93,139,104,139,99,139,101,139,103,139,109,139,174,141,134,142,136,142,132,142,89,143,86,143,87,143,85,143,88,143,90,143,141,144,67,145,65,145,183,145,181,145,178,145,179,145,11,148,19,148,251,147,32,148,15,148,20,148,254,147,21,148,16,148,40,148,25,148,13,148,245,147,0,148,247,147,7,148,14,148,22,148,18,148,250,147,9,148,248,147,10,148,255,147,252,147,12,148,246,147,17,148,6,148,222,149,224,149,223,149,46,151,47,151,185,151,187,151,253,151,254,151,96,152,98,152,99,152,95,152,193,152,194,152,80,153,78,153,89,153,76,153,75,153,83,153,50,154,52,154,49,154,44,154,42,154,54,154,41,154,46,154,56,154,45,154,199,154,202,154,198,154,16,155,18,155,17,155,11,156,8,156,247,155,5,156,18,156,248,155,64,156,7,156,14,156,6,156,23,156,20,156,9,156,159,157,153,157,164,157,157,157,146,157,152,157,144,157,155,157,160,157,148,157,156,157,170,157,151,157,161,157,154,157,162,157,168,157,158,157,163,157,191,157,169,157,150,157,166,157,167,157,153,158,155,158,154,158,229,158,228,158,231,158,230,158,48,159,46,159,91,159,96,159,94,159,93,159,89,159,145,159,58,81,57,81,152,82,151,82,195,86,189,86,190,86,72,91,71,91,203,93,207,93,241,94,253,97,27,101,2,107,252,106,3,107,248,106,0,107,67,112,68,112,74,112,72,112,73,112,69,112,70,112,29,114,26,114,25,114,126,115,23,117,106,118,208,119,45,121,49,121,47,121,84,124,83,124,242,124,138,126,135,126,136,126,139,126,134,126,141,126,77,127,187,127,48,128,221,129,24,134,42,134,38,134,31,134,35,134,28,134,25,134,39,134,46,134,33,134,32,134,41,134,30,134,37,134,41,136,29,136,27,136,32,136,36,136,28,136,43,136,74,136,109,137,105,137,110,137,107,137,250,137,121,139,120,139,69,139,122,139,123,139,16,141,20,141,175,141,142,142,140,142,94,143,91,143,93,143,70,145,68,145,69,145,185,145,63,148,59,148,54,148,41,148,61,148,60,148,48,148,57,148,42,148,55,148,44,148,64,148,49,148,229,149,228,149,227,149,53,151,58,151,191,151,225,151,100,152,201,152,198,152,192,152,88,153,86,153,57,154,61,154,70,154,68,154,66,154,65,154,58,154,63,154,205,154,21,155,23,155,24,155,22,155,58,155,82,155,43,156,29,156,28,156,44,156,35,156,40,156,41,156,36,156,33,156,183,157,182,157,188,157,193,157,199,157,202,157,207,157,190,157,197,157,195,157,187,157,181,157,206,157,185,157,186,157,172,157,200,157,177,157,173,157,204,157,179,157,205,157,178,157,122,158,156,158,235,158,238,158,237,158,27,159,24,159,26,159,49,159,78,159,101,159,100,159,146,159,185,78,198,86,197,86,203,86,113,89,75,91,76,91,213,93,209,93,242,94,33,101,32,101,38,101,34,101,11,107,8,107,9,107,13,108,85,112,86,112,87,112,82,112,30,114,31,114,169,114,127,115,216,116,213,116,217,116,215,116,109,118,173,118,53,121,180,121,112,122,113,122,87,124,92,124,89,124,91,124,90,124,244,124,241,124,145,126,79,127,135,127,222,129,107,130,52,134,53,134,51,134,44,134,50,134,54,134,44,136,40,136,38,136,42,136,37,136,113,137,191,137,190,137,251,137,126,139,132,139,130,139,134,139,133,139,127,139,21,141,149,142,148,142,154,142,146,142,144,142,150,142,151,142,96,143,98,143,71,145,76,148,80,148,74,148,75,148,79,148,71,148,69,148,72,148,73,148,70,148,63,151,227,151,106,152,105,152,203,152,84,153,91,153,78,154,83,154,84,154,76,154,79,154,72,154,74,154,73,154,82,154,80,154,208,154,25,155,43,155,59,155,86,155,85,155,70,156,72,156,63,156,68,156,57,156,51,156,65,156,60,156,55,156,52,156,50,156,61,156,54,156,219,157,210,157,222,157,218,157,203,157,208,157,220,157,209,157,223,157,233,157,217,157,216,157,214,157,245,157,213,157,221,157,182,158,240,158,53,159,51,159,50,159,66,159,107,159,149,159,162,159,61,81,153,82,232,88,231,88,114,89,77,91,216,93,47,136,79,95,1,98,3,98,4,98,41,101,37,101,150,101,235,102,17,107,18,107,15,107,202,107,91,112,90,112,34,114,130,115,129,115,131,115,112,118,212,119,103,124,102,124,149,126,108,130,58,134,64,134,57,134,60,134,49,134,59,134,62,134,48,136,50,136,46,136,51,136,118,137,116,137,115,137,254,137,140,139,142,139,139,139,136,139,69,140,25,141,152,142,100,143,99,143,188,145,98,148,85,148,93,148,87,148,94,148,196,151,197,151,0,152,86,154,89,154,30,155,31,155,32,155,82,156,88,156,80,156,74,156,77,156,75,156,85,156,89,156,76,156,78,156,251,157,247,157,239,157,227,157,235,157,248,157,228,157,246,157,225,157,238,157,230,157,242,157,240,157,226,157,236,157,244,157,243,157,232,157,237,157,194,158,208,158,242,158,243,158,6,159,28,159,56,159,55,159,54,159,67,159,79,159,113,159,112,159,110,159,111,159,211,86,205,86,78,91,109,92,45,101,237,102,238,102,19,107,95,112,97,112,93,112,96,112,35,114,219,116,229,116,213,119,56,121,183,121,182,121,106,124,151,126,137,127,109,130,67,134,56,136,55,136,53,136,75,136,148,139,149,139,158,142,159,142,160,142,157,142,190,145,189,145,194,145,107,148,104,148,105,148,229,150,70,151,67,151,71,151,199,151,229,151,94,154,213,154,89,155,99,156,103,156,102,156,98,156,94,156,96,156,2,158,254,157,7,158,3,158,6,158,5,158,0,158,1,158,9,158,255,157,253,157,4,158,160,158,30,159,70,159,116,159,117,159,118,159,212,86,46,101,184,101,24,107,25,107,23,107,26,107,98,112,38,114,170,114,216,119,217,119,57,121,105,124,107,124,246,124,154,126,152,126,155,126,153,126,224,129,225,129,70,134,71,134,72,134,121,137,122,137,124,137,123,137,255,137,152,139,153,139,165,142,164,142,163,142,110,148,109,148,111,148,113,148,115,148,73,151,114,152,95,153,104,156,110,156,109,156,11,158,13,158,16,158,15,158,18,158,17,158,161,158,245,158,9,159,71,159,120,159,123,159,122,159,121,159,30,87,102,112,111,124,60,136,178,141,166,142,195,145,116,148,120,148,118,148,117,148,96,154,116,156,115,156,113,156,117,156,20,158,19,158,246,158,10,159,164,159,104,112,101,112,247,124,106,134,62,136,61,136,63,136,158,139,156,140,169,142,201,142,75,151,115,152,116,152,204,152,97,153,171,153,100,154,102,154,103,154,36,155,21,158,23,158,72,159,7,98,30,107,39,114,76,134,168,142,130,148,128,148,129,148,105,154,104,154,46,155,25,158,41,114,75,134,159,139,131,148,121,156,183,158,117,118,107,154,122,156,29,158,105,112,106,112,164,158,126,159,73,159,152,159,129,120,185,146,207,136,187,88,82,96,167,124,250,90,84,37,102,37,87,37,96,37,108,37,99,37,90,37,105,37,93,37,82,37,100,37,85,37,94,37,106,37,97,37,88,37,103,37,91,37,83,37,101,37,86,37,95,37,107,37,98,37,89,37,104,37,92,37,81,37,80,37,109,37,110,37,112,37,111,37,147,37,0,0,0,0,0,0,0,48,1,48,2,48,183,0,37,32,38,32,168,0,3,48,173,0,21,32,37,34,60,255,60,34,24,32,25,32,28,32,29,32,20,48,21,48,8,48,9,48,10,48,11,48,12,48,13,48,14,48,15,48,16,48,17,48,177,0,215,0,247,0,96,34,100,34,101,34,30,34,52,34,176,0,50,32,51,32,3,33,43,33,224,255,225,255,229,255,66,38,64,38,32,34,165,34,18,35,2,34,7,34,97,34,82,34,167,0,59,32,6,38,5,38,203,37,207,37,206,37,199,37,198,37,161,37,160,37,179,37,178,37,189,37,188,37,146,33,144,33,145,33,147,33,148,33,19,48,106,34,107,34,26,34,61,34,29,34,53,34,43,34,44,34,8,34,11,34,134,34,135,34,130,34,131,34,42,34,41,34,39,34,40,34,226,255,210,33,212,33,0,34,3,34,180,0,94,255,199,2,216,2,221,2,218,2,217,2,184,0,219,2,161,0,191,0,208,2,46,34,17,34,15,34,164,0,9,33,48,32,193,37,192,37,183,37,182,37,100,38,96,38,97,38,101,38,103,38,99,38,153,34,200,37,163,37,208,37,209,37,146,37,164,37,165,37,168,37,167,37,166,37,169,37,104,38,15,38,14,38,28,38,30,38,182,0,32,32,33,32,149,33,151,33,153,33,150,33,152,33,109,38,105,38,106,38,108,38,127,50,28,50,22,33,199,51,34,33,194,51,216,51,33,33,172,32,174,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,255,2,255,3,255,4,255,5,255,6,255,7,255,8,255,9,255,10,255,11,255,12,255,13,255,14,255,15,255,16,255,17,255,18,255,19,255,20,255,21,255,22,255,23,255,24,255,25,255,26,255,27,255,28,255,29,255,30,255,31,255,32,255,33,255,34,255,35,255,36,255,37,255,38,255,39,255,40,255,41,255,42,255,43,255,44,255,45,255,46,255,47,255,48,255,49,255,50,255,51,255,52,255,53,255,54,255,55,255,56,255,57,255,58,255,59,255,230,255,61,255,62,255,63,255,64,255,65,255,66,255,67,255,68,255,69,255,70,255,71,255,72,255,73,255,74,255,75,255,76,255,77,255,78,255,79,255,80,255,81,255,82,255,83,255,84,255,85,255,86,255,87,255,88,255,89,255,90,255,91,255,92,255,93,255,227,255,49,49,50,49,51,49,52,49,53,49,54,49,55,49,56,49,57,49,58,49,59,49,60,49,61,49,62,49,63,49,64,49,65,49,66,49,67,49,68,49,69,49,70,49,71,49,72,49,73,49,74,49,75,49,76,49,77,49,78,49,79,49,80,49,81,49,82,49,83,49,84,49,85,49,86,49,87,49,88,49,89,49,90,49,91,49,92,49,93,49,94,49,95,49,96,49,97,49,98,49,99,49,100,49,101,49,102,49,103,49,104,49,105,49,106,49,107,49,108,49,109,49,110,49,111,49,112,49,113,49,114,49,115,49,116,49,117,49,118,49,119,49,120,49,121,49,122,49,123,49,124,49,125,49,126,49,127,49,128,49,129,49,130,49,131,49,132,49,133,49,134,49,135,49,136,49,137,49,138,49,139,49,140,49,141,49,142,49,112,33,113,33,114,33,115,33,116,33,117,33,118,33,119,33,120,33,121,33,0,0,0,0,0,0,0,0,0,0,96,33,97,33,98,33,99,33,100,33,101,33,102,33,103,33,104,33,105,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,145,3,146,3,147,3,148,3,149,3,150,3,151,3,152,3,153,3,154,3,155,3,156,3,157,3,158,3,159,3,160,3,161,3,163,3,164,3,165,3,166,3,167,3,168,3,169,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,177,3,178,3,179,3,180,3,181,3,182,3,183,3,184,3,185,3,186,3,187,3,188,3,189,3,190,3,191,3,192,3,193,3,195,3,196,3,197,3,198,3,199,3,200,3,201,3,0,0,0,0,0,0,0,0,0,0,0,0,0,37,2,37,12,37,16,37,24,37,20,37,28,37,44,37,36,37,52,37,60,37,1,37,3,37,15,37,19,37,27,37,23,37,35,37,51,37,43,37,59,37,75,37,32,37,47,37,40,37,55,37,63,37,29,37,48,37,37,37,56,37,66,37,18,37,17,37,26,37,25,37,22,37,21,37,14,37,13,37,30,37,31,37,33,37,34,37,38,37,39,37,41,37,42,37,45,37,46,37,49,37,50,37,53,37,54,37,57,37,58,37,61,37,62,37,64,37,65,37,67,37,68,37,69,37,70,37,71,37,72,37,73,37,74,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,149,51,150,51,151,51,19,33,152,51,196,51,163,51,164,51,165,51,166,51,153,51,154,51,155,51,156,51,157,51,158,51,159,51,160,51,161,51,162,51,202,51,141,51,142,51,143,51,207,51,136,51,137,51,200,51,167,51,168,51,176,51,177,51,178,51,179,51,180,51,181,51,182,51,183,51,184,51,185,51,128,51,129,51,130,51,131,51,132,51,186,51,187,51,188,51,189,51,190,51,191,51,144,51,145,51,146,51,147,51,148,51,38,33,192,51,193,51,138,51,139,51,140,51,214,51,197,51,173,51,174,51,175,51,219,51,169,51,170,51,171,51,172,51,221,51,208,51,211,51,195,51,201,51,220,51,198,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,0,208,0,170,0,38,1,0,0,50,1,0,0,63,1,65,1,216,0,82,1,186,0,222,0,102,1,74,1,0,0,96,50,97,50,98,50,99,50,100,50,101,50,102,50,103,50,104,50,105,50,106,50,107,50,108,50,109,50,110,50,111,50,112,50,113,50,114,50,115,50,116,50,117,50,118,50,119,50,120,50,121,50,122,50,123,50,208,36,209,36,210,36,211,36,212,36,213,36,214,36,215,36,216,36,217,36,218,36,219,36,220,36,221,36,222,36,223,36,224,36,225,36,226,36,227,36,228,36,229,36,230,36,231,36,232,36,233,36,96,36,97,36,98,36,99,36,100,36,101,36,102,36,103,36,104,36,105,36,106,36,107,36,108,36,109,36,110,36,189,0,83,33,84,33,188,0,190,0,91,33,92,33,93,33,94,33,230,0,17,1,240,0,39,1,49,1,51,1,56,1,64,1,66,1,248,0,83,1,223,0,254,0,103,1,75,1,73,1,0,50,1,50,2,50,3,50,4,50,5,50,6,50,7,50,8,50,9,50,10,50,11,50,12,50,13,50,14,50,15,50,16,50,17,50,18,50,19,50,20,50,21,50,22,50,23,50,24,50,25,50,26,50,27,50,156,36,157,36,158,36,159,36,160,36,161,36,162,36,163,36,164,36,165,36,166,36,167,36,168,36,169,36,170,36,171,36,172,36,173,36,174,36,175,36,176,36,177,36,178,36,179,36,180,36,181,36,116,36,117,36,118,36,119,36,120,36,121,36,122,36,123,36,124,36,125,36,126,36,127,36,128,36,129,36,130,36,185,0,178,0,179,0,116,32,127,32,129,32,130,32,131,32,132,32,65,48,66,48,67,48,68,48,69,48,70,48,71,48,72,48,73,48,74,48,75,48,76,48,77,48,78,48,79,48,80,48,81,48,82,48,83,48,84,48,85,48,86,48,87,48,88,48,89,48,90,48,91,48,92,48,93,48,94,48,95,48,96,48,97,48,98,48,99,48,100,48,101,48,102,48,103,48,104,48,105,48,106,48,107,48,108,48,109,48,110,48,111,48,112,48,113,48,114,48,115,48,116,48,117,48,118,48,119,48,120,48,121,48,122,48,123,48,124,48,125,48,126,48,127,48,128,48,129,48,130,48,131,48,132,48,133,48,134,48,135,48,136,48,137,48,138,48,139,48,140,48,141,48,142,48,143,48,144,48,145,48,146,48,147,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,161,48,162,48,163,48,164,48,165,48,166,48,167,48,168,48,169,48,170,48,171,48,172,48,173,48,174,48,175,48,176,48,177,48,178,48,179,48,180,48,181,48,182,48,183,48,184,48,185,48,186,48,187,48,188,48,189,48,190,48,191,48,192,48,193,48,194,48,195,48,196,48,197,48,198,48,199,48,200,48,201,48,202,48,203,48,204,48,205,48,206,48,207,48,208,48,209,48,210,48,211,48,212,48,213,48,214,48,215,48,216,48,217,48,218,48,219,48,220,48,221,48,222,48,223,48,224,48,225,48,226,48,227,48,228,48,229,48,230,48,231,48,232,48,233,48,234,48,235,48,236,48,237,48,238,48,239,48,240,48,241,48,242,48,243,48,244,48,245,48,246,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,4,17,4,18,4,19,4,20,4,21,4,1,4,22,4,23,4,24,4,25,4,26,4,27,4,28,4,29,4,30,4,31,4,32,4,33,4,34,4,35,4,36,4,37,4,38,4,39,4,40,4,41,4,42,4,43,4,44,4,45,4,46,4,47,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,4,49,4,50,4,51,4,52,4,53,4,81,4,54,4,55,4,56,4,57,4,58,4,59,4,60,4,61,4,62,4,63,4,64,4,65,4,66,4,67,4,68,4,69,4,70,4,71,4,72,4,73,4,74,4,75,4,76,4,77,4,78,4,79,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,1,172,4,172,7,172,8,172,9,172,10,172,16,172,17,172,18,172,19,172,20,172,21,172,22,172,23,172,25,172,26,172,27,172,28,172,29,172,32,172,36,172,44,172,45,172,47,172,48,172,49,172,56,172,57,172,60,172,64,172,75,172,77,172,84,172,88,172,92,172,112,172,113,172,116,172,119,172,120,172,122,172,128,172,129,172,131,172,132,172,133,172,134,172,137,172,138,172,139,172,140,172,144,172,148,172,156,172,157,172,159,172,160,172,161,172,168,172,169,172,170,172,172,172,175,172,176,172,184,172,185,172,187,172,188,172,189,172,193,172,196,172,200,172,204,172,213,172,215,172,224,172,225,172,228,172,231,172,232,172,234,172,236,172,239,172,240,172,241,172,243,172,245,172,246,172,252,172,253,172,0,173,4,173,6,173,12,173,13,173,15,173,17,173,24,173,28,173,32,173,41,173,44,173,45,173,52,173,53,173,56,173,60,173,68,173,69,173,71,173,73,173,80,173,84,173,88,173,97,173,99,173,108,173,109,173,112,173,115,173,116,173,117,173,118,173,123,173,124,173,125,173,127,173,129,173,130,173,136,173,137,173,140,173,144,173,156,173,157,173,164,173,183,173,192,173,193,173,196,173,200,173,208,173,209,173,211,173,220,173,224,173,228,173,248,173,249,173,252,173,255,173,0,174,1,174,8,174,9,174,11,174,13,174,20,174,48,174,49,174,52,174,55,174,56,174,58,174,64,174,65,174,67,174,69,174,70,174,74,174,76,174,77,174,78,174,80,174,84,174,86,174,92,174,93,174,95,174,96,174,97,174,101,174,104,174,105,174,108,174,112,174,120,174,121,174,123,174,124,174,125,174,132,174,133,174,140,174,188,174,189,174,190,174,192,174,196,174,204,174,205,174,207,174,208,174,209,174,216,174,217,174,220,174,232,174,235,174,237,174,244,174,248,174,252,174,7,175,8,175], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+255076);
/* memory initializer */ allocate([13,175,16,175,44,175,45,175,48,175,50,175,52,175,60,175,61,175,63,175,65,175,66,175,67,175,72,175,73,175,80,175,92,175,93,175,100,175,101,175,121,175,128,175,132,175,136,175,144,175,145,175,149,175,156,175,184,175,185,175,188,175,192,175,199,175,200,175,201,175,203,175,205,175,206,175,212,175,220,175,232,175,233,175,240,175,241,175,244,175,248,175,0,176,1,176,4,176,12,176,16,176,20,176,28,176,29,176,40,176,68,176,69,176,72,176,74,176,76,176,78,176,83,176,84,176,85,176,87,176,89,176,93,176,124,176,125,176,128,176,132,176,140,176,141,176,143,176,145,176,152,176,153,176,154,176,156,176,159,176,160,176,161,176,162,176,168,176,169,176,171,176,172,176,173,176,174,176,175,176,177,176,179,176,180,176,181,176,184,176,188,176,196,176,197,176,199,176,200,176,201,176,208,176,209,176,212,176,216,176,224,176,229,176,8,177,9,177,11,177,12,177,16,177,18,177,19,177,24,177,25,177,27,177,28,177,29,177,35,177,36,177,37,177,40,177,44,177,52,177,53,177,55,177,56,177,57,177,64,177,65,177,68,177,72,177,80,177,81,177,84,177,85,177,88,177,92,177,96,177,120,177,121,177,124,177,128,177,130,177,136,177,137,177,139,177,141,177,146,177,147,177,148,177,152,177,156,177,168,177,204,177,208,177,212,177,220,177,221,177,223,177,232,177,233,177,236,177,240,177,249,177,251,177,253,177,4,178,5,178,8,178,11,178,12,178,20,178,21,178,23,178,25,178,32,178,52,178,60,178,88,178,92,178,96,178,104,178,105,178,116,178,117,178,124,178,132,178,133,178,137,178,144,178,145,178,148,178,152,178,153,178,154,178,160,178,161,178,163,178,165,178,166,178,170,178,172,178,176,178,180,178,200,178,201,178,204,178,208,178,210,178,216,178,217,178,219,178,221,178,226,178,228,178,229,178,230,178,232,178,235,178,236,178,237,178,238,178,239,178,243,178,244,178,245,178,247,178,248,178,249,178,250,178,251,178,255,178,0,179,1,179,4,179,8,179,16,179,17,179,19,179,20,179,21,179,28,179,84,179,85,179,86,179,88,179,91,179,92,179,94,179,95,179,100,179,101,179,103,179,105,179,107,179,110,179,112,179,113,179,116,179,120,179,128,179,129,179,131,179,132,179,133,179,140,179,144,179,148,179,160,179,161,179,168,179,172,179,196,179,197,179,200,179,203,179,204,179,206,179,208,179,212,179,213,179,215,179,217,179,219,179,221,179,224,179,228,179,232,179,252,179,16,180,24,180,28,180,32,180,40,180,41,180,43,180,52,180,80,180,81,180,84,180,88,180,96,180,97,180,99,180,101,180,108,180,128,180,136,180,157,180,164,180,168,180,172,180,181,180,183,180,185,180,192,180,196,180,200,180,208,180,213,180,220,180,221,180,224,180,227,180,228,180,230,180,236,180,237,180,239,180,241,180,248,180,20,181,21,181,24,181,27,181,28,181,36,181,37,181,39,181,40,181,41,181,42,181,48,181,49,181,52,181,56,181,64,181,65,181,67,181,68,181,69,181,75,181,76,181,77,181,80,181,84,181,92,181,93,181,95,181,96,181,97,181,160,181,161,181,164,181,168,181,170,181,171,181,176,181,177,181,179,181,180,181,181,181,187,181,188,181,189,181,192,181,196,181,204,181,205,181,207,181,208,181,209,181,216,181,236,181,16,182,17,182,20,182,24,182,37,182,44,182,52,182,72,182,100,182,104,182,156,182,157,182,160,182,164,182,171,182,172,182,177,182,212,182,240,182,244,182,248,182,0,183,1,183,5,183,40,183,41,183,44,183,47,183,48,183,56,183,57,183,59,183,68,183,72,183,76,183,84,183,85,183,96,183,100,183,104,183,112,183,113,183,115,183,117,183,124,183,125,183,128,183,132,183,140,183,141,183,143,183,144,183,145,183,146,183,150,183,151,183,152,183,153,183,156,183,160,183,168,183,169,183,171,183,172,183,173,183,180,183,181,183,184,183,199,183,201,183,236,183,237,183,240,183,244,183,252,183,253,183,255,183,0,184,1,184,7,184,8,184,9,184,12,184,16,184,24,184,25,184,27,184,29,184,36,184,37,184,40,184,44,184,52,184,53,184,55,184,56,184,57,184,64,184,68,184,81,184,83,184,92,184,93,184,96,184,100,184,108,184,109,184,111,184,113,184,120,184,124,184,141,184,168,184,176,184,180,184,184,184,192,184,193,184,195,184,197,184,204,184,208,184,212,184,221,184,223,184,225,184,232,184,233,184,236,184,240,184,248,184,249,184,251,184,253,184,4,185,24,185,32,185,60,185,61,185,64,185,68,185,76,185,79,185,81,185,88,185,89,185,92,185,96,185,104,185,105,185,107,185,109,185,116,185,117,185,120,185,124,185,132,185,133,185,135,185,137,185,138,185,141,185,142,185,172,185,173,185,176,185,180,185,188,185,189,185,191,185,193,185,200,185,201,185,204,185,206,185,207,185,208,185,209,185,210,185,216,185,217,185,219,185,221,185,222,185,225,185,227,185,228,185,229,185,232,185,236,185,244,185,245,185,247,185,248,185,249,185,250,185,0,186,1,186,8,186,21,186,56,186,57,186,60,186,64,186,66,186,72,186,73,186,75,186,77,186,78,186,83,186,84,186,85,186,88,186,92,186,100,186,101,186,103,186,104,186,105,186,112,186,113,186,116,186,120,186,131,186,132,186,133,186,135,186,140,186,168,186,169,186,171,186,172,186,176,186,178,186,184,186,185,186,187,186,189,186,196,186,200,186,216,186,217,186,252,186,0,187,4,187,13,187,15,187,17,187,24,187,28,187,32,187,41,187,43,187,52,187,53,187,54,187,56,187,59,187,60,187,61,187,62,187,68,187,69,187,71,187,73,187,77,187,79,187,80,187,84,187,88,187,97,187,99,187,108,187,136,187,140,187,144,187,164,187,168,187,172,187,180,187,183,187,192,187,196,187,200,187,208,187,211,187,248,187,249,187,252,187,255,187,0,188,2,188,8,188,9,188,11,188,12,188,13,188,15,188,17,188,20,188,21,188,22,188,23,188,24,188,27,188,28,188,29,188,30,188,31,188,36,188,37,188,39,188,41,188,45,188,48,188,49,188,52,188,56,188,64,188,65,188,67,188,68,188,69,188,73,188,76,188,77,188,80,188,93,188,132,188,133,188,136,188,139,188,140,188,142,188,148,188,149,188,151,188,153,188,154,188,160,188,161,188,164,188,167,188,168,188,176,188,177,188,179,188,180,188,181,188,188,188,189,188,192,188,196,188,205,188,207,188,208,188,209,188,213,188,216,188,220,188,244,188,245,188,246,188,248,188,252,188,4,189,5,189,7,189,9,189,16,189,20,189,36,189,44,189,64,189,72,189,73,189,76,189,80,189,88,189,89,189,100,189,104,189,128,189,129,189,132,189,135,189,136,189,137,189,138,189,144,189,145,189,147,189,149,189,153,189,154,189,156,189,164,189,176,189,184,189,212,189,213,189,216,189,220,189,233,189,240,189,244,189,248,189,0,190,3,190,5,190,12,190,13,190,16,190,20,190,28,190,29,190,31,190,68,190,69,190,72,190,76,190,78,190,84,190,85,190,87,190,89,190,90,190,91,190,96,190,97,190,100,190,104,190,106,190,112,190,113,190,115,190,116,190,117,190,123,190,124,190,125,190,128,190,132,190,140,190,141,190,143,190,144,190,145,190,152,190,153,190,168,190,208,190,209,190,212,190,215,190,216,190,224,190,227,190,228,190,229,190,236,190,1,191,8,191,9,191,24,191,25,191,27,191,28,191,29,191,64,191,65,191,68,191,72,191,80,191,81,191,85,191,148,191,176,191,197,191,204,191,205,191,208,191,212,191,220,191,223,191,225,191,60,192,81,192,88,192,92,192,96,192,104,192,105,192,144,192,145,192,148,192,152,192,160,192,161,192,163,192,165,192,172,192,173,192,175,192,176,192,179,192,180,192,181,192,182,192,188,192,189,192,191,192,192,192,193,192,197,192,200,192,201,192,204,192,208,192,216,192,217,192,219,192,220,192,221,192,228,192,229,192,232,192,236,192,244,192,245,192,247,192,249,192,0,193,4,193,8,193,16,193,21,193,28,193,29,193,30,193,31,193,32,193,35,193,36,193,38,193,39,193,44,193,45,193,47,193,48,193,49,193,54,193,56,193,57,193,60,193,64,193,72,193,73,193,75,193,76,193,77,193,84,193,85,193,88,193,92,193,100,193,101,193,103,193,104,193,105,193,112,193,116,193,120,193,133,193,140,193,141,193,142,193,144,193,148,193,150,193,156,193,157,193,159,193,161,193,165,193,168,193,169,193,172,193,176,193,189,193,196,193,200,193,204,193,212,193,215,193,216,193,224,193,228,193,232,193,240,193,241,193,243,193,252,193,253,193,0,194,4,194,12,194,13,194,15,194,17,194,24,194,25,194,28,194,31,194,32,194,40,194,41,194,43,194,45,194,47,194,49,194,50,194,52,194,72,194,80,194,81,194,84,194,88,194,96,194,101,194,108,194,109,194,112,194,116,194,124,194,125,194,127,194,129,194,136,194,137,194,144,194,152,194,155,194,157,194,164,194,165,194,168,194,172,194,173,194,180,194,181,194,183,194,185,194,220,194,221,194,224,194,227,194,228,194,235,194,236,194,237,194,239,194,241,194,246,194,248,194,249,194,251,194,252,194,0,195,8,195,9,195,12,195,13,195,19,195,20,195,21,195,24,195,28,195,36,195,37,195,40,195,41,195,69,195,104,195,105,195,108,195,112,195,114,195,120,195,121,195,124,195,125,195,132,195,136,195,140,195,192,195,216,195,217,195,220,195,223,195,224,195,226,195,232,195,233,195,237,195,244,195,245,195,248,195,8,196,16,196,36,196,44,196,48,196,52,196,60,196,61,196,72,196,100,196,101,196,104,196,108,196,116,196,117,196,121,196,128,196,148,196,156,196,184,196,188,196,233,196,240,196,241,196,244,196,248,196,250,196,255,196,0,197,1,197,12,197,16,197,20,197,28,197,40,197,41,197,44,197,48,197,56,197,57,197,59,197,61,197,68,197,69,197,72,197,73,197,74,197,76,197,77,197,78,197,83,197,84,197,85,197,87,197,88,197,89,197,93,197,94,197,96,197,97,197,100,197,104,197,112,197,113,197,115,197,116,197,117,197,124,197,125,197,128,197,132,197,135,197,140,197,141,197,143,197,145,197,149,197,151,197,152,197,156,197,160,197,169,197,180,197,181,197,184,197,185,197,187,197,188,197,189,197,190,197,196,197,197,197,198,197,199,197,200,197,201,197,202,197,204,197,206,197,208,197,209,197,212,197,216,197,224,197,225,197,227,197,229,197,236,197,237,197,238,197,240,197,244,197,246,197,247,197,252,197,253,197,254,197,255,197,0,198,1,198,5,198,6,198,7,198,8,198,12,198,16,198,24,198,25,198,27,198,28,198,36,198,37,198,40,198,44,198,45,198,46,198,48,198,51,198,52,198,53,198,55,198,57,198,59,198,64,198,65,198,68,198,72,198,80,198,81,198,83,198,84,198,85,198,92,198,93,198,96,198,108,198,111,198,113,198,120,198,121,198,124,198,128,198,136,198,137,198,139,198,141,198,148,198,149,198,152,198,156,198,164,198,165,198,167,198,169,198,176,198,177,198,180,198,184,198,185,198,186,198,192,198,193,198,195,198,197,198,204,198,205,198,208,198,212,198,220,198,221,198,224,198,225,198,232,198,233,198,236,198,240,198,248,198,249,198,253,198,4,199,5,199,8,199,12,199,20,199,21,199,23,199,25,199,32,199,33,199,36,199,40,199,48,199,49,199,51,199,53,199,55,199,60,199,61,199,64,199,68,199,74,199,76,199,77,199,79,199,81,199,82,199,83,199,84,199,85,199,86,199,87,199,88,199,92,199,96,199,104,199,107,199,116,199,117,199,120,199,124,199,125,199,126,199,131,199,132,199,133,199,135,199,136,199,137,199,138,199,142,199,144,199,145,199,148,199,150,199,151,199,152,199,154,199,160,199,161,199,163,199,164,199,165,199,166,199,172,199,173,199,176,199,180,199,188,199,189,199,191,199,192,199,193,199,200,199,201,199,204,199,206,199,208,199,216,199,221,199,228,199,232,199,236,199,0,200,1,200,4,200,8,200,10,200,16,200,17,200,19,200,21,200,22,200,28,200,29,200,32,200,36,200,44,200,45,200,47,200,49,200,56,200,60,200,64,200,72,200,73,200,76,200,77,200,84,200,112,200,113,200,116,200,120,200,122,200,128,200,129,200,131,200,133,200,134,200,135,200,139,200,140,200,141,200,148,200,157,200,159,200,161,200,168,200,188,200,189,200,196,200,200,200,204,200,212,200,213,200,215,200,217,200,224,200,225,200,228,200,245,200,252,200,253,200,0,201,4,201,5,201,6,201,12,201,13,201,15,201,17,201,24,201,44,201,52,201,80,201,81,201,84,201,88,201,96,201,97,201,99,201,108,201,112,201,116,201,124,201,136,201,137,201,140,201,144,201,152,201,153,201,155,201,157,201,192,201,193,201,196,201,199,201,200,201,202,201,208,201,209,201,211,201,213,201,214,201,217,201,218,201,220,201,221,201,224,201,226,201,228,201,231,201,236,201,237,201,239,201,240,201,241,201,248,201,249,201,252,201,0,202,8,202,9,202,11,202,12,202,13,202,20,202,24,202,41,202,76,202,77,202,80,202,84,202,92,202,93,202,95,202,96,202,97,202,104,202,125,202,132,202,152,202,188,202,189,202,192,202,196,202,204,202,205,202,207,202,209,202,211,202,216,202,217,202,224,202,236,202,244,202,8,203,16,203,20,203,24,203,32,203,33,203,65,203,72,203,73,203,76,203,80,203,88,203,89,203,93,203,100,203,120,203,121,203,156,203,184,203,212,203,228,203,231,203,233,203,12,204,13,204,16,204,20,204,28,204,29,204,33,204,34,204,39,204,40,204,41,204,44,204,46,204,48,204,56,204,57,204,59,204,60,204,61,204,62,204,68,204,69,204,72,204,76,204,84,204,85,204,87,204,88,204,89,204,96,204,100,204,102,204,104,204,112,204,117,204,152,204,153,204,156,204,160,204,168,204,169,204,171,204,172,204,173,204,180,204,181,204,184,204,188,204,196,204,197,204,199,204,201,204,208,204,212,204,228,204,236,204,240,204,1,205,8,205,9,205,12,205,16,205,24,205,25,205,27,205,29,205,36,205,40,205,44,205,57,205,92,205,96,205,100,205,108,205,109,205,111,205,113,205,120,205,136,205,148,205,149,205,152,205,156,205,164,205,165,205,167,205,169,205,176,205,196,205,204,205,208,205,232,205,236,205,240,205,248,205,249,205,251,205,253,205,4,206,8,206,12,206,20,206,25,206,32,206,33,206,36,206,40,206,48,206,49,206,51,206,53,206,88,206,89,206,92,206,95,206,96,206,97,206,104,206,105,206,107,206,109,206,116,206,117,206,120,206,124,206,132,206,133,206,135,206,137,206,144,206,145,206,148,206,152,206,160,206,161,206,163,206,164,206,165,206,172,206,173,206,193,206,228,206,229,206,232,206,235,206,236,206,244,206,245,206,247,206,248,206,249,206,0,207,1,207,4,207,8,207,16,207,17,207,19,207,21,207,28,207,32,207,36,207,44,207,45,207,47,207,48,207,49,207,56,207,84,207,85,207,88,207,92,207,100,207,101,207,103,207,105,207,112,207,113,207,116,207,120,207,128,207,133,207,140,207,161,207,168,207,176,207,196,207,224,207,225,207,228,207,232,207,240,207,241,207,243,207,245,207,252,207,0,208,4,208,17,208,24,208,45,208,52,208,53,208,56,208,60,208,68,208,69,208,71,208,73,208,80,208,84,208,88,208,96,208,108,208,109,208,112,208,116,208,124,208,125,208,129,208,164,208,165,208,168,208,172,208,180,208,181,208,183,208,185,208,192,208,193,208,196,208,200,208,201,208,208,208,209,208,211,208,212,208,213,208,220,208,221,208,224,208,228,208,236,208,237,208,239,208,240,208,241,208,248,208,13,209,48,209,49,209,52,209,56,209,58,209,64,209,65,209,67,209,68,209,69,209,76,209,77,209,80,209,84,209,92,209,93,209,95,209,97,209,104,209,108,209,124,209,132,209,136,209,160,209,161,209,164,209,168,209,176,209,177,209,179,209,181,209,186,209,188,209,192,209,216,209,244,209,248,209,7,210,9,210,16,210,44,210,45,210,48,210,52,210,60,210,61,210,63,210,65,210,72,210,92,210,100,210,128,210,129,210,132,210,136,210,144,210,145,210,149,210,156,210,160,210,164,210,172,210,177,210,184,210,185,210,188,210,191,210,192,210,194,210,200,210,201,210,203,210,212,210,216,210,220,210,228,210,229,210,240,210,241,210,244,210,248,210,0,211,1,211,3,211,5,211,12,211,13,211,14,211,16,211,20,211,22,211,28,211,29,211,31,211,32,211,33,211,37,211,40,211,41,211,44,211,48,211,56,211,57,211,59,211,60,211,61,211,68,211,69,211,124,211,125,211,128,211,132,211,140,211,141,211,143,211,144,211,145,211,152,211,153,211,156,211,160,211,168,211,169,211,171,211,173,211,180,211,184,211,188,211,196,211,197,211,200,211,201,211,208,211,216,211,225,211,227,211,236,211,237,211,240,211,244,211,252,211,253,211,255,211,1,212,8,212,29,212,64,212,68,212,92,212,96,212,100,212,109,212,111,212,120,212,121,212,124,212,127,212,128,212,130,212,136,212,137,212,139,212,141,212,148,212,169,212,204,212,208,212,212,212,220,212,223,212,232,212,236,212,240,212,248,212,251,212,253,212,4,213,8,213,12,213,20,213,21,213,23,213,60,213,61,213,64,213,68,213,76,213,77,213,79,213,81,213,88,213,89,213,92,213,96,213,101,213,104,213,105,213,107,213,109,213,116,213,117,213,120,213,124,213,132,213,133,213,135,213,136,213,137,213,144,213,165,213,200,213,201,213,204,213,208,213,210,213,216,213,217,213,219,213,221,213,228,213,229,213,232,213,236,213,244,213,245,213,247,213,249,213,0,214,1,214,4,214,8,214,16,214,17,214,19,214,20,214,21,214,28,214,32,214,36,214,45,214,56,214,57,214,60,214,64,214,69,214,72,214,73,214,75,214,77,214,81,214,84,214,85,214,88,214,92,214,103,214,105,214,112,214,113,214,116,214,131,214,133,214,140,214,141,214,144,214,148,214,157,214,159,214,161,214,168,214,172,214,176,214,185,214,187,214,196,214,197,214,200,214,204,214,209,214,212,214,215,214,217,214,224,214,228,214,232,214,240,214,245,214,252,214,253,214,0,215,4,215,17,215,24,215,25,215,28,215,32,215,40,215,41,215,43,215,45,215,52,215,53,215,56,215,60,215,68,215,71,215,73,215,80,215,81,215,84,215,86,215,87,215,88,215,89,215,96,215,97,215,99,215,101,215,105,215,108,215,112,215,116,215,124,215,125,215,129,215,136,215,137,215,140,215,144,215,152,215,153,215,155,215,157,215,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,79,115,79,71,80,249,80,160,82,239,83,117,84,229,84,9,86,193,90,182,91,135,102,182,103,183,103,239,103,76,107,194,115,194,117,60,122,219,130,4,131,87,136,136,136,54,138,200,140,207,141,251,142,230,143,213,153,59,82,116,83,4,84,106,96,100,97,188,107,207,115,26,129,186,137,210,137,163,149,131,79,10,82,190,88,120,89,230,89,114,94,121,94,199,97,192,99,70,103,236,103,127,104,151,111,78,118,11,119,245,120,8,122,255,122,33,124,157,128,110,130,113,130,235,138,147,149,107,78,157,85,247,102,52,110,163,120,237,122,91,132,16,137,78,135,168,151,216,82,78,87,42,88,76,93,31,97,190,97,33,98,98,101,209,103,68,106,27,110,24,117,179,117,227,118,176,119,58,125,175,144,81,148,82,148,149,159,35,83,172,92,50,117,219,128,64,146,152,149,91,82,8,88,220,89,161,92,23,93,183,94,58,95,74,95,119,97,95,108,122,117,134,117,224,124,115,125,177,125,140,127,84,129,33,130,145,133,65,137,27,139,252,146,77,150,71,156,203,78,247,78,11,80,241,81,79,88,55,97,62,97,104,97,57,101,234,105,17,111,165,117,134,118,214,118,135,123,165,130,203,132,0,249,167,147,139,149,128,85,162,91,81,87,1,249,179,124,185,127,181,145,40,80,187,83,69,92,232,93,210,98,110,99,218,100,231,100,32,110,172,112,91,121,221,141,30,142,2,249,125,144,69,146,248,146,126,78,246,78,101,80,254,93,250,94,6,97,87,105,113,129,84,134,71,142,117,147,43,154,94,78,145,80,112,103,64,104,9,81,141,82,146,82,162,106,188,119,16,146,212,158,171,82,47,96,242,143,72,80,169,97,237,99,202,100,60,104,132,106,192,111,136,129,161,137,148,150,5,88,125,114,172,114,4,117,121,125,109,126,169,128,139,137,116,139,99,144,81,157,137,98,122,108,84,111,80,125,58,127,35,138,124,81,74,97,157,123,25,139,87,146,140,147,172,78,211,79,30,80,190,80,6,81,193,82,205,82,127,83,112,87,131,88,154,94,145,95,118,97,172,97,206,100,108,101,111,102,187,102,244,102,151,104,135,109,133,112,241,112,159,116,165,116,202,116,217,117,108,120,236,120,223,122,246,122,69,125,147,125,21,128,63,128,27,129,150,131,102,139,21,143,21,144,225,147,3,152,56,152,90,154,232,155,194,79,83,85,58,88,81,89,99,91,70,92,184,96,18,98,66,104,176,104,232,104,170,110,76,117,120,118,206,120,61,122,251,124,107,126,124,126,8,138,161,138,63,140,142,150,196,157,228,83,233,83,74,84,113,84,250,86,209,89,100,91,59,92,171,94,247,98,55,101,69,101,114,101,160,102,175,103,193,105,189,108,252,117,144,118,126,119,63,122,148,127,3,128,161,128,143,129,230,130,253,130,240,131,193,133,49,136,180,136,165,138,3,249,156,143,46,147,199,150,103,152,216,154,19,159,237,84,155,101,242,102,143,104,64,122,55,140,96,157,240,86,100,87,17,93,6,102,177,104,205,104,254,110,40,116,158,136,228,155,104,108,4,249,168,154,155,79,108,81,113,81,159,82,84,91,229,93,80,96,109,96,241,98,167,99,59,101,217,115,122,122,163,134,162,140,143,151,50,78,225,91,8,98,156,103,220,116,209,121,211,131,135,138,178,138,232,141,78,144,75,147,70,152,211,94,232,105,255,133,237,144,5,249,160,81,152,91,236,91,99,97,250,104,62,107,76,112,47,116,216,116,161,123,80,127,197,131,192,137,171,140,220,149,40,153,46,82,93,96,236,98,2,144,138,79,73,81,33,83,217,88,227,94,224,102,56,109,154,112,194,114,214,115,80,123,241,128,91,148,102,83,155,99,107,127,86,78,128,80,74,88,222,88,42,96,39,97,208,98,208,105,65,155,143,91,24,125,177,128,95,143,164,78,209,80,172,84,172,85,12,91,160,93,231,93,42,101,78,101,33,104,75,106,225,114,142,118,239,119,94,125,249,127,160,129,78,133,223,134,3,143,78,143,202,144,3,153,85,154,171,155,24,78,69,78,93,78,199,78,241,79,119,81,254,82,64,83,227,83,229,83,142,84,20,86,117,87,162,87,199,91,135,93,208,94,252,97,216,98,81,101,184,103,233,103,203,105,80,107,198,107,236,107,66,108,157,110,120,112,215,114,150,115,3,116,191,119,233,119,118,122,127,125,9,128,252,129,5,130,10,130,223,130,98,136,51,139,252,140,192,142,17,144,177,144,100,146,182,146,210,153,69,154,233,156,215,157,156,159,11,87,64,92,202,131,160,151,171,151,180,158,27,84,152,122,164,127,217,136,205,142,225,144,0,88,72,92,152,99,159,122,174,91,19,95,121,122,174,122,142,130,172,142,38,80,56,82,248,82,119,83,8,87,243,98,114,99,10,107,195,109,55,119,165,83,87,115,104,133,118,142,213,149,58,103,195,106,112,111,109,138,204,142,75,153,6,249,119,102,120,107,180,140,60,155,7,249,235,83,45,87,78,89,198,99,251,105,234,115,69,120,186,122,197,122,254,124,117,132,143,137,115,141,53,144,168,149,251,82,71,87,71,117,96,123,204,131,30,146,8,249,88,106,75,81,75,82,135,82,31,98,216,104,117,105,153,150,197,80,164,82,228,82,195,97,164,101,57,104,255,105,126,116,75,123,185,130,235,131,178,137,57,139,209,143,73,153,9,249,202,78,151,89,210,100,17,102,142,106,52,116,129,121,189,121,169,130,126,136,127,136,95,137,10,249,38,147,11,79,202,83,37,96,113,98,114,108,26,125,102,125,152,78,98,81,220,119,175,128,1,79,14,79,118,81,128,81,220,85,104,86,59,87,250,87,252,87,20,89,71,89,147,89,196,91,144,92,14,93,241,93,126,94,204,95,128,98,215,101,227,101,30,103,31,103,94,103,203,104,196,104,95,106,58,107,35,108,125,108,130,108,199,109,152,115,38,116,42,116,130,116,163,116,120,117,127,117,129,120,239,120,65,121,71,121,72,121,122,121,149,123,0,125,186,125,136,127,6,128,45,128,140,128,24,138,79,139,72,140,119,141,33,147,36,147,226,152,81,153,14,154,15,154,101,154,146,158,202,125,118,79,9,84,238,98,84,104,209,145,171,85,58,81,11,249,12,249,28,90,230,97,13,249,207,98,255,98,14,249,15,249,16,249,17,249,18,249,19,249,163,144,20,249,21,249,22,249,23,249,24,249,254,138,25,249,26,249,27,249,28,249,150,102,29,249,86,113,30,249,31,249,227,150,32,249,79,99,122,99,87,83,33,249,143,103,96,105,115,110,34,249,55,117,35,249,36,249,37,249,13,125,38,249,39,249,114,136,202,86,24,90,40,249,41,249,42,249,43,249,44,249,67,78,45,249,103,81,72,89,240,103,16,128,46,249,115,89,116,94,154,100,202,121,245,95,108,96,200,98,123,99,231,91,215,91,170,82,47,249,116,89,41,95,18,96,48,249,49,249,50,249,89,116,51,249,52,249,53,249,54,249,55,249,56,249,209,153,57,249,58,249,59,249,60,249,61,249,62,249,63,249,64,249,65,249,66,249,67,249,195,111,68,249,69,249,191,129,178,143,241,96,70,249,71,249,102,129,72,249,73,249,63,92,74,249,75,249,76,249,77,249,78,249,79,249,80,249,81,249,233,90,37,138,123,103,16,125,82,249,83,249,84,249,85,249,86,249,87,249,253,128,88,249,89,249,60,92,229,108,63,83,186,110,26,89,54,131,57,78,182,78,70,79,174,85,24,87,199,88,86,95,183,101,230,101,128,106,181,107,77,110,237,119,239,122,30,124,222,125,203,134,146,136,50,145,91,147,187,100,190,111,122,115,184,117,84,144,86,85,77,87,186,97,212,100,199,102,225,109,91,110,109,111,185,111,240,117,67,128,189,129,65,133,131,137,199,138,90,139,31,147,147,108,83,117,84,123,15,142,93,144,16,85,2,88,88,88,98,94,7,98,158,100,224,104,118,117,214,124,179,135,232,158,227,78,136,87,110,87,39,89,13,92,177,92,54,94,133,95,52,98,225,100,179,115,250,129,139,136,184,140,138,150,219,158,133,91,183,95,179,96,18,80,0,82,48,82,22,87,53,88,87,88,14,92,96,92,246,92,139,93,166,94,146,95,188,96,17,99,137,99,23,100,67,104,249,104,194,106,216,109,33,110,212,110,228,111,254,113,220,118,121,119,177,121,59,122,4,132,169,137,237,140,243,141,72,142,3,144,20,144,83,144,253,144,77,147,118,150,220,151,210,107,6,112,88,114,162,114,104,115,99,119,191,121,228,123,155,126,128,139,169,88,199,96,102,101,253,101,190,102,140,108,30,113,201,113,90,140,19,152,109,78,129,122,221,78,172,81,205,81,213,82,12,84,167,97,113,103,80,104,223,104,30,109,124,111,188,117,179,119,229,122,244,128,99,132,133,146,92,81,151,101,92,103,147,103,216,117,199,122,115,131,90,249,70,140,23,144,45,152,111,92,192,129,154,130,65,144,111,144,13,146,151,95,157,93,89,106,200,113,123,118,73,123,228,133,4,139,39,145,48,154,135,85,246,97,91,249,105,118,133,127,63,134,186,135,248,136,143,144,92,249,27,109,217,112,222,115,97,125,61,132,93,249,106,145,241,153,94,249,130,78,117,83,4,107,18,107,62,112,27,114,45,134,30,158,76,82,163,143,80,93,229,100,44,101,22,107,235,111,67,124,156,126,205,133,100,137,189,137,201,98,216,129,31,136,202,94,23,103,106,109,252,114,5,116,111,116,130,135,222,144,134,79,13,93,160,95,10,132,183,81,160,99,101,117,174,78,6,80,105,81,201,81,129,104,17,106,174,124,177,124,231,124,111,130,210,138,27,143,207,145,182,79,55,81,245,82,66,84,236,94,110,97,62,98,197,101,218,106,254,111,42,121,220,133,35,136,173,149,98,154,106,154,151,158,206,158,155,82,198,102,119,107,29,112,43,121,98,143,66,151,144,97,0,98,35,101,35,111,73,113,137,116,244,125,111,128,238,132,38,143,35,144,74,147,189,81,23,82,163,82,12,109,200,112,194,136,201,94,130,101,174,107,194,111,62,124,117,115,228,78,54,79,249,86,95,249,186,92,186,93,28,96,178,115,45,123,154,127,206,127,70,128,30,144,52,146,246,150,72,151,24,152,97,159,139,79,167,111,174,121,180,145,183,150,222,82,96,249,136,100,196,100,211,106,94,111,24,112,16,114,231,118,1,128,6,134,92,134,239,141,5,143,50,151,111,155,250,157,117,158,140,120,127,121,160,125,201,131,4,147,127,158,147,158,214,138,223,88,4,95,39,103,39,112,207,116,96,124,126,128,33,81,40,112,98,114,202,120,194,140,218,140,244,140,247,150,134,78,218,80,238,91,214,94,153,101,206,113,66,118,173,119,74,128,252,132,124,144,39,155,141,159,216,88,65,90,98,92,19,106,218,109,15,111,59,118,47,125,55,126,30,133,56,137,228,147,75,150,137,82,210,101,243,103,180,105,65,109,156,110,15,112,9,116,96,116,89,117,36,118,107,120,44,139,94,152,109,81,46,98,120,150,150,79,43,80,25,93,234,109,184,125,42,143,139,95,68,97,23,104,97,249,134,150,210,82,139,128,220,81,204,81,94,105,28,122,190,125,241,131,117,150,218,79,41,82,152,83,15,84,14,85,101,92,167,96,78,103,168,104,108,109,129,114,248,114,6,116,131,116,98,249,226,117,108,124,121,127,184,127,137,131,207,136,225,136,204,145,208,145,226,150,201,155,29,84,126,111,208,113,152,116,250,133,170,142,163,150,87,156,159,158,151,103,203,109,51,116,232,129,22,151,44,120,203,122,32,123,146,124,105,100,106,116,242,117,188,120,232,120,172,153,84,155,187,158,222,91,85,94,32,111,156,129,171,131,136,144,7,78,77,83,41,90,210,93,78,95,98,97,61,99,105,102,252,102,255,110,43,111,99,112,158,119,44,132,19,133,59,136,19,143,69,153,59,156,28,85,185,98,43,103,171,108,9,131,106,137,122,151,161,78,132,89,216,95,217,95,27,103,178,125,84,127,146,130,43,131,189,131,30,143,153,144,203,87,185,89,146,90,208,91,39,102,154,103,133,104,207,107,100,113,117,127,183,140,227,140,129,144,69,155,8,129,138,140,76,150,64,154,165,158,95,91,19,108,27,115,242,118,223,118,12,132,170,81,147,137,77,81,149,81,201,82,201,104,148,108,4,119,32,119,191,125,236,125,98,151,181,158,197,110,17,133,165,81,13,84,125,84,14,102,157,102,39,105,159,110,191,118,145,119,23,131,194,132,159,135,105,145,152,146,244,156,130,136,174,79,146,81,223,82,198,89,61,94,85,97,120,100,121,100,174,102,208,103,33,106,205,107,219,107,95,114,97,114,65,116,56,119,219,119,23,128,188,130,5,131,0,139,40,139,140,140,40,103,144,108,103,114,238,118,102,119,70,122,169,157,127,107,146,108,34,89,38,103,153,132,111,83,147,88,153,89,223,94,207,99,52,102,115,103,58,110,43,115,215,122,215,130,40,147,217,82,235,93,174,97,203,97,10,98,199,98,171,100,224,101,89,105,102,107,203,107,33,113,247,115,93,117,70,126,30,130,2,131,106,133,163,138,191,140,39,151,97,157,168,88,216,158,17,80,14,82,59,84,79,85,135,101,118,108,10,125,11,125,94,128,138,134,128,149,239,150,255,82,149,108,105,114,115,84,154,90,62,92,75,93,76,95,174,95,42,103,182,104,99,105,60,110,68,110,9,119,115,124,142,127,135,133,14,139,247,143,97,151,244,158,183,92,182,96,13,97,171,97,79,101,251,101,252,101,17,108,239,108,159,115,201,115,225,125,148,149,198,91,28,135,16,139,93,82,90,83,205,98,15,100,178,100,52,103,56,106,202,108,192,115,158,116,148,123,149,124,27,126,138,129,54,130,132,133,235,143,249,150,193,153,52,79,74,83,205,83,219,83,204,98,44,100,0,101,145,101,195,105,238,108,88,111,237,115,84,117,34,118,228,118,252,118,208,120,251,120,44,121,70,125,44,130,224,135,212,143,18,152,239,152,195,82,212,98,165,100,36,110,81,111,124,118,203,141,177,145,98,146,238,154,67,155,35,80,141,80,74,87,168,89,40,92,71,94,119,95,63,98,62,101,185,101,193,101,9,102,139,103,156,105,194,110,197,120,33,125,170,128,128,129,43,130,179,130,161,132,140,134,42,138,23,139,166,144,50,150,144,159,13,80,243,79,99,249,249,87,152,95,220,98,146,99,111,103,67,110,25,113,195,118,204,128,218,128,244,136,245,136,25,137,224,140,41,143,77,145,106,150,47,79,112,79,27,94,207,103,34,104,125,118,126,118,68,155,97,94,10,106,105,113,212,113,106,117,100,249,65,126,67,133,233,133,220,152,16,79,79,123,112,127,165,149,225,81,6,94,181,104,62,108,78,108,219,108,175,114,196,123,3,131,213,108,58,116,251,80,136,82,193,88,216,100,151,106,167,116,86,118,167,120,23,134,226,149,57,151,101,249,94,83,1,95,138,139,168,143,175,143,138,144,37,82,165,119,73,156,8,159,25,78,2,80,117,81,91,92,119,94,30,102,58,102,196,103,197,104,179,112,1,117,197,117,201,121,221,122,39,143,32,153,8,154,221,79,33,88,49,88,246,91,110,102,101,107,17,109,122,110,125,111,228,115,43,117,233,131,220,136,19,137,92,139,20,143,15,79,213,80,16,83,92,83,147,91,169,95,13,103,143,121,121,129,47,131,20,133,7,137,134,137,57,143,59,143,165,153,18,156,44,103,118,78,248,79,73,89,1,92,239,92,240,92,103,99,210,104,253,112,162,113,43,116,43,126,236,132,2,135,34,144,210,146,243,156,13,78,216,78,239,79,133,80,86,82,111,82,38,84,144,84,224,87,43,89,102,90,90,91,117,91,204,91,156,94,102,249,118,98,119,101,167,101,110,109,165,110,54,114,38,123,63,124,54,127,80,129,81,129,154,129,64,130,153,130,169,131,3,138,160,140,230,140,251,140,116,141,186,141,232,144,220,145,28,150,68,150,217,153,231,156,23,83,6,82,41,84,116,86,179,88,84,89,110,89,255,95,164,97,110,98,16,102,126,108,26,113,198,118,137,124,222,124,27,125,172,130,193,140,240,150,103,249,91,79,23,95,127,95,194,98,41,93,11,103,218,104,124,120,67,126,108,157,21,78,153,80,21,83,42,83,81,83,131,89,98,90,135,94,178,96,138,97,73,98,121,98,144,101,135,103,167,105,212,107,214,107,215,107,216,107,184,108,104,249,53,116,250,117,18,120,145,120,213,121,216,121,131,124,203,125,225,127,165,128,62,129,194,129,242,131,26,135,232,136,185,138,108,139,187,140,25,145,94,151,219,152,59,159,172,86,42,91,108,95,140,101,179,106,175,107,92,109,241,111,21,112,93,114,173,115,167,140,211,140,59,152,145,97,55,108,88,128,1,154,77,78,139,78,155,78,213,78,58,79,60,79,127,79,223,79,255,80,242,83,248,83,6,85,227,85,219,86,235,88,98,89,17,90,235,91,250,91,4,92,243,93,43,94,153,95,29,96,104,99,156,101,175,101,246,103,251,103,173,104,123,107,153,108,215,108,35,110,9,112,69,115,2,120,62,121,64,121,96,121,193,121,233,123,23,125,114,125,134,128,13,130,142,131,209,132,199,134,223,136,80,138,94,138,29,139,220,140,102,141,173,143,170,144,252,152,223,153,157,158,74,82,105,249,20,103,106,249,152,80,42,82,113,92,99,101,85,108,202,115,35,117,157,117,151,123,156,132,120,145,48,151,119,78,146,100,186,107,94,113,169,133,9,78,107,249,73,103,238,104,23,110,159,130,24,133,107,136,247,99,129,111,18,146,175,152,10,78,183,80,207,80,31,81,70,85,170,85,23,86,64,91,25,92,224,92,56,94,138,94,160,94,194,94,243,96,81,104,97,106,88,110,61,114,64,114,192,114,248,118,101,121,177,123,212,127,243,136,244,137,115,138,97,140,222,140,28,151,94,88,189,116,253,140,199,85,108,249,97,122,34,125,114,130,114,114,31,117,37,117,109,249,25,123,133,88,251,88,188,93,143,94,182,94,144,95,85,96,146,98,127,99,77,101,145,102,217,102,248,102,22,104,242,104,128,114,94,116,110,123,110,125,214,125,114,127,229,128,18,130,175,133,127,137,147,138,29,144,228,146,205,158,32,159,21,89,109,89,45,94,220,96,20,102,115,102,144,103,80,108,197,109,95,111,243,119,169,120,198,132,203,145,43,147,217,78,202,80,72,81,132,85,11,91,163,91,71,98,126,101,203,101,50,110,125,113,1,116,68,116,135,116,191,116,108,118,170,121,218,125,85,126,168,127,122,129,179,129,57,130,26,134,236,135,117,138,227,141,120,144,145,146,37,148,77,153,174,155,104,83,81,92,84,105,196,108,41,109,43,110,12,130,155,133,59,137,45,138,170,138,234,150,103,159,97,82,185,102,178,107,150,126,254,135,13,141,131,149,93,150,29,101,137,109,238,113,110,249,206,87,211,89,172,91,39,96,250,96,16,98,31,102,95,102,41,115,249,115,219,118,1,119,108,123,86,128,114,128,101,129,160,138,146,145,22,78,226,82,114,107,23,109,5,122,57,123,48,125,111,249,176,140,236,83,47,86,81,88,181,91,15,92,17,92,226,93,64,98,131,99,20,100,45,102,179,104,188,108,136,109,175,110,31,112,164,112,210,113,38,117,143,117,142,117,25,118,17,123,224,123,43,124,32,125,57,125,44,133,109,133,7,134,52,138,13,144,97,144,181,144,183,146,246,151,55,154,215,79,108,92,95,103,145,109,159,124,140,126,22,139,22,141,31,144,107,91,253,93,13,100,192,132,92,144,225,152,135,115,139,91,154,96,126,103,222,109,31,138,166,138,1,144,12,152,55,82,112,249,81,112,142,120,150,147,112,136,215,145,238,79,215,83,253,85,218,86,130,87,253,88,194,90,136,91,171,92,192,92,37,94,1,97,13,98,75,98,136,99,28,100,54,101,120,101,57,106,138,107,52,108,25,109,49,111,231,113,233,114,120,115,7,116,178,116,38,118,97,119,192,121,87,122,234,122,185,124,143,125,172,125,97,126,158,127,41,129,49,131,144,132,218,132,234,133,150,136,176,138,144,139,56,143,66,144,131,144,108,145,150,146,185,146,139,150,167,150,168,150,214,150,0,151,8,152,150,153,211,154,26,155,212,83,126,88,25,89,112,91,191,91,209,109,90,111,159,113,33,116,185,116,133,128,253,131,225,93,135,95,170,95,66,96,236,101,18,104,111,105,83,106,137,107,53,109,243,109,227,115,254,118,172,119,77,123,20,125,35,129,28,130,64,131,244,132,99,133,98,138,196,138,135,145,30,147,6,152,180,153,12,98,83,136,240,143,101,146,7,93,39,93,105,93,95,116,157,129,104,135,213,111,254,98,210,127,54,137,114,137,30,78,88,78,231,80,221,82,71,83,127,98,7,102,105,126,5,136,94,150,141,79,25,83,54,86,203,89,164,90,56,92,78,92,77,92,2,94,17,95,67,96,189,101,47,102,66,102,190,103,244,103,28,115,226,119,58,121,197,127,148,132,205,132,150,137,102,138,105,138,225,138,85,140,122,140,244,87,212,91,15,95,111,96,237,98,13,105,150,107,92,110,132,113,210,123,85,135,88,139,254,142,223,152,254,152,56,79,129,79,225,79,123,84,32,90,184,91,60,97,176,101,104,102,252,113,51,117,94,121,51,125,78,129,227,129,152,131,170,133,206,133,3,135,10,138,171,142,155,143,113,249,197,143,49,89,164,91,230,91,137,96,233,91,11,92,195,95,129,108,114,249,241,109,11,112,26,117,175,130,246,138,192,78,65,83,115,249,217,150,15,108,158,78,196,79,82,81,94,85,37,90,232,92,17,98,89,114,189,130,170,131,254,134,89,136,29,138,63,150,197,150,19,153,9,157,93,157,10,88,179,92,189,93,68,94,225,96,21,97,225,99,2,106,37,110,2,145,84,147,78,152,16,156,119,159,137,91,184,92,9,99,79,102,72,104,60,119,193,150,141,151,84,152,159,155,161,101,1,139,203,142,188,149,53,85,169,92,214,93,181,94,151,102,76,118,244,131,199,149,211,88,188,98,206,114,40,157,240,78,46,89,15,96,59,102,131,107,231,121,38,157,147,83,192,84,195,87,22,93,27,97,214,102,175,109,141,120,126,130,152,150,68,151,132,83,124,98,150,99,178,109,10,126,75,129,77,152,251,106,76,127,175,157,26,158,95,78,59,80,182,81,28,89,249,96,246,99,48,105,58,114,54,128,116,249,206,145,49,95,117,249,118,249,4,125,229,130,111,132,187,132,229,133,141,142,119,249,111,79,120,249,121,249,228,88,67,91,89,96,218,99,24,101,109,101,152,102,122,249,74,105,35,106,11,109,1,112,108,113,210,117,13,118,179,121,112,122,123,249,138,127,124,249,68,137,125,249,147,139,192,145,125,150,126,249,10,153,4,87,161,95,188,101,1,111,0,118,166,121,158,138,173,153,90,155,108,159,4,81,182,97,145,98,141,106,198,129,67,80,48,88,102,95,9,113,0,138,250,138,124,91,22,134,250,79,60,81,180,86,68,89,169,99,249,109,170,93,109,105,134,81,136,78,89,79,127,249,128,249,129,249,130,89,130,249,131,249,95,107,93,108,132,249,181,116,22,121,133,249,7,130,69,130,57,131,63,143,93,143,134,249,24,153,135,249,136,249,137,249,166,78,138,249,223,87,121,95,19,102,139,249,140,249,171,117,121,126,111,139,141,249,6,144,91,154,165,86,39,88,248,89,31,90,180,91,142,249,246,94,143,249,144,249,80,99,59,99,145,249,61,105,135,108,191,108,142,109,147,109,245,109,20,111,146,249,223,112,54,113,89,113,147,249,195,113,213,113,148,249,79,120,111,120,149,249,117,123,227,125,150,249,47,126,151,249,77,136,223,142,152,249,153,249,154,249,91,146,155,249,246,156,156,249,157,249,158,249,133,96,133,109,159,249,177,113,160,249,161,249,177,149,173,83,162,249,163,249,164,249,211,103,165,249,142,112,48,113,48,116,118,130,210,130,166,249,187,149,229,154,125,158,196,102,167,249,193,113,73,132,168,249,169,249,75,88,170,249,171,249,184,93,113,95,172,249,32,102,142,102,121,105,174,105,56,108,243,108,54,110,65,111,218,111,27,112,47,112,80,113,223,113,112,115,173,249,91,116,174,249,212,116,200,118,78,122,147,126,175,249,176,249,241,130,96,138,206,143,177,249,72,147,178,249,25,151,179,249,180,249,66,78,42,80,181,249,8,82,225,83,243,102,109,108,202,111,10,115,127,119,98,122,174,130,221,133,2,134,182,249,212,136,99,138,125,139,107,140,183,249,179,146,184,249,19,151,16,152,148,78,13,79,201,79,178,80,72,83,62,84,51,84,218,85,98,88,186,88,103,89,27,90,228,91,159,96,185,249,202,97,86,101,255,101,100,102,167,104,90,108,179,111,207,112,172,113,82,115,125,123,8,135,164,138,50,156,7,159,75,92,131,108,68,115,137,115,58,146,171,110,101,116,31,118,105,122,21,126,10,134,64,81,197,88,193,100,238,116,21,117,112,118,193,127,149,144,205,150,84,153,38,110,230,116,169,122,170,122,229,129,217,134,120,135,27,138,73,90,140,91,155,91,161,104,0,105,99,109,169,115,19,116,44,116,151,120,233,125,235,127,24,129,85,129,158,131,76,140,46,150,17,152,240,102,128,95,250,101,137,103,106,108,139,115,45,80,3,90,106,107,238,119,22,89,108,93,205,93,37,115,79,117,186,249,187,249], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+265316);
/* memory initializer */ allocate([229,80,249,81,47,88,45,89,150,89,218,89,229,91,188,249,189,249,162,93,215,98,22,100,147,100,254,100,190,249,220,102,191,249,72,106,192,249,255,113,100,116,193,249,136,122,175,122,71,126,94,126,0,128,112,129,194,249,239,135,129,137,32,139,89,144,195,249,128,144,82,153,126,97,50,107,116,109,31,126,37,137,177,143,209,79,173,80,151,81,199,82,199,87,137,88,185,91,184,94,66,97,149,105,140,109,103,110,182,110,148,113,98,116,40,117,44,117,115,128,56,131,201,132,10,142,148,147,222,147,196,249,142,78,81,79,118,80,42,81,200,83,203,83,243,83,135,91,211,91,36,92,26,97,130,97,244,101,91,114,151,115,64,116,194,118,80,121,145,121,185,121,6,125,189,127,139,130,213,133,94,134,194,143,71,144,245,144,234,145,133,150,232,150,233,150,214,82,103,95,237,101,49,102,47,104,92,113,54,122,193,144,10,152,145,78,197,249,82,106,158,107,144,111,137,113,24,128,184,130,83,133,75,144,149,150,242,150,251,151,26,133,49,155,144,78,138,113,196,150,67,81,159,83,225,84,19,87,18,87,163,87,155,90,196,90,195,91,40,96,63,97,244,99,133,108,57,109,114,110,144,110,48,114,63,115,87,116,209,130,129,136,69,143,96,144,198,249,98,150,88,152,27,157,8,103,138,141,94,146,77,79,73,80,222,80,113,83,13,87,212,89,1,90,9,92,112,97,144,102,45,110,50,114,75,116,239,125,195,128,14,132,102,132,63,133,95,135,91,136,24,137,2,139,85,144,203,151,79,155,115,78,145,79,18,81,106,81,199,249,47,85,169,85,122,91,165,91,124,94,125,94,190,94,160,96,223,96,8,97,9,97,196,99,56,101,9,103,200,249,212,103,218,103,201,249,97,105,98,105,185,108,39,109,202,249,56,110,203,249,225,111,54,115,55,115,204,249,92,116,49,117,205,249,82,118,206,249,207,249,173,125,254,129,56,132,213,136,152,138,219,138,237,138,48,142,66,142,74,144,62,144,122,144,73,145,201,145,110,147,208,249,209,249,9,88,210,249,211,107,137,128,178,128,211,249,212,249,65,81,107,89,57,92,213,249,214,249,100,111,167,115,228,128,7,141,215,249,23,146,143,149,216,249,217,249,218,249,219,249,127,128,14,98,28,112,104,125,141,135,220,249,160,87,105,96,71,97,183,107,190,138,128,146,177,150,89,78,31,84,235,109,45,133,112,150,243,151,238,152,214,99,227,108,145,144,221,81,201,97,186,129,249,157,157,79,26,80,0,81,156,91,15,97,255,97,236,100,5,105,197,107,145,117,227,119,169,127,100,130,143,133,251,135,99,136,188,138,112,139,171,145,140,78,229,78,10,79,221,249,222,249,55,89,232,89,223,249,242,93,27,95,91,95,33,96,224,249,225,249,226,249,227,249,62,114,229,115,228,249,112,117,205,117,229,249,251,121,230,249,12,128,51,128,132,128,225,130,81,131,231,249,232,249,189,140,179,140,135,144,233,249,234,249,244,152,12,153,235,249,236,249,55,112,202,118,202,127,204,127,252,127,26,139,186,78,193,78,3,82,112,83,237,249,189,84,224,86,251,89,197,91,21,95,205,95,110,110,238,249,239,249,106,125,53,131,240,249,147,134,141,138,241,249,109,151,119,151,242,249,243,249,0,78,90,79,126,79,249,88,229,101,162,110,56,144,176,147,185,153,251,78,236,88,138,89,217,89,65,96,244,249,245,249,20,122,246,249,79,131,195,140,101,81,68,83,247,249,248,249,249,249,205,78,105,82,85,91,191,130,212,78,58,82,168,84,201,89,255,89,80,91,87,91,92,91,99,96,72,97,203,110,153,112,110,113,134,115,247,116,181,117,193,120,43,125,5,128,234,129,40,131,23,133,201,133,238,138,199,140,204,150,92,79,250,82,188,86,171,101,40,102,124,112,184,112,53,114,189,125,141,130,76,145,192,150,114,157,113,91,231,104,152,107,122,111,222,118,145,92,171,102,91,111,180,123,42,124,54,136,220,150,8,78,215,78,32,83,52,88,187,88,239,88,108,89,7,92,51,94,132,94,53,95,140,99,178,102,86,103,31,106,163,106,12,107,63,111,70,114,250,249,80,115,139,116,224,122,167,124,120,129,223,129,231,129,138,131,108,132,35,133,148,133,207,133,221,136,19,141,172,145,119,149,156,150,141,81,201,84,40,87,176,91,77,98,80,103,61,104,147,104,61,110,211,110,125,112,33,126,193,136,161,140,9,143,75,159,78,159,45,114,143,123,205,138,26,147,71,79,78,79,50,81,128,84,208,89,149,94,181,98,117,103,110,105,23,106,174,108,26,110,217,114,42,115,189,117,184,123,53,125,231,130,249,131,87,132,247,133,91,138,175,140,135,142,25,144,184,144,206,150,95,159,227,82,10,84,225,90,194,91,88,100,117,101,244,110,196,114,251,249,132,118,77,122,27,123,77,124,62,126,223,127,123,131,43,139,202,140,100,141,225,141,95,142,234,143,249,143,105,144,209,147,67,79,122,79,179,80,104,81,120,81,77,82,106,82,97,88,124,88,96,89,8,92,85,92,219,94,155,96,48,98,19,104,191,107,8,108,177,111,78,113,32,116,48,117,56,117,81,117,114,118,76,123,139,123,173,123,198,123,143,126,110,138,62,143,73,143,63,146,147,146,34,147,43,148,251,150,90,152,107,152,30,153,7,82,42,98,152,98,89,109,100,118,202,122,192,123,118,125,96,83,190,92,151,94,56,111,185,112,152,124,17,151,142,155,222,158,165,99,122,100,118,135,1,78,149,78,173,78,92,80,117,80,72,84,195,89,154,91,64,94,173,94,247,94,129,95,197,96,58,99,63,101,116,101,204,101,118,102,120,102,254,103,104,105,137,106,99,107,64,108,192,109,232,109,31,110,94,110,30,112,161,112,142,115,253,115,58,117,91,119,135,120,142,121,11,122,125,122,190,124,142,125,71,130,2,138,234,138,158,140,45,145,74,145,216,145,102,146,204,146,32,147,6,151,86,151,92,151,2,152,14,159,54,82,145,82,124,85,36,88,29,94,31,95,140,96,208,99,175,104,223,111,109,121,44,123,205,129,186,133,253,136,248,138,68,142,141,145,100,150,155,150,61,151,76,152,74,159,206,79,70,81,203,81,169,82,50,86,20,95,107,95,170,99,205,100,233,101,65,102,250,102,249,102,29,103,157,104,215,104,253,105,21,111,110,111,103,113,229,113,42,114,170,116,58,119,86,121,90,121,223,121,32,122,149,122,151,124,223,124,68,125,112,126,135,128,251,133,164,134,84,138,191,138,153,141,129,142,32,144,109,144,227,145,59,150,213,150,229,156,207,101,7,124,179,141,195,147,88,91,10,92,82,83,217,98,29,115,39,80,151,91,158,95,176,96,107,97,213,104,217,109,46,116,46,122,66,125,156,125,49,126,107,129,42,142,53,142,126,147,24,148,80,79,80,87,230,93,167,94,43,99,106,127,59,78,79,79,143,79,90,80,221,89,196,128,106,84,104,84,254,85,79,89,153,91,222,93,218,94,93,102,49,103,241,103,42,104,232,108,50,109,74,110,141,111,183,112,224,115,135,117,76,124,2,125,44,125,162,125,31,130,219,134,59,138,133,138,112,141,138,142,51,143,49,144,78,145,82,145,68,148,208,153,249,122,165,124,202,79,1,81,198,81,200,87,239,91,251,92,89,102,61,106,90,109,150,110,236,111,12,113,111,117,227,122,34,136,33,144,117,144,203,150,255,153,1,131,45,78,242,78,70,136,205,145,125,83,219,106,107,105,65,108,122,132,158,88,142,97,254,102,239,98,221,112,17,117,199,117,82,126,184,132,73,139,8,141,75,78,234,83,171,84,48,87,64,87,215,95,1,99,7,99,111,100,47,101,232,101,122,102,157,103,179,103,98,107,96,108,154,108,44,111,229,119,37,120,73,121,87,121,25,125,162,128,2,129,243,129,157,130,183,130,24,135,140,138,252,249,4,141,190,141,114,144,244,118,25,122,55,122,84,126,119,128,7,85,212,85,117,88,47,99,34,100,73,102,75,102,109,104,155,105,132,107,37,109,177,110,205,115,104,116,161,116,91,117,185,117,225,118,30,119,139,119,230,121,9,126,29,126,251,129,47,133,151,136,58,138,209,140,235,142,176,143,50,144,173,147,99,150,115,150,7,151,132,79,241,83,234,89,201,90,25,94,78,104,198,116,190,117,233,121,146,122,163,129,237,134,234,140,204,141,237,143,159,101,21,103,253,249,247,87,87,111,221,125,47,143,246,147,198,150,181,95,242,97,132,111,20,78,152,79,31,80,201,83,223,85,111,93,238,93,33,107,100,107,203,120,154,123,254,249,73,142,202,142,110,144,73,99,62,100,64,119,132,122,47,147,127,148,106,159,176,100,175,111,230,113,168,116,218,116,196,122,18,124,130,126,178,124,152,126,154,139,10,141,125,148,16,153,76,153,57,82,223,91,230,100,45,103,46,125,237,80,195,83,121,88,88,97,89,97,250,97,172,101,217,122,146,139,150,139,9,80,33,80,117,82,49,85,60,90,224,94,112,95,52,97,94,101,12,102,54,102,162,102,205,105,196,110,50,111,22,115,33,118,147,122,57,129,89,130,214,131,188,132,181,80,240,87,192,91,232,91,105,95,161,99,38,120,181,125,220,131,33,133,199,145,245,145,138,81,245,103,86,123,172,140,196,81,187,89,189,96,85,134,28,80,255,249,84,82,58,92,125,97,26,98,211,98,242,100,165,101,204,110,32,118,10,129,96,142,95,150,187,150,223,78,67,83,152,85,41,89,221,93,197,100,201,108,250,109,148,115,127,122,27,130,166,133,228,140,16,142,119,144,231,145,225,149,33,150,198,151,248,81,242,84,134,85,185,95,164,100,136,111,180,125,31,143,77,143,53,148,201,80,22,92,190,108,251,109,27,117,187,119,61,124,100,124,121,138,194,138,30,88,190,89,22,94,119,99,82,114,138,117,107,119,220,138,188,140,18,143,243,94,116,102,248,109,125,128,193,131,203,138,81,151,214,155,0,250,67,82,255,102,149,109,239,110,224,125,230,138,46,144,94,144,212,154,29,82,127,82,232,84,148,97,132,98,219,98,162,104,18,105,90,105,53,106,146,112,38,113,93,120,1,121,14,121,210,121,13,122,150,128,120,130,213,130,73,131,73,133,130,140,133,141,98,145,139,145,174,145,195,79,209,86,237,113,215,119,0,135,248,137,248,91,214,95,81,103,168,144,226,83,90,88,245,91,164,96,129,97,96,100,61,126,112,128,37,133,131,146,174,100,172,80,20,93,0,103,156,88,189,98,168,99,14,105,120,105,30,106,107,110,186,118,203,121,187,130,41,132,207,138,168,141,253,143,18,145,75,145,156,145,16,147,24,147,154,147,219,150,54,154,13,156,17,78,92,117,93,121,250,122,81,123,201,123,46,126,196,132,89,142,116,142,248,142,16,144,37,102,63,105,67,116,250,81,46,103,220,158,69,81,224,95,150,108,242,135,93,136,119,136,180,96,181,129,3,132,5,141,214,83,57,84,52,86,54,90,49,92,138,112,224,127,90,128,6,129,237,129,163,141,137,145,95,154,242,157,116,80,196,78,160,83,251,96,44,110,100,92,136,79,36,80,228,85,217,92,95,94,101,96,148,104,187,108,196,109,190,113,212,117,244,117,97,118,26,122,73,122,199,125,251,125,110,127,244,129,169,134,28,143,201,150,179,153,82,159,71,82,197,82,237,152,170,137,3,78,210,103,6,111,181,79,226,91,149,103,136,108,120,109,27,116,39,120,221,145,124,147,196,135,228,121,49,122,235,95,214,78,164,84,62,85,174,88,165,89,240,96,83,98,214,98,54,103,85,105,53,130,64,150,177,153,221,153,44,80,83,83,68,85,124,87,1,250,88,98,2,250,226,100,107,102,221,103,193,111,239,111,34,116,56,116,23,138,56,148,81,84,6,86,102,87,72,95,154,97,78,107,88,112,173,112,187,125,149,138,106,89,43,129,162,99,8,119,61,128,170,140,84,88,45,100,187,105,149,91,17,94,111,110,3,250,105,133,76,81,240,83,42,89,32,96,75,97,134,107,112,108,240,108,30,123,206,128,212,130,198,141,176,144,177,152,4,250,199,100,164,111,145,100,4,101,78,81,16,84,31,87,14,138,95,97,118,104,5,250,219,117,82,123,113,125,26,144,6,88,204,105,127,129,42,137,0,144,57,152,120,80,87,89,172,89,149,98,15,144,42,155,93,97,121,114,214,149,97,87,70,90,244,93,138,98,173,100,250,100,119,103,226,108,62,109,44,114,54,116,52,120,119,127,173,130,219,141,23,152,36,82,66,87,127,103,72,114,227,116,169,140,166,143,17,146,42,150,107,81,237,83,76,99,105,79,4,85,150,96,87,101,155,108,127,109,76,114,253,114,23,122,135,137,157,140,109,95,142,111,249,112,168,129,14,97,191,79,79,80,65,98,71,114,199,123,232,125,233,127,77,144,173,151,25,154,182,140,106,87,115,94,176,103,13,132,85,138,32,84,22,91,99,94,226,94,10,95,131,101,186,128,61,133,137,149,91,150,72,79,5,83,13,83,15,83,134,84,250,84,3,87,3,94,22,96,155,98,177,98,85,99,6,250,225,108,102,109,177,117,50,120,222,128,47,129,222,130,97,132,178,132,141,136,18,137,11,144,234,146,253,152,145,155,69,94,180,102,221,102,17,112,6,114,7,250,245,79,125,82,106,95,83,97,83,103,25,106,2,111,226,116,104,121,104,136,121,140,199,152,196,152,67,154,193,84,31,122,83,105,247,138,74,140,168,152,174,153,124,95,171,98,178,117,174,118,171,136,127,144,66,150,57,83,60,95,197,95,204,108,204,115,98,117,139,117,70,123,254,130,157,153,79,78,60,144,11,78,85,79,166,83,15,89,200,94,48,102,179,108,85,116,119,131,102,135,192,140,80,144,30,151,21,156,209,88,120,91,80,134,20,139,180,157,210,91,104,96,141,96,241,101,87,108,34,111,163,111,26,112,85,127,240,127,145,149,146,149,80,150,211,151,114,82,68,143,253,81,43,84,184,84,99,85,138,85,187,106,181,109,216,125,102,130,156,146,119,150,121,158,8,84,200,84,210,118,228,134,164,149,212,149,92,150,162,78,9,79,238,89,230,90,247,93,82,96,151,98,109,103,65,104,134,108,47,110,56,127,155,128,42,130,8,250,9,250,5,152,165,78,85,80,179,84,147,87,90,89,105,91,179,91,200,97,119,105,119,109,35,112,249,135,227,137,114,138,231,138,130,144,237,153,184,154,190,82,56,104,22,80,120,94,79,103,71,131,76,136,171,78,17,84,174,86,230,115,21,145,255,151,9,153,87,153,153,153,83,86,159,88,91,134,49,138,178,97,246,106,123,115,210,142,71,107,170,150,87,154,85,89,0,114,107,141,105,151,212,79,244,92,38,95,248,97,91,102,235,108,171,112,132,115,185,115,254,115,41,119,77,119,67,125,98,125,35,126,55,130,82,136,10,250,226,140,73,146,111,152,81,91,116,122,64,136,1,152,204,90,224,79,84,83,62,89,253,92,62,99,121,109,249,114,5,129,7,129,162,131,207,146,48,152,168,78,68,81,17,82,139,87,98,95,194,108,206,110,5,112,80,112,175,112,146,113,233,115,105,116,74,131,162,135,97,136,8,144,162,144,163,147,168,153,110,81,87,95,224,96,103,97,179,102,89,133,74,142,175,145,139,151,78,78,146,78,124,84,213,88,250,88,125,89,181,92,39,95,54,98,72,98,10,102,103,102,235,107,105,109,207,109,86,110,248,110,148,111,224,111,233,111,93,112,208,114,37,116,90,116,224,116,147,118,92,121,202,124,30,126,225,128,166,130,107,132,191,132,78,134,95,134,116,135,119,139,106,140,172,147,0,152,101,152,209,96,22,98,119,145,90,90,15,102,247,109,62,110,63,116,66,155,253,95,218,96,15,123,196,84,24,95,94,108,211,108,42,109,216,112,5,125,121,134,12,138,59,157,22,83,140,84,5,91,58,106,107,112,117,117,141,121,190,121,177,130,239,131,113,138,65,139,168,140,116,151,11,250,244,100,43,101,186,120,187,120,107,122,56,78,154,85,80,89,166,91,123,94,163,96,219,99,97,107,101,102,83,104,25,110,101,113,176,116,8,125,132,144,105,154,37,156,59,109,209,110,62,115,65,140,202,149,240,81,76,94,168,95,77,96,246,96,48,97,76,97,67,102,68,102,165,105,193,108,95,110,201,110,98,111,76,113,156,116,135,118,193,123,39,124,82,131,87,135,81,144,141,150,195,158,47,83,222,86,251,94,138,95,98,96,148,96,247,97,102,102,3,103,156,106,238,109,174,111,112,112,106,115,106,126,190,129,52,131,212,134,168,138,196,140,131,82,114,115,150,91,107,106,4,148,238,84,134,86,93,91,72,101,133,101,201,102,159,104,141,109,198,109,59,114,180,128,117,145,77,154,175,79,25,80,154,83,14,84,60,84,137,85,197,85,63,94,140,95,61,103,102,113,221,115,5,144,219,82,243,82,100,88,206,88,4,113,143,113,251,113,176,133,19,138,136,102,168,133,167,85,132,102,74,113,49,132,73,83,153,85,193,107,89,95,189,95,238,99,137,102,71,113,241,138,29,143,190,158,17,79,58,100,203,112,102,117,103,134,100,96,78,139,248,157,71,81,246,81,8,83,54,109,248,128,209,158,21,102,35,107,152,112,213,117,3,84,121,92,7,125,22,138,32,107,61,107,70,107,56,84,112,96,61,109,213,127,8,130,214,80,222,81,156,85,107,86,205,86,236,89,9,91,12,94,153,97,152,97,49,98,94,102,230,102,153,113,185,113,186,113,167,114,167,121,0,122,178,127,112,138,0,0,0,0,0,0,1,0,160,0,167,0,168,0,169,0,175,0,176,0,178,0,183,0,184,0,198,0,215,0,216,0,230,0,247,0,248,0,0,1,1,1,2,1,3,1,4,1,5,1,6,1,7,1,8,1,9,1,10,1,11,1,12,1,13,1,14,1,15,1,16,1,17,1,18,1,19,1,22,1,23,1,24,1,25,1,26,1,27,1,28,1,29,1,30,1,31,1,32,1,33,1,34,1,35,1,36,1,37,1,38,1,39,1,40,1,41,1,42,1,43,1,46,1,47,1,48,1,49,1,52,1,53,1,54,1,55,1,56,1,57,1,58,1,59,1,60,1,61,1,62,1,65,1,66,1,67,1,68,1,69,1,70,1,71,1,72,1,74,1,75,1,76,1,77,1,80,1,81,1,82,1,83,1,84,1,85,1,86,1,87,1,88,1,89,1,90,1,91,1,92,1,93,1,94,1,95,1,96,1,97,1,98,1,99,1,100,1,101,1,102,1,103,1,104,1,105,1,106,1,107,1,108,1,109,1,110,1,111,1,112,1,113,1,114,1,115,1,116,1,117,1,118,1,119,1,120,1,121,1,122,1,123,1,124,1,125,1,126,1,146,1,160,1,161,1,175,1,176,1,24,2,25,2,26,2,27,2,198,2,199,2,216,2,217,2,219,2,220,2,221,2,0,3,1,3,3,3,9,3,35,3,122,3,132,3,133,3,134,3,136,3,137,3,138,3,140,3,142,3,143,3,144,3,145,3,146,3,147,3,148,3,149,3,150,3,151,3,152,3,153,3,154,3,155,3,156,3,157,3,158,3,159,3,160,3,161,3,163,3,164,3,165,3,166,3,167,3,168,3,169,3,170,3,171,3,172,3,173,3,174,3,175,3,176,3,177,3,178,3,179,3,180,3,181,3,182,3,183,3,184,3,185,3,186,3,187,3,188,3,189,3,190,3,191,3,192,3,193,3,194,3,195,3,196,3,197,3,198,3,199,3,200,3,201,3,202,3,203,3,204,3,205,3,206,3,1,4,2,4,3,4,4,4,5,4,6,4,7,4,8,4,9,4,10,4,11,4,12,4,14,4,15,4,16,4,17,4,18,4,19,4,20,4,21,4,22,4,23,4,24,4,25,4,26,4,27,4,28,4,29,4,30,4,31,4,32,4,33,4,34,4,35,4,36,4,37,4,38,4,39,4,40,4,41,4,42,4,43,4,44,4,45,4,46,4,47,4,48,4,49,4,50,4,51,4,52,4,53,4,54,4,55,4,56,4,57,4,58,4,59,4,60,4,61,4,62,4,63,4,64,4,65,4,66,4,67,4,68,4,69,4,70,4,71,4,72,4,73,4,74,4,75,4,76,4,77,4,78,4,79,4,81,4,82,4,83,4,84,4,85,4,86,4,87,4,88,4,89,4,90,4,91,4,92,4,94,4,95,4,144,4,145,4,176,5,177,5,178,5,179,5,180,5,181,5,182,5,183,5,184,5,185,5,187,5,188,5,189,5,190,5,191,5,192,5,193,5,194,5,195,5,208,5,209,5,210,5,211,5,212,5,213,5,214,5,215,5,216,5,217,5,218,5,219,5,220,5,221,5,222,5,223,5,224,5,225,5,226,5,227,5,228,5,229,5,230,5,231,5,232,5,233,5,234,5,240,5,241,5,242,5,243,5,244,5,12,6,27,6,31,6,33,6,34,6,35,6,36,6,37,6,38,6,39,6,40,6,41,6,42,6,43,6,44,6,45,6,46,6,47,6,48,6,49,6,50,6,51,6,52,6,53,6,54,6,55,6,56,6,57,6,58,6,64,6,65,6,66,6,67,6,68,6,69,6,70,6,71,6,72,6,73,6,74,6,75,6,76,6,77,6,78,6,79,6,80,6,81,6,82,6,121,6,126,6,134,6,136,6,145,6,152,6,169,6,175,6,186,6,190,6,193,6,210,6,1,14,2,14,3,14,4,14,5,14,6,14,7,14,8,14,9,14,10,14,11,14,12,14,13,14,14,14,15,14,16,14,17,14,18,14,19,14,20,14,21,14,22,14,23,14,24,14,25,14,26,14,27,14,28,14,29,14,30,14,31,14,32,14,33,14,34,14,35,14,36,14,37,14,38,14,39,14,40,14,41,14,42,14,43,14,44,14,45,14,46,14,47,14,48,14,49,14,50,14,51,14,52,14,53,14,54,14,55,14,56,14,57,14,58,14,63,14,64,14,65,14,66,14,67,14,68,14,69,14,70,14,71,14,72,14,73,14,74,14,75,14,76,14,77,14,78,14,79,14,80,14,81,14,82,14,83,14,84,14,85,14,86,14,87,14,88,14,89,14,90,14,91,14,2,30,3,30,10,30,11,30,30,30,31,30,64,30,65,30,86,30,87,30,96,30,97,30,106,30,107,30,128,30,129,30,130,30,131,30,132,30,133,30,242,30,243,30,12,32,13,32,14,32,15,32,19,32,20,32,21,32,23,32,24,32,25,32,26,32,28,32,29,32,30,32,32,32,33,32,34,32,38,32,48,32,57,32,58,32,170,32,171,32,172,32,175,32,22,33,34,33,25,34,26,34,72,34,100,34,101,34,32,35,33,35,0,37,2,37,12,37,16,37,20,37,24,37,28,37,36,37,44,37,52,37,60,37,80,37,81,37,82,37,83,37,84,37,85,37,86,37,87,37,88,37,89,37,90,37,91,37,92,37,93,37,94,37,95,37,96,37,97,37,98,37,99,37,100,37,101,37,102,37,103,37,104,37,105,37,106,37,107,37,108,37,128,37,132,37,136,37,140,37,144,37,145,37,146,37,147,37,160,37,0,0,37,42,46,42,102,0,0,0,0,0,0,0,0,0,0,0,44,254,255,255,255,191,178,63,214,52,179,91,82,137,39,64,37,24,48,21,99,109,129,64,109,244,24,62,153,77,193,64,102,21,144,14,212,18,226,64,188,57,91,54,213,120,100,64,99,5,107,78,88,162,191,64,63,140,211,84,82,102,1,65,67,43,165,131,218,131,40,65,61,11,222,40,107,166,41,65,197,48,149,44,109,253,20,193,217,140,204,41,143,61,180,61,76,176,114,209,255,191,178,63,211,61,149,185,176,87,23,64,233,136,135,10,146,227,96,64,129,196,200,157,249,12,144,64,166,227,198,83,233,23,159,64,67,21,94,251,179,177,84,64,206,192,33,218,160,59,160,64,109,30,89,123,210,103,210,64,114,35,224,151,227,181,235,64,160,84,122,31,24,145,225,64,9,198,219,190,87,234,180,192,130,203,222,106,3,205,50,62,66,8,141,14,238,191,178,63,245,156,20,97,252,192,10,64,221,174,45,150,152,79,69,64,31,253,94,226,219,89,101,64,224,33,250,129,124,215,100,64,166,67,227,191,34,97,72,64,179,78,84,134,131,45,134,64,99,252,77,228,75,240,172,64,40,106,199,215,108,60,185,64,192,177,79,217,170,168,163,64,15,244,28,32,235,167,98,192,219,107,247,84,59,49,132,62,52,62,136,62,197,190,178,63,156,119,39,231,151,248,255,63,229,111,249,170,191,253,44,64,74,220,251,41,142,170,63,64,180,75,129,113,177,64,48,64,237,122,192,247,150,93,62,64,64,75,209,228,145,213,112,64,34,191,179,34,69,102,138,64,20,194,92,156,124,151,139,64,101,19,0,14,83,149,106,64,49,41,179,248,106,62,21,192,0,0,0,0,0,0,0,0,50,253,255,255,255,255,177,191,121,167,79,180,208,41,32,192,99,232,25,123,2,17,112,192,252,202,77,205,110,106,163,192,61,100,204,54,11,133,180,192,81,103,169,7,51,34,93,64,56,105,89,80,125,243,173,64,95,176,182,110,187,210,227,64,189,169,159,143,15,129,252,64,220,73,44,79,119,65,231,64,204,149,228,71,177,24,169,189,198,251,154,230,255,255,177,191,191,107,12,249,112,163,16,192,131,23,125,90,47,235,80,192,99,204,66,103,179,179,116,192,215,139,163,40,239,166,117,192,222,197,152,12,129,96,78,64,100,40,126,92,2,109,144,64,96,29,190,143,248,90,183,64,56,250,118,250,184,204,194,64,100,232,11,199,29,204,162,64,134,170,225,111,3,225,37,190,75,226,192,247,246,255,177,191,116,128,164,174,178,69,3,192,20,78,185,76,74,247,53,192,69,26,10,66,34,10,77,192,15,216,146,168,172,114,63,192,211,125,7,132,146,237,65,64,14,124,74,70,57,152,118,64,214,97,16,109,110,166,146,64,126,155,195,184,252,159,145,64,129,144,55,252,150,178,101,64,109,2,39,233,22,211,119,190,66,30,94,73,98,255,177,191,67,168,36,138,57,54,247,191,243,167,175,237,243,138,30,192,3,99,36,197,230,98,38,192,15,231,143,175,129,222,9,192,89,89,139,144,101,56,54,64,143,135,232,14,158,6,97,64,155,7,234,66,134,231,112,64,255,250,182,58,3,60,99,64,9,24,57,68,179,80,45,64,0,0,0,0,0,0,150,61,147,74,60,65,25,107,11,68,202,108,10,70,160,150,16,71,170,198,35,67,194,18,253,69,147,50,11,72,212,30,68,73,89,51,77,73,105,235,167,200,121,236,161,45,255,255,149,61,134,189,186,64,144,28,7,67,205,103,128,68,75,191,248,68,160,141,165,66,7,221,1,69,148,62,147,70,29,175,93,71,193,136,12,71,190,82,167,197,27,104,150,49,112,255,149,61,227,7,86,64,197,124,42,66,223,206,42,67,228,187,38,67,22,9,67,66,28,108,49,68,95,130,103,69,103,227,201,69,87,69,29,69,89,63,21,195,219,137,33,52,42,246,149,61,191,196,255,63,253,237,103,65,113,84,253,65,140,5,130,65,184,236,242,65,143,172,134,67,41,50,83,68,229,187,92,68,152,170,84,67,88,243,169,192,0,0,0,0,0,0,144,189,134,78,1,193,20,136,128,195,118,83,27,197,90,40,164,197,152,17,233,66,235,155,111,69,219,149,30,71,124,8,228,71,186,11,58,71,0,0,0,0,138,197,72,173,255,255,143,189,136,27,133,192,123,89,135,194,155,157,165,195,121,55,173,195,8,4,115,66,19,104,131,68,196,215,186,69,200,101,22,70,238,96,22,69,0,0,0,0,27,8,47,177,184,255,143,189,149,45,26,192,82,186,175,193,18,81,104,194,101,149,251,193,148,108,15,66,202,193,180,67,115,51,149,68,230,255,140,68,184,148,45,67,0,0,0,0,183,152,190,179,18,251,143,189,204,177,185,191,159,87,244,192,54,23,51,193,13,244,78,192,45,195,177,65,240,52,8,67,50,60,135,67,26,224,25,67,154,133,106,65,0,0,0,0,0,0,0,0,0,0,0,0,243,253,255,255,255,63,186,191,247,121,103,162,145,69,48,192,118,181,228,83,208,188,135,192,21,116,248,64,231,36,199,192,106,156,208,101,208,166,231,192,229,205,91,222,166,44,100,64,25,132,216,208,98,145,190,64,152,94,183,176,154,87,0,65,25,156,134,114,83,246,37,65,92,173,25,119,210,87,36,65,24,170,165,14,105,249,17,193,152,160,161,26,67,250,182,189,239,127,89,203,255,63,186,191,75,173,3,202,230,28,32,192,176,185,167,108,109,245,102,192,79,115,49,105,198,116,149,192,157,167,253,136,227,104,164,192,178,17,90,255,178,81,84,64,57,248,123,231,49,31,159,64,41,206,100,13,31,15,209,64,151,209,186,170,109,87,232,64,75,54,124,207,4,75,219,64,4,160,255,252,46,111,178,192,79,200,143,211,169,207,53,190,84,237,174,81,235,63,186,191,255,217,2,51,194,112,18,192,218,22,93,194,113,236,76,192,95,213,24,71,211,135,108,192,246,27,92,95,185,102,107,192,228,103,211,204,35,213,71,64,62,238,49,192,235,14,133,64,154,124,142,68,78,104,170,64,166,84,29,166,186,171,181,64,75,223,212,13,122,188,157,64,31,49,10,41,112,230,96,192,210,38,198,68,38,241,135,190,16,176,72,145,142,62,186,191,218,78,187,105,132,4,6,192,127,144,104,193,226,169,51,192,170,74,16,222,163,41,69,192,82,110,207,57,54,95,53,192,255,100,174,120,138,136,61,64,186,28,130,219,104,159,111,64,247,160,73,206,5,172,135,64,41,192,212,72,37,27,135,64,212,216,62,60,94,126,99,64,107,232,27,231,134,214,19,192,0,0,0,0,0,0,0,0,206,252,255,255,255,255,189,63,206,127,127,53,157,122,42,64,144,165,46,101,212,192,121,64,204,50,165,163,125,69,174,64,221,130,39,195,122,234,190,64,172,108,101,142,69,141,92,64,79,39,77,150,220,133,172,64,127,187,197,151,134,11,226,64,187,23,143,178,44,212,247,64,45,11,122,105,17,21,222,64,125,202,225,218,103,6,173,61,67,0,193,226,255,255,189,63,227,21,99,110,4,54,27,64,237,2,38,69,185,19,91,64,73,214,82,208,22,45,128,64,183,12,126,187,184,133,128,64,61,99,175,168,234,163,77,64,1,103,6,27,54,251,142,64,251,182,6,87,68,233,180,64,21,187,165,184,176,164,190,64,81,94,111,3,48,128,151,64,221,158,173,167,33,252,41,62,123,209,33,91,245,255,189,63,138,173,94,232,188,118,15,64,41,209,166,157,72,143,65,64,55,24,44,77,133,195,86,64,229,62,168,142,143,71,72,64,156,6,52,161,73,101,65,64,95,167,241,7,51,12,117,64,35,213,55,80,124,91,144,64,233,49,46,163,125,214,139,64,83,237,46,124,109,242,89,64,244,68,85,246,212,233,124,62,131,13,118,190,66,255,189,63,192,174,143,249,183,242,2,64,100,169,113,127,55,124,40,64,226,142,127,23,168,177,49,64,254,193,116,165,73,75,20,64,220,236,213,138,189,111,53,64,213,44,249,20,147,82,95,64,217,219,162,213,216,8,109,64,169,132,24,218,122,107,93,64,146,81,78,244,177,186,32,64,0,0,0,0,0,0,210,189,141,44,130,193,131,230,61,196,58,39,57,198,131,54,61,199,55,101,33,67,23,139,244,69,214,188,2,72,156,178,47,73,148,190,34,73,72,203,143,200,50,137,63,180,117,244,209,189,35,36,48,192,22,79,157,193,31,77,41,194,178,249,170,193,84,68,236,65,71,251,124,67,46,96,61,68,42,217,56,68,242,242,27,67,55,180,158,192,0,0,0,0,0,0,240,61,234,212,83,65,163,6,206,67,237,43,114,69,214,83,247,69,44,106,228,66,229,46,100,69,53,92,16,71,102,161,190,71,139,168,240,70,0,0,0,0,63,51,104,45,255,255,239,61,35,176,217,64,202,157,216,66,183,104,1,68,198,45,4,68,85,31,109,66,177,217,119,68,35,74,167,69,134,37,245,69,128,1,188,68,0,0,0,0,13,225,79,49,171,255,239,61,231,181,123,64,69,122,12,66,42,28,182,66,124,60,66,66,77,42,11,66,152,97,168,67,227,219,130,68,237,179,94,68,108,147,207,66,0,0,0,0,168,78,231,51,22,250,239,61,192,149,23,64,188,225,67,65,65,141,141,65,77,90,162,64,236,125,171,65,153,148,250,66,199,70,104,67,215,91,235,66,144,213,5,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,64,0,0,0,0,0,0,24,64,0,0,0,0,0,0,56,64,0,0,0,0,0,0,94,64,0,0,0,0,0,128,134,64,0,0,0,0,0,176,179,64,0,0,0,0,0,176,227,64,0,0,0,0,0,38,22,65,0,0,0,0,128,175,75,65,0,0,0,0,168,8,131,65,0,0,0,0,252,140,188,65,0,0,0,192,140,50,247,65,0,0,0,40,59,76,52,66,0,0,128,117,119,7,115,66,0,0,128,117,119,7,179,66,0,0,216,236,238,55,244,66,0,0,115,202,236,190,54,67,0,144,104,48,185,2,123,67,0,90,65,190,179,225,192,67,32,198,181,233,59,40,6,68,108,240,89,97,82,119,78,68,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,58,32,105,108,108,101,103,97,108,32,111,112,116,105,111,110,58,32,0,0,0,0,0,0,10,0,0,0,0,0,0,0,58,32,111,112,116,105,111,110,32,114,101,113,117,105,114,101,115,32,97,110,32,97,114,103,117,109,101,110,116,58,32,0,0,0,0,0,0,0,0,0,2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,0,0,0,0,0,0,0,116,0,0,0,232,83,4,0,110,0,0,0,240,83,4,0,114,0,0,0,248,83,4,0,102,0,0,0,0,84,4,0,97,0,0,0,8,84,4,0,101,0,0,0,16,84,4,0,119,0,0,0,24,84,4,0,87,0,0,0,40,84,4,0,115,0,0,0,56,84,4,0,83,0,0,0,72,84,4,0,100,0,0,0,88,84,4,0,68,0,0,0,104,84,4,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,27,0,0,0,0,0,0,0,91,91,58,97,108,110,117,109,58,93,95,93,0,0,0,0,91,94,91,58,97,108,110,117,109,58,93,95,93,0,0,0,91,91,58,115,112,97,99,101,58,93,93,0,0,0,0,0,91,94,91,58,115,112,97,99,101,58,93,93,0,0,0,0,91,91,58,100,105,103,105,116,58,93,93,0,0,0,0,0,91,94,91,58,100,105,103,105,116,58,93,93,0,0,0,0,78,111,32,101,114,114,111,114,0,78,111,32,109,97,116,99,104,0,73,110,118,97,108,105,100,32,114,101,103,101,120,112,0,85,110,107,110,111,119,110,32,99,111,108,108,97,116,105,110,103,32,101,108,101,109,101,110,116,0,85,110,107,110,111,119,110,32,99,104,97,114,97,99,116,101,114,32,99,108,97,115,115,32,110,97,109,101,0,84,114,97,105,108,105,110,103,32,98,97,99,107,115,108,97,115,104,0,73,110,118,97,108,105,100,32,98,97,99,107,32,114,101,102,101,114,101,110,99,101,0,77,105,115,115,105,110,103,32,39,93,39,0,77,105,115,115,105,110,103,32,39,41,39,0,77,105,115,115,105,110,103,32,39,125,39,0,73,110,118,97,108,105,100,32,99,111,110,116,101,110,116,115,32,111,102,32,123,125,0,73,110,118,97,108,105,100,32,99,104,97,114,97,99,116,101,114,32,114,97,110,103,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,112,101,116,105,116,105,111,110,32,110,111,116,32,112,114,101,99,101,100,101,100,32,98,121,32,118,97,108,105,100,32,101,120,112,114,101,115,115,105,111,110,0,0,85,110,107,110,111,119,110,32,101,114,114,111,114,0,0,0,37,115,0,0,0,0,0,0,37,0,0,0,0,0,0,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,10,10,0,0,0,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,37,46,42,115,0,0,0,0,0,0,0,0,0,0,0,0,37,37,37,115,37,115,37,115,37,115,37,115,42,46,42,37,99,37,99,0,0,0,0,0,35,0,0,0,0,0,0,0,43,0,0,0,0,0,0,0,45,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,48,0,0,0,0,0,0,0,76,0,0,106,76,76,76,0,106,0,0,0,0,0,106,106,0,0,0,0,106,0,0,106,101,109,115,99,114,105,112,116,101,110,46,118,115,119,112,114,105,110,116,102,46,116,101,109,112,46,98,117,102,102,101,114,0,0,0,0,0,0,0,0,119,98,0,0,0,0,0,0,114,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,46,42,101,0,0,0,0,37,46,42,102,0,0,0,0,48,0,0,0,0,0,0,0,46,0,0,0,0,0,0,0,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,0,37,46,42,103,0,0,0,0,64,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,85,110,107,110,111,119,110,32,115,105,103,110,97,108,0,72,97,110,103,117,112,0,73,110,116,101,114,114,117,112,116,0,81,117,105,116,0,73,108,108,101,103,97,108,32,105,110,115,116,114,117,99,116,105,111,110,0,84,114,97,99,101,47,98,114,101,97,107,112,111,105,110,116,32,116,114,97,112,0,65,98,111,114,116,101,100,0,66,117,115,32,101,114,114,111,114,0,65,114,105,116,104,109,101,116,105,99,32,101,120,99,101,112,116,105,111,110,0,75,105,108,108,101,100,0,85,115,101,114,32,100,101,102,105,110,101,100,32,115,105,103,110,97,108,32,49,0,83,101,103,109,101,110,116,97,116,105,111,110,32,102,97,117,108,116,0,85,115,101,114,32,100,101,102,105,110,101,100,32,115,105,103,110,97,108,32,50,0,66,114,111,107,101,110,32,112,105,112,101,0,65,108,97,114,109,32,99,108,111,99,107,0,84,101,114,109,105,110,97,116,101,100,0,83,116,97,99,107,32,102,97,117,108,116,0,67,104,105,108,100,32,112,114,111,99,101,115,115,32,115,116,97,116,117,115,0,67,111,110,116,105,110,117,101,100,0,83,116,111,112,112,101,100,32,40,115,105,103,110,97,108,41,0,83,116,111,112,112,101,100,0,83,116,111,112,112,101,100,32,40,116,116,121,32,105,110,112,117,116,41,0,83,116,111,112,112,101,100,32,40,116,116,121,32,111,117,116,112,117,116,41,0,85,114,103,101,110,116,32,73,47,79,32,99,111,110,100,105,116,105,111,110,0,67,80,85,32,116,105,109,101,32,108,105,109,105,116,32,101,120,99,101,101,100,101,100,0,70,105,108,101,32,115,105,122,101,32,108,105,109,105,116,32,101,120,99,101,101,100,101,100,0,86,105,114,116,117,97,108,32,116,105,109,101,114,32,101,120,112,105,114,101,100,0,80,114,111,102,105,108,105,110,103,32,116,105,109,101,114,32,101,120,112,105,114,101,100,0,87,105,110,100,111,119,32,99,104,97,110,103,101,100,0,73,47,79,32,112,111,115,115,105,98,108,101,0,80,111,119,101,114,32,102,97,105,108,117,114,101,0,66,97,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,84,51,50,0,82,84,51,51,0,82,84,51,52,0,82,84,51,53,0,82,84,51,54,0,82,84,51,55,0,82,84,51,56,0,82,84,51,57,0,82,84,52,48,0,82,84,52,49,0,82,84,52,50,0,82,84,52,51,0,82,84,52,52,0,82,84,52,53,0,82,84,52,54,0,82,84,52,55,0,82,84,52,56,0,82,84,52,57,0,82,84,53,48,0,82,84,53,49,0,82,84,53,50,0,82,84,53,51,0,82,84,53,52,0,82,84,53,53,0,82,84,53,54,0,82,84,53,55,0,82,84,53,56,0,82,84,53,57,0,82,84,54,48,0,82,84,54,49,0,82,84,54,50,0,82,84,54,51,0,82,84,54,52], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+275556);
/* memory initializer */ allocate([109,97,120,32,115,121,115,116,101,109,32,98,121,116,101,115,32,61,32,37,49,48,108,117,10,0,0,0,0,0,0,0,115,121,115,116,101,109,32,98,121,116,101,115,32,32,32,32,32,61,32,37,49,48,108,117,10,0,0,0,0,0,0,0,105,110,32,117,115,101,32,98,121,116,101,115,32,32,32,32,32,61,32,37,49,48,108,117,10,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,1,2,4,7,3,6,5,0,0,0,0,0,0,0,0,105,110,102,105,110,105,116,121,0,0,0,0,0,0,0,0,110,97,110,0,0,0,0,0,95,112,137,0,255,9,47,15,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,0,0,0,0,0,0,109,230,236,222,5,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,0,0,0,0,0,0,4,95,4,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,45,244,81,88,207,140,177,192,70,246,181,203,41,49,3,199,4,91,112,48,180,93,253,32,120,127,139,154,216,89,41,80,104,72,137,171,167,86,3,108,255,183,205,136,63,212,119,180,43,165,163,112,241,186,228,168,252,65,131,253,217,111,225,138,122,47,45,116,150,7,31,13,9,94,3,118,44,112,247,64,165,44,167,111,87,65,168,170,116,223,160,88,100,3,74,199,196,60,83,174,175,95,24,4,21,177,227,109,40,134,171,12,164,191,67,240,233,80,129,57,87,22,82,55,0,0,0,0,0,0,0,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,45,43,32,32,32,48,88,48,120,0,0,0,0,0,0,0,40,110,117,108,108,41,0,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,0,0,0,0,0,105,110,102,0,0,0,0,0,73,78,70,0,0,0,0,0,110,97,110,0,0,0,0,0,78,65,78,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+285952);




var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


   
  Module["_i64Subtract"] = _i64Subtract;

  var _fabsf=Math_abs;

  var _floorf=Math_floor;

  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          if (stream.tty.output.length) {
            stream.tty.ops.put_char(stream.tty, 10);
          }
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            },
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (node.contents && node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
  
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
  
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          stream.ungotten = [];
          stream.position = position;
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          fileStore.createIndex('timestamp', 'timestamp', { unique: false });
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function() {
          callback(this.error);
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function() { callback(this.error); };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function() { callback(this.error); };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function() { done(this.error); };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          stream.position = position;
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      // we don't currently perform any user-space buffering of data
    }var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); },
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); },
            },
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        return stream.stream_ops.llseek(stream, offset, whence);
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        FS.close(stream);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fsync(fildes) {
      // int fsync(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
      var stream = FS.getStream(fildes);
      if (stream) {
        // We write directly to the file system, so there's nothing to do here.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      var fd = _fileno(stream);
      _fsync(fd);
      return _close(fd);
    }


  
  function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      var mode = HEAP32[((varargs)>>2)];
      path = Pointer_stringify(path);
      try {
        var stream = FS.open(path, oflag, mode);
        return stream.fd;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 512;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 1024;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var fd = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return fd === -1 ? 0 : FS.getPtrForStream(FS.getStream(fd));
    }

  var _sqrtf=Math_sqrt;

   
  Module["_strncpy"] = _strncpy;

  function _decodeMP3_unclipped() {
  Module['printErr']('missing function: decodeMP3_unclipped'); abort(-1);
  }

  function _InitMP3() {
  Module['printErr']('missing function: InitMP3'); abort(-1);
  }

   
  Module["_i64Add"] = _i64Add;

  function _exp2(x) {
      return Math.pow(2, x);
    }

  var _llvm_pow_f32=Math_pow;

  
  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        // If Module['websocket'] has already been defined (e.g. for configuring
        // the subprotocol/url) use that, if not initialise it to a new object.
        Module['websocket'] = (Module['websocket'] && 
                               ('object' === typeof Module['websocket'])) ? Module['websocket'] : {};
  
        // Add the Event registration mechanism to the exported websocket configuration
        // object so we can register network callbacks from native JavaScript too.
        // For more documentation see system/include/emscripten/emscripten.h
        Module['websocket']._callbacks = {};
        Module['websocket']['on'] = function(event, callback) {
  	    if ('function' === typeof callback) {
  		  this._callbacks[event] = callback;
          }
  	    return this;
        };
  
        Module['websocket'].emit = function(event, param) {
  	    if ('function' === typeof this._callbacks[event]) {
  		  this._callbacks[event].call(this, param);
          }
        };
  
        // If debug is enabled register simple default logging callbacks for each Event.
  
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          error: null, // Used in getsockopt for SOL_SOCKET/SO_ERROR test
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces '//' comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the '#' for '//' again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                var parts = addr.split('/');
                url = url + parts[0] + ":" + port + "/" + parts.slice(1).join('/');
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
  
            Module['websocket'].emit('open', sock.stream.fd);
  
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
            Module['websocket'].emit('message', sock.stream.fd);
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('close', function() {
              Module['websocket'].emit('close', sock.stream.fd);
            });
            peer.socket.on('error', function(error) {
              // Although the ws library may pass errors that may be more descriptive than
              // ECONNREFUSED they are not necessarily the expected error code e.g. 
              // ENOTFOUND on getaddrinfo seems to be node.js specific, so using ECONNREFUSED
              // is still probably the most useful thing to do.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onclose = function() {
              Module['websocket'].emit('close', sock.stream.fd);
            };
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
            peer.socket.onerror = function(error) {
              // The WebSocket spec only allows a 'simple event' to be thrown on error,
              // so we only really know as much as ECONNREFUSED.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          Module['websocket'].emit('listen', sock.stream.fd); // Send Event with listen fd.
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
              Module['websocket'].emit('connection', newsock.stream.fd);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
              Module['websocket'].emit('connection', sock.stream.fd);
            }
          });
          sock.server.on('closed', function() {
            Module['websocket'].emit('close', sock.stream.fd);
            sock.server = null;
          });
          sock.server.on('error', function(error) {
            // Although the ws library may pass errors that may be more descriptive than
            // ECONNREFUSED they are not necessarily the expected error code e.g. 
            // ENOTFOUND on getaddrinfo seems to be node.js specific, so using EHOSTUNREACH
            // is still probably the most useful thing to do. This error shouldn't
            // occur in a well written app as errors should get trapped in the compiled
            // app's own getaddrinfo call.
            sock.error = ERRNO_CODES.EHOSTUNREACH; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
            Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'EHOSTUNREACH: Host is unreachable']);
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)>>0)]=chr;
      var fd = _fileno(stream);
      var ret = _write(fd, _fputc.ret, 1);
      if (ret == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return -1;
      } else {
        return chr;
      }
    }function _putc() {
  return _fputc.apply(null, arguments)
  }

  function _readdir_r(dirp, entry, result) {
      // int readdir_r(DIR *dirp, struct dirent *entry, struct dirent **result);
      // http://pubs.opengroup.org/onlinepubs/007908799/xsh/readdir_r.html
      var stream = FS.getStreamFromPtr(dirp);
      if (!stream) {
        return ___setErrNo(ERRNO_CODES.EBADF);
      }
      if (!stream.currReading) {
        try {
          // load the list of entries now, then readdir will traverse that list, to ignore changes to files
          stream.currReading = FS.readdir(stream.path);
        } catch (e) {
          return FS.handleFSError(e);
        }
      }
      if (stream.position < 0 || stream.position >= stream.currReading.length) {
        HEAP32[((result)>>2)]=0;
        return 0;
      }
      var id;
      var type;
      var name = stream.currReading[stream.position++];
      if (!name.indexOf('.')) {
        id = 1;
        type = 4;
      } else {
        try {
          // child may have been removed since we started to read this directory
          var child = FS.lookupNode(stream.node, name);
        } catch (e) {
          // skip to the next entry (not infinite since position is incremented until currReading.length)
          return _readdir_r(dirp, entry, result);
        }
        id = child.id;
        type = FS.isChrdev(child.mode) ? 2 :  // DT_CHR, character device.
               FS.isDir(child.mode) ? 4 :     // DT_DIR, directory.
               FS.isLink(child.mode) ? 10 :   // DT_LNK, symbolic link.
               8;                             // DT_REG, regular file.
      }
      HEAP32[((entry)>>2)]=id;
      HEAP32[(((entry)+(4))>>2)]=stream.position;
      HEAP32[(((entry)+(8))>>2)]=name.length + 1;
      for (var i = 0; i < name.length; i++) {
        HEAP8[(((entry + 11)+(i))>>0)]=name.charCodeAt(i);
      }
      HEAP8[(((entry + 11)+(i))>>0)]=0;
      HEAP8[(((entry)+(10))>>0)]=type;
      HEAP32[((result)>>2)]=entry;
      return 0;
    }

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

  
  function _log10(x) {
      return Math.log(x) / Math.LN10;
    }function _log10f() {
  return _log10.apply(null, arguments)
  }

  function _ExitMP3() {
  Module['printErr']('missing function: ExitMP3'); abort(-1);
  }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  
  
  function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)>>0)]=streamObj.ungotten.pop();
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(streamObj.fd, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return (bytesRead / size)|0;
    }

  var _BDtoIHigh=true;

  function _llvm_stackrestore(p) {
      var self = _llvm_stacksave;
      var ret = self.LLVM_SAVEDSTACKS[p];
      self.LLVM_SAVEDSTACKS.splice(p, 1);
      Runtime.stackRestore(ret);
    }

  var _ceil=Math_ceil;

  function _decodeMP3() {
  Module['printErr']('missing function: decodeMP3'); abort(-1);
  }

  
  
  function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return (bytesWritten / size)|0;
      }
    }
  
  
   
  Module["_strlen"] = _strlen;
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
  
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[((textIndex)>>0)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)>>0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)>>0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)>>0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)>>0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)>>0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)>>0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[((i)>>0)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }function _vfprintf(s, f, va_arg) {
      return _fprintf(s, f, HEAP32[((va_arg)>>2)]);
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  
  
  function _fputs(s, stream) {
      // int fputs(const char *restrict s, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputs.html
      var fd = _fileno(stream);
      return _write(fd, s, _strlen(s));
    }function _puts(s) {
      // int puts(const char *s);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/puts.html
      // NOTE: puts() always writes an extra newline.
      var stdout = HEAP32[((_stdout)>>2)];
      var ret = _fputs(s, stdout);
      if (ret < 0) {
        return ret;
      } else {
        var newlineRet = _fputc(10, stdout);
        return (newlineRet < 0) ? -1 : ret + 1;
      }
    }
  
  
  function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }
  
  function ___errno_location() {
      return ___errno_state;
    }function _perror(s) {
      // void perror(const char *s);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/perror.html
      var stdout = HEAP32[((_stdout)>>2)];
      if (s) {
        _fputs(s, stdout);
        _fputc(58, stdout);
        _fputc(32, stdout);
      }
      var errnum = HEAP32[((___errno_location())>>2)];
      _puts(_strerror(errnum));
    }

  var _llvm_pow_f64=Math_pow;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }

   
  Module["_memmove"] = _memmove;




  
  function _unlink(path) {
      // int unlink(const char *path);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/unlink.html
      path = Pointer_stringify(path);
      try {
        FS.unlink(path);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _rmdir(path) {
      // int rmdir(const char *path);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/rmdir.html
      path = Pointer_stringify(path);
      try {
        FS.rmdir(path);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _remove(path) {
      // int remove(const char *path);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/remove.html
      var ret = _unlink(path);
      if (ret == -1) ret = _rmdir(path);
      return ret;
    }

  function _opendir(dirname) {
      // DIR *opendir(const char *dirname);
      // http://pubs.opengroup.org/onlinepubs/007908799/xsh/opendir.html
      // NOTE: Calculating absolute path redundantly since we need to associate it
      //       with the opened stream.
      var path = Pointer_stringify(dirname);
      if (!path) {
        ___setErrNo(ERRNO_CODES.ENOENT);
        return 0;
      }
      var node;
      try {
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
      } catch (e) {
        FS.handleFSError(e);
        return 0;
      }
      if (!FS.isDir(node.mode)) {
        ___setErrNo(ERRNO_CODES.ENOTDIR);
        return 0;
      }
      var fd = _open(dirname, 0, allocate([0, 0, 0, 0], 'i32', ALLOC_STACK));
      return fd === -1 ? 0 : FS.getPtrForStream(FS.getStream(fd));
    }

  var _cosf=Math_cos;

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

   
  Module["_memset"] = _memset;

  var _BDtoILow=true;

  var _BItoD=true;

  var _logf=Math_log;

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }



  function ___lock() {
  Module['printErr']('missing function: __lock'); abort(-1);
  }

  function ___unlock() {
  Module['printErr']('missing function: __unlock'); abort(-1);
  }

  var _fabs=Math_abs;

  var _floor=Math_floor;

  
  function _lseek(fildes, offset, whence) {
      // off_t lseek(int fildes, off_t offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/lseek.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        return FS.llseek(stream, offset, whence);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fseek(stream, offset, whence) {
      // int fseek(FILE *stream, long offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fseek.html
      var fd = _fileno(stream);
      var ret = _lseek(fd, offset, whence);
      if (ret == -1) {
        return -1;
      }
      stream = FS.getStreamFromPtr(stream);
      stream.eof = false;
      return 0;
    }

  var _sqrt=Math_sqrt;


  function _ftell(stream) {
      // long ftell(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ftell.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      if (FS.isChrdev(stream.node.mode)) {
        ___setErrNo(ERRNO_CODES.ESPIPE);
        return -1;
      } else {
        return stream.position;
      }
    }

  var Browser={mainLoop:{scheduler:null,method:"",shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
        
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvasContainer.requestFullScreen();
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              Browser.lastTouches[touch.identifier] = Browser.touches[touch.identifier];
              Browser.touches[touch.identifier] = { x: adjustedX, y: adjustedY };
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};

  var _sin=Math_sin;

  
  function _fmod(x, y) {
      return x % y;
    }function _fmodl() {
  return _fmod.apply(null, arguments)
  }

  function _stat(path, buf, dontResolveLastLink) {
      // http://pubs.opengroup.org/onlinepubs/7908799/xsh/stat.html
      // int stat(const char *path, struct stat *buf);
      // NOTE: dontResolveLastLink is a shortcut for lstat(). It should never be
      //       used in client code.
      path = typeof path !== 'string' ? Pointer_stringify(path) : path;
      try {
        var stat = dontResolveLastLink ? FS.lstat(path) : FS.stat(path);
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      } catch (e) {
        if (e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
          // an error occurred while trying to look up the path; we should just report ENOTDIR
          e.setErrno(ERRNO_CODES.ENOTDIR);
        }
        FS.handleFSError(e);
        return -1;
      }
    }

  var _atan=Math_atan;


  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function _closedir(dirp) {
      // int closedir(DIR *dirp);
      // http://pubs.opengroup.org/onlinepubs/007908799/xsh/closedir.html
      var fd = _fileno(dirp);
      var stream = FS.getStream(fd);
      if (stream.currReading) stream.currReading = null;
      return _close(fd);
    }

  var _sinf=Math_sin;

  var _log=Math_log;

  var _cos=Math_cos;


  function _llvm_stacksave() {
      var self = _llvm_stacksave;
      if (!self.LLVM_SAVEDSTACKS) {
        self.LLVM_SAVEDSTACKS = [];
      }
      self.LLVM_SAVEDSTACKS.push(Runtime.stackSave());
      return self.LLVM_SAVEDSTACKS.length-1;
    }

   
  Module["_strcpy"] = _strcpy;

  var _exp=Math_exp;

  
  function _copysign(a, b) {
      return __reallyNegative(a) === __reallyNegative(b) ? a : -a;
    }function _copysignl() {
  return _copysign.apply(null, arguments)
  }

  function ___progname() {
  Module['printErr']('missing function: __progname'); abort(-1);
  }

  function _freqs() {
  Module['printErr']('missing function: freqs'); abort(-1);
  }



  function _tabsel_123() {
  Module['printErr']('missing function: tabsel_123'); abort(-1);
  }

   
  Module["_emscripten_replace_memory"] = _emscripten_replace_memory;
FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var ctlz_i8 = allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_DYNAMIC);
 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);

  var Math_min = Math.min;
function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiidii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiidii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

  // EMSCRIPTEN_START_ASM
  var asm = (function(global, env, buffer) {
    'almost asm';
    
    var Int8View = global.Int8Array;
    var Int16View = global.Int16Array;
    var Int32View = global.Int32Array;
    var Uint8View = global.Uint8Array;
    var Uint16View = global.Uint16Array;
    var Uint32View = global.Uint32Array;
    var Float32View = global.Float32Array;
    var Float64View = global.Float64Array;
    var HEAP8 = new Int8View(buffer);
    var HEAP16 = new Int16View(buffer);
    var HEAP32 = new Int32View(buffer);
    var HEAPU8 = new Uint8View(buffer);
    var HEAPU16 = new Uint16View(buffer);
    var HEAPU32 = new Uint32View(buffer);
    var HEAPF32 = new Float32View(buffer);
    var HEAPF64 = new Float64View(buffer);
    var byteLength = global.byteLength;

  
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ctlz_i8=env.ctlz_i8|0;
  var ___progname=env.___progname|0;
  var _freqs=env._freqs|0;
  var _stderr=env._stderr|0;
  var _stdout=env._stdout|0;
  var _tabsel_123=env._tabsel_123|0;

    var __THREW__ = 0;
    var threwValue = 0;
    var setjmpId = 0;
    var undef = 0;
    var nan = +env.NaN, inf = +env.Infinity;
    var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;
  
    var tempRet0 = 0;
    var tempRet1 = 0;
    var tempRet2 = 0;
    var tempRet3 = 0;
    var tempRet4 = 0;
    var tempRet5 = 0;
    var tempRet6 = 0;
    var tempRet7 = 0;
    var tempRet8 = 0;
    var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var abort=env.abort;
  var assert=env.assert;
  var Math_min=env.min;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_iiidii=env.invoke_iiidii;
  var invoke_vii=env.invoke_vii;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viii=env.invoke_viii;
  var invoke_iii=env.invoke_iii;
  var invoke_viiii=env.invoke_viiii;
  var _fabs=env._fabs;
  var _readdir_r=env._readdir_r;
  var _sin=env._sin;
  var _exp=env._exp;
  var _llvm_pow_f64=env._llvm_pow_f64;
  var _send=env._send;
  var _log=env._log;
  var _fread=env._fread;
  var _abort=env._abort;
  var _fmod=env._fmod;
  var _lseek=env._lseek;
  var _llvm_stackrestore=env._llvm_stackrestore;
  var _fmodl=env._fmodl;
  var _vfprintf=env._vfprintf;
  var _log10f=env._log10f;
  var _rmdir=env._rmdir;
  var _logf=env._logf;
  var _floor=env._floor;
  var _ExitMP3=env._ExitMP3;
  var _fflush=env._fflush;
  var _opendir=env._opendir;
  var _pwrite=env._pwrite;
  var _strerror_r=env._strerror_r;
  var _cosf=env._cosf;
  var _log10=env._log10;
  var _fabsf=env._fabsf;
  var _remove=env._remove;
  var _atan=env._atan;
  var _llvm_pow_f32=env._llvm_pow_f32;
  var _strerror=env._strerror;
  var _sbrk=env._sbrk;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _exp2=env._exp2;
  var _unlink=env._unlink;
  var _perror=env._perror;
  var _sysconf=env._sysconf;
  var __reallyNegative=env.__reallyNegative;
  var _close=env._close;
  var _putc=env._putc;
  var _sinf=env._sinf;
  var _cos=env._cos;
  var _fseek=env._fseek;
  var _fileno=env._fileno;
  var _llvm_stacksave=env._llvm_stacksave;
  var _pread=env._pread;
  var _puts=env._puts;
  var _open=env._open;
  var _fclose=env._fclose;
  var _floorf=env._floorf;
  var _copysignl=env._copysignl;
  var _sqrtf=env._sqrtf;
  var ___unlock=env.___unlock;
  var _write=env._write;
  var _fsync=env._fsync;
  var _ftell=env._ftell;
  var ___errno_location=env.___errno_location;
  var _stat=env._stat;
  var _recv=env._recv;
  var _copysign=env._copysign;
  var _fputc=env._fputc;
  var _mkport=env._mkport;
  var __exit=env.__exit;
  var _read=env._read;
  var ___lock=env.___lock;
  var _InitMP3=env._InitMP3;
  var _fwrite=env._fwrite;
  var _time=env._time;
  var _fprintf=env._fprintf;
  var _decodeMP3=env._decodeMP3;
  var ___setErrNo=env.___setErrNo;
  var _ceil=env._ceil;
  var __formatString=env.__formatString;
  var _closedir=env._closedir;
  var _sqrt=env._sqrt;
  var _fopen=env._fopen;
  var _exit=env._exit;
  var _decodeMP3_unclipped=env._decodeMP3_unclipped;
  var _fputs=env._fputs;
  var tempFloat = 0.0;

  // EMSCRIPTEN_START_FUNCS
  function stackAlloc(size) {
    size = size|0;
    var ret = 0;
    ret = STACKTOP;
    STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;

    return ret|0;
  }
  function stackSave() {
    return STACKTOP|0;
  }
  function stackRestore(top) {
    top = top|0;
    STACKTOP = top;
  }

  function setThrew(threw, value) {
    threw = threw|0;
    value = value|0;
    if ((__THREW__|0) == 0) {
      __THREW__ = threw;
      threwValue = value;
    }
  }
  function copyTempFloat(ptr) {
    ptr = ptr|0;
    HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
    HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
    HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
    HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  }
  function copyTempDouble(ptr) {
    ptr = ptr|0;
    HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
    HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
    HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
    HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
    HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
    HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
    HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
    HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
  }
  function setTempRet0(value) {
    value = value|0;
    tempRet0 = value;
  }
  function getTempRet0() {
    return tempRet0|0;
  }
  
function _getframebits($gfc) {
 $gfc = $gfc|0;
 var $$idx$val = 0, $$idx$val$pre = 0, $$idx1 = 0, $$idx1$val = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bit_rate$0 = 0;
 var $bit_rate$0$in = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($gfc) + 16|0);
 $1 = (($gfc) + 84744|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  $6 = (($gfc) + 120|0);
  $$idx$val$pre = HEAP32[$0>>2]|0;
  $$idx$val = $$idx$val$pre;$bit_rate$0$in = $6;
 } else {
  $4 = HEAP32[$0>>2]|0;
  $5 = ((141224 + ($4<<6)|0) + ($2<<2)|0);
  $$idx$val = $4;$bit_rate$0$in = $5;
 }
 $bit_rate$0 = HEAP32[$bit_rate$0$in>>2]|0;
 $7 = (($gfc) + 84752|0);
 $8 = HEAP32[$7>>2]|0;
 $$idx1 = (($gfc) + 64|0);
 $$idx1$val = HEAP32[$$idx1>>2]|0;
 $9 = ($$idx$val*72000)|0;
 $10 = (($9) + 72000)|0;
 $11 = Math_imul($10, $bit_rate$0)|0;
 $12 = (($11|0) / ($$idx1$val|0))&-1;
 $13 = (($12) + ($8))|0;
 $14 = $13 << 3;
 STACKTOP = sp;return ($14|0);
}
function _get_max_frame_buffer_size_by_constraint($cfg,$constraint) {
 $cfg = $cfg|0;
 $constraint = $constraint|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cfg$idx2$val = 0, $cfg$idx3 = 0, $cfg$idx3$val = 0, $max_kbps$0 = 0, $max_kbps$0$in = 0, $maxmp3buf$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($cfg) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(320);
 if ($2) {
  $3 = ($constraint|0)==(1);
  $cfg$idx2$val = HEAP32[$cfg>>2]|0;
  if ($3) {
   $cfg$idx3 = (($cfg) + 48|0);
   $cfg$idx3$val = HEAP32[$cfg$idx3>>2]|0;
   $4 = ($cfg$idx2$val*72000)|0;
   $5 = (($4) + 72000)|0;
   $6 = Math_imul($5, $1)|0;
   $7 = (($6|0) / ($cfg$idx3$val|0))&-1;
   $8 = $7 << 3;
   $maxmp3buf$0 = $8;
   STACKTOP = sp;return ($maxmp3buf$0|0);
  } else {
   $9 = ($cfg$idx2$val*7680)|0;
   $10 = (($9) + 7680)|0;
   $maxmp3buf$0 = $10;
   STACKTOP = sp;return ($maxmp3buf$0|0);
  }
 }
 $11 = (($cfg) + 48|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)<(16000);
 $14 = HEAP32[$cfg>>2]|0;
 if ($13) {
  $15 = ((141224 + ($14<<6)|0) + 32|0);
  $max_kbps$0$in = $15;
 } else {
  $16 = ((141224 + ($14<<6)|0) + 56|0);
  $max_kbps$0$in = $16;
 }
 if ((($constraint|0) == 1)) {
  $max_kbps$0 = HEAP32[$max_kbps$0$in>>2]|0;
  $17 = ($14*72000)|0;
  $18 = (($17) + 72000)|0;
  $19 = Math_imul($18, $max_kbps$0)|0;
  $20 = (($19|0) / ($12|0))&-1;
  $21 = $20 << 3;
  $maxmp3buf$0 = $21;
  STACKTOP = sp;return ($maxmp3buf$0|0);
 } else if ((($constraint|0) == 2)) {
  $22 = ($14*7680)|0;
  $23 = (($22) + 7680)|0;
  $maxmp3buf$0 = $23;
  STACKTOP = sp;return ($maxmp3buf$0|0);
 } else {
  $maxmp3buf$0 = 11520;
  STACKTOP = sp;return ($maxmp3buf$0|0);
 }
 return 0|0;
}
function _CRC_writeheader($gfc,$header) {
 $gfc = $gfc|0;
 $header = $header|0;
 var $$$1$i = 0, $$$1$i10 = 0, $$$1$i2 = 0, $$$2$i = 0, $$$2$i11 = 0, $$$2$i3 = 0, $$$3$i = 0, $$$3$i12 = 0, $$$3$i4 = 0, $$$4$i = 0, $$$4$i13 = 0, $$$4$i5 = 0, $$$5$i = 0, $$$5$i14 = 0, $$$5$i6 = 0, $$$6$i = 0, $$$6$i15 = 0, $$$6$i7 = 0, $$$7$i = 0, $$$7$i16 = 0;
 var $$$7$i8 = 0, $$$i = 0, $$$i1 = 0, $$$i9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $crc$0$lcssa = 0, $crc$017 = 0, $i$018 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($header) + 2|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = $2 & 128;
 $4 = ($3|0)!=(0);
 $$$i = $4 ? 262140 : 196598;
 $5 = $2 << 10;
 $6 = $$$i ^ $5;
 $7 = $6 & 65536;
 $8 = ($7|0)==(0);
 $9 = $$$i ^ 32773;
 $$$1$i = $8 ? $$$i : $9;
 $10 = $2 << 11;
 $11 = $$$1$i << 1;
 $12 = $11 ^ $10;
 $13 = $12 & 65536;
 $14 = ($13|0)==(0);
 $15 = $11 ^ 32773;
 $$$2$i = $14 ? $11 : $15;
 $16 = $2 << 12;
 $17 = $$$2$i << 1;
 $18 = $17 ^ $16;
 $19 = $18 & 65536;
 $20 = ($19|0)==(0);
 $21 = $17 ^ 32773;
 $$$3$i = $20 ? $17 : $21;
 $22 = $2 << 13;
 $23 = $$$3$i << 1;
 $24 = $23 ^ $22;
 $25 = $24 & 65536;
 $26 = ($25|0)==(0);
 $27 = $23 ^ 32773;
 $$$4$i = $26 ? $23 : $27;
 $28 = $2 << 14;
 $29 = $$$4$i << 1;
 $30 = $29 ^ $28;
 $31 = $30 & 65536;
 $32 = ($31|0)==(0);
 $33 = $29 ^ 32773;
 $$$5$i = $32 ? $29 : $33;
 $34 = $2 << 15;
 $35 = $$$5$i << 1;
 $36 = $35 ^ $34;
 $37 = $36 & 65536;
 $38 = ($37|0)==(0);
 $39 = $35 ^ 32773;
 $$$6$i = $38 ? $35 : $39;
 $40 = $2 << 16;
 $41 = $$$6$i << 1;
 $42 = $41 ^ $40;
 $43 = $42 & 65536;
 $44 = ($43|0)==(0);
 $45 = $41 ^ 32773;
 $$$7$i = $44 ? $41 : $45;
 $46 = (($header) + 3|0);
 $47 = HEAP8[$46>>0]|0;
 $48 = $47&255;
 $49 = $48 << 9;
 $50 = $$$7$i << 1;
 $51 = $50 ^ $49;
 $52 = $51 & 65536;
 $53 = ($52|0)==(0);
 $54 = $50 ^ 32773;
 $$$i9 = $53 ? $50 : $54;
 $55 = $48 << 10;
 $56 = $$$i9 << 1;
 $57 = $56 ^ $55;
 $58 = $57 & 65536;
 $59 = ($58|0)==(0);
 $60 = $56 ^ 32773;
 $$$1$i10 = $59 ? $56 : $60;
 $61 = $48 << 11;
 $62 = $$$1$i10 << 1;
 $63 = $62 ^ $61;
 $64 = $63 & 65536;
 $65 = ($64|0)==(0);
 $66 = $62 ^ 32773;
 $$$2$i11 = $65 ? $62 : $66;
 $67 = $48 << 12;
 $68 = $$$2$i11 << 1;
 $69 = $68 ^ $67;
 $70 = $69 & 65536;
 $71 = ($70|0)==(0);
 $72 = $68 ^ 32773;
 $$$3$i12 = $71 ? $68 : $72;
 $73 = $48 << 13;
 $74 = $$$3$i12 << 1;
 $75 = $74 ^ $73;
 $76 = $75 & 65536;
 $77 = ($76|0)==(0);
 $78 = $74 ^ 32773;
 $$$4$i13 = $77 ? $74 : $78;
 $79 = $48 << 14;
 $80 = $$$4$i13 << 1;
 $81 = $80 ^ $79;
 $82 = $81 & 65536;
 $83 = ($82|0)==(0);
 $84 = $80 ^ 32773;
 $$$5$i14 = $83 ? $80 : $84;
 $85 = $48 << 15;
 $86 = $$$5$i14 << 1;
 $87 = $86 ^ $85;
 $88 = $87 & 65536;
 $89 = ($88|0)==(0);
 $90 = $86 ^ 32773;
 $$$6$i15 = $89 ? $86 : $90;
 $91 = $48 << 16;
 $92 = $$$6$i15 << 1;
 $93 = $92 ^ $91;
 $94 = $93 & 65536;
 $95 = ($94|0)==(0);
 $96 = $92 ^ 32773;
 $$$7$i16 = $95 ? $92 : $96;
 $97 = (($gfc) + 24|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = ($98|0)>(6);
 if ($99) {
  $crc$017 = $$$7$i16;$i$018 = 6;
 } else {
  $crc$0$lcssa = $$$7$i16;
  $153 = $crc$0$lcssa >>> 8;
  $154 = $153&255;
  $155 = (($header) + 4|0);
  HEAP8[$155>>0] = $154;
  $156 = $crc$0$lcssa&255;
  $157 = (($header) + 5|0);
  HEAP8[$157>>0] = $156;
  STACKTOP = sp;return;
 }
 while(1) {
  $100 = (($header) + ($i$018)|0);
  $101 = HEAP8[$100>>0]|0;
  $102 = $101&255;
  $103 = $102 << 9;
  $104 = $crc$017 << 1;
  $105 = $103 ^ $104;
  $106 = $105 & 65536;
  $107 = ($106|0)==(0);
  $108 = $104 ^ 32773;
  $$$i1 = $107 ? $104 : $108;
  $109 = $102 << 10;
  $110 = $$$i1 << 1;
  $111 = $110 ^ $109;
  $112 = $111 & 65536;
  $113 = ($112|0)==(0);
  $114 = $110 ^ 32773;
  $$$1$i2 = $113 ? $110 : $114;
  $115 = $102 << 11;
  $116 = $$$1$i2 << 1;
  $117 = $116 ^ $115;
  $118 = $117 & 65536;
  $119 = ($118|0)==(0);
  $120 = $116 ^ 32773;
  $$$2$i3 = $119 ? $116 : $120;
  $121 = $102 << 12;
  $122 = $$$2$i3 << 1;
  $123 = $122 ^ $121;
  $124 = $123 & 65536;
  $125 = ($124|0)==(0);
  $126 = $122 ^ 32773;
  $$$3$i4 = $125 ? $122 : $126;
  $127 = $102 << 13;
  $128 = $$$3$i4 << 1;
  $129 = $128 ^ $127;
  $130 = $129 & 65536;
  $131 = ($130|0)==(0);
  $132 = $128 ^ 32773;
  $$$4$i5 = $131 ? $128 : $132;
  $133 = $102 << 14;
  $134 = $$$4$i5 << 1;
  $135 = $134 ^ $133;
  $136 = $135 & 65536;
  $137 = ($136|0)==(0);
  $138 = $134 ^ 32773;
  $$$5$i6 = $137 ? $134 : $138;
  $139 = $102 << 15;
  $140 = $$$5$i6 << 1;
  $141 = $140 ^ $139;
  $142 = $141 & 65536;
  $143 = ($142|0)==(0);
  $144 = $140 ^ 32773;
  $$$6$i7 = $143 ? $140 : $144;
  $145 = $102 << 16;
  $146 = $$$6$i7 << 1;
  $147 = $146 ^ $145;
  $148 = $147 & 65536;
  $149 = ($148|0)==(0);
  $150 = $146 ^ 32773;
  $$$7$i8 = $149 ? $146 : $150;
  $151 = (($i$018) + 1)|0;
  $152 = ($151|0)<($98|0);
  if ($152) {
   $crc$017 = $$$7$i8;$i$018 = $151;
  } else {
   $crc$0$lcssa = $$$7$i8;
   break;
  }
 }
 $153 = $crc$0$lcssa >>> 8;
 $154 = $153&255;
 $155 = (($header) + 4|0);
 HEAP8[$155>>0] = $154;
 $156 = $crc$0$lcssa&255;
 $157 = (($header) + 5|0);
 HEAP8[$157>>0] = $156;
 STACKTOP = sp;return;
}
function _compute_flushbits($gfc,$total_bytes_output) {
 $gfc = $gfc|0;
 $total_bytes_output = $total_bytes_output|0;
 var $$ = 0, $$1 = 0, $$idx$val$i = 0, $$idx$val$pre$i = 0, $$idx1$i = 0, $$idx1$val$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bit_rate$0$i = 0, $bit_rate$0$in$i = 0, $flushbits$0 = 0, $not$ = 0, $storemerge = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = (($gfc) + 52132|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($gfc) + 52128|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + -1)|0;
 $5 = ($3|0)==(0);
 $$ = $5 ? 255 : $4;
 $6 = ((($gfc) + (($$*48)|0)|0) + 39840|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($gfc) + 292|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) - ($9))|0;
 HEAP32[$total_bytes_output>>2] = $10;
 $11 = ($10|0)>(-1);
 if ($11) {
  $12 = (1 - ($1))|0;
  $13 = (($12) + ($$))|0;
  $14 = ($$|0)<($1|0);
  $15 = (($13) + 256)|0;
  $$1 = $14 ? $15 : $13;
  $16 = $$1 << 3;
  $17 = (($gfc) + 24|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = Math_imul($16, $18)|0;
  $20 = (($10) - ($19))|0;
  $flushbits$0 = $20;
 } else {
  $flushbits$0 = $10;
 }
 $21 = (($gfc) + 16|0);
 $22 = (($gfc) + 84744|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(0);
 if ($24) {
  $27 = (($gfc) + 120|0);
  $$idx$val$pre$i = HEAP32[$21>>2]|0;
  $$idx$val$i = $$idx$val$pre$i;$bit_rate$0$in$i = $27;
 } else {
  $25 = HEAP32[$21>>2]|0;
  $26 = ((141224 + ($25<<6)|0) + ($23<<2)|0);
  $$idx$val$i = $25;$bit_rate$0$in$i = $26;
 }
 $bit_rate$0$i = HEAP32[$bit_rate$0$in$i>>2]|0;
 $28 = (($gfc) + 84752|0);
 $29 = HEAP32[$28>>2]|0;
 $$idx1$i = (($gfc) + 64|0);
 $$idx1$val$i = HEAP32[$$idx1$i>>2]|0;
 $30 = ($$idx$val$i*72000)|0;
 $31 = (($30) + 72000)|0;
 $32 = Math_imul($31, $bit_rate$0$i)|0;
 $33 = (($32|0) / ($$idx1$val$i|0))&-1;
 $34 = (($33) + ($29))|0;
 $35 = $34 << 3;
 $36 = (($35) + ($flushbits$0))|0;
 $37 = (($35) + ($10))|0;
 $38 = $37 & 7;
 $39 = (($37|0) / 8)&-1;
 $not$ = ($38|0)!=(0);
 $40 = $not$&1;
 $storemerge = (($40) + ($39))|0;
 HEAP32[$total_bytes_output>>2] = $storemerge;
 $41 = (($gfc) + 296|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (($42) + 1)|0;
 $44 = (($43) + ($storemerge))|0;
 HEAP32[$total_bytes_output>>2] = $44;
 $45 = ($36|0)<(0);
 if (!($45)) {
  STACKTOP = sp;return ($36|0);
 }
 _lame_errorf($gfc,8,$vararg_buffer);
 STACKTOP = sp;return ($36|0);
}
function _flush_bitstream($gfc) {
 $gfc = $gfc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $nbytes = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $nbytes = sp;
 $0 = (_compute_flushbits($gfc,$nbytes)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  STACKTOP = sp;return;
 }
 _drain_into_ancillary($gfc,$0);
 $2 = (($gfc) + 52140|0);
 HEAP32[$2>>2] = 0;
 $3 = (($gfc) + 21312|0);
 HEAP32[$3>>2] = 0;
 STACKTOP = sp;return;
}
function _drain_into_ancillary($gfc,$remainingBits) {
 $gfc = $gfc|0;
 $remainingBits = $remainingBits|0;
 var $$0$$i = 0, $$0$$i11 = 0, $$0$$i15 = 0, $$0$$i19 = 0, $$0$$i3 = 0, $$0$$i7 = 0, $$01$i = 0, $$01$i1 = 0, $$01$i13 = 0, $$01$i17 = 0, $$01$i5 = 0, $$01$i9 = 0, $$428 = 0, $$5$ph = 0, $$5$ph30 = 0, $$525 = 0, $$pre = 0, $$pre$i = 0, $$pre$i10 = 0, $$pre$i14 = 0;
 var $$pre$i18 = 0, $$pre$i2 = 0, $$pre$i6 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$027 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($remainingBits|0)>(7);
 if ($0) {
  $10 = (($gfc) + 300|0);
  $11 = (($gfc) + 296|0);
  $12 = (($gfc) + 52132|0);
  $13 = (($gfc) + 292|0);
  $14 = (($gfc) + 284|0);
  $15 = (($gfc) + 24|0);
  $$01$i = 8;
  while(1) {
   $16 = HEAP32[$10>>2]|0;
   $17 = ($16|0)==(0);
   if ($17) {
    HEAP32[$10>>2] = 8;
    $18 = HEAP32[$11>>2]|0;
    $19 = (($18) + 1)|0;
    HEAP32[$11>>2] = $19;
    $20 = HEAP32[$12>>2]|0;
    $21 = ((($gfc) + (($20*48)|0)|0) + 39840|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = HEAP32[$13>>2]|0;
    $24 = ($22|0)==($23|0);
    if ($24) {
     $25 = HEAP32[$14>>2]|0;
     $26 = (($25) + ($19)|0);
     $27 = ((($gfc) + (($20*48)|0)|0) + 39848|0);
     $28 = HEAP32[$15>>2]|0;
     _memcpy(($26|0),($27|0),($28|0))|0;
     $29 = HEAP32[$15>>2]|0;
     $30 = HEAP32[$11>>2]|0;
     $31 = (($30) + ($29))|0;
     HEAP32[$11>>2] = $31;
     $32 = $29 << 3;
     $33 = HEAP32[$13>>2]|0;
     $34 = (($33) + ($32))|0;
     HEAP32[$13>>2] = $34;
     $35 = HEAP32[$12>>2]|0;
     $36 = (($35) + 1)|0;
     $37 = $36 & 255;
     HEAP32[$12>>2] = $37;
     $40 = $31;
    } else {
     $40 = $19;
    }
    $38 = HEAP32[$14>>2]|0;
    $39 = (($38) + ($40)|0);
    HEAP8[$39>>0] = 0;
    $$pre$i = HEAP32[$10>>2]|0;
    $42 = $$pre$i;
   } else {
    $42 = $16;
   }
   $41 = ($$01$i|0)<($42|0);
   $$0$$i = $41 ? $$01$i : $42;
   $43 = (($$01$i) - ($$0$$i))|0;
   $44 = (($42) - ($$0$$i))|0;
   HEAP32[$10>>2] = $44;
   $45 = 76 >>> $43;
   $46 = $45 << $44;
   $47 = HEAP32[$11>>2]|0;
   $48 = HEAP32[$14>>2]|0;
   $49 = (($48) + ($47)|0);
   $50 = HEAP8[$49>>0]|0;
   $51 = $50&255;
   $52 = $46 | $51;
   $53 = $52&255;
   HEAP8[$49>>0] = $53;
   $54 = HEAP32[$13>>2]|0;
   $55 = (($54) + ($$0$$i))|0;
   HEAP32[$13>>2] = $55;
   $56 = ($43|0)>(0);
   if ($56) {
    $$01$i = $43;
   } else {
    break;
   }
  }
  $57 = (($remainingBits) + -8)|0;
  $58 = ($57|0)>(7);
  if ($58) {
   $$01$i17 = 8;$67 = $55;
   while(1) {
    $59 = HEAP32[$10>>2]|0;
    $60 = ($59|0)==(0);
    if ($60) {
     HEAP32[$10>>2] = 8;
     $61 = HEAP32[$11>>2]|0;
     $62 = (($61) + 1)|0;
     HEAP32[$11>>2] = $62;
     $63 = HEAP32[$12>>2]|0;
     $64 = ((($gfc) + (($63*48)|0)|0) + 39840|0);
     $65 = HEAP32[$64>>2]|0;
     $66 = ($65|0)==($67|0);
     if ($66) {
      $68 = HEAP32[$14>>2]|0;
      $69 = (($68) + ($62)|0);
      $70 = ((($gfc) + (($63*48)|0)|0) + 39848|0);
      $71 = HEAP32[$15>>2]|0;
      _memcpy(($69|0),($70|0),($71|0))|0;
      $72 = HEAP32[$15>>2]|0;
      $73 = HEAP32[$11>>2]|0;
      $74 = (($73) + ($72))|0;
      HEAP32[$11>>2] = $74;
      $75 = $72 << 3;
      $76 = HEAP32[$13>>2]|0;
      $77 = (($76) + ($75))|0;
      HEAP32[$13>>2] = $77;
      $78 = HEAP32[$12>>2]|0;
      $79 = (($78) + 1)|0;
      $80 = $79 & 255;
      HEAP32[$12>>2] = $80;
      $83 = $74;
     } else {
      $83 = $62;
     }
     $81 = HEAP32[$14>>2]|0;
     $82 = (($81) + ($83)|0);
     HEAP8[$82>>0] = 0;
     $$pre$i18 = HEAP32[$10>>2]|0;
     $85 = $$pre$i18;
    } else {
     $85 = $59;
    }
    $84 = ($$01$i17|0)<($85|0);
    $$0$$i19 = $84 ? $$01$i17 : $85;
    $86 = (($$01$i17) - ($$0$$i19))|0;
    $87 = (($85) - ($$0$$i19))|0;
    HEAP32[$10>>2] = $87;
    $88 = 65 >>> $86;
    $89 = $88 << $87;
    $90 = HEAP32[$11>>2]|0;
    $91 = HEAP32[$14>>2]|0;
    $92 = (($91) + ($90)|0);
    $93 = HEAP8[$92>>0]|0;
    $94 = $93&255;
    $95 = $89 | $94;
    $96 = $95&255;
    HEAP8[$92>>0] = $96;
    $97 = HEAP32[$13>>2]|0;
    $98 = (($97) + ($$0$$i19))|0;
    HEAP32[$13>>2] = $98;
    $99 = ($86|0)>(0);
    if ($99) {
     $$01$i17 = $86;$67 = $98;
    } else {
     break;
    }
   }
   $100 = (($remainingBits) + -16)|0;
   $101 = ($100|0)>(7);
   if ($101) {
    $$01$i13 = 8;$110 = $98;
    while(1) {
     $102 = HEAP32[$10>>2]|0;
     $103 = ($102|0)==(0);
     if ($103) {
      HEAP32[$10>>2] = 8;
      $104 = HEAP32[$11>>2]|0;
      $105 = (($104) + 1)|0;
      HEAP32[$11>>2] = $105;
      $106 = HEAP32[$12>>2]|0;
      $107 = ((($gfc) + (($106*48)|0)|0) + 39840|0);
      $108 = HEAP32[$107>>2]|0;
      $109 = ($108|0)==($110|0);
      if ($109) {
       $111 = HEAP32[$14>>2]|0;
       $112 = (($111) + ($105)|0);
       $113 = ((($gfc) + (($106*48)|0)|0) + 39848|0);
       $114 = HEAP32[$15>>2]|0;
       _memcpy(($112|0),($113|0),($114|0))|0;
       $115 = HEAP32[$15>>2]|0;
       $116 = HEAP32[$11>>2]|0;
       $117 = (($116) + ($115))|0;
       HEAP32[$11>>2] = $117;
       $118 = $115 << 3;
       $119 = HEAP32[$13>>2]|0;
       $120 = (($119) + ($118))|0;
       HEAP32[$13>>2] = $120;
       $121 = HEAP32[$12>>2]|0;
       $122 = (($121) + 1)|0;
       $123 = $122 & 255;
       HEAP32[$12>>2] = $123;
       $126 = $117;
      } else {
       $126 = $105;
      }
      $124 = HEAP32[$14>>2]|0;
      $125 = (($124) + ($126)|0);
      HEAP8[$125>>0] = 0;
      $$pre$i14 = HEAP32[$10>>2]|0;
      $128 = $$pre$i14;
     } else {
      $128 = $102;
     }
     $127 = ($$01$i13|0)<($128|0);
     $$0$$i15 = $127 ? $$01$i13 : $128;
     $129 = (($$01$i13) - ($$0$$i15))|0;
     $130 = (($128) - ($$0$$i15))|0;
     HEAP32[$10>>2] = $130;
     $131 = 77 >>> $129;
     $132 = $131 << $130;
     $133 = HEAP32[$11>>2]|0;
     $134 = HEAP32[$14>>2]|0;
     $135 = (($134) + ($133)|0);
     $136 = HEAP8[$135>>0]|0;
     $137 = $136&255;
     $138 = $132 | $137;
     $139 = $138&255;
     HEAP8[$135>>0] = $139;
     $140 = HEAP32[$13>>2]|0;
     $141 = (($140) + ($$0$$i15))|0;
     HEAP32[$13>>2] = $141;
     $142 = ($129|0)>(0);
     if ($142) {
      $$01$i13 = $129;$110 = $141;
     } else {
      break;
     }
    }
    $143 = (($remainingBits) + -24)|0;
    $144 = ($143|0)>(7);
    if ($144) {
     $$01$i9 = 8;$153 = $141;
     while(1) {
      $145 = HEAP32[$10>>2]|0;
      $146 = ($145|0)==(0);
      if ($146) {
       HEAP32[$10>>2] = 8;
       $147 = HEAP32[$11>>2]|0;
       $148 = (($147) + 1)|0;
       HEAP32[$11>>2] = $148;
       $149 = HEAP32[$12>>2]|0;
       $150 = ((($gfc) + (($149*48)|0)|0) + 39840|0);
       $151 = HEAP32[$150>>2]|0;
       $152 = ($151|0)==($153|0);
       if ($152) {
        $154 = HEAP32[$14>>2]|0;
        $155 = (($154) + ($148)|0);
        $156 = ((($gfc) + (($149*48)|0)|0) + 39848|0);
        $157 = HEAP32[$15>>2]|0;
        _memcpy(($155|0),($156|0),($157|0))|0;
        $158 = HEAP32[$15>>2]|0;
        $159 = HEAP32[$11>>2]|0;
        $160 = (($159) + ($158))|0;
        HEAP32[$11>>2] = $160;
        $161 = $158 << 3;
        $162 = HEAP32[$13>>2]|0;
        $163 = (($162) + ($161))|0;
        HEAP32[$13>>2] = $163;
        $164 = HEAP32[$12>>2]|0;
        $165 = (($164) + 1)|0;
        $166 = $165 & 255;
        HEAP32[$12>>2] = $166;
        $169 = $160;
       } else {
        $169 = $148;
       }
       $167 = HEAP32[$14>>2]|0;
       $168 = (($167) + ($169)|0);
       HEAP8[$168>>0] = 0;
       $$pre$i10 = HEAP32[$10>>2]|0;
       $171 = $$pre$i10;
      } else {
       $171 = $145;
      }
      $170 = ($$01$i9|0)<($171|0);
      $$0$$i11 = $170 ? $$01$i9 : $171;
      $172 = (($$01$i9) - ($$0$$i11))|0;
      $173 = (($171) - ($$0$$i11))|0;
      HEAP32[$10>>2] = $173;
      $174 = 69 >>> $172;
      $175 = $174 << $173;
      $176 = HEAP32[$11>>2]|0;
      $177 = HEAP32[$14>>2]|0;
      $178 = (($177) + ($176)|0);
      $179 = HEAP8[$178>>0]|0;
      $180 = $179&255;
      $181 = $175 | $180;
      $182 = $181&255;
      HEAP8[$178>>0] = $182;
      $183 = HEAP32[$13>>2]|0;
      $184 = (($183) + ($$0$$i11))|0;
      HEAP32[$13>>2] = $184;
      $185 = ($172|0)>(0);
      if ($185) {
       $$01$i9 = $172;$153 = $184;
      } else {
       break;
      }
     }
     $186 = (($remainingBits) + -32)|0;
     $187 = ($186|0)>(31);
     if ($187) {
      $188 = (_get_lame_short_version()|0);
      $189 = (_strlen(($188|0))|0);
      $190 = ($189|0)>(0);
      if ($190) {
       $$428 = $186;$i$027 = 0;
       while(1) {
        $191 = (($188) + ($i$027)|0);
        $192 = HEAP8[$191>>0]|0;
        $193 = $192 << 24 >> 24;
        $$01$i5 = 8;
        while(1) {
         $194 = HEAP32[$10>>2]|0;
         $195 = ($194|0)==(0);
         if ($195) {
          HEAP32[$10>>2] = 8;
          $196 = HEAP32[$11>>2]|0;
          $197 = (($196) + 1)|0;
          HEAP32[$11>>2] = $197;
          $198 = HEAP32[$12>>2]|0;
          $199 = ((($gfc) + (($198*48)|0)|0) + 39840|0);
          $200 = HEAP32[$199>>2]|0;
          $201 = HEAP32[$13>>2]|0;
          $202 = ($200|0)==($201|0);
          if ($202) {
           $203 = HEAP32[$14>>2]|0;
           $204 = (($203) + ($197)|0);
           $205 = ((($gfc) + (($198*48)|0)|0) + 39848|0);
           $206 = HEAP32[$15>>2]|0;
           _memcpy(($204|0),($205|0),($206|0))|0;
           $207 = HEAP32[$15>>2]|0;
           $208 = HEAP32[$11>>2]|0;
           $209 = (($208) + ($207))|0;
           HEAP32[$11>>2] = $209;
           $210 = $207 << 3;
           $211 = HEAP32[$13>>2]|0;
           $212 = (($211) + ($210))|0;
           HEAP32[$13>>2] = $212;
           $213 = HEAP32[$12>>2]|0;
           $214 = (($213) + 1)|0;
           $215 = $214 & 255;
           HEAP32[$12>>2] = $215;
           $218 = $209;
          } else {
           $218 = $197;
          }
          $216 = HEAP32[$14>>2]|0;
          $217 = (($216) + ($218)|0);
          HEAP8[$217>>0] = 0;
          $$pre$i6 = HEAP32[$10>>2]|0;
          $220 = $$pre$i6;
         } else {
          $220 = $194;
         }
         $219 = ($$01$i5|0)<($220|0);
         $$0$$i7 = $219 ? $$01$i5 : $220;
         $221 = (($$01$i5) - ($$0$$i7))|0;
         $222 = (($220) - ($$0$$i7))|0;
         HEAP32[$10>>2] = $222;
         $223 = $193 >> $221;
         $224 = $223 << $222;
         $225 = HEAP32[$11>>2]|0;
         $226 = HEAP32[$14>>2]|0;
         $227 = (($226) + ($225)|0);
         $228 = HEAP8[$227>>0]|0;
         $229 = $228&255;
         $230 = $224 | $229;
         $231 = $230&255;
         HEAP8[$227>>0] = $231;
         $232 = HEAP32[$13>>2]|0;
         $233 = (($232) + ($$0$$i7))|0;
         HEAP32[$13>>2] = $233;
         $234 = ($221|0)>(0);
         if ($234) {
          $$01$i5 = $221;
         } else {
          break;
         }
        }
        $235 = (($$428) + -8)|0;
        $236 = (($i$027) + 1)|0;
        $237 = (_strlen(($188|0))|0);
        $238 = ($236|0)<($237|0);
        $239 = ($235|0)>(7);
        $or$cond = $238 & $239;
        if ($or$cond) {
         $$428 = $235;$i$027 = $236;
        } else {
         $$5$ph = $235;
         label = 2;
         break;
        }
       }
      } else {
       $$5$ph30 = $186;
      }
     } else {
      $$5$ph = $186;
      label = 2;
     }
    } else {
     $$5$ph = $143;
     label = 2;
    }
   } else {
    $$5$ph = $100;
    label = 2;
   }
  } else {
   $$5$ph = $57;
   label = 2;
  }
 } else {
  $$5$ph = $remainingBits;
  label = 2;
 }
 if ((label|0) == 2) {
  $1 = ($$5$ph|0)>(0);
  if ($1) {
   $$5$ph30 = $$5$ph;
  } else {
   STACKTOP = sp;return;
  }
 }
 $2 = (($gfc) + 52136|0);
 $3 = (($gfc) + 300|0);
 $4 = (($gfc) + 296|0);
 $5 = (($gfc) + 52132|0);
 $6 = (($gfc) + 292|0);
 $7 = (($gfc) + 284|0);
 $8 = (($gfc) + 24|0);
 $9 = (($gfc) + 144|0);
 $$pre = HEAP32[$2>>2]|0;
 $$525 = $$5$ph30;$270 = $$pre;
 while(1) {
  $$01$i1 = 1;
  while(1) {
   $240 = HEAP32[$3>>2]|0;
   $241 = ($240|0)==(0);
   if ($241) {
    HEAP32[$3>>2] = 8;
    $242 = HEAP32[$4>>2]|0;
    $243 = (($242) + 1)|0;
    HEAP32[$4>>2] = $243;
    $244 = HEAP32[$5>>2]|0;
    $245 = ((($gfc) + (($244*48)|0)|0) + 39840|0);
    $246 = HEAP32[$245>>2]|0;
    $247 = HEAP32[$6>>2]|0;
    $248 = ($246|0)==($247|0);
    if ($248) {
     $249 = HEAP32[$7>>2]|0;
     $250 = (($249) + ($243)|0);
     $251 = ((($gfc) + (($244*48)|0)|0) + 39848|0);
     $252 = HEAP32[$8>>2]|0;
     _memcpy(($250|0),($251|0),($252|0))|0;
     $253 = HEAP32[$8>>2]|0;
     $254 = HEAP32[$4>>2]|0;
     $255 = (($254) + ($253))|0;
     HEAP32[$4>>2] = $255;
     $256 = $253 << 3;
     $257 = HEAP32[$6>>2]|0;
     $258 = (($257) + ($256))|0;
     HEAP32[$6>>2] = $258;
     $259 = HEAP32[$5>>2]|0;
     $260 = (($259) + 1)|0;
     $261 = $260 & 255;
     HEAP32[$5>>2] = $261;
     $264 = $255;
    } else {
     $264 = $243;
    }
    $262 = HEAP32[$7>>2]|0;
    $263 = (($262) + ($264)|0);
    HEAP8[$263>>0] = 0;
    $$pre$i2 = HEAP32[$3>>2]|0;
    $266 = $$pre$i2;
   } else {
    $266 = $240;
   }
   $265 = ($$01$i1|0)<($266|0);
   $$0$$i3 = $265 ? $$01$i1 : $266;
   $267 = (($$01$i1) - ($$0$$i3))|0;
   $268 = (($266) - ($$0$$i3))|0;
   HEAP32[$3>>2] = $268;
   $269 = $270 >> $267;
   $271 = $269 << $268;
   $272 = HEAP32[$4>>2]|0;
   $273 = HEAP32[$7>>2]|0;
   $274 = (($273) + ($272)|0);
   $275 = HEAP8[$274>>0]|0;
   $276 = $275&255;
   $277 = $271 | $276;
   $278 = $277&255;
   HEAP8[$274>>0] = $278;
   $279 = HEAP32[$6>>2]|0;
   $280 = (($279) + ($$0$$i3))|0;
   HEAP32[$6>>2] = $280;
   $281 = ($267|0)>(0);
   if ($281) {
    $$01$i1 = $267;
   } else {
    break;
   }
  }
  $282 = HEAP32[$9>>2]|0;
  $283 = ($282|0)==(0);
  $284 = $283&1;
  $285 = HEAP32[$2>>2]|0;
  $286 = $284 ^ $285;
  HEAP32[$2>>2] = $286;
  $287 = (($$525) + -1)|0;
  $288 = ($287|0)>(0);
  if ($288) {
   $$525 = $287;$270 = $286;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _add_dummy_byte($gfc,$val,$n) {
 $gfc = $gfc|0;
 $val = $val|0;
 $n = $n|0;
 var $$0$$i = 0, $$01$i = 0, $$in = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = $val&255;
 $2 = (($gfc) + 300|0);
 $3 = (($gfc) + 296|0);
 $4 = (($gfc) + 284|0);
 $5 = (($gfc) + 292|0);
 $$in = $n;
 while(1) {
  $$01$i = 8;
  while(1) {
   $8 = HEAP32[$2>>2]|0;
   $9 = ($8|0)==(0);
   if ($9) {
    HEAP32[$2>>2] = 8;
    $10 = HEAP32[$3>>2]|0;
    $11 = (($10) + 1)|0;
    HEAP32[$3>>2] = $11;
    $12 = HEAP32[$4>>2]|0;
    $13 = (($12) + ($11)|0);
    HEAP8[$13>>0] = 0;
    $$pre$i = HEAP32[$2>>2]|0;
    $15 = $$pre$i;
   } else {
    $15 = $8;
   }
   $14 = ($$01$i|0)<($15|0);
   $$0$$i = $14 ? $$01$i : $15;
   $16 = (($$01$i) - ($$0$$i))|0;
   $17 = (($15) - ($$0$$i))|0;
   HEAP32[$2>>2] = $17;
   $18 = $1 >>> $16;
   $19 = $18 << $17;
   $20 = HEAP32[$3>>2]|0;
   $21 = HEAP32[$4>>2]|0;
   $22 = (($21) + ($20)|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $23&255;
   $25 = $19 | $24;
   $26 = $25&255;
   HEAP8[$22>>0] = $26;
   $27 = HEAP32[$5>>2]|0;
   $28 = (($27) + ($$0$$i))|0;
   HEAP32[$5>>2] = $28;
   $29 = ($16|0)>(0);
   if ($29) {
    $$01$i = $16;
   } else {
    $i$01 = 0;
    break;
   }
  }
  while(1) {
   $30 = ((($gfc) + (($i$01*48)|0)|0) + 39840|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (($31) + 8)|0;
   HEAP32[$30>>2] = $32;
   $33 = (($i$01) + 1)|0;
   $exitcond = ($33|0)==(256);
   if ($exitcond) {
    break;
   } else {
    $i$01 = $33;
   }
  }
  $6 = (($$in) + -1)|0;
  $7 = ($6|0)==(0);
  if ($7) {
   break;
  } else {
   $$in = $6;
  }
 }
 STACKTOP = sp;return;
}
function _format_bitstream($gfc) {
 $gfc = $gfc|0;
 var $$$i = 0, $$$i$i = 0, $$$i26$i = 0, $$$i8$i = 0, $$$i9$i = 0, $$0$$i$i = 0, $$0$$i$us$i = 0, $$0$$i105$i = 0, $$0$$i111$i = 0, $$0$$i117$i = 0, $$0$$i123$i = 0, $$0$$i129$i = 0, $$0$$i135$i = 0, $$0$$i14$i = 0, $$0$$i142$i = 0, $$0$$i149$i = 0, $$0$$i15$i = 0, $$0$$i156$i = 0, $$0$$i163$i = 0, $$0$$i170$i = 0;
 var $$0$$i177$i = 0, $$0$$i184$i = 0, $$0$$i19$i = 0, $$0$$i191$i = 0, $$0$$i198$i = 0, $$0$$i205$i = 0, $$0$$i21$i = 0, $$0$$i212$i = 0, $$0$$i219$i = 0, $$0$$i226$i = 0, $$0$$i233$i = 0, $$0$$i24$i = 0, $$0$$i240$i = 0, $$0$$i247$i = 0, $$0$$i254$i = 0, $$0$$i261$i = 0, $$0$$i268$i = 0, $$0$$i27$i = 0, $$0$$i275$i = 0, $$0$$i282$i = 0;
 var $$0$$i289$1$i = 0, $$0$$i289$2$i = 0, $$0$$i289$3$i = 0, $$0$$i289$i = 0, $$0$$i296$i = 0, $$0$$i3$i = 0, $$0$$i30$us$i = 0, $$0$$i303$i = 0, $$0$$i310$i = 0, $$0$$i317$i = 0, $$0$$i324$i = 0, $$0$$i33$i = 0, $$0$$i331$i = 0, $$0$$i338$i = 0, $$0$$i345$i = 0, $$0$$i352$i = 0, $$0$$i359$i = 0, $$0$$i366$i = 0, $$0$$i373$i = 0, $$0$$i380$i = 0;
 var $$0$$i387$i = 0, $$0$$i39$i = 0, $$0$$i394$i = 0, $$0$$i401$i = 0, $$0$$i45$i = 0, $$0$$i51$i = 0, $$0$$i57$i = 0, $$0$$i6$i = 0, $$0$$i63$i = 0, $$0$$i69$i = 0, $$0$$i75$i = 0, $$0$$i81$i = 0, $$0$$i87$i = 0, $$0$$i9$i = 0, $$0$$i93$i = 0, $$0$$i99$i = 0, $$01$i$us$i = 0, $$01$i12$i = 0, $$01$i17$i = 0, $$01$i22$i = 0;
 var $$01$i28$us$i = 0, $$01$i4$i = 0, $$02$i$i = 0, $$02$i1$i = 0, $$02$i103$i = 0, $$02$i109$i = 0, $$02$i115$i = 0, $$02$i121$i = 0, $$02$i127$i = 0, $$02$i13$i = 0, $$02$i133$i = 0, $$02$i140$i = 0, $$02$i147$i = 0, $$02$i154$i = 0, $$02$i161$i = 0, $$02$i168$i = 0, $$02$i175$i = 0, $$02$i182$i = 0, $$02$i189$i = 0, $$02$i19$i = 0;
 var $$02$i196$i = 0, $$02$i203$i = 0, $$02$i210$i = 0, $$02$i217$i = 0, $$02$i224$i = 0, $$02$i231$i = 0, $$02$i238$i = 0, $$02$i245$i = 0, $$02$i25$i = 0, $$02$i252$i = 0, $$02$i259$i = 0, $$02$i266$i = 0, $$02$i273$i = 0, $$02$i280$i = 0, $$02$i287$1$i = 0, $$02$i287$2$i = 0, $$02$i287$3$i = 0, $$02$i287$i = 0, $$02$i294$i = 0, $$02$i301$i = 0;
 var $$02$i308$i = 0, $$02$i31$i = 0, $$02$i315$i = 0, $$02$i322$i = 0, $$02$i329$i = 0, $$02$i336$i = 0, $$02$i343$i = 0, $$02$i350$i = 0, $$02$i357$i = 0, $$02$i364$i = 0, $$02$i37$i = 0, $$02$i371$i = 0, $$02$i378$i = 0, $$02$i385$i = 0, $$02$i392$i = 0, $$02$i399$i = 0, $$02$i43$i = 0, $$02$i49$i = 0, $$02$i55$i = 0, $$02$i61$i = 0;
 var $$02$i67$i = 0, $$02$i7$i = 0, $$02$i73$i = 0, $$02$i79$i = 0, $$02$i85$i = 0, $$02$i91$i = 0, $$02$i97$i = 0, $$1$i = 0, $$2$us$i = 0, $$idx$val$i = 0, $$idx$val$pre$i = 0, $$idx1$i = 0, $$idx1$val$i = 0, $$phi$trans$insert$i = 0, $$phi$trans$insert545$i = 0, $$phi$trans$insert548$i = 0, $$phi$trans$insert551$i = 0, $$phi$trans$insert556$i = 0, $$phi$trans$insert559$i = 0, $$phi$trans$insert564$i = 0;
 var $$phi$trans$insert567$i = 0, $$phi$trans$insert570$i = 0, $$phi$trans$insert575$i = 0, $$phi$trans$insert578$i = 0, $$pn$i = 0, $$pn102$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$us$i = 0, $$pre$i1 = 0, $$pre$i13$i = 0, $$pre$i18$i = 0, $$pre$i23$i = 0, $$pre$i29$us$i = 0, $$pre$i5$i = 0, $$pre4$i$i = 0, $$pre4$i10$i = 0, $$pre4$i100$i = 0, $$pre4$i106$i = 0, $$pre4$i112$i = 0;
 var $$pre4$i118$i = 0, $$pre4$i124$i = 0, $$pre4$i130$i = 0, $$pre4$i136$i = 0, $$pre4$i143$i = 0, $$pre4$i150$i = 0, $$pre4$i157$i = 0, $$pre4$i16$i = 0, $$pre4$i164$i = 0, $$pre4$i171$i = 0, $$pre4$i178$i = 0, $$pre4$i185$i = 0, $$pre4$i192$i = 0, $$pre4$i206$i = 0, $$pre4$i213$i = 0, $$pre4$i22$i = 0, $$pre4$i220$i = 0, $$pre4$i227$i = 0, $$pre4$i234$i = 0, $$pre4$i241$i = 0;
 var $$pre4$i248$i = 0, $$pre4$i255$i = 0, $$pre4$i262$i = 0, $$pre4$i269$i = 0, $$pre4$i276$i = 0, $$pre4$i28$i = 0, $$pre4$i283$i = 0, $$pre4$i290$1$i = 0, $$pre4$i290$2$i = 0, $$pre4$i290$3$i = 0, $$pre4$i290$i = 0, $$pre4$i297$i = 0, $$pre4$i304$i = 0, $$pre4$i311$i = 0, $$pre4$i325$i = 0, $$pre4$i332$i = 0, $$pre4$i339$i = 0, $$pre4$i34$i = 0, $$pre4$i346$i = 0, $$pre4$i353$i = 0;
 var $$pre4$i360$i = 0, $$pre4$i367$i = 0, $$pre4$i374$i = 0, $$pre4$i381$i = 0, $$pre4$i388$i = 0, $$pre4$i395$i = 0, $$pre4$i4$i = 0, $$pre4$i40$i = 0, $$pre4$i402$i = 0, $$pre4$i46$i = 0, $$pre4$i58$i = 0, $$pre4$i64$i = 0, $$pre4$i70$i = 0, $$pre4$i76$i = 0, $$pre4$i82$i = 0, $$pre4$i88$i = 0, $$pre4$i94$i = 0, $$pre543$i = 0, $$pre544$i = 0, $$pre546$i = 0;
 var $$pre547$i = 0, $$pre549$i = 0, $$pre550$i = 0, $$pre552$i = 0, $$pre555$i = 0, $$pre557$i = 0, $$pre558$i = 0, $$pre560$i = 0, $$pre561$i = 0, $$pre562$i = 0, $$pre563$i = 0, $$pre565$i = 0, $$pre566$i = 0, $$pre568$i = 0, $$pre569$i = 0, $$pre571$i = 0, $$pre574$i = 0, $$pre576$i = 0, $$pre577$i = 0, $$pre579$i = 0;
 var $$pre96$pre$i = 0, $$pre98$i = 0, $$pre98$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0;
 var $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0;
 var $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0;
 var $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0;
 var $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0;
 var $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0;
 var $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0;
 var $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0;
 var $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0;
 var $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0;
 var $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0;
 var $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0;
 var $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0;
 var $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0;
 var $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0;
 var $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0;
 var $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0;
 var $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0;
 var $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0;
 var $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0;
 var $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0;
 var $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0;
 var $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0;
 var $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0;
 var $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0;
 var $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0;
 var $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0;
 var $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0;
 var $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0;
 var $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0;
 var $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0;
 var $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0;
 var $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0;
 var $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0;
 var $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0;
 var $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0;
 var $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0;
 var $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0;
 var $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0;
 var $1698 = 0, $1699 = 0, $17 = 0, $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0;
 var $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0;
 var $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0;
 var $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0;
 var $177 = 0, $1770 = 0, $1771 = 0, $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0;
 var $1788 = 0, $1789 = 0, $179 = 0, $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
 var $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0;
 var $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0;
 var $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0;
 var $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0;
 var $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0;
 var $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0;
 var $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0;
 var $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0;
 var $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0;
 var $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0;
 var $bit_rate$0$i = 0, $bit_rate$0$in$i = 0, $ch$041$i = 0, $ch$0435$i = 0, $ch$1426$i = 0, $ch$179$i = 0, $ch$2460$i = 0, $data_bits$0$lcssa$i = 0, $data_bits$033$$i = 0, $data_bits$033$i = 0, $data_bits$033$us$i = 0, $data_bits$1$us$i = 0, $data_bits$2$lcssa$i = 0, $data_bits$236$i = 0, $data_bits$3$i = 0, $data_bits$4$i = 0, $data_bits$5$i = 0, $exitcond = 0, $exitcond$i = 0, $exitcond$i6 = 0;
 var $exitcond88 = 0, $exitcond90$i = 0, $exitcond91$i = 0, $exitcond94$i = 0, $gr$0429$i = 0, $gr$050$i = 0, $i$064$i = 0, $i$09 = 0, $i$152$us$i = 0, $nbytes = 0, $ptr$01$i$i = 0, $ptr$01$i104$i = 0, $ptr$01$i110$i = 0, $ptr$01$i116$i = 0, $ptr$01$i122$i = 0, $ptr$01$i128$i = 0, $ptr$01$i134$i = 0, $ptr$01$i14$i = 0, $ptr$01$i141$i = 0, $ptr$01$i148$i = 0;
 var $ptr$01$i155$i = 0, $ptr$01$i162$i = 0, $ptr$01$i169$i = 0, $ptr$01$i176$i = 0, $ptr$01$i183$i = 0, $ptr$01$i190$i = 0, $ptr$01$i197$i = 0, $ptr$01$i2$i = 0, $ptr$01$i20$i = 0, $ptr$01$i204$i = 0, $ptr$01$i211$i = 0, $ptr$01$i218$i = 0, $ptr$01$i225$i = 0, $ptr$01$i232$i = 0, $ptr$01$i239$i = 0, $ptr$01$i246$i = 0, $ptr$01$i253$i = 0, $ptr$01$i26$i = 0, $ptr$01$i260$i = 0, $ptr$01$i267$i = 0;
 var $ptr$01$i274$i = 0, $ptr$01$i281$i = 0, $ptr$01$i288$1$i = 0, $ptr$01$i288$2$i = 0, $ptr$01$i288$3$i = 0, $ptr$01$i288$i = 0, $ptr$01$i295$i = 0, $ptr$01$i302$i = 0, $ptr$01$i309$i = 0, $ptr$01$i316$i = 0, $ptr$01$i32$i = 0, $ptr$01$i323$i = 0, $ptr$01$i330$i = 0, $ptr$01$i337$i = 0, $ptr$01$i344$i = 0, $ptr$01$i351$i = 0, $ptr$01$i358$i = 0, $ptr$01$i365$i = 0, $ptr$01$i372$i = 0, $ptr$01$i379$i = 0;
 var $ptr$01$i38$i = 0, $ptr$01$i386$i = 0, $ptr$01$i393$i = 0, $ptr$01$i400$i = 0, $ptr$01$i44$i = 0, $ptr$01$i50$i = 0, $ptr$01$i56$i = 0, $ptr$01$i62$i = 0, $ptr$01$i68$i = 0, $ptr$01$i74$i = 0, $ptr$01$i8$i = 0, $ptr$01$i80$i = 0, $ptr$01$i86$i = 0, $ptr$01$i92$i = 0, $ptr$01$i98$i = 0, $region2Start$0$i$i = 0, $region2Start$0$i10$i = 0, $scale_bits$074$i = 0, $scale_bits$1$lcssa$i = 0, $scale_bits$262$i = 0;
 var $scale_bits$3$lcssa$i = 0, $scale_bits$4$i = 0, $sfb$0$lcssa$i = 0, $sfb$034$i = 0, $sfb$034$us$i = 0, $sfb$137$i = 0, $sfb$275$i = 0, $sfb$3$lcssa$i = 0, $sfb$366$i = 0, $sfb$463$i = 0, $sfb$5$lcssa$i = 0, $sfb$554$us$i = 0, $sfb_partition$073$i = 0, $sfb_partition$161$i = 0, $smax$i = 0, $split58$i = 0, $split59$i = 0, $tot_bits$049$i = 0, $tot_bits$1$lcssa$i = 0, $tot_bits$140$i = 0;
 var $tot_bits$278$i = 0, $tot_bits$3$i = 0, $vararg_buffer19 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer19 = sp;
 $nbytes = sp + 36|0;
 $0 = (($gfc) + 16|0);
 $1 = (($gfc) + 84744|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  $6 = (($gfc) + 120|0);
  $$idx$val$pre$i = HEAP32[$0>>2]|0;
  $$idx$val$i = $$idx$val$pre$i;$bit_rate$0$in$i = $6;
 } else {
  $4 = HEAP32[$0>>2]|0;
  $5 = ((141224 + ($4<<6)|0) + ($2<<2)|0);
  $$idx$val$i = $4;$bit_rate$0$in$i = $5;
 }
 $bit_rate$0$i = HEAP32[$bit_rate$0$in$i>>2]|0;
 $7 = (($gfc) + 84752|0);
 $8 = HEAP32[$7>>2]|0;
 $$idx1$i = (($gfc) + 64|0);
 $$idx1$val$i = HEAP32[$$idx1$i>>2]|0;
 $9 = ($$idx$val$i*72000)|0;
 $10 = (($9) + 72000)|0;
 $11 = Math_imul($10, $bit_rate$0$i)|0;
 $12 = (($11|0) / ($$idx1$val$i|0))&-1;
 $13 = (($12) + ($8))|0;
 $14 = $13 << 3;
 $15 = (($gfc) + 21320|0);
 $16 = HEAP32[$15>>2]|0;
 _drain_into_ancillary($gfc,$16);
 $17 = (($gfc) + 52128|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($gfc) + (($18*48)|0)|0) + 39844|0);
 HEAP32[$19>>2] = 0;
 $20 = ((($gfc) + (($18*48)|0)|0) + 39848|0);
 $21 = (($gfc) + 24|0);
 $22 = HEAP32[$21>>2]|0;
 _memset(($20|0),0,($22|0))|0;
 $23 = HEAP32[$$idx1$i>>2]|0;
 $24 = ($23|0)<(16000);
 $25 = HEAP32[$17>>2]|0;
 $26 = ((($gfc) + (($25*48)|0)|0) + 39844|0);
 $27 = HEAP32[$26>>2]|0;
 if ($24) {
  $$02$i$i = 12;$37 = $25;$ptr$01$i$i = $27;
  while(1) {
   $28 = $ptr$01$i$i & 7;
   $29 = (8 - ($28))|0;
   $30 = ($$02$i$i|0)<($29|0);
   $$0$$i$i = $30 ? $$02$i$i : $29;
   $31 = (($$02$i$i) - ($$0$$i$i))|0;
   $32 = 4094 >>> $31;
   $33 = (($29) - ($$0$$i$i))|0;
   $34 = $32 << $33;
   $35 = $ptr$01$i$i >> 3;
   $36 = (((($gfc) + (($37*48)|0)|0) + ($35)|0) + 39848|0);
   $38 = HEAP8[$36>>0]|0;
   $39 = $38&255;
   $40 = $34 | $39;
   $41 = $40&255;
   HEAP8[$36>>0] = $41;
   $42 = (($$0$$i$i) + ($ptr$01$i$i))|0;
   $43 = ($31|0)>(0);
   $$pre4$i$i = HEAP32[$17>>2]|0;
   if ($43) {
    $$02$i$i = $31;$37 = $$pre4$i$i;$ptr$01$i$i = $42;
   } else {
    break;
   }
  }
  $44 = ((($gfc) + (($$pre4$i$i*48)|0)|0) + 39844|0);
  HEAP32[$44>>2] = $42;
  $1758 = $42;$1759 = $$pre4$i$i;
 } else {
  $$02$i1$i = 12;$54 = $25;$ptr$01$i2$i = $27;
  while(1) {
   $45 = $ptr$01$i2$i & 7;
   $46 = (8 - ($45))|0;
   $47 = ($$02$i1$i|0)<($46|0);
   $$0$$i3$i = $47 ? $$02$i1$i : $46;
   $48 = (($$02$i1$i) - ($$0$$i3$i))|0;
   $49 = 4095 >>> $48;
   $50 = (($46) - ($$0$$i3$i))|0;
   $51 = $49 << $50;
   $52 = $ptr$01$i2$i >> 3;
   $53 = (((($gfc) + (($54*48)|0)|0) + ($52)|0) + 39848|0);
   $55 = HEAP8[$53>>0]|0;
   $56 = $55&255;
   $57 = $51 | $56;
   $58 = $57&255;
   HEAP8[$53>>0] = $58;
   $59 = (($$0$$i3$i) + ($ptr$01$i2$i))|0;
   $60 = ($48|0)>(0);
   $$pre4$i4$i = HEAP32[$17>>2]|0;
   if ($60) {
    $$02$i1$i = $48;$54 = $$pre4$i4$i;$ptr$01$i2$i = $59;
   } else {
    break;
   }
  }
  $61 = ((($gfc) + (($$pre4$i4$i*48)|0)|0) + 39844|0);
  HEAP32[$61>>2] = $59;
  $1758 = $59;$1759 = $$pre4$i4$i;
 }
 $62 = (($gfc) + 16|0);
 $63 = HEAP32[$62>>2]|0;
 $$02$i399$i = 1;$73 = $1759;$ptr$01$i400$i = $1758;
 while(1) {
  $64 = $ptr$01$i400$i & 7;
  $65 = (8 - ($64))|0;
  $66 = ($$02$i399$i|0)<($65|0);
  $$0$$i401$i = $66 ? $$02$i399$i : $65;
  $67 = (($$02$i399$i) - ($$0$$i401$i))|0;
  $68 = $63 >> $67;
  $69 = (($65) - ($$0$$i401$i))|0;
  $70 = $68 << $69;
  $71 = $ptr$01$i400$i >> 3;
  $72 = (((($gfc) + (($73*48)|0)|0) + ($71)|0) + 39848|0);
  $74 = HEAP8[$72>>0]|0;
  $75 = $74&255;
  $76 = $70 | $75;
  $77 = $76&255;
  HEAP8[$72>>0] = $77;
  $78 = (($$0$$i401$i) + ($ptr$01$i400$i))|0;
  $79 = ($67|0)>(0);
  $$pre4$i402$i = HEAP32[$17>>2]|0;
  if ($79) {
   $$02$i399$i = $67;$73 = $$pre4$i402$i;$ptr$01$i400$i = $78;
  } else {
   break;
  }
 }
 $80 = ((($gfc) + (($$pre4$i402$i*48)|0)|0) + 39844|0);
 HEAP32[$80>>2] = $78;
 $$02$i392$i = 2;$90 = $$pre4$i402$i;$ptr$01$i393$i = $78;
 while(1) {
  $81 = $ptr$01$i393$i & 7;
  $82 = (8 - ($81))|0;
  $83 = ($$02$i392$i|0)<($82|0);
  $$0$$i394$i = $83 ? $$02$i392$i : $82;
  $84 = (($$02$i392$i) - ($$0$$i394$i))|0;
  $85 = 1 >>> $84;
  $86 = (($82) - ($$0$$i394$i))|0;
  $87 = $85 << $86;
  $88 = $ptr$01$i393$i >> 3;
  $89 = (((($gfc) + (($90*48)|0)|0) + ($88)|0) + 39848|0);
  $91 = HEAP8[$89>>0]|0;
  $92 = $91&255;
  $93 = $87 | $92;
  $94 = $93&255;
  HEAP8[$89>>0] = $94;
  $95 = (($$0$$i394$i) + ($ptr$01$i393$i))|0;
  $96 = ($84|0)>(0);
  $$pre4$i395$i = HEAP32[$17>>2]|0;
  if ($96) {
   $$02$i392$i = $84;$90 = $$pre4$i395$i;$ptr$01$i393$i = $95;
  } else {
   break;
  }
 }
 $97 = ((($gfc) + (($$pre4$i395$i*48)|0)|0) + 39844|0);
 HEAP32[$97>>2] = $95;
 $98 = (($gfc) + 160|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = ($99|0)==(0);
 $101 = $100&1;
 $$02$i385$i = 1;$111 = $$pre4$i395$i;$ptr$01$i386$i = $95;
 while(1) {
  $102 = $ptr$01$i386$i & 7;
  $103 = (8 - ($102))|0;
  $104 = ($$02$i385$i|0)<($103|0);
  $$0$$i387$i = $104 ? $$02$i385$i : $103;
  $105 = (($$02$i385$i) - ($$0$$i387$i))|0;
  $106 = $101 >>> $105;
  $107 = (($103) - ($$0$$i387$i))|0;
  $108 = $106 << $107;
  $109 = $ptr$01$i386$i >> 3;
  $110 = (((($gfc) + (($111*48)|0)|0) + ($109)|0) + 39848|0);
  $112 = HEAP8[$110>>0]|0;
  $113 = $112&255;
  $114 = $108 | $113;
  $115 = $114&255;
  HEAP8[$110>>0] = $115;
  $116 = (($$0$$i387$i) + ($ptr$01$i386$i))|0;
  $117 = ($105|0)>(0);
  $$pre4$i388$i = HEAP32[$17>>2]|0;
  if ($117) {
   $$02$i385$i = $105;$111 = $$pre4$i388$i;$ptr$01$i386$i = $116;
  } else {
   break;
  }
 }
 $118 = ((($gfc) + (($$pre4$i388$i*48)|0)|0) + 39844|0);
 HEAP32[$118>>2] = $116;
 $119 = HEAP32[$1>>2]|0;
 $$02$i378$i = 4;$129 = $$pre4$i388$i;$ptr$01$i379$i = $116;
 while(1) {
  $120 = $ptr$01$i379$i & 7;
  $121 = (8 - ($120))|0;
  $122 = ($$02$i378$i|0)<($121|0);
  $$0$$i380$i = $122 ? $$02$i378$i : $121;
  $123 = (($$02$i378$i) - ($$0$$i380$i))|0;
  $124 = $119 >> $123;
  $125 = (($121) - ($$0$$i380$i))|0;
  $126 = $124 << $125;
  $127 = $ptr$01$i379$i >> 3;
  $128 = (((($gfc) + (($129*48)|0)|0) + ($127)|0) + 39848|0);
  $130 = HEAP8[$128>>0]|0;
  $131 = $130&255;
  $132 = $126 | $131;
  $133 = $132&255;
  HEAP8[$128>>0] = $133;
  $134 = (($$0$$i380$i) + ($ptr$01$i379$i))|0;
  $135 = ($123|0)>(0);
  $$pre4$i381$i = HEAP32[$17>>2]|0;
  if ($135) {
   $$02$i378$i = $123;$129 = $$pre4$i381$i;$ptr$01$i379$i = $134;
  } else {
   break;
  }
 }
 $136 = ((($gfc) + (($$pre4$i381$i*48)|0)|0) + 39844|0);
 HEAP32[$136>>2] = $134;
 $137 = (($gfc) + 20|0);
 $138 = HEAP32[$137>>2]|0;
 $$02$i371$i = 2;$148 = $$pre4$i381$i;$ptr$01$i372$i = $134;
 while(1) {
  $139 = $ptr$01$i372$i & 7;
  $140 = (8 - ($139))|0;
  $141 = ($$02$i371$i|0)<($140|0);
  $$0$$i373$i = $141 ? $$02$i371$i : $140;
  $142 = (($$02$i371$i) - ($$0$$i373$i))|0;
  $143 = $138 >> $142;
  $144 = (($140) - ($$0$$i373$i))|0;
  $145 = $143 << $144;
  $146 = $ptr$01$i372$i >> 3;
  $147 = (((($gfc) + (($148*48)|0)|0) + ($146)|0) + 39848|0);
  $149 = HEAP8[$147>>0]|0;
  $150 = $149&255;
  $151 = $145 | $150;
  $152 = $151&255;
  HEAP8[$147>>0] = $152;
  $153 = (($$0$$i373$i) + ($ptr$01$i372$i))|0;
  $154 = ($142|0)>(0);
  $$pre4$i374$i = HEAP32[$17>>2]|0;
  if ($154) {
   $$02$i371$i = $142;$148 = $$pre4$i374$i;$ptr$01$i372$i = $153;
  } else {
   break;
  }
 }
 $155 = ((($gfc) + (($$pre4$i374$i*48)|0)|0) + 39844|0);
 HEAP32[$155>>2] = $153;
 $156 = HEAP32[$7>>2]|0;
 $$02$i364$i = 1;$166 = $$pre4$i374$i;$ptr$01$i365$i = $153;
 while(1) {
  $157 = $ptr$01$i365$i & 7;
  $158 = (8 - ($157))|0;
  $159 = ($$02$i364$i|0)<($158|0);
  $$0$$i366$i = $159 ? $$02$i364$i : $158;
  $160 = (($$02$i364$i) - ($$0$$i366$i))|0;
  $161 = $156 >> $160;
  $162 = (($158) - ($$0$$i366$i))|0;
  $163 = $161 << $162;
  $164 = $ptr$01$i365$i >> 3;
  $165 = (((($gfc) + (($166*48)|0)|0) + ($164)|0) + 39848|0);
  $167 = HEAP8[$165>>0]|0;
  $168 = $167&255;
  $169 = $163 | $168;
  $170 = $169&255;
  HEAP8[$165>>0] = $170;
  $171 = (($$0$$i366$i) + ($ptr$01$i365$i))|0;
  $172 = ($160|0)>(0);
  $$pre4$i367$i = HEAP32[$17>>2]|0;
  if ($172) {
   $$02$i364$i = $160;$166 = $$pre4$i367$i;$ptr$01$i365$i = $171;
  } else {
   break;
  }
 }
 $173 = ((($gfc) + (($$pre4$i367$i*48)|0)|0) + 39844|0);
 HEAP32[$173>>2] = $171;
 $174 = (($gfc) + 172|0);
 $175 = HEAP32[$174>>2]|0;
 $$02$i357$i = 1;$185 = $$pre4$i367$i;$ptr$01$i358$i = $171;
 while(1) {
  $176 = $ptr$01$i358$i & 7;
  $177 = (8 - ($176))|0;
  $178 = ($$02$i357$i|0)<($177|0);
  $$0$$i359$i = $178 ? $$02$i357$i : $177;
  $179 = (($$02$i357$i) - ($$0$$i359$i))|0;
  $180 = $175 >> $179;
  $181 = (($177) - ($$0$$i359$i))|0;
  $182 = $180 << $181;
  $183 = $ptr$01$i358$i >> 3;
  $184 = (((($gfc) + (($185*48)|0)|0) + ($183)|0) + 39848|0);
  $186 = HEAP8[$184>>0]|0;
  $187 = $186&255;
  $188 = $182 | $187;
  $189 = $188&255;
  HEAP8[$184>>0] = $189;
  $190 = (($$0$$i359$i) + ($ptr$01$i358$i))|0;
  $191 = ($179|0)>(0);
  $$pre4$i360$i = HEAP32[$17>>2]|0;
  if ($191) {
   $$02$i357$i = $179;$185 = $$pre4$i360$i;$ptr$01$i358$i = $190;
  } else {
   break;
  }
 }
 $192 = ((($gfc) + (($$pre4$i360$i*48)|0)|0) + 39844|0);
 HEAP32[$192>>2] = $190;
 $193 = (($gfc) + 180|0);
 $194 = HEAP32[$193>>2]|0;
 $$02$i350$i = 2;$204 = $$pre4$i360$i;$ptr$01$i351$i = $190;
 while(1) {
  $195 = $ptr$01$i351$i & 7;
  $196 = (8 - ($195))|0;
  $197 = ($$02$i350$i|0)<($196|0);
  $$0$$i352$i = $197 ? $$02$i350$i : $196;
  $198 = (($$02$i350$i) - ($$0$$i352$i))|0;
  $199 = $194 >> $198;
  $200 = (($196) - ($$0$$i352$i))|0;
  $201 = $199 << $200;
  $202 = $ptr$01$i351$i >> 3;
  $203 = (((($gfc) + (($204*48)|0)|0) + ($202)|0) + 39848|0);
  $205 = HEAP8[$203>>0]|0;
  $206 = $205&255;
  $207 = $201 | $206;
  $208 = $207&255;
  HEAP8[$203>>0] = $208;
  $209 = (($$0$$i352$i) + ($ptr$01$i351$i))|0;
  $210 = ($198|0)>(0);
  $$pre4$i353$i = HEAP32[$17>>2]|0;
  if ($210) {
   $$02$i350$i = $198;$204 = $$pre4$i353$i;$ptr$01$i351$i = $209;
  } else {
   break;
  }
 }
 $211 = ((($gfc) + (($$pre4$i353$i*48)|0)|0) + 39844|0);
 HEAP32[$211>>2] = $209;
 $212 = (($gfc) + 84756|0);
 $213 = HEAP32[$212>>2]|0;
 $$02$i343$i = 2;$223 = $$pre4$i353$i;$ptr$01$i344$i = $209;
 while(1) {
  $214 = $ptr$01$i344$i & 7;
  $215 = (8 - ($214))|0;
  $216 = ($$02$i343$i|0)<($215|0);
  $$0$$i345$i = $216 ? $$02$i343$i : $215;
  $217 = (($$02$i343$i) - ($$0$$i345$i))|0;
  $218 = $213 >> $217;
  $219 = (($215) - ($$0$$i345$i))|0;
  $220 = $218 << $219;
  $221 = $ptr$01$i344$i >> 3;
  $222 = (((($gfc) + (($223*48)|0)|0) + ($221)|0) + 39848|0);
  $224 = HEAP8[$222>>0]|0;
  $225 = $224&255;
  $226 = $220 | $225;
  $227 = $226&255;
  HEAP8[$222>>0] = $227;
  $228 = (($$0$$i345$i) + ($ptr$01$i344$i))|0;
  $229 = ($217|0)>(0);
  $$pre4$i346$i = HEAP32[$17>>2]|0;
  if ($229) {
   $$02$i343$i = $217;$223 = $$pre4$i346$i;$ptr$01$i344$i = $228;
  } else {
   break;
  }
 }
 $230 = ((($gfc) + (($$pre4$i346$i*48)|0)|0) + 39844|0);
 HEAP32[$230>>2] = $228;
 $231 = (($gfc) + 164|0);
 $232 = HEAP32[$231>>2]|0;
 $$02$i336$i = 1;$242 = $$pre4$i346$i;$ptr$01$i337$i = $228;
 while(1) {
  $233 = $ptr$01$i337$i & 7;
  $234 = (8 - ($233))|0;
  $235 = ($$02$i336$i|0)<($234|0);
  $$0$$i338$i = $235 ? $$02$i336$i : $234;
  $236 = (($$02$i336$i) - ($$0$$i338$i))|0;
  $237 = $232 >> $236;
  $238 = (($234) - ($$0$$i338$i))|0;
  $239 = $237 << $238;
  $240 = $ptr$01$i337$i >> 3;
  $241 = (((($gfc) + (($242*48)|0)|0) + ($240)|0) + 39848|0);
  $243 = HEAP8[$241>>0]|0;
  $244 = $243&255;
  $245 = $239 | $244;
  $246 = $245&255;
  HEAP8[$241>>0] = $246;
  $247 = (($$0$$i338$i) + ($ptr$01$i337$i))|0;
  $248 = ($236|0)>(0);
  $$pre4$i339$i = HEAP32[$17>>2]|0;
  if ($248) {
   $$02$i336$i = $236;$242 = $$pre4$i339$i;$ptr$01$i337$i = $247;
  } else {
   break;
  }
 }
 $249 = ((($gfc) + (($$pre4$i339$i*48)|0)|0) + 39844|0);
 HEAP32[$249>>2] = $247;
 $250 = (($gfc) + 168|0);
 $251 = HEAP32[$250>>2]|0;
 $$02$i329$i = 1;$261 = $$pre4$i339$i;$ptr$01$i330$i = $247;
 while(1) {
  $252 = $ptr$01$i330$i & 7;
  $253 = (8 - ($252))|0;
  $254 = ($$02$i329$i|0)<($253|0);
  $$0$$i331$i = $254 ? $$02$i329$i : $253;
  $255 = (($$02$i329$i) - ($$0$$i331$i))|0;
  $256 = $251 >> $255;
  $257 = (($253) - ($$0$$i331$i))|0;
  $258 = $256 << $257;
  $259 = $ptr$01$i330$i >> 3;
  $260 = (((($gfc) + (($261*48)|0)|0) + ($259)|0) + 39848|0);
  $262 = HEAP8[$260>>0]|0;
  $263 = $262&255;
  $264 = $258 | $263;
  $265 = $264&255;
  HEAP8[$260>>0] = $265;
  $266 = (($$0$$i331$i) + ($ptr$01$i330$i))|0;
  $267 = ($255|0)>(0);
  $$pre4$i332$i = HEAP32[$17>>2]|0;
  if ($267) {
   $$02$i329$i = $255;$261 = $$pre4$i332$i;$ptr$01$i330$i = $266;
  } else {
   break;
  }
 }
 $268 = ((($gfc) + (($$pre4$i332$i*48)|0)|0) + 39844|0);
 HEAP32[$268>>2] = $266;
 $269 = (($gfc) + 176|0);
 $270 = HEAP32[$269>>2]|0;
 $$02$i322$i = 2;$280 = $$pre4$i332$i;$ptr$01$i323$i = $266;
 while(1) {
  $271 = $ptr$01$i323$i & 7;
  $272 = (8 - ($271))|0;
  $273 = ($$02$i322$i|0)<($272|0);
  $$0$$i324$i = $273 ? $$02$i322$i : $272;
  $274 = (($$02$i322$i) - ($$0$$i324$i))|0;
  $275 = $270 >> $274;
  $276 = (($272) - ($$0$$i324$i))|0;
  $277 = $275 << $276;
  $278 = $ptr$01$i323$i >> 3;
  $279 = (((($gfc) + (($280*48)|0)|0) + ($278)|0) + 39848|0);
  $281 = HEAP8[$279>>0]|0;
  $282 = $281&255;
  $283 = $277 | $282;
  $284 = $283&255;
  HEAP8[$279>>0] = $284;
  $285 = (($$0$$i324$i) + ($ptr$01$i323$i))|0;
  $286 = ($274|0)>(0);
  $$pre4$i325$i = HEAP32[$17>>2]|0;
  if ($286) {
   $$02$i322$i = $274;$280 = $$pre4$i325$i;$ptr$01$i323$i = $285;
  } else {
   break;
  }
 }
 $287 = ((($gfc) + (($$pre4$i325$i*48)|0)|0) + 39844|0);
 HEAP32[$287>>2] = $285;
 $288 = HEAP32[$98>>2]|0;
 $289 = ($288|0)==(0);
 if ($289) {
  $1760 = $285;
 } else {
  $$02$i315$i = 16;$ptr$01$i316$i = $285;
  while(1) {
   $290 = $ptr$01$i316$i & 7;
   $291 = (8 - ($290))|0;
   $292 = ($$02$i315$i|0)<($291|0);
   $$0$$i317$i = $292 ? $$02$i315$i : $291;
   $293 = (($$02$i315$i) - ($$0$$i317$i))|0;
   $294 = (($$0$$i317$i) + ($ptr$01$i316$i))|0;
   $295 = ($293|0)>(0);
   if ($295) {
    $$02$i315$i = $293;$ptr$01$i316$i = $294;
   } else {
    break;
   }
  }
  HEAP32[$287>>2] = $294;
  $1760 = $294;
 }
 $296 = HEAP32[$62>>2]|0;
 $297 = ($296|0)==(1);
 $298 = (($gfc) + 21312|0);
 $299 = HEAP32[$298>>2]|0;
 do {
  if ($297) {
   $$02$i308$i = 9;$309 = $$pre4$i325$i;$ptr$01$i309$i = $1760;
   while(1) {
    $300 = $ptr$01$i309$i & 7;
    $301 = (8 - ($300))|0;
    $302 = ($$02$i308$i|0)<($301|0);
    $$0$$i310$i = $302 ? $$02$i308$i : $301;
    $303 = (($$02$i308$i) - ($$0$$i310$i))|0;
    $304 = $299 >> $303;
    $305 = (($301) - ($$0$$i310$i))|0;
    $306 = $304 << $305;
    $307 = $ptr$01$i309$i >> 3;
    $308 = (((($gfc) + (($309*48)|0)|0) + ($307)|0) + 39848|0);
    $310 = HEAP8[$308>>0]|0;
    $311 = $310&255;
    $312 = $306 | $311;
    $313 = $312&255;
    HEAP8[$308>>0] = $313;
    $314 = (($$0$$i310$i) + ($ptr$01$i309$i))|0;
    $315 = ($303|0)>(0);
    $$pre4$i311$i = HEAP32[$17>>2]|0;
    if ($315) {
     $$02$i308$i = $303;$309 = $$pre4$i311$i;$ptr$01$i309$i = $314;
    } else {
     break;
    }
   }
   $316 = ((($gfc) + (($$pre4$i311$i*48)|0)|0) + 39844|0);
   HEAP32[$316>>2] = $314;
   $317 = (($gfc) + 72|0);
   $318 = HEAP32[$317>>2]|0;
   $319 = ($318|0)==(2);
   $320 = (($gfc) + 21316|0);
   $321 = HEAP32[$320>>2]|0;
   if ($319) {
    $$02$i301$i = 3;$331 = $$pre4$i311$i;$ptr$01$i302$i = $314;
    while(1) {
     $322 = $ptr$01$i302$i & 7;
     $323 = (8 - ($322))|0;
     $324 = ($$02$i301$i|0)<($323|0);
     $$0$$i303$i = $324 ? $$02$i301$i : $323;
     $325 = (($$02$i301$i) - ($$0$$i303$i))|0;
     $326 = $321 >> $325;
     $327 = (($323) - ($$0$$i303$i))|0;
     $328 = $326 << $327;
     $329 = $ptr$01$i302$i >> 3;
     $330 = (((($gfc) + (($331*48)|0)|0) + ($329)|0) + 39848|0);
     $332 = HEAP8[$330>>0]|0;
     $333 = $332&255;
     $334 = $328 | $333;
     $335 = $334&255;
     HEAP8[$330>>0] = $335;
     $336 = (($$0$$i303$i) + ($ptr$01$i302$i))|0;
     $337 = ($325|0)>(0);
     $$pre4$i304$i = HEAP32[$17>>2]|0;
     if ($337) {
      $$02$i301$i = $325;$331 = $$pre4$i304$i;$ptr$01$i302$i = $336;
     } else {
      break;
     }
    }
    $338 = ((($gfc) + (($$pre4$i304$i*48)|0)|0) + 39844|0);
    HEAP32[$338>>2] = $336;
    $$pre543$i = $336;$1761 = $$pre4$i304$i;
   } else {
    $$02$i294$i = 5;$348 = $$pre4$i311$i;$ptr$01$i295$i = $314;
    while(1) {
     $339 = $ptr$01$i295$i & 7;
     $340 = (8 - ($339))|0;
     $341 = ($$02$i294$i|0)<($340|0);
     $$0$$i296$i = $341 ? $$02$i294$i : $340;
     $342 = (($$02$i294$i) - ($$0$$i296$i))|0;
     $343 = $321 >> $342;
     $344 = (($340) - ($$0$$i296$i))|0;
     $345 = $343 << $344;
     $346 = $ptr$01$i295$i >> 3;
     $347 = (((($gfc) + (($348*48)|0)|0) + ($346)|0) + 39848|0);
     $349 = HEAP8[$347>>0]|0;
     $350 = $349&255;
     $351 = $345 | $350;
     $352 = $351&255;
     HEAP8[$347>>0] = $352;
     $353 = (($$0$$i296$i) + ($ptr$01$i295$i))|0;
     $354 = ($342|0)>(0);
     $$pre4$i297$i = HEAP32[$17>>2]|0;
     if ($354) {
      $$02$i294$i = $342;$348 = $$pre4$i297$i;$ptr$01$i295$i = $353;
     } else {
      break;
     }
    }
    $355 = ((($gfc) + (($$pre4$i297$i*48)|0)|0) + 39844|0);
    HEAP32[$355>>2] = $353;
    $$pre543$i = $353;$1761 = $$pre4$i297$i;
   }
   $356 = HEAP32[$317>>2]|0;
   $357 = ($356|0)>(0);
   if ($357) {
    $1762 = $$pre543$i;$1763 = $1761;$ch$0435$i = 0;
    while(1) {
     $358 = ((($gfc) + ($ch$0435$i<<4)|0) + 21328|0);
     $359 = HEAP32[$358>>2]|0;
     $$02$i287$i = 1;$369 = $1763;$ptr$01$i288$i = $1762;
     while(1) {
      $360 = $ptr$01$i288$i & 7;
      $361 = (8 - ($360))|0;
      $362 = ($$02$i287$i|0)<($361|0);
      $$0$$i289$i = $362 ? $$02$i287$i : $361;
      $363 = (($$02$i287$i) - ($$0$$i289$i))|0;
      $364 = $359 >> $363;
      $365 = (($361) - ($$0$$i289$i))|0;
      $366 = $364 << $365;
      $367 = $ptr$01$i288$i >> 3;
      $368 = (((($gfc) + (($369*48)|0)|0) + ($367)|0) + 39848|0);
      $370 = HEAP8[$368>>0]|0;
      $371 = $370&255;
      $372 = $366 | $371;
      $373 = $372&255;
      HEAP8[$368>>0] = $373;
      $374 = (($$0$$i289$i) + ($ptr$01$i288$i))|0;
      $375 = ($363|0)>(0);
      $$pre4$i290$i = HEAP32[$17>>2]|0;
      if ($375) {
       $$02$i287$i = $363;$369 = $$pre4$i290$i;$ptr$01$i288$i = $374;
      } else {
       break;
      }
     }
     $376 = ((($gfc) + (($$pre4$i290$i*48)|0)|0) + 39844|0);
     HEAP32[$376>>2] = $374;
     $377 = ((($gfc) + ($ch$0435$i<<4)|0) + 21332|0);
     $378 = HEAP32[$377>>2]|0;
     $$02$i287$1$i = 1;$1234 = $$pre4$i290$i;$ptr$01$i288$1$i = $374;
     while(1) {
      $1225 = $ptr$01$i288$1$i & 7;
      $1226 = (8 - ($1225))|0;
      $1227 = ($$02$i287$1$i|0)<($1226|0);
      $$0$$i289$1$i = $1227 ? $$02$i287$1$i : $1226;
      $1228 = (($$02$i287$1$i) - ($$0$$i289$1$i))|0;
      $1229 = $378 >> $1228;
      $1230 = (($1226) - ($$0$$i289$1$i))|0;
      $1231 = $1229 << $1230;
      $1232 = $ptr$01$i288$1$i >> 3;
      $1233 = (((($gfc) + (($1234*48)|0)|0) + ($1232)|0) + 39848|0);
      $1235 = HEAP8[$1233>>0]|0;
      $1236 = $1235&255;
      $1237 = $1231 | $1236;
      $1238 = $1237&255;
      HEAP8[$1233>>0] = $1238;
      $1239 = (($$0$$i289$1$i) + ($ptr$01$i288$1$i))|0;
      $1240 = ($1228|0)>(0);
      $$pre4$i290$1$i = HEAP32[$17>>2]|0;
      if ($1240) {
       $$02$i287$1$i = $1228;$1234 = $$pre4$i290$1$i;$ptr$01$i288$1$i = $1239;
      } else {
       break;
      }
     }
     $1241 = ((($gfc) + (($$pre4$i290$1$i*48)|0)|0) + 39844|0);
     HEAP32[$1241>>2] = $1239;
     $1242 = ((($gfc) + ($ch$0435$i<<4)|0) + 21336|0);
     $1243 = HEAP32[$1242>>2]|0;
     $$02$i287$2$i = 1;$1253 = $$pre4$i290$1$i;$ptr$01$i288$2$i = $1239;
     while(1) {
      $1244 = $ptr$01$i288$2$i & 7;
      $1245 = (8 - ($1244))|0;
      $1246 = ($$02$i287$2$i|0)<($1245|0);
      $$0$$i289$2$i = $1246 ? $$02$i287$2$i : $1245;
      $1247 = (($$02$i287$2$i) - ($$0$$i289$2$i))|0;
      $1248 = $1243 >> $1247;
      $1249 = (($1245) - ($$0$$i289$2$i))|0;
      $1250 = $1248 << $1249;
      $1251 = $ptr$01$i288$2$i >> 3;
      $1252 = (((($gfc) + (($1253*48)|0)|0) + ($1251)|0) + 39848|0);
      $1254 = HEAP8[$1252>>0]|0;
      $1255 = $1254&255;
      $1256 = $1250 | $1255;
      $1257 = $1256&255;
      HEAP8[$1252>>0] = $1257;
      $1258 = (($$0$$i289$2$i) + ($ptr$01$i288$2$i))|0;
      $1259 = ($1247|0)>(0);
      $$pre4$i290$2$i = HEAP32[$17>>2]|0;
      if ($1259) {
       $$02$i287$2$i = $1247;$1253 = $$pre4$i290$2$i;$ptr$01$i288$2$i = $1258;
      } else {
       break;
      }
     }
     $1260 = ((($gfc) + (($$pre4$i290$2$i*48)|0)|0) + 39844|0);
     HEAP32[$1260>>2] = $1258;
     $1261 = ((($gfc) + ($ch$0435$i<<4)|0) + 21340|0);
     $1262 = HEAP32[$1261>>2]|0;
     $$02$i287$3$i = 1;$1272 = $$pre4$i290$2$i;$ptr$01$i288$3$i = $1258;
     while(1) {
      $1263 = $ptr$01$i288$3$i & 7;
      $1264 = (8 - ($1263))|0;
      $1265 = ($$02$i287$3$i|0)<($1264|0);
      $$0$$i289$3$i = $1265 ? $$02$i287$3$i : $1264;
      $1266 = (($$02$i287$3$i) - ($$0$$i289$3$i))|0;
      $1267 = $1262 >> $1266;
      $1268 = (($1264) - ($$0$$i289$3$i))|0;
      $1269 = $1267 << $1268;
      $1270 = $ptr$01$i288$3$i >> 3;
      $1271 = (((($gfc) + (($1272*48)|0)|0) + ($1270)|0) + 39848|0);
      $1273 = HEAP8[$1271>>0]|0;
      $1274 = $1273&255;
      $1275 = $1269 | $1274;
      $1276 = $1275&255;
      HEAP8[$1271>>0] = $1276;
      $1277 = (($$0$$i289$3$i) + ($ptr$01$i288$3$i))|0;
      $1278 = ($1266|0)>(0);
      $$pre4$i290$3$i = HEAP32[$17>>2]|0;
      if ($1278) {
       $$02$i287$3$i = $1266;$1272 = $$pre4$i290$3$i;$ptr$01$i288$3$i = $1277;
      } else {
       break;
      }
     }
     $1279 = ((($gfc) + (($$pre4$i290$3$i*48)|0)|0) + 39844|0);
     HEAP32[$1279>>2] = $1277;
     $1280 = (($ch$0435$i) + 1)|0;
     $1281 = HEAP32[$317>>2]|0;
     $1282 = ($1280|0)<($1281|0);
     if ($1282) {
      $1762 = $1277;$1763 = $$pre4$i290$3$i;$ch$0435$i = $1280;
     } else {
      $380 = $1281;$381 = $$pre4$i290$3$i;$gr$0429$i = 0;
      break;
     }
    }
   } else {
    $380 = $356;$381 = $1761;$gr$0429$i = 0;
   }
   while(1) {
    $379 = ($380|0)>(0);
    if ($379) {
     $$phi$trans$insert$i = ((($gfc) + (($381*48)|0)|0) + 39844|0);
     $$pre$i = HEAP32[$$phi$trans$insert$i>>2]|0;
     $1766 = $$pre$i;$1767 = $381;$ch$1426$i = 0;
     while(1) {
      $382 = (((($gfc) + (($gr$0429$i*10504)|0)|0) + (($ch$1426$i*5252)|0)|0) + 5072|0);
      $383 = HEAP32[$382>>2]|0;
      $384 = (((($gfc) + (($gr$0429$i*10504)|0)|0) + (($ch$1426$i*5252)|0)|0) + 5148|0);
      $385 = HEAP32[$384>>2]|0;
      $386 = (($385) + ($383))|0;
      $$02$i280$i = 12;$396 = $1767;$ptr$01$i281$i = $1766;
      while(1) {
       $387 = $ptr$01$i281$i & 7;
       $388 = (8 - ($387))|0;
       $389 = ($$02$i280$i|0)<($388|0);
       $$0$$i282$i = $389 ? $$02$i280$i : $388;
       $390 = (($$02$i280$i) - ($$0$$i282$i))|0;
       $391 = $386 >> $390;
       $392 = (($388) - ($$0$$i282$i))|0;
       $393 = $391 << $392;
       $394 = $ptr$01$i281$i >> 3;
       $395 = (((($gfc) + (($396*48)|0)|0) + ($394)|0) + 39848|0);
       $397 = HEAP8[$395>>0]|0;
       $398 = $397&255;
       $399 = $393 | $398;
       $400 = $399&255;
       HEAP8[$395>>0] = $400;
       $401 = (($$0$$i282$i) + ($ptr$01$i281$i))|0;
       $402 = ($390|0)>(0);
       $$pre4$i283$i = HEAP32[$17>>2]|0;
       if ($402) {
        $$02$i280$i = $390;$396 = $$pre4$i283$i;$ptr$01$i281$i = $401;
       } else {
        break;
       }
      }
      $403 = ((($gfc) + (($$pre4$i283$i*48)|0)|0) + 39844|0);
      HEAP32[$403>>2] = $401;
      $404 = (((($gfc) + (($gr$0429$i*10504)|0)|0) + (($ch$1426$i*5252)|0)|0) + 5076|0);
      $405 = HEAP32[$404>>2]|0;
      $406 = (($405|0) / 2)&-1;
      $$02$i273$i = 9;$416 = $$pre4$i283$i;$ptr$01$i274$i = $401;
      while(1) {
       $407 = $ptr$01$i274$i & 7;
       $408 = (8 - ($407))|0;
       $409 = ($$02$i273$i|0)<($408|0);
       $$0$$i275$i = $409 ? $$02$i273$i : $408;
       $410 = (($$02$i273$i) - ($$0$$i275$i))|0;
       $411 = $406 >> $410;
       $412 = (($408) - ($$0$$i275$i))|0;
       $413 = $411 << $412;
       $414 = $ptr$01$i274$i >> 3;
       $415 = (((($gfc) + (($416*48)|0)|0) + ($414)|0) + 39848|0);
       $417 = HEAP8[$415>>0]|0;
       $418 = $417&255;
       $419 = $413 | $418;
       $420 = $419&255;
       HEAP8[$415>>0] = $420;
       $421 = (($$0$$i275$i) + ($ptr$01$i274$i))|0;
       $422 = ($410|0)>(0);
       $$pre4$i276$i = HEAP32[$17>>2]|0;
       if ($422) {
        $$02$i273$i = $410;$416 = $$pre4$i276$i;$ptr$01$i274$i = $421;
       } else {
        break;
       }
      }
      $423 = ((($gfc) + (($$pre4$i276$i*48)|0)|0) + 39844|0);
      HEAP32[$423>>2] = $421;
      $424 = (((($gfc) + (($gr$0429$i*10504)|0)|0) + (($ch$1426$i*5252)|0)|0) + 5084|0);
      $425 = HEAP32[$424>>2]|0;
      $$02$i266$i = 8;$435 = $$pre4$i276$i;$ptr$01$i267$i = $421;
      while(1) {
       $426 = $ptr$01$i267$i & 7;
       $427 = (8 - ($426))|0;
       $428 = ($$02$i266$i|0)<($427|0);
       $$0$$i268$i = $428 ? $$02$i266$i : $427;
       $429 = (($$02$i266$i) - ($$0$$i268$i))|0;
       $430 = $425 >> $429;
       $431 = (($427) - ($$0$$i268$i))|0;
       $432 = $430 << $431;
       $433 = $ptr$01$i267$i >> 3;
       $434 = (((($gfc) + (($435*48)|0)|0) + ($433)|0) + 39848|0);
       $436 = HEAP8[$434>>0]|0;
       $437 = $436&255;
       $438 = $432 | $437;
       $439 = $438&255;
       HEAP8[$434>>0] = $439;
       $440 = (($$0$$i268$i) + ($ptr$01$i267$i))|0;
       $441 = ($429|0)>(0);
       $$pre4$i269$i = HEAP32[$17>>2]|0;
       if ($441) {
        $$02$i266$i = $429;$435 = $$pre4$i269$i;$ptr$01$i267$i = $440;
       } else {
        break;
       }
      }
      $442 = ((($gfc) + (($$pre4$i269$i*48)|0)|0) + 39844|0);
      HEAP32[$442>>2] = $440;
      $443 = (((($gfc) + (($gr$0429$i*10504)|0)|0) + (($ch$1426$i*5252)|0)|0) + 5088|0);
      $444 = HEAP32[$443>>2]|0;
      $$02$i259$i = 4;$454 = $$pre4$i269$i;$ptr$01$i260$i = $440;
      while(1) {
       $445 = $ptr$01$i260$i & 7;
       $446 = (8 - ($445))|0;
       $447 = ($$02$i259$i|0)<($446|0);
       $$0$$i261$i = $447 ? $$02$i259$i : $446;
       $448 = (($$02$i259$i) - ($$0$$i261$i))|0;
       $449 = $444 >> $448;
       $450 = (($446) - ($$0$$i261$i))|0;
       $451 = $449 << $450;
       $452 = $ptr$01$i260$i >> 3;
       $453 = (((($gfc) + (($454*48)|0)|0) + ($452)|0) + 39848|0);
       $455 = HEAP8[$453>>0]|0;
       $456 = $455&255;
       $457 = $451 | $456;
       $458 = $457&255;
       HEAP8[$453>>0] = $458;
       $459 = (($$0$$i261$i) + ($ptr$01$i260$i))|0;
       $460 = ($448|0)>(0);
       $$pre4$i262$i = HEAP32[$17>>2]|0;
       if ($460) {
        $$02$i259$i = $448;$454 = $$pre4$i262$i;$ptr$01$i260$i = $459;
       } else {
        break;
       }
      }
      $461 = ((($gfc) + (($$pre4$i262$i*48)|0)|0) + 39844|0);
      HEAP32[$461>>2] = $459;
      $462 = (((($gfc) + (($gr$0429$i*10504)|0)|0) + (($ch$1426$i*5252)|0)|0) + 5092|0);
      $463 = HEAP32[$462>>2]|0;
      $464 = ($463|0)==(0);
      if ($464) {
       $$02$i196$i = 1;$ptr$01$i197$i = $459;
       while(1) {
        $618 = $ptr$01$i197$i & 7;
        $619 = (8 - ($618))|0;
        $620 = ($$02$i196$i|0)<($619|0);
        $$0$$i198$i = $620 ? $$02$i196$i : $619;
        $621 = (($$02$i196$i) - ($$0$$i198$i))|0;
        $622 = (($$0$$i198$i) + ($ptr$01$i197$i))|0;
        $623 = ($621|0)>(0);
        if ($623) {
         $$02$i196$i = $621;$ptr$01$i197$i = $622;
        } else {
         break;
        }
       }
       HEAP32[$461>>2] = $622;
       $624 = (((($gfc) + (($gr$0429$i*10504)|0)|0) + (($ch$1426$i*5252)|0)|0) + 5100|0);
       $625 = HEAP32[$624>>2]|0;
       $626 = ($625|0)==(14);
       if ($626) {
        HEAP32[$624>>2] = 16;
        $$pre544$i = HEAP32[$17>>2]|0;
        $$phi$trans$insert545$i = ((($gfc) + (($$pre544$i*48)|0)|0) + 39844|0);
        $$pre546$i = HEAP32[$$phi$trans$insert545$i>>2]|0;
        $1774 = $$pre546$i;$1775 = $$pre544$i;$632 = 16;
       } else {
        $1774 = $622;$1775 = $$pre4$i262$i;$632 = $625;
       }
       $$02$i189$i = 5;$637 = $1775;$ptr$01$i190$i = $1774;
       while(1) {
        $627 = $ptr$01$i190$i & 7;
        $628 = (8 - ($627))|0;
        $629 = ($$02$i189$i|0)<($628|0);
        $$0$$i191$i = $629 ? $$02$i189$i : $628;
        $630 = (($$02$i189$i) - ($$0$$i191$i))|0;
        $631 = $632 >> $630;
        $633 = (($628) - ($$0$$i191$i))|0;
        $634 = $631 << $633;
        $635 = $ptr$01$i190$i >> 3;
        $636 = (((($gfc) + (($637*48)|0)|0) + ($635)|0) + 39848|0);
        $638 = HEAP8[$636>>0]|0;
        $639 = $638&255;
        $640 = $634 | $639;
        $641 = $640&255;
        HEAP8[$636>>0] = $641;
        $642 = (($$0$$i191$i) + ($ptr$01$i190$i))|0;
        $643 = ($630|0)>(0);
        $$pre4$i192$i = HEAP32[$17>>2]|0;
        if ($643) {
         $$02$i189$i = $630;$637 = $$pre4$i192$i;$ptr$01$i190$i = $642;
        } else {
         break;
        }
       }
       $644 = ((($gfc) + (($$pre4$i192$i*48)|0)|0) + 39844|0);
       HEAP32[$644>>2] = $642;
       $645 = (((($gfc) + (($gr$0429$i*10504)|0)|0) + (($ch$1426$i*5252)|0)|0) + 5104|0);
       $646 = HEAP32[$645>>2]|0;
       $647 = ($646|0)==(14);
       if ($647) {
        HEAP32[$645>>2] = 16;
        $$pre547$i = HEAP32[$17>>2]|0;
        $$phi$trans$insert548$i = ((($gfc) + (($$pre547$i*48)|0)|0) + 39844|0);
        $$pre549$i = HEAP32[$$phi$trans$insert548$i>>2]|0;
        $1776 = $$pre549$i;$1777 = $$pre547$i;$653 = 16;
       } else {
        $1776 = $642;$1777 = $$pre4$i192$i;$653 = $646;
       }
       $$02$i182$i = 5;$658 = $1777;$ptr$01$i183$i = $1776;
       while(1) {
        $648 = $ptr$01$i183$i & 7;
        $649 = (8 - ($648))|0;
        $650 = ($$02$i182$i|0)<($649|0);
        $$0$$i184$i = $650 ? $$02$i182$i : $649;
        $651 = (($$02$i182$i) - ($$0$$i184$i))|0;
        $652 = $653 >> $651;
        $654 = (($649) - ($$0$$i184$i))|0;
        $655 = $652 << $654;
        $656 = $ptr$01$i183$i >> 3;
        $657 = (((($gfc) + (($658*48)|0)|0) + ($656)|0) + 39848|0);
        $659 = HEAP8[$657>>0]|0;
        $660 = $659&255;
        $661 = $655 | $660;
        $662 = $661&255;
        HEAP8[$657>>0] = $662;
        $663 = (($$0$$i184$i) + ($ptr$01$i183$i))|0;
        $664 = ($651|0)>(0);
        $$pre4$i185$i = HEAP32[$17>>2]|0;
        if ($664) {
         $$02$i182$i = $651;$658 = $$pre4$i185$i;$ptr$01$i183$i = $663;
        } else {
         break;
        }
       }
       $665 = ((($gfc) + (($$pre4$i185$i*48)|0)|0) + 39844|0);
       HEAP32[$665>>2] = $663;
       $666 = (((($gfc) + (($gr$0429$i*10504)|0)|0) + (($ch$1426$i*5252)|0)|0) + 5108|0);
       $667 = HEAP32[$666>>2]|0;
       $668 = ($667|0)==(14);
       if ($668) {
        HEAP32[$666>>2] = 16;
        $$pre550$i = HEAP32[$17>>2]|0;
        $$phi$trans$insert551$i = ((($gfc) + (($$pre550$i*48)|0)|0) + 39844|0);
        $$pre552$i = HEAP32[$$phi$trans$insert551$i>>2]|0;
        $1778 = $$pre552$i;$1779 = $$pre550$i;$674 = 16;
       } else {
        $1778 = $663;$1779 = $$pre4$i185$i;$674 = $667;
       }
       $$02$i175$i = 5;$679 = $1779;$ptr$01$i176$i = $1778;
       while(1) {
        $669 = $ptr$01$i176$i & 7;
        $670 = (8 - ($669))|0;
        $671 = ($$02$i175$i|0)<($670|0);
        $$0$$i177$i = $671 ? $$02$i175$i : $670;
        $672 = (($$02$i175$i) - ($$0$$i177$i))|0;
        $673 = $674 >> $672;
        $675 = (($670) - ($$0$$i177$i))|0;
        $676 = $673 << $675;
        $677 = $ptr$01$i176$i >> 3;
        $678 = (((($gfc) + (($679*48)|0)|0) + ($677)|0) + 39848|0);
        $680 = HEAP8[$678>>0]|0;
        $681 = $680&255;
        $682 = $676 | $681;
        $683 = $682&255;
        HEAP8[$678>>0] = $683;
        $684 = (($$0$$i177$i) + ($ptr$01$i176$i))|0;
        $685 = ($672|0)>(0);
        $$pre4$i178$i = HEAP32[$17>>2]|0;
        if ($685) {
         $$02$i175$i = $672;$679 = $$pre4$i178$i;$ptr$01$i176$i = $684;
        } else {
         break;
        }
       }
       $686 = ((($gfc) + (($$pre4$i178$i*48)|0)|0) + 39844|0);
       HEAP32[$686>>2] = $684;
       $687 = (((($gfc) + (($gr$0429$i*10504)|0)|0) + (($ch$1426$i*5252)|0)|0) + 5128|0);
       $688 = HEAP32[$687>>2]|0;
       $$02$i168$i = 4;$698 = $$pre4$i178$i;$ptr$01$i169$i = $684;
       while(1) {
        $689 = $ptr$01$i169$i & 7;
        $690 = (8 - ($689))|0;
        $691 = ($$02$i168$i|0)<($690|0);
        $$0$$i170$i = $691 ? $$02$i168$i : $690;
        $692 = (($$02$i168$i) - ($$0$$i170$i))|0;
        $693 = $688 >> $692;
        $694 = (($690) - ($$0$$i170$i))|0;
        $695 = $693 << $694;
        $696 = $ptr$01$i169$i >> 3;
        $697 = (((($gfc) + (($698*48)|0)|0) + ($696)|0) + 39848|0);
        $699 = HEAP8[$697>>0]|0;
        $700 = $699&255;
        $701 = $695 | $700;
        $702 = $701&255;
        HEAP8[$697>>0] = $702;
        $703 = (($$0$$i170$i) + ($ptr$01$i169$i))|0;
        $704 = ($692|0)>(0);
        $$pre4$i171$i = HEAP32[$17>>2]|0;
        if ($704) {
         $$02$i168$i = $692;$698 = $$pre4$i171$i;$ptr$01$i169$i = $703;
        } else {
         break;
        }
       }
       $705 = ((($gfc) + (($$pre4$i171$i*48)|0)|0) + 39844|0);
       HEAP32[$705>>2] = $703;
       $706 = (((($gfc) + (($gr$0429$i*10504)|0)|0) + (($ch$1426$i*5252)|0)|0) + 5132|0);
       $707 = HEAP32[$706>>2]|0;
       $$02$i161$i = 3;$717 = $$pre4$i171$i;$ptr$01$i162$i = $703;
       while(1) {
        $708 = $ptr$01$i162$i & 7;
        $709 = (8 - ($708))|0;
        $710 = ($$02$i161$i|0)<($709|0);
        $$0$$i163$i = $710 ? $$02$i161$i : $709;
        $711 = (($$02$i161$i) - ($$0$$i163$i))|0;
        $712 = $707 >> $711;
        $713 = (($709) - ($$0$$i163$i))|0;
        $714 = $712 << $713;
        $715 = $ptr$01$i162$i >> 3;
        $716 = (((($gfc) + (($717*48)|0)|0) + ($715)|0) + 39848|0);
        $718 = HEAP8[$716>>0]|0;
        $719 = $718&255;
        $720 = $714 | $719;
        $721 = $720&255;
        HEAP8[$716>>0] = $721;
        $722 = (($$0$$i163$i) + ($ptr$01$i162$i))|0;
        $723 = ($711|0)>(0);
        $$pre4$i164$i = HEAP32[$17>>2]|0;
        if ($723) {
         $$02$i161$i = $711;$717 = $$pre4$i164$i;$ptr$01$i162$i = $722;
        } else {
         break;
        }
       }
       $724 = ((($gfc) + (($$pre4$i164$i*48)|0)|0) + 39844|0);
       HEAP32[$724>>2] = $722;
       $1772 = $722;$1773 = $$pre4$i164$i;
      } else {
       $$02$i252$i = 1;$474 = $$pre4$i262$i;$ptr$01$i253$i = $459;
       while(1) {
        $465 = $ptr$01$i253$i & 7;
        $466 = (8 - ($465))|0;
        $467 = ($$02$i252$i|0)<($466|0);
        $$0$$i254$i = $467 ? $$02$i252$i : $466;
        $468 = (($$02$i252$i) - ($$0$$i254$i))|0;
        $469 = 1 >>> $468;
        $470 = (($466) - ($$0$$i254$i))|0;
        $471 = $469 << $470;
        $472 = $ptr$01$i253$i >> 3;
        $473 = (((($gfc) + (($474*48)|0)|0) + ($472)|0) + 39848|0);
        $475 = HEAP8[$473>>0]|0;
        $476 = $475&255;
        $477 = $471 | $476;
        $478 = $477&255;
        HEAP8[$473>>0] = $478;
        $479 = (($$0$$i254$i) + ($ptr$01$i253$i))|0;
        $480 = ($468|0)>(0);
        $$pre4$i255$i = HEAP32[$17>>2]|0;
        if ($480) {
         $$02$i252$i = $468;$474 = $$pre4$i255$i;$ptr$01$i253$i = $479;
        } else {
         break;
        }
       }
       $481 = ((($gfc) + (($$pre4$i255$i*48)|0)|0) + 39844|0);
       HEAP32[$481>>2] = $479;
       $482 = HEAP32[$462>>2]|0;
       $$02$i245$i = 2;$492 = $$pre4$i255$i;$ptr$01$i246$i = $479;
       while(1) {
        $483 = $ptr$01$i246$i & 7;
        $484 = (8 - ($483))|0;
        $485 = ($$02$i245$i|0)<($484|0);
        $$0$$i247$i = $485 ? $$02$i245$i : $484;
        $486 = (($$02$i245$i) - ($$0$$i247$i))|0;
        $487 = $482 >> $486;
        $488 = (($484) - ($$0$$i247$i))|0;
        $489 = $487 << $488;
        $490 = $ptr$01$i246$i >> 3;
        $491 = (((($gfc) + (($492*48)|0)|0) + ($490)|0) + 39848|0);
        $493 = HEAP8[$491>>0]|0;
        $494 = $493&255;
        $495 = $489 | $494;
        $496 = $495&255;
        HEAP8[$491>>0] = $496;
        $497 = (($$0$$i247$i) + ($ptr$01$i246$i))|0;
        $498 = ($486|0)>(0);
        $$pre4$i248$i = HEAP32[$17>>2]|0;
        if ($498) {
         $$02$i245$i = $486;$492 = $$pre4$i248$i;$ptr$01$i246$i = $497;
        } else {
         break;
        }
       }
       $499 = ((($gfc) + (($$pre4$i248$i*48)|0)|0) + 39844|0);
       HEAP32[$499>>2] = $497;
       $500 = (((($gfc) + (($gr$0429$i*10504)|0)|0) + (($ch$1426$i*5252)|0)|0) + 5096|0);
       $501 = HEAP32[$500>>2]|0;
       $$02$i238$i = 1;$511 = $$pre4$i248$i;$ptr$01$i239$i = $497;
       while(1) {
        $502 = $ptr$01$i239$i & 7;
        $503 = (8 - ($502))|0;
        $504 = ($$02$i238$i|0)<($503|0);
        $$0$$i240$i = $504 ? $$02$i238$i : $503;
        $505 = (($$02$i238$i) - ($$0$$i240$i))|0;
        $506 = $501 >> $505;
        $507 = (($503) - ($$0$$i240$i))|0;
        $508 = $506 << $507;
        $509 = $ptr$01$i239$i >> 3;
        $510 = (((($gfc) + (($511*48)|0)|0) + ($509)|0) + 39848|0);
        $512 = HEAP8[$510>>0]|0;
        $513 = $512&255;
        $514 = $508 | $513;
        $515 = $514&255;
        HEAP8[$510>>0] = $515;
        $516 = (($$0$$i240$i) + ($ptr$01$i239$i))|0;
        $517 = ($505|0)>(0);
        $$pre4$i241$i = HEAP32[$17>>2]|0;
        if ($517) {
         $$02$i238$i = $505;$511 = $$pre4$i241$i;$ptr$01$i239$i = $516;
        } else {
         break;
        }
       }
       $518 = ((($gfc) + (($$pre4$i241$i*48)|0)|0) + 39844|0);
       HEAP32[$518>>2] = $516;
       $519 = (((($gfc) + (($gr$0429$i*10504)|0)|0) + (($ch$1426$i*5252)|0)|0) + 5100|0);
       $520 = HEAP32[$519>>2]|0;
       $521 = ($520|0)==(14);
       if ($521) {
        HEAP32[$519>>2] = 16;
        $$pre555$i = HEAP32[$17>>2]|0;
        $$phi$trans$insert556$i = ((($gfc) + (($$pre555$i*48)|0)|0) + 39844|0);
        $$pre557$i = HEAP32[$$phi$trans$insert556$i>>2]|0;
        $1768 = $$pre557$i;$1769 = $$pre555$i;$527 = 16;
       } else {
        $1768 = $516;$1769 = $$pre4$i241$i;$527 = $520;
       }
       $$02$i231$i = 5;$532 = $1769;$ptr$01$i232$i = $1768;
       while(1) {
        $522 = $ptr$01$i232$i & 7;
        $523 = (8 - ($522))|0;
        $524 = ($$02$i231$i|0)<($523|0);
        $$0$$i233$i = $524 ? $$02$i231$i : $523;
        $525 = (($$02$i231$i) - ($$0$$i233$i))|0;
        $526 = $527 >> $525;
        $528 = (($523) - ($$0$$i233$i))|0;
        $529 = $526 << $528;
        $530 = $ptr$01$i232$i >> 3;
        $531 = (((($gfc) + (($532*48)|0)|0) + ($530)|0) + 39848|0);
        $533 = HEAP8[$531>>0]|0;
        $534 = $533&255;
        $535 = $529 | $534;
        $536 = $535&255;
        HEAP8[$531>>0] = $536;
        $537 = (($$0$$i233$i) + ($ptr$01$i232$i))|0;
        $538 = ($525|0)>(0);
        $$pre4$i234$i = HEAP32[$17>>2]|0;
        if ($538) {
         $$02$i231$i = $525;$532 = $$pre4$i234$i;$ptr$01$i232$i = $537;
        } else {
         break;
        }
       }
       $539 = ((($gfc) + (($$pre4$i234$i*48)|0)|0) + 39844|0);
       HEAP32[$539>>2] = $537;
       $540 = (((($gfc) + (($gr$0429$i*10504)|0)|0) + (($ch$1426$i*5252)|0)|0) + 5104|0);
       $541 = HEAP32[$540>>2]|0;
       $542 = ($541|0)==(14);
       if ($542) {
        HEAP32[$540>>2] = 16;
        $$pre558$i = HEAP32[$17>>2]|0;
        $$phi$trans$insert559$i = ((($gfc) + (($$pre558$i*48)|0)|0) + 39844|0);
        $$pre560$i = HEAP32[$$phi$trans$insert559$i>>2]|0;
        $1770 = $$pre560$i;$1771 = $$pre558$i;$548 = 16;
       } else {
        $1770 = $537;$1771 = $$pre4$i234$i;$548 = $541;
       }
       $$02$i224$i = 5;$553 = $1771;$ptr$01$i225$i = $1770;
       while(1) {
        $543 = $ptr$01$i225$i & 7;
        $544 = (8 - ($543))|0;
        $545 = ($$02$i224$i|0)<($544|0);
        $$0$$i226$i = $545 ? $$02$i224$i : $544;
        $546 = (($$02$i224$i) - ($$0$$i226$i))|0;
        $547 = $548 >> $546;
        $549 = (($544) - ($$0$$i226$i))|0;
        $550 = $547 << $549;
        $551 = $ptr$01$i225$i >> 3;
        $552 = (((($gfc) + (($553*48)|0)|0) + ($551)|0) + 39848|0);
        $554 = HEAP8[$552>>0]|0;
        $555 = $554&255;
        $556 = $550 | $555;
        $557 = $556&255;
        HEAP8[$552>>0] = $557;
        $558 = (($$0$$i226$i) + ($ptr$01$i225$i))|0;
        $559 = ($546|0)>(0);
        $$pre4$i227$i = HEAP32[$17>>2]|0;
        if ($559) {
         $$02$i224$i = $546;$553 = $$pre4$i227$i;$ptr$01$i225$i = $558;
        } else {
         break;
        }
       }
       $560 = ((($gfc) + (($$pre4$i227$i*48)|0)|0) + 39844|0);
       HEAP32[$560>>2] = $558;
       $561 = (((($gfc) + (($gr$0429$i*10504)|0)|0) + (($ch$1426$i*5252)|0)|0) + 5112|0);
       $562 = HEAP32[$561>>2]|0;
       $$02$i217$i = 3;$572 = $$pre4$i227$i;$ptr$01$i218$i = $558;
       while(1) {
        $563 = $ptr$01$i218$i & 7;
        $564 = (8 - ($563))|0;
        $565 = ($$02$i217$i|0)<($564|0);
        $$0$$i219$i = $565 ? $$02$i217$i : $564;
        $566 = (($$02$i217$i) - ($$0$$i219$i))|0;
        $567 = $562 >> $566;
        $568 = (($564) - ($$0$$i219$i))|0;
        $569 = $567 << $568;
        $570 = $ptr$01$i218$i >> 3;
        $571 = (((($gfc) + (($572*48)|0)|0) + ($570)|0) + 39848|0);
        $573 = HEAP8[$571>>0]|0;
        $574 = $573&255;
        $575 = $569 | $574;
        $576 = $575&255;
        HEAP8[$571>>0] = $576;
        $577 = (($$0$$i219$i) + ($ptr$01$i218$i))|0;
        $578 = ($566|0)>(0);
        $$pre4$i220$i = HEAP32[$17>>2]|0;
        if ($578) {
         $$02$i217$i = $566;$572 = $$pre4$i220$i;$ptr$01$i218$i = $577;
        } else {
         break;
        }
       }
       $579 = ((($gfc) + (($$pre4$i220$i*48)|0)|0) + 39844|0);
       HEAP32[$579>>2] = $577;
       $580 = (((($gfc) + (($gr$0429$i*10504)|0)|0) + (($ch$1426$i*5252)|0)|0) + 5116|0);
       $581 = HEAP32[$580>>2]|0;
       $$02$i210$i = 3;$591 = $$pre4$i220$i;$ptr$01$i211$i = $577;
       while(1) {
        $582 = $ptr$01$i211$i & 7;
        $583 = (8 - ($582))|0;
        $584 = ($$02$i210$i|0)<($583|0);
        $$0$$i212$i = $584 ? $$02$i210$i : $583;
        $585 = (($$02$i210$i) - ($$0$$i212$i))|0;
        $586 = $581 >> $585;
        $587 = (($583) - ($$0$$i212$i))|0;
        $588 = $586 << $587;
        $589 = $ptr$01$i211$i >> 3;
        $590 = (((($gfc) + (($591*48)|0)|0) + ($589)|0) + 39848|0);
        $592 = HEAP8[$590>>0]|0;
        $593 = $592&255;
        $594 = $588 | $593;
        $595 = $594&255;
        HEAP8[$590>>0] = $595;
        $596 = (($$0$$i212$i) + ($ptr$01$i211$i))|0;
        $597 = ($585|0)>(0);
        $$pre4$i213$i = HEAP32[$17>>2]|0;
        if ($597) {
         $$02$i210$i = $585;$591 = $$pre4$i213$i;$ptr$01$i211$i = $596;
        } else {
         break;
        }
       }
       $598 = ((($gfc) + (($$pre4$i213$i*48)|0)|0) + 39844|0);
       HEAP32[$598>>2] = $596;
       $599 = (((($gfc) + (($gr$0429$i*10504)|0)|0) + (($ch$1426$i*5252)|0)|0) + 5120|0);
       $600 = HEAP32[$599>>2]|0;
       $$02$i203$i = 3;$610 = $$pre4$i213$i;$ptr$01$i204$i = $596;
       while(1) {
        $601 = $ptr$01$i204$i & 7;
        $602 = (8 - ($601))|0;
        $603 = ($$02$i203$i|0)<($602|0);
        $$0$$i205$i = $603 ? $$02$i203$i : $602;
        $604 = (($$02$i203$i) - ($$0$$i205$i))|0;
        $605 = $600 >> $604;
        $606 = (($602) - ($$0$$i205$i))|0;
        $607 = $605 << $606;
        $608 = $ptr$01$i204$i >> 3;
        $609 = (((($gfc) + (($610*48)|0)|0) + ($608)|0) + 39848|0);
        $611 = HEAP8[$609>>0]|0;
        $612 = $611&255;
        $613 = $607 | $612;
        $614 = $613&255;
        HEAP8[$609>>0] = $614;
        $615 = (($$0$$i205$i) + ($ptr$01$i204$i))|0;
        $616 = ($604|0)>(0);
        $$pre4$i206$i = HEAP32[$17>>2]|0;
        if ($616) {
         $$02$i203$i = $604;$610 = $$pre4$i206$i;$ptr$01$i204$i = $615;
        } else {
         break;
        }
       }
       $617 = ((($gfc) + (($$pre4$i206$i*48)|0)|0) + 39844|0);
       HEAP32[$617>>2] = $615;
       $1772 = $615;$1773 = $$pre4$i206$i;
      }
      $725 = (((($gfc) + (($gr$0429$i*10504)|0)|0) + (($ch$1426$i*5252)|0)|0) + 5136|0);
      $726 = HEAP32[$725>>2]|0;
      $$02$i154$i = 1;$736 = $1773;$ptr$01$i155$i = $1772;
      while(1) {
       $727 = $ptr$01$i155$i & 7;
       $728 = (8 - ($727))|0;
       $729 = ($$02$i154$i|0)<($728|0);
       $$0$$i156$i = $729 ? $$02$i154$i : $728;
       $730 = (($$02$i154$i) - ($$0$$i156$i))|0;
       $731 = $726 >> $730;
       $732 = (($728) - ($$0$$i156$i))|0;
       $733 = $731 << $732;
       $734 = $ptr$01$i155$i >> 3;
       $735 = (((($gfc) + (($736*48)|0)|0) + ($734)|0) + 39848|0);
       $737 = HEAP8[$735>>0]|0;
       $738 = $737&255;
       $739 = $733 | $738;
       $740 = $739&255;
       HEAP8[$735>>0] = $740;
       $741 = (($$0$$i156$i) + ($ptr$01$i155$i))|0;
       $742 = ($730|0)>(0);
       $$pre4$i157$i = HEAP32[$17>>2]|0;
       if ($742) {
        $$02$i154$i = $730;$736 = $$pre4$i157$i;$ptr$01$i155$i = $741;
       } else {
        break;
       }
      }
      $743 = ((($gfc) + (($$pre4$i157$i*48)|0)|0) + 39844|0);
      HEAP32[$743>>2] = $741;
      $744 = (((($gfc) + (($gr$0429$i*10504)|0)|0) + (($ch$1426$i*5252)|0)|0) + 5140|0);
      $745 = HEAP32[$744>>2]|0;
      $$02$i147$i = 1;$755 = $$pre4$i157$i;$ptr$01$i148$i = $741;
      while(1) {
       $746 = $ptr$01$i148$i & 7;
       $747 = (8 - ($746))|0;
       $748 = ($$02$i147$i|0)<($747|0);
       $$0$$i149$i = $748 ? $$02$i147$i : $747;
       $749 = (($$02$i147$i) - ($$0$$i149$i))|0;
       $750 = $745 >> $749;
       $751 = (($747) - ($$0$$i149$i))|0;
       $752 = $750 << $751;
       $753 = $ptr$01$i148$i >> 3;
       $754 = (((($gfc) + (($755*48)|0)|0) + ($753)|0) + 39848|0);
       $756 = HEAP8[$754>>0]|0;
       $757 = $756&255;
       $758 = $752 | $757;
       $759 = $758&255;
       HEAP8[$754>>0] = $759;
       $760 = (($$0$$i149$i) + ($ptr$01$i148$i))|0;
       $761 = ($749|0)>(0);
       $$pre4$i150$i = HEAP32[$17>>2]|0;
       if ($761) {
        $$02$i147$i = $749;$755 = $$pre4$i150$i;$ptr$01$i148$i = $760;
       } else {
        break;
       }
      }
      $762 = ((($gfc) + (($$pre4$i150$i*48)|0)|0) + 39844|0);
      HEAP32[$762>>2] = $760;
      $763 = (((($gfc) + (($gr$0429$i*10504)|0)|0) + (($ch$1426$i*5252)|0)|0) + 5144|0);
      $764 = HEAP32[$763>>2]|0;
      $$02$i140$i = 1;$774 = $$pre4$i150$i;$ptr$01$i141$i = $760;
      while(1) {
       $765 = $ptr$01$i141$i & 7;
       $766 = (8 - ($765))|0;
       $767 = ($$02$i140$i|0)<($766|0);
       $$0$$i142$i = $767 ? $$02$i140$i : $766;
       $768 = (($$02$i140$i) - ($$0$$i142$i))|0;
       $769 = $764 >> $768;
       $770 = (($766) - ($$0$$i142$i))|0;
       $771 = $769 << $770;
       $772 = $ptr$01$i141$i >> 3;
       $773 = (((($gfc) + (($774*48)|0)|0) + ($772)|0) + 39848|0);
       $775 = HEAP8[$773>>0]|0;
       $776 = $775&255;
       $777 = $771 | $776;
       $778 = $777&255;
       HEAP8[$773>>0] = $778;
       $779 = (($$0$$i142$i) + ($ptr$01$i141$i))|0;
       $780 = ($768|0)>(0);
       $$pre4$i143$i = HEAP32[$17>>2]|0;
       if ($780) {
        $$02$i140$i = $768;$774 = $$pre4$i143$i;$ptr$01$i141$i = $779;
       } else {
        break;
       }
      }
      $781 = ((($gfc) + (($$pre4$i143$i*48)|0)|0) + 39844|0);
      HEAP32[$781>>2] = $779;
      $782 = (($ch$1426$i) + 1)|0;
      $783 = HEAP32[$317>>2]|0;
      $784 = ($782|0)<($783|0);
      if ($784) {
       $1766 = $779;$1767 = $$pre4$i143$i;$ch$1426$i = $782;
      } else {
       $1764 = $$pre4$i143$i;$1765 = $783;
       break;
      }
     }
    } else {
     $1764 = $381;$1765 = $380;
    }
    $785 = (($gr$0429$i) + 1)|0;
    $exitcond$i = ($785|0)==(2);
    if ($exitcond$i) {
     $1213 = $1764;
     break;
    } else {
     $380 = $1765;$381 = $1764;$gr$0429$i = $785;
    }
   }
  } else {
   $$02$i133$i = 8;$795 = $$pre4$i325$i;$ptr$01$i134$i = $1760;
   while(1) {
    $786 = $ptr$01$i134$i & 7;
    $787 = (8 - ($786))|0;
    $788 = ($$02$i133$i|0)<($787|0);
    $$0$$i135$i = $788 ? $$02$i133$i : $787;
    $789 = (($$02$i133$i) - ($$0$$i135$i))|0;
    $790 = $299 >> $789;
    $791 = (($787) - ($$0$$i135$i))|0;
    $792 = $790 << $791;
    $793 = $ptr$01$i134$i >> 3;
    $794 = (((($gfc) + (($795*48)|0)|0) + ($793)|0) + 39848|0);
    $796 = HEAP8[$794>>0]|0;
    $797 = $796&255;
    $798 = $792 | $797;
    $799 = $798&255;
    HEAP8[$794>>0] = $799;
    $800 = (($$0$$i135$i) + ($ptr$01$i134$i))|0;
    $801 = ($789|0)>(0);
    $$pre4$i136$i = HEAP32[$17>>2]|0;
    if ($801) {
     $$02$i133$i = $789;$795 = $$pre4$i136$i;$ptr$01$i134$i = $800;
    } else {
     break;
    }
   }
   $802 = ((($gfc) + (($$pre4$i136$i*48)|0)|0) + 39844|0);
   HEAP32[$802>>2] = $800;
   $803 = (($gfc) + 21316|0);
   $804 = HEAP32[$803>>2]|0;
   $805 = (($gfc) + 72|0);
   $806 = HEAP32[$805>>2]|0;
   $807 = ($806|0)>(0);
   if ($807) {
    $$02$i127$i = $806;$817 = $$pre4$i136$i;$ptr$01$i128$i = $800;
   } else {
    HEAP32[$802>>2] = $800;
    $1213 = $$pre4$i136$i;
    break;
   }
   while(1) {
    $808 = $ptr$01$i128$i & 7;
    $809 = (8 - ($808))|0;
    $810 = ($$02$i127$i|0)<($809|0);
    $$0$$i129$i = $810 ? $$02$i127$i : $809;
    $811 = (($$02$i127$i) - ($$0$$i129$i))|0;
    $812 = $804 >> $811;
    $813 = (($809) - ($$0$$i129$i))|0;
    $814 = $812 << $813;
    $815 = $ptr$01$i128$i >> 3;
    $816 = (((($gfc) + (($817*48)|0)|0) + ($815)|0) + 39848|0);
    $818 = HEAP8[$816>>0]|0;
    $819 = $818&255;
    $820 = $814 | $819;
    $821 = $820&255;
    HEAP8[$816>>0] = $821;
    $822 = (($$0$$i129$i) + ($ptr$01$i128$i))|0;
    $823 = ($811|0)>(0);
    $$pre4$i130$i = HEAP32[$17>>2]|0;
    if ($823) {
     $$02$i127$i = $811;$817 = $$pre4$i130$i;$ptr$01$i128$i = $822;
    } else {
     break;
    }
   }
   $$pre562$i = HEAP32[$805>>2]|0;
   $824 = ((($gfc) + (($$pre4$i130$i*48)|0)|0) + 39844|0);
   HEAP32[$824>>2] = $822;
   $825 = ($$pre562$i|0)>(0);
   if ($825) {
    $1780 = $822;$1781 = $$pre4$i130$i;$ch$2460$i = 0;
    while(1) {
     $826 = ((($gfc) + (($ch$2460$i*5252)|0)|0) + 5072|0);
     $827 = HEAP32[$826>>2]|0;
     $828 = ((($gfc) + (($ch$2460$i*5252)|0)|0) + 5148|0);
     $829 = HEAP32[$828>>2]|0;
     $830 = (($829) + ($827))|0;
     $$02$i121$i = 12;$840 = $1781;$ptr$01$i122$i = $1780;
     while(1) {
      $831 = $ptr$01$i122$i & 7;
      $832 = (8 - ($831))|0;
      $833 = ($$02$i121$i|0)<($832|0);
      $$0$$i123$i = $833 ? $$02$i121$i : $832;
      $834 = (($$02$i121$i) - ($$0$$i123$i))|0;
      $835 = $830 >> $834;
      $836 = (($832) - ($$0$$i123$i))|0;
      $837 = $835 << $836;
      $838 = $ptr$01$i122$i >> 3;
      $839 = (((($gfc) + (($840*48)|0)|0) + ($838)|0) + 39848|0);
      $841 = HEAP8[$839>>0]|0;
      $842 = $841&255;
      $843 = $837 | $842;
      $844 = $843&255;
      HEAP8[$839>>0] = $844;
      $845 = (($$0$$i123$i) + ($ptr$01$i122$i))|0;
      $846 = ($834|0)>(0);
      $$pre4$i124$i = HEAP32[$17>>2]|0;
      if ($846) {
       $$02$i121$i = $834;$840 = $$pre4$i124$i;$ptr$01$i122$i = $845;
      } else {
       break;
      }
     }
     $847 = ((($gfc) + (($$pre4$i124$i*48)|0)|0) + 39844|0);
     HEAP32[$847>>2] = $845;
     $848 = ((($gfc) + (($ch$2460$i*5252)|0)|0) + 5076|0);
     $849 = HEAP32[$848>>2]|0;
     $850 = (($849|0) / 2)&-1;
     $$02$i115$i = 9;$860 = $$pre4$i124$i;$ptr$01$i116$i = $845;
     while(1) {
      $851 = $ptr$01$i116$i & 7;
      $852 = (8 - ($851))|0;
      $853 = ($$02$i115$i|0)<($852|0);
      $$0$$i117$i = $853 ? $$02$i115$i : $852;
      $854 = (($$02$i115$i) - ($$0$$i117$i))|0;
      $855 = $850 >> $854;
      $856 = (($852) - ($$0$$i117$i))|0;
      $857 = $855 << $856;
      $858 = $ptr$01$i116$i >> 3;
      $859 = (((($gfc) + (($860*48)|0)|0) + ($858)|0) + 39848|0);
      $861 = HEAP8[$859>>0]|0;
      $862 = $861&255;
      $863 = $857 | $862;
      $864 = $863&255;
      HEAP8[$859>>0] = $864;
      $865 = (($$0$$i117$i) + ($ptr$01$i116$i))|0;
      $866 = ($854|0)>(0);
      $$pre4$i118$i = HEAP32[$17>>2]|0;
      if ($866) {
       $$02$i115$i = $854;$860 = $$pre4$i118$i;$ptr$01$i116$i = $865;
      } else {
       break;
      }
     }
     $867 = ((($gfc) + (($$pre4$i118$i*48)|0)|0) + 39844|0);
     HEAP32[$867>>2] = $865;
     $868 = ((($gfc) + (($ch$2460$i*5252)|0)|0) + 5084|0);
     $869 = HEAP32[$868>>2]|0;
     $$02$i109$i = 8;$879 = $$pre4$i118$i;$ptr$01$i110$i = $865;
     while(1) {
      $870 = $ptr$01$i110$i & 7;
      $871 = (8 - ($870))|0;
      $872 = ($$02$i109$i|0)<($871|0);
      $$0$$i111$i = $872 ? $$02$i109$i : $871;
      $873 = (($$02$i109$i) - ($$0$$i111$i))|0;
      $874 = $869 >> $873;
      $875 = (($871) - ($$0$$i111$i))|0;
      $876 = $874 << $875;
      $877 = $ptr$01$i110$i >> 3;
      $878 = (((($gfc) + (($879*48)|0)|0) + ($877)|0) + 39848|0);
      $880 = HEAP8[$878>>0]|0;
      $881 = $880&255;
      $882 = $876 | $881;
      $883 = $882&255;
      HEAP8[$878>>0] = $883;
      $884 = (($$0$$i111$i) + ($ptr$01$i110$i))|0;
      $885 = ($873|0)>(0);
      $$pre4$i112$i = HEAP32[$17>>2]|0;
      if ($885) {
       $$02$i109$i = $873;$879 = $$pre4$i112$i;$ptr$01$i110$i = $884;
      } else {
       break;
      }
     }
     $886 = ((($gfc) + (($$pre4$i112$i*48)|0)|0) + 39844|0);
     HEAP32[$886>>2] = $884;
     $887 = ((($gfc) + (($ch$2460$i*5252)|0)|0) + 5088|0);
     $888 = HEAP32[$887>>2]|0;
     $$02$i103$i = 9;$898 = $$pre4$i112$i;$ptr$01$i104$i = $884;
     while(1) {
      $889 = $ptr$01$i104$i & 7;
      $890 = (8 - ($889))|0;
      $891 = ($$02$i103$i|0)<($890|0);
      $$0$$i105$i = $891 ? $$02$i103$i : $890;
      $892 = (($$02$i103$i) - ($$0$$i105$i))|0;
      $893 = $888 >> $892;
      $894 = (($890) - ($$0$$i105$i))|0;
      $895 = $893 << $894;
      $896 = $ptr$01$i104$i >> 3;
      $897 = (((($gfc) + (($898*48)|0)|0) + ($896)|0) + 39848|0);
      $899 = HEAP8[$897>>0]|0;
      $900 = $899&255;
      $901 = $895 | $900;
      $902 = $901&255;
      HEAP8[$897>>0] = $902;
      $903 = (($$0$$i105$i) + ($ptr$01$i104$i))|0;
      $904 = ($892|0)>(0);
      $$pre4$i106$i = HEAP32[$17>>2]|0;
      if ($904) {
       $$02$i103$i = $892;$898 = $$pre4$i106$i;$ptr$01$i104$i = $903;
      } else {
       break;
      }
     }
     $905 = ((($gfc) + (($$pre4$i106$i*48)|0)|0) + 39844|0);
     HEAP32[$905>>2] = $903;
     $906 = ((($gfc) + (($ch$2460$i*5252)|0)|0) + 5092|0);
     $907 = HEAP32[$906>>2]|0;
     $908 = ($907|0)==(0);
     if ($908) {
      $$02$i49$i = 1;$ptr$01$i50$i = $903;
      while(1) {
       $1062 = $ptr$01$i50$i & 7;
       $1063 = (8 - ($1062))|0;
       $1064 = ($$02$i49$i|0)<($1063|0);
       $$0$$i51$i = $1064 ? $$02$i49$i : $1063;
       $1065 = (($$02$i49$i) - ($$0$$i51$i))|0;
       $1066 = (($$0$$i51$i) + ($ptr$01$i50$i))|0;
       $1067 = ($1065|0)>(0);
       if ($1067) {
        $$02$i49$i = $1065;$ptr$01$i50$i = $1066;
       } else {
        break;
       }
      }
      HEAP32[$905>>2] = $1066;
      $1068 = ((($gfc) + (($ch$2460$i*5252)|0)|0) + 5100|0);
      $1069 = HEAP32[$1068>>2]|0;
      $1070 = ($1069|0)==(14);
      if ($1070) {
       HEAP32[$1068>>2] = 16;
       $$pre563$i = HEAP32[$17>>2]|0;
       $$phi$trans$insert564$i = ((($gfc) + (($$pre563$i*48)|0)|0) + 39844|0);
       $$pre565$i = HEAP32[$$phi$trans$insert564$i>>2]|0;
       $1076 = 16;$1788 = $$pre565$i;$1789 = $$pre563$i;
      } else {
       $1076 = $1069;$1788 = $1066;$1789 = $$pre4$i106$i;
      }
      $$02$i43$i = 5;$1081 = $1789;$ptr$01$i44$i = $1788;
      while(1) {
       $1071 = $ptr$01$i44$i & 7;
       $1072 = (8 - ($1071))|0;
       $1073 = ($$02$i43$i|0)<($1072|0);
       $$0$$i45$i = $1073 ? $$02$i43$i : $1072;
       $1074 = (($$02$i43$i) - ($$0$$i45$i))|0;
       $1075 = $1076 >> $1074;
       $1077 = (($1072) - ($$0$$i45$i))|0;
       $1078 = $1075 << $1077;
       $1079 = $ptr$01$i44$i >> 3;
       $1080 = (((($gfc) + (($1081*48)|0)|0) + ($1079)|0) + 39848|0);
       $1082 = HEAP8[$1080>>0]|0;
       $1083 = $1082&255;
       $1084 = $1078 | $1083;
       $1085 = $1084&255;
       HEAP8[$1080>>0] = $1085;
       $1086 = (($$0$$i45$i) + ($ptr$01$i44$i))|0;
       $1087 = ($1074|0)>(0);
       $$pre4$i46$i = HEAP32[$17>>2]|0;
       if ($1087) {
        $$02$i43$i = $1074;$1081 = $$pre4$i46$i;$ptr$01$i44$i = $1086;
       } else {
        break;
       }
      }
      $1088 = ((($gfc) + (($$pre4$i46$i*48)|0)|0) + 39844|0);
      HEAP32[$1088>>2] = $1086;
      $1089 = ((($gfc) + (($ch$2460$i*5252)|0)|0) + 5104|0);
      $1090 = HEAP32[$1089>>2]|0;
      $1091 = ($1090|0)==(14);
      if ($1091) {
       HEAP32[$1089>>2] = 16;
       $$pre566$i = HEAP32[$17>>2]|0;
       $$phi$trans$insert567$i = ((($gfc) + (($$pre566$i*48)|0)|0) + 39844|0);
       $$pre568$i = HEAP32[$$phi$trans$insert567$i>>2]|0;
       $1097 = 16;$1790 = $$pre568$i;$1791 = $$pre566$i;
      } else {
       $1097 = $1090;$1790 = $1086;$1791 = $$pre4$i46$i;
      }
      $$02$i37$i = 5;$1102 = $1791;$ptr$01$i38$i = $1790;
      while(1) {
       $1092 = $ptr$01$i38$i & 7;
       $1093 = (8 - ($1092))|0;
       $1094 = ($$02$i37$i|0)<($1093|0);
       $$0$$i39$i = $1094 ? $$02$i37$i : $1093;
       $1095 = (($$02$i37$i) - ($$0$$i39$i))|0;
       $1096 = $1097 >> $1095;
       $1098 = (($1093) - ($$0$$i39$i))|0;
       $1099 = $1096 << $1098;
       $1100 = $ptr$01$i38$i >> 3;
       $1101 = (((($gfc) + (($1102*48)|0)|0) + ($1100)|0) + 39848|0);
       $1103 = HEAP8[$1101>>0]|0;
       $1104 = $1103&255;
       $1105 = $1099 | $1104;
       $1106 = $1105&255;
       HEAP8[$1101>>0] = $1106;
       $1107 = (($$0$$i39$i) + ($ptr$01$i38$i))|0;
       $1108 = ($1095|0)>(0);
       $$pre4$i40$i = HEAP32[$17>>2]|0;
       if ($1108) {
        $$02$i37$i = $1095;$1102 = $$pre4$i40$i;$ptr$01$i38$i = $1107;
       } else {
        break;
       }
      }
      $1109 = ((($gfc) + (($$pre4$i40$i*48)|0)|0) + 39844|0);
      HEAP32[$1109>>2] = $1107;
      $1110 = ((($gfc) + (($ch$2460$i*5252)|0)|0) + 5108|0);
      $1111 = HEAP32[$1110>>2]|0;
      $1112 = ($1111|0)==(14);
      if ($1112) {
       HEAP32[$1110>>2] = 16;
       $$pre569$i = HEAP32[$17>>2]|0;
       $$phi$trans$insert570$i = ((($gfc) + (($$pre569$i*48)|0)|0) + 39844|0);
       $$pre571$i = HEAP32[$$phi$trans$insert570$i>>2]|0;
       $1118 = 16;$1792 = $$pre571$i;$1793 = $$pre569$i;
      } else {
       $1118 = $1111;$1792 = $1107;$1793 = $$pre4$i40$i;
      }
      $$02$i31$i = 5;$1123 = $1793;$ptr$01$i32$i = $1792;
      while(1) {
       $1113 = $ptr$01$i32$i & 7;
       $1114 = (8 - ($1113))|0;
       $1115 = ($$02$i31$i|0)<($1114|0);
       $$0$$i33$i = $1115 ? $$02$i31$i : $1114;
       $1116 = (($$02$i31$i) - ($$0$$i33$i))|0;
       $1117 = $1118 >> $1116;
       $1119 = (($1114) - ($$0$$i33$i))|0;
       $1120 = $1117 << $1119;
       $1121 = $ptr$01$i32$i >> 3;
       $1122 = (((($gfc) + (($1123*48)|0)|0) + ($1121)|0) + 39848|0);
       $1124 = HEAP8[$1122>>0]|0;
       $1125 = $1124&255;
       $1126 = $1120 | $1125;
       $1127 = $1126&255;
       HEAP8[$1122>>0] = $1127;
       $1128 = (($$0$$i33$i) + ($ptr$01$i32$i))|0;
       $1129 = ($1116|0)>(0);
       $$pre4$i34$i = HEAP32[$17>>2]|0;
       if ($1129) {
        $$02$i31$i = $1116;$1123 = $$pre4$i34$i;$ptr$01$i32$i = $1128;
       } else {
        break;
       }
      }
      $1130 = ((($gfc) + (($$pre4$i34$i*48)|0)|0) + 39844|0);
      HEAP32[$1130>>2] = $1128;
      $1131 = ((($gfc) + (($ch$2460$i*5252)|0)|0) + 5128|0);
      $1132 = HEAP32[$1131>>2]|0;
      $$02$i25$i = 4;$1142 = $$pre4$i34$i;$ptr$01$i26$i = $1128;
      while(1) {
       $1133 = $ptr$01$i26$i & 7;
       $1134 = (8 - ($1133))|0;
       $1135 = ($$02$i25$i|0)<($1134|0);
       $$0$$i27$i = $1135 ? $$02$i25$i : $1134;
       $1136 = (($$02$i25$i) - ($$0$$i27$i))|0;
       $1137 = $1132 >> $1136;
       $1138 = (($1134) - ($$0$$i27$i))|0;
       $1139 = $1137 << $1138;
       $1140 = $ptr$01$i26$i >> 3;
       $1141 = (((($gfc) + (($1142*48)|0)|0) + ($1140)|0) + 39848|0);
       $1143 = HEAP8[$1141>>0]|0;
       $1144 = $1143&255;
       $1145 = $1139 | $1144;
       $1146 = $1145&255;
       HEAP8[$1141>>0] = $1146;
       $1147 = (($$0$$i27$i) + ($ptr$01$i26$i))|0;
       $1148 = ($1136|0)>(0);
       $$pre4$i28$i = HEAP32[$17>>2]|0;
       if ($1148) {
        $$02$i25$i = $1136;$1142 = $$pre4$i28$i;$ptr$01$i26$i = $1147;
       } else {
        break;
       }
      }
      $1149 = ((($gfc) + (($$pre4$i28$i*48)|0)|0) + 39844|0);
      HEAP32[$1149>>2] = $1147;
      $1150 = ((($gfc) + (($ch$2460$i*5252)|0)|0) + 5132|0);
      $1151 = HEAP32[$1150>>2]|0;
      $$02$i19$i = 3;$1161 = $$pre4$i28$i;$ptr$01$i20$i = $1147;
      while(1) {
       $1152 = $ptr$01$i20$i & 7;
       $1153 = (8 - ($1152))|0;
       $1154 = ($$02$i19$i|0)<($1153|0);
       $$0$$i21$i = $1154 ? $$02$i19$i : $1153;
       $1155 = (($$02$i19$i) - ($$0$$i21$i))|0;
       $1156 = $1151 >> $1155;
       $1157 = (($1153) - ($$0$$i21$i))|0;
       $1158 = $1156 << $1157;
       $1159 = $ptr$01$i20$i >> 3;
       $1160 = (((($gfc) + (($1161*48)|0)|0) + ($1159)|0) + 39848|0);
       $1162 = HEAP8[$1160>>0]|0;
       $1163 = $1162&255;
       $1164 = $1158 | $1163;
       $1165 = $1164&255;
       HEAP8[$1160>>0] = $1165;
       $1166 = (($$0$$i21$i) + ($ptr$01$i20$i))|0;
       $1167 = ($1155|0)>(0);
       $$pre4$i22$i = HEAP32[$17>>2]|0;
       if ($1167) {
        $$02$i19$i = $1155;$1161 = $$pre4$i22$i;$ptr$01$i20$i = $1166;
       } else {
        break;
       }
      }
      $1168 = ((($gfc) + (($$pre4$i22$i*48)|0)|0) + 39844|0);
      HEAP32[$1168>>2] = $1166;
      $1786 = $1166;$1787 = $$pre4$i22$i;
     } else {
      $$02$i97$i = 1;$918 = $$pre4$i106$i;$ptr$01$i98$i = $903;
      while(1) {
       $909 = $ptr$01$i98$i & 7;
       $910 = (8 - ($909))|0;
       $911 = ($$02$i97$i|0)<($910|0);
       $$0$$i99$i = $911 ? $$02$i97$i : $910;
       $912 = (($$02$i97$i) - ($$0$$i99$i))|0;
       $913 = 1 >>> $912;
       $914 = (($910) - ($$0$$i99$i))|0;
       $915 = $913 << $914;
       $916 = $ptr$01$i98$i >> 3;
       $917 = (((($gfc) + (($918*48)|0)|0) + ($916)|0) + 39848|0);
       $919 = HEAP8[$917>>0]|0;
       $920 = $919&255;
       $921 = $915 | $920;
       $922 = $921&255;
       HEAP8[$917>>0] = $922;
       $923 = (($$0$$i99$i) + ($ptr$01$i98$i))|0;
       $924 = ($912|0)>(0);
       $$pre4$i100$i = HEAP32[$17>>2]|0;
       if ($924) {
        $$02$i97$i = $912;$918 = $$pre4$i100$i;$ptr$01$i98$i = $923;
       } else {
        break;
       }
      }
      $925 = ((($gfc) + (($$pre4$i100$i*48)|0)|0) + 39844|0);
      HEAP32[$925>>2] = $923;
      $926 = HEAP32[$906>>2]|0;
      $$02$i91$i = 2;$936 = $$pre4$i100$i;$ptr$01$i92$i = $923;
      while(1) {
       $927 = $ptr$01$i92$i & 7;
       $928 = (8 - ($927))|0;
       $929 = ($$02$i91$i|0)<($928|0);
       $$0$$i93$i = $929 ? $$02$i91$i : $928;
       $930 = (($$02$i91$i) - ($$0$$i93$i))|0;
       $931 = $926 >> $930;
       $932 = (($928) - ($$0$$i93$i))|0;
       $933 = $931 << $932;
       $934 = $ptr$01$i92$i >> 3;
       $935 = (((($gfc) + (($936*48)|0)|0) + ($934)|0) + 39848|0);
       $937 = HEAP8[$935>>0]|0;
       $938 = $937&255;
       $939 = $933 | $938;
       $940 = $939&255;
       HEAP8[$935>>0] = $940;
       $941 = (($$0$$i93$i) + ($ptr$01$i92$i))|0;
       $942 = ($930|0)>(0);
       $$pre4$i94$i = HEAP32[$17>>2]|0;
       if ($942) {
        $$02$i91$i = $930;$936 = $$pre4$i94$i;$ptr$01$i92$i = $941;
       } else {
        break;
       }
      }
      $943 = ((($gfc) + (($$pre4$i94$i*48)|0)|0) + 39844|0);
      HEAP32[$943>>2] = $941;
      $944 = ((($gfc) + (($ch$2460$i*5252)|0)|0) + 5096|0);
      $945 = HEAP32[$944>>2]|0;
      $$02$i85$i = 1;$955 = $$pre4$i94$i;$ptr$01$i86$i = $941;
      while(1) {
       $946 = $ptr$01$i86$i & 7;
       $947 = (8 - ($946))|0;
       $948 = ($$02$i85$i|0)<($947|0);
       $$0$$i87$i = $948 ? $$02$i85$i : $947;
       $949 = (($$02$i85$i) - ($$0$$i87$i))|0;
       $950 = $945 >> $949;
       $951 = (($947) - ($$0$$i87$i))|0;
       $952 = $950 << $951;
       $953 = $ptr$01$i86$i >> 3;
       $954 = (((($gfc) + (($955*48)|0)|0) + ($953)|0) + 39848|0);
       $956 = HEAP8[$954>>0]|0;
       $957 = $956&255;
       $958 = $952 | $957;
       $959 = $958&255;
       HEAP8[$954>>0] = $959;
       $960 = (($$0$$i87$i) + ($ptr$01$i86$i))|0;
       $961 = ($949|0)>(0);
       $$pre4$i88$i = HEAP32[$17>>2]|0;
       if ($961) {
        $$02$i85$i = $949;$955 = $$pre4$i88$i;$ptr$01$i86$i = $960;
       } else {
        break;
       }
      }
      $962 = ((($gfc) + (($$pre4$i88$i*48)|0)|0) + 39844|0);
      HEAP32[$962>>2] = $960;
      $963 = ((($gfc) + (($ch$2460$i*5252)|0)|0) + 5100|0);
      $964 = HEAP32[$963>>2]|0;
      $965 = ($964|0)==(14);
      if ($965) {
       HEAP32[$963>>2] = 16;
       $$pre574$i = HEAP32[$17>>2]|0;
       $$phi$trans$insert575$i = ((($gfc) + (($$pre574$i*48)|0)|0) + 39844|0);
       $$pre576$i = HEAP32[$$phi$trans$insert575$i>>2]|0;
       $1782 = $$pre576$i;$1783 = $$pre574$i;$971 = 16;
      } else {
       $1782 = $960;$1783 = $$pre4$i88$i;$971 = $964;
      }
      $$02$i79$i = 5;$976 = $1783;$ptr$01$i80$i = $1782;
      while(1) {
       $966 = $ptr$01$i80$i & 7;
       $967 = (8 - ($966))|0;
       $968 = ($$02$i79$i|0)<($967|0);
       $$0$$i81$i = $968 ? $$02$i79$i : $967;
       $969 = (($$02$i79$i) - ($$0$$i81$i))|0;
       $970 = $971 >> $969;
       $972 = (($967) - ($$0$$i81$i))|0;
       $973 = $970 << $972;
       $974 = $ptr$01$i80$i >> 3;
       $975 = (((($gfc) + (($976*48)|0)|0) + ($974)|0) + 39848|0);
       $977 = HEAP8[$975>>0]|0;
       $978 = $977&255;
       $979 = $973 | $978;
       $980 = $979&255;
       HEAP8[$975>>0] = $980;
       $981 = (($$0$$i81$i) + ($ptr$01$i80$i))|0;
       $982 = ($969|0)>(0);
       $$pre4$i82$i = HEAP32[$17>>2]|0;
       if ($982) {
        $$02$i79$i = $969;$976 = $$pre4$i82$i;$ptr$01$i80$i = $981;
       } else {
        break;
       }
      }
      $983 = ((($gfc) + (($$pre4$i82$i*48)|0)|0) + 39844|0);
      HEAP32[$983>>2] = $981;
      $984 = ((($gfc) + (($ch$2460$i*5252)|0)|0) + 5104|0);
      $985 = HEAP32[$984>>2]|0;
      $986 = ($985|0)==(14);
      if ($986) {
       HEAP32[$984>>2] = 16;
       $$pre577$i = HEAP32[$17>>2]|0;
       $$phi$trans$insert578$i = ((($gfc) + (($$pre577$i*48)|0)|0) + 39844|0);
       $$pre579$i = HEAP32[$$phi$trans$insert578$i>>2]|0;
       $1784 = $$pre579$i;$1785 = $$pre577$i;$992 = 16;
      } else {
       $1784 = $981;$1785 = $$pre4$i82$i;$992 = $985;
      }
      $$02$i73$i = 5;$997 = $1785;$ptr$01$i74$i = $1784;
      while(1) {
       $987 = $ptr$01$i74$i & 7;
       $988 = (8 - ($987))|0;
       $989 = ($$02$i73$i|0)<($988|0);
       $$0$$i75$i = $989 ? $$02$i73$i : $988;
       $990 = (($$02$i73$i) - ($$0$$i75$i))|0;
       $991 = $992 >> $990;
       $993 = (($988) - ($$0$$i75$i))|0;
       $994 = $991 << $993;
       $995 = $ptr$01$i74$i >> 3;
       $996 = (((($gfc) + (($997*48)|0)|0) + ($995)|0) + 39848|0);
       $998 = HEAP8[$996>>0]|0;
       $999 = $998&255;
       $1000 = $994 | $999;
       $1001 = $1000&255;
       HEAP8[$996>>0] = $1001;
       $1002 = (($$0$$i75$i) + ($ptr$01$i74$i))|0;
       $1003 = ($990|0)>(0);
       $$pre4$i76$i = HEAP32[$17>>2]|0;
       if ($1003) {
        $$02$i73$i = $990;$997 = $$pre4$i76$i;$ptr$01$i74$i = $1002;
       } else {
        break;
       }
      }
      $1004 = ((($gfc) + (($$pre4$i76$i*48)|0)|0) + 39844|0);
      HEAP32[$1004>>2] = $1002;
      $1005 = ((($gfc) + (($ch$2460$i*5252)|0)|0) + 5112|0);
      $1006 = HEAP32[$1005>>2]|0;
      $$02$i67$i = 3;$1016 = $$pre4$i76$i;$ptr$01$i68$i = $1002;
      while(1) {
       $1007 = $ptr$01$i68$i & 7;
       $1008 = (8 - ($1007))|0;
       $1009 = ($$02$i67$i|0)<($1008|0);
       $$0$$i69$i = $1009 ? $$02$i67$i : $1008;
       $1010 = (($$02$i67$i) - ($$0$$i69$i))|0;
       $1011 = $1006 >> $1010;
       $1012 = (($1008) - ($$0$$i69$i))|0;
       $1013 = $1011 << $1012;
       $1014 = $ptr$01$i68$i >> 3;
       $1015 = (((($gfc) + (($1016*48)|0)|0) + ($1014)|0) + 39848|0);
       $1017 = HEAP8[$1015>>0]|0;
       $1018 = $1017&255;
       $1019 = $1013 | $1018;
       $1020 = $1019&255;
       HEAP8[$1015>>0] = $1020;
       $1021 = (($$0$$i69$i) + ($ptr$01$i68$i))|0;
       $1022 = ($1010|0)>(0);
       $$pre4$i70$i = HEAP32[$17>>2]|0;
       if ($1022) {
        $$02$i67$i = $1010;$1016 = $$pre4$i70$i;$ptr$01$i68$i = $1021;
       } else {
        break;
       }
      }
      $1023 = ((($gfc) + (($$pre4$i70$i*48)|0)|0) + 39844|0);
      HEAP32[$1023>>2] = $1021;
      $1024 = ((($gfc) + (($ch$2460$i*5252)|0)|0) + 5116|0);
      $1025 = HEAP32[$1024>>2]|0;
      $$02$i61$i = 3;$1035 = $$pre4$i70$i;$ptr$01$i62$i = $1021;
      while(1) {
       $1026 = $ptr$01$i62$i & 7;
       $1027 = (8 - ($1026))|0;
       $1028 = ($$02$i61$i|0)<($1027|0);
       $$0$$i63$i = $1028 ? $$02$i61$i : $1027;
       $1029 = (($$02$i61$i) - ($$0$$i63$i))|0;
       $1030 = $1025 >> $1029;
       $1031 = (($1027) - ($$0$$i63$i))|0;
       $1032 = $1030 << $1031;
       $1033 = $ptr$01$i62$i >> 3;
       $1034 = (((($gfc) + (($1035*48)|0)|0) + ($1033)|0) + 39848|0);
       $1036 = HEAP8[$1034>>0]|0;
       $1037 = $1036&255;
       $1038 = $1032 | $1037;
       $1039 = $1038&255;
       HEAP8[$1034>>0] = $1039;
       $1040 = (($$0$$i63$i) + ($ptr$01$i62$i))|0;
       $1041 = ($1029|0)>(0);
       $$pre4$i64$i = HEAP32[$17>>2]|0;
       if ($1041) {
        $$02$i61$i = $1029;$1035 = $$pre4$i64$i;$ptr$01$i62$i = $1040;
       } else {
        break;
       }
      }
      $1042 = ((($gfc) + (($$pre4$i64$i*48)|0)|0) + 39844|0);
      HEAP32[$1042>>2] = $1040;
      $1043 = ((($gfc) + (($ch$2460$i*5252)|0)|0) + 5120|0);
      $1044 = HEAP32[$1043>>2]|0;
      $$02$i55$i = 3;$1054 = $$pre4$i64$i;$ptr$01$i56$i = $1040;
      while(1) {
       $1045 = $ptr$01$i56$i & 7;
       $1046 = (8 - ($1045))|0;
       $1047 = ($$02$i55$i|0)<($1046|0);
       $$0$$i57$i = $1047 ? $$02$i55$i : $1046;
       $1048 = (($$02$i55$i) - ($$0$$i57$i))|0;
       $1049 = $1044 >> $1048;
       $1050 = (($1046) - ($$0$$i57$i))|0;
       $1051 = $1049 << $1050;
       $1052 = $ptr$01$i56$i >> 3;
       $1053 = (((($gfc) + (($1054*48)|0)|0) + ($1052)|0) + 39848|0);
       $1055 = HEAP8[$1053>>0]|0;
       $1056 = $1055&255;
       $1057 = $1051 | $1056;
       $1058 = $1057&255;
       HEAP8[$1053>>0] = $1058;
       $1059 = (($$0$$i57$i) + ($ptr$01$i56$i))|0;
       $1060 = ($1048|0)>(0);
       $$pre4$i58$i = HEAP32[$17>>2]|0;
       if ($1060) {
        $$02$i55$i = $1048;$1054 = $$pre4$i58$i;$ptr$01$i56$i = $1059;
       } else {
        break;
       }
      }
      $1061 = ((($gfc) + (($$pre4$i58$i*48)|0)|0) + 39844|0);
      HEAP32[$1061>>2] = $1059;
      $1786 = $1059;$1787 = $$pre4$i58$i;
     }
     $1169 = ((($gfc) + (($ch$2460$i*5252)|0)|0) + 5140|0);
     $1170 = HEAP32[$1169>>2]|0;
     $$02$i13$i = 1;$1180 = $1787;$ptr$01$i14$i = $1786;
     while(1) {
      $1171 = $ptr$01$i14$i & 7;
      $1172 = (8 - ($1171))|0;
      $1173 = ($$02$i13$i|0)<($1172|0);
      $$0$$i15$i = $1173 ? $$02$i13$i : $1172;
      $1174 = (($$02$i13$i) - ($$0$$i15$i))|0;
      $1175 = $1170 >> $1174;
      $1176 = (($1172) - ($$0$$i15$i))|0;
      $1177 = $1175 << $1176;
      $1178 = $ptr$01$i14$i >> 3;
      $1179 = (((($gfc) + (($1180*48)|0)|0) + ($1178)|0) + 39848|0);
      $1181 = HEAP8[$1179>>0]|0;
      $1182 = $1181&255;
      $1183 = $1177 | $1182;
      $1184 = $1183&255;
      HEAP8[$1179>>0] = $1184;
      $1185 = (($$0$$i15$i) + ($ptr$01$i14$i))|0;
      $1186 = ($1174|0)>(0);
      $$pre4$i16$i = HEAP32[$17>>2]|0;
      if ($1186) {
       $$02$i13$i = $1174;$1180 = $$pre4$i16$i;$ptr$01$i14$i = $1185;
      } else {
       break;
      }
     }
     $1187 = ((($gfc) + (($$pre4$i16$i*48)|0)|0) + 39844|0);
     HEAP32[$1187>>2] = $1185;
     $1188 = ((($gfc) + (($ch$2460$i*5252)|0)|0) + 5144|0);
     $1189 = HEAP32[$1188>>2]|0;
     $$02$i7$i = 1;$1199 = $$pre4$i16$i;$ptr$01$i8$i = $1185;
     while(1) {
      $1190 = $ptr$01$i8$i & 7;
      $1191 = (8 - ($1190))|0;
      $1192 = ($$02$i7$i|0)<($1191|0);
      $$0$$i9$i = $1192 ? $$02$i7$i : $1191;
      $1193 = (($$02$i7$i) - ($$0$$i9$i))|0;
      $1194 = $1189 >> $1193;
      $1195 = (($1191) - ($$0$$i9$i))|0;
      $1196 = $1194 << $1195;
      $1197 = $ptr$01$i8$i >> 3;
      $1198 = (((($gfc) + (($1199*48)|0)|0) + ($1197)|0) + 39848|0);
      $1200 = HEAP8[$1198>>0]|0;
      $1201 = $1200&255;
      $1202 = $1196 | $1201;
      $1203 = $1202&255;
      HEAP8[$1198>>0] = $1203;
      $1204 = (($$0$$i9$i) + ($ptr$01$i8$i))|0;
      $1205 = ($1193|0)>(0);
      $$pre4$i10$i = HEAP32[$17>>2]|0;
      if ($1205) {
       $$02$i7$i = $1193;$1199 = $$pre4$i10$i;$ptr$01$i8$i = $1204;
      } else {
       break;
      }
     }
     $1206 = ((($gfc) + (($$pre4$i10$i*48)|0)|0) + 39844|0);
     HEAP32[$1206>>2] = $1204;
     $1207 = (($ch$2460$i) + 1)|0;
     $1208 = HEAP32[$805>>2]|0;
     $1209 = ($1207|0)<($1208|0);
     if ($1209) {
      $1780 = $1204;$1781 = $$pre4$i10$i;$ch$2460$i = $1207;
     } else {
      $1213 = $$pre4$i10$i;
      break;
     }
    }
   } else {
    $1213 = $$pre4$i130$i;
   }
  }
 } while(0);
 $1210 = HEAP32[$98>>2]|0;
 $1211 = ($1210|0)==(0);
 if ($1211) {
  $1215 = $1213;
 } else {
  $1212 = ((($gfc) + (($1213*48)|0)|0) + 39848|0);
  _CRC_writeheader($gfc,$1212);
  $$pre561$i = HEAP32[$17>>2]|0;
  $1215 = $$pre561$i;
 }
 $1214 = (($1215) + 1)|0;
 $1216 = $1214 & 255;
 HEAP32[$17>>2] = $1216;
 $1217 = ((($gfc) + (($1215*48)|0)|0) + 39840|0);
 $1218 = HEAP32[$1217>>2]|0;
 $1219 = (($1218) + ($14))|0;
 $1220 = ((($gfc) + (($1216*48)|0)|0) + 39840|0);
 HEAP32[$1220>>2] = $1219;
 $1221 = HEAP32[$17>>2]|0;
 $1222 = (($gfc) + 52132|0);
 $1223 = HEAP32[$1222>>2]|0;
 $1224 = ($1221|0)==($1223|0);
 if ($1224) {
  _lame_errorf($gfc,600,$vararg_buffer19);
 }
 $1283 = HEAP32[$21>>2]|0;
 $1284 = $1283 << 3;
 $1285 = HEAP32[$62>>2]|0;
 $1286 = ($1285|0)==(1);
 $1287 = (($gfc) + 72|0);
 if ($1286) {
  $1295 = (($gfc) + 300|0);
  $1296 = (($gfc) + 296|0);
  $1297 = (($gfc) + 292|0);
  $1298 = (($gfc) + 284|0);
  $1299 = (($gfc) + 21464|0);
  $$pre$i1 = HEAP32[$1287>>2]|0;
  $1301 = $$pre$i1;$gr$050$i = 0;$tot_bits$049$i = 0;
  while(1) {
   $1300 = ($1301|0)>(0);
   if ($1300) {
    $ch$041$i = 0;$tot_bits$140$i = $tot_bits$049$i;
    while(1) {
     $1302 = (((($gfc) + (($gr$050$i*10504)|0)|0) + (($ch$041$i*5252)|0)|0) + 304|0);
     $1303 = (((($gfc) + (($gr$050$i*10504)|0)|0) + (($ch$041$i*5252)|0)|0) + 5088|0);
     $1304 = HEAP32[$1303>>2]|0;
     $1305 = (141488 + ($1304<<2)|0);
     $1306 = HEAP32[$1305>>2]|0;
     $1307 = (141552 + ($1304<<2)|0);
     $1308 = HEAP32[$1307>>2]|0;
     $1309 = (((($gfc) + (($gr$050$i*10504)|0)|0) + (($ch$041$i*5252)|0)|0) + 5172|0);
     $1310 = HEAP32[$1309>>2]|0;
     $1311 = ($1310|0)>(0);
     L331: do {
      if ($1311) {
       $1312 = ($1306|0)>(0);
       if ($1312) {
        $1795 = $1310;$data_bits$033$us$i = 0;$sfb$034$us$i = 0;
       } else {
        $data_bits$033$i = 0;$sfb$034$i = 0;
        while(1) {
         $1361 = ((((($gfc) + (($gr$050$i*10504)|0)|0) + (($ch$041$i*5252)|0)|0) + ($sfb$034$i<<2)|0) + 4912|0);
         $1362 = HEAP32[$1361>>2]|0;
         $1363 = ($1362|0)==(-1);
         $1364 = $1363 ? 0 : $1306;
         $data_bits$033$$i = (($1364) + ($data_bits$033$i))|0;
         $1365 = (($sfb$034$i) + 1)|0;
         $exitcond88 = ($1365|0)==($1310|0);
         if ($exitcond88) {
          $data_bits$0$lcssa$i = $data_bits$033$$i;$sfb$0$lcssa$i = $1310;
          break L331;
         } else {
          $data_bits$033$i = $data_bits$033$$i;$sfb$034$i = $1365;
         }
        }
       }
       while(1) {
        $1313 = ((((($gfc) + (($gr$050$i*10504)|0)|0) + (($ch$041$i*5252)|0)|0) + ($sfb$034$us$i<<2)|0) + 4912|0);
        $1314 = HEAP32[$1313>>2]|0;
        $1315 = ($1314|0)==(-1);
        if ($1315) {
         $1360 = $1795;$data_bits$1$us$i = $data_bits$033$us$i;
        } else {
         $$01$i$us$i = $1306;
         while(1) {
          $1316 = HEAP32[$1295>>2]|0;
          $1317 = ($1316|0)==(0);
          if ($1317) {
           HEAP32[$1295>>2] = 8;
           $1318 = HEAP32[$1296>>2]|0;
           $1319 = (($1318) + 1)|0;
           HEAP32[$1296>>2] = $1319;
           $1320 = HEAP32[$1222>>2]|0;
           $1321 = ((($gfc) + (($1320*48)|0)|0) + 39840|0);
           $1322 = HEAP32[$1321>>2]|0;
           $1323 = HEAP32[$1297>>2]|0;
           $1324 = ($1322|0)==($1323|0);
           if ($1324) {
            $1325 = HEAP32[$1298>>2]|0;
            $1326 = (($1325) + ($1319)|0);
            $1327 = ((($gfc) + (($1320*48)|0)|0) + 39848|0);
            $1328 = HEAP32[$21>>2]|0;
            _memcpy(($1326|0),($1327|0),($1328|0))|0;
            $1329 = HEAP32[$21>>2]|0;
            $1330 = HEAP32[$1296>>2]|0;
            $1331 = (($1330) + ($1329))|0;
            HEAP32[$1296>>2] = $1331;
            $1332 = $1329 << 3;
            $1333 = HEAP32[$1297>>2]|0;
            $1334 = (($1333) + ($1332))|0;
            HEAP32[$1297>>2] = $1334;
            $1335 = HEAP32[$1222>>2]|0;
            $1336 = (($1335) + 1)|0;
            $1337 = $1336 & 255;
            HEAP32[$1222>>2] = $1337;
            $1340 = $1331;
           } else {
            $1340 = $1319;
           }
           $1338 = HEAP32[$1298>>2]|0;
           $1339 = (($1338) + ($1340)|0);
           HEAP8[$1339>>0] = 0;
           $$pre$i$us$i = HEAP32[$1295>>2]|0;
           $1342 = $$pre$i$us$i;
          } else {
           $1342 = $1316;
          }
          $1341 = ($$01$i$us$i|0)<($1342|0);
          $$0$$i$us$i = $1341 ? $$01$i$us$i : $1342;
          $1343 = (($$01$i$us$i) - ($$0$$i$us$i))|0;
          $1344 = (($1342) - ($$0$$i$us$i))|0;
          HEAP32[$1295>>2] = $1344;
          $1345 = $1314 >> $1343;
          $1346 = $1345 << $1344;
          $1347 = HEAP32[$1296>>2]|0;
          $1348 = HEAP32[$1298>>2]|0;
          $1349 = (($1348) + ($1347)|0);
          $1350 = HEAP8[$1349>>0]|0;
          $1351 = $1350&255;
          $1352 = $1346 | $1351;
          $1353 = $1352&255;
          HEAP8[$1349>>0] = $1353;
          $1354 = HEAP32[$1297>>2]|0;
          $1355 = (($1354) + ($$0$$i$us$i))|0;
          HEAP32[$1297>>2] = $1355;
          $1356 = ($1343|0)>(0);
          if ($1356) {
           $$01$i$us$i = $1343;
          } else {
           break;
          }
         }
         $$pre96$pre$i = HEAP32[$1309>>2]|0;
         $1357 = (($data_bits$033$us$i) + ($1306))|0;
         $1360 = $$pre96$pre$i;$data_bits$1$us$i = $1357;
        }
        $1358 = (($sfb$034$us$i) + 1)|0;
        $1359 = ($1358|0)<($1360|0);
        if ($1359) {
         $1795 = $1360;$data_bits$033$us$i = $data_bits$1$us$i;$sfb$034$us$i = $1358;
        } else {
         $data_bits$0$lcssa$i = $data_bits$1$us$i;$sfb$0$lcssa$i = $1358;
         break;
        }
       }
      } else {
       $data_bits$0$lcssa$i = 0;$sfb$0$lcssa$i = 0;
      }
     } while(0);
     $1366 = (((($gfc) + (($gr$050$i*10504)|0)|0) + (($ch$041$i*5252)|0)|0) + 5164|0);
     $1367 = HEAP32[$1366>>2]|0;
     $1368 = ($sfb$0$lcssa$i|0)<($1367|0);
     if ($1368) {
      $1369 = ($1308|0)>(0);
      $1796 = $1367;$data_bits$236$i = $data_bits$0$lcssa$i;$sfb$137$i = $sfb$0$lcssa$i;
      while(1) {
       $1370 = ((((($gfc) + (($gr$050$i*10504)|0)|0) + (($ch$041$i*5252)|0)|0) + ($sfb$137$i<<2)|0) + 4912|0);
       $1371 = HEAP32[$1370>>2]|0;
       $1372 = ($1371|0)==(-1);
       if ($1372) {
        $1417 = $1796;$data_bits$3$i = $data_bits$236$i;
       } else {
        if ($1369) {
         $$01$i4$i = $1308;
         while(1) {
          $1373 = HEAP32[$1295>>2]|0;
          $1374 = ($1373|0)==(0);
          if ($1374) {
           HEAP32[$1295>>2] = 8;
           $1375 = HEAP32[$1296>>2]|0;
           $1376 = (($1375) + 1)|0;
           HEAP32[$1296>>2] = $1376;
           $1377 = HEAP32[$1222>>2]|0;
           $1378 = ((($gfc) + (($1377*48)|0)|0) + 39840|0);
           $1379 = HEAP32[$1378>>2]|0;
           $1380 = HEAP32[$1297>>2]|0;
           $1381 = ($1379|0)==($1380|0);
           if ($1381) {
            $1382 = HEAP32[$1298>>2]|0;
            $1383 = (($1382) + ($1376)|0);
            $1384 = ((($gfc) + (($1377*48)|0)|0) + 39848|0);
            $1385 = HEAP32[$21>>2]|0;
            _memcpy(($1383|0),($1384|0),($1385|0))|0;
            $1386 = HEAP32[$21>>2]|0;
            $1387 = HEAP32[$1296>>2]|0;
            $1388 = (($1387) + ($1386))|0;
            HEAP32[$1296>>2] = $1388;
            $1389 = $1386 << 3;
            $1390 = HEAP32[$1297>>2]|0;
            $1391 = (($1390) + ($1389))|0;
            HEAP32[$1297>>2] = $1391;
            $1392 = HEAP32[$1222>>2]|0;
            $1393 = (($1392) + 1)|0;
            $1394 = $1393 & 255;
            HEAP32[$1222>>2] = $1394;
            $1397 = $1388;
           } else {
            $1397 = $1376;
           }
           $1395 = HEAP32[$1298>>2]|0;
           $1396 = (($1395) + ($1397)|0);
           HEAP8[$1396>>0] = 0;
           $$pre$i5$i = HEAP32[$1295>>2]|0;
           $1399 = $$pre$i5$i;
          } else {
           $1399 = $1373;
          }
          $1398 = ($$01$i4$i|0)<($1399|0);
          $$0$$i6$i = $1398 ? $$01$i4$i : $1399;
          $1400 = (($$01$i4$i) - ($$0$$i6$i))|0;
          $1401 = (($1399) - ($$0$$i6$i))|0;
          HEAP32[$1295>>2] = $1401;
          $1402 = $1371 >> $1400;
          $1403 = $1402 << $1401;
          $1404 = HEAP32[$1296>>2]|0;
          $1405 = HEAP32[$1298>>2]|0;
          $1406 = (($1405) + ($1404)|0);
          $1407 = HEAP8[$1406>>0]|0;
          $1408 = $1407&255;
          $1409 = $1403 | $1408;
          $1410 = $1409&255;
          HEAP8[$1406>>0] = $1410;
          $1411 = HEAP32[$1297>>2]|0;
          $1412 = (($1411) + ($$0$$i6$i))|0;
          HEAP32[$1297>>2] = $1412;
          $1413 = ($1400|0)>(0);
          if ($1413) {
           $$01$i4$i = $1400;
          } else {
           break;
          }
         }
         $$pre98$pre$i = HEAP32[$1366>>2]|0;
         $$pre98$i = $$pre98$pre$i;
        } else {
         $$pre98$i = $1796;
        }
        $1414 = (($data_bits$236$i) + ($1308))|0;
        $1417 = $$pre98$i;$data_bits$3$i = $1414;
       }
       $1415 = (($sfb$137$i) + 1)|0;
       $1416 = ($1415|0)<($1417|0);
       if ($1416) {
        $1796 = $1417;$data_bits$236$i = $data_bits$3$i;$sfb$137$i = $1415;
       } else {
        $data_bits$2$lcssa$i = $data_bits$3$i;
        break;
       }
      }
     } else {
      $data_bits$2$lcssa$i = $data_bits$0$lcssa$i;
     }
     $1418 = (((($gfc) + (($gr$050$i*10504)|0)|0) + (($ch$041$i*5252)|0)|0) + 5092|0);
     $1419 = HEAP32[$1418>>2]|0;
     $1420 = ($1419|0)==(2);
     if ($1420) {
      $1421 = HEAP32[$1299>>2]|0;
      $1422 = ($1421*3)|0;
      $1423 = (((($gfc) + (($gr$050$i*10504)|0)|0) + (($ch$041$i*5252)|0)|0) + 5076|0);
      $1424 = HEAP32[$1423>>2]|0;
      $1425 = ($1422|0)>($1424|0);
      $$$i8$i = $1425 ? $1424 : $1422;
      $1426 = (((($gfc) + (($gr$050$i*10504)|0)|0) + (($ch$041$i*5252)|0)|0) + 5100|0);
      $1427 = HEAP32[$1426>>2]|0;
      $1428 = (_Huffmancode($gfc,$1427,0,$$$i8$i,$1302)|0);
      $1429 = (((($gfc) + (($gr$050$i*10504)|0)|0) + (($ch$041$i*5252)|0)|0) + 5104|0);
      $1430 = HEAP32[$1429>>2]|0;
      $1431 = HEAP32[$1423>>2]|0;
      $1432 = (_Huffmancode($gfc,$1430,$$$i8$i,$1431,$1302)|0);
      $1433 = (($1432) + ($1428))|0;
      $$pn$i = $1433;
     } else {
      $1434 = (((($gfc) + (($gr$050$i*10504)|0)|0) + (($ch$041$i*5252)|0)|0) + 5076|0);
      $1435 = HEAP32[$1434>>2]|0;
      $1436 = (((($gfc) + (($gr$050$i*10504)|0)|0) + (($ch$041$i*5252)|0)|0) + 5128|0);
      $1437 = HEAP32[$1436>>2]|0;
      $1438 = (($1437) + 1)|0;
      $1439 = ((($gfc) + ($1438<<2)|0) + 21360|0);
      $1440 = HEAP32[$1439>>2]|0;
      $1441 = (((($gfc) + (($gr$050$i*10504)|0)|0) + (($ch$041$i*5252)|0)|0) + 5132|0);
      $1442 = HEAP32[$1441>>2]|0;
      $1443 = (($1437) + 2)|0;
      $1444 = (($1443) + ($1442))|0;
      $1445 = ((($gfc) + ($1444<<2)|0) + 21360|0);
      $1446 = HEAP32[$1445>>2]|0;
      $1447 = ($1440|0)>($1435|0);
      $$$i9$i = $1447 ? $1435 : $1440;
      $1448 = ($1446|0)>($1435|0);
      $region2Start$0$i10$i = $1448 ? $1435 : $1446;
      $1449 = (((($gfc) + (($gr$050$i*10504)|0)|0) + (($ch$041$i*5252)|0)|0) + 5100|0);
      $1450 = HEAP32[$1449>>2]|0;
      $1451 = (_Huffmancode($gfc,$1450,0,$$$i9$i,$1302)|0);
      $1452 = (((($gfc) + (($gr$050$i*10504)|0)|0) + (($ch$041$i*5252)|0)|0) + 5104|0);
      $1453 = HEAP32[$1452>>2]|0;
      $1454 = (_Huffmancode($gfc,$1453,$$$i9$i,$region2Start$0$i10$i,$1302)|0);
      $1455 = (($1454) + ($1451))|0;
      $1456 = (((($gfc) + (($gr$050$i*10504)|0)|0) + (($ch$041$i*5252)|0)|0) + 5108|0);
      $1457 = HEAP32[$1456>>2]|0;
      $1458 = (_Huffmancode($gfc,$1457,$region2Start$0$i10$i,$1435,$1302)|0);
      $1459 = (($1455) + ($1458))|0;
      $$pn$i = $1459;
     }
     $1460 = (_huffman_coder_count1($gfc,$1302)|0);
     $data_bits$4$i = (($data_bits$2$lcssa$i) + ($tot_bits$140$i))|0;
     $1461 = (($data_bits$4$i) + ($$pn$i))|0;
     $1462 = (($1461) + ($1460))|0;
     $1463 = (($ch$041$i) + 1)|0;
     $1464 = HEAP32[$1287>>2]|0;
     $1465 = ($1463|0)<($1464|0);
     if ($1465) {
      $ch$041$i = $1463;$tot_bits$140$i = $1462;
     } else {
      $1794 = $1464;$tot_bits$1$lcssa$i = $1462;
      break;
     }
    }
   } else {
    $1794 = $1301;$tot_bits$1$lcssa$i = $tot_bits$049$i;
   }
   $1466 = (($gr$050$i) + 1)|0;
   $exitcond$i6 = ($1466|0)==(2);
   if ($exitcond$i6) {
    $tot_bits$3$i = $tot_bits$1$lcssa$i;
    break;
   } else {
    $1301 = $1794;$gr$050$i = $1466;$tot_bits$049$i = $tot_bits$1$lcssa$i;
   }
  }
 } else {
  $1288 = HEAP32[$1287>>2]|0;
  $1289 = ($1288|0)>(0);
  if ($1289) {
   $1290 = (($gfc) + 300|0);
   $1291 = (($gfc) + 296|0);
   $1292 = (($gfc) + 292|0);
   $1293 = (($gfc) + 284|0);
   $1294 = (($gfc) + 21464|0);
   $ch$179$i = 0;$tot_bits$278$i = 0;
   while(1) {
    $1467 = ((($gfc) + (($ch$179$i*5252)|0)|0) + 304|0);
    $1468 = ((($gfc) + (($ch$179$i*5252)|0)|0) + 5092|0);
    $1469 = HEAP32[$1468>>2]|0;
    $1470 = ($1469|0)==(2);
    $1471 = ((($gfc) + (($ch$179$i*5252)|0)|0) + 5492|0);
    if ($1470) {
     $scale_bits$074$i = 0;$sfb$275$i = 0;$sfb_partition$073$i = 0;
     while(1) {
      $1472 = HEAP32[$1471>>2]|0;
      $1473 = (($1472) + ($sfb_partition$073$i<<2)|0);
      $1474 = HEAP32[$1473>>2]|0;
      $1475 = (($1474|0) / 3)&-1;
      $1476 = (((($gfc) + (($ch$179$i*5252)|0)|0) + ($sfb_partition$073$i<<2)|0) + 5496|0);
      $1477 = HEAP32[$1476>>2]|0;
      $1478 = ($1474|0)>(2);
      if ($1478) {
       $1479 = ($1477|0)>(0);
       $1480 = ($1475|0)>(1);
       $smax$i = $1480 ? $1475 : 1;
       $i$064$i = 0;$sfb$366$i = $sfb$275$i;
       while(1) {
        $1481 = ($sfb$366$i*3)|0;
        $1482 = (((($gfc) + (($ch$179$i*5252)|0)|0) + ($1481<<2)|0) + 4912|0);
        $1483 = HEAP32[$1482>>2]|0;
        $1484 = ($1483|0)>(0);
        $$$i = $1484 ? $1483 : 0;
        if ($1479) {
         $$01$i12$i = $1477;
         while(1) {
          $1485 = HEAP32[$1290>>2]|0;
          $1486 = ($1485|0)==(0);
          if ($1486) {
           HEAP32[$1290>>2] = 8;
           $1487 = HEAP32[$1291>>2]|0;
           $1488 = (($1487) + 1)|0;
           HEAP32[$1291>>2] = $1488;
           $1489 = HEAP32[$1222>>2]|0;
           $1490 = ((($gfc) + (($1489*48)|0)|0) + 39840|0);
           $1491 = HEAP32[$1490>>2]|0;
           $1492 = HEAP32[$1292>>2]|0;
           $1493 = ($1491|0)==($1492|0);
           if ($1493) {
            $1494 = HEAP32[$1293>>2]|0;
            $1495 = (($1494) + ($1488)|0);
            $1496 = ((($gfc) + (($1489*48)|0)|0) + 39848|0);
            $1497 = HEAP32[$21>>2]|0;
            _memcpy(($1495|0),($1496|0),($1497|0))|0;
            $1498 = HEAP32[$21>>2]|0;
            $1499 = HEAP32[$1291>>2]|0;
            $1500 = (($1499) + ($1498))|0;
            HEAP32[$1291>>2] = $1500;
            $1501 = $1498 << 3;
            $1502 = HEAP32[$1292>>2]|0;
            $1503 = (($1502) + ($1501))|0;
            HEAP32[$1292>>2] = $1503;
            $1504 = HEAP32[$1222>>2]|0;
            $1505 = (($1504) + 1)|0;
            $1506 = $1505 & 255;
            HEAP32[$1222>>2] = $1506;
            $1509 = $1500;
           } else {
            $1509 = $1488;
           }
           $1507 = HEAP32[$1293>>2]|0;
           $1508 = (($1507) + ($1509)|0);
           HEAP8[$1508>>0] = 0;
           $$pre$i13$i = HEAP32[$1290>>2]|0;
           $1511 = $$pre$i13$i;
          } else {
           $1511 = $1485;
          }
          $1510 = ($$01$i12$i|0)<($1511|0);
          $$0$$i14$i = $1510 ? $$01$i12$i : $1511;
          $1512 = (($$01$i12$i) - ($$0$$i14$i))|0;
          $1513 = (($1511) - ($$0$$i14$i))|0;
          HEAP32[$1290>>2] = $1513;
          $1514 = $$$i >> $1512;
          $1515 = $1514 << $1513;
          $1516 = HEAP32[$1291>>2]|0;
          $1517 = HEAP32[$1293>>2]|0;
          $1518 = (($1517) + ($1516)|0);
          $1519 = HEAP8[$1518>>0]|0;
          $1520 = $1519&255;
          $1521 = $1515 | $1520;
          $1522 = $1521&255;
          HEAP8[$1518>>0] = $1522;
          $1523 = HEAP32[$1292>>2]|0;
          $1524 = (($1523) + ($$0$$i14$i))|0;
          HEAP32[$1292>>2] = $1524;
          $1525 = ($1512|0)>(0);
          if ($1525) {
           $$01$i12$i = $1512;
          } else {
           break;
          }
         }
         $1526 = (($1481) + 1)|0;
         $1527 = (((($gfc) + (($ch$179$i*5252)|0)|0) + ($1526<<2)|0) + 4912|0);
         $1528 = HEAP32[$1527>>2]|0;
         $1529 = ($1528|0)>(0);
         $1530 = $1529 ? $1528 : 0;
         $$01$i17$i = $1477;$1539 = $1524;
         while(1) {
          $1531 = HEAP32[$1290>>2]|0;
          $1532 = ($1531|0)==(0);
          if ($1532) {
           HEAP32[$1290>>2] = 8;
           $1533 = HEAP32[$1291>>2]|0;
           $1534 = (($1533) + 1)|0;
           HEAP32[$1291>>2] = $1534;
           $1535 = HEAP32[$1222>>2]|0;
           $1536 = ((($gfc) + (($1535*48)|0)|0) + 39840|0);
           $1537 = HEAP32[$1536>>2]|0;
           $1538 = ($1537|0)==($1539|0);
           if ($1538) {
            $1540 = HEAP32[$1293>>2]|0;
            $1541 = (($1540) + ($1534)|0);
            $1542 = ((($gfc) + (($1535*48)|0)|0) + 39848|0);
            $1543 = HEAP32[$21>>2]|0;
            _memcpy(($1541|0),($1542|0),($1543|0))|0;
            $1544 = HEAP32[$21>>2]|0;
            $1545 = HEAP32[$1291>>2]|0;
            $1546 = (($1545) + ($1544))|0;
            HEAP32[$1291>>2] = $1546;
            $1547 = $1544 << 3;
            $1548 = HEAP32[$1292>>2]|0;
            $1549 = (($1548) + ($1547))|0;
            HEAP32[$1292>>2] = $1549;
            $1550 = HEAP32[$1222>>2]|0;
            $1551 = (($1550) + 1)|0;
            $1552 = $1551 & 255;
            HEAP32[$1222>>2] = $1552;
            $1555 = $1546;
           } else {
            $1555 = $1534;
           }
           $1553 = HEAP32[$1293>>2]|0;
           $1554 = (($1553) + ($1555)|0);
           HEAP8[$1554>>0] = 0;
           $$pre$i18$i = HEAP32[$1290>>2]|0;
           $1557 = $$pre$i18$i;
          } else {
           $1557 = $1531;
          }
          $1556 = ($$01$i17$i|0)<($1557|0);
          $$0$$i19$i = $1556 ? $$01$i17$i : $1557;
          $1558 = (($$01$i17$i) - ($$0$$i19$i))|0;
          $1559 = (($1557) - ($$0$$i19$i))|0;
          HEAP32[$1290>>2] = $1559;
          $1560 = $1530 >> $1558;
          $1561 = $1560 << $1559;
          $1562 = HEAP32[$1291>>2]|0;
          $1563 = HEAP32[$1293>>2]|0;
          $1564 = (($1563) + ($1562)|0);
          $1565 = HEAP8[$1564>>0]|0;
          $1566 = $1565&255;
          $1567 = $1561 | $1566;
          $1568 = $1567&255;
          HEAP8[$1564>>0] = $1568;
          $1569 = HEAP32[$1292>>2]|0;
          $1570 = (($1569) + ($$0$$i19$i))|0;
          HEAP32[$1292>>2] = $1570;
          $1571 = ($1558|0)>(0);
          if ($1571) {
           $$01$i17$i = $1558;$1539 = $1570;
          } else {
           break;
          }
         }
         $1572 = (($1481) + 2)|0;
         $1573 = (((($gfc) + (($ch$179$i*5252)|0)|0) + ($1572<<2)|0) + 4912|0);
         $1574 = HEAP32[$1573>>2]|0;
         $1575 = ($1574|0)>(0);
         $$1$i = $1575 ? $1574 : 0;
         $$01$i22$i = $1477;$1584 = $1570;
         while(1) {
          $1576 = HEAP32[$1290>>2]|0;
          $1577 = ($1576|0)==(0);
          if ($1577) {
           HEAP32[$1290>>2] = 8;
           $1578 = HEAP32[$1291>>2]|0;
           $1579 = (($1578) + 1)|0;
           HEAP32[$1291>>2] = $1579;
           $1580 = HEAP32[$1222>>2]|0;
           $1581 = ((($gfc) + (($1580*48)|0)|0) + 39840|0);
           $1582 = HEAP32[$1581>>2]|0;
           $1583 = ($1582|0)==($1584|0);
           if ($1583) {
            $1585 = HEAP32[$1293>>2]|0;
            $1586 = (($1585) + ($1579)|0);
            $1587 = ((($gfc) + (($1580*48)|0)|0) + 39848|0);
            $1588 = HEAP32[$21>>2]|0;
            _memcpy(($1586|0),($1587|0),($1588|0))|0;
            $1589 = HEAP32[$21>>2]|0;
            $1590 = HEAP32[$1291>>2]|0;
            $1591 = (($1590) + ($1589))|0;
            HEAP32[$1291>>2] = $1591;
            $1592 = $1589 << 3;
            $1593 = HEAP32[$1292>>2]|0;
            $1594 = (($1593) + ($1592))|0;
            HEAP32[$1292>>2] = $1594;
            $1595 = HEAP32[$1222>>2]|0;
            $1596 = (($1595) + 1)|0;
            $1597 = $1596 & 255;
            HEAP32[$1222>>2] = $1597;
            $1600 = $1591;
           } else {
            $1600 = $1579;
           }
           $1598 = HEAP32[$1293>>2]|0;
           $1599 = (($1598) + ($1600)|0);
           HEAP8[$1599>>0] = 0;
           $$pre$i23$i = HEAP32[$1290>>2]|0;
           $1602 = $$pre$i23$i;
          } else {
           $1602 = $1576;
          }
          $1601 = ($$01$i22$i|0)<($1602|0);
          $$0$$i24$i = $1601 ? $$01$i22$i : $1602;
          $1603 = (($$01$i22$i) - ($$0$$i24$i))|0;
          $1604 = (($1602) - ($$0$$i24$i))|0;
          HEAP32[$1290>>2] = $1604;
          $1605 = $$1$i >> $1603;
          $1606 = $1605 << $1604;
          $1607 = HEAP32[$1291>>2]|0;
          $1608 = HEAP32[$1293>>2]|0;
          $1609 = (($1608) + ($1607)|0);
          $1610 = HEAP8[$1609>>0]|0;
          $1611 = $1610&255;
          $1612 = $1606 | $1611;
          $1613 = $1612&255;
          HEAP8[$1609>>0] = $1613;
          $1614 = HEAP32[$1292>>2]|0;
          $1615 = (($1614) + ($$0$$i24$i))|0;
          HEAP32[$1292>>2] = $1615;
          $1616 = ($1603|0)>(0);
          if ($1616) {
           $$01$i22$i = $1603;$1584 = $1615;
          } else {
           break;
          }
         }
        }
        $1617 = (($i$064$i) + 1)|0;
        $1618 = (($sfb$366$i) + 1)|0;
        $1619 = ($1617|0)<($1475|0);
        if ($1619) {
         $i$064$i = $1617;$sfb$366$i = $1618;
        } else {
         break;
        }
       }
       $1620 = ($1477*3)|0;
       $1621 = Math_imul($1620, $smax$i)|0;
       $1622 = (($smax$i) + ($sfb$275$i))|0;
       $1623 = (($1621) + ($scale_bits$074$i))|0;
       $scale_bits$1$lcssa$i = $1623;$sfb$3$lcssa$i = $1622;
      } else {
       $scale_bits$1$lcssa$i = $scale_bits$074$i;$sfb$3$lcssa$i = $sfb$275$i;
      }
      $1624 = (($sfb_partition$073$i) + 1)|0;
      $exitcond94$i = ($1624|0)==(4);
      if ($exitcond94$i) {
       break;
      } else {
       $scale_bits$074$i = $scale_bits$1$lcssa$i;$sfb$275$i = $sfb$3$lcssa$i;$sfb_partition$073$i = $1624;
      }
     }
     $1625 = HEAP32[$1294>>2]|0;
     $1626 = ($1625*3)|0;
     $1627 = ((($gfc) + (($ch$179$i*5252)|0)|0) + 5076|0);
     $1628 = HEAP32[$1627>>2]|0;
     $1629 = ($1626|0)>($1628|0);
     $$$i26$i = $1629 ? $1628 : $1626;
     $1630 = ((($gfc) + (($ch$179$i*5252)|0)|0) + 5100|0);
     $1631 = HEAP32[$1630>>2]|0;
     $1632 = (_Huffmancode($gfc,$1631,0,$$$i26$i,$1467)|0);
     $1633 = ((($gfc) + (($ch$179$i*5252)|0)|0) + 5104|0);
     $1634 = HEAP32[$1633>>2]|0;
     $1635 = HEAP32[$1627>>2]|0;
     $1636 = (_Huffmancode($gfc,$1634,$$$i26$i,$1635,$1467)|0);
     $1637 = (($1636) + ($1632))|0;
     $data_bits$5$i = $1637;$scale_bits$4$i = $scale_bits$1$lcssa$i;
    } else {
     $scale_bits$262$i = 0;$sfb$463$i = 0;$sfb_partition$161$i = 0;
     while(1) {
      $1638 = HEAP32[$1471>>2]|0;
      $1639 = (($1638) + ($sfb_partition$161$i<<2)|0);
      $1640 = HEAP32[$1639>>2]|0;
      $1641 = (((($gfc) + (($ch$179$i*5252)|0)|0) + ($sfb_partition$161$i<<2)|0) + 5496|0);
      $1642 = HEAP32[$1641>>2]|0;
      $1643 = ($1640|0)>(0);
      if ($1643) {
       $1644 = ($1642|0)>(0);
       if ($1644) {
        $i$152$us$i = 0;$sfb$554$us$i = $sfb$463$i;
        while(1) {
         $1645 = (((($gfc) + (($ch$179$i*5252)|0)|0) + ($sfb$554$us$i<<2)|0) + 4912|0);
         $1646 = HEAP32[$1645>>2]|0;
         $1647 = ($1646|0)>(0);
         $$2$us$i = $1647 ? $1646 : 0;
         $$01$i28$us$i = $1642;
         while(1) {
          $1648 = HEAP32[$1290>>2]|0;
          $1649 = ($1648|0)==(0);
          if ($1649) {
           HEAP32[$1290>>2] = 8;
           $1650 = HEAP32[$1291>>2]|0;
           $1651 = (($1650) + 1)|0;
           HEAP32[$1291>>2] = $1651;
           $1652 = HEAP32[$1222>>2]|0;
           $1653 = ((($gfc) + (($1652*48)|0)|0) + 39840|0);
           $1654 = HEAP32[$1653>>2]|0;
           $1655 = HEAP32[$1292>>2]|0;
           $1656 = ($1654|0)==($1655|0);
           if ($1656) {
            $1657 = HEAP32[$1293>>2]|0;
            $1658 = (($1657) + ($1651)|0);
            $1659 = ((($gfc) + (($1652*48)|0)|0) + 39848|0);
            $1660 = HEAP32[$21>>2]|0;
            _memcpy(($1658|0),($1659|0),($1660|0))|0;
            $1661 = HEAP32[$21>>2]|0;
            $1662 = HEAP32[$1291>>2]|0;
            $1663 = (($1662) + ($1661))|0;
            HEAP32[$1291>>2] = $1663;
            $1664 = $1661 << 3;
            $1665 = HEAP32[$1292>>2]|0;
            $1666 = (($1665) + ($1664))|0;
            HEAP32[$1292>>2] = $1666;
            $1667 = HEAP32[$1222>>2]|0;
            $1668 = (($1667) + 1)|0;
            $1669 = $1668 & 255;
            HEAP32[$1222>>2] = $1669;
            $1672 = $1663;
           } else {
            $1672 = $1651;
           }
           $1670 = HEAP32[$1293>>2]|0;
           $1671 = (($1670) + ($1672)|0);
           HEAP8[$1671>>0] = 0;
           $$pre$i29$us$i = HEAP32[$1290>>2]|0;
           $1674 = $$pre$i29$us$i;
          } else {
           $1674 = $1648;
          }
          $1673 = ($$01$i28$us$i|0)<($1674|0);
          $$0$$i30$us$i = $1673 ? $$01$i28$us$i : $1674;
          $1675 = (($$01$i28$us$i) - ($$0$$i30$us$i))|0;
          $1676 = (($1674) - ($$0$$i30$us$i))|0;
          HEAP32[$1290>>2] = $1676;
          $1677 = $$2$us$i >> $1675;
          $1678 = $1677 << $1676;
          $1679 = HEAP32[$1291>>2]|0;
          $1680 = HEAP32[$1293>>2]|0;
          $1681 = (($1680) + ($1679)|0);
          $1682 = HEAP8[$1681>>0]|0;
          $1683 = $1682&255;
          $1684 = $1678 | $1683;
          $1685 = $1684&255;
          HEAP8[$1681>>0] = $1685;
          $1686 = HEAP32[$1292>>2]|0;
          $1687 = (($1686) + ($$0$$i30$us$i))|0;
          HEAP32[$1292>>2] = $1687;
          $1688 = ($1675|0)>(0);
          if ($1688) {
           $$01$i28$us$i = $1675;
          } else {
           break;
          }
         }
         $1689 = (($i$152$us$i) + 1)|0;
         $1690 = (($sfb$554$us$i) + 1)|0;
         $exitcond90$i = ($1689|0)==($1640|0);
         if ($exitcond90$i) {
          break;
         } else {
          $i$152$us$i = $1689;$sfb$554$us$i = $1690;
         }
        }
       }
       $$pn102$i = Math_imul($1642, $1640)|0;
       $split59$i = (($$pn102$i) + ($scale_bits$262$i))|0;
       $split58$i = (($1640) + ($sfb$463$i))|0;
       $scale_bits$3$lcssa$i = $split59$i;$sfb$5$lcssa$i = $split58$i;
      } else {
       $scale_bits$3$lcssa$i = $scale_bits$262$i;$sfb$5$lcssa$i = $sfb$463$i;
      }
      $1691 = (($sfb_partition$161$i) + 1)|0;
      $exitcond91$i = ($1691|0)==(4);
      if ($exitcond91$i) {
       break;
      } else {
       $scale_bits$262$i = $scale_bits$3$lcssa$i;$sfb$463$i = $sfb$5$lcssa$i;$sfb_partition$161$i = $1691;
      }
     }
     $1692 = ((($gfc) + (($ch$179$i*5252)|0)|0) + 5076|0);
     $1693 = HEAP32[$1692>>2]|0;
     $1694 = ((($gfc) + (($ch$179$i*5252)|0)|0) + 5128|0);
     $1695 = HEAP32[$1694>>2]|0;
     $1696 = (($1695) + 1)|0;
     $1697 = ((($gfc) + ($1696<<2)|0) + 21360|0);
     $1698 = HEAP32[$1697>>2]|0;
     $1699 = ((($gfc) + (($ch$179$i*5252)|0)|0) + 5132|0);
     $1700 = HEAP32[$1699>>2]|0;
     $1701 = (($1695) + 2)|0;
     $1702 = (($1701) + ($1700))|0;
     $1703 = ((($gfc) + ($1702<<2)|0) + 21360|0);
     $1704 = HEAP32[$1703>>2]|0;
     $1705 = ($1698|0)>($1693|0);
     $$$i$i = $1705 ? $1693 : $1698;
     $1706 = ($1704|0)>($1693|0);
     $region2Start$0$i$i = $1706 ? $1693 : $1704;
     $1707 = ((($gfc) + (($ch$179$i*5252)|0)|0) + 5100|0);
     $1708 = HEAP32[$1707>>2]|0;
     $1709 = (_Huffmancode($gfc,$1708,0,$$$i$i,$1467)|0);
     $1710 = ((($gfc) + (($ch$179$i*5252)|0)|0) + 5104|0);
     $1711 = HEAP32[$1710>>2]|0;
     $1712 = (_Huffmancode($gfc,$1711,$$$i$i,$region2Start$0$i$i,$1467)|0);
     $1713 = (($1712) + ($1709))|0;
     $1714 = ((($gfc) + (($ch$179$i*5252)|0)|0) + 5108|0);
     $1715 = HEAP32[$1714>>2]|0;
     $1716 = (_Huffmancode($gfc,$1715,$region2Start$0$i$i,$1693,$1467)|0);
     $1717 = (($1713) + ($1716))|0;
     $data_bits$5$i = $1717;$scale_bits$4$i = $scale_bits$3$lcssa$i;
    }
    $1718 = (_huffman_coder_count1($gfc,$1467)|0);
    $1719 = (($scale_bits$4$i) + ($tot_bits$278$i))|0;
    $1720 = (($1719) + ($data_bits$5$i))|0;
    $1721 = (($1720) + ($1718))|0;
    $1722 = (($ch$179$i) + 1)|0;
    $1723 = HEAP32[$1287>>2]|0;
    $1724 = ($1722|0)<($1723|0);
    if ($1724) {
     $ch$179$i = $1722;$tot_bits$278$i = $1721;
    } else {
     $tot_bits$3$i = $1721;
     break;
    }
   }
  } else {
   $tot_bits$3$i = 0;
  }
 }
 $1725 = (($tot_bits$3$i) + ($1284))|0;
 $1726 = (($gfc) + 21324|0);
 $1727 = HEAP32[$1726>>2]|0;
 _drain_into_ancillary($gfc,$1727);
 $1728 = HEAP32[$1726>>2]|0;
 $1729 = (($1725) + ($1728))|0;
 $1730 = (($14) - ($1729))|0;
 $1731 = (($1730|0) / 8)&-1;
 $1732 = HEAP32[$298>>2]|0;
 $1733 = (($1732) + ($1731))|0;
 HEAP32[$298>>2] = $1733;
 $1734 = (_compute_flushbits($gfc,$nbytes)|0);
 $1735 = (($gfc) + 52140|0);
 $1736 = HEAP32[$1735>>2]|0;
 $1737 = ($1734|0)==($1736|0);
 if ($1737) {
  $1741 = $1734;
 } else {
  _lame_errorf($gfc,48,$vararg_buffer19);
  $$pre = HEAP32[$1735>>2]|0;
  $1741 = $$pre;
 }
 $1738 = HEAP32[$298>>2]|0;
 $1739 = $1738 << 3;
 $1740 = ($1739|0)==($1741|0);
 if (!($1740)) {
  $1742 = HEAP32[$1726>>2]|0;
  $1743 = HEAP32[$15>>2]|0;
  $1744 = HEAP32[$21>>2]|0;
  $1745 = $1744 << 3;
  $1746 = (($1729) - ($1742))|0;
  $1747 = (($1746) - ($1745))|0;
  $1748 = (($1729|0) % 8)&-1;
  HEAP32[$vararg_buffer19>>2] = $1739;
  $vararg_ptr5 = (($vararg_buffer19) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $1741;
  $vararg_ptr6 = (($vararg_buffer19) + 8|0);
  HEAP32[$vararg_ptr6>>2] = $1742;
  $vararg_ptr7 = (($vararg_buffer19) + 12|0);
  HEAP32[$vararg_ptr7>>2] = $1743;
  $vararg_ptr8 = (($vararg_buffer19) + 16|0);
  HEAP32[$vararg_ptr8>>2] = $1745;
  $vararg_ptr9 = (($vararg_buffer19) + 20|0);
  HEAP32[$vararg_ptr9>>2] = $1747;
  $vararg_ptr10 = (($vararg_buffer19) + 24|0);
  HEAP32[$vararg_ptr10>>2] = $1729;
  $vararg_ptr11 = (($vararg_buffer19) + 28|0);
  HEAP32[$vararg_ptr11>>2] = $1748;
  $vararg_ptr12 = (($vararg_buffer19) + 32|0);
  HEAP32[$vararg_ptr12>>2] = $14;
  _lame_errorf($gfc,104,$vararg_buffer19);
  _lame_errorf($gfc,384,$vararg_buffer19);
  _lame_errorf($gfc,440,$vararg_buffer19);
  _lame_errorf($gfc,520,$vararg_buffer19);
  _lame_errorf($gfc,560,$vararg_buffer19);
  $1749 = HEAP32[$298>>2]|0;
  $1750 = $1749 << 3;
  HEAP32[$1735>>2] = $1750;
 }
 $1751 = (($gfc) + 292|0);
 $1752 = HEAP32[$1751>>2]|0;
 $1753 = ($1752|0)>(1000000000);
 if ($1753) {
  $i$09 = 0;
 } else {
  STACKTOP = sp;return 0;
 }
 while(1) {
  $1754 = ((($gfc) + (($i$09*48)|0)|0) + 39840|0);
  $1755 = HEAP32[$1754>>2]|0;
  $1756 = (($1755) - ($1752))|0;
  HEAP32[$1754>>2] = $1756;
  $1757 = (($i$09) + 1)|0;
  $exitcond = ($1757|0)==(256);
  if ($exitcond) {
   break;
  } else {
   $i$09 = $1757;
  }
 }
 HEAP32[$1751>>2] = 0;
 STACKTOP = sp;return 0;
}
function _copy_buffer($gfc,$buffer,$size,$mp3data) {
 $gfc = $gfc|0;
 $buffer = $buffer|0;
 $size = $size|0;
 $mp3data = $mp3data|0;
 var $$$i = 0, $$0 = 0, $$pre$i = 0.0, $$pre8$i = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0;
 var $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i = 0, $exitcond7$i = 0;
 var $i$02$i = 0, $i$14$i = 0, $mp3_in$06$i = 0, $or$cond$i = 0, $pcm_buf$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 9216|0;
 $pcm_buf$i = sp;
 $0 = (($gfc) + 296|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 1)|0;
 $3 = ($1|0)<(0);
 if ($3) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = ($size|0)==(0);
 $5 = ($1|0)<($size|0);
 $or$cond$i = $4 | $5;
 if (!($or$cond$i)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = (($gfc) + 284|0);
 $7 = HEAP32[$6>>2]|0;
 _memcpy(($buffer|0),($7|0),($2|0))|0;
 HEAP32[$0>>2] = -1;
 $8 = (($gfc) + 300|0);
 HEAP32[$8>>2] = 0;
 $9 = ($mp3data|0)==(0);
 if ($9) {
  $$0 = $2;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = (($gfc) + 85752|0);
 _UpdateMusicCRC($10,$buffer,$2);
 $11 = (($gfc) + 85788|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + ($2))|0;
 HEAP32[$11>>2] = $13;
 $14 = (($gfc) + 136|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0);
 if ($16) {
  $$0 = $2;
  STACKTOP = sp;return ($$0|0);
 }
 $17 = (($gfc) + 85676|0);
 $18 = (($gfc) + 85808|0);
 $19 = (($pcm_buf$i) + 4608|0);
 $20 = (($gfc) + 132|0);
 $21 = (($gfc) + 128|0);
 $22 = (($gfc) + 72|0);
 $23 = (($gfc) + 85684|0);
 $mp3_in$06$i = $2;
 while(1) {
  $24 = HEAP32[$18>>2]|0;
  $25 = (_hip_decode1_unclipped($24,$buffer,$mp3_in$06$i,$pcm_buf$i,$19)|0);
  $26 = ($25|0)==(-1);
  $$$i = $26 ? 0 : $25;
  $27 = ($$$i|0)>(0);
  if ($27) {
   $28 = HEAP32[$20>>2]|0;
   $29 = ($28|0)==(0);
   if (!($29)) {
    $$pre8$i = +HEAPF32[$23>>2];
    $33 = $$pre8$i;$i$02$i = 0;
    while(1) {
     $30 = (($pcm_buf$i) + ($i$02$i<<2)|0);
     $31 = +HEAPF32[$30>>2];
     $32 = $31 > $33;
     if ($32) {
      HEAPF32[$23>>2] = $31;
      $$pre$i = $31;
     } else {
      $34 = -$31;
      $35 = $33 < $34;
      if ($35) {
       HEAPF32[$23>>2] = $34;
       $$pre$i = $34;
      } else {
       $$pre$i = $33;
      }
     }
     $36 = (($i$02$i) + 1)|0;
     $exitcond$i = ($36|0)==($$$i|0);
     if ($exitcond$i) {
      break;
     } else {
      $33 = $$pre$i;$i$02$i = $36;
     }
    }
    $37 = HEAP32[$22>>2]|0;
    $38 = ($37|0)>(1);
    if ($38) {
     $42 = $$pre$i;$i$14$i = 0;
     while(1) {
      $39 = ((($pcm_buf$i) + ($i$14$i<<2)|0) + 4608|0);
      $40 = +HEAPF32[$39>>2];
      $41 = $40 > $42;
      if ($41) {
       HEAPF32[$23>>2] = $40;
       $53 = $40;
      } else {
       $43 = -$40;
       $44 = $42 < $43;
       if ($44) {
        HEAPF32[$23>>2] = $43;
        $53 = $43;
       } else {
        $53 = $42;
       }
      }
      $45 = (($i$14$i) + 1)|0;
      $exitcond7$i = ($45|0)==($$$i|0);
      if ($exitcond7$i) {
       break;
      } else {
       $42 = $53;$i$14$i = $45;
      }
     }
    }
   }
   $46 = HEAP32[$21>>2]|0;
   $47 = ($46|0)==(0);
   if (!($47)) {
    $48 = HEAP32[$17>>2]|0;
    $49 = HEAP32[$22>>2]|0;
    $50 = (_AnalyzeSamples($48,$pcm_buf$i,$19,$$$i,$49)|0);
    $51 = ($50|0)==(0);
    if ($51) {
     $$0 = -6;
     label = 23;
     break;
    }
   }
  }
  $52 = ($$$i|0)==(0);
  if ($52) {
   $$0 = $2;
   label = 23;
   break;
  } else {
   $mp3_in$06$i = 0;
  }
 }
 if ((label|0) == 23) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _init_bit_stream_w($gfc) {
 $gfc = $gfc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($gfc) + 52132|0);
 HEAP32[$0>>2] = 0;
 $1 = (($gfc) + 52128|0);
 HEAP32[$1>>2] = 0;
 $2 = (($gfc) + 39840|0);
 HEAP32[$2>>2] = 0;
 $3 = (_malloc(147456)|0);
 $4 = (($gfc) + 284|0);
 HEAP32[$4>>2] = $3;
 $5 = (($gfc) + 288|0);
 HEAP32[$5>>2] = 147456;
 $6 = (($gfc) + 296|0);
 HEAP32[$6>>2] = -1;
 $7 = (($gfc) + 300|0);
 HEAP32[$7>>2] = 0;
 $8 = (($gfc) + 292|0);
 HEAP32[$8>>2] = 0;
 STACKTOP = sp;return;
}
function _huffman_coder_count1($gfc,$gi) {
 $gfc = $gfc|0;
 $gi = $gi|0;
 var $$0$$i = 0, $$01$i = 0, $$pre = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bits$0$lcssa = 0, $bits$02 = 0, $huffbits$0 = 0, $huffbits$1 = 0, $huffbits$2 = 0, $huffbits$3 = 0, $i$01 = 0;
 var $ix$03 = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$3 = 0, $xr$04 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($gi) + 4840|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 32)|0;
 $3 = (($gi) + 4772|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($gi) + 4776|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) - ($4))|0;
 $8 = ($7|0)>(3);
 if (!($8)) {
  $bits$0$lcssa = 0;
  STACKTOP = sp;return ($bits$0$lcssa|0);
 }
 $9 = (($7|0) / 4)&-1;
 $10 = (($gi) + ($4<<2)|0);
 $11 = ((($gi) + ($4<<2)|0) + 2304|0);
 $12 = ((139552 + ($2<<4)|0) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((139552 + ($2<<4)|0) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($gfc) + 300|0);
 $17 = (($gfc) + 296|0);
 $18 = (($gfc) + 52132|0);
 $19 = (($gfc) + 292|0);
 $20 = (($gfc) + 284|0);
 $21 = (($gfc) + 24|0);
 $bits$02 = 0;$i$01 = $9;$ix$03 = $11;$xr$04 = $10;
 while(1) {
  $22 = HEAP32[$ix$03>>2]|0;
  $23 = ($22|0)==(0);
  if ($23) {
   $huffbits$0 = 0;$p$0 = 0;
  } else {
   $24 = +HEAPF32[$xr$04>>2];
   $25 = $24 < 0.0;
   if ($25) {
    $huffbits$0 = 1;$p$0 = 8;
   } else {
    $huffbits$0 = 0;$p$0 = 8;
   }
  }
  $26 = (($ix$03) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)==(0);
  if ($28) {
   $huffbits$1 = $huffbits$0;$p$1 = $p$0;
  } else {
   $29 = $p$0 | 4;
   $30 = $huffbits$0 << 1;
   $31 = (($xr$04) + 4|0);
   $32 = +HEAPF32[$31>>2];
   $33 = $32 < 0.0;
   if ($33) {
    $34 = $30 | 1;
    $huffbits$1 = $34;$p$1 = $29;
   } else {
    $huffbits$1 = $30;$p$1 = $29;
   }
  }
  $35 = (($ix$03) + 8|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ($36|0)==(0);
  if ($37) {
   $huffbits$2 = $huffbits$1;$p$2 = $p$1;
  } else {
   $38 = (($p$1) + 2)|0;
   $39 = $huffbits$1 << 1;
   $40 = (($xr$04) + 8|0);
   $41 = +HEAPF32[$40>>2];
   $42 = $41 < 0.0;
   if ($42) {
    $43 = $39 | 1;
    $huffbits$2 = $43;$p$2 = $38;
   } else {
    $huffbits$2 = $39;$p$2 = $38;
   }
  }
  $44 = (($ix$03) + 12|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ($45|0)==(0);
  if ($46) {
   $huffbits$3 = $huffbits$2;$p$3 = $p$2;
  } else {
   $47 = (($p$2) + 1)|0;
   $48 = $huffbits$2 << 1;
   $49 = (($xr$04) + 12|0);
   $50 = +HEAPF32[$49>>2];
   $51 = $50 < 0.0;
   if ($51) {
    $52 = $48 | 1;
    $huffbits$3 = $52;$p$3 = $47;
   } else {
    $huffbits$3 = $48;$p$3 = $47;
   }
  }
  $53 = (($ix$03) + 16|0);
  $54 = (($xr$04) + 16|0);
  $55 = (($13) + ($p$3<<1)|0);
  $56 = HEAP16[$55>>1]|0;
  $57 = $56&65535;
  $58 = (($57) + ($huffbits$3))|0;
  $59 = (($15) + ($p$3)|0);
  $60 = HEAP8[$59>>0]|0;
  $61 = ($60<<24>>24)==(0);
  if ($61) {
   $105 = 0;
  } else {
   $62 = $60&255;
   $$01$i = $62;
   while(1) {
    $63 = HEAP32[$16>>2]|0;
    $64 = ($63|0)==(0);
    if ($64) {
     HEAP32[$16>>2] = 8;
     $65 = HEAP32[$17>>2]|0;
     $66 = (($65) + 1)|0;
     HEAP32[$17>>2] = $66;
     $67 = HEAP32[$18>>2]|0;
     $68 = ((($gfc) + (($67*48)|0)|0) + 39840|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = HEAP32[$19>>2]|0;
     $71 = ($69|0)==($70|0);
     if ($71) {
      $72 = HEAP32[$20>>2]|0;
      $73 = (($72) + ($66)|0);
      $74 = ((($gfc) + (($67*48)|0)|0) + 39848|0);
      $75 = HEAP32[$21>>2]|0;
      _memcpy(($73|0),($74|0),($75|0))|0;
      $76 = HEAP32[$21>>2]|0;
      $77 = HEAP32[$17>>2]|0;
      $78 = (($77) + ($76))|0;
      HEAP32[$17>>2] = $78;
      $79 = $76 << 3;
      $80 = HEAP32[$19>>2]|0;
      $81 = (($80) + ($79))|0;
      HEAP32[$19>>2] = $81;
      $82 = HEAP32[$18>>2]|0;
      $83 = (($82) + 1)|0;
      $84 = $83 & 255;
      HEAP32[$18>>2] = $84;
      $87 = $78;
     } else {
      $87 = $66;
     }
     $85 = HEAP32[$20>>2]|0;
     $86 = (($85) + ($87)|0);
     HEAP8[$86>>0] = 0;
     $$pre$i = HEAP32[$16>>2]|0;
     $89 = $$pre$i;
    } else {
     $89 = $63;
    }
    $88 = ($$01$i|0)<($89|0);
    $$0$$i = $88 ? $$01$i : $89;
    $90 = (($$01$i) - ($$0$$i))|0;
    $91 = (($89) - ($$0$$i))|0;
    HEAP32[$16>>2] = $91;
    $92 = $58 >> $90;
    $93 = $92 << $91;
    $94 = HEAP32[$17>>2]|0;
    $95 = HEAP32[$20>>2]|0;
    $96 = (($95) + ($94)|0);
    $97 = HEAP8[$96>>0]|0;
    $98 = $97&255;
    $99 = $93 | $98;
    $100 = $99&255;
    HEAP8[$96>>0] = $100;
    $101 = HEAP32[$19>>2]|0;
    $102 = (($101) + ($$0$$i))|0;
    HEAP32[$19>>2] = $102;
    $103 = ($90|0)>(0);
    if ($103) {
     $$01$i = $90;
    } else {
     break;
    }
   }
   $$pre = HEAP8[$59>>0]|0;
   $105 = $$pre;
  }
  $104 = $105&255;
  $106 = (($104) + ($bits$02))|0;
  $107 = (($i$01) + -1)|0;
  $108 = ($107|0)>(0);
  if ($108) {
   $bits$02 = $106;$i$01 = $107;$ix$03 = $53;$xr$04 = $54;
  } else {
   $bits$0$lcssa = $106;
   break;
  }
 }
 STACKTOP = sp;return ($bits$0$lcssa|0);
}
function _Huffmancode($gfc,$tableindex,$start,$end,$gi) {
 $gfc = $gfc|0;
 $tableindex = $tableindex|0;
 $start = $start|0;
 $end = $end|0;
 $gi = $gi|0;
 var $$0 = 0, $$0$$i = 0, $$0$$i4 = 0, $$01$i = 0, $$01$i2 = 0, $$pre$i = 0, $$pre$i3 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bits$015 = 0, $cbits$0 = 0, $cbits$1 = 0, $ext$0 = 0, $ext$1 = 0, $ext$2 = 0, $ext$4 = 0;
 var $ext$410 = 0, $ext$5 = 0, $ext$6 = 0, $i$016 = 0, $or$cond = 0, $x1$0 = 0, $x1$1 = 0, $x1$111 = 0, $x1$112 = 0, $x2$113 = 0, $x2$114 = 0, $xbits$0 = 0, $xbits$2 = 0, $xbits$26 = 0, $xbits$27 = 0, $xlen$0 = 0, $xlen$08 = 0, $xlen$09 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (139552 + ($tableindex<<4)|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($tableindex|0)!=(0);
 $3 = ($start|0)<($end|0);
 $or$cond = $2 & $3;
 if (!($or$cond)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = ($tableindex>>>0)>(15);
 $5 = $1&65535;
 $6 = ((139552 + ($tableindex<<4)|0) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((139552 + ($tableindex<<4)|0) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($gfc) + 300|0);
 $11 = (($gfc) + 296|0);
 $12 = (($gfc) + 52132|0);
 $13 = (($gfc) + 292|0);
 $14 = (($gfc) + 284|0);
 $15 = (($gfc) + 24|0);
 $bits$015 = 0;$i$016 = $start;
 while(1) {
  $16 = ((($gi) + ($i$016<<2)|0) + 2304|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($i$016) + 1)|0;
  $19 = ((($gi) + ($18<<2)|0) + 2304|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($17|0)==(0);
  if ($21) {
   $cbits$0 = 0;$ext$1 = 0;
  } else {
   $22 = (($gi) + ($i$016<<2)|0);
   $23 = +HEAPF32[$22>>2];
   $24 = $23 < 0.0;
   $ext$0 = $24&1;
   $cbits$0 = -1;$ext$1 = $ext$0;
  }
  if ($4) {
   $25 = ($17>>>0)>(14);
   if ($25) {
    $26 = $17 << 1;
    $27 = (($26) + 131042)|0;
    $28 = $27 & 131070;
    $29 = $ext$1 | $28;
    $ext$2 = $29;$x1$0 = 15;$xbits$0 = $5;
   } else {
    $ext$2 = $ext$1;$x1$0 = $17;$xbits$0 = 0;
   }
   $30 = ($20>>>0)>(14);
   if ($30) {
    $31 = (($20) + 65521)|0;
    $32 = $ext$2 << $1;
    $33 = $31 & 65535;
    $34 = $32 | $33;
    $35 = $xbits$0&65535;
    $36 = (($35) + ($1))|0;
    $37 = $36&65535;
    $ext$410 = $34;$x1$111 = $x1$0;$x2$113 = 15;$xbits$26 = $37;$xlen$08 = 16;
    label = 11;
   } else {
    $ext$4 = $ext$2;$x1$1 = $x1$0;$xbits$2 = $xbits$0;$xlen$0 = 16;
    label = 10;
   }
  } else {
   $ext$4 = $ext$1;$x1$1 = $17;$xbits$2 = 0;$xlen$0 = $1;
   label = 10;
  }
  if ((label|0) == 10) {
   label = 0;
   $38 = ($20|0)==(0);
   if ($38) {
    $cbits$1 = $cbits$0;$ext$6 = $ext$4;$x1$112 = $x1$1;$x2$114 = 0;$xbits$27 = $xbits$2;$xlen$09 = $xlen$0;
   } else {
    $ext$410 = $ext$4;$x1$111 = $x1$1;$x2$113 = $20;$xbits$26 = $xbits$2;$xlen$08 = $xlen$0;
    label = 11;
   }
  }
  if ((label|0) == 11) {
   label = 0;
   $39 = $ext$410 << 1;
   $40 = (($gi) + ($18<<2)|0);
   $41 = +HEAPF32[$40>>2];
   $42 = $41 < 0.0;
   $43 = $42&1;
   $ext$5 = $43 | $39;
   $44 = (($cbits$0) + -1)<<16>>16;
   $cbits$1 = $44;$ext$6 = $ext$5;$x1$112 = $x1$111;$x2$114 = $x2$113;$xbits$27 = $xbits$26;$xlen$09 = $xlen$08;
  }
  $45 = Math_imul($xlen$09, $x1$112)|0;
  $46 = (($45) + ($x2$114))|0;
  $47 = $cbits$1 << 16 >> 16;
  $48 = $xbits$27&65535;
  $49 = (($48) - ($47))|0;
  $50 = (($7) + ($46)|0);
  $51 = HEAP8[$50>>0]|0;
  $52 = $51&255;
  $53 = (($52) + ($47))|0;
  $54 = (($9) + ($46<<1)|0);
  $55 = HEAP16[$54>>1]|0;
  $56 = $55&65535;
  $57 = ($53|0)>(0);
  if ($57) {
   $$01$i = $53;
   while(1) {
    $58 = HEAP32[$10>>2]|0;
    $59 = ($58|0)==(0);
    if ($59) {
     HEAP32[$10>>2] = 8;
     $60 = HEAP32[$11>>2]|0;
     $61 = (($60) + 1)|0;
     HEAP32[$11>>2] = $61;
     $62 = HEAP32[$12>>2]|0;
     $63 = ((($gfc) + (($62*48)|0)|0) + 39840|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = HEAP32[$13>>2]|0;
     $66 = ($64|0)==($65|0);
     if ($66) {
      $67 = HEAP32[$14>>2]|0;
      $68 = (($67) + ($61)|0);
      $69 = ((($gfc) + (($62*48)|0)|0) + 39848|0);
      $70 = HEAP32[$15>>2]|0;
      _memcpy(($68|0),($69|0),($70|0))|0;
      $71 = HEAP32[$15>>2]|0;
      $72 = HEAP32[$11>>2]|0;
      $73 = (($72) + ($71))|0;
      HEAP32[$11>>2] = $73;
      $74 = $71 << 3;
      $75 = HEAP32[$13>>2]|0;
      $76 = (($75) + ($74))|0;
      HEAP32[$13>>2] = $76;
      $77 = HEAP32[$12>>2]|0;
      $78 = (($77) + 1)|0;
      $79 = $78 & 255;
      HEAP32[$12>>2] = $79;
      $82 = $73;
     } else {
      $82 = $61;
     }
     $80 = HEAP32[$14>>2]|0;
     $81 = (($80) + ($82)|0);
     HEAP8[$81>>0] = 0;
     $$pre$i = HEAP32[$10>>2]|0;
     $84 = $$pre$i;
    } else {
     $84 = $58;
    }
    $83 = ($$01$i|0)<($84|0);
    $$0$$i = $83 ? $$01$i : $84;
    $85 = (($$01$i) - ($$0$$i))|0;
    $86 = (($84) - ($$0$$i))|0;
    HEAP32[$10>>2] = $86;
    $87 = $56 >>> $85;
    $88 = $87 << $86;
    $89 = HEAP32[$11>>2]|0;
    $90 = HEAP32[$14>>2]|0;
    $91 = (($90) + ($89)|0);
    $92 = HEAP8[$91>>0]|0;
    $93 = $92&255;
    $94 = $88 | $93;
    $95 = $94&255;
    HEAP8[$91>>0] = $95;
    $96 = HEAP32[$13>>2]|0;
    $97 = (($96) + ($$0$$i))|0;
    HEAP32[$13>>2] = $97;
    $98 = ($85|0)>(0);
    if ($98) {
     $$01$i = $85;
    } else {
     break;
    }
   }
  }
  $99 = $49 & 65535;
  $100 = ($99|0)==(0);
  if (!($100)) {
   $$01$i2 = $99;
   while(1) {
    $101 = HEAP32[$10>>2]|0;
    $102 = ($101|0)==(0);
    if ($102) {
     HEAP32[$10>>2] = 8;
     $103 = HEAP32[$11>>2]|0;
     $104 = (($103) + 1)|0;
     HEAP32[$11>>2] = $104;
     $105 = HEAP32[$12>>2]|0;
     $106 = ((($gfc) + (($105*48)|0)|0) + 39840|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = HEAP32[$13>>2]|0;
     $109 = ($107|0)==($108|0);
     if ($109) {
      $110 = HEAP32[$14>>2]|0;
      $111 = (($110) + ($104)|0);
      $112 = ((($gfc) + (($105*48)|0)|0) + 39848|0);
      $113 = HEAP32[$15>>2]|0;
      _memcpy(($111|0),($112|0),($113|0))|0;
      $114 = HEAP32[$15>>2]|0;
      $115 = HEAP32[$11>>2]|0;
      $116 = (($115) + ($114))|0;
      HEAP32[$11>>2] = $116;
      $117 = $114 << 3;
      $118 = HEAP32[$13>>2]|0;
      $119 = (($118) + ($117))|0;
      HEAP32[$13>>2] = $119;
      $120 = HEAP32[$12>>2]|0;
      $121 = (($120) + 1)|0;
      $122 = $121 & 255;
      HEAP32[$12>>2] = $122;
      $125 = $116;
     } else {
      $125 = $104;
     }
     $123 = HEAP32[$14>>2]|0;
     $124 = (($123) + ($125)|0);
     HEAP8[$124>>0] = 0;
     $$pre$i3 = HEAP32[$10>>2]|0;
     $127 = $$pre$i3;
    } else {
     $127 = $101;
    }
    $126 = ($$01$i2|0)<($127|0);
    $$0$$i4 = $126 ? $$01$i2 : $127;
    $128 = (($$01$i2) - ($$0$$i4))|0;
    $129 = (($127) - ($$0$$i4))|0;
    HEAP32[$10>>2] = $129;
    $130 = $ext$6 >> $128;
    $131 = $130 << $129;
    $132 = HEAP32[$11>>2]|0;
    $133 = HEAP32[$14>>2]|0;
    $134 = (($133) + ($132)|0);
    $135 = HEAP8[$134>>0]|0;
    $136 = $135&255;
    $137 = $131 | $136;
    $138 = $137&255;
    HEAP8[$134>>0] = $138;
    $139 = HEAP32[$13>>2]|0;
    $140 = (($139) + ($$0$$i4))|0;
    HEAP32[$13>>2] = $140;
    $141 = ($128|0)>(0);
    if ($141) {
     $$01$i2 = $128;
    } else {
     break;
    }
   }
  }
  $142 = (($99) + ($bits$015))|0;
  $143 = (($142) + ($53))|0;
  $144 = (($i$016) + 2)|0;
  $145 = ($144|0)<($end|0);
  if ($145) {
   $bits$015 = $143;$i$016 = $144;
  } else {
   $$0 = $143;
   break;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_encode_mp3_frame($gfc,$inbuf_l,$inbuf_r,$mp3buf,$mp3buf_size) {
 $gfc = $gfc|0;
 $inbuf_l = $inbuf_l|0;
 $inbuf_r = $inbuf_r|0;
 $mp3buf = $mp3buf|0;
 $mp3buf_size = $mp3buf_size|0;
 var $$$i = 0, $$0 = 0, $$pn$i = 0.0, $$pn1$i = 0.0, $$pre = 0, $$pre$i = 0, $$pre$i2 = 0, $$pre$i4 = 0, $$pre$phi$iZ2D = 0, $$pre10$i = 0, $$pre6$i = 0, $$pre91 = 0, $$pre92 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0;
 var $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0.0, $116 = 0.0, $117 = 0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0.0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0.0, $133 = 0, $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0.0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0.0, $164 = 0, $165 = 0.0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0.0, $197 = 0.0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0.0, $206 = 0.0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0.0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0.0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0.0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0.0, $232 = 0, $233 = 0.0, $234 = 0, $235 = 0.0, $236 = 0, $237 = 0.0, $238 = 0, $239 = 0.0, $24 = 0, $240 = 0, $241 = 0.0, $242 = 0, $243 = 0.0, $244 = 0, $245 = 0.0, $246 = 0, $247 = 0.0, $248 = 0;
 var $249 = 0.0, $25 = 0, $250 = 0, $251 = 0.0, $252 = 0, $253 = 0.0, $254 = 0, $255 = 0.0, $256 = 0, $257 = 0.0, $258 = 0, $259 = 0.0, $26 = 0, $260 = 0, $261 = 0.0, $262 = 0, $263 = 0.0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0.0, $270 = 0, $271 = 0, $272 = 0.0, $273 = 0.0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0.0, $279 = 0.0, $28 = 0, $280 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0.0, $284 = 0.0;
 var $285 = 0.0, $286 = 0.0, $287 = 0.0, $288 = 0.0, $289 = 0.0, $29 = 0, $290 = 0.0, $291 = 0.0, $292 = 0.0, $293 = 0.0, $294 = 0.0, $295 = 0.0, $296 = 0.0, $297 = 0.0, $298 = 0.0, $299 = 0.0, $3 = 0, $30 = 0, $300 = 0.0, $301 = 0.0;
 var $302 = 0.0, $303 = 0.0, $304 = 0.0, $305 = 0, $306 = 0, $307 = 0.0, $308 = 0.0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0.0, $314 = 0.0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0;
 var $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0.0, $336 = 0, $337 = 0, $338 = 0;
 var $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0.0, $343 = 0.0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0;
 var $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0;
 var $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0;
 var $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0.0, $8 = 0;
 var $80 = 0.0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $blocktype = 0, $bufp = 0, $ch$01$i = 0, $ch$01$i8 = 0, $ch$064 = 0, $ch$169 = 0, $ch$245$us = 0, $ch$337 = 0, $ch$424$us = 0, $ch$516$us = 0, $ch$614 = 0, $exitcond = 0, $exitcond81 = 0, $exitcond87 = 0, $f$0$lcssa = 0.0, $f$031$us = 0.0, $f$125$us = 0.0, $gr$03$i = 0, $gr$03$i6 = 0;
 var $gr$075 = 0, $gr$154 = 0, $gr$154$us = 0, $gr$242 = 0, $gr$329 = 0, $gr$329$us = 0, $gr$419$us = 0, $gr2_max$0$i = 0.0, $i$06$i = 0, $inbuf = 0, $j$012 = 0, $j$07$i = 0, $j$1$i = 0, $j$113 = 0, $masking_LR = 0, $masking_MS = 0, $masking_MS$sink = 0, $max_pow$0$i = 0.0, $max_pow$1$i = 0.0, $ms_ener_ratio = 0;
 var $or$cond = 0, $pe = 0, $pe_MS = 0, $pe_MS$sink = 0, $primebuff0$i = 0, $primebuff1$i = 0, $sum_pe_LR$057$us = 0.0, $sum_pe_LR$147$us = 0.0, $sum_pe_MS$056$us = 0.0, $sum_pe_MS$146$us = 0.0, $tot_ener = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 20112|0;
 $primebuff0$i = sp + 12056|0;
 $primebuff1$i = sp + 4000|0;
 $masking_LR = sp + 2048|0;
 $masking_MS = sp + 96|0;
 $inbuf = sp + 88|0;
 $tot_ener = sp + 56|0;
 $ms_ener_ratio = sp + 8|0;
 $pe = sp + 40|0;
 $pe_MS = sp + 24|0;
 $bufp = sp;
 $blocktype = sp + 16|0;
 $0 = $ms_ener_ratio;
 $1 = $0;
 HEAP32[$1>>2] = 1056964608;
 $2 = (($0) + 4)|0;
 $3 = $2;
 HEAP32[$3>>2] = 1056964608;
 ;HEAP32[$pe+0>>2]=0|0;HEAP32[$pe+4>>2]=0|0;HEAP32[$pe+8>>2]=0|0;HEAP32[$pe+12>>2]=0|0;
 ;HEAP32[$pe_MS+0>>2]=0|0;HEAP32[$pe_MS+4>>2]=0|0;HEAP32[$pe_MS+8>>2]=0|0;HEAP32[$pe_MS+12>>2]=0|0;
 HEAP32[$inbuf>>2] = $inbuf_l;
 $4 = (($inbuf) + 4|0);
 HEAP32[$4>>2] = $inbuf_r;
 $5 = (($gfc) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = (($gfc) + 76|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9*576)|0;
  HEAP32[$5>>2] = 1;
  _memset(($primebuff0$i|0),0,8056)|0;
  _memset(($primebuff1$i|0),0,8056)|0;
  $11 = (($10) + 862)|0;
  $12 = ($11|0)>(0);
  if ($12) {
   $13 = (($gfc) + 72|0);
   $i$06$i = 0;$j$07$i = 0;
   while(1) {
    $16 = ($i$06$i|0)<($10|0);
    if ($16) {
     $17 = (($primebuff0$i) + ($i$06$i<<2)|0);
     HEAPF32[$17>>2] = 0.0;
     $18 = HEAP32[$13>>2]|0;
     $19 = ($18|0)==(2);
     if ($19) {
      $20 = (($primebuff1$i) + ($i$06$i<<2)|0);
      HEAPF32[$20>>2] = 0.0;
      $j$1$i = $j$07$i;
     } else {
      $j$1$i = $j$07$i;
     }
    } else {
     $21 = (($inbuf_l) + ($j$07$i<<2)|0);
     $22 = +HEAPF32[$21>>2];
     $23 = (($primebuff0$i) + ($i$06$i<<2)|0);
     HEAPF32[$23>>2] = $22;
     $24 = HEAP32[$13>>2]|0;
     $25 = ($24|0)==(2);
     if ($25) {
      $26 = (($inbuf_r) + ($j$07$i<<2)|0);
      $27 = +HEAPF32[$26>>2];
      $28 = (($primebuff1$i) + ($i$06$i<<2)|0);
      HEAPF32[$28>>2] = $27;
     }
     $29 = (($j$07$i) + 1)|0;
     $j$1$i = $29;
    }
    $30 = (($i$06$i) + 1)|0;
    $exitcond87 = ($30|0)==($11|0);
    if ($exitcond87) {
     break;
    } else {
     $i$06$i = $30;$j$07$i = $j$1$i;
    }
   }
  }
  $14 = ($9|0)>(0);
  if ($14) {
   $15 = (($gfc) + 72|0);
   $$pre$i = HEAP32[$15>>2]|0;
   $32 = $$pre$i;$401 = $9;$gr$03$i = 0;
   while(1) {
    $31 = ($32|0)>(0);
    if ($31) {
     $ch$01$i = 0;
     while(1) {
      $33 = (((($gfc) + (($gr$03$i*10504)|0)|0) + (($ch$01$i*5252)|0)|0) + 5092|0);
      HEAP32[$33>>2] = 2;
      $34 = (($ch$01$i) + 1)|0;
      $35 = HEAP32[$15>>2]|0;
      $36 = ($34|0)<($35|0);
      if ($36) {
       $ch$01$i = $34;
      } else {
       break;
      }
     }
     $$pre10$i = HEAP32[$8>>2]|0;
     $39 = $$pre10$i;$402 = $35;
    } else {
     $39 = $401;$402 = $32;
    }
    $37 = (($gr$03$i) + 1)|0;
    $38 = ($37|0)<($39|0);
    if ($38) {
     $32 = $402;$401 = $39;$gr$03$i = $37;
    } else {
     break;
    }
   }
  }
  _mdct_sub48($gfc,$primebuff0$i,$primebuff1$i);
 }
 $40 = (($gfc) + 84752|0);
 HEAP32[$40>>2] = 0;
 $41 = (($gfc) + 39832|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (($gfc) + 39836|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = (($44) - ($42))|0;
 HEAP32[$43>>2] = $45;
 $46 = ($45|0)<(0);
 if ($46) {
  $47 = (($gfc) + 64|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($48) + ($45))|0;
  HEAP32[$43>>2] = $49;
  HEAP32[$40>>2] = 1;
 }
 $50 = $bufp;
 $51 = $50;
 HEAP32[$51>>2] = 0;
 $52 = (($50) + 4)|0;
 $53 = $52;
 HEAP32[$53>>2] = 0;
 $54 = (($gfc) + 76|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = ($55|0)>(0);
 L30: do {
  if ($56) {
   $57 = (($gfc) + 72|0);
   $58 = (($gfc) + 180|0);
   $$pre = HEAP32[$57>>2]|0;
   $60 = $$pre;$gr$075 = 0;
   while(1) {
    $59 = ($60|0)>(0);
    if ($59) {
     $61 = ($gr$075*576)|0;
     $62 = (($61) + 304)|0;
     $ch$064 = 0;
     while(1) {
      $63 = (($inbuf) + ($ch$064<<2)|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = (($64) + ($62<<2)|0);
      $66 = (($bufp) + ($ch$064<<2)|0);
      HEAP32[$66>>2] = $65;
      $67 = (($ch$064) + 1)|0;
      $68 = ($67|0)<($60|0);
      if ($68) {
       $ch$064 = $67;
      } else {
       break;
      }
     }
    }
    $69 = (($pe) + ($gr$075<<3)|0);
    $70 = (($pe_MS) + ($gr$075<<3)|0);
    $71 = (($tot_ener) + ($gr$075<<4)|0);
    $72 = (_L3psycho_anal_vbr($gfc,$bufp,$gr$075,$masking_LR,$masking_MS,$69,$70,$71,$blocktype)|0);
    $73 = ($72|0)==(0);
    if (!($73)) {
     $$0 = -4;
     break;
    }
    $74 = HEAP32[$58>>2]|0;
    $75 = ($74|0)==(1);
    if ($75) {
     $76 = ((($tot_ener) + ($gr$075<<4)|0) + 8|0);
     $77 = +HEAPF32[$76>>2];
     $78 = ((($tot_ener) + ($gr$075<<4)|0) + 12|0);
     $79 = +HEAPF32[$78>>2];
     $80 = $77 + $79;
     $81 = (($ms_ener_ratio) + ($gr$075<<2)|0);
     HEAPF32[$81>>2] = $80;
     $82 = $80 > 0.0;
     if ($82) {
      $83 = $79 / $80;
      HEAPF32[$81>>2] = $83;
     }
    }
    $84 = HEAP32[$57>>2]|0;
    $85 = ($84|0)>(0);
    if ($85) {
     $ch$169 = 0;
     while(1) {
      $86 = (($blocktype) + ($ch$169<<2)|0);
      $87 = HEAP32[$86>>2]|0;
      $88 = (((($gfc) + (($gr$075*10504)|0)|0) + (($ch$169*5252)|0)|0) + 5092|0);
      HEAP32[$88>>2] = $87;
      $89 = (((($gfc) + (($gr$075*10504)|0)|0) + (($ch$169*5252)|0)|0) + 5096|0);
      HEAP32[$89>>2] = 0;
      $90 = (($ch$169) + 1)|0;
      $91 = HEAP32[$57>>2]|0;
      $92 = ($90|0)<($91|0);
      if ($92) {
       $ch$169 = $90;
      } else {
       $403 = $91;
       break;
      }
     }
    } else {
     $403 = $84;
    }
    $93 = (($gr$075) + 1)|0;
    $94 = HEAP32[$54>>2]|0;
    $95 = ($93|0)<($94|0);
    if ($95) {
     $60 = $403;$gr$075 = $93;
    } else {
     $113 = $94;
     break L30;
    }
   }
   STACKTOP = sp;return ($$0|0);
  } else {
   $113 = $55;
  }
 } while(0);
 $96 = (($gfc) + 85796|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = HEAP32[$97>>2]|0;
 $99 = ($98|0)==(0);
 do {
  if ($99) {
   $100 = (($97) + 8|0);
   HEAPF32[$100>>2] = 1.0;
  } else {
   $101 = (($gfc) + 27804|0);
   $102 = +HEAPF32[$101>>2];
   $103 = (($gfc) + 27812|0);
   $104 = +HEAPF32[$103>>2];
   $105 = (($gfc) + 72|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = ($106|0)==(2);
   if ($107) {
    $108 = (($gfc) + 27808|0);
    $109 = +HEAPF32[$108>>2];
    $110 = (($gfc) + 27816|0);
    $111 = +HEAPF32[$110>>2];
    $$pn$i = $109;$$pn1$i = $111;
   } else {
    $$pn$i = $102;$$pn1$i = $104;
   }
   $gr2_max$0$i = $104 + $$pn1$i;
   $max_pow$0$i = $102 + $$pn$i;
   $112 = ($113|0)==(2);
   if ($112) {
    $114 = $max_pow$0$i > $gr2_max$0$i;
    $115 = $114 ? $max_pow$0$i : $gr2_max$0$i;
    $max_pow$1$i = $115;
   } else {
    $max_pow$1$i = $max_pow$0$i;
   }
   $116 = $max_pow$1$i * 0.5;
   $117 = (($97) + 4|0);
   $118 = +HEAPF32[$117>>2];
   $119 = $116 * $118;
   $120 = $119 > 0.03125;
   if ($120) {
    $121 = (($97) + 8|0);
    $122 = +HEAPF32[$121>>2];
    $123 = !($122 >= 1.0);
    if ($123) {
     $124 = (($97) + 12|0);
     $125 = +HEAPF32[$124>>2];
     $126 = $122 < $125;
     if ($126) {
      HEAPF32[$121>>2] = $125;
      $$pre$phi$iZ2D = $124;
     } else {
      $$pre$phi$iZ2D = $124;
     }
    } else {
     HEAPF32[$121>>2] = 1.0;
     $$pre$i2 = (($97) + 12|0);
     $$pre$phi$iZ2D = $$pre$i2;
    }
    HEAPF32[$$pre$phi$iZ2D>>2] = 1.0;
    break;
   }
   $127 = $119;
   $128 = $127 * 31.9800000000000004263;
   $129 = $128 + 6.2500000000000001301E-4;
   $130 = $129;
   $131 = (($97) + 8|0);
   $132 = +HEAPF32[$131>>2];
   $133 = !($132 >= $130);
   do {
    if ($133) {
     $141 = (($97) + 12|0);
     $142 = +HEAPF32[$141>>2];
     $143 = !($142 >= $130);
     if (!($143)) {
      HEAPF32[$131>>2] = $130;
      break;
     }
     $144 = $132 < $142;
     if ($144) {
      HEAPF32[$131>>2] = $142;
     }
    } else {
     $134 = $130;
     $135 = $134 * 0.0749999999999999972244;
     $136 = $135 + 0.925000000000000044408;
     $137 = $132;
     $138 = $136 * $137;
     $139 = $138;
     HEAPF32[$131>>2] = $139;
     $140 = $139 < $130;
     if ($140) {
      HEAPF32[$131>>2] = $130;
     }
    }
   } while(0);
   $145 = (($97) + 12|0);
   HEAPF32[$145>>2] = $130;
  }
 } while(0);
 $146 = HEAP32[$inbuf>>2]|0;
 _mdct_sub48($gfc,$146,$inbuf_r);
 $147 = (($gfc) + 84756|0);
 HEAP32[$147>>2] = 0;
 $148 = (($gfc) + 80|0);
 $149 = HEAP32[$148>>2]|0;
 $150 = ($149|0)==(0);
 L77: do {
  if ($150) {
   $151 = (($gfc) + 180|0);
   $152 = HEAP32[$151>>2]|0;
   $153 = ($152|0)==(1);
   if ($153) {
    $154 = HEAP32[$54>>2]|0;
    $155 = ($154|0)>(0);
    L81: do {
     if ($155) {
      $156 = (($gfc) + 72|0);
      $157 = HEAP32[$156>>2]|0;
      $158 = ($157|0)>(0);
      if ($158) {
       $gr$154$us = 0;$sum_pe_LR$057$us = 0.0;$sum_pe_MS$056$us = 0.0;
      } else {
       $gr$154 = 0;
       while(1) {
        $169 = (($gr$154) + 1)|0;
        $170 = ($169|0)<($154|0);
        if ($170) {
         $gr$154 = $169;
        } else {
         break L81;
        }
       }
      }
      while(1) {
       $ch$245$us = 0;$sum_pe_LR$147$us = $sum_pe_LR$057$us;$sum_pe_MS$146$us = $sum_pe_MS$056$us;
       while(1) {
        $161 = ((($pe_MS) + ($gr$154$us<<3)|0) + ($ch$245$us<<2)|0);
        $162 = +HEAPF32[$161>>2];
        $163 = $sum_pe_MS$146$us + $162;
        $164 = ((($pe) + ($gr$154$us<<3)|0) + ($ch$245$us<<2)|0);
        $165 = +HEAPF32[$164>>2];
        $166 = $sum_pe_LR$147$us + $165;
        $167 = (($ch$245$us) + 1)|0;
        $168 = ($167|0)<($157|0);
        if ($168) {
         $ch$245$us = $167;$sum_pe_LR$147$us = $166;$sum_pe_MS$146$us = $163;
        } else {
         break;
        }
       }
       $159 = (($gr$154$us) + 1)|0;
       $160 = ($159|0)<($154|0);
       if ($160) {
        $gr$154$us = $159;$sum_pe_LR$057$us = $166;$sum_pe_MS$056$us = $163;
       } else {
        break;
       }
      }
      $171 = !($163 <= $166);
      if ($171) {
       $183 = 0;
       break L77;
      }
     }
    } while(0);
    $172 = (($154) + -1)|0;
    $173 = (($gfc) + 5092|0);
    $174 = HEAP32[$173>>2]|0;
    $175 = (($gfc) + 10344|0);
    $176 = HEAP32[$175>>2]|0;
    $177 = ($174|0)==($176|0);
    if ($177) {
     $178 = ((($gfc) + (($172*10504)|0)|0) + 5092|0);
     $179 = HEAP32[$178>>2]|0;
     $180 = ((($gfc) + (($172*10504)|0)|0) + 10344|0);
     $181 = HEAP32[$180>>2]|0;
     $182 = ($179|0)==($181|0);
     if ($182) {
      HEAP32[$147>>2] = 2;
      $183 = 1;
     } else {
      $183 = 0;
     }
    } else {
     $183 = 0;
    }
   } else {
    $183 = 0;
   }
  } else {
   HEAP32[$147>>2] = 2;
   $183 = 1;
  }
 } while(0);
 $masking_MS$sink = $183 ? $masking_MS : $masking_LR;
 $pe_MS$sink = $183 ? $pe_MS : $pe;
 $184 = (($gfc) + 140|0);
 $185 = HEAP32[$184>>2]|0;
 $186 = ($185|0)==(0);
 if (!($186)) {
  $187 = (($gfc) + 85804|0);
  $188 = HEAP32[$187>>2]|0;
  $189 = ($188|0)==(0|0);
  if (!($189)) {
   $190 = HEAP32[$54>>2]|0;
   $191 = ($190|0)>(0);
   if ($191) {
    $192 = (($gfc) + 72|0);
    $$pre91 = HEAP32[$192>>2]|0;
    $194 = $$pre91;$404 = $190;$gr$242 = 0;
    while(1) {
     $193 = ($194|0)>(0);
     if ($193) {
      $195 = (($ms_ener_ratio) + ($gr$242<<2)|0);
      $196 = +HEAPF32[$195>>2];
      $197 = $196;
      $ch$337 = 0;
      while(1) {
       $198 = HEAP32[$187>>2]|0;
       $199 = ((($198) + ($gr$242<<3)|0) + 90904|0);
       HEAPF64[$199>>3] = 0.0;
       $200 = ((($198) + ($gr$242<<3)|0) + 90920|0);
       HEAPF64[$200>>3] = $197;
       $201 = (((($gfc) + (($gr$242*10504)|0)|0) + (($ch$337*5252)|0)|0) + 5092|0);
       $202 = HEAP32[$201>>2]|0;
       $203 = (((($198) + ($gr$242<<3)|0) + ($ch$337<<2)|0) + 203288|0);
       HEAP32[$203>>2] = $202;
       $204 = ((($pe_MS$sink) + ($gr$242<<3)|0) + ($ch$337<<2)|0);
       $205 = +HEAPF32[$204>>2];
       $206 = $205;
       $207 = (((($198) + ($gr$242<<5)|0) + ($ch$337<<3)|0) + 189240|0);
       HEAPF64[$207>>3] = $206;
       $208 = (((($198) + (($gr$242*9216)|0)|0) + (($ch$337*4608)|0)|0) + 54040|0);
       $209 = (((($gfc) + (($gr$242*10504)|0)|0) + (($ch$337*5252)|0)|0) + 304|0);
       _memcpy(($208|0),($209|0),2304)|0;
       $210 = HEAP32[$147>>2]|0;
       $211 = ($210|0)==(2);
       if ($211) {
        $212 = (($ch$337) + 2)|0;
        $213 = HEAP32[$187>>2]|0;
        $214 = (((($213) + ($gr$242<<5)|0) + ($212<<3)|0) + 197144|0);
        $215 = +HEAPF64[$214>>3];
        $216 = (((($213) + ($gr$242<<5)|0) + ($ch$337<<3)|0) + 197144|0);
        HEAPF64[$216>>3] = $215;
        $217 = (((($213) + ($gr$242<<15)|0) + ($ch$337<<13)|0) + 123704|0);
        $218 = (((($213) + ($gr$242<<15)|0) + ($212<<13)|0) + 123704|0);
        _memcpy(($217|0),($218|0),8192)|0;
       }
       $219 = (($ch$337) + 1)|0;
       $220 = HEAP32[$192>>2]|0;
       $221 = ($219|0)<($220|0);
       if ($221) {
        $ch$337 = $219;
       } else {
        break;
       }
      }
      $$pre92 = HEAP32[$54>>2]|0;
      $224 = $$pre92;$405 = $220;
     } else {
      $224 = $404;$405 = $194;
     }
     $222 = (($gr$242) + 1)|0;
     $223 = ($222|0)<($224|0);
     if ($223) {
      $194 = $405;$404 = $224;$gr$242 = $222;
     } else {
      break;
     }
    }
   }
  }
 }
 $225 = (($gfc) + 104|0);
 $226 = HEAP32[$225>>2]|0;
 if ((($226|0) == 3) | (($226|0) == 0)) {
  $227 = (($gfc) + 39760|0);
  $228 = +HEAPF32[$227>>2];
  $229 = (($gfc) + 39756|0);
  HEAPF32[$229>>2] = $228;
  $230 = (($gfc) + 39764|0);
  $231 = +HEAPF32[$230>>2];
  HEAPF32[$227>>2] = $231;
  $232 = (($gfc) + 39768|0);
  $233 = +HEAPF32[$232>>2];
  HEAPF32[$230>>2] = $233;
  $234 = (($gfc) + 39772|0);
  $235 = +HEAPF32[$234>>2];
  HEAPF32[$232>>2] = $235;
  $236 = (($gfc) + 39776|0);
  $237 = +HEAPF32[$236>>2];
  HEAPF32[$234>>2] = $237;
  $238 = (($gfc) + 39780|0);
  $239 = +HEAPF32[$238>>2];
  HEAPF32[$236>>2] = $239;
  $240 = (($gfc) + 39784|0);
  $241 = +HEAPF32[$240>>2];
  HEAPF32[$238>>2] = $241;
  $242 = (($gfc) + 39788|0);
  $243 = +HEAPF32[$242>>2];
  HEAPF32[$240>>2] = $243;
  $244 = (($gfc) + 39792|0);
  $245 = +HEAPF32[$244>>2];
  HEAPF32[$242>>2] = $245;
  $246 = (($gfc) + 39796|0);
  $247 = +HEAPF32[$246>>2];
  HEAPF32[$244>>2] = $247;
  $248 = (($gfc) + 39800|0);
  $249 = +HEAPF32[$248>>2];
  HEAPF32[$246>>2] = $249;
  $250 = (($gfc) + 39804|0);
  $251 = +HEAPF32[$250>>2];
  HEAPF32[$248>>2] = $251;
  $252 = (($gfc) + 39808|0);
  $253 = +HEAPF32[$252>>2];
  HEAPF32[$250>>2] = $253;
  $254 = (($gfc) + 39812|0);
  $255 = +HEAPF32[$254>>2];
  HEAPF32[$252>>2] = $255;
  $256 = (($gfc) + 39816|0);
  $257 = +HEAPF32[$256>>2];
  HEAPF32[$254>>2] = $257;
  $258 = (($gfc) + 39820|0);
  $259 = +HEAPF32[$258>>2];
  HEAPF32[$256>>2] = $259;
  $260 = (($gfc) + 39824|0);
  $261 = +HEAPF32[$260>>2];
  HEAPF32[$258>>2] = $261;
  $262 = (($gfc) + 39828|0);
  $263 = +HEAPF32[$262>>2];
  HEAPF32[$260>>2] = $263;
  $264 = HEAP32[$54>>2]|0;
  $265 = ($264|0)>(0);
  $266 = (($gfc) + 72|0);
  $267 = HEAP32[$266>>2]|0;
  L114: do {
   if ($265) {
    $268 = ($267|0)>(0);
    if ($268) {
     $f$031$us = 0.0;$gr$329$us = 0;
    } else {
     $gr$329 = 0;
     while(1) {
      $276 = (($gr$329) + 1)|0;
      $277 = ($276|0)<($264|0);
      if ($277) {
       $gr$329 = $276;
      } else {
       $f$0$lcssa = 0.0;
       break L114;
      }
     }
    }
    while(1) {
     $ch$424$us = 0;$f$125$us = $f$031$us;
     while(1) {
      $271 = ((($pe_MS$sink) + ($gr$329$us<<3)|0) + ($ch$424$us<<2)|0);
      $272 = +HEAPF32[$271>>2];
      $273 = $f$125$us + $272;
      $274 = (($ch$424$us) + 1)|0;
      $275 = ($274|0)<($267|0);
      if ($275) {
       $ch$424$us = $274;$f$125$us = $273;
      } else {
       break;
      }
     }
     $269 = (($gr$329$us) + 1)|0;
     $270 = ($269|0)<($264|0);
     if ($270) {
      $f$031$us = $273;$gr$329$us = $269;
     } else {
      $f$0$lcssa = $273;
      break;
     }
    }
   } else {
    $f$0$lcssa = 0.0;
   }
  } while(0);
  HEAPF32[$262>>2] = $f$0$lcssa;
  $278 = $228 + $f$0$lcssa;
  $279 = $278 * -0.103943496942520141602;
  $280 = $247 + $279;
  $281 = $231 + $263;
  $282 = $281 * -0.189206495881080627441;
  $283 = $280 + $282;
  $284 = $233 + $261;
  $285 = $284 * -0.216235995292663574219;
  $286 = $283 + $285;
  $287 = $235 + $259;
  $288 = $287 * -0.15591500699520111084;
  $289 = $286 + $288;
  $290 = $237 + $257;
  $291 = $290 * 3.89804496151980011797E-17;
  $292 = $289 + $291;
  $293 = $239 + $255;
  $294 = $293 * 0.233872503042221069336;
  $295 = $292 + $294;
  $296 = $241 + $253;
  $297 = $296 * 0.50454998016357421875;
  $298 = $295 + $297;
  $299 = $243 + $251;
  $300 = $299 * 0.756824970245361328125;
  $301 = $298 + $300;
  $302 = $245 + $249;
  $303 = $302 * 0.935490012168884277343;
  $304 = $301 + $303;
  $305 = ($264*3350)|0;
  $306 = Math_imul($305, $267)|0;
  $307 = (+($306|0));
  $308 = $307 / $304;
  $309 = ($267|0)>(0);
  $or$cond = $265 & $309;
  if ($or$cond) {
   $gr$419$us = 0;
   while(1) {
    $ch$516$us = 0;
    while(1) {
     $312 = ((($pe_MS$sink) + ($gr$419$us<<3)|0) + ($ch$516$us<<2)|0);
     $313 = +HEAPF32[$312>>2];
     $314 = $308 * $313;
     HEAPF32[$312>>2] = $314;
     $315 = (($ch$516$us) + 1)|0;
     $316 = ($315|0)<($267|0);
     if ($316) {
      $ch$516$us = $315;
     } else {
      break;
     }
    }
    $310 = (($gr$419$us) + 1)|0;
    $311 = ($310|0)<($264|0);
    if ($311) {
     $gr$419$us = $310;
    } else {
     break;
    }
   }
  }
 }
 $317 = (($gfc) + 85812|0);
 $318 = HEAP32[$317>>2]|0;
 FUNCTION_TABLE_viiii[$318 & 7]($gfc,$pe_MS$sink,$ms_ener_ratio,$masking_MS$sink);
 (_format_bitstream($gfc)|0);
 $319 = (_copy_buffer($gfc,$mp3buf,$mp3buf_size,1)|0);
 $320 = (($gfc) + 156|0);
 $321 = HEAP32[$320>>2]|0;
 $322 = ($321|0)==(0);
 if (!($322)) {
  _AddVbrFrame($gfc);
 }
 $323 = HEAP32[$184>>2]|0;
 $324 = ($323|0)==(0);
 if (!($324)) {
  $325 = (($gfc) + 85804|0);
  $326 = HEAP32[$325>>2]|0;
  $327 = ($326|0)==(0|0);
  if (!($327)) {
   $328 = HEAP32[$54>>2]|0;
   $329 = ($328*576)|0;
   $330 = (($gfc) + 72|0);
   $331 = HEAP32[$330>>2]|0;
   $332 = ($331|0)>(0);
   if ($332) {
    $ch$614 = 0;
    while(1) {
     $j$012 = 0;
     while(1) {
      $333 = (($j$012) + ($329))|0;
      $334 = (((($326) + (($ch$614*12800)|0)|0) + ($333<<3)|0) + 24|0);
      $335 = +HEAPF64[$334>>3];
      $336 = (((($326) + (($ch$614*12800)|0)|0) + ($j$012<<3)|0) + 24|0);
      HEAPF64[$336>>3] = $335;
      $337 = (($j$012) + 1)|0;
      $exitcond = ($337|0)==(272);
      if ($exitcond) {
       break;
      } else {
       $j$012 = $337;
      }
     }
     $338 = (($inbuf) + ($ch$614<<2)|0);
     $339 = HEAP32[$338>>2]|0;
     $j$113 = 272;
     while(1) {
      $340 = (($j$113) + -272)|0;
      $341 = (($339) + ($340<<2)|0);
      $342 = +HEAPF32[$341>>2];
      $343 = $342;
      $344 = (((($326) + (($ch$614*12800)|0)|0) + ($j$113<<3)|0) + 24|0);
      HEAPF64[$344>>3] = $343;
      $345 = (($j$113) + 1)|0;
      $exitcond81 = ($345|0)==(1600);
      if ($exitcond81) {
       break;
      } else {
       $j$113 = $345;
      }
     }
     $346 = (($ch$614) + 1)|0;
     $347 = ($346|0)<($331|0);
     if ($347) {
      $ch$614 = $346;
     } else {
      break;
     }
    }
   }
   $348 = (($gfc) + 84908|0);
   HEAPF32[$348>>2] = 1.0;
   _set_frame_pinfo($gfc,$masking_MS$sink);
  }
 }
 $349 = (($gfc) + 84748|0);
 $350 = HEAP32[$349>>2]|0;
 $351 = (($350) + 1)|0;
 HEAP32[$349>>2] = $351;
 $352 = (($gfc) + 84744|0);
 $353 = HEAP32[$352>>2]|0;
 $354 = ((($gfc) + (($353*20)|0)|0) + 84056|0);
 $355 = HEAP32[$354>>2]|0;
 $356 = (($355) + 1)|0;
 HEAP32[$354>>2] = $356;
 $357 = (($gfc) + 84356|0);
 $358 = HEAP32[$357>>2]|0;
 $359 = (($358) + 1)|0;
 HEAP32[$357>>2] = $359;
 $360 = (($gfc) + 72|0);
 $361 = HEAP32[$360>>2]|0;
 $362 = ($361|0)==(2);
 if ($362) {
  $363 = HEAP32[$147>>2]|0;
  $364 = HEAP32[$352>>2]|0;
  $365 = (((($gfc) + (($364*20)|0)|0) + ($363<<2)|0) + 84040|0);
  $366 = HEAP32[$365>>2]|0;
  $367 = (($366) + 1)|0;
  HEAP32[$365>>2] = $367;
  $368 = HEAP32[$147>>2]|0;
  $369 = ((($gfc) + ($368<<2)|0) + 84340|0);
  $370 = HEAP32[$369>>2]|0;
  $371 = (($370) + 1)|0;
  HEAP32[$369>>2] = $371;
 }
 $372 = HEAP32[$54>>2]|0;
 $373 = ($372|0)>(0);
 if (!($373)) {
  $$0 = $319;
  STACKTOP = sp;return ($$0|0);
 }
 $374 = (($gfc) + 84740|0);
 $$pre$i4 = HEAP32[$360>>2]|0;
 $376 = $$pre$i4;$406 = $372;$gr$03$i6 = 0;
 while(1) {
  $375 = ($376|0)>(0);
  if ($375) {
   $ch$01$i8 = 0;
   while(1) {
    $377 = (((($gfc) + (($gr$03$i6*10504)|0)|0) + (($ch$01$i8*5252)|0)|0) + 5092|0);
    $378 = HEAP32[$377>>2]|0;
    $379 = (((($gfc) + (($gr$03$i6*10504)|0)|0) + (($ch$01$i8*5252)|0)|0) + 5096|0);
    $380 = HEAP32[$379>>2]|0;
    $381 = ($380|0)==(0);
    $$$i = $381 ? $378 : 4;
    $382 = HEAP32[$352>>2]|0;
    $383 = (((($gfc) + (($382*24)|0)|0) + ($$$i<<2)|0) + 84360|0);
    $384 = HEAP32[$383>>2]|0;
    $385 = (($384) + 1)|0;
    HEAP32[$383>>2] = $385;
    $386 = HEAP32[$352>>2]|0;
    $387 = ((($gfc) + (($386*24)|0)|0) + 84380|0);
    $388 = HEAP32[$387>>2]|0;
    $389 = (($388) + 1)|0;
    HEAP32[$387>>2] = $389;
    $390 = ((($gfc) + ($$$i<<2)|0) + 84720|0);
    $391 = HEAP32[$390>>2]|0;
    $392 = (($391) + 1)|0;
    HEAP32[$390>>2] = $392;
    $393 = HEAP32[$374>>2]|0;
    $394 = (($393) + 1)|0;
    HEAP32[$374>>2] = $394;
    $395 = (($ch$01$i8) + 1)|0;
    $396 = HEAP32[$360>>2]|0;
    $397 = ($395|0)<($396|0);
    if ($397) {
     $ch$01$i8 = $395;
    } else {
     break;
    }
   }
   $$pre6$i = HEAP32[$54>>2]|0;
   $400 = $$pre6$i;$407 = $396;
  } else {
   $400 = $406;$407 = $376;
  }
  $398 = (($gr$03$i6) + 1)|0;
  $399 = ($398|0)<($400|0);
  if ($399) {
   $376 = $407;$406 = $400;$gr$03$i6 = $398;
  } else {
   $$0 = $319;
   break;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _fft_short($gfc,$x_real,$chn,$buffer) {
 $gfc = $gfc|0;
 $x_real = $x_real|0;
 $chn = $chn|0;
 $buffer = $buffer|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0;
 var $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0;
 var $44 = 0.0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0;
 var $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0;
 var $80 = 0.0, $81 = 0, $82 = 0.0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $b$01 = 0, $exitcond = 0, $indvars$iv = 0, $j$0 = 0, $scevgep = 0, $sext = 0, $x$0 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($buffer) + ($chn<<2)|0);
 $1 = (($gfc) + 85820|0);
 $b$01 = 0;$indvars$iv = $x_real;
 while(1) {
  $2 = ((($x_real) + ($b$01<<10)|0) + 512|0);
  $3 = (($b$01) + 1)|0;
  $sext = Math_imul($3, 12582912)|0;
  $4 = $sext >> 16;
  $$pre = HEAP32[$0>>2]|0;
  $j$0 = 31;$x$0 = $2;
  while(1) {
   $5 = $j$0 << 2;
   $6 = (656 + ($5)|0);
   $7 = HEAP8[$6>>0]|0;
   $8 = $7&255;
   $9 = (784 + ($8<<2)|0);
   $10 = +HEAPF32[$9>>2];
   $11 = (($8) + ($4))|0;
   $12 = (($$pre) + ($11<<2)|0);
   $13 = +HEAPF32[$12>>2];
   $14 = $10 * $13;
   $15 = (127 - ($8))|0;
   $16 = (784 + ($15<<2)|0);
   $17 = +HEAPF32[$16>>2];
   $18 = (($11) + 128)|0;
   $19 = (($$pre) + ($18<<2)|0);
   $20 = +HEAPF32[$19>>2];
   $21 = $17 * $20;
   $22 = $14 - $21;
   $23 = $14 + $21;
   $24 = (($8) + 64)|0;
   $25 = (784 + ($24<<2)|0);
   $26 = +HEAPF32[$25>>2];
   $27 = (($11) + 64)|0;
   $28 = (($$pre) + ($27<<2)|0);
   $29 = +HEAPF32[$28>>2];
   $30 = $26 * $29;
   $31 = (63 - ($8))|0;
   $32 = (784 + ($31<<2)|0);
   $33 = +HEAPF32[$32>>2];
   $34 = (($11) + 192)|0;
   $35 = (($$pre) + ($34<<2)|0);
   $36 = +HEAPF32[$35>>2];
   $37 = $33 * $36;
   $38 = $30 - $37;
   $39 = $30 + $37;
   $40 = (($x$0) + -16|0);
   $41 = $23 + $39;
   HEAPF32[$40>>2] = $41;
   $42 = $23 - $39;
   $43 = (($x$0) + -8|0);
   HEAPF32[$43>>2] = $42;
   $44 = $22 + $38;
   $45 = (($x$0) + -12|0);
   HEAPF32[$45>>2] = $44;
   $46 = $22 - $38;
   $47 = (($x$0) + -4|0);
   HEAPF32[$47>>2] = $46;
   $48 = (($8) + 1)|0;
   $49 = (784 + ($48<<2)|0);
   $50 = +HEAPF32[$49>>2];
   $51 = (($11) + 1)|0;
   $52 = (($$pre) + ($51<<2)|0);
   $53 = +HEAPF32[$52>>2];
   $54 = $50 * $53;
   $55 = (126 - ($8))|0;
   $56 = (784 + ($55<<2)|0);
   $57 = +HEAPF32[$56>>2];
   $58 = (($11) + 129)|0;
   $59 = (($$pre) + ($58<<2)|0);
   $60 = +HEAPF32[$59>>2];
   $61 = $57 * $60;
   $62 = $54 - $61;
   $63 = $54 + $61;
   $64 = (($8) + 65)|0;
   $65 = (784 + ($64<<2)|0);
   $66 = +HEAPF32[$65>>2];
   $67 = (($11) + 65)|0;
   $68 = (($$pre) + ($67<<2)|0);
   $69 = +HEAPF32[$68>>2];
   $70 = $66 * $69;
   $71 = (62 - ($8))|0;
   $72 = (784 + ($71<<2)|0);
   $73 = +HEAPF32[$72>>2];
   $74 = (($11) + 193)|0;
   $75 = (($$pre) + ($74<<2)|0);
   $76 = +HEAPF32[$75>>2];
   $77 = $73 * $76;
   $78 = $70 - $77;
   $79 = $70 + $77;
   $80 = $63 + $79;
   $81 = (($x$0) + 496|0);
   HEAPF32[$81>>2] = $80;
   $82 = $63 - $79;
   $83 = (($x$0) + 504|0);
   HEAPF32[$83>>2] = $82;
   $84 = $62 + $78;
   $85 = (($x$0) + 500|0);
   HEAPF32[$85>>2] = $84;
   $86 = $62 - $78;
   $87 = (($x$0) + 508|0);
   HEAPF32[$87>>2] = $86;
   $88 = (($j$0) + -1)|0;
   $89 = ($j$0|0)>(0);
   if ($89) {
    $j$0 = $88;$x$0 = $40;
   } else {
    break;
   }
  }
  $90 = HEAP32[$1>>2]|0;
  FUNCTION_TABLE_vii[$90 & 3]($indvars$iv,128);
  $scevgep = (($indvars$iv) + 1024|0);
  $exitcond = ($3|0)==(3);
  if ($exitcond) {
   break;
  } else {
   $b$01 = $3;$indvars$iv = $scevgep;
  }
 }
 STACKTOP = sp;return;
}
function _fft_long($gfc,$x,$chn,$buffer) {
 $gfc = $gfc|0;
 $x = $x|0;
 $chn = $chn|0;
 $buffer = $buffer|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0;
 var $25 = 0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0;
 var $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0;
 var $61 = 0, $62 = 0.0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0.0, $9 = 0.0, $jj$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($x) + 2048|0);
 $1 = (($buffer) + ($chn<<2)|0);
 $$pre = HEAP32[$1>>2]|0;
 $$0 = $0;$jj$0 = 127;
 while(1) {
  $2 = (656 + ($jj$0)|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = $3&255;
  $5 = (1296 + ($4<<2)|0);
  $6 = +HEAPF32[$5>>2];
  $7 = (($$pre) + ($4<<2)|0);
  $8 = +HEAPF32[$7>>2];
  $9 = $6 * $8;
  $10 = $4 | 512;
  $11 = (1296 + ($10<<2)|0);
  $12 = +HEAPF32[$11>>2];
  $13 = (($$pre) + ($10<<2)|0);
  $14 = +HEAPF32[$13>>2];
  $15 = $12 * $14;
  $16 = $9 - $15;
  $17 = $9 + $15;
  $18 = $4 | 256;
  $19 = (1296 + ($18<<2)|0);
  $20 = +HEAPF32[$19>>2];
  $21 = (($$pre) + ($18<<2)|0);
  $22 = +HEAPF32[$21>>2];
  $23 = $20 * $22;
  $24 = $4 | 768;
  $25 = (1296 + ($24<<2)|0);
  $26 = +HEAPF32[$25>>2];
  $27 = (($$pre) + ($24<<2)|0);
  $28 = +HEAPF32[$27>>2];
  $29 = $26 * $28;
  $30 = $23 - $29;
  $31 = $23 + $29;
  $32 = (($$0) + -16|0);
  $33 = $17 + $31;
  HEAPF32[$32>>2] = $33;
  $34 = $17 - $31;
  $35 = (($$0) + -8|0);
  HEAPF32[$35>>2] = $34;
  $36 = $16 + $30;
  $37 = (($$0) + -12|0);
  HEAPF32[$37>>2] = $36;
  $38 = $16 - $30;
  $39 = (($$0) + -4|0);
  HEAPF32[$39>>2] = $38;
  $40 = (($4) + 1)|0;
  $41 = (1296 + ($40<<2)|0);
  $42 = +HEAPF32[$41>>2];
  $43 = (($$pre) + ($40<<2)|0);
  $44 = +HEAPF32[$43>>2];
  $45 = $42 * $44;
  $46 = (($4) + 513)|0;
  $47 = (1296 + ($46<<2)|0);
  $48 = +HEAPF32[$47>>2];
  $49 = (($$pre) + ($46<<2)|0);
  $50 = +HEAPF32[$49>>2];
  $51 = $48 * $50;
  $52 = $45 - $51;
  $53 = $45 + $51;
  $54 = (($4) + 257)|0;
  $55 = (1296 + ($54<<2)|0);
  $56 = +HEAPF32[$55>>2];
  $57 = (($$pre) + ($54<<2)|0);
  $58 = +HEAPF32[$57>>2];
  $59 = $56 * $58;
  $60 = (($4) + 769)|0;
  $61 = (1296 + ($60<<2)|0);
  $62 = +HEAPF32[$61>>2];
  $63 = (($$pre) + ($60<<2)|0);
  $64 = +HEAPF32[$63>>2];
  $65 = $62 * $64;
  $66 = $59 - $65;
  $67 = $59 + $65;
  $68 = $53 + $67;
  $69 = (($$0) + 2032|0);
  HEAPF32[$69>>2] = $68;
  $70 = $53 - $67;
  $71 = (($$0) + 2040|0);
  HEAPF32[$71>>2] = $70;
  $72 = $52 + $66;
  $73 = (($$0) + 2036|0);
  HEAPF32[$73>>2] = $72;
  $74 = $52 - $66;
  $75 = (($$0) + 2044|0);
  HEAPF32[$75>>2] = $74;
  $76 = (($jj$0) + -1)|0;
  $77 = ($jj$0|0)>(0);
  if ($77) {
   $$0 = $32;$jj$0 = $76;
  } else {
   break;
  }
 }
 $78 = (($gfc) + 85820|0);
 $79 = HEAP32[$78>>2]|0;
 FUNCTION_TABLE_vii[$79 & 3]($x,512);
 STACKTOP = sp;return;
}
function _init_fft($gfc) {
 $gfc = $gfc|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0;
 var $7 = 0.0, $8 = 0.0, $9 = 0.0, $exitcond = 0, $exitcond3 = 0, $i$02 = 0, $i$11 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $i$02 = 0;
 while(1) {
  $0 = (+($i$02|0));
  $1 = $0 + 0.5;
  $2 = $1 * 0.00613592315154256467968;
  $3 = (+Math_cos((+$2)));
  $4 = $3 * 0.5;
  $5 = 0.419999999999999984457 - $4;
  $6 = $1 * 0.0122718463030851293594;
  $7 = (+Math_cos((+$6)));
  $8 = $7 * 0.0800000000000000016653;
  $9 = $5 + $8;
  $10 = $9;
  $11 = (1296 + ($i$02<<2)|0);
  HEAPF32[$11>>2] = $10;
  $12 = (($i$02) + 1)|0;
  $exitcond3 = ($12|0)==(1024);
  if ($exitcond3) {
   $i$11 = 0;
   break;
  } else {
   $i$02 = $12;
  }
 }
 while(1) {
  $13 = (+($i$11|0));
  $14 = $13 + 0.5;
  $15 = $14 * 0.0245436926061702587187;
  $16 = (+Math_cos((+$15)));
  $17 = 1.0 - $16;
  $18 = $17 * 0.5;
  $19 = $18;
  $20 = (784 + ($i$11<<2)|0);
  HEAPF32[$20>>2] = $19;
  $21 = (($i$11) + 1)|0;
  $exitcond = ($21|0)==(128);
  if ($exitcond) {
   break;
  } else {
   $i$11 = $21;
  }
 }
 $22 = (($gfc) + 85820|0);
 HEAP32[$22>>2] = 1;
 STACKTOP = sp;return;
}
function _fht($fz,$n) {
 $fz = $fz|0;
 $n = $n|0;
 var $$sum = 0, $0 = 0, $1 = 0, $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0;
 var $115 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0;
 var $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0.0;
 var $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0;
 var $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0;
 var $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $c1$02 = 0.0, $fi$0 = 0, $fi$1 = 0, $gi$0 = 0, $gi$1 = 0, $i$01 = 0, $k4$0 = 0, $s1$03 = 0.0, $tri$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $n << 1;
 $1 = (($fz) + ($0<<2)|0);
 $k4$0 = 4;$tri$0 = 5392;
 while(1) {
  $2 = $k4$0 >> 1;
  $3 = $k4$0 << 1;
  $4 = (($3) + ($k4$0))|0;
  $5 = $k4$0 << 2;
  $6 = (($fz) + ($2<<2)|0);
  $fi$0 = $fz;$gi$0 = $6;
  while(1) {
   $7 = +HEAPF32[$fi$0>>2];
   $8 = (($fi$0) + ($k4$0<<2)|0);
   $9 = +HEAPF32[$8>>2];
   $10 = $7 - $9;
   $11 = $7 + $9;
   $12 = (($fi$0) + ($3<<2)|0);
   $13 = +HEAPF32[$12>>2];
   $14 = (($fi$0) + ($4<<2)|0);
   $15 = +HEAPF32[$14>>2];
   $16 = $13 - $15;
   $17 = $13 + $15;
   $18 = $11 - $17;
   HEAPF32[$12>>2] = $18;
   $19 = $11 + $17;
   HEAPF32[$fi$0>>2] = $19;
   $20 = $10 - $16;
   HEAPF32[$14>>2] = $20;
   $21 = $10 + $16;
   HEAPF32[$8>>2] = $21;
   $22 = +HEAPF32[$gi$0>>2];
   $23 = (($gi$0) + ($k4$0<<2)|0);
   $24 = +HEAPF32[$23>>2];
   $25 = $22 - $24;
   $26 = $22 + $24;
   $27 = (($gi$0) + ($4<<2)|0);
   $28 = +HEAPF32[$27>>2];
   $29 = $28;
   $30 = $29 * 1.41421356237309514547;
   $31 = $30;
   $32 = (($gi$0) + ($3<<2)|0);
   $33 = +HEAPF32[$32>>2];
   $34 = $33;
   $35 = $34 * 1.41421356237309514547;
   $36 = $35;
   $37 = $26 - $36;
   HEAPF32[$32>>2] = $37;
   $38 = $26 + $36;
   HEAPF32[$gi$0>>2] = $38;
   $39 = $25 - $31;
   HEAPF32[$27>>2] = $39;
   $40 = $25 + $31;
   HEAPF32[$23>>2] = $40;
   $41 = (($gi$0) + ($5<<2)|0);
   $42 = (($fi$0) + ($5<<2)|0);
   $43 = ($42>>>0)<($1>>>0);
   if ($43) {
    $fi$0 = $42;$gi$0 = $41;
   } else {
    break;
   }
  }
  $44 = (($tri$0) + 4|0);
  $45 = ($k4$0|0)>(2);
  if ($45) {
   $46 = +HEAPF32[$44>>2];
   $47 = +HEAPF32[$tri$0>>2];
   $c1$02 = $47;$i$01 = 1;$s1$03 = $46;
   while(1) {
    $48 = $s1$03 * 2.0;
    $49 = $s1$03 * $48;
    $50 = 1.0 - $49;
    $51 = $c1$02 * $48;
    $52 = (($fz) + ($i$01<<2)|0);
    $$sum = (($k4$0) - ($i$01))|0;
    $53 = (($fz) + ($$sum<<2)|0);
    $fi$1 = $52;$gi$1 = $53;
    while(1) {
     $54 = (($fi$1) + ($k4$0<<2)|0);
     $55 = +HEAPF32[$54>>2];
     $56 = $51 * $55;
     $57 = (($gi$1) + ($k4$0<<2)|0);
     $58 = +HEAPF32[$57>>2];
     $59 = $50 * $58;
     $60 = $56 - $59;
     $61 = $50 * $55;
     $62 = $51 * $58;
     $63 = $61 + $62;
     $64 = +HEAPF32[$fi$1>>2];
     $65 = $64 - $63;
     $66 = $64 + $63;
     $67 = +HEAPF32[$gi$1>>2];
     $68 = $67 - $60;
     $69 = $67 + $60;
     $70 = (($fi$1) + ($4<<2)|0);
     $71 = +HEAPF32[$70>>2];
     $72 = $51 * $71;
     $73 = (($gi$1) + ($4<<2)|0);
     $74 = +HEAPF32[$73>>2];
     $75 = $50 * $74;
     $76 = $72 - $75;
     $77 = $50 * $71;
     $78 = $51 * $74;
     $79 = $77 + $78;
     $80 = (($fi$1) + ($3<<2)|0);
     $81 = +HEAPF32[$80>>2];
     $82 = $81 - $79;
     $83 = $81 + $79;
     $84 = (($gi$1) + ($3<<2)|0);
     $85 = +HEAPF32[$84>>2];
     $86 = $85 - $76;
     $87 = $85 + $76;
     $88 = $s1$03 * $83;
     $89 = $c1$02 * $86;
     $90 = $88 - $89;
     $91 = $c1$02 * $83;
     $92 = $s1$03 * $86;
     $93 = $91 + $92;
     $94 = $66 - $93;
     HEAPF32[$80>>2] = $94;
     $95 = $66 + $93;
     HEAPF32[$fi$1>>2] = $95;
     $96 = $68 - $90;
     HEAPF32[$73>>2] = $96;
     $97 = $68 + $90;
     HEAPF32[$57>>2] = $97;
     $98 = $c1$02 * $87;
     $99 = $s1$03 * $82;
     $100 = $98 - $99;
     $101 = $s1$03 * $87;
     $102 = $c1$02 * $82;
     $103 = $101 + $102;
     $104 = $69 - $103;
     HEAPF32[$84>>2] = $104;
     $105 = $69 + $103;
     HEAPF32[$gi$1>>2] = $105;
     $106 = $65 - $100;
     HEAPF32[$70>>2] = $106;
     $107 = $65 + $100;
     HEAPF32[$54>>2] = $107;
     $108 = (($gi$1) + ($5<<2)|0);
     $109 = (($fi$1) + ($5<<2)|0);
     $110 = ($109>>>0)<($1>>>0);
     if ($110) {
      $fi$1 = $109;$gi$1 = $108;
     } else {
      break;
     }
    }
    $111 = +HEAPF32[$tri$0>>2];
    $112 = $c1$02 * $111;
    $113 = +HEAPF32[$44>>2];
    $114 = $s1$03 * $113;
    $115 = $112 - $114;
    $116 = $c1$02 * $113;
    $117 = $s1$03 * $111;
    $118 = $117 + $116;
    $119 = (($i$01) + 1)|0;
    $120 = ($119|0)<($2|0);
    if ($120) {
     $c1$02 = $115;$i$01 = $119;$s1$03 = $118;
    } else {
     break;
    }
   }
  }
  $121 = (($tri$0) + 8|0);
  $122 = ($5|0)<($0|0);
  if ($122) {
   $k4$0 = $5;$tri$0 = $121;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _InitGainAnalysis($rgData,$samplefreq) {
 $rgData = $rgData|0;
 $samplefreq = $samplefreq|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = (($rgData) + 29112|0);
 $1 = (($rgData) + 19464|0);
 $2 = (($rgData) + 19380|0);
 $3 = (($rgData) + 9732|0);
 $4 = (($rgData) + 84|0);
 dest=$rgData+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 dest=$4+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 dest=$3+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 dest=$2+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 dest=$1+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 dest=$0+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 do {
  if ((($samplefreq|0) == 12000)) {
   $11 = (($rgData) + 38784|0);
   HEAP32[$11>>2] = 6;
  } else if ((($samplefreq|0) == 22050)) {
   $9 = (($rgData) + 38784|0);
   HEAP32[$9>>2] = 4;
  } else if ((($samplefreq|0) == 48000)) {
   $5 = (($rgData) + 38784|0);
   HEAP32[$5>>2] = 0;
  } else if ((($samplefreq|0) == 24000)) {
   $8 = (($rgData) + 38784|0);
   HEAP32[$8>>2] = 3;
  } else if ((($samplefreq|0) == 11025)) {
   $12 = (($rgData) + 38784|0);
   HEAP32[$12>>2] = 7;
  } else if ((($samplefreq|0) == 8000)) {
   $13 = (($rgData) + 38784|0);
   HEAP32[$13>>2] = 8;
  } else if ((($samplefreq|0) == 32000)) {
   $7 = (($rgData) + 38784|0);
   HEAP32[$7>>2] = 2;
  } else if ((($samplefreq|0) == 44100)) {
   $6 = (($rgData) + 38784|0);
   HEAP32[$6>>2] = 1;
  } else if ((($samplefreq|0) == 16000)) {
   $10 = (($rgData) + 38784|0);
   HEAP32[$10>>2] = 5;
  } else {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $14 = (($samplefreq) + 19)|0;
 $15 = (($14|0) / 20)&-1;
 $16 = (($rgData) + 38760|0);
 HEAP32[$16>>2] = $15;
 $17 = (($rgData) + 38764|0);
 $18 = (($rgData) + 38792|0);
 _memset(($18|0),0,48000)|0;
 ;HEAP32[$17+0>>2]=0|0;HEAP32[$17+4>>2]=0|0;HEAP32[$17+8>>2]=0|0;HEAP32[$17+12>>2]=0|0;HEAP32[$17+16>>2]=0|0;
 $19 = (($rgData) + 40|0);
 $20 = (($rgData) + 80|0);
 HEAP32[$20>>2] = $19;
 $21 = (($rgData) + 19420|0);
 $22 = (($rgData) + 19460|0);
 HEAP32[$22>>2] = $21;
 $23 = (($rgData) + 124|0);
 $24 = (($rgData) + 9728|0);
 HEAP32[$24>>2] = $23;
 $25 = (($rgData) + 19504|0);
 $26 = (($rgData) + 29108|0);
 HEAP32[$26>>2] = $25;
 $27 = (($rgData) + 9772|0);
 $28 = (($rgData) + 19376|0);
 HEAP32[$28>>2] = $27;
 $29 = (($rgData) + 29152|0);
 $30 = (($rgData) + 38756|0);
 HEAP32[$30>>2] = $29;
 $31 = (($rgData) + 86792|0);
 _memset(($31|0),0,48000)|0;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _AnalyzeSamples($rgData,$left_samples,$right_samples,$num_samples,$num_channels) {
 $rgData = $rgData|0;
 $left_samples = $left_samples|0;
 $right_samples = $right_samples|0;
 $num_samples = $num_samples|0;
 $num_channels = $num_channels|0;
 var $$ = 0, $$$batchsamples$0 = 0, $$0 = 0, $$01 = 0, $$01$pn = 0, $$014$i = 0, $$014$i7 = 0, $$023$i = 0, $$023$i8 = 0, $$05$i = 0, $$05$i6 = 0, $$batchsamples$0 = 0, $$pre = 0, $$promoted = 0.0, $$promoted14 = 0.0, $$promoted22 = 0.0, $$promoted23 = 0.0, $$sum = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0, $134 = 0.0, $135 = 0.0;
 var $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0, $152 = 0.0, $153 = 0.0;
 var $154 = 0.0, $155 = 0.0, $156 = 0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0;
 var $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0, $188 = 0.0, $189 = 0.0, $19 = 0;
 var $190 = 0.0, $191 = 0.0, $192 = 0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0, $198 = 0.0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0.0, $201 = 0.0, $202 = 0, $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0.0, $207 = 0;
 var $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0, $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0.0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0.0, $239 = 0.0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0.0;
 var $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0.0, $95 = 0.0;
 var $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $batchsamples$0 = 0, $curleft$0 = 0, $curleft$1$lcssa = 0, $curleft$110 = 0, $curleft$216 = 0, $curright$0 = 0, $curright$1$lcssa = 0, $curright$111 = 0, $curright$217 = 0, $cursamplepos$0 = 0, $cursamples$0 = 0, $cursamples$0$off = 0, $i$012 = 0, $i$118 = 0, $left_samples$pn = 0, $scevgep = 0;
 var $scevgep29 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $0 = ($num_samples|0)==(0);
 if ($0) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 if ((($num_channels|0) == 2)) {
  $$01 = $right_samples;
 } else if ((($num_channels|0) == 1)) {
  $$01 = $left_samples;
 } else {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = ($num_samples>>>0)<(10);
 $2 = (($rgData) + 40|0);
 if ($1) {
  $3 = $num_samples << 2;
  _memcpy(($2|0),($left_samples|0),($3|0))|0;
  $4 = (($rgData) + 19420|0);
  _memcpy(($4|0),($$01|0),($3|0))|0;
 } else {
  dest=$2+0|0; src=$left_samples+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $5 = (($rgData) + 19420|0);
  dest=$5+0|0; src=$$01+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 }
 $6 = (($rgData) + 38760|0);
 $7 = (($rgData) + 38764|0);
 $8 = (($rgData) + 80|0);
 $9 = (($rgData) + 19460|0);
 $10 = (($rgData) + 9728|0);
 $11 = (($rgData) + 38784|0);
 $12 = (($rgData) + 29108|0);
 $13 = (($rgData) + 19376|0);
 $14 = (($rgData) + 38756|0);
 $15 = (($rgData) + 38768|0);
 $16 = (($rgData) + 38776|0);
 $17 = (($rgData) + 9732|0);
 $18 = (($rgData) + 29112|0);
 $19 = (($rgData) + 84|0);
 $20 = (($rgData) + 19464|0);
 $batchsamples$0 = $num_samples;$cursamplepos$0 = 0;
 while(1) {
  $21 = ($batchsamples$0|0)>(0);
  if (!($21)) {
   break;
  }
  $22 = HEAP32[$6>>2]|0;
  $23 = HEAP32[$7>>2]|0;
  $24 = (($22) - ($23))|0;
  $25 = ($batchsamples$0|0)>($24|0);
  $$batchsamples$0 = $25 ? $24 : $batchsamples$0;
  $26 = ($cursamplepos$0|0)<(10);
  if ($26) {
   $27 = HEAP32[$8>>2]|0;
   $28 = HEAP32[$9>>2]|0;
   $29 = (10 - ($cursamplepos$0))|0;
   $30 = ($$batchsamples$0|0)>($29|0);
   $$$batchsamples$0 = $30 ? $29 : $$batchsamples$0;
   $$01$pn = $28;$cursamples$0 = $$$batchsamples$0;$left_samples$pn = $27;
  } else {
   $$01$pn = $$01;$cursamples$0 = $$batchsamples$0;$left_samples$pn = $left_samples;
  }
  $curright$0 = (($$01$pn) + ($cursamplepos$0<<2)|0);
  $curleft$0 = (($left_samples$pn) + ($cursamplepos$0<<2)|0);
  $31 = HEAP32[$10>>2]|0;
  $32 = (($31) + ($23<<2)|0);
  $33 = HEAP32[$11>>2]|0;
  $34 = (5424 + (($33*84)|0)|0);
  _filterYule($curleft$0,$32,$cursamples$0,$34);
  $35 = HEAP32[$12>>2]|0;
  $36 = HEAP32[$7>>2]|0;
  $37 = (($35) + ($36<<2)|0);
  $38 = HEAP32[$11>>2]|0;
  $39 = (5424 + (($38*84)|0)|0);
  _filterYule($curright$0,$37,$cursamples$0,$39);
  $40 = HEAP32[$7>>2]|0;
  $41 = HEAP32[$11>>2]|0;
  $42 = ($cursamples$0|0)==(0);
  if ($42) {
   label = 17;
  } else {
   $43 = (6184 + (($41*20)|0)|0);
   $44 = HEAP32[$13>>2]|0;
   $45 = HEAP32[$10>>2]|0;
   $46 = (($44) + ($40<<2)|0);
   $47 = (($45) + ($40<<2)|0);
   $48 = ((6184 + (($41*20)|0)|0) + 4|0);
   $49 = ((6184 + (($41*20)|0)|0) + 8|0);
   $50 = ((6184 + (($41*20)|0)|0) + 12|0);
   $51 = ((6184 + (($41*20)|0)|0) + 16|0);
   $52 = +HEAPF32[$43>>2];
   $53 = +HEAPF32[$48>>2];
   $54 = +HEAPF32[$49>>2];
   $55 = +HEAPF32[$50>>2];
   $56 = +HEAPF32[$51>>2];
   $$014$i = $cursamples$0;$$023$i = $46;$$05$i = $47;
   while(1) {
    $57 = (($$014$i) + -1)|0;
    $58 = +HEAPF32[$$05$i>>2];
    $59 = $58 * $52;
    $60 = (($$023$i) + -4|0);
    $61 = +HEAPF32[$60>>2];
    $62 = $61 * $53;
    $63 = $59 - $62;
    $64 = (($$05$i) + -4|0);
    $65 = +HEAPF32[$64>>2];
    $66 = $65 * $54;
    $67 = $63 + $66;
    $68 = (($$023$i) + -8|0);
    $69 = +HEAPF32[$68>>2];
    $70 = $69 * $55;
    $71 = $67 - $70;
    $72 = (($$05$i) + -8|0);
    $73 = +HEAPF32[$72>>2];
    $74 = $73 * $56;
    $75 = $71 + $74;
    HEAPF32[$$023$i>>2] = $75;
    $76 = (($$023$i) + 4|0);
    $77 = (($$05$i) + 4|0);
    $78 = ($57|0)==(0);
    if ($78) {
     break;
    } else {
     $$014$i = $57;$$023$i = $76;$$05$i = $77;
    }
   }
   if ($42) {
    label = 17;
   } else {
    $79 = (6184 + (($41*20)|0)|0);
    $80 = HEAP32[$14>>2]|0;
    $81 = HEAP32[$12>>2]|0;
    $82 = (($80) + ($40<<2)|0);
    $83 = (($81) + ($40<<2)|0);
    $84 = ((6184 + (($41*20)|0)|0) + 4|0);
    $85 = ((6184 + (($41*20)|0)|0) + 8|0);
    $86 = ((6184 + (($41*20)|0)|0) + 12|0);
    $87 = ((6184 + (($41*20)|0)|0) + 16|0);
    $88 = +HEAPF32[$79>>2];
    $89 = +HEAPF32[$84>>2];
    $90 = +HEAPF32[$85>>2];
    $91 = +HEAPF32[$86>>2];
    $92 = +HEAPF32[$87>>2];
    $$014$i7 = $cursamples$0;$$023$i8 = $82;$$05$i6 = $83;
    while(1) {
     $93 = (($$014$i7) + -1)|0;
     $94 = +HEAPF32[$$05$i6>>2];
     $95 = $94 * $88;
     $96 = (($$023$i8) + -4|0);
     $97 = +HEAPF32[$96>>2];
     $98 = $97 * $89;
     $99 = $95 - $98;
     $100 = (($$05$i6) + -4|0);
     $101 = +HEAPF32[$100>>2];
     $102 = $101 * $90;
     $103 = $99 + $102;
     $104 = (($$023$i8) + -8|0);
     $105 = +HEAPF32[$104>>2];
     $106 = $105 * $91;
     $107 = $103 - $106;
     $108 = (($$05$i6) + -8|0);
     $109 = +HEAPF32[$108>>2];
     $110 = $109 * $92;
     $111 = $107 + $110;
     HEAPF32[$$023$i8>>2] = $111;
     $112 = (($$023$i8) + 4|0);
     $113 = (($$05$i6) + 4|0);
     $114 = ($93|0)==(0);
     if ($114) {
      break;
     } else {
      $$014$i7 = $93;$$023$i8 = $112;$$05$i6 = $113;
     }
    }
    $119 = HEAP32[$13>>2]|0;
    $120 = (($119) + ($40<<2)|0);
    $121 = HEAP32[$14>>2]|0;
    $122 = (($121) + ($40<<2)|0);
    $123 = (($cursamples$0|0) % 8)&-1;
    $124 = ($123|0)==(0);
    if ($124) {
     $curleft$1$lcssa = $120;$curright$1$lcssa = $122;
    } else {
     $$promoted = +HEAPF64[$15>>3];
     $$promoted14 = +HEAPF64[$16>>3];
     $125 = (($40) + ($123))|0;
     $scevgep = (($121) + ($125<<2)|0);
     $132 = $$promoted;$138 = $$promoted14;$curleft$110 = $120;$curright$111 = $122;$i$012 = $123;
     while(1) {
      $126 = (($i$012) + -1)|0;
      $127 = (($curleft$110) + 4|0);
      $128 = +HEAPF32[$curleft$110>>2];
      $129 = $128;
      $130 = $129 * $129;
      $131 = $132 + $130;
      $133 = (($curright$111) + 4|0);
      $134 = +HEAPF32[$curright$111>>2];
      $135 = $134;
      $136 = $135 * $135;
      $137 = $138 + $136;
      $139 = ($126|0)==(0);
      if ($139) {
       break;
      } else {
       $132 = $131;$138 = $137;$curleft$110 = $127;$curright$111 = $133;$i$012 = $126;
      }
     }
     $scevgep29 = (($119) + ($125<<2)|0);
     HEAPF64[$15>>3] = $131;
     HEAPF64[$16>>3] = $137;
     $curleft$1$lcssa = $scevgep29;$curright$1$lcssa = $scevgep;
    }
   }
  }
  if ((label|0) == 17) {
   label = 0;
   $115 = HEAP32[$13>>2]|0;
   $116 = (($115) + ($40<<2)|0);
   $117 = HEAP32[$14>>2]|0;
   $118 = (($117) + ($40<<2)|0);
   $curleft$1$lcssa = $116;$curright$1$lcssa = $118;
  }
  $cursamples$0$off = (($cursamples$0) + 7)|0;
  $140 = ($cursamples$0$off>>>0)<(15);
  if (!($140)) {
   $141 = (($cursamples$0|0) / 8)&-1;
   $$promoted22 = +HEAPF64[$15>>3];
   $$promoted23 = +HEAPF64[$16>>3];
   $182 = $$promoted22;$223 = $$promoted23;$curleft$216 = $curleft$1$lcssa;$curright$217 = $curright$1$lcssa;$i$118 = $141;
   while(1) {
    $142 = (($i$118) + -1)|0;
    $143 = +HEAPF32[$curleft$216>>2];
    $144 = $143;
    $145 = $144 * $144;
    $146 = (($curleft$216) + 4|0);
    $147 = +HEAPF32[$146>>2];
    $148 = $147;
    $149 = $148 * $148;
    $150 = $145 + $149;
    $151 = (($curleft$216) + 8|0);
    $152 = +HEAPF32[$151>>2];
    $153 = $152;
    $154 = $153 * $153;
    $155 = $150 + $154;
    $156 = (($curleft$216) + 12|0);
    $157 = +HEAPF32[$156>>2];
    $158 = $157;
    $159 = $158 * $158;
    $160 = $155 + $159;
    $161 = (($curleft$216) + 16|0);
    $162 = +HEAPF32[$161>>2];
    $163 = $162;
    $164 = $163 * $163;
    $165 = $160 + $164;
    $166 = (($curleft$216) + 20|0);
    $167 = +HEAPF32[$166>>2];
    $168 = $167;
    $169 = $168 * $168;
    $170 = $165 + $169;
    $171 = (($curleft$216) + 24|0);
    $172 = +HEAPF32[$171>>2];
    $173 = $172;
    $174 = $173 * $173;
    $175 = $170 + $174;
    $176 = (($curleft$216) + 28|0);
    $177 = +HEAPF32[$176>>2];
    $178 = $177;
    $179 = $178 * $178;
    $180 = $175 + $179;
    $181 = $182 + $180;
    $183 = (($curleft$216) + 32|0);
    $184 = +HEAPF32[$curright$217>>2];
    $185 = $184;
    $186 = $185 * $185;
    $187 = (($curright$217) + 4|0);
    $188 = +HEAPF32[$187>>2];
    $189 = $188;
    $190 = $189 * $189;
    $191 = $186 + $190;
    $192 = (($curright$217) + 8|0);
    $193 = +HEAPF32[$192>>2];
    $194 = $193;
    $195 = $194 * $194;
    $196 = $191 + $195;
    $197 = (($curright$217) + 12|0);
    $198 = +HEAPF32[$197>>2];
    $199 = $198;
    $200 = $199 * $199;
    $201 = $196 + $200;
    $202 = (($curright$217) + 16|0);
    $203 = +HEAPF32[$202>>2];
    $204 = $203;
    $205 = $204 * $204;
    $206 = $201 + $205;
    $207 = (($curright$217) + 20|0);
    $208 = +HEAPF32[$207>>2];
    $209 = $208;
    $210 = $209 * $209;
    $211 = $206 + $210;
    $212 = (($curright$217) + 24|0);
    $213 = +HEAPF32[$212>>2];
    $214 = $213;
    $215 = $214 * $214;
    $216 = $211 + $215;
    $217 = (($curright$217) + 28|0);
    $218 = +HEAPF32[$217>>2];
    $219 = $218;
    $220 = $219 * $219;
    $221 = $216 + $220;
    $222 = $223 + $221;
    $224 = (($curright$217) + 32|0);
    $225 = ($142|0)==(0);
    if ($225) {
     break;
    } else {
     $182 = $181;$223 = $222;$curleft$216 = $183;$curright$217 = $224;$i$118 = $142;
    }
   }
   HEAPF64[$15>>3] = $181;
   HEAPF64[$16>>3] = $222;
  }
  $226 = (($batchsamples$0) - ($cursamples$0))|0;
  $227 = (($cursamples$0) + ($cursamplepos$0))|0;
  $228 = (($40) + ($cursamples$0))|0;
  HEAP32[$7>>2] = $228;
  $229 = HEAP32[$6>>2]|0;
  $230 = ($228|0)==($229|0);
  if ($230) {
   $231 = +HEAPF64[$15>>3];
   $232 = +HEAPF64[$16>>3];
   $233 = $231 + $232;
   $234 = (+($228|0));
   $235 = $233 / $234;
   $236 = $235 * 0.5;
   $237 = $236 + 1.00000000000000006632E-37;
   $238 = (+_log10((+$237)));
   $239 = $238 * 1000.0;
   $240 = !($239 <= 0.0);
   if ($240) {
    $241 = (~~(($239))>>>0);
    $243 = $241;
   } else {
    $243 = 0;
   }
   $242 = ($243>>>0)>(11999);
   $$ = $242 ? 11999 : $243;
   $244 = ((($rgData) + ($$<<2)|0) + 38792|0);
   $245 = HEAP32[$244>>2]|0;
   $246 = (($245) + 1)|0;
   HEAP32[$244>>2] = $246;
   ;HEAP32[$15+0>>2]=0|0;HEAP32[$15+4>>2]=0|0;HEAP32[$15+8>>2]=0|0;HEAP32[$15+12>>2]=0|0;
   $247 = HEAP32[$7>>2]|0;
   $248 = ((($rgData) + ($247<<2)|0) + 9732|0);
   _memmove(($17|0),($248|0),40)|0;
   $249 = ((($rgData) + ($247<<2)|0) + 29112|0);
   _memmove(($18|0),($249|0),40)|0;
   $250 = ((($rgData) + ($247<<2)|0) + 84|0);
   _memmove(($19|0),($250|0),40)|0;
   $251 = ((($rgData) + ($247<<2)|0) + 19464|0);
   _memmove(($20|0),($251|0),40)|0;
   HEAP32[$7>>2] = 0;
   $$pre = HEAP32[$6>>2]|0;
   $253 = 0;$254 = $$pre;
  } else {
   $253 = $228;$254 = $229;
  }
  $252 = ($253|0)>($254|0);
  if ($252) {
   $$0 = 0;
   label = 34;
   break;
  } else {
   $batchsamples$0 = $226;$cursamplepos$0 = $227;
  }
 }
 if ((label|0) == 34) {
  STACKTOP = sp;return ($$0|0);
 }
 if ($1) {
  $255 = (($rgData) + ($num_samples<<2)|0);
  $256 = (10 - ($num_samples))|0;
  $257 = $256 << 2;
  _memmove(($rgData|0),($255|0),($257|0))|0;
  $258 = (($rgData) + 19380|0);
  $259 = ((($rgData) + ($num_samples<<2)|0) + 19380|0);
  _memmove(($258|0),($259|0),($257|0))|0;
  $260 = (($rgData) + ($256<<2)|0);
  $261 = $num_samples << 2;
  _memcpy(($260|0),($left_samples|0),($261|0))|0;
  $262 = ((($rgData) + ($256<<2)|0) + 19380|0);
  _memcpy(($262|0),($$01|0),($261|0))|0;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $$sum = (($num_samples) + -10)|0;
  $263 = (($left_samples) + ($$sum<<2)|0);
  dest=$rgData+0|0; src=$263+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $264 = (($rgData) + 19380|0);
  $265 = (($$01) + ($$sum<<2)|0);
  dest=$264+0|0; src=$265+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _filterYule($input,$output,$nSamples,$kernel) {
 $input = $input|0;
 $output = $output|0;
 $nSamples = $nSamples|0;
 $kernel = $kernel|0;
 var $$014 = 0, $$023 = 0, $$05 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0.0;
 var $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0.0;
 var $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0;
 var $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0;
 var $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0;
 var $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0;
 var $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($nSamples|0)==(0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (($kernel) + 4|0);
 $2 = (($kernel) + 8|0);
 $3 = (($kernel) + 12|0);
 $4 = (($kernel) + 16|0);
 $5 = (($kernel) + 20|0);
 $6 = (($kernel) + 24|0);
 $7 = (($kernel) + 28|0);
 $8 = (($kernel) + 32|0);
 $9 = (($kernel) + 36|0);
 $10 = (($kernel) + 40|0);
 $11 = (($kernel) + 44|0);
 $12 = (($kernel) + 48|0);
 $13 = (($kernel) + 52|0);
 $14 = (($kernel) + 56|0);
 $15 = (($kernel) + 60|0);
 $16 = (($kernel) + 64|0);
 $17 = (($kernel) + 68|0);
 $18 = (($kernel) + 72|0);
 $19 = (($kernel) + 76|0);
 $20 = (($kernel) + 80|0);
 $$014 = $nSamples;$$023 = $output;$$05 = $input;
 while(1) {
  $21 = (($$014) + -1)|0;
  $22 = +HEAPF32[$$05>>2];
  $23 = +HEAPF32[$kernel>>2];
  $24 = $22 * $23;
  $25 = $24;
  $26 = $25 + 1.00000000000000003643E-10;
  $27 = (($$023) + -4|0);
  $28 = +HEAPF32[$27>>2];
  $29 = +HEAPF32[$1>>2];
  $30 = $28 * $29;
  $31 = $30;
  $32 = $26 - $31;
  $33 = (($$05) + -4|0);
  $34 = +HEAPF32[$33>>2];
  $35 = +HEAPF32[$2>>2];
  $36 = $34 * $35;
  $37 = $36;
  $38 = $32 + $37;
  $39 = (($$023) + -8|0);
  $40 = +HEAPF32[$39>>2];
  $41 = +HEAPF32[$3>>2];
  $42 = $40 * $41;
  $43 = $42;
  $44 = $38 - $43;
  $45 = (($$05) + -8|0);
  $46 = +HEAPF32[$45>>2];
  $47 = +HEAPF32[$4>>2];
  $48 = $46 * $47;
  $49 = $48;
  $50 = $44 + $49;
  $51 = (($$023) + -12|0);
  $52 = +HEAPF32[$51>>2];
  $53 = +HEAPF32[$5>>2];
  $54 = $52 * $53;
  $55 = $54;
  $56 = $50 - $55;
  $57 = (($$05) + -12|0);
  $58 = +HEAPF32[$57>>2];
  $59 = +HEAPF32[$6>>2];
  $60 = $58 * $59;
  $61 = $60;
  $62 = $56 + $61;
  $63 = (($$023) + -16|0);
  $64 = +HEAPF32[$63>>2];
  $65 = +HEAPF32[$7>>2];
  $66 = $64 * $65;
  $67 = $66;
  $68 = $62 - $67;
  $69 = (($$05) + -16|0);
  $70 = +HEAPF32[$69>>2];
  $71 = +HEAPF32[$8>>2];
  $72 = $70 * $71;
  $73 = $72;
  $74 = $68 + $73;
  $75 = (($$023) + -20|0);
  $76 = +HEAPF32[$75>>2];
  $77 = +HEAPF32[$9>>2];
  $78 = $76 * $77;
  $79 = $78;
  $80 = $74 - $79;
  $81 = (($$05) + -20|0);
  $82 = +HEAPF32[$81>>2];
  $83 = +HEAPF32[$10>>2];
  $84 = $82 * $83;
  $85 = $84;
  $86 = $80 + $85;
  $87 = (($$023) + -24|0);
  $88 = +HEAPF32[$87>>2];
  $89 = +HEAPF32[$11>>2];
  $90 = $88 * $89;
  $91 = $90;
  $92 = $86 - $91;
  $93 = (($$05) + -24|0);
  $94 = +HEAPF32[$93>>2];
  $95 = +HEAPF32[$12>>2];
  $96 = $94 * $95;
  $97 = $96;
  $98 = $92 + $97;
  $99 = (($$023) + -28|0);
  $100 = +HEAPF32[$99>>2];
  $101 = +HEAPF32[$13>>2];
  $102 = $100 * $101;
  $103 = $102;
  $104 = $98 - $103;
  $105 = (($$05) + -28|0);
  $106 = +HEAPF32[$105>>2];
  $107 = +HEAPF32[$14>>2];
  $108 = $106 * $107;
  $109 = $108;
  $110 = $104 + $109;
  $111 = (($$023) + -32|0);
  $112 = +HEAPF32[$111>>2];
  $113 = +HEAPF32[$15>>2];
  $114 = $112 * $113;
  $115 = $114;
  $116 = $110 - $115;
  $117 = (($$05) + -32|0);
  $118 = +HEAPF32[$117>>2];
  $119 = +HEAPF32[$16>>2];
  $120 = $118 * $119;
  $121 = $120;
  $122 = $116 + $121;
  $123 = (($$023) + -36|0);
  $124 = +HEAPF32[$123>>2];
  $125 = +HEAPF32[$17>>2];
  $126 = $124 * $125;
  $127 = $126;
  $128 = $122 - $127;
  $129 = (($$05) + -36|0);
  $130 = +HEAPF32[$129>>2];
  $131 = +HEAPF32[$18>>2];
  $132 = $130 * $131;
  $133 = $132;
  $134 = $128 + $133;
  $135 = (($$023) + -40|0);
  $136 = +HEAPF32[$135>>2];
  $137 = +HEAPF32[$19>>2];
  $138 = $136 * $137;
  $139 = $138;
  $140 = $134 - $139;
  $141 = (($$05) + -40|0);
  $142 = +HEAPF32[$141>>2];
  $143 = +HEAPF32[$20>>2];
  $144 = $142 * $143;
  $145 = $144;
  $146 = $140 + $145;
  $147 = $146;
  HEAPF32[$$023>>2] = $147;
  $148 = (($$023) + 4|0);
  $149 = (($$05) + 4|0);
  $150 = ($21|0)==(0);
  if ($150) {
   break;
  } else {
   $$014 = $21;$$023 = $148;$$05 = $149;
  }
 }
 STACKTOP = sp;return;
}
function _GetTitleGain($rgData) {
 $rgData = $rgData|0;
 var $$0$i = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $elems$01$i = 0, $exitcond = 0, $exitcond$i = 0, $i$02 = 0, $i$02$i = 0, $i$1$i = 0, $sum$0$i = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 $elems$01$i = 0;$i$02$i = 0;
 while(1) {
  $0 = ((($rgData) + ($i$02$i<<2)|0) + 38792|0);
  $1 = HEAP32[$0>>2]|0;
  $2 = (($1) + ($elems$01$i))|0;
  $3 = (($i$02$i) + 1)|0;
  $exitcond$i = ($3|0)==(12000);
  if ($exitcond$i) {
   break;
  } else {
   $elems$01$i = $2;$i$02$i = $3;
  }
 }
 $4 = ($2|0)==(0);
 if ($4) {
  $$0$i = -24601.0;
 } else {
  $5 = (+($2>>>0));
  $6 = $5 * 0.0500000000000000444089;
  $7 = (+Math_ceil((+$6)));
  $8 = (~~(($7))>>>0);
  $i$1$i = 12000;$sum$0$i = 0;
  while(1) {
   $9 = (($i$1$i) + -1)|0;
   $10 = ($i$1$i|0)==(0);
   if ($10) {
    break;
   }
   $11 = ((($rgData) + ($9<<2)|0) + 38792|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (($12) + ($sum$0$i))|0;
   $14 = ($13>>>0)<($8>>>0);
   if ($14) {
    $i$1$i = $9;$sum$0$i = $13;
   } else {
    break;
   }
  }
  $15 = (+($9>>>0));
  $16 = $15 * 0.00999999977648258209228;
  $17 = 64.81999969482421875 - $16;
  $$0$i = $17;
 }
 $i$02 = 0;
 while(1) {
  $24 = ((($rgData) + ($i$02<<2)|0) + 38792|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($rgData) + ($i$02<<2)|0) + 86792|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + ($25))|0;
  HEAP32[$26>>2] = $28;
  HEAP32[$24>>2] = 0;
  $29 = (($i$02) + 1)|0;
  $exitcond = ($29|0)==(12000);
  if ($exitcond) {
   break;
  } else {
   $i$02 = $29;
  }
 }
 $18 = (($rgData) + 29112|0);
 $19 = (($rgData) + 19464|0);
 $20 = (($rgData) + 19380|0);
 $21 = (($rgData) + 9732|0);
 $22 = (($rgData) + 84|0);
 $23 = (($rgData) + 38764|0);
 dest=$rgData+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 dest=$22+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 dest=$21+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 dest=$20+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 dest=$19+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 dest=$18+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 ;HEAP32[$23+0>>2]=0|0;HEAP32[$23+4>>2]=0|0;HEAP32[$23+8>>2]=0|0;HEAP32[$23+12>>2]=0|0;HEAP32[$23+16>>2]=0|0;
 STACKTOP = sp;return (+$$0$i);
}
function _id3tag_genre_list($handler,$cookie) {
 $handler = $handler|0;
 $cookie = $cookie|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($handler|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 } else {
  $i$01 = 0;
 }
 while(1) {
  $1 = (6368 + ($i$01<<2)|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = (6960 + ($2<<2)|0);
  $4 = HEAP32[$3>>2]|0;
  FUNCTION_TABLE_viii[$handler & 0]($2,$4,$cookie);
  $5 = (($i$01) + 1)|0;
  $exitcond = ($5|0)==(148);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $5;
  }
 }
 STACKTOP = sp;return;
}
function _id3tag_init($gfp) {
 $gfp = $gfp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buffer$i = 0, $strlenfirst$i = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, dest = 0;
 var label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040|0;
 $vararg_buffer3 = sp;
 $buffer$i = sp + 16|0;
 $0 = (($gfp) + 288|0);
 $1 = HEAP32[$0>>2]|0;
 _free_id3tag($1);
 $2 = (($1) + 85696|0);
 dest=$2+0|0; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $3 = (($1) + 85724|0);
 HEAP32[$3>>2] = 255;
 $4 = (($1) + 85736|0);
 HEAP32[$4>>2] = 128;
 $5 = (_get_lame_os_bitness()|0);
 $6 = (_get_lame_version()|0);
 $7 = (_get_lame_url()|0);
 $strlenfirst$i = HEAP8[$5>>0]|0;
 $8 = ($strlenfirst$i<<24>>24)==(0);
 if ($8) {
  HEAP32[$vararg_buffer3>>2] = $6;
  $vararg_ptr6 = (($vararg_buffer3) + 4|0);
  HEAP32[$vararg_ptr6>>2] = $7;
  (_sprintf($buffer$i,7672,$vararg_buffer3)|0);
 } else {
  HEAP32[$vararg_buffer3>>2] = $5;
  $vararg_ptr1 = (($vararg_buffer3) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $6;
  $vararg_ptr2 = (($vararg_buffer3) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $7;
  (_sprintf($buffer$i,7648,$vararg_buffer3)|0);
 }
 $9 = HEAP32[$0>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  STACKTOP = sp;return;
 }
 $11 = (($9) + 85696|0);
 $12 = HEAP32[$11>>2]|0;
 (_id3v2_add_latin1($gfp,1414746949,7568,0,$buffer$i)|0);
 HEAP32[$11>>2] = $12;
 STACKTOP = sp;return;
}
function _id3tag_add_v2($gfp) {
 $gfp = $gfp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($gfp) + 288|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 85696|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & -7;
 $5 = $4 | 2;
 HEAP32[$2>>2] = $5;
 STACKTOP = sp;return;
}
function _id3tag_v1_only($gfp) {
 $gfp = $gfp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($gfp) + 288|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 85696|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & -15;
 $5 = $4 | 4;
 HEAP32[$2>>2] = $5;
 STACKTOP = sp;return;
}
function _id3tag_v2_only($gfp) {
 $gfp = $gfp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($gfp) + 288|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 85696|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & -13;
 $5 = $4 | 8;
 HEAP32[$2>>2] = $5;
 STACKTOP = sp;return;
}
function _id3tag_space_v1($gfp) {
 $gfp = $gfp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($gfp) + 288|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 85696|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & -25;
 $5 = $4 | 16;
 HEAP32[$2>>2] = $5;
 STACKTOP = sp;return;
}
function _id3tag_pad_v2($gfp) {
 $gfp = $gfp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($gfp) + 288|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 85696|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & -39;
 $5 = $4 | 34;
 HEAP32[$2>>2] = $5;
 $6 = (($1) + 85736|0);
 HEAP32[$6>>2] = 128;
 STACKTOP = sp;return;
}
function _id3tag_set_pad($gfp,$n) {
 $gfp = $gfp|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($gfp) + 288|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 85696|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & -39;
 $5 = $4 | 34;
 HEAP32[$2>>2] = $5;
 $6 = (($1) + 85736|0);
 HEAP32[$6>>2] = $n;
 STACKTOP = sp;return;
}
function _id3tag_set_albumart($gfp,$image,$size) {
 $gfp = $gfp|0;
 $image = $image|0;
 $size = $size|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mimetype$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($gfp) + 288|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($size>>>0)>(2);
 if (!($2)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = HEAP8[$image>>0]|0;
 $4 = ($3<<24>>24)==(-1);
 if ($4) {
  $5 = (($image) + 1|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = ($6<<24>>24)==(-40);
  if ($7) {
   $mimetype$0 = 1;
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $8 = ($size>>>0)>(4);
   if (!($8)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $9 = ($3<<24>>24)==(-119);
   if ($9) {
    $10 = (($image) + 1|0);
    $11 = (_strncmp($10,7552,3)|0);
    $12 = ($11|0)==(0);
    if ($12) {
     $mimetype$0 = 2;
     break;
    }
   }
   $13 = (_strncmp($image,7560,4)|0);
   $14 = ($13|0)==(0);
   if ($14) {
    $mimetype$0 = 3;
   } else {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $15 = (($1) + 85728|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(0|0);
 if (!($17)) {
  _free($16);
  HEAP32[$15>>2] = 0;
  $18 = (($1) + 85732|0);
  HEAP32[$18>>2] = 0;
  $19 = (($1) + 85740|0);
  HEAP32[$19>>2] = 0;
 }
 $20 = ($size|0)==(0);
 if ($20) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = (_calloc($size,1)|0);
 HEAP32[$15>>2] = $21;
 $22 = ($21|0)==(0|0);
 if ($22) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 _memcpy(($21|0),($image|0),($size|0))|0;
 $23 = (($1) + 85732|0);
 HEAP32[$23>>2] = $size;
 $24 = (($1) + 85740|0);
 HEAP32[$24>>2] = $mimetype$0;
 $25 = (($1) + 85696|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $26 | 1;
 HEAP32[$25>>2] = $27;
 $28 = HEAP32[$0>>2]|0;
 $29 = (($28) + 85696|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $30 & -7;
 $32 = $31 | 2;
 HEAP32[$29>>2] = $32;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _id3tag_set_textinfo_utf16($gfp,$id,$text) {
 $gfp = $gfp|0;
 $id = $id|0;
 $text = $text|0;
 var $$$i$i = 0, $$$i$i$i = 0, $$$i3$i$i = 0, $$0 = 0, $$0$be$i$i$i = 0, $$0$be$us$i$i$i = 0, $$0$i = 0, $$0$i3$off$i$i$i = 0, $$0$i3$off$i7$i$i = 0, $$0$i3$off$us$i$i$i = 0, $$0$i3$off$us$i2$i$i = 0, $$01$i$i = 0, $$01$i$i$i = 0, $$01$i$i5 = 0, $$01$ph$i$i = 0, $$01$ph$i$i$i = 0, $$01$ph$i4$i = 0, $$01$us$i$i = 0, $$015$i10$i$i = 0, $$015$us$i5$i$i = 0;
 var $$02$ph$i$i$i = 0, $$06$i9$i$i = 0, $$06$us$i4$i$i = 0, $$9$i$i$i = 0, $$9$i8$i$i = 0, $$off$i = 0, $$off2$i = 0, $$start$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$01$i17$i = 0, $i$05$i = 0;
 var $n$0$lcssa$i$i = 0, $n$0$lcssa$i11$i = 0, $n$0$ph$i$i = 0, $n$02$i$i = 0, $n$02$i$i$i = 0, $or$cond$i = 0, $phitmp$i$i = 0, $phitmp$i2$i = 0, $scevgep$i$i = 0, $scevgep$i7$i = 0, $scevgep4$i$i = 0, $scevgep4$i8$i = 0, $text$pn$i$i = 0, $text$pn$us$i$i = 0, $x$04$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($id|0)==(0|0);
 if ($0) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $i$05$i = 0;$x$04$i = 0;
 }
 while(1) {
  $3 = (($id) + ($i$05$i)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)==(0);
  if ($5) {
   $$0$i = $x$04$i;
   break;
  }
  $6 = $4&255;
  $7 = $x$04$i << 8;
  $8 = $6 | $7;
  $$off$i = (($4) + -65)<<24>>24;
  $9 = ($$off$i&255)>(25);
  $$off2$i = (($4) + -48)<<24>>24;
  $10 = ($$off2$i&255)>(9);
  $or$cond$i = $9 & $10;
  $2 = (($i$05$i) + 1)|0;
  if ($or$cond$i) {
   $$0 = -1;
   label = 58;
   break;
  }
  $1 = ($2>>>0)<(4);
  if ($1) {
   $i$05$i = $2;$x$04$i = $8;
  } else {
   $$0$i = $8;
   break;
  }
 }
 if ((label|0) == 58) {
  STACKTOP = sp;return ($$0|0);
 }
 $11 = ($$0$i|0)==(0);
 if ($11) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = ($text|0)==(0|0);
 if ($12) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = HEAP16[$text>>1]|0;
 if (!((($13<<16>>16) == -257) | (($13<<16>>16) == -2))) {
  $$0 = -3;
  STACKTOP = sp;return ($$0|0);
 }
 if ((($$0$i|0) == 1346589524)) {
  $125 = (_id3v2_add_ucs2($gfp,1346589524,0,0,$text)|0);
  $$0 = $125;
  STACKTOP = sp;return ($$0|0);
 } else if ((($$0$i|0) == 1431520594)) {
  $126 = (_id3v2_add_ucs2($gfp,1431520594,7568,$text,0)|0);
  $$0 = $126;
  STACKTOP = sp;return ($$0|0);
 } else if ((($$0$i|0) == 1464223044)) {
  $127 = (_id3v2_add_ucs2($gfp,1464223044,0,$text,0)|0);
  $$0 = $127;
  STACKTOP = sp;return ($$0|0);
 } else if ((($$0$i|0) == 1129270605) | (($$0$i|0) == 1415075928) | (($$0$i|0) == 1465407576)) {
  $14 = ($13<<16>>16)==(-2);
  $$$i$i = $14 ? 15616 : 61;
  $$01$i$i = $text;$n$02$i$i = 0;
  while(1) {
   $15 = (($$01$i$i) + 2|0);
   $16 = (($n$02$i$i) + 1)|0;
   $17 = HEAP16[$15>>1]|0;
   $18 = ($17<<16>>16)==(0);
   if ($18) {
    $24 = $13;$i$01$i17$i = 0;
    break;
   } else {
    $$01$i$i = $15;$n$02$i$i = $16;
   }
  }
  while(1) {
   $23 = ($24<<16>>16)==($$$i$i<<16>>16);
   $20 = (($i$01$i17$i) + 1)|0;
   if ($23) {
    break;
   }
   $19 = (($text) + ($20<<1)|0);
   $21 = HEAP16[$19>>1]|0;
   $22 = ($21<<16>>16)==(0);
   if ($22) {
    $$0 = -7;
    label = 58;
    break;
   } else {
    $24 = $21;$i$01$i17$i = $20;
   }
  }
  if ((label|0) == 58) {
   STACKTOP = sp;return ($$0|0);
  }
  $25 = ($i$01$i17$i|0)>(-1);
  if (!($25)) {
   $$0 = -7;
   STACKTOP = sp;return ($$0|0);
  }
  $phitmp$i2$i = (($i$01$i17$i) + 2)|0;
  $26 = (_calloc($phitmp$i2$i,2)|0);
  $27 = ($26|0)==(0|0);
  if (!($27)) {
   if ((($13<<16>>16) == -257) | (($13<<16>>16) == -2)) {
    HEAP16[$26>>1] = $13;
    $$01$ph$i4$i = 1;
   } else {
    $$01$ph$i4$i = 0;
   }
   $28 = ($$01$ph$i4$i>>>0)<($i$01$i17$i>>>0);
   if ($28) {
    $29 = $$01$ph$i4$i << 1;
    $scevgep$i7$i = (($26) + ($29)|0);
    $scevgep4$i8$i = (($text) + ($$01$ph$i4$i<<1)|0);
    $30 = (($i$01$i17$i) - ($$01$ph$i4$i))|0;
    $31 = $30 << 1;
    _memcpy(($scevgep$i7$i|0),($scevgep4$i8$i|0),($31|0))|0;
    $n$0$lcssa$i11$i = $i$01$i17$i;
   } else {
    $n$0$lcssa$i11$i = $$01$ph$i4$i;
   }
   $32 = (($26) + ($n$0$lcssa$i11$i<<1)|0);
   HEAP16[$32>>1] = 0;
  }
  $33 = ($20>>>0)<($16>>>0);
  if ($33) {
   $34 = (($n$02$i$i) + 2)|0;
   $phitmp$i$i = (($34) - ($i$01$i17$i))|0;
   $35 = $phitmp$i$i;
  } else {
   $35 = 2;
  }
  $36 = (_calloc($35,2)|0);
  $37 = ($36|0)==(0|0);
  if (!($37)) {
   if ((($13<<16>>16) == -257) | (($13<<16>>16) == -2)) {
    HEAP16[$36>>1] = $13;
    $38 = ($20|0)==(0);
    $39 = $38&1;
    $$start$i$i = (($39) + ($20))|0;
    $$01$ph$i$i = $$start$i$i;$n$0$ph$i$i = 1;
   } else {
    $$01$ph$i$i = $20;$n$0$ph$i$i = 0;
   }
   $40 = ($$01$ph$i$i>>>0)<($16>>>0);
   if ($40) {
    $41 = (($16) - ($$01$ph$i$i))|0;
    $42 = (($41) + ($n$0$ph$i$i))|0;
    $43 = $n$0$ph$i$i << 1;
    $scevgep$i$i = (($36) + ($43)|0);
    $scevgep4$i$i = (($text) + ($$01$ph$i$i<<1)|0);
    $44 = $41 << 1;
    _memcpy(($scevgep$i$i|0),($scevgep4$i$i|0),($44|0))|0;
    $n$0$lcssa$i$i = $42;
   } else {
    $n$0$lcssa$i$i = $n$0$ph$i$i;
   }
   $45 = (($36) + ($n$0$lcssa$i$i<<1)|0);
   HEAP16[$45>>1] = 0;
  }
  $46 = (_id3v2_add_ucs2($gfp,$$0$i,7568,$26,$36)|0);
  _free($26);
  _free($36);
  $$0 = $46;
  STACKTOP = sp;return ($$0|0);
 } else if ((($$0$i|0) == 1413697358)) {
  $47 = (($gfp) + 288|0);
  $48 = HEAP32[$47>>2]|0;
  L66: do {
   if ((($13<<16>>16) == -257)) {
    $text$pn$i$i = $text;
    while(1) {
     $$01$i$i5 = (($text$pn$i$i) + 2|0);
     $57 = HEAP16[$$01$i$i5>>1]|0;
     $58 = ($57<<16>>16)==(0);
     if ($58) {
      label = 34;
      break L66;
     }
     $59 = ($57&65535)>(254);
     if ($59) {
      break;
     } else {
      $text$pn$i$i = $$01$i$i5;
     }
    }
   } else if ((($13<<16>>16) == -2)) {
    $text$pn$us$i$i = $text;
    while(1) {
     $$01$us$i$i = (($text$pn$us$i$i) + 2|0);
     $49 = HEAP16[$$01$us$i$i>>1]|0;
     $50 = ($49<<16>>16)==(0);
     if ($50) {
      label = 34;
      break L66;
     }
     $51 = $49&65535;
     $52 = $51 << 8;
     $53 = $51 >>> 8;
     $54 = $52 | $53;
     $55 = $54&65535;
     $56 = ($55&65535)>(254);
     if ($56) {
      break;
     } else {
      $text$pn$us$i$i = $$01$us$i$i;
     }
    }
   } else {
    $$0 = -3;
    STACKTOP = sp;return ($$0|0);
   }
  } while(0);
  if ((label|0) == 34) {
   $60 = ($13<<16>>16)==(0);
   do {
    if ($60) {
     $65 = (_calloc(1,1)|0);
     $104 = $65;
    } else {
     $$01$i$i$i = $text;$n$02$i$i$i = 0;
     while(1) {
      $61 = (($$01$i$i$i) + 2|0);
      $62 = (($n$02$i$i$i) + 1)|0;
      $63 = HEAP16[$61>>1]|0;
      $64 = ($63<<16>>16)==(0);
      if ($64) {
       break;
      } else {
       $$01$i$i$i = $61;$n$02$i$i$i = $62;
      }
     }
     $66 = (($n$02$i$i$i) + 2)|0;
     $67 = (_calloc($66,1)|0);
     $68 = ($62|0)==(0);
     if ($68) {
      $104 = $67;
     } else {
      if ((($13<<16>>16) == -257) | (($13<<16>>16) == -2)) {
       $69 = (($text) + 2|0);
       $$01$ph$i$i$i = $69;$$02$ph$i$i$i = $n$02$i$i$i;
      } else {
       $$01$ph$i$i$i = $text;$$02$ph$i$i$i = $62;
      }
      $70 = (($$02$ph$i$i$i) + -1)|0;
      $71 = ($$02$ph$i$i$i|0)==(0);
      if ($71) {
       $104 = $67;
      } else {
       $72 = ($13<<16>>16)==(-2);
       $73 = HEAP16[$$01$ph$i$i$i>>1]|0;
       if ($72) {
        $77 = $73&65535;
        $78 = $77 << 8;
        $79 = $77 >>> 8;
        $80 = $78 | $79;
        $81 = $80&65535;
        $$0$i3$off$us$i2$i$i = (($81) + -32)<<16>>16;
        $82 = ($$0$i3$off$us$i2$i$i&65535)>(223);
        $83 = $79&255;
        $$$i3$i$i = $82 ? 32 : $83;
        HEAP8[$67>>0] = $$$i3$i$i;
        $84 = ($70|0)==(0);
        if ($84) {
         $104 = $67;
         break;
        } else {
         $$015$us$i5$i$i = $$01$ph$i$i$i;$$06$us$i4$i$i = $67;$87 = $70;
        }
        while(1) {
         $85 = (($$015$us$i5$i$i) + 2|0);
         $86 = (($87) + -1)|0;
         $$0$be$us$i$i$i = (($$06$us$i4$i$i) + 1|0);
         $88 = HEAP16[$85>>1]|0;
         $89 = $88&65535;
         $90 = $89 << 8;
         $91 = $89 >>> 8;
         $92 = $90 | $91;
         $93 = $92&65535;
         $$0$i3$off$us$i$i$i = (($93) + -32)<<16>>16;
         $94 = ($$0$i3$off$us$i$i$i&65535)>(223);
         $95 = $91&255;
         $$$i$i$i = $94 ? 32 : $95;
         HEAP8[$$0$be$us$i$i$i>>0] = $$$i$i$i;
         $96 = ($86|0)==(0);
         if ($96) {
          $104 = $67;
          break;
         } else {
          $$015$us$i5$i$i = $85;$$06$us$i4$i$i = $$0$be$us$i$i$i;$87 = $86;
         }
        }
       } else {
        $$0$i3$off$i7$i$i = (($73) + -32)<<16>>16;
        $74 = ($$0$i3$off$i7$i$i&65535)>(223);
        $75 = $73&255;
        $$9$i8$i$i = $74 ? 32 : $75;
        HEAP8[$67>>0] = $$9$i8$i$i;
        $76 = ($70|0)==(0);
        if ($76) {
         $104 = $67;
         break;
        } else {
         $$015$i10$i$i = $$01$ph$i$i$i;$$06$i9$i$i = $67;$99 = $70;
        }
        while(1) {
         $97 = (($$015$i10$i$i) + 2|0);
         $98 = (($99) + -1)|0;
         $$0$be$i$i$i = (($$06$i9$i$i) + 1|0);
         $100 = HEAP16[$97>>1]|0;
         $$0$i3$off$i$i$i = (($100) + -32)<<16>>16;
         $101 = ($$0$i3$off$i$i$i&65535)>(223);
         $102 = $100&255;
         $$9$i$i$i = $101 ? 32 : $102;
         HEAP8[$$0$be$i$i$i>>0] = $$9$i$i$i;
         $103 = ($98|0)==(0);
         if ($103) {
          $104 = $67;
          break;
         } else {
          $$015$i10$i$i = $97;$$06$i9$i$i = $$0$be$i$i$i;$99 = $98;
         }
        }
       }
      }
     }
    }
   } while(0);
   $105 = (_lookupGenre($104)|0);
   _free($104);
   $106 = ($105|0)==(-1);
   if ($106) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $107 = ($105|0)>(-1);
   if ($107) {
    $108 = (($48) + 85696|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = $109 | 1;
    HEAP32[$108>>2] = $110;
    $111 = (($48) + 85724|0);
    HEAP32[$111>>2] = $105;
    $112 = (6960 + ($105<<2)|0);
    $113 = HEAP32[$112>>2]|0;
    $114 = ($gfp|0)==(0|0);
    if ($114) {
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    }
    $115 = HEAP32[$47>>2]|0;
    $116 = ($115|0)==(0|0);
    if ($116) {
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    }
    $117 = (($115) + 85696|0);
    $118 = HEAP32[$117>>2]|0;
    (_id3v2_add_latin1($gfp,1413697358,7568,0,$113)|0);
    HEAP32[$117>>2] = $118;
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  }
  $119 = (_id3v2_add_ucs2($gfp,1413697358,0,0,$text)|0);
  $120 = ($119|0)==(0);
  if (!($120)) {
   $$0 = $119;
   STACKTOP = sp;return ($$0|0);
  }
  $121 = (($48) + 85696|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = $122 | 1;
  HEAP32[$121>>2] = $123;
  $124 = (($48) + 85724|0);
  HEAP32[$124>>2] = 12;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $128 = $$0$i & -16777216;
  if (!((($128|0) == 1459617792) | (($128|0) == 0) | (($128|0) == 1409286144))) {
   $$0 = -255;
   STACKTOP = sp;return ($$0|0);
  }
  $129 = (_id3v2_add_ucs2($gfp,$$0$i,0,0,$text)|0);
  $$0 = $129;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _id3v2_add_ucs2($gfp,$frame_id,$lang,$desc,$text) {
 $gfp = $gfp|0;
 $frame_id = $frame_id|0;
 $lang = $lang|0;
 $desc = $desc|0;
 $text = $text|0;
 var $$0 = 0, $$0$i = 0, $$0$i1 = 0, $$0$i17 = 0, $$op$i = 0, $$op4$i = 0, $$phi$trans$insert = 0, $$phi$trans$insert$i = 0, $$phi$trans$insert56 = 0, $$pre = 0, $$pre$i = 0, $$pre57 = 0, $$pre9$i27 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $d$i = 0, $i$01$i = 0, $i$03$i2537 = 0, $i$03$i38 = 0, $i$05$i = 0, $n$0$i = 0, $n$0$i15 = 0, $node$0$i = 0, $node$0$i8 = 0, $node$01$i = 0, $node$01$i7 = 0, $node$02$i = 0, $node$02$i9 = 0, $node$045 = 0, $node$1 = 0, $node$2 = 0;
 var $scevgep$i = 0, $scevgep$i23 = 0, $sext2$i = 0, $sext3$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $d$i = sp;
 $0 = ($gfp|0)==(0|0);
 if ($0) {
  $$0 = -255;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = (($gfp) + 288|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = -255;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (($2) + 85744|0);
 $node$01$i = HEAP32[$4>>2]|0;
 $5 = ($node$01$i|0)==(0|0);
 L7: do {
  if ($5) {
   $$0$i = 0;
  } else {
   $node$02$i = $node$01$i;
   while(1) {
    $7 = (($node$02$i) + 4|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = ($8|0)==($frame_id|0);
    if ($9) {
     $$0$i = $node$02$i;
     break L7;
    }
    $node$0$i = HEAP32[$node$02$i>>2]|0;
    $6 = ($node$0$i|0)==(0|0);
    if ($6) {
     $$0$i = 0;
     break;
    } else {
     $node$02$i = $node$0$i;
    }
   }
  }
 } while(0);
 L12: do {
  if ((($frame_id|0) == 1347570006) | (($frame_id|0) == 1196575044) | (($frame_id|0) == 1162756946) | (($frame_id|0) == 1279872587) | (($frame_id|0) == 1095061059) | (($frame_id|0) == 1346588244) | (($frame_id|0) == 1195724610) | (($frame_id|0) == 1095780675) | (($frame_id|0) == 1398361172) | (($frame_id|0) == 1129270605) | (($frame_id|0) == 1465407576) | (($frame_id|0) == 1415075928)) {
   $10 = ($$0$i|0)==(0|0);
   if ($10) {
    label = 30;
   } else {
    $11 = ($lang|0)==(0|0);
    $12 = (($d$i) + 1|0);
    $13 = (($d$i) + 2|0);
    $14 = ($desc|0)==(0|0);
    $node$045 = $$0$i;
    while(1) {
     if ($11) {
      label = 11;
     } else {
      $15 = HEAP8[$lang>>0]|0;
      $16 = ($15<<24>>24)==(0);
      if ($16) {
       label = 11;
      } else {
       $21 = $15;$i$03$i38 = 0;
       while(1) {
        $20 = (($d$i) + ($i$03$i38)|0);
        HEAP8[$20>>0] = $21;
        $18 = (($i$03$i38) + 1)|0;
        $22 = ($i$03$i38|0)>(1);
        if ($22) {
         break;
        }
        $$phi$trans$insert56 = (($lang) + ($18)|0);
        $$pre57 = HEAP8[$$phi$trans$insert56>>0]|0;
        $21 = $$pre57;$i$03$i38 = $18;
       }
       $17 = ($18|0)<(3);
       if ($17) {
        $scevgep$i = (($d$i) + ($18)|0);
        $19 = (2 - ($i$03$i38))|0;
        _memset(($scevgep$i|0),32,($19|0))|0;
        $i$05$i = 0;
       } else {
        $i$05$i = 0;
       }
      }
     }
     if ((label|0) == 11) {
      label = 0;
      HEAP8[$d$i>>0] = 88;
      HEAP8[$12>>0] = 88;
      HEAP8[$13>>0] = 88;
      $i$05$i = 0;
     }
     while(1) {
      $25 = ((($node$045) + ($i$05$i)|0) + 8|0);
      $26 = HEAP8[$25>>0]|0;
      $27 = $26 << 24 >> 24;
      $28 = (_tolower($27)|0);
      $29 = (($d$i) + ($i$05$i)|0);
      $30 = HEAP8[$29>>0]|0;
      $31 = $30 << 24 >> 24;
      $32 = (_tolower($31)|0);
      $33 = $28&255;
      $34 = ($33<<24>>24)<(32);
      $35 = $32&255;
      $36 = ($35<<24>>24)<(32);
      $$op$i = $28 << 24;
      $sext2$i = $34 ? 536870912 : $$op$i;
      $$op4$i = $32 << 24;
      $sext3$i = $36 ? 536870912 : $$op4$i;
      $37 = ($sext2$i|0)==($sext3$i|0);
      $24 = (($i$05$i) + 1)|0;
      if (!($37)) {
       break;
      }
      $23 = ($24|0)<(3);
      if ($23) {
       $i$05$i = $24;
      } else {
       label = 18;
       break;
      }
     }
     L29: do {
      if ((label|0) == 18) {
       label = 0;
       $38 = (($node$045) + 20|0);
       $39 = HEAP32[$38>>2]|0;
       $40 = ($39|0)==(1);
       $$phi$trans$insert$i = (($node$045) + 16|0);
       $$pre$i = HEAP32[$$phi$trans$insert$i>>2]|0;
       if (!($40)) {
        $51 = ($$pre$i|0)==(0);
        if ($51) {
         $node$1 = $node$045;
         label = 29;
         break L12;
        } else {
         break;
        }
       }
       $41 = (($node$045) + 12|0);
       $42 = ($$pre$i|0)==(0);
       if ($42) {
        $node$1 = $node$045;
        label = 29;
        break L12;
       }
       if (!($14)) {
        $43 = HEAP32[$41>>2]|0;
        $i$01$i = 0;
        while(1) {
         $46 = (($43) + ($i$01$i<<1)|0);
         $47 = HEAP16[$46>>1]|0;
         $48 = (($desc) + ($i$01$i<<1)|0);
         $49 = HEAP16[$48>>1]|0;
         $50 = ($47<<16>>16)==($49<<16>>16);
         $45 = (($i$01$i) + 1)|0;
         if (!($50)) {
          break L29;
         }
         $44 = ($45>>>0)<($$pre$i>>>0);
         if ($44) {
          $i$01$i = $45;
         } else {
          $node$1 = $node$045;
          label = 29;
          break L12;
         }
        }
       }
      }
     } while(0);
     $node$01$i7 = HEAP32[$node$045>>2]|0;
     $52 = ($node$01$i7|0)==(0|0);
     if ($52) {
      label = 30;
      break L12;
     } else {
      $node$02$i9 = $node$01$i7;
     }
     while(1) {
      $55 = (($node$02$i9) + 4|0);
      $56 = HEAP32[$55>>2]|0;
      $57 = ($56|0)==($frame_id|0);
      if ($57) {
       break;
      }
      $node$0$i8 = HEAP32[$node$02$i9>>2]|0;
      $54 = ($node$0$i8|0)==(0|0);
      if ($54) {
       label = 30;
       break L12;
      } else {
       $node$02$i9 = $node$0$i8;
      }
     }
     $53 = ($node$02$i9|0)==(0|0);
     if ($53) {
      label = 30;
      break;
     } else {
      $node$045 = $node$02$i9;
     }
    }
   }
  } else {
   $node$1 = $$0$i;
   label = 29;
  }
 } while(0);
 if ((label|0) == 29) {
  $58 = ($node$1|0)==(0|0);
  if ($58) {
   label = 30;
  } else {
   $node$2 = $node$1;
  }
 }
 if ((label|0) == 30) {
  $59 = (_calloc(1,36)|0);
  $60 = ($59|0)==(0|0);
  if ($60) {
   $$0 = -254;
   STACKTOP = sp;return ($$0|0);
  }
  $61 = (($2) + 85748|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = ($62|0)==(0|0);
  if ($63) {
   label = 33;
  } else {
   $64 = HEAP32[$4>>2]|0;
   $65 = ($64|0)==(0|0);
   if ($65) {
    label = 33;
   } else {
    HEAP32[$62>>2] = $59;
   }
  }
  if ((label|0) == 33) {
   HEAP32[$4>>2] = $59;
  }
  HEAP32[$61>>2] = $59;
  $node$2 = $59;
 }
 $66 = (($node$2) + 4|0);
 HEAP32[$66>>2] = $frame_id;
 $67 = (($node$2) + 8|0);
 $68 = ($lang|0)==(0|0);
 if ($68) {
  label = 38;
 } else {
  $69 = HEAP8[$lang>>0]|0;
  $70 = ($69<<24>>24)==(0);
  if ($70) {
   label = 38;
  } else {
   $77 = $69;$i$03$i2537 = 0;
   while(1) {
    $76 = ((($node$2) + ($i$03$i2537)|0) + 8|0);
    HEAP8[$76>>0] = $77;
    $74 = (($i$03$i2537) + 1)|0;
    $78 = ($i$03$i2537|0)>(1);
    if ($78) {
     break;
    }
    $$pre9$i27 = HEAP8[$lang>>0]|0;
    $79 = ($$pre9$i27<<24>>24)==(0);
    if ($79) {
     break;
    }
    $$phi$trans$insert = (($lang) + ($74)|0);
    $$pre = HEAP8[$$phi$trans$insert>>0]|0;
    $77 = $$pre;$i$03$i2537 = $74;
   }
   $73 = ($74|0)<(3);
   if ($73) {
    $scevgep$i23 = ((($node$2) + ($74)|0) + 8|0);
    $75 = (2 - ($i$03$i2537))|0;
    _memset(($scevgep$i23|0),32,($75|0))|0;
   }
  }
 }
 if ((label|0) == 38) {
  HEAP8[$67>>0] = 88;
  $71 = (($node$2) + 9|0);
  HEAP8[$71>>0] = 88;
  $72 = (($node$2) + 10|0);
  HEAP8[$72>>0] = 88;
 }
 $80 = (($node$2) + 12|0);
 $81 = HEAP32[$80>>2]|0;
 _free($81);
 HEAP32[$80>>2] = 0;
 $82 = ($desc|0)==(0|0);
 if ($82) {
  $$0$i17 = 0;
 } else {
  $n$0$i15 = 0;
  while(1) {
   $83 = (($desc) + ($n$0$i15<<1)|0);
   $84 = HEAP16[$83>>1]|0;
   $85 = ($84<<16>>16)==(0);
   $86 = (($n$0$i15) + 1)|0;
   if ($85) {
    break;
   } else {
    $n$0$i15 = $86;
   }
  }
  $87 = ($n$0$i15|0)==(0);
  if ($87) {
   $$0$i17 = 0;
  } else {
   $88 = (_calloc($86,2)|0);
   HEAP32[$80>>2] = $88;
   $89 = ($88|0)==(0|0);
   if ($89) {
    $$0$i17 = 0;
   } else {
    $90 = $n$0$i15 << 1;
    _memcpy(($88|0),($desc|0),($90|0))|0;
    $91 = (($88) + ($n$0$i15<<1)|0);
    HEAP16[$91>>1] = 0;
    $$0$i17 = $n$0$i15;
   }
  }
 }
 $92 = (($node$2) + 16|0);
 HEAP32[$92>>2] = $$0$i17;
 $93 = (($node$2) + 20|0);
 HEAP32[$93>>2] = 1;
 $94 = (($node$2) + 24|0);
 $95 = HEAP32[$94>>2]|0;
 _free($95);
 HEAP32[$94>>2] = 0;
 $96 = ($text|0)==(0|0);
 if ($96) {
  $$0$i1 = 0;
 } else {
  $n$0$i = 0;
  while(1) {
   $97 = (($text) + ($n$0$i<<1)|0);
   $98 = HEAP16[$97>>1]|0;
   $99 = ($98<<16>>16)==(0);
   $100 = (($n$0$i) + 1)|0;
   if ($99) {
    break;
   } else {
    $n$0$i = $100;
   }
  }
  $101 = ($n$0$i|0)==(0);
  if ($101) {
   $$0$i1 = 0;
  } else {
   $102 = (_calloc($100,2)|0);
   HEAP32[$94>>2] = $102;
   $103 = ($102|0)==(0|0);
   if ($103) {
    $$0$i1 = 0;
   } else {
    $104 = $n$0$i << 1;
    _memcpy(($102|0),($text|0),($104|0))|0;
    $105 = (($102) + ($n$0$i<<1)|0);
    HEAP16[$105>>1] = 0;
    $$0$i1 = $n$0$i;
   }
  }
 }
 $106 = (($node$2) + 28|0);
 HEAP32[$106>>2] = $$0$i1;
 $107 = (($node$2) + 32|0);
 HEAP32[$107>>2] = 1;
 $108 = (($2) + 85696|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = $109 | 3;
 HEAP32[$108>>2] = $110;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _id3tag_set_textinfo_ucs2($gfp,$id,$text) {
 $gfp = $gfp|0;
 $id = $id|0;
 $text = $text|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_id3tag_set_textinfo_utf16($gfp,$id,$text)|0);
 STACKTOP = sp;return ($0|0);
}
function _id3tag_set_textinfo_latin1($gfp,$id,$text) {
 $gfp = $gfp|0;
 $id = $id|0;
 $text = $text|0;
 var $$0 = 0, $$0$i = 0, $$01$i = 0, $$off$i = 0, $$off2$i = 0, $$sum$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$02$i$i = 0, $i$05$i = 0, $n$0$i$i = 0, $or$cond$i = 0;
 var $x$04$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($id|0)==(0|0);
 L1: do {
  if ($0) {
   $$0 = -1;
  } else {
   $i$05$i = 0;$x$04$i = 0;
   while(1) {
    $3 = (($id) + ($i$05$i)|0);
    $4 = HEAP8[$3>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $$0$i = $x$04$i;
     break;
    }
    $6 = $4&255;
    $7 = $x$04$i << 8;
    $8 = $6 | $7;
    $$off$i = (($4) + -65)<<24>>24;
    $9 = ($$off$i&255)>(25);
    $$off2$i = (($4) + -48)<<24>>24;
    $10 = ($$off2$i&255)>(9);
    $or$cond$i = $9 & $10;
    $2 = (($i$05$i) + 1)|0;
    if ($or$cond$i) {
     $$0 = -1;
     break L1;
    }
    $1 = ($2>>>0)<(4);
    if ($1) {
     $i$05$i = $2;$x$04$i = $8;
    } else {
     $$0$i = $8;
     break;
    }
   }
   $11 = ($$0$i|0)==(0);
   if ($11) {
    $$0 = -1;
   } else {
    $12 = ($text|0)==(0|0);
    if ($12) {
     $$0 = 0;
    } else {
     if ((($$0$i|0) == 1129270605) | (($$0$i|0) == 1415075928) | (($$0$i|0) == 1465407576)) {
      $i$02$i$i = 0;
      while(1) {
       $13 = (($text) + ($i$02$i$i)|0);
       $14 = HEAP8[$13>>0]|0;
       if ((($14<<24>>24) == 61)) {
        break;
       } else if ((($14<<24>>24) == 0)) {
        $$0 = -7;
        break L1;
       }
       $15 = (($i$02$i$i) + 1)|0;
       $i$02$i$i = $15;
      }
      $16 = ($i$02$i$i|0)>(-1);
      if ($16) {
       $n$0$i$i = 0;
      } else {
       $$0 = -7;
       break;
      }
      while(1) {
       $17 = (($text) + ($n$0$i$i)|0);
       $18 = HEAP8[$17>>0]|0;
       $19 = ($18<<24>>24)==(0);
       $20 = (($n$0$i$i) + 1)|0;
       if ($19) {
        break;
       } else {
        $n$0$i$i = $20;
       }
      }
      $21 = (_calloc($20,1)|0);
      _memcpy(($21|0),($text|0),($n$0$i$i|0))|0;
      $22 = (($21) + ($n$0$i$i)|0);
      HEAP8[$22>>0] = 0;
      $23 = (($21) + ($i$02$i$i)|0);
      HEAP8[$23>>0] = 0;
      $$sum$i = (($i$02$i$i) + 1)|0;
      $24 = (($21) + ($$sum$i)|0);
      $25 = (_id3v2_add_latin1($gfp,$$0$i,7568,$21,$24)|0);
      _free($21);
      $$0 = $25;
      break;
     } else if ((($$0$i|0) == 1413697358)) {
      $26 = (($gfp) + 288|0);
      $27 = HEAP32[$26>>2]|0;
      $28 = HEAP8[$text>>0]|0;
      $29 = ($28<<24>>24)==(0);
      if ($29) {
       $$0 = 0;
       break;
      }
      $30 = (_lookupGenre($text)|0);
      $31 = ($30|0)==(-1);
      if ($31) {
       $$0 = -1;
       break;
      }
      $32 = (($27) + 85696|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = $33 | 1;
      HEAP32[$32>>2] = $34;
      $35 = ($30|0)>(-1);
      $36 = (($27) + 85724|0);
      if ($35) {
       HEAP32[$36>>2] = $30;
       $37 = (6960 + ($30<<2)|0);
       $38 = HEAP32[$37>>2]|0;
       $$01$i = $38;
      } else {
       HEAP32[$36>>2] = 12;
       $39 = $33 | 3;
       HEAP32[$32>>2] = $39;
       $$01$i = $text;
      }
      $40 = ($gfp|0)==(0|0);
      if ($40) {
       $$0 = 0;
       break;
      }
      $41 = HEAP32[$26>>2]|0;
      $42 = ($41|0)==(0|0);
      if ($42) {
       $$0 = 0;
       break;
      }
      $43 = (($41) + 85696|0);
      $44 = HEAP32[$43>>2]|0;
      (_id3v2_add_latin1($gfp,1413697358,7568,0,$$01$i)|0);
      HEAP32[$43>>2] = $44;
      $$0 = 0;
      break;
     } else if ((($$0$i|0) == 1346589524)) {
      $45 = (_id3v2_add_latin1($gfp,1346589524,0,0,$text)|0);
      $$0 = $45;
      break;
     } else if ((($$0$i|0) == 1431520594)) {
      $46 = (_id3v2_add_latin1($gfp,1431520594,7568,$text,0)|0);
      $$0 = $46;
      break;
     } else if ((($$0$i|0) == 1464223044)) {
      $47 = (_id3v2_add_latin1($gfp,1464223044,0,$text,0)|0);
      $$0 = $47;
      break;
     } else {
      $48 = $$0$i & -16777216;
      if (!((($48|0) == 1459617792) | (($48|0) == 0) | (($48|0) == 1409286144))) {
       $$0 = -255;
       break;
      }
      $49 = (_id3v2_add_latin1($gfp,$$0$i,0,0,$text)|0);
      $$0 = $49;
      break;
     }
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _id3tag_set_genre($gfp,$genre) {
 $gfp = $gfp|0;
 $genre = $genre|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($gfp) + 288|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($genre|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = HEAP8[$genre>>0]|0;
  $4 = ($3<<24>>24)==(0);
  if ($4) {
   $$0 = 0;
  } else {
   $5 = (_lookupGenre($genre)|0);
   $6 = ($5|0)==(-1);
   if ($6) {
    $$0 = -1;
   } else {
    $7 = (($1) + 85696|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = $8 | 1;
    HEAP32[$7>>2] = $9;
    $10 = ($5|0)>(-1);
    $11 = (($1) + 85724|0);
    if ($10) {
     HEAP32[$11>>2] = $5;
     $12 = (6960 + ($5<<2)|0);
     $13 = HEAP32[$12>>2]|0;
     $$01 = $13;
    } else {
     HEAP32[$11>>2] = 12;
     $14 = $8 | 3;
     HEAP32[$7>>2] = $14;
     $$01 = $genre;
    }
    $15 = ($gfp|0)==(0|0);
    if ($15) {
     $$0 = 0;
    } else {
     $16 = HEAP32[$0>>2]|0;
     $17 = ($16|0)==(0|0);
     if ($17) {
      $$0 = 0;
     } else {
      $18 = (($16) + 85696|0);
      $19 = HEAP32[$18>>2]|0;
      (_id3v2_add_latin1($gfp,1413697358,7568,0,$$01)|0);
      HEAP32[$18>>2] = $19;
      $$0 = 0;
     }
    }
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _id3v2_add_latin1($gfp,$frame_id,$lang,$desc,$text) {
 $gfp = $gfp|0;
 $frame_id = $frame_id|0;
 $lang = $lang|0;
 $desc = $desc|0;
 $text = $text|0;
 var $$0 = 0, $$0$i = 0, $$0$i1 = 0, $$0$i17 = 0, $$op$i = 0, $$op4$i = 0, $$phi$trans$insert = 0, $$phi$trans$insert55 = 0, $$pre = 0, $$pre56 = 0, $$pre9$i26 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $d$i = 0, $i$01$i = 0, $i$03$i2436 = 0, $i$03$i37 = 0, $i$05$i = 0, $n$0$i = 0, $n$0$i15 = 0, $node$0$i = 0, $node$0$i8 = 0, $node$01$i = 0, $node$01$i7 = 0, $node$02$i = 0, $node$02$i9 = 0, $node$044 = 0, $node$1 = 0, $node$2 = 0, $scevgep$i = 0, $scevgep$i22 = 0;
 var $sext2$i = 0, $sext3$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $d$i = sp;
 $0 = ($gfp|0)==(0|0);
 if ($0) {
  $$0 = -255;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = (($gfp) + 288|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = -255;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (($2) + 85744|0);
 $node$01$i = HEAP32[$4>>2]|0;
 $5 = ($node$01$i|0)==(0|0);
 L7: do {
  if ($5) {
   $$0$i = 0;
  } else {
   $node$02$i = $node$01$i;
   while(1) {
    $7 = (($node$02$i) + 4|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = ($8|0)==($frame_id|0);
    if ($9) {
     $$0$i = $node$02$i;
     break L7;
    }
    $node$0$i = HEAP32[$node$02$i>>2]|0;
    $6 = ($node$0$i|0)==(0|0);
    if ($6) {
     $$0$i = 0;
     break;
    } else {
     $node$02$i = $node$0$i;
    }
   }
  }
 } while(0);
 L12: do {
  if ((($frame_id|0) == 1347570006) | (($frame_id|0) == 1196575044) | (($frame_id|0) == 1162756946) | (($frame_id|0) == 1279872587) | (($frame_id|0) == 1095061059) | (($frame_id|0) == 1346588244) | (($frame_id|0) == 1195724610) | (($frame_id|0) == 1095780675) | (($frame_id|0) == 1398361172) | (($frame_id|0) == 1129270605) | (($frame_id|0) == 1465407576) | (($frame_id|0) == 1415075928)) {
   $10 = ($$0$i|0)==(0|0);
   if ($10) {
    label = 30;
   } else {
    $11 = ($lang|0)==(0|0);
    $12 = (($d$i) + 1|0);
    $13 = (($d$i) + 2|0);
    $14 = ($desc|0)==(0|0);
    $node$044 = $$0$i;
    while(1) {
     if ($11) {
      label = 11;
     } else {
      $15 = HEAP8[$lang>>0]|0;
      $16 = ($15<<24>>24)==(0);
      if ($16) {
       label = 11;
      } else {
       $21 = $15;$i$03$i37 = 0;
       while(1) {
        $20 = (($d$i) + ($i$03$i37)|0);
        HEAP8[$20>>0] = $21;
        $18 = (($i$03$i37) + 1)|0;
        $22 = ($i$03$i37|0)>(1);
        if ($22) {
         break;
        }
        $$phi$trans$insert55 = (($lang) + ($18)|0);
        $$pre56 = HEAP8[$$phi$trans$insert55>>0]|0;
        $21 = $$pre56;$i$03$i37 = $18;
       }
       $17 = ($18|0)<(3);
       if ($17) {
        $scevgep$i = (($d$i) + ($18)|0);
        $19 = (2 - ($i$03$i37))|0;
        _memset(($scevgep$i|0),32,($19|0))|0;
        $i$05$i = 0;
       } else {
        $i$05$i = 0;
       }
      }
     }
     if ((label|0) == 11) {
      label = 0;
      HEAP8[$d$i>>0] = 88;
      HEAP8[$12>>0] = 88;
      HEAP8[$13>>0] = 88;
      $i$05$i = 0;
     }
     while(1) {
      $25 = ((($node$044) + ($i$05$i)|0) + 8|0);
      $26 = HEAP8[$25>>0]|0;
      $27 = $26 << 24 >> 24;
      $28 = (_tolower($27)|0);
      $29 = (($d$i) + ($i$05$i)|0);
      $30 = HEAP8[$29>>0]|0;
      $31 = $30 << 24 >> 24;
      $32 = (_tolower($31)|0);
      $33 = $28&255;
      $34 = ($33<<24>>24)<(32);
      $35 = $32&255;
      $36 = ($35<<24>>24)<(32);
      $$op$i = $28 << 24;
      $sext2$i = $34 ? 536870912 : $$op$i;
      $$op4$i = $32 << 24;
      $sext3$i = $36 ? 536870912 : $$op4$i;
      $37 = ($sext2$i|0)==($sext3$i|0);
      $24 = (($i$05$i) + 1)|0;
      if (!($37)) {
       break;
      }
      $23 = ($24|0)<(3);
      if ($23) {
       $i$05$i = $24;
      } else {
       label = 18;
       break;
      }
     }
     L29: do {
      if ((label|0) == 18) {
       label = 0;
       $38 = (($node$044) + 20|0);
       $39 = HEAP32[$38>>2]|0;
       $40 = ($39|0)==(1);
       $41 = (($node$044) + 16|0);
       $42 = HEAP32[$41>>2]|0;
       if ($40) {
        $53 = ($42|0)==(0);
        if ($53) {
         $node$1 = $node$044;
         label = 29;
         break L12;
        } else {
         break;
        }
       }
       $43 = (($node$044) + 12|0);
       $44 = ($42|0)==(0);
       if ($44) {
        $node$1 = $node$044;
        label = 29;
        break L12;
       }
       if (!($14)) {
        $45 = HEAP32[$43>>2]|0;
        $i$01$i = 0;
        while(1) {
         $48 = (($45) + ($i$01$i)|0);
         $49 = HEAP8[$48>>0]|0;
         $50 = (($desc) + ($i$01$i)|0);
         $51 = HEAP8[$50>>0]|0;
         $52 = ($49<<24>>24)==($51<<24>>24);
         $47 = (($i$01$i) + 1)|0;
         if (!($52)) {
          break L29;
         }
         $46 = ($47>>>0)<($42>>>0);
         if ($46) {
          $i$01$i = $47;
         } else {
          $node$1 = $node$044;
          label = 29;
          break L12;
         }
        }
       }
      }
     } while(0);
     $node$01$i7 = HEAP32[$node$044>>2]|0;
     $54 = ($node$01$i7|0)==(0|0);
     if ($54) {
      label = 30;
      break L12;
     } else {
      $node$02$i9 = $node$01$i7;
     }
     while(1) {
      $57 = (($node$02$i9) + 4|0);
      $58 = HEAP32[$57>>2]|0;
      $59 = ($58|0)==($frame_id|0);
      if ($59) {
       break;
      }
      $node$0$i8 = HEAP32[$node$02$i9>>2]|0;
      $56 = ($node$0$i8|0)==(0|0);
      if ($56) {
       label = 30;
       break L12;
      } else {
       $node$02$i9 = $node$0$i8;
      }
     }
     $55 = ($node$02$i9|0)==(0|0);
     if ($55) {
      label = 30;
      break;
     } else {
      $node$044 = $node$02$i9;
     }
    }
   }
  } else {
   $node$1 = $$0$i;
   label = 29;
  }
 } while(0);
 if ((label|0) == 29) {
  $60 = ($node$1|0)==(0|0);
  if ($60) {
   label = 30;
  } else {
   $node$2 = $node$1;
  }
 }
 if ((label|0) == 30) {
  $61 = (_calloc(1,36)|0);
  $62 = ($61|0)==(0|0);
  if ($62) {
   $$0 = -254;
   STACKTOP = sp;return ($$0|0);
  }
  $63 = (($2) + 85748|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = ($64|0)==(0|0);
  if ($65) {
   label = 33;
  } else {
   $66 = HEAP32[$4>>2]|0;
   $67 = ($66|0)==(0|0);
   if ($67) {
    label = 33;
   } else {
    HEAP32[$64>>2] = $61;
   }
  }
  if ((label|0) == 33) {
   HEAP32[$4>>2] = $61;
  }
  HEAP32[$63>>2] = $61;
  $node$2 = $61;
 }
 $68 = (($node$2) + 4|0);
 HEAP32[$68>>2] = $frame_id;
 $69 = (($node$2) + 8|0);
 $70 = ($lang|0)==(0|0);
 if ($70) {
  label = 38;
 } else {
  $71 = HEAP8[$lang>>0]|0;
  $72 = ($71<<24>>24)==(0);
  if ($72) {
   label = 38;
  } else {
   $79 = $71;$i$03$i2436 = 0;
   while(1) {
    $78 = ((($node$2) + ($i$03$i2436)|0) + 8|0);
    HEAP8[$78>>0] = $79;
    $76 = (($i$03$i2436) + 1)|0;
    $80 = ($i$03$i2436|0)>(1);
    if ($80) {
     break;
    }
    $$pre9$i26 = HEAP8[$lang>>0]|0;
    $81 = ($$pre9$i26<<24>>24)==(0);
    if ($81) {
     break;
    }
    $$phi$trans$insert = (($lang) + ($76)|0);
    $$pre = HEAP8[$$phi$trans$insert>>0]|0;
    $79 = $$pre;$i$03$i2436 = $76;
   }
   $75 = ($76|0)<(3);
   if ($75) {
    $scevgep$i22 = ((($node$2) + ($76)|0) + 8|0);
    $77 = (2 - ($i$03$i2436))|0;
    _memset(($scevgep$i22|0),32,($77|0))|0;
   }
  }
 }
 if ((label|0) == 38) {
  HEAP8[$69>>0] = 88;
  $73 = (($node$2) + 9|0);
  HEAP8[$73>>0] = 88;
  $74 = (($node$2) + 10|0);
  HEAP8[$74>>0] = 88;
 }
 $82 = (($node$2) + 12|0);
 $83 = HEAP32[$82>>2]|0;
 _free($83);
 HEAP32[$82>>2] = 0;
 $84 = ($desc|0)==(0|0);
 if ($84) {
  $$0$i17 = 0;
 } else {
  $n$0$i15 = 0;
  while(1) {
   $85 = (($desc) + ($n$0$i15)|0);
   $86 = HEAP8[$85>>0]|0;
   $87 = ($86<<24>>24)==(0);
   $88 = (($n$0$i15) + 1)|0;
   if ($87) {
    break;
   } else {
    $n$0$i15 = $88;
   }
  }
  $89 = ($n$0$i15|0)==(0);
  if ($89) {
   $$0$i17 = 0;
  } else {
   $90 = (_calloc($88,1)|0);
   HEAP32[$82>>2] = $90;
   $91 = ($90|0)==(0|0);
   if ($91) {
    $$0$i17 = 0;
   } else {
    _memcpy(($90|0),($desc|0),($n$0$i15|0))|0;
    $92 = (($90) + ($n$0$i15)|0);
    HEAP8[$92>>0] = 0;
    $$0$i17 = $n$0$i15;
   }
  }
 }
 $93 = (($node$2) + 16|0);
 HEAP32[$93>>2] = $$0$i17;
 $94 = (($node$2) + 20|0);
 HEAP32[$94>>2] = 0;
 $95 = (($node$2) + 24|0);
 $96 = HEAP32[$95>>2]|0;
 _free($96);
 HEAP32[$95>>2] = 0;
 $97 = ($text|0)==(0|0);
 if ($97) {
  $$0$i1 = 0;
 } else {
  $n$0$i = 0;
  while(1) {
   $98 = (($text) + ($n$0$i)|0);
   $99 = HEAP8[$98>>0]|0;
   $100 = ($99<<24>>24)==(0);
   $101 = (($n$0$i) + 1)|0;
   if ($100) {
    break;
   } else {
    $n$0$i = $101;
   }
  }
  $102 = ($n$0$i|0)==(0);
  if ($102) {
   $$0$i1 = 0;
  } else {
   $103 = (_calloc($101,1)|0);
   HEAP32[$95>>2] = $103;
   $104 = ($103|0)==(0|0);
   if ($104) {
    $$0$i1 = 0;
   } else {
    _memcpy(($103|0),($text|0),($n$0$i|0))|0;
    $105 = (($103) + ($n$0$i)|0);
    HEAP8[$105>>0] = 0;
    $$0$i1 = $n$0$i;
   }
  }
 }
 $106 = (($node$2) + 28|0);
 HEAP32[$106>>2] = $$0$i1;
 $107 = (($node$2) + 32|0);
 HEAP32[$107>>2] = 0;
 $108 = (($2) + 85696|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = $109 | 3;
 HEAP32[$108>>2] = $110;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _id3tag_set_comment_latin1($gfp,$lang,$desc,$text) {
 $gfp = $gfp|0;
 $lang = $lang|0;
 $desc = $desc|0;
 $text = $text|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_id3v2_add_latin1($gfp,1129270605,$lang,$desc,$text)|0);
 STACKTOP = sp;return ($0|0);
}
function _id3tag_set_comment_utf16($gfp,$lang,$desc,$text) {
 $gfp = $gfp|0;
 $lang = $lang|0;
 $desc = $desc|0;
 $text = $text|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_id3v2_add_ucs2($gfp,1129270605,$lang,$desc,$text)|0);
 STACKTOP = sp;return ($0|0);
}
function _id3tag_set_comment_ucs2($gfp,$lang,$desc,$text) {
 $gfp = $gfp|0;
 $lang = $lang|0;
 $desc = $desc|0;
 $text = $text|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_id3v2_add_ucs2($gfp,1129270605,$lang,$desc,$text)|0);
 STACKTOP = sp;return ($0|0);
}
function _id3tag_set_title($gfp,$title) {
 $gfp = $gfp|0;
 $title = $title|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n$0$i = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($gfp|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (($gfp) + 288|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 $4 = ($title|0)==(0|0);
 $or$cond = $3 | $4;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $5 = HEAP8[$title>>0]|0;
 $6 = ($5<<24>>24)==(0);
 if ($6) {
  STACKTOP = sp;return;
 }
 $7 = (($2) + 85704|0);
 $8 = HEAP32[$7>>2]|0;
 _free($8);
 HEAP32[$7>>2] = 0;
 $n$0$i = 0;
 while(1) {
  $9 = (($title) + ($n$0$i)|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = ($10<<24>>24)==(0);
  $12 = (($n$0$i) + 1)|0;
  if ($11) {
   break;
  } else {
   $n$0$i = $12;
  }
 }
 $13 = ($n$0$i|0)==(0);
 if (!($13)) {
  $14 = (_calloc($12,1)|0);
  HEAP32[$7>>2] = $14;
  $15 = ($14|0)==(0|0);
  if (!($15)) {
   _memcpy(($14|0),($title|0),($n$0$i|0))|0;
   $16 = (($14) + ($n$0$i)|0);
   HEAP8[$16>>0] = 0;
  }
 }
 $17 = (($2) + 85696|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $18 | 1;
 HEAP32[$17>>2] = $19;
 $20 = HEAP32[$1>>2]|0;
 $21 = ($20|0)==(0|0);
 if ($21) {
  STACKTOP = sp;return;
 }
 $22 = (($20) + 85696|0);
 $23 = HEAP32[$22>>2]|0;
 (_id3v2_add_latin1($gfp,1414091826,7568,0,$title)|0);
 HEAP32[$22>>2] = $23;
 STACKTOP = sp;return;
}
function _id3tag_set_artist($gfp,$artist) {
 $gfp = $gfp|0;
 $artist = $artist|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n$0$i = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($gfp|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (($gfp) + 288|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 $4 = ($artist|0)==(0|0);
 $or$cond = $3 | $4;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $5 = HEAP8[$artist>>0]|0;
 $6 = ($5<<24>>24)==(0);
 if ($6) {
  STACKTOP = sp;return;
 }
 $7 = (($2) + 85708|0);
 $8 = HEAP32[$7>>2]|0;
 _free($8);
 HEAP32[$7>>2] = 0;
 $n$0$i = 0;
 while(1) {
  $9 = (($artist) + ($n$0$i)|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = ($10<<24>>24)==(0);
  $12 = (($n$0$i) + 1)|0;
  if ($11) {
   break;
  } else {
   $n$0$i = $12;
  }
 }
 $13 = ($n$0$i|0)==(0);
 if (!($13)) {
  $14 = (_calloc($12,1)|0);
  HEAP32[$7>>2] = $14;
  $15 = ($14|0)==(0|0);
  if (!($15)) {
   _memcpy(($14|0),($artist|0),($n$0$i|0))|0;
   $16 = (($14) + ($n$0$i)|0);
   HEAP8[$16>>0] = 0;
  }
 }
 $17 = (($2) + 85696|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $18 | 1;
 HEAP32[$17>>2] = $19;
 $20 = HEAP32[$1>>2]|0;
 $21 = ($20|0)==(0|0);
 if ($21) {
  STACKTOP = sp;return;
 }
 $22 = (($20) + 85696|0);
 $23 = HEAP32[$22>>2]|0;
 (_id3v2_add_latin1($gfp,1414546737,7568,0,$artist)|0);
 HEAP32[$22>>2] = $23;
 STACKTOP = sp;return;
}
function _id3tag_set_album($gfp,$album) {
 $gfp = $gfp|0;
 $album = $album|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n$0$i = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($gfp|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (($gfp) + 288|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 $4 = ($album|0)==(0|0);
 $or$cond = $3 | $4;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $5 = HEAP8[$album>>0]|0;
 $6 = ($5<<24>>24)==(0);
 if ($6) {
  STACKTOP = sp;return;
 }
 $7 = (($2) + 85712|0);
 $8 = HEAP32[$7>>2]|0;
 _free($8);
 HEAP32[$7>>2] = 0;
 $n$0$i = 0;
 while(1) {
  $9 = (($album) + ($n$0$i)|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = ($10<<24>>24)==(0);
  $12 = (($n$0$i) + 1)|0;
  if ($11) {
   break;
  } else {
   $n$0$i = $12;
  }
 }
 $13 = ($n$0$i|0)==(0);
 if (!($13)) {
  $14 = (_calloc($12,1)|0);
  HEAP32[$7>>2] = $14;
  $15 = ($14|0)==(0|0);
  if (!($15)) {
   _memcpy(($14|0),($album|0),($n$0$i|0))|0;
   $16 = (($14) + ($n$0$i)|0);
   HEAP8[$16>>0] = 0;
  }
 }
 $17 = (($2) + 85696|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $18 | 1;
 HEAP32[$17>>2] = $19;
 $20 = HEAP32[$1>>2]|0;
 $21 = ($20|0)==(0|0);
 if ($21) {
  STACKTOP = sp;return;
 }
 $22 = (($20) + 85696|0);
 $23 = HEAP32[$22>>2]|0;
 (_id3v2_add_latin1($gfp,1413565506,7568,0,$album)|0);
 HEAP32[$22>>2] = $23;
 STACKTOP = sp;return;
}
function _id3tag_set_year($gfp,$year) {
 $gfp = $gfp|0;
 $year = $year|0;
 var $$ = 0, $$$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($gfp|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (($gfp) + 288|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 $4 = ($year|0)==(0|0);
 $or$cond = $3 | $4;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $5 = HEAP8[$year>>0]|0;
 $6 = ($5<<24>>24)==(0);
 if ($6) {
  STACKTOP = sp;return;
 }
 $7 = (_atoi($year)|0);
 $8 = ($7|0)<(0);
 $$ = $8 ? 0 : $7;
 $9 = ($$|0)>(9999);
 $$$ = $9 ? 9999 : $$;
 $10 = ($$$|0)==(0);
 if (!($10)) {
  $11 = (($2) + 85700|0);
  HEAP32[$11>>2] = $$$;
  $12 = (($2) + 85696|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $13 | 1;
  HEAP32[$12>>2] = $14;
 }
 $15 = (($2) + 85696|0);
 $16 = HEAP32[$15>>2]|0;
 (_id3v2_add_latin1($gfp,1415136594,7568,0,$year)|0);
 HEAP32[$15>>2] = $16;
 STACKTOP = sp;return;
}
function _id3tag_set_comment($gfp,$comment) {
 $gfp = $gfp|0;
 $comment = $comment|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $n$0$i = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($gfp|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (($gfp) + 288|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 $4 = ($comment|0)==(0|0);
 $or$cond = $3 | $4;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $5 = HEAP8[$comment>>0]|0;
 $6 = ($5<<24>>24)==(0);
 if ($6) {
  STACKTOP = sp;return;
 }
 $7 = (($2) + 85716|0);
 $8 = HEAP32[$7>>2]|0;
 _free($8);
 HEAP32[$7>>2] = 0;
 $n$0$i = 0;
 while(1) {
  $9 = (($comment) + ($n$0$i)|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = ($10<<24>>24)==(0);
  $12 = (($n$0$i) + 1)|0;
  if ($11) {
   break;
  } else {
   $n$0$i = $12;
  }
 }
 $13 = ($n$0$i|0)==(0);
 if (!($13)) {
  $14 = (_calloc($12,1)|0);
  HEAP32[$7>>2] = $14;
  $15 = ($14|0)==(0|0);
  if (!($15)) {
   _memcpy(($14|0),($comment|0),($n$0$i|0))|0;
   $16 = (($14) + ($n$0$i)|0);
   HEAP8[$16>>0] = 0;
  }
 }
 $17 = (($2) + 85696|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $18 | 1;
 HEAP32[$17>>2] = $19;
 (_id3v2_add_latin1($gfp,1129270605,7568,7576,$comment)|0);
 HEAP32[$17>>2] = $19;
 STACKTOP = sp;return;
}
function _id3tag_set_track($gfp,$track) {
 $gfp = $gfp|0;
 $track = $track|0;
 var $$off = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $ret$04 = 0, $ret$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($gfp|0)==(0|0);
 if ($0) {
  $ret$1 = 0;
  STACKTOP = sp;return ($ret$1|0);
 }
 $1 = (($gfp) + 288|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 $4 = ($track|0)==(0|0);
 $or$cond = $3 | $4;
 if ($or$cond) {
  $ret$1 = 0;
  STACKTOP = sp;return ($ret$1|0);
 }
 $5 = HEAP8[$track>>0]|0;
 $6 = ($5<<24>>24)==(0);
 if ($6) {
  $ret$1 = 0;
  STACKTOP = sp;return ($ret$1|0);
 }
 $7 = (_atoi($track)|0);
 $$off = (($7) + -1)|0;
 $8 = ($$off>>>0)>(254);
 if ($8) {
  $9 = (($2) + 85696|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $10 | 3;
  HEAP32[$9>>2] = $11;
  $ret$04 = -1;
 } else {
  $12 = ($7|0)==(0);
  if ($12) {
   $ret$04 = 0;
  } else {
   $13 = (($2) + 85720|0);
   HEAP32[$13>>2] = $7;
   $14 = (($2) + 85696|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $15 | 1;
   HEAP32[$14>>2] = $16;
   $ret$04 = 0;
  }
 }
 $17 = (_strchr($track,47)|0);
 $18 = ($17|0)==(0|0);
 if (!($18)) {
  $19 = HEAP8[$17>>0]|0;
  $20 = ($19<<24>>24)==(0);
  if (!($20)) {
   $21 = (($2) + 85696|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = $22 | 3;
   HEAP32[$21>>2] = $23;
  }
 }
 $24 = (($2) + 85696|0);
 $25 = HEAP32[$24>>2]|0;
 (_id3v2_add_latin1($gfp,1414677323,7568,0,$track)|0);
 HEAP32[$24>>2] = $25;
 $ret$1 = $ret$04;
 STACKTOP = sp;return ($ret$1|0);
}
function _lookupGenre($genre) {
 $genre = $genre|0;
 var $$0 = 0, $$0$i$i = 0, $$01$i$i = 0, $$01$lcssa$i$i$i = 0, $$01$lcssa$i10$i$i = 0, $$01$lcssa$i18$i$i = 0, $$01$lcssa$i26$i$i = 0, $$012$i$i$i = 0, $$012$i14$i$i = 0, $$012$i22$i$i = 0, $$012$i6$i$i = 0, $$0132$i$i = 0, $$033$i$i = 0, $$1$i$i = 0, $$2$i$i = 0, $$pre$i = 0, $$pre4$i = 0, $0 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$0$in3$i$i$i = 0, $c$0$in3$i13$i$i = 0, $c$0$in3$i21$i$i = 0, $c$0$in3$i5$i$i = 0, $cp$0$in34$i$i = 0, $cq$0$in35$i$i = 0, $i$02$i = 0, $i$04$i = 0, $num$1 = 0, $or$cond$i$i$i = 0, $or$cond$i17$i$i = 0, $or$cond$i25$i$i = 0, $or$cond$i9$i$i = 0, $sext$i$i = 0, $sext$i$i$i = 0;
 var $sext$i15$i$i = 0, $sext$i23$i$i = 0, $sext$i7$i$i = 0, $sext$off$i$i$i = 0, $sext$off$i16$i$i = 0, $sext$off$i24$i$i = 0, $sext$off$i8$i$i = 0, $sext28$i$i = 0, $sext29$i$i = 0, $sext3$i$i = 0, $sext30$i$i = 0, $sext331$i$i = 0, $str = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $str = sp;
 $0 = (_strtol($genre,$str,10)|0);
 $1 = HEAP32[$str>>2]|0;
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 do {
  if ($3) {
   $107 = ($0>>>0)>(147);
   if ($107) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   } else {
    $num$1 = $0;
   }
  } else {
   $i$02$i = 0;
   while(1) {
    $6 = (6960 + ($i$02$i<<2)|0);
    $7 = HEAP32[$6>>2]|0;
    $$0$i$i = $genre;$$01$i$i = $7;
    while(1) {
     $8 = HEAP8[$$0$i$i>>0]|0;
     $9 = $8 << 24 >> 24;
     $10 = (_tolower($9)|0);
     $11 = $10&255;
     $12 = HEAP8[$$01$i$i>>0]|0;
     $13 = $12 << 24 >> 24;
     $14 = (_tolower($13)|0);
     $15 = ($11<<24>>24)==(0);
     if ($15) {
      label = 6;
      break;
     }
     $16 = (($$0$i$i) + 1|0);
     $17 = (($$01$i$i) + 1|0);
     $18 = $14 ^ $10;
     $19 = $18 & 255;
     $20 = ($19|0)==(0);
     if ($20) {
      $$0$i$i = $16;$$01$i$i = $17;
     } else {
      break;
     }
    }
    if ((label|0) == 6) {
     label = 0;
     $$pre$i = $14 ^ $10;
     $$pre4$i = $$pre$i & 255;
     $21 = ($$pre4$i|0)==(0);
     if ($21) {
      label = 7;
      break;
     }
    }
    $4 = (($i$02$i) + 1)|0;
    $5 = ($4|0)<(148);
    if ($5) {
     $i$02$i = $4;
    } else {
     $i$04$i = 0;
     break;
    }
   }
   if ((label|0) == 7) {
    $22 = ($i$02$i|0)==(148);
    if ($22) {
     $i$04$i = 0;
    } else {
     $num$1 = $i$02$i;
     break;
    }
   }
   L12: while(1) {
    $23 = (6960 + ($i$04$i<<2)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = HEAP8[$genre>>0]|0;
    $26 = $25 << 24 >> 24;
    $27 = (_toupper($26)|0);
    $28 = HEAP8[$genre>>0]|0;
    $29 = ($28<<24>>24)==(0);
    L14: do {
     if ($29) {
      $$01$lcssa$i$i$i = $genre;
     } else {
      $$012$i$i$i = $genre;$c$0$in3$i$i$i = $27;
      while(1) {
       $sext$i$i$i = $c$0$in3$i$i$i << 24;
       $sext$off$i$i$i = (($sext$i$i$i) + -1073741825)|0;
       $30 = ($sext$off$i$i$i>>>0)>(452984830);
       $31 = ($sext$i$i$i|0)==(0);
       $or$cond$i$i$i = $30 | $31;
       if (!($or$cond$i$i$i)) {
        $$01$lcssa$i$i$i = $$012$i$i$i;
        break L14;
       }
       $32 = (($$012$i$i$i) + 1|0);
       $33 = HEAP8[$32>>0]|0;
       $34 = $33 << 24 >> 24;
       $35 = (_toupper($34)|0);
       $36 = HEAP8[$32>>0]|0;
       $37 = ($36<<24>>24)==(0);
       if ($37) {
        $$01$lcssa$i$i$i = $32;
        break;
       } else {
        $$012$i$i$i = $32;$c$0$in3$i$i$i = $35;
       }
      }
     }
    } while(0);
    $38 = HEAP8[$24>>0]|0;
    $39 = $38 << 24 >> 24;
    $40 = (_toupper($39)|0);
    $41 = HEAP8[$24>>0]|0;
    $42 = ($41<<24>>24)==(0);
    L19: do {
     if ($42) {
      $$01$lcssa$i10$i$i = $24;
     } else {
      $$012$i6$i$i = $24;$c$0$in3$i5$i$i = $40;
      while(1) {
       $sext$i7$i$i = $c$0$in3$i5$i$i << 24;
       $sext$off$i8$i$i = (($sext$i7$i$i) + -1073741825)|0;
       $43 = ($sext$off$i8$i$i>>>0)>(452984830);
       $44 = ($sext$i7$i$i|0)==(0);
       $or$cond$i9$i$i = $43 | $44;
       if (!($or$cond$i9$i$i)) {
        $$01$lcssa$i10$i$i = $$012$i6$i$i;
        break L19;
       }
       $45 = (($$012$i6$i$i) + 1|0);
       $46 = HEAP8[$45>>0]|0;
       $47 = $46 << 24 >> 24;
       $48 = (_toupper($47)|0);
       $49 = HEAP8[$45>>0]|0;
       $50 = ($49<<24>>24)==(0);
       if ($50) {
        $$01$lcssa$i10$i$i = $45;
        break;
       } else {
        $$012$i6$i$i = $45;$c$0$in3$i5$i$i = $48;
       }
      }
     }
    } while(0);
    $51 = HEAP8[$$01$lcssa$i$i$i>>0]|0;
    $52 = $51 << 24 >> 24;
    $53 = (_toupper($52)|0);
    $54 = HEAP8[$$01$lcssa$i10$i$i>>0]|0;
    $55 = $54 << 24 >> 24;
    $56 = (_toupper($55)|0);
    $sext30$i$i = $53 << 24;
    $57 = $sext30$i$i >> 24;
    $sext331$i$i = $56 << 24;
    $58 = $sext331$i$i >> 24;
    $59 = ($57|0)==($58|0);
    if ($59) {
     $$0132$i$i = $$01$lcssa$i$i$i;$$033$i$i = $$01$lcssa$i10$i$i;$61 = $57;$cp$0$in34$i$i = $53;$cq$0$in35$i$i = $56;
     while(1) {
      $60 = ($61|0)==(0);
      if ($60) {
       break L12;
      }
      $62 = (($$0132$i$i) + 1|0);
      $63 = HEAP8[$62>>0]|0;
      $64 = ($63<<24>>24)==(46);
      L28: do {
       if ($64) {
        $$1$i$i = $$033$i$i;
        while(1) {
         $65 = HEAP8[$$1$i$i>>0]|0;
         $66 = ($65<<24>>24)==(0);
         if ($66) {
          $$2$i$i = $$1$i$i;
          break L28;
         }
         $67 = (($$1$i$i) + 1|0);
         $68 = ($65<<24>>24)==(32);
         if ($68) {
          $$2$i$i = $67;
          break;
         } else {
          $$1$i$i = $67;
         }
        }
       } else {
        $$2$i$i = $$033$i$i;
       }
      } while(0);
      $69 = HEAP8[$$0132$i$i>>0]|0;
      $70 = $69 << 24 >> 24;
      $71 = (_toupper($70)|0);
      $72 = HEAP8[$$0132$i$i>>0]|0;
      $73 = ($72<<24>>24)==(0);
      L33: do {
       if ($73) {
        $$01$lcssa$i18$i$i = $$0132$i$i;
       } else {
        $sext28$i$i = $cp$0$in34$i$i << 24;
        $$012$i14$i$i = $$0132$i$i;$c$0$in3$i13$i$i = $71;
        while(1) {
         $sext$i15$i$i = $c$0$in3$i13$i$i << 24;
         $sext$off$i16$i$i = (($sext$i15$i$i) + -1073741825)|0;
         $74 = ($sext$off$i16$i$i>>>0)>(452984830);
         $75 = ($sext$i15$i$i|0)==($sext28$i$i|0);
         $or$cond$i17$i$i = $74 | $75;
         if (!($or$cond$i17$i$i)) {
          $$01$lcssa$i18$i$i = $$012$i14$i$i;
          break L33;
         }
         $76 = (($$012$i14$i$i) + 1|0);
         $77 = HEAP8[$76>>0]|0;
         $78 = $77 << 24 >> 24;
         $79 = (_toupper($78)|0);
         $80 = HEAP8[$76>>0]|0;
         $81 = ($80<<24>>24)==(0);
         if ($81) {
          $$01$lcssa$i18$i$i = $76;
          break;
         } else {
          $$012$i14$i$i = $76;$c$0$in3$i13$i$i = $79;
         }
        }
       }
      } while(0);
      $82 = HEAP8[$$2$i$i>>0]|0;
      $83 = $82 << 24 >> 24;
      $84 = (_toupper($83)|0);
      $85 = HEAP8[$$2$i$i>>0]|0;
      $86 = ($85<<24>>24)==(0);
      L39: do {
       if ($86) {
        $$01$lcssa$i26$i$i = $$2$i$i;
       } else {
        $sext29$i$i = $cq$0$in35$i$i << 24;
        $$012$i22$i$i = $$2$i$i;$c$0$in3$i21$i$i = $84;
        while(1) {
         $sext$i23$i$i = $c$0$in3$i21$i$i << 24;
         $sext$off$i24$i$i = (($sext$i23$i$i) + -1073741825)|0;
         $87 = ($sext$off$i24$i$i>>>0)>(452984830);
         $88 = ($sext$i23$i$i|0)==($sext29$i$i|0);
         $or$cond$i25$i$i = $87 | $88;
         if (!($or$cond$i25$i$i)) {
          $$01$lcssa$i26$i$i = $$012$i22$i$i;
          break L39;
         }
         $89 = (($$012$i22$i$i) + 1|0);
         $90 = HEAP8[$89>>0]|0;
         $91 = $90 << 24 >> 24;
         $92 = (_toupper($91)|0);
         $93 = HEAP8[$89>>0]|0;
         $94 = ($93<<24>>24)==(0);
         if ($94) {
          $$01$lcssa$i26$i$i = $89;
          break;
         } else {
          $$012$i22$i$i = $89;$c$0$in3$i21$i$i = $92;
         }
        }
       }
      } while(0);
      $95 = HEAP8[$$01$lcssa$i18$i$i>>0]|0;
      $96 = $95 << 24 >> 24;
      $97 = (_toupper($96)|0);
      $98 = HEAP8[$$01$lcssa$i26$i$i>>0]|0;
      $99 = $98 << 24 >> 24;
      $100 = (_toupper($99)|0);
      $sext$i$i = $97 << 24;
      $101 = $sext$i$i >> 24;
      $sext3$i$i = $100 << 24;
      $102 = $sext3$i$i >> 24;
      $103 = ($101|0)==($102|0);
      if ($103) {
       $$0132$i$i = $$01$lcssa$i18$i$i;$$033$i$i = $$01$lcssa$i26$i$i;$61 = $101;$cp$0$in34$i$i = $97;$cq$0$in35$i$i = $100;
      } else {
       break;
      }
     }
    }
    $104 = (($i$04$i) + 1)|0;
    $105 = ($104|0)<(148);
    if ($105) {
     $i$04$i = $104;
    } else {
     $$0 = -2;
     label = 32;
     break;
    }
   }
   if ((label|0) == 32) {
    STACKTOP = sp;return ($$0|0);
   }
   $106 = ($i$04$i|0)==(148);
   if ($106) {
    $$0 = -2;
    STACKTOP = sp;return ($$0|0);
   } else {
    $num$1 = $i$04$i;
   }
  }
 } while(0);
 $$0 = $num$1;
 STACKTOP = sp;return ($$0|0);
}
function _id3tag_set_fieldvalue($gfp,$fieldvalue) {
 $gfp = $gfp|0;
 $fieldvalue = $fieldvalue|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($fieldvalue|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = HEAP8[$fieldvalue>>0]|0;
  $2 = ($1<<24>>24)==(0);
  if ($2) {
   $$0 = 0;
  } else {
   $3 = (_strlen(($fieldvalue|0))|0);
   $4 = ($3>>>0)<(5);
   if ($4) {
    $$0 = -1;
   } else {
    $5 = (($fieldvalue) + 4|0);
    $6 = HEAP8[$5>>0]|0;
    $7 = ($6<<24>>24)==(61);
    if ($7) {
     $8 = (($fieldvalue) + 5|0);
     $9 = (_id3tag_set_textinfo_latin1($gfp,$fieldvalue,$8)|0);
     $$0 = $9;
    } else {
     $$0 = -1;
    }
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _id3tag_set_fieldvalue_utf16($gfp,$fieldvalue) {
 $gfp = $gfp|0;
 $fieldvalue = $fieldvalue|0;
 var $$$i = 0, $$0 = 0, $$0$i = 0, $$0$i$i = 0, $$0$i2 = 0, $$0$i3$i = 0, $$0$i3$off$i = 0, $$0$i3$off4$i = 0, $$01$i = 0, $$01$i6 = 0, $$neg = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fid = 0, $i$06$i = 0, $n$0$lcssa$i = 0, $n$0$ph$i = 0, $n$02$i = 0, $n$02$i5 = 0, $or$cond$i1 = 0, $phitmp$i = 0, $s$$i = 0, $scevgep$i = 0, $scevgep4$i = 0, $x$07$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $fid = sp;
 $0 = ($fieldvalue|0)==(0|0);
 if ($0) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = HEAP16[$fieldvalue>>1]|0;
 if ((($1<<16>>16) == -257) | (($1<<16>>16) == -2)) {
  $$0$i = 1;
 } else if ((($1<<16>>16) == 0)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $$0$i = 0;
 }
 $2 = ($1<<16>>16)==(-2);
 $$$i = $2 ? 15616 : 61;
 ;HEAP8[$fid+0>>0]=0|0;HEAP8[$fid+1>>0]=0|0;HEAP8[$fid+2>>0]=0|0;HEAP8[$fid+3>>0]=0|0;HEAP8[$fid+4>>0]=0|0;
 if ((($1<<16>>16) == -257) | (($1<<16>>16) == -2)) {
  $$0$i$i = 0;
 } else {
  $$0$i$i = 1;
 }
 $3 = (($fieldvalue) + 2|0);
 $s$$i = $$0$i$i ? $fieldvalue : $3;
 $i$06$i = 0;$x$07$i = 0;
 while(1) {
  $4 = (($s$$i) + ($i$06$i<<1)|0);
  $5 = HEAP16[$4>>1]|0;
  $6 = ($5<<16>>16)==(0);
  if ($6) {
   $$0$i2 = $x$07$i;
   break;
  }
  if ($2) {
   $7 = $5&65535;
   $8 = $7 << 8;
   $9 = $7 >>> 8;
   $10 = $8 | $9;
   $11 = $10&65535;
   $$0$i3$i = $11;
  } else {
   $$0$i3$i = $5;
  }
  $$0$i3$off$i = (($$0$i3$i) + -65)<<16>>16;
  $12 = ($$0$i3$off$i&65535)>(25);
  $$0$i3$off4$i = (($$0$i3$i) + -48)<<16>>16;
  $13 = ($$0$i3$off4$i&65535)>(9);
  $or$cond$i1 = $12 & $13;
  if ($or$cond$i1) {
   $$0$i2 = 0;
   break;
  }
  $14 = $$0$i3$i&65535;
  $15 = $x$07$i << 8;
  $16 = $14 | $15;
  $17 = (($i$06$i) + 1)|0;
  $18 = ($17>>>0)<(4);
  if ($18) {
   $i$06$i = $17;$x$07$i = $16;
  } else {
   $$0$i2 = $16;
   break;
  }
 }
 $19 = ($1<<16>>16)==(0);
 if ($19) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $$01$i6 = $fieldvalue;$n$02$i5 = 0;
 }
 while(1) {
  $20 = (($$01$i6) + 2|0);
  $21 = (($n$02$i5) + 1)|0;
  $22 = HEAP16[$20>>1]|0;
  $23 = ($22<<16>>16)==(0);
  if ($23) {
   break;
  } else {
   $$01$i6 = $20;$n$02$i5 = $21;
  }
 }
 $24 = (($$0$i) + 5)|0;
 $25 = ($21>>>0)<($24>>>0);
 if ($25) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $26 = $$0$i | 4;
 $27 = (($fieldvalue) + ($26<<1)|0);
 $28 = HEAP16[$27>>1]|0;
 $29 = ($28<<16>>16)==($$$i<<16>>16);
 if (!($29)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $30 = $$0$i2 >>> 24;
 $31 = $30&255;
 HEAP8[$fid>>0] = $31;
 $32 = $$0$i2 >>> 16;
 $33 = $32&255;
 $34 = (($fid) + 1|0);
 HEAP8[$34>>0] = $33;
 $35 = $$0$i2 >>> 8;
 $36 = $35&255;
 $37 = (($fid) + 2|0);
 HEAP8[$37>>0] = $36;
 $38 = $$0$i2&255;
 $39 = (($fid) + 3|0);
 HEAP8[$39>>0] = $38;
 $40 = ($$0$i2|0)==(0);
 if ($40) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $$01$i = $fieldvalue;$n$02$i = 0;
 }
 while(1) {
  $41 = (($$01$i) + 2|0);
  $42 = (($n$02$i) + 1)|0;
  $43 = HEAP16[$41>>1]|0;
  $44 = ($43<<16>>16)==(0);
  if ($44) {
   break;
  } else {
   $$01$i = $41;$n$02$i = $42;
  }
 }
 $45 = ($24>>>0)<($42>>>0);
 if ($45) {
  $46 = (-3 - ($$0$i))|0;
  $phitmp$i = (($46) + ($42))|0;
  $47 = $phitmp$i;
 } else {
  $47 = 2;
 }
 $48 = (_calloc($47,2)|0);
 $49 = ($48|0)==(0|0);
 if (!($49)) {
  if ((($1<<16>>16) == -257) | (($1<<16>>16) == -2)) {
   HEAP16[$48>>1] = $1;
   $n$0$ph$i = 1;
  } else {
   $n$0$ph$i = 0;
  }
  if ($45) {
   $$neg = (-5 - ($$0$i))|0;
   $50 = (($42) + ($$neg))|0;
   $51 = (($50) + ($n$0$ph$i))|0;
   $52 = $n$0$ph$i << 1;
   $scevgep$i = (($48) + ($52)|0);
   $scevgep4$i = (($fieldvalue) + ($24<<1)|0);
   $53 = (($42) - ($24))|0;
   $54 = $53 << 1;
   _memcpy(($scevgep$i|0),($scevgep4$i|0),($54|0))|0;
   $n$0$lcssa$i = $51;
  } else {
   $n$0$lcssa$i = $n$0$ph$i;
  }
  $55 = (($48) + ($n$0$lcssa$i<<1)|0);
  HEAP16[$55>>1] = 0;
 }
 $56 = (_id3tag_set_textinfo_utf16($gfp,$fid,$48)|0);
 _free($48);
 $$0 = $56;
 STACKTOP = sp;return ($$0|0);
}
function _id3tag_set_fieldvalue_ucs2($gfp,$fieldvalue) {
 $gfp = $gfp|0;
 $fieldvalue = $fieldvalue|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_id3tag_set_fieldvalue_utf16($gfp,$fieldvalue)|0);
 STACKTOP = sp;return ($0|0);
}
function _lame_get_id3v2_tag($gfp,$buffer,$size) {
 $gfp = $gfp|0;
 $buffer = $buffer|0;
 $size = $size|0;
 var $$$i = 0, $$$i$i = 0, $$$i$i35 = 0, $$$i21$i = 0, $$0 = 0, $$0$be$i$i = 0, $$0$be$us$i$i = 0, $$0$i = 0, $$0$i25 = 0, $$0$i3$off$i$i = 0, $$0$i3$off$i25$i = 0, $$0$i3$off$us$i$i = 0, $$0$i3$off$us$i20$i = 0, $$0$i64 = 0, $$01$ph$i16$i = 0, $$010$i2061$i = 0, $$010$i2062$i = 0, $$010$i33$i = 0, $$010$i56$i = 0, $$010$i57$i = 0;
 var $$010$us$i29$i = 0, $$010$us$i52$i = 0, $$010$us$i53$i = 0, $$010$us$i957$i = 0, $$010$us$i958$i = 0, $$014$i$i = 0, $$014$i$i28 = 0, $$014$i$i67 = 0, $$014$i35$i = 0, $$014$i35$i42 = 0, $$014$i8$i = 0, $$015$i28$i = 0, $$015$us$i23$i = 0, $$016$i = 0, $$02$lcssa$i13$i = 0, $$02$lcssa$i40$i = 0, $$02$ph$i15$i = 0, $$023$i$i = 0, $$023$i$i29 = 0, $$023$i$i68 = 0;
 var $$023$i36$i = 0, $$023$i36$i43 = 0, $$023$i9$i = 0, $$029$i = 0, $$03$lcssa$i = 0, $$038$i = 0, $$05$i$i = 0, $$05$i$i27 = 0, $$05$i$i66 = 0, $$05$i34$i = 0, $$05$i34$i41 = 0, $$05$i7$i = 0, $$06$i27$i = 0, $$06$us$i22$i = 0, $$07$i = 0, $$1$i32$i = 0, $$1$i6$i = 0, $$15$i = 0, $$9$i$i = 0, $$9$i26$i = 0;
 var $$idx$val = 0, $$idx5 = 0, $$idx5$val = 0, $$lobit = 0, $$lobit104 = 0, $$pn = 0, $$pn$i = 0, $$pn$i$i = 0, $$pn$i$i23 = 0, $$pn$i$i88 = 0, $$pn$i17 = 0, $$pn$i29$i = 0, $$pn$i29$i61 = 0, $$pn$i82 = 0, $$pn34$i = 0, $$pn62$i = 0, $$pn63$i = 0, $$pn63$i76 = 0, $$pn64$i = 0, $$pn64$i57 = 0;
 var $$pn65$i = 0, $$pre$i$i = 0, $$pre$i$i12 = 0, $$pre$i$i77 = 0, $$pre$i13$i = 0, $$pre$i13$i52 = 0, $$pre12$i$i = 0, $$pre12$i$i18 = 0, $$pre12$i$i83 = 0, $$pre12$i24$i = 0, $$pre12$i24$i58 = 0, $$sink$i = 0, $$sum$i = 0, $$sum$i45 = 0, $$sum$i8 = 0, $$sum19$i = 0, $$sum49$i = 0, $$sum50$i = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0.0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0.0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0.0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0.0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0;
 var $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0;
 var $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0;
 var $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0;
 var $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0;
 var $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0;
 var $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0;
 var $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0;
 var $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $albumart_mime$0$ph = 0, $albumart_mime$1 = 0, $buffer$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i38 = 0, $cond$i$i6 = 0;
 var $cond$i92 = 0, $cond$i94 = 0, $cond1$i = 0, $cond1$i$i = 0, $cond1$i$i40 = 0, $cond1$i96 = 0, $extract$i = 0, $extract$i20 = 0, $extract$i85 = 0, $extract$t$i = 0, $extract$t$i$i = 0, $extract$t$i$i10 = 0, $extract$t$i$i74 = 0, $extract$t$i21 = 0, $extract$t$i3$i = 0, $extract$t$i3$i50 = 0, $extract$t$i86 = 0, $extract$t13$i$i = 0, $extract$t13$i$i19 = 0, $extract$t13$i$i84 = 0;
 var $extract$t13$i25$i = 0, $extract$t13$i25$i59 = 0, $extract$t18$i$i = 0, $extract$t18$i$i13 = 0, $extract$t18$i$i78 = 0, $extract$t18$i14$i = 0, $extract$t18$i14$i53 = 0, $extract$t21$i$i = 0, $extract$t21$i$i15 = 0, $extract$t21$i$i80 = 0, $extract$t21$i16$i = 0, $extract$t21$i16$i55 = 0, $extract$t32$i = 0, $extract$t46$i = 0, $extract$t4660$i = 0, $extract$t47$i = 0, $extract$t4761$i = 0, $extract$t55$i = 0, $extract$t56$i = 0, $extract20$i$i = 0;
 var $extract20$i$i14 = 0, $extract20$i$i79 = 0, $extract20$i15$i = 0, $extract20$i15$i54 = 0, $extract31$i = 0, $extract45$i = 0, $extract4559$i = 0, $extract46$i = 0, $extract4660$i = 0, $extract54$i = 0, $extract55$i = 0, $n$0$i = 0, $n$0$i$i = 0, $n$0$i$i39 = 0, $n$0$i95 = 0, $n$1$i = 0, $n$1$i$i = 0, $n$1$i$i7 = 0, $n$2$i$i = 0, $node$0121 = 0;
 var $node2$0115 = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, $or$cond1 = 0, $or$cond101 = 0, $or$cond2 = 0, $or$cond3$not = 0, $or$cond4$i = 0, $p$0114 = 0, $p$1 = 0, $p$2 = 0, $p$3 = 0, $playlength_ms$0$i = 0, $scevgep$i = 0, $scevgep$i$i = 0, $scevgep$i$i31 = 0, $scevgep$i$i70 = 0, $scevgep$i11$i = 0, $scevgep$i38$i = 0;
 var $scevgep$i38$i46 = 0, $scevgep$i38$sum$i = 0, $split$i$i = 0, $split$i$i36 = 0, $split$i$i89 = 0, $split$i30$i = 0, $split$i30$i62 = 0, $split$i30$sum$i = 0, $split$i30$sum50$i = 0, $split$i5$i = 0, $tag_size$0 = 0, $tag_size$1120 = 0, $tag_size$2 = 0, $tag_size$3 = 0, $tag_size$4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040|0;
 $vararg_buffer = sp;
 $buffer$i = sp + 8|0;
 $0 = ($gfp|0)==(0|0);
 if ($0) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = (($gfp) + 288|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $$idx5 = (($2) + 85696|0);
 $$idx5$val = HEAP32[$$idx5>>2]|0;
 $$lobit = $$idx5$val & 4;
 $4 = ($$lobit|0)==(0);
 if (!($4)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = $$idx5$val & 10;
 $6 = (($2) + 85704|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $23 = 0;
 } else {
  $9 = (_strlen(($7|0))|0);
  $23 = $9;
 }
 $10 = (($2) + 85708|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0|0);
 if ($12) {
  $25 = 0;
 } else {
  $13 = (_strlen(($11|0))|0);
  $25 = $13;
 }
 $14 = (($2) + 85712|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0|0);
 if ($16) {
  $27 = 0;
 } else {
  $17 = (_strlen(($15|0))|0);
  $27 = $17;
 }
 $18 = (($2) + 85716|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(0|0);
 if ($20) {
  $29 = 0;
 } else {
  $21 = (_strlen(($19|0))|0);
  $29 = $21;
 }
 $22 = ($23>>>0)>(30);
 $24 = ($25>>>0)>(30);
 $or$cond = $22 | $24;
 $26 = ($27>>>0)>(30);
 $or$cond1 = $or$cond | $26;
 $28 = ($29>>>0)>(30);
 $or$cond2 = $or$cond1 | $28;
 if (!($or$cond2)) {
  $30 = (($2) + 85720|0);
  $31 = HEAP32[$30>>2]|0;
  $notlhs = ($31|0)==(0);
  $notrhs = ($29>>>0)<(29);
  $or$cond3$not = $notrhs | $notlhs;
  $32 = ($5|0)==(0);
  $or$cond101 = $or$cond3$not & $32;
  if ($or$cond101) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $33 = (($gfp) + 4|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ($34|0)==(-1);
 if (!($35)) {
  $36 = (+($34>>>0));
  $37 = $36 * 1000.0;
  $38 = (($2) + 60|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (+($39|0));
  $41 = $37 / $40;
  $42 = $41 > 4294967295.0;
  if ($42) {
   $playlength_ms$0$i = -1;
  } else {
   $43 = $41 < 0.0;
   if ($43) {
    $playlength_ms$0$i = 0;
   } else {
    $44 = (~~(($41))>>>0);
    $playlength_ms$0$i = $44;
   }
  }
  HEAP32[$vararg_buffer>>2] = $playlength_ms$0$i;
  (_sprintf($buffer$i,7640,$vararg_buffer)|0);
  $45 = HEAP32[$1>>2]|0;
  $46 = ($45|0)==(0|0);
  if (!($46)) {
   $47 = (($45) + 85696|0);
   $48 = HEAP32[$47>>2]|0;
   (_id3v2_add_latin1($gfp,1414284622,7568,0,$buffer$i)|0);
   HEAP32[$47>>2] = $48;
  }
 }
 $49 = (($2) + 85728|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ($50|0)==(0|0);
 do {
  if ($51) {
   $albumart_mime$1 = 0;$tag_size$0 = 10;
  } else {
   $52 = (($2) + 85732|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = ($53|0)==(0);
   if ($54) {
    $albumart_mime$1 = 0;$tag_size$0 = 10;
   } else {
    $55 = (($2) + 85740|0);
    $56 = HEAP32[$55>>2]|0;
    if ((($56|0) == 2)) {
     $albumart_mime$0$ph = 7600;
    } else if ((($56|0) == 3)) {
     $albumart_mime$0$ph = 7616;
    } else if ((($56|0) == 1)) {
     $albumart_mime$0$ph = 7584;
    } else {
     $albumart_mime$1 = 0;$tag_size$0 = 10;
     break;
    }
    $57 = (_strlen(($albumart_mime$0$ph|0))|0);
    $58 = (($57) + 24)|0;
    $59 = (($58) + ($53))|0;
    $albumart_mime$1 = $albumart_mime$0$ph;$tag_size$0 = $59;
   }
  }
 } while(0);
 $60 = (($2) + 85744|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = ($61|0)==(0|0);
 if ($62) {
  $tag_size$3 = $tag_size$0;
 } else {
  $node$0121 = $61;$tag_size$1120 = $tag_size$0;
  while(1) {
   $63 = (($node$0121) + 4|0);
   $64 = HEAP32[$63>>2]|0;
   do {
    if ((($64|0) == 1431520594) | (($64|0) == 1129270605)) {
     $65 = (($node$0121) + 20|0);
     $66 = HEAP32[$65>>2]|0;
     $cond$i94 = ($66|0)==(1);
     $67 = (($node$0121) + 16|0);
     $68 = HEAP32[$67>>2]|0;
     if ($cond$i94) {
      $70 = $68 << 1;
      $71 = (($70) + 16)|0;
      $n$0$i95 = $71;
     } else {
      $69 = (($68) + 15)|0;
      $n$0$i95 = $69;
     }
     $72 = (($node$0121) + 32|0);
     $73 = HEAP32[$72>>2]|0;
     $cond1$i96 = ($73|0)==(1);
     $74 = (($node$0121) + 28|0);
     $75 = HEAP32[$74>>2]|0;
     if ($cond1$i96) {
      $77 = $75 << 1;
      $78 = (($77) + ($n$0$i95))|0;
      $$pn = $78;
      break;
     } else {
      $76 = (($75) + ($n$0$i95))|0;
      $$pn = $76;
      break;
     }
    } else {
     $79 = $64 & -16777216;
     if (!((($79|0) == 0) | (($79|0) == 1459617792))) {
      $96 = (($node$0121) + 32|0);
      $97 = HEAP32[$96>>2]|0;
      $cond$i = ($97|0)==(1);
      $98 = (($node$0121) + 16|0);
      $99 = HEAP32[$98>>2]|0;
      $100 = ($99|0)!=(0);
      if (!($cond$i)) {
       $101 = (($99) + 12)|0;
       $$$i = $100 ? $101 : 11;
       $102 = (($node$0121) + 28|0);
       $103 = HEAP32[$102>>2]|0;
       $104 = (($103) + ($$$i))|0;
       $$pn = $104;
       break;
      }
      if ($100) {
       $105 = $99 << 1;
       $106 = (($105) + 13)|0;
       $n$1$i = $106;
      } else {
       $n$1$i = 11;
      }
      $107 = (($node$0121) + 28|0);
      $108 = HEAP32[$107>>2]|0;
      $109 = $108 << 1;
      $110 = (($109) + ($n$1$i))|0;
      $$pn = $110;
      break;
     }
     $80 = (($node$0121) + 16|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = ($81|0)==(0);
     do {
      if ($82) {
       $n$0$i = 10;
      } else {
       $83 = (($node$0121) + 20|0);
       $84 = HEAP32[$83>>2]|0;
       $cond$i92 = ($84|0)==(1);
       if ($cond$i92) {
        $86 = $81 << 1;
        $87 = (($86) + 13)|0;
        $n$0$i = $87;
        break;
       } else {
        $85 = (($81) + 12)|0;
        $n$0$i = $85;
        break;
       }
      }
     } while(0);
     $88 = (($node$0121) + 28|0);
     $89 = HEAP32[$88>>2]|0;
     $90 = ($89|0)==(0);
     if ($90) {
      $$pn = $n$0$i;
     } else {
      $91 = (($node$0121) + 32|0);
      $92 = HEAP32[$91>>2]|0;
      $cond1$i = ($92|0)==(1);
      if ($cond1$i) {
       $94 = (($n$0$i) + -1)|0;
       $95 = (($94) + ($89))|0;
       $$pn = $95;
       break;
      } else {
       $93 = (($89) + ($n$0$i))|0;
       $$pn = $93;
       break;
      }
     }
    }
   } while(0);
   $tag_size$2 = (($$pn) + ($tag_size$1120))|0;
   $111 = HEAP32[$node$0121>>2]|0;
   $112 = ($111|0)==(0|0);
   if ($112) {
    $tag_size$3 = $tag_size$2;
    break;
   } else {
    $node$0121 = $111;$tag_size$1120 = $tag_size$2;
   }
  }
 }
 $$idx$val = HEAP32[$$idx5>>2]|0;
 $$lobit104 = $$idx$val & 32;
 $113 = ($$lobit104|0)==(0);
 if ($113) {
  $tag_size$4 = $tag_size$3;
 } else {
  $114 = (($2) + 85736|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = (($115) + ($tag_size$3))|0;
  $tag_size$4 = $116;
 }
 $117 = ($tag_size$4>>>0)>($size>>>0);
 if ($117) {
  $$0 = $tag_size$4;
  STACKTOP = sp;return ($$0|0);
 }
 $118 = ($buffer|0)==(0|0);
 if ($118) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $119 = (($buffer) + 1|0);
 HEAP8[$buffer>>0] = 73;
 $120 = (($buffer) + 2|0);
 HEAP8[$119>>0] = 68;
 $121 = (($buffer) + 3|0);
 HEAP8[$120>>0] = 51;
 $122 = (($buffer) + 4|0);
 HEAP8[$121>>0] = 3;
 $123 = (($buffer) + 5|0);
 HEAP8[$122>>0] = 0;
 $124 = (($buffer) + 6|0);
 HEAP8[$123>>0] = 0;
 $125 = (($tag_size$4) + -10)|0;
 $126 = $125 >>> 21;
 $127 = $126 & 127;
 $128 = $127&255;
 $129 = (($buffer) + 7|0);
 HEAP8[$124>>0] = $128;
 $130 = $125 >>> 14;
 $131 = $130 & 127;
 $132 = $131&255;
 $133 = (($buffer) + 8|0);
 HEAP8[$129>>0] = $132;
 $134 = $125 >>> 7;
 $135 = $134 & 127;
 $136 = $135&255;
 $137 = (($buffer) + 9|0);
 HEAP8[$133>>0] = $136;
 $138 = $125 & 127;
 $139 = $138&255;
 $140 = (($buffer) + 10|0);
 HEAP8[$137>>0] = $139;
 $141 = HEAP32[$60>>2]|0;
 $142 = ($141|0)==(0|0);
 if ($142) {
  $p$2 = $140;
 } else {
  $node2$0115 = $141;$p$0114 = $140;
  while(1) {
   $143 = (($node2$0115) + 4|0);
   $144 = HEAP32[$143>>2]|0;
   do {
    if ((($144|0) == 1431520594) | (($144|0) == 1129270605)) {
     $145 = (($node2$0115) + 20|0);
     $146 = HEAP32[$145>>2]|0;
     $cond$i$i38 = ($146|0)==(1);
     $147 = (($node2$0115) + 16|0);
     $148 = HEAP32[$147>>2]|0;
     if ($cond$i$i38) {
      $150 = $148 << 1;
      $151 = (($150) + 16)|0;
      $n$0$i$i39 = $151;
     } else {
      $149 = (($148) + 15)|0;
      $n$0$i$i39 = $149;
     }
     $152 = (($node2$0115) + 32|0);
     $153 = HEAP32[$152>>2]|0;
     $cond1$i$i40 = ($153|0)==(1);
     $154 = (($node2$0115) + 28|0);
     $155 = HEAP32[$154>>2]|0;
     $156 = $cond1$i$i40&1;
     $$sink$i = $155 << $156;
     $157 = (($$sink$i) + ($n$0$i$i39))|0;
     $158 = ($157>>>0)>(10);
     if (!($158)) {
      $p$1 = $p$0114;
      break;
     }
     $159 = $144&255;
     $160 = (($p$0114) + 3|0);
     HEAP8[$160>>0] = $159;
     $161 = $144 >>> 8;
     $162 = $161&255;
     $163 = (($p$0114) + 2|0);
     HEAP8[$163>>0] = $162;
     $164 = $144 >>> 16;
     $165 = $164&255;
     $166 = (($p$0114) + 1|0);
     HEAP8[$166>>0] = $165;
     $167 = $144 >>> 24;
     $168 = $167&255;
     HEAP8[$p$0114>>0] = $168;
     $169 = (($p$0114) + 4|0);
     $170 = (($157) + -10)|0;
     $171 = $170&255;
     $172 = (($p$0114) + 7|0);
     HEAP8[$172>>0] = $171;
     $173 = $170 >>> 8;
     $174 = $173&255;
     $175 = (($p$0114) + 6|0);
     HEAP8[$175>>0] = $174;
     $176 = $170 >>> 16;
     $177 = $176&255;
     $178 = (($p$0114) + 5|0);
     HEAP8[$178>>0] = $177;
     $179 = $170 >>> 24;
     $180 = $179&255;
     HEAP8[$169>>0] = $180;
     $181 = (($p$0114) + 8|0);
     $182 = (($p$0114) + 9|0);
     HEAP8[$181>>0] = 0;
     $183 = (($p$0114) + 10|0);
     HEAP8[$182>>0] = 0;
     $184 = (($node2$0115) + 24|0);
     $185 = HEAP32[$152>>2]|0;
     $186 = ($185|0)==(1);
     $187 = $186&1;
     $188 = (($p$0114) + 11|0);
     HEAP8[$183>>0] = $187;
     $189 = (($node2$0115) + 8|0);
     $190 = HEAP8[$189>>0]|0;
     $191 = (($p$0114) + 12|0);
     HEAP8[$188>>0] = $190;
     $192 = (($node2$0115) + 9|0);
     $193 = HEAP8[$192>>0]|0;
     $194 = (($p$0114) + 13|0);
     HEAP8[$191>>0] = $193;
     $195 = (($node2$0115) + 10|0);
     $196 = HEAP8[$195>>0]|0;
     $197 = (($p$0114) + 14|0);
     HEAP8[$194>>0] = $196;
     $198 = (($node2$0115) + 12|0);
     $199 = HEAP32[$145>>2]|0;
     $200 = ($199|0)==(1);
     if ($200) {
      $210 = HEAP32[$198>>2]|0;
      $211 = HEAP32[$147>>2]|0;
      $212 = ($211|0)==(0);
      if ($212) {
       $$1$i32$i = $197;
      } else {
       $213 = HEAP16[$210>>1]|0;
       $214 = ($213<<16>>16)==(-2);
       do {
        if ($214) {
         $215 = (($211) + -1)|0;
         $216 = (($p$0114) + 15|0);
         HEAP8[$197>>0] = -1;
         HEAP8[$216>>0] = -2;
         $217 = ($215|0)==(0);
         if ($217) {
          break;
         } else {
          $$010$us$i958$i = $197;$$pn65$i = $210;$224 = $215;
         }
         while(1) {
          $221 = (($$pn65$i) + 2|0);
          $222 = (($$010$us$i958$i) + 2|0);
          $$pre$i13$i52 = HEAP16[$221>>1]|0;
          $extract$t18$i14$i53 = $$pre$i13$i52&255;
          $extract20$i15$i54 = ($$pre$i13$i52&65535) >>> 8;
          $extract$t21$i16$i55 = $extract20$i15$i54&255;
          $223 = (($224) + -1)|0;
          $225 = (($$010$us$i958$i) + 3|0);
          HEAP8[$222>>0] = $extract$t21$i16$i55;
          HEAP8[$225>>0] = $extract$t18$i14$i53;
          $226 = ($223|0)==(0);
          if ($226) {
           break;
          } else {
           $$010$us$i958$i = $222;$$pn65$i = $221;$224 = $223;
          }
         }
        } else {
         $extract$t$i3$i50 = $213&255;
         $extract4660$i = ($213&65535) >>> 8;
         $extract$t4761$i = $extract4660$i&255;
         $218 = (($211) + -1)|0;
         $219 = (($p$0114) + 15|0);
         HEAP8[$197>>0] = $extract$t$i3$i50;
         HEAP8[$219>>0] = $extract$t4761$i;
         $220 = ($218|0)==(0);
         if ($220) {
          break;
         } else {
          $$010$i2062$i = $197;$$pn64$i57 = $210;$230 = $218;
         }
         while(1) {
          $227 = (($$pn64$i57) + 2|0);
          $228 = (($$010$i2062$i) + 2|0);
          $$pre12$i24$i58 = HEAP16[$227>>1]|0;
          $extract$t13$i25$i59 = $$pre12$i24$i58&255;
          $extract46$i = ($$pre12$i24$i58&65535) >>> 8;
          $extract$t47$i = $extract46$i&255;
          $229 = (($230) + -1)|0;
          $231 = (($$010$i2062$i) + 3|0);
          HEAP8[$228>>0] = $extract$t13$i25$i59;
          HEAP8[$231>>0] = $extract$t47$i;
          $232 = ($229|0)==(0);
          if ($232) {
           break;
          } else {
           $$010$i2062$i = $228;$$pn64$i57 = $227;$230 = $229;
          }
         }
        }
       } while(0);
       $$pn$i29$i61 = $211 << 1;
       $$sum50$i = (($$pn$i29$i61) + 14)|0;
       $split$i30$i62 = (($p$0114) + ($$sum50$i)|0);
       $$1$i32$i = $split$i30$i62;
      }
      $233 = (($$1$i32$i) + 1|0);
      HEAP8[$$1$i32$i>>0] = 0;
      $234 = (($$1$i32$i) + 2|0);
      HEAP8[$233>>0] = 0;
      $$0$i64 = $234;
     } else {
      $201 = HEAP32[$147>>2]|0;
      $202 = ($201|0)==(0);
      if ($202) {
       $$02$lcssa$i40$i = $197;
      } else {
       $203 = HEAP32[$198>>2]|0;
       $$014$i35$i42 = $203;$$023$i36$i43 = $197;$$05$i34$i41 = $201;
       while(1) {
        $204 = (($$05$i34$i41) + -1)|0;
        $205 = (($$014$i35$i42) + 1|0);
        $206 = HEAP8[$$014$i35$i42>>0]|0;
        $207 = (($$023$i36$i43) + 1|0);
        HEAP8[$$023$i36$i43>>0] = $206;
        $208 = ($204|0)==(0);
        if ($208) {
         break;
        } else {
         $$014$i35$i42 = $205;$$023$i36$i43 = $207;$$05$i34$i41 = $204;
        }
       }
       $$sum$i45 = (($201) + 14)|0;
       $scevgep$i38$i46 = (($p$0114) + ($$sum$i45)|0);
       $$02$lcssa$i40$i = $scevgep$i38$i46;
      }
      $209 = (($$02$lcssa$i40$i) + 1|0);
      HEAP8[$$02$lcssa$i40$i>>0] = 0;
      $$0$i64 = $209;
     }
     $235 = HEAP32[$152>>2]|0;
     $236 = ($235|0)==(1);
     if (!($236)) {
      $237 = HEAP32[$154>>2]|0;
      $238 = ($237|0)==(0);
      if ($238) {
       $p$1 = $$0$i64;
       break;
      }
      $239 = HEAP32[$184>>2]|0;
      $$014$i$i67 = $239;$$023$i$i68 = $$0$i64;$$05$i$i66 = $237;
      while(1) {
       $240 = (($$05$i$i66) + -1)|0;
       $241 = (($$014$i$i67) + 1|0);
       $242 = HEAP8[$$014$i$i67>>0]|0;
       $243 = (($$023$i$i68) + 1|0);
       HEAP8[$$023$i$i68>>0] = $242;
       $244 = ($240|0)==(0);
       if ($244) {
        break;
       } else {
        $$014$i$i67 = $241;$$023$i$i68 = $243;$$05$i$i66 = $240;
       }
      }
      $scevgep$i$i70 = (($$0$i64) + ($237)|0);
      $p$1 = $scevgep$i$i70;
      break;
     }
     $245 = HEAP32[$184>>2]|0;
     $246 = HEAP32[$154>>2]|0;
     $247 = ($246|0)==(0);
     if ($247) {
      $p$1 = $$0$i64;
      break;
     }
     $248 = HEAP16[$245>>1]|0;
     $249 = ($248<<16>>16)==(-2);
     do {
      if ($249) {
       $250 = (($246) + -1)|0;
       $251 = (($$0$i64) + 1|0);
       HEAP8[$$0$i64>>0] = -1;
       HEAP8[$251>>0] = -2;
       $252 = ($250|0)==(0);
       if ($252) {
        break;
       } else {
        $$010$us$i53$i = $$0$i64;$$pn63$i76 = $245;$259 = $250;
       }
       while(1) {
        $256 = (($$pn63$i76) + 2|0);
        $257 = (($$010$us$i53$i) + 2|0);
        $$pre$i$i77 = HEAP16[$256>>1]|0;
        $extract$t18$i$i78 = $$pre$i$i77&255;
        $extract20$i$i79 = ($$pre$i$i77&65535) >>> 8;
        $extract$t21$i$i80 = $extract20$i$i79&255;
        $258 = (($259) + -1)|0;
        $260 = (($$010$us$i53$i) + 3|0);
        HEAP8[$257>>0] = $extract$t21$i$i80;
        HEAP8[$260>>0] = $extract$t18$i$i78;
        $261 = ($258|0)==(0);
        if ($261) {
         break;
        } else {
         $$010$us$i53$i = $257;$$pn63$i76 = $256;$259 = $258;
        }
       }
      } else {
       $extract$t$i$i74 = $248&255;
       $extract55$i = ($248&65535) >>> 8;
       $extract$t56$i = $extract55$i&255;
       $253 = (($246) + -1)|0;
       $254 = (($$0$i64) + 1|0);
       HEAP8[$$0$i64>>0] = $extract$t$i$i74;
       HEAP8[$254>>0] = $extract$t56$i;
       $255 = ($253|0)==(0);
       if ($255) {
        break;
       } else {
        $$010$i57$i = $$0$i64;$$pn$i82 = $245;$265 = $253;
       }
       while(1) {
        $262 = (($$pn$i82) + 2|0);
        $263 = (($$010$i57$i) + 2|0);
        $$pre12$i$i83 = HEAP16[$262>>1]|0;
        $extract$t13$i$i84 = $$pre12$i$i83&255;
        $extract$i85 = ($$pre12$i$i83&65535) >>> 8;
        $extract$t$i86 = $extract$i85&255;
        $264 = (($265) + -1)|0;
        $266 = (($$010$i57$i) + 3|0);
        HEAP8[$263>>0] = $extract$t13$i$i84;
        HEAP8[$266>>0] = $extract$t$i86;
        $267 = ($264|0)==(0);
        if ($267) {
         break;
        } else {
         $$010$i57$i = $263;$$pn$i82 = $262;$265 = $264;
        }
       }
      }
     } while(0);
     $$pn$i$i88 = $246 << 1;
     $split$i$i89 = (($$0$i64) + ($$pn$i$i88)|0);
     $p$1 = $split$i$i89;
    } else {
     $268 = $144 & -16777216;
     if (!((($268|0) == 0) | (($268|0) == 1459617792))) {
      $409 = (($node2$0115) + 32|0);
      $410 = HEAP32[$409>>2]|0;
      $cond$i$i = ($410|0)==(1);
      $411 = (($node2$0115) + 16|0);
      $412 = HEAP32[$411>>2]|0;
      $413 = ($412|0)!=(0);
      if ($cond$i$i) {
       if ($413) {
        $418 = $412 << 1;
        $419 = (($418) + 13)|0;
        $n$1$i$i = $419;
       } else {
        $n$1$i$i = 11;
       }
       $420 = (($node2$0115) + 28|0);
       $421 = HEAP32[$420>>2]|0;
       $422 = $421 << 1;
       $423 = (($422) + ($n$1$i$i))|0;
       $n$2$i$i = $423;
      } else {
       $414 = (($412) + 12)|0;
       $$$i$i = $413 ? $414 : 11;
       $415 = (($node2$0115) + 28|0);
       $416 = HEAP32[$415>>2]|0;
       $417 = (($416) + ($$$i$i))|0;
       $n$2$i$i = $417;
      }
      $424 = ($n$2$i$i>>>0)>(10);
      if (!($424)) {
       $p$1 = $p$0114;
       break;
      }
      $425 = $144&255;
      $426 = (($p$0114) + 3|0);
      HEAP8[$426>>0] = $425;
      $427 = $144 >>> 8;
      $428 = $427&255;
      $429 = (($p$0114) + 2|0);
      HEAP8[$429>>0] = $428;
      $430 = $144 >>> 16;
      $431 = $430&255;
      $432 = (($p$0114) + 1|0);
      HEAP8[$432>>0] = $431;
      $433 = $144 >>> 24;
      $434 = $433&255;
      HEAP8[$p$0114>>0] = $434;
      $435 = (($p$0114) + 4|0);
      $436 = (($n$2$i$i) + -10)|0;
      $437 = $436&255;
      $438 = (($p$0114) + 7|0);
      HEAP8[$438>>0] = $437;
      $439 = $436 >>> 8;
      $440 = $439&255;
      $441 = (($p$0114) + 6|0);
      HEAP8[$441>>0] = $440;
      $442 = $436 >>> 16;
      $443 = $442&255;
      $444 = (($p$0114) + 5|0);
      HEAP8[$444>>0] = $443;
      $445 = $436 >>> 24;
      $446 = $445&255;
      HEAP8[$435>>0] = $446;
      $447 = (($p$0114) + 8|0);
      $448 = (($p$0114) + 9|0);
      HEAP8[$447>>0] = 0;
      $449 = (($p$0114) + 10|0);
      HEAP8[$448>>0] = 0;
      $450 = (($node2$0115) + 24|0);
      $451 = HEAP32[$409>>2]|0;
      $452 = ($451|0)==(1);
      $453 = $452&1;
      $454 = (($p$0114) + 11|0);
      HEAP8[$449>>0] = $453;
      $455 = HEAP32[$411>>2]|0;
      $456 = ($455|0)==(0);
      do {
       if ($456) {
        $$0$i = $454;
       } else {
        $457 = (($node2$0115) + 20|0);
        $458 = HEAP32[$457>>2]|0;
        $459 = ($458|0)==(1);
        $460 = (($node2$0115) + 12|0);
        if (!($459)) {
         $461 = HEAP32[$460>>2]|0;
         $$014$i35$i = $461;$$023$i36$i = $454;$$05$i34$i = $455;
         while(1) {
          $462 = (($$05$i34$i) + -1)|0;
          $463 = (($$014$i35$i) + 1|0);
          $464 = HEAP8[$$014$i35$i>>0]|0;
          $465 = (($$023$i36$i) + 1|0);
          HEAP8[$$023$i36$i>>0] = $464;
          $466 = ($462|0)==(0);
          if ($466) {
           break;
          } else {
           $$014$i35$i = $463;$$023$i36$i = $465;$$05$i34$i = $462;
          }
         }
         $$sum$i = (($455) + 11)|0;
         $scevgep$i38$i = (($p$0114) + ($$sum$i)|0);
         $scevgep$i38$sum$i = (($455) + 12)|0;
         $467 = (($p$0114) + ($scevgep$i38$sum$i)|0);
         HEAP8[$scevgep$i38$i>>0] = 0;
         $$0$i = $467;
         break;
        }
        $468 = HEAP32[$460>>2]|0;
        $469 = HEAP16[$468>>1]|0;
        $470 = ($469<<16>>16)==(-2);
        do {
         if ($470) {
          $471 = (($455) + -1)|0;
          $472 = (($p$0114) + 12|0);
          HEAP8[$454>>0] = -1;
          HEAP8[$472>>0] = -2;
          $473 = ($471|0)==(0);
          if ($473) {
           break;
          } else {
           $$010$us$i957$i = $454;$$pn64$i = $468;$480 = $471;
          }
          while(1) {
           $477 = (($$pn64$i) + 2|0);
           $478 = (($$010$us$i957$i) + 2|0);
           $$pre$i13$i = HEAP16[$477>>1]|0;
           $extract$t18$i14$i = $$pre$i13$i&255;
           $extract20$i15$i = ($$pre$i13$i&65535) >>> 8;
           $extract$t21$i16$i = $extract20$i15$i&255;
           $479 = (($480) + -1)|0;
           $481 = (($$010$us$i957$i) + 3|0);
           HEAP8[$478>>0] = $extract$t21$i16$i;
           HEAP8[$481>>0] = $extract$t18$i14$i;
           $482 = ($479|0)==(0);
           if ($482) {
            break;
           } else {
            $$010$us$i957$i = $478;$$pn64$i = $477;$480 = $479;
           }
          }
         } else {
          $extract$t$i3$i = $469&255;
          $extract4559$i = ($469&65535) >>> 8;
          $extract$t4660$i = $extract4559$i&255;
          $474 = (($455) + -1)|0;
          $475 = (($p$0114) + 12|0);
          HEAP8[$454>>0] = $extract$t$i3$i;
          HEAP8[$475>>0] = $extract$t4660$i;
          $476 = ($474|0)==(0);
          if ($476) {
           break;
          } else {
           $$010$i2061$i = $454;$$pn63$i = $468;$486 = $474;
          }
          while(1) {
           $483 = (($$pn63$i) + 2|0);
           $484 = (($$010$i2061$i) + 2|0);
           $$pre12$i24$i = HEAP16[$483>>1]|0;
           $extract$t13$i25$i = $$pre12$i24$i&255;
           $extract45$i = ($$pre12$i24$i&65535) >>> 8;
           $extract$t46$i = $extract45$i&255;
           $485 = (($486) + -1)|0;
           $487 = (($$010$i2061$i) + 3|0);
           HEAP8[$484>>0] = $extract$t13$i25$i;
           HEAP8[$487>>0] = $extract$t46$i;
           $488 = ($485|0)==(0);
           if ($488) {
            break;
           } else {
            $$010$i2061$i = $484;$$pn63$i = $483;$486 = $485;
           }
          }
         }
        } while(0);
        $$pn$i29$i = $455 << 1;
        $$sum49$i = (($$pn$i29$i) + 11)|0;
        $split$i30$i = (($p$0114) + ($$sum49$i)|0);
        $split$i30$sum$i = (($$pn$i29$i) + 12)|0;
        $489 = (($p$0114) + ($split$i30$sum$i)|0);
        HEAP8[$split$i30$i>>0] = 0;
        $split$i30$sum50$i = (($$pn$i29$i) + 13)|0;
        $490 = (($p$0114) + ($split$i30$sum50$i)|0);
        HEAP8[$489>>0] = 0;
        $$0$i = $490;
       }
      } while(0);
      $491 = HEAP32[$409>>2]|0;
      $492 = ($491|0)==(1);
      if (!($492)) {
       $493 = (($node2$0115) + 28|0);
       $494 = HEAP32[$493>>2]|0;
       $495 = ($494|0)==(0);
       if ($495) {
        $p$1 = $$0$i;
        break;
       }
       $496 = HEAP32[$450>>2]|0;
       $$014$i$i = $496;$$023$i$i = $$0$i;$$05$i$i = $494;
       while(1) {
        $497 = (($$05$i$i) + -1)|0;
        $498 = (($$014$i$i) + 1|0);
        $499 = HEAP8[$$014$i$i>>0]|0;
        $500 = (($$023$i$i) + 1|0);
        HEAP8[$$023$i$i>>0] = $499;
        $501 = ($497|0)==(0);
        if ($501) {
         break;
        } else {
         $$014$i$i = $498;$$023$i$i = $500;$$05$i$i = $497;
        }
       }
       $scevgep$i$i = (($$0$i) + ($494)|0);
       $p$1 = $scevgep$i$i;
       break;
      }
      $502 = HEAP32[$450>>2]|0;
      $503 = (($node2$0115) + 28|0);
      $504 = HEAP32[$503>>2]|0;
      $505 = ($504|0)==(0);
      if ($505) {
       $p$1 = $$0$i;
       break;
      }
      $506 = HEAP16[$502>>1]|0;
      $507 = ($506<<16>>16)==(-2);
      do {
       if ($507) {
        $508 = (($504) + -1)|0;
        $509 = (($$0$i) + 1|0);
        HEAP8[$$0$i>>0] = -1;
        HEAP8[$509>>0] = -2;
        $510 = ($508|0)==(0);
        if ($510) {
         break;
        } else {
         $$010$us$i52$i = $$0$i;$$pn62$i = $502;$517 = $508;
        }
        while(1) {
         $514 = (($$pn62$i) + 2|0);
         $515 = (($$010$us$i52$i) + 2|0);
         $$pre$i$i = HEAP16[$514>>1]|0;
         $extract$t18$i$i = $$pre$i$i&255;
         $extract20$i$i = ($$pre$i$i&65535) >>> 8;
         $extract$t21$i$i = $extract20$i$i&255;
         $516 = (($517) + -1)|0;
         $518 = (($$010$us$i52$i) + 3|0);
         HEAP8[$515>>0] = $extract$t21$i$i;
         HEAP8[$518>>0] = $extract$t18$i$i;
         $519 = ($516|0)==(0);
         if ($519) {
          break;
         } else {
          $$010$us$i52$i = $515;$$pn62$i = $514;$517 = $516;
         }
        }
       } else {
        $extract$t$i$i = $506&255;
        $extract54$i = ($506&65535) >>> 8;
        $extract$t55$i = $extract54$i&255;
        $511 = (($504) + -1)|0;
        $512 = (($$0$i) + 1|0);
        HEAP8[$$0$i>>0] = $extract$t$i$i;
        HEAP8[$512>>0] = $extract$t55$i;
        $513 = ($511|0)==(0);
        if ($513) {
         break;
        } else {
         $$010$i56$i = $$0$i;$$pn$i = $502;$523 = $511;
        }
        while(1) {
         $520 = (($$pn$i) + 2|0);
         $521 = (($$010$i56$i) + 2|0);
         $$pre12$i$i = HEAP16[$520>>1]|0;
         $extract$t13$i$i = $$pre12$i$i&255;
         $extract$i = ($$pre12$i$i&65535) >>> 8;
         $extract$t$i = $extract$i&255;
         $522 = (($523) + -1)|0;
         $524 = (($$010$i56$i) + 3|0);
         HEAP8[$521>>0] = $extract$t13$i$i;
         HEAP8[$524>>0] = $extract$t$i;
         $525 = ($522|0)==(0);
         if ($525) {
          break;
         } else {
          $$010$i56$i = $521;$$pn$i = $520;$523 = $522;
         }
        }
       }
      } while(0);
      $$pn$i$i = $504 << 1;
      $split$i$i = (($$0$i) + ($$pn$i$i)|0);
      $p$1 = $split$i$i;
      break;
     }
     $269 = (($node2$0115) + 16|0);
     $270 = HEAP32[$269>>2]|0;
     $271 = ($270|0)==(0);
     do {
      if ($271) {
       $n$0$i$i = 10;
      } else {
       $272 = (($node2$0115) + 20|0);
       $273 = HEAP32[$272>>2]|0;
       $cond$i$i6 = ($273|0)==(1);
       if ($cond$i$i6) {
        $275 = $270 << 1;
        $276 = (($275) + 13)|0;
        $n$0$i$i = $276;
        break;
       } else {
        $274 = (($270) + 12)|0;
        $n$0$i$i = $274;
        break;
       }
      }
     } while(0);
     $277 = (($node2$0115) + 28|0);
     $278 = HEAP32[$277>>2]|0;
     $279 = ($278|0)==(0);
     do {
      if ($279) {
       $n$1$i$i7 = $n$0$i$i;
      } else {
       $280 = (($node2$0115) + 32|0);
       $281 = HEAP32[$280>>2]|0;
       $cond1$i$i = ($281|0)==(1);
       if ($cond1$i$i) {
        $283 = (($n$0$i$i) + -1)|0;
        $284 = (($283) + ($278))|0;
        $n$1$i$i7 = $284;
        break;
       } else {
        $282 = (($278) + ($n$0$i$i))|0;
        $n$1$i$i7 = $282;
        break;
       }
      }
     } while(0);
     $285 = ($n$1$i$i7>>>0)>(10);
     if (!($285)) {
      $p$1 = $p$0114;
      break;
     }
     $286 = $144&255;
     $287 = (($p$0114) + 3|0);
     HEAP8[$287>>0] = $286;
     $288 = $144 >>> 8;
     $289 = $288&255;
     $290 = (($p$0114) + 2|0);
     HEAP8[$290>>0] = $289;
     $291 = $144 >>> 16;
     $292 = $291&255;
     $293 = (($p$0114) + 1|0);
     HEAP8[$293>>0] = $292;
     $294 = $144 >>> 24;
     $295 = $294&255;
     HEAP8[$p$0114>>0] = $295;
     $296 = (($p$0114) + 4|0);
     $297 = (($n$1$i$i7) + -10)|0;
     $298 = $297&255;
     $299 = (($p$0114) + 7|0);
     HEAP8[$299>>0] = $298;
     $300 = $297 >>> 8;
     $301 = $300&255;
     $302 = (($p$0114) + 6|0);
     HEAP8[$302>>0] = $301;
     $303 = $297 >>> 16;
     $304 = $303&255;
     $305 = (($p$0114) + 5|0);
     HEAP8[$305>>0] = $304;
     $306 = $297 >>> 24;
     $307 = $306&255;
     HEAP8[$296>>0] = $307;
     $308 = (($p$0114) + 8|0);
     $309 = (($p$0114) + 9|0);
     HEAP8[$308>>0] = 0;
     $310 = (($p$0114) + 10|0);
     HEAP8[$309>>0] = 0;
     $311 = HEAP32[$269>>2]|0;
     $312 = ($311|0)==(0);
     do {
      if ($312) {
       $$0$i25 = $310;
      } else {
       $313 = (($node2$0115) + 20|0);
       $314 = HEAP32[$313>>2]|0;
       $315 = ($314|0)==(1);
       $316 = $315&1;
       $317 = (($p$0114) + 11|0);
       HEAP8[$310>>0] = $316;
       $318 = HEAP32[$313>>2]|0;
       $319 = ($318|0)==(1);
       $320 = (($node2$0115) + 12|0);
       if (!($319)) {
        $321 = HEAP32[$269>>2]|0;
        $322 = ($321|0)==(0);
        if ($322) {
         $$02$lcssa$i13$i = $317;
        } else {
         $323 = HEAP32[$320>>2]|0;
         $$014$i8$i = $323;$$023$i9$i = $317;$$05$i7$i = $321;
         while(1) {
          $324 = (($$05$i7$i) + -1)|0;
          $325 = (($$014$i8$i) + 1|0);
          $326 = HEAP8[$$014$i8$i>>0]|0;
          $327 = (($$023$i9$i) + 1|0);
          HEAP8[$$023$i9$i>>0] = $326;
          $328 = ($324|0)==(0);
          if ($328) {
           break;
          } else {
           $$014$i8$i = $325;$$023$i9$i = $327;$$05$i7$i = $324;
          }
         }
         $$sum$i8 = (($321) + 11)|0;
         $scevgep$i11$i = (($p$0114) + ($$sum$i8)|0);
         $$02$lcssa$i13$i = $scevgep$i11$i;
        }
        $329 = (($$02$lcssa$i13$i) + 1|0);
        HEAP8[$$02$lcssa$i13$i>>0] = 0;
        $$0$i25 = $329;
        break;
       }
       $330 = HEAP32[$320>>2]|0;
       $331 = HEAP32[$269>>2]|0;
       $332 = ($331|0)==(0);
       if ($332) {
        $$1$i6$i = $317;
       } else {
        $333 = HEAP16[$330>>1]|0;
        $334 = ($333<<16>>16)==(-2);
        do {
         if ($334) {
          $335 = (($331) + -1)|0;
          $336 = (($p$0114) + 12|0);
          HEAP8[$317>>0] = -1;
          HEAP8[$336>>0] = -2;
          $337 = ($335|0)==(0);
          if ($337) {
           break;
          } else {
           $$010$us$i29$i = $317;$$pn34$i = $330;$344 = $335;
          }
          while(1) {
           $341 = (($$pn34$i) + 2|0);
           $342 = (($$010$us$i29$i) + 2|0);
           $$pre$i$i12 = HEAP16[$341>>1]|0;
           $extract$t18$i$i13 = $$pre$i$i12&255;
           $extract20$i$i14 = ($$pre$i$i12&65535) >>> 8;
           $extract$t21$i$i15 = $extract20$i$i14&255;
           $343 = (($344) + -1)|0;
           $345 = (($$010$us$i29$i) + 3|0);
           HEAP8[$342>>0] = $extract$t21$i$i15;
           HEAP8[$345>>0] = $extract$t18$i$i13;
           $346 = ($343|0)==(0);
           if ($346) {
            break;
           } else {
            $$010$us$i29$i = $342;$$pn34$i = $341;$344 = $343;
           }
          }
         } else {
          $extract$t$i$i10 = $333&255;
          $extract31$i = ($333&65535) >>> 8;
          $extract$t32$i = $extract31$i&255;
          $338 = (($331) + -1)|0;
          $339 = (($p$0114) + 12|0);
          HEAP8[$317>>0] = $extract$t$i$i10;
          HEAP8[$339>>0] = $extract$t32$i;
          $340 = ($338|0)==(0);
          if ($340) {
           break;
          } else {
           $$010$i33$i = $317;$$pn$i17 = $330;$350 = $338;
          }
          while(1) {
           $347 = (($$pn$i17) + 2|0);
           $348 = (($$010$i33$i) + 2|0);
           $$pre12$i$i18 = HEAP16[$347>>1]|0;
           $extract$t13$i$i19 = $$pre12$i$i18&255;
           $extract$i20 = ($$pre12$i$i18&65535) >>> 8;
           $extract$t$i21 = $extract$i20&255;
           $349 = (($350) + -1)|0;
           $351 = (($$010$i33$i) + 3|0);
           HEAP8[$348>>0] = $extract$t13$i$i19;
           HEAP8[$351>>0] = $extract$t$i21;
           $352 = ($349|0)==(0);
           if ($352) {
            break;
           } else {
            $$010$i33$i = $348;$$pn$i17 = $347;$350 = $349;
           }
          }
         }
        } while(0);
        $$pn$i$i23 = $331 << 1;
        $$sum19$i = (($$pn$i$i23) + 11)|0;
        $split$i5$i = (($p$0114) + ($$sum19$i)|0);
        $$1$i6$i = $split$i5$i;
       }
       $353 = (($$1$i6$i) + 1|0);
       HEAP8[$$1$i6$i>>0] = 0;
       $354 = (($$1$i6$i) + 2|0);
       HEAP8[$353>>0] = 0;
       $$0$i25 = $354;
      }
     } while(0);
     $355 = (($node2$0115) + 24|0);
     $356 = (($node2$0115) + 32|0);
     $357 = HEAP32[$356>>2]|0;
     $358 = ($357|0)==(1);
     if (!($358)) {
      $359 = HEAP32[$277>>2]|0;
      $360 = ($359|0)==(0);
      if ($360) {
       $p$1 = $$0$i25;
       break;
      }
      $361 = HEAP32[$355>>2]|0;
      $$014$i$i28 = $361;$$023$i$i29 = $$0$i25;$$05$i$i27 = $359;
      while(1) {
       $362 = (($$05$i$i27) + -1)|0;
       $363 = (($$014$i$i28) + 1|0);
       $364 = HEAP8[$$014$i$i28>>0]|0;
       $365 = (($$023$i$i29) + 1|0);
       HEAP8[$$023$i$i29>>0] = $364;
       $366 = ($362|0)==(0);
       if ($366) {
        break;
       } else {
        $$014$i$i28 = $363;$$023$i$i29 = $365;$$05$i$i27 = $362;
       }
      }
      $scevgep$i$i31 = (($$0$i25) + ($359)|0);
      $p$1 = $scevgep$i$i31;
      break;
     }
     $367 = HEAP32[$355>>2]|0;
     $368 = HEAP32[$277>>2]|0;
     $369 = ($368|0)==(0);
     if ($369) {
      $p$1 = $$0$i25;
      break;
     }
     $370 = HEAP16[$367>>1]|0;
     if ((($370<<16>>16) == -257) | (($370<<16>>16) == -2)) {
      $372 = (($367) + 2|0);
      $373 = (($368) + -1)|0;
      $374 = (($368) + -2)|0;
      $375 = ($373|0)==(0);
      if ($375) {
       $p$1 = $$0$i25;
       break;
      } else {
       $$01$ph$i16$i = $372;$$02$ph$i15$i = $373;$381 = $374;
      }
     } else {
      $371 = (($368) + -1)|0;
      $$01$ph$i16$i = $367;$$02$ph$i15$i = $368;$381 = $371;
     }
     $376 = ($370<<16>>16)==(-2);
     $377 = HEAP16[$$01$ph$i16$i>>1]|0;
     do {
      if ($376) {
       $382 = $377&65535;
       $383 = $382 << 8;
       $384 = $382 >>> 8;
       $385 = $383 | $384;
       $386 = $385&65535;
       $$0$i3$off$us$i20$i = (($386) + -32)<<16>>16;
       $387 = ($$0$i3$off$us$i20$i&65535)>(223);
       $388 = $384&255;
       $$$i21$i = $387 ? 32 : $388;
       HEAP8[$$0$i25>>0] = $$$i21$i;
       $389 = ($381|0)==(0);
       if ($389) {
        break;
       } else {
        $$015$us$i23$i = $$01$ph$i16$i;$$06$us$i22$i = $$0$i25;$392 = $381;
       }
       while(1) {
        $390 = (($$015$us$i23$i) + 2|0);
        $391 = (($392) + -1)|0;
        $$0$be$us$i$i = (($$06$us$i22$i) + 1|0);
        $393 = HEAP16[$390>>1]|0;
        $394 = $393&65535;
        $395 = $394 << 8;
        $396 = $394 >>> 8;
        $397 = $395 | $396;
        $398 = $397&65535;
        $$0$i3$off$us$i$i = (($398) + -32)<<16>>16;
        $399 = ($$0$i3$off$us$i$i&65535)>(223);
        $400 = $396&255;
        $$$i$i35 = $399 ? 32 : $400;
        HEAP8[$$0$be$us$i$i>>0] = $$$i$i35;
        $401 = ($391|0)==(0);
        if ($401) {
         break;
        } else {
         $$015$us$i23$i = $390;$$06$us$i22$i = $$0$be$us$i$i;$392 = $391;
        }
       }
      } else {
       $$0$i3$off$i25$i = (($377) + -32)<<16>>16;
       $378 = ($$0$i3$off$i25$i&65535)>(223);
       $379 = $377&255;
       $$9$i26$i = $378 ? 32 : $379;
       HEAP8[$$0$i25>>0] = $$9$i26$i;
       $380 = ($381|0)==(0);
       if ($380) {
        break;
       } else {
        $$015$i28$i = $$01$ph$i16$i;$$06$i27$i = $$0$i25;$404 = $381;
       }
       while(1) {
        $402 = (($$015$i28$i) + 2|0);
        $403 = (($404) + -1)|0;
        $$0$be$i$i = (($$06$i27$i) + 1|0);
        $405 = HEAP16[$402>>1]|0;
        $$0$i3$off$i$i = (($405) + -32)<<16>>16;
        $406 = ($$0$i3$off$i$i&65535)>(223);
        $407 = $405&255;
        $$9$i$i = $406 ? 32 : $407;
        HEAP8[$$0$be$i$i>>0] = $$9$i$i;
        $408 = ($403|0)==(0);
        if ($408) {
         break;
        } else {
         $$015$i28$i = $402;$$06$i27$i = $$0$be$i$i;$404 = $403;
        }
       }
      }
     } while(0);
     $split$i$i36 = (($$0$i25) + ($$02$ph$i15$i)|0);
     $p$1 = $split$i$i36;
    }
   } while(0);
   $526 = HEAP32[$node2$0115>>2]|0;
   $527 = ($526|0)==(0|0);
   if ($527) {
    $p$2 = $p$1;
    break;
   } else {
    $node2$0115 = $526;$p$0114 = $p$1;
   }
  }
 }
 $528 = ($albumart_mime$1|0)==(0|0);
 if ($528) {
  $p$3 = $p$2;
 } else {
  $529 = HEAP32[$49>>2]|0;
  $530 = (($2) + 85732|0);
  $531 = HEAP32[$530>>2]|0;
  $532 = ($529|0)==(0|0);
  $533 = ($531|0)==(0);
  $or$cond4$i = $532 | $533;
  if ($or$cond4$i) {
   $p$3 = $p$2;
  } else {
   $534 = (($p$2) + 3|0);
   HEAP8[$534>>0] = 67;
   $535 = (($p$2) + 2|0);
   HEAP8[$535>>0] = 73;
   $536 = (($p$2) + 1|0);
   HEAP8[$536>>0] = 80;
   HEAP8[$p$2>>0] = 65;
   $537 = (($p$2) + 4|0);
   $538 = (_strlen(($albumart_mime$1|0))|0);
   $539 = (($531) + 4)|0;
   $540 = (($539) + ($538))|0;
   $541 = $540&255;
   $542 = (($p$2) + 7|0);
   HEAP8[$542>>0] = $541;
   $543 = $540 >>> 8;
   $544 = $543&255;
   $545 = (($p$2) + 6|0);
   HEAP8[$545>>0] = $544;
   $546 = $540 >>> 16;
   $547 = $546&255;
   $548 = (($p$2) + 5|0);
   HEAP8[$548>>0] = $547;
   $549 = $540 >>> 24;
   $550 = $549&255;
   HEAP8[$537>>0] = $550;
   $551 = (($p$2) + 8|0);
   $552 = (($p$2) + 9|0);
   HEAP8[$551>>0] = 0;
   $553 = (($p$2) + 10|0);
   HEAP8[$552>>0] = 0;
   $554 = (($p$2) + 11|0);
   HEAP8[$553>>0] = 0;
   $555 = HEAP8[$albumart_mime$1>>0]|0;
   $556 = ($555<<24>>24)==(0);
   if ($556) {
    $$03$lcssa$i = $554;
   } else {
    $$029$i = $albumart_mime$1;$$038$i = $554;$559 = $555;
    while(1) {
     $557 = (($$029$i) + 1|0);
     $558 = (($$038$i) + 1|0);
     HEAP8[$$038$i>>0] = $559;
     $560 = HEAP8[$557>>0]|0;
     $561 = ($560<<24>>24)==(0);
     if ($561) {
      $$03$lcssa$i = $558;
      break;
     } else {
      $$029$i = $557;$$038$i = $558;$559 = $560;
     }
    }
   }
   $562 = (($$03$lcssa$i) + 1|0);
   HEAP8[$$03$lcssa$i>>0] = 0;
   $563 = (($$03$lcssa$i) + 2|0);
   HEAP8[$562>>0] = 0;
   $564 = (($$03$lcssa$i) + 3|0);
   HEAP8[$563>>0] = 0;
   $$016$i = $529;$$07$i = $531;$$15$i = $564;
   while(1) {
    $565 = (($$07$i) + -1)|0;
    $566 = (($$016$i) + 1|0);
    $567 = HEAP8[$$016$i>>0]|0;
    $568 = (($$15$i) + 1|0);
    HEAP8[$$15$i>>0] = $567;
    $569 = ($565|0)==(0);
    if ($569) {
     break;
    } else {
     $$016$i = $566;$$07$i = $565;$$15$i = $568;
    }
   }
   $570 = (($531) + 3)|0;
   $scevgep$i = (($$03$lcssa$i) + ($570)|0);
   $p$3 = $scevgep$i;
  }
 }
 $571 = $p$3;
 $572 = $buffer;
 $573 = (($tag_size$4) + ($572))|0;
 $574 = (($573) - ($571))|0;
 _memset(($p$3|0),0,($574|0))|0;
 $$0 = $tag_size$4;
 STACKTOP = sp;return ($$0|0);
}
function _id3tag_write_v2($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0, $$idx1 = 0, $$idx1$val = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($gfp) + 288|0);
 $1 = HEAP32[$0>>2]|0;
 $$idx1 = (($1) + 85696|0);
 $$idx1$val = HEAP32[$$idx1>>2]|0;
 $2 = $$idx1$val & 5;
 $3 = ($2|0)==(1);
 if (!($3)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (_lame_get_id3v2_tag($gfp,0,0)|0);
 $5 = (_calloc($4,1)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = (_lame_get_id3v2_tag($gfp,$5,$4)|0);
 $8 = ($7>>>0)>($4>>>0);
 if ($8) {
  _free($5);
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = ($7|0)==(0);
 if (!($9)) {
  $i$03 = 0;
  while(1) {
   $10 = (($5) + ($i$03)|0);
   $11 = HEAP8[$10>>0]|0;
   _add_dummy_byte($1,$11,1);
   $12 = (($i$03) + 1)|0;
   $exitcond = ($12|0)==($7|0);
   if ($exitcond) {
    break;
   } else {
    $i$03 = $12;
   }
  }
 }
 _free($5);
 $$0 = $7;
 STACKTOP = sp;return ($$0|0);
}
function _lame_get_id3v1_tag($gfp,$buffer,$size) {
 $gfp = $gfp|0;
 $buffer = $buffer|0;
 $size = $size|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$0$lcssa$i11 = 0, $$0$lcssa$i21 = 0, $$0$lcssa$i31 = 0, $$0$lcssa$i41 = 0, $$0$ph10$i = 0, $$0$ph10$i14 = 0, $$0$ph10$i24 = 0, $$0$ph10$i34 = 0, $$0$ph10$i4 = 0, $$02$ph8$i = 0, $$02$ph8$i15 = 0, $$02$ph8$i25 = 0, $$02$ph8$i35 = 0, $$02$ph8$i5 = 0, $$05$i = 0, $$05$i18 = 0, $$05$i28 = 0, $$05$i38 = 0;
 var $$05$i8 = 0, $$idx2 = 0, $$idx2$val = 0, $$in = 0, $$in$i = 0, $$in$i13 = 0, $$in$i23 = 0, $$in$i3 = 0, $$in$i33 = 0, $$in185 = 0, $$in186 = 0, $$in187 = 0, $$in188 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $or$cond = 0, $p$0 = 0;
 var $scevgep = 0, $scevgep134 = 0, $scevgep147 = 0, $scevgep160 = 0, $scevgep173 = 0, $vararg_buffer = 0, $year = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $year = sp + 4|0;
 $0 = ($gfp|0)==(0|0);
 if ($0) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = ($size>>>0)<(128);
 if ($1) {
  $$0 = 128;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($gfp) + 288|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 $5 = ($buffer|0)==(0|0);
 $or$cond = $4 | $5;
 if ($or$cond) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $$idx2 = (($3) + 85696|0);
 $$idx2$val = HEAP32[$$idx2>>2]|0;
 $6 = $$idx2$val & 9;
 $7 = ($6|0)==(1);
 if (!($7)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = $$idx2$val << 1;
 $9 = $8 & 32;
 $10 = (($buffer) + 1|0);
 HEAP8[$buffer>>0] = 84;
 $11 = (($buffer) + 2|0);
 HEAP8[$10>>0] = 65;
 $12 = (($buffer) + 3|0);
 HEAP8[$11>>0] = 71;
 $13 = (($3) + 85704|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $9&255;
 $$0$ph10$i34 = $12;$$02$ph8$i35 = $14;$$in$i33 = 30;
 L13: while(1) {
  $16 = ($$02$ph8$i35|0)==(0|0);
  if ($16) {
   label = 7;
   break;
  } else {
   $$05$i38 = $$0$ph10$i34;$$in = $$in$i33;
  }
  while(1) {
   $17 = (($$in) + -1)|0;
   $18 = HEAP8[$$02$ph8$i35>>0]|0;
   $19 = ($18<<24>>24)==(0);
   if (!($19)) {
    break;
   }
   $23 = (($$05$i38) + 1|0);
   HEAP8[$$05$i38>>0] = $15;
   $24 = ($17|0)==(0);
   if ($24) {
    $$0$lcssa$i41 = $23;
    break L13;
   } else {
    $$05$i38 = $23;$$in = $17;
   }
  }
  $20 = (($$02$ph8$i35) + 1|0);
  $21 = (($$05$i38) + 1|0);
  HEAP8[$$05$i38>>0] = $18;
  $22 = ($17|0)==(0);
  if ($22) {
   $$0$lcssa$i41 = $21;
   break;
  } else {
   $$0$ph10$i34 = $21;$$02$ph8$i35 = $20;$$in$i33 = $17;
  }
 }
 if ((label|0) == 7) {
  _memset(($$0$ph10$i34|0),($15|0),($$in$i33|0))|0;
  $scevgep173 = (($$0$ph10$i34) + ($$in$i33)|0);
  $$0$lcssa$i41 = $scevgep173;
 }
 $25 = (($3) + 85708|0);
 $26 = HEAP32[$25>>2]|0;
 $$0$ph10$i24 = $$0$lcssa$i41;$$02$ph8$i25 = $26;$$in$i23 = 30;
 L22: while(1) {
  $27 = ($$02$ph8$i25|0)==(0|0);
  if ($27) {
   label = 13;
   break;
  } else {
   $$05$i28 = $$0$ph10$i24;$$in185 = $$in$i23;
  }
  while(1) {
   $28 = (($$in185) + -1)|0;
   $29 = HEAP8[$$02$ph8$i25>>0]|0;
   $30 = ($29<<24>>24)==(0);
   if (!($30)) {
    break;
   }
   $34 = (($$05$i28) + 1|0);
   HEAP8[$$05$i28>>0] = $15;
   $35 = ($28|0)==(0);
   if ($35) {
    $$0$lcssa$i31 = $34;
    break L22;
   } else {
    $$05$i28 = $34;$$in185 = $28;
   }
  }
  $31 = (($$02$ph8$i25) + 1|0);
  $32 = (($$05$i28) + 1|0);
  HEAP8[$$05$i28>>0] = $29;
  $33 = ($28|0)==(0);
  if ($33) {
   $$0$lcssa$i31 = $32;
   break;
  } else {
   $$0$ph10$i24 = $32;$$02$ph8$i25 = $31;$$in$i23 = $28;
  }
 }
 if ((label|0) == 13) {
  _memset(($$0$ph10$i24|0),($15|0),($$in$i23|0))|0;
  $scevgep160 = (($$0$ph10$i24) + ($$in$i23)|0);
  $$0$lcssa$i31 = $scevgep160;
 }
 $36 = (($3) + 85712|0);
 $37 = HEAP32[$36>>2]|0;
 $$0$ph10$i14 = $$0$lcssa$i31;$$02$ph8$i15 = $37;$$in$i13 = 30;
 L31: while(1) {
  $38 = ($$02$ph8$i15|0)==(0|0);
  if ($38) {
   label = 19;
   break;
  } else {
   $$05$i18 = $$0$ph10$i14;$$in186 = $$in$i13;
  }
  while(1) {
   $39 = (($$in186) + -1)|0;
   $40 = HEAP8[$$02$ph8$i15>>0]|0;
   $41 = ($40<<24>>24)==(0);
   if (!($41)) {
    break;
   }
   $45 = (($$05$i18) + 1|0);
   HEAP8[$$05$i18>>0] = $15;
   $46 = ($39|0)==(0);
   if ($46) {
    $$0$lcssa$i21 = $45;
    break L31;
   } else {
    $$05$i18 = $45;$$in186 = $39;
   }
  }
  $42 = (($$02$ph8$i15) + 1|0);
  $43 = (($$05$i18) + 1|0);
  HEAP8[$$05$i18>>0] = $40;
  $44 = ($39|0)==(0);
  if ($44) {
   $$0$lcssa$i21 = $43;
   break;
  } else {
   $$0$ph10$i14 = $43;$$02$ph8$i15 = $42;$$in$i13 = $39;
  }
 }
 if ((label|0) == 19) {
  _memset(($$0$ph10$i14|0),($15|0),($$in$i13|0))|0;
  $scevgep147 = (($$0$ph10$i14) + ($$in$i13)|0);
  $$0$lcssa$i21 = $scevgep147;
 }
 $47 = (($3) + 85700|0);
 $48 = HEAP32[$47>>2]|0;
 HEAP32[$vararg_buffer>>2] = $48;
 (_sprintf($year,7632,$vararg_buffer)|0);
 $49 = HEAP32[$47>>2]|0;
 $50 = ($49|0)!=(0);
 $51 = $50 ? $year : 0;
 $$0$ph10$i4 = $$0$lcssa$i21;$$02$ph8$i5 = $51;$$in$i3 = 4;
 L40: while(1) {
  $52 = ($$02$ph8$i5|0)==(0|0);
  if ($52) {
   label = 25;
   break;
  } else {
   $$05$i8 = $$0$ph10$i4;$$in187 = $$in$i3;
  }
  while(1) {
   $53 = (($$in187) + -1)|0;
   $54 = HEAP8[$$02$ph8$i5>>0]|0;
   $55 = ($54<<24>>24)==(0);
   if (!($55)) {
    break;
   }
   $59 = (($$05$i8) + 1|0);
   HEAP8[$$05$i8>>0] = $15;
   $60 = ($53|0)==(0);
   if ($60) {
    $$0$lcssa$i11 = $59;
    break L40;
   } else {
    $$05$i8 = $59;$$in187 = $53;
   }
  }
  $56 = (($$02$ph8$i5) + 1|0);
  $57 = (($$05$i8) + 1|0);
  HEAP8[$$05$i8>>0] = $54;
  $58 = ($53|0)==(0);
  if ($58) {
   $$0$lcssa$i11 = $57;
   break;
  } else {
   $$0$ph10$i4 = $57;$$02$ph8$i5 = $56;$$in$i3 = $53;
  }
 }
 if ((label|0) == 25) {
  _memset(($$0$ph10$i4|0),($15|0),($$in$i3|0))|0;
  $scevgep134 = (($$0$ph10$i4) + ($$in$i3)|0);
  $$0$lcssa$i11 = $scevgep134;
 }
 $61 = (($3) + 85716|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = (($3) + 85720|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = ($64|0)!=(0);
 $66 = $65 ? 28 : 30;
 $$0$ph10$i = $$0$lcssa$i11;$$02$ph8$i = $62;$$in$i = $66;
 L49: while(1) {
  $67 = ($$02$ph8$i|0)==(0|0);
  if ($67) {
   label = 31;
   break;
  } else {
   $$05$i = $$0$ph10$i;$$in188 = $$in$i;
  }
  while(1) {
   $68 = (($$in188) + -1)|0;
   $69 = HEAP8[$$02$ph8$i>>0]|0;
   $70 = ($69<<24>>24)==(0);
   if (!($70)) {
    break;
   }
   $74 = (($$05$i) + 1|0);
   HEAP8[$$05$i>>0] = $15;
   $75 = ($68|0)==(0);
   if ($75) {
    $$0$lcssa$i = $74;
    break L49;
   } else {
    $$05$i = $74;$$in188 = $68;
   }
  }
  $71 = (($$02$ph8$i) + 1|0);
  $72 = (($$05$i) + 1|0);
  HEAP8[$$05$i>>0] = $69;
  $73 = ($68|0)==(0);
  if ($73) {
   $$0$lcssa$i = $72;
   break;
  } else {
   $$0$ph10$i = $72;$$02$ph8$i = $71;$$in$i = $68;
  }
 }
 if ((label|0) == 31) {
  _memset(($$0$ph10$i|0),($15|0),($$in$i|0))|0;
  $scevgep = (($$0$ph10$i) + ($$in$i)|0);
  $$0$lcssa$i = $scevgep;
 }
 $76 = HEAP32[$63>>2]|0;
 $77 = ($76|0)==(0);
 if ($77) {
  $p$0 = $$0$lcssa$i;
 } else {
  $78 = (($$0$lcssa$i) + 1|0);
  HEAP8[$$0$lcssa$i>>0] = 0;
  $79 = HEAP32[$63>>2]|0;
  $80 = $79&255;
  $81 = (($$0$lcssa$i) + 2|0);
  HEAP8[$78>>0] = $80;
  $p$0 = $81;
 }
 $82 = (($3) + 85724|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = $83&255;
 HEAP8[$p$0>>0] = $84;
 $$0 = 128;
 STACKTOP = sp;return ($$0|0);
}
function _id3tag_write_v1($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $exitcond = 0, $i$01 = 0, $or$cond = 0, $tag = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $tag = sp;
 $0 = (($gfp) + 288|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_lame_get_id3v1_tag($gfp,$tag,128)|0);
 $3 = ($2>>>0)>(128);
 $4 = ($2|0)==(0);
 $or$cond = $3 | $4;
 if ($or$cond) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $i$01 = 0;
 }
 while(1) {
  $5 = (($tag) + ($i$01)|0);
  $6 = HEAP8[$5>>0]|0;
  _add_dummy_byte($1,$6,1);
  $7 = (($i$01) + 1)|0;
  $exitcond = ($7|0)==($2|0);
  if ($exitcond) {
   $$0 = $2;
   break;
  } else {
   $i$01 = $7;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _is_lame_global_flags_valid($gfp) {
 $gfp = $gfp|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($gfp|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = HEAP32[$gfp>>2]|0;
  $2 = ($1|0)==(-487877);
  $$ = $2&1;
  $$0 = $$;
 }
 STACKTOP = sp;return ($$0|0);
}
function _is_lame_internal_flags_valid($gfc) {
 $gfc = $gfc|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($gfc|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = HEAP32[$gfc>>2]|0;
  $2 = ($1|0)==(-487877);
  $$ = $2&1;
  $$0 = $$;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_init_params($gfp) {
 $gfp = $gfp|0;
 var $$ = 0, $$$i = 0, $$0 = 0, $$0$i13 = 0, $$1$i = 0, $$10 = 0, $$11 = 0, $$12 = 0, $$30 = 0, $$5 = 0, $$6 = 0, $$9 = 0, $$phi$trans$insert71 = 0, $$pr$i = 0.0, $$pre = 0.0, $$pre$i = 0.0, $$pre$phi87Z2D = 0, $$pre$phi91Z2D = 0, $$pre51 = 0, $$pre52 = 0;
 var $$pre53 = 0, $$pre70 = 0, $$pre72 = 0, $$pre73 = 0, $$pre74 = 0, $$pre75 = 0, $$pre76 = 0, $$pre86 = 0, $$pre90 = 0, $$storemerge = 0, $$storemerge94 = 0, $$suggested_samplefreq$0$i = 0, $$suggested_samplefreq$2$i = 0, $$suggested_samplefreq$4$i = 0, $$suggested_samplefreq$6$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0;
 var $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0;
 var $102 = 0, $1020 = 0.0, $1021 = 0, $1022 = 0, $1023 = 0.0, $1024 = 0.0, $1025 = 0, $1026 = 0, $1027 = 0.0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0.0, $1031 = 0.0, $1032 = 0, $1033 = 0, $1034 = 0.0, $1035 = 0, $1036 = 0, $1037 = 0.0;
 var $1038 = 0.0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0.0, $1042 = 0, $1043 = 0, $1044 = 0.0, $1045 = 0.0, $1046 = 0.0, $1047 = 0, $1048 = 0.0, $1049 = 0, $105 = 0, $1050 = 0.0, $1051 = 0.0, $1052 = 0, $1053 = 0.0, $1054 = 0.0, $1055 = 0;
 var $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0.0, $106 = 0, $1060 = 0.0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0;
 var $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0;
 var $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0.0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0.0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0.0, $186 = 0, $187 = 0.0, $188 = 0.0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0.0;
 var $195 = 0, $196 = 0.0, $197 = 0.0, $198 = 0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0.0, $201 = 0.0, $202 = 0, $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0, $207 = 0, $208 = 0.0, $209 = 0, $21 = 0, $210 = 0, $211 = 0.0;
 var $212 = 0, $213 = 0.0, $214 = 0, $215 = 0.0, $216 = 0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0.0, $224 = 0, $225 = 0.0, $226 = 0.0, $227 = 0.0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0.0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0.0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0.0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0.0, $261 = 0, $262 = 0.0, $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0.0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0.0, $273 = 0, $274 = 0, $275 = 0, $276 = 0.0, $277 = 0, $278 = 0.0, $279 = 0.0, $28 = 0, $280 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0.0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0.0, $293 = 0, $294 = 0.0, $295 = 0.0, $296 = 0.0, $297 = 0.0, $298 = 0.0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0;
 var $302 = 0, $303 = 0.0, $304 = 0.0, $305 = 0, $306 = 0.0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0;
 var $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0;
 var $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0.0;
 var $357 = 0, $358 = 0, $359 = 0.0, $36 = 0, $360 = 0.0, $361 = 0.0, $362 = 0.0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0.0, $368 = 0, $369 = 0, $37 = 0, $370 = 0.0, $371 = 0.0, $372 = 0.0, $373 = 0.0, $374 = 0;
 var $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0;
 var $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0;
 var $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0.0, $428 = 0;
 var $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0.0, $433 = 0, $434 = 0, $435 = 0.0, $436 = 0.0, $437 = 0.0, $438 = 0.0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0.0, $444 = 0, $445 = 0, $446 = 0.0;
 var $447 = 0.0, $448 = 0.0, $449 = 0.0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0.0, $457 = 0.0, $458 = 0.0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0.0;
 var $465 = 0.0, $466 = 0.0, $467 = 0, $468 = 0, $469 = 0.0, $47 = 0, $470 = 0.0, $471 = 0, $472 = 0.0, $473 = 0.0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0.0, $482 = 0.0;
 var $483 = 0.0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0.0, $489 = 0.0, $49 = 0, $490 = 0.0, $491 = 0, $492 = 0.0, $493 = 0.0, $494 = 0.0, $495 = 0.0, $496 = 0, $497 = 0.0, $498 = 0.0, $499 = 0.0, $5 = 0, $50 = 0;
 var $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0.0, $51 = 0, $510 = 0.0, $511 = 0.0, $512 = 0, $513 = 0, $514 = 0.0, $515 = 0.0, $516 = 0, $517 = 0, $518 = 0;
 var $519 = 0.0, $52 = 0, $520 = 0.0, $521 = 0.0, $522 = 0.0, $523 = 0.0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0.0, $533 = 0.0, $534 = 0.0, $535 = 0, $536 = 0.0;
 var $537 = 0.0, $538 = 0.0, $539 = 0.0, $54 = 0, $540 = 0.0, $541 = 0.0, $542 = 0.0, $543 = 0.0, $544 = 0.0, $545 = 0.0, $546 = 0, $547 = 0.0, $548 = 0.0, $549 = 0.0, $55 = 0, $550 = 0.0, $551 = 0.0, $552 = 0.0, $553 = 0.0, $554 = 0.0;
 var $555 = 0.0, $556 = 0, $557 = 0, $558 = 0.0, $559 = 0.0, $56 = 0, $560 = 0.0, $561 = 0.0, $562 = 0.0, $563 = 0, $564 = 0.0, $565 = 0.0, $566 = 0.0, $567 = 0.0, $568 = 0.0, $569 = 0.0, $57 = 0, $570 = 0.0, $571 = 0.0, $572 = 0;
 var $573 = 0, $574 = 0.0, $575 = 0.0, $576 = 0.0, $577 = 0.0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0;
 var $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0;
 var $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0;
 var $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0;
 var $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0;
 var $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0;
 var $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0;
 var $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0.0, $713 = 0, $714 = 0, $715 = 0, $716 = 0;
 var $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0;
 var $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0;
 var $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0;
 var $771 = 0.0, $772 = 0, $773 = 0, $774 = 0.0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0.0, $781 = 0.0, $782 = 0.0, $783 = 0.0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0;
 var $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0;
 var $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0;
 var $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0;
 var $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0.0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0;
 var $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0;
 var $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0;
 var $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0;
 var $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0;
 var $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0.0;
 var $951 = 0.0, $952 = 0.0, $953 = 0.0, $954 = 0.0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0.0, $966 = 0, $967 = 0, $968 = 0, $969 = 0;
 var $97 = 0, $970 = 0, $971 = 0, $972 = 0.0, $973 = 0, $974 = 0, $975 = 0.0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0.0, $982 = 0, $983 = 0.0, $984 = 0, $985 = 0, $986 = 0.0, $987 = 0.0;
 var $988 = 0, $989 = 0.0, $99 = 0, $990 = 0.0, $991 = 0, $992 = 0.0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $band$010$i = 0, $band$16$i = 0, $band$24$i = 0, $exitcond = 0, $exitcond$i = 0, $exitcond13$i = 0, $exitcond14$i = 0;
 var $exitcond45 = 0, $fabsf = 0.0, $fc1$0$i = 0.0, $fc2$0$i = 0.0, $highpass_band$08$i = 0, $highpass_band$1$i = 0, $i$040 = 0, $i$136 = 0, $k$031 = 0, $lowpass_band$0$minband$0$i = 0, $lowpass_band$012$i = 0, $lowpass_band$1$i = 0, $m10$sroa$0$0 = 0.0, $m10$sroa$1$0 = 0.0, $m10$sroa$3$0 = 0.0, $maxband$07$i = 0, $maxband$1$i = 0, $minband$011$i = 0, $minband$1$i = 0, $or$cond$i = 0;
 var $or$cond18$i = 0, $or$cond19$i = 0, $phitmp = 0, $storemerge$i = 0.0, $storemerge$in$i = 0.0, $storemerge$in$in$i = 0.0, $storemerge$in$in$in$i = 0.0, $storemerge1 = 0.0, $storemerge2 = 0.0, $storemerge3 = 0.0, $storemerge4 = 0.0, $suggested_samplefreq$0$i = 0, $suggested_samplefreq$2$i = 0, $suggested_samplefreq$4$i = 0, $suggested_samplefreq$6$i = 0, $suggested_samplefreq$8$i = 0, $switch = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = (($gfp) + 288|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 16|0);
 HEAP32[$1>>2] = 0;
 $3 = (($gfp) + 180|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($1) + 124|0);
 HEAP32[$5>>2] = $4;
 $6 = (($gfp) + 32|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($1) + 140|0);
 HEAP32[$8>>2] = $7;
 $9 = ($7|0)==(0);
 if (!($9)) {
  $10 = (($gfp) + 36|0);
  HEAP32[$10>>2] = 0;
 }
 $11 = (($1) + 85804|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0|0);
 if (!($13)) {
  $14 = (($gfp) + 36|0);
  HEAP32[$14>>2] = 0;
 }
 $15 = (($gfp) + 272|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($1) + 85828|0);
 HEAP32[$17>>2] = $16;
 $18 = (($gfp) + 276|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($1) + 85832|0);
 HEAP32[$20>>2] = $19;
 $21 = (($gfp) + 280|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($1) + 85836|0);
 HEAP32[$23>>2] = $22;
 $24 = (($gfp) + 296|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)==(0);
 if ($26) {
  $34 = (($1) + 85756|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $35 & -3;
  HEAP32[$34>>2] = $36;
  $48 = $36;
 } else {
  $27 = (_has_3DNow()|0);
  $28 = (($1) + 85756|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $27 << 1;
  $31 = $30 & 2;
  $32 = $29 & -3;
  $33 = $32 | $31;
  HEAP32[$28>>2] = $33;
  $48 = $33;
 }
 $37 = (($gfp) + 292|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)==(0);
 if ($39) {
  $46 = (($1) + 85756|0);
  $47 = $48 & -2;
  HEAP32[$46>>2] = $47;
  $67 = $47;
 } else {
  $40 = (_has_MMX()|0);
  $41 = (($1) + 85756|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $40 & 1;
  $44 = $42 & -2;
  $45 = $44 | $43;
  HEAP32[$41>>2] = $45;
  $67 = $45;
 }
 $49 = (($gfp) + 300|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ($50|0)==(0);
 if ($51) {
  $65 = (($1) + 85756|0);
  $66 = $67 & -13;
  HEAP32[$65>>2] = $66;
 } else {
  $52 = (_has_SSE()|0);
  $53 = (($1) + 85756|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = $52 << 2;
  $56 = $55 & 4;
  $57 = $54 & -5;
  $58 = $57 | $56;
  HEAP32[$53>>2] = $58;
  $59 = (_has_SSE2()|0);
  $60 = HEAP32[$53>>2]|0;
  $61 = $59 << 3;
  $62 = $61 & 8;
  $63 = $60 & -9;
  $64 = $63 | $62;
  HEAP32[$53>>2] = $64;
 }
 $68 = (($1) + 85796|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = ($69|0)==(0|0);
 if ($70) {
  $71 = (_calloc(1,2772)|0);
  HEAP32[$68>>2] = $71;
  $72 = ($71|0)==(0|0);
  if ($72) {
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $73 = (($1) + 85676|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = ($74|0)==(0|0);
 if ($75) {
  $76 = (_calloc(1,134792)|0);
  HEAP32[$73>>2] = $76;
  $77 = ($76|0)==(0|0);
  if ($77) {
   _freegfc($1);
   HEAP32[$0>>2] = 0;
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $78 = (($gfp) + 120|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = (($1) + 160|0);
 HEAP32[$80>>2] = $79;
 $81 = (($gfp) + 104|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = (($1) + 164|0);
 HEAP32[$83>>2] = $82;
 $84 = (($gfp) + 108|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = (($1) + 168|0);
 HEAP32[$86>>2] = $85;
 $87 = (($gfp) + 112|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = (($1) + 172|0);
 HEAP32[$89>>2] = $88;
 $90 = (($gfp) + 116|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = (($1) + 176|0);
 HEAP32[$92>>2] = $91;
 $93 = (($gfp) + 8|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = (($1) + 68|0);
 HEAP32[$95>>2] = $94;
 $96 = ($94|0)==(1);
 $97 = (($gfp) + 48|0);
 if ($96) {
  HEAP32[$97>>2] = 3;
  $98 = (($gfp) + 48|0);
  $99 = (($1) + 72|0);
  HEAP32[$99>>2] = 1;
  $1094 = $99;$1095 = $98;
  label = 23;
 } else {
  $$pre70 = HEAP32[$97>>2]|0;
  $phitmp = ($$pre70|0)==(3);
  $100 = (($gfp) + 48|0);
  $101 = $phitmp ? 1 : 2;
  $102 = (($1) + 72|0);
  HEAP32[$102>>2] = $101;
  if ($phitmp) {
   $1094 = $102;$1095 = $100;
   label = 23;
  } else {
   $$phi$trans$insert71 = (($gfp) + 52|0);
   $$pre72 = HEAP32[$$phi$trans$insert71>>2]|0;
   $105 = $$pre72;$147 = $102;$300 = $100;
  }
 }
 if ((label|0) == 23) {
  $103 = (($gfp) + 52|0);
  HEAP32[$103>>2] = 0;
  $105 = 0;$147 = $1094;$300 = $1095;
 }
 $104 = (($1) + 80|0);
 HEAP32[$104>>2] = $105;
 $106 = (($gfp) + 156|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = ($107|0)==(0);
 do {
  if ($108) {
   $109 = (($gfp) + 168|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = ($110|0)==(128);
   if ($111) {
    $112 = (($gfp) + 56|0);
    $113 = HEAP32[$112>>2]|0;
    $114 = (($1) + 152|0);
    HEAP32[$114>>2] = $113;
    $158 = $114;
    label = 32;
    break;
   }
   $115 = (($gfp) + 96|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = ($116|0)==(0);
   if ($117) {
    HEAP32[$115>>2] = $110;
    label = 29;
   } else {
    label = 31;
   }
  } else {
   label = 29;
  }
 } while(0);
 if ((label|0) == 29) {
  if ((($107|0) == 1) | (($107|0) == 4) | (($107|0) == 0)) {
   label = 31;
  } else {
   $118 = (($gfp) + 56|0);
   HEAP32[$118>>2] = 0;
   label = 31;
  }
 }
 if ((label|0) == 31) {
  $119 = (($gfp) + 56|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = (($1) + 152|0);
  HEAP32[$121>>2] = $120;
  if ($108) {
   $158 = $121;
   label = 32;
  } else {
   $587 = $121;
  }
 }
 if ((label|0) == 32) {
  $122 = (($gfp) + 96|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = ($123|0)==(0);
  do {
   if ($124) {
    $125 = (($gfp) + 100|0);
    $126 = +HEAPF32[$125>>2];
    $fabsf = (+Math_abs((+$126)));
    $127 = $fabsf;
    $128 = ($126 != $126) | (0.0 != 0.0) |($126 == 0.0);
    if ($128) {
     $131 = $126 == 0.0;
     if (!($131)) {
      break;
     }
    } else {
     $129 = $127 * 9.99999997475242707878E-7;
     $130 = !($127 <= $129);
     if ($130) {
      break;
     }
    }
    HEAPF32[$125>>2] = 11.0249996185302734375;
   }
  } while(0);
  $132 = (($gfp) + 100|0);
  $133 = +HEAPF32[$132>>2];
  $134 = $133 > 0.0;
  if ($134) {
   $135 = (($gfp) + 16|0);
   $136 = HEAP32[$135>>2]|0;
   $137 = ($136|0)==(0);
   if ($137) {
    $138 = (($gfp) + 12|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = (+($139|0));
    $141 = $140 * 0.969999999999999973354;
    $142 = (~~(($141)));
    $143 = (_map2MP3Frequency($142)|0);
    HEAP32[$135>>2] = $143;
    $$pre = +HEAPF32[$132>>2];
    $145 = $143;$151 = $$pre;
   } else {
    $145 = $136;$151 = $133;
   }
   $144 = $145 << 4;
   $146 = HEAP32[$147>>2]|0;
   $148 = Math_imul($144, $146)|0;
   $149 = (+($148|0));
   $150 = $151;
   $152 = $150 * 1000.0;
   $153 = $149 / $152;
   $154 = (~~(($153)));
   HEAP32[$122>>2] = $154;
   $155 = (_SmpFrqIndex($145,$2)|0);
   $156 = (($1) + 20|0);
   HEAP32[$156>>2] = $155;
   $157 = HEAP32[$158>>2]|0;
   $159 = ($157|0)==(0);
   if ($159) {
    $160 = HEAP32[$122>>2]|0;
    $161 = HEAP32[$2>>2]|0;
    $162 = HEAP32[$135>>2]|0;
    $163 = (_FindNearestBitrate($160,$161,$162)|0);
    HEAP32[$122>>2] = $163;
    $587 = $158;
   } else {
    $587 = $158;
   }
  } else {
   $587 = $158;
  }
 }
 $164 = (($gfp) + 16|0);
 $165 = HEAP32[$164>>2]|0;
 $166 = ($165|0)==(0);
 L61: do {
  if ($166) {
   $182 = HEAP32[$106>>2]|0;
   if ((($182|0) == 4) | (($182|0) == 1)) {
    $183 = (($gfp) + 164|0);
    $184 = HEAP32[$183>>2]|0;
    $185 = (+($184|0));
    $186 = (($gfp) + 160|0);
    $187 = +HEAPF32[$186>>2];
    $188 = $185 + $187;
    $189 = (($gfp) + 12|0);
    $$pre51 = HEAP32[$189>>2]|0;
    $i$040 = 2;
    while(1) {
     $190 = (9520 + (($i$040*24)|0)|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = ($$pre51|0)==($191|0);
     if ($192) {
      $193 = ((9520 + (($i$040*24)|0)|0) + 4|0);
      $194 = +HEAPF32[$193>>2];
      $195 = $188 < $194;
      if ($195) {
       $196 = $188 / $194;
       $197 = $196;
       $198 = ((9520 + (($i$040*24)|0)|0) + 12|0);
       $199 = +HEAPF32[$198>>2];
       $200 = $199;
       $201 = $197 * $200;
       $202 = (~~(($201)));
       HEAP32[$183>>2] = $202;
       $203 = (+($202|0));
       $204 = $201 - $203;
       $205 = $204;
       HEAPF32[$186>>2] = $205;
      }
     }
     $206 = ($$pre51|0)<($191|0);
     if (!($206)) {
      $207 = ((9520 + (($i$040*24)|0)|0) + 4|0);
      $208 = +HEAPF32[$207>>2];
      $209 = !($208 <= $188);
      if (!($209)) {
       $210 = ((9520 + (($i$040*24)|0)|0) + 8|0);
       $211 = +HEAPF32[$210>>2];
       $212 = $188 < $211;
       if ($212) {
        break;
       }
      }
     }
     $231 = (($i$040) + 1)|0;
     $232 = ($231|0)<(9);
     if ($232) {
      $i$040 = $231;
     } else {
      $1096 = 0;
      break L61;
     }
    }
    $213 = $211 - $208;
    $214 = ((9520 + (($i$040*24)|0)|0) + 16|0);
    $215 = +HEAPF32[$214>>2];
    $216 = ((9520 + (($i$040*24)|0)|0) + 12|0);
    $217 = +HEAPF32[$216>>2];
    $218 = $215 - $217;
    $219 = $188 - $208;
    $220 = $219 * $218;
    $221 = $220 / $213;
    $222 = $217 + $221;
    $223 = $222;
    $224 = (~~(($222)));
    HEAP32[$183>>2] = $224;
    $225 = (+($224|0));
    $226 = $223 - $225;
    $227 = $226;
    HEAPF32[$186>>2] = $227;
    HEAP32[$164>>2] = $191;
    $228 = (($gfp) + 184|0);
    $229 = HEAP32[$228>>2]|0;
    $230 = ($229|0)==(0);
    if ($230) {
     HEAP32[$228>>2] = -1;
     $1096 = $191;
    } else {
     $1096 = $191;
    }
   } else {
    $1096 = 0;
   }
  } else {
   $167 = ($165|0)<(16000);
   if ($167) {
    $168 = (($gfp) + 168|0);
    $169 = HEAP32[$168>>2]|0;
    $170 = ($169|0)>(8);
    $$ = $170 ? $169 : 8;
    $171 = ($$|0)<(64);
    $172 = $171 ? $$ : 64;
    HEAP32[$168>>2] = $172;
    $1096 = $165;
    break;
   }
   $173 = ($165|0)<(32000);
   $174 = (($gfp) + 168|0);
   $175 = HEAP32[$174>>2]|0;
   if ($173) {
    $176 = ($175|0)>(8);
    $$5 = $176 ? $175 : 8;
    $177 = ($$5|0)<(160);
    $178 = $177 ? $$5 : 160;
    HEAP32[$174>>2] = $178;
    $1096 = $165;
    break;
   } else {
    $179 = ($175|0)>(32);
    $$6 = $179 ? $175 : 32;
    $180 = ($$6|0)<(320);
    $181 = $180 ? $$6 : 320;
    HEAP32[$174>>2] = $181;
    $1096 = $165;
    break;
   }
  }
 } while(0);
 $233 = (($gfp) + 184|0);
 $234 = HEAP32[$233>>2]|0;
 $235 = ($234|0)==(0);
 if ($235) {
  $236 = HEAP32[$106>>2]|0;
  switch ($236|0) {
  case 1: case 4:  {
   $267 = (($gfp) + 164|0);
   $268 = HEAP32[$267>>2]|0;
   $269 = ($268>>>0)<(10);
   if ($269) {
    $270 = (9784 + ($268<<2)|0);
    $271 = HEAP32[$270>>2]|0;
    $272 = (+($271|0));
    $273 = (($268) + 1)|0;
    $274 = (9784 + ($273<<2)|0);
    $275 = HEAP32[$274>>2]|0;
    $276 = (+($275|0));
    $277 = (($gfp) + 160|0);
    $278 = +HEAPF32[$277>>2];
    $279 = $278;
    $280 = $276 - $272;
    $281 = $280 * $279;
    $282 = $272 + $281;
    $304 = $282;
   } else {
    $304 = 21500.0;
   }
   break;
  }
  case 0:  {
   $237 = (($gfp) + 96|0);
   $238 = HEAP32[$237>>2]|0;
   $239 = $238&65535;
   $240 = (_nearestBitrateFullIndex($239)|0);
   $241 = ((12232 + ($240<<3)|0) + 4|0);
   $242 = HEAP32[$241>>2]|0;
   $243 = (+($242|0));
   $304 = $243;
   break;
  }
  case 3:  {
   $244 = (($gfp) + 168|0);
   $245 = HEAP32[$244>>2]|0;
   $246 = $245&65535;
   $247 = (_nearestBitrateFullIndex($246)|0);
   $248 = ((12232 + ($247<<3)|0) + 4|0);
   $249 = HEAP32[$248>>2]|0;
   $250 = (+($249|0));
   $304 = $250;
   break;
  }
  case 2:  {
   $251 = (($gfp) + 164|0);
   $252 = HEAP32[$251>>2]|0;
   $253 = ($252>>>0)<(10);
   if ($253) {
    $254 = (9736 + ($252<<2)|0);
    $255 = HEAP32[$254>>2]|0;
    $256 = (+($255|0));
    $257 = (($252) + 1)|0;
    $258 = (9736 + ($257<<2)|0);
    $259 = HEAP32[$258>>2]|0;
    $260 = (+($259|0));
    $261 = (($gfp) + 160|0);
    $262 = +HEAPF32[$261>>2];
    $263 = $262;
    $264 = $260 - $256;
    $265 = $264 * $263;
    $266 = $256 + $265;
    $304 = $266;
   } else {
    $304 = 19500.0;
   }
   break;
  }
  default: {
   $283 = (($gfp) + 164|0);
   $284 = HEAP32[$283>>2]|0;
   $285 = ($284>>>0)<(10);
   if ($285) {
    $286 = (9832 + ($284<<2)|0);
    $287 = HEAP32[$286>>2]|0;
    $288 = (+($287|0));
    $289 = (($284) + 1)|0;
    $290 = (9832 + ($289<<2)|0);
    $291 = HEAP32[$290>>2]|0;
    $292 = (+($291|0));
    $293 = (($gfp) + 160|0);
    $294 = +HEAPF32[$293>>2];
    $295 = $294;
    $296 = $292 - $288;
    $297 = $296 * $295;
    $298 = $288 + $297;
    $304 = $298;
   } else {
    $304 = 19500.0;
   }
  }
  }
  $299 = HEAP32[$300>>2]|0;
  $301 = ($299|0)==(3);
  if ($301) {
   $302 = HEAP32[$106>>2]|0;
   if ((($302|0) == 3) | (($302|0) == 0)) {
    $303 = $304 * 1.5;
    $306 = $303;
   } else {
    $306 = $304;
   }
  } else {
   $306 = $304;
  }
  $305 = (~~(($306)));
  HEAP32[$233>>2] = $305;
  $$pre52 = HEAP32[$164>>2]|0;
  $308 = $$pre52;$310 = $305;
 } else {
  $308 = $1096;$310 = $234;
 }
 $307 = ($308|0)==(0);
 if ($307) {
  $309 = $310 << 1;
  $311 = (($gfp) + 12|0);
  $312 = HEAP32[$311>>2]|0;
  $313 = ($309|0)>($312|0);
  if ($313) {
   $314 = (($312|0) / 2)&-1;
   HEAP32[$233>>2] = $314;
   $325 = $314;
  } else {
   $325 = $310;
  }
  $315 = ($312|0)>(47999);
  do {
   if ($315) {
    $suggested_samplefreq$0$i = 48000;
   } else {
    $316 = ($312|0)>(44099);
    if ($316) {
     $suggested_samplefreq$0$i = 44100;
    } else {
     $317 = ($312|0)>(31999);
     if ($317) {
      $suggested_samplefreq$0$i = 32000;
     } else {
      $318 = ($312|0)>(23999);
      if ($318) {
       $suggested_samplefreq$0$i = 24000;
      } else {
       $319 = ($312|0)>(22049);
       if ($319) {
        $suggested_samplefreq$0$i = 22050;
       } else {
        $320 = ($312|0)>(15999);
        if ($320) {
         $suggested_samplefreq$0$i = 16000;
         break;
        }
        $321 = ($312|0)>(11999);
        if ($321) {
         $suggested_samplefreq$0$i = 12000;
         break;
        }
        $322 = ($312|0)>(11024);
        if ($322) {
         $suggested_samplefreq$0$i = 11025;
         break;
        }
        $323 = ($312|0)>(7999);
        $$$i = $323 ? 8000 : 44100;
        $suggested_samplefreq$0$i = $$$i;
       }
      }
     }
    }
   }
  } while(0);
  $324 = ($325|0)==(-1);
  do {
   if ($324) {
    $$0$i13 = $suggested_samplefreq$0$i;
   } else {
    $326 = ($325|0)<(15961);
    $$suggested_samplefreq$0$i = $326 ? 44100 : $suggested_samplefreq$0$i;
    $327 = ($325|0)<(15251);
    $suggested_samplefreq$2$i = $327 ? 32000 : $$suggested_samplefreq$0$i;
    $328 = ($325|0)<(11221);
    $$suggested_samplefreq$2$i = $328 ? 24000 : $suggested_samplefreq$2$i;
    $329 = ($325|0)<(9971);
    $suggested_samplefreq$4$i = $329 ? 22050 : $$suggested_samplefreq$2$i;
    $330 = ($325|0)<(7231);
    $$suggested_samplefreq$4$i = $330 ? 16000 : $suggested_samplefreq$4$i;
    $331 = ($325|0)<(5421);
    $suggested_samplefreq$6$i = $331 ? 12000 : $$suggested_samplefreq$4$i;
    $332 = ($325|0)<(4511);
    $$suggested_samplefreq$6$i = $332 ? 11025 : $suggested_samplefreq$6$i;
    $333 = ($325|0)<(3971);
    $suggested_samplefreq$8$i = $333 ? 8000 : $$suggested_samplefreq$6$i;
    $334 = ($suggested_samplefreq$8$i|0)>($312|0);
    if ($334) {
     $335 = ($312|0)>(44100);
     if ($335) {
      $$0$i13 = 48000;
     } else {
      $336 = ($312|0)>(32000);
      if ($336) {
       $$0$i13 = 44100;
      } else {
       $337 = ($312|0)>(24000);
       if ($337) {
        $$0$i13 = 32000;
        break;
       }
       $338 = ($312|0)>(22050);
       if ($338) {
        $$0$i13 = 24000;
        break;
       }
       $339 = ($312|0)>(16000);
       if ($339) {
        $$0$i13 = 22050;
        break;
       }
       $340 = ($312|0)>(12000);
       if ($340) {
        $$0$i13 = 16000;
        break;
       }
       $341 = ($312|0)>(11025);
       if ($341) {
        $$0$i13 = 12000;
        break;
       }
       $342 = ($312|0)>(8000);
       $$1$i = $342 ? 11025 : 8000;
       $$0$i13 = $$1$i;
      }
     }
    } else {
     $$0$i13 = $suggested_samplefreq$8$i;
    }
   }
  } while(0);
  HEAP32[$164>>2] = $$0$i13;
  $345 = $325;$347 = $$0$i13;
 } else {
  $345 = $310;$347 = $308;
 }
 $343 = HEAP32[$106>>2]|0;
 do {
  if ((($343|0) == 4) | (($343|0) == 1)) {
   $344 = ($345|0)>(24000);
   $$9 = $344 ? 24000 : $345;
   $346 = (($347|0) / 2)&-1;
   $348 = ($346|0)<($$9|0);
   $$storemerge94 = $348 ? $346 : $$9;
   HEAP32[$233>>2] = $$storemerge94;
   $349 = ($343|0)==(3);
   if ($349) {
    label = 100;
   }
  } else {
   $350 = ($345|0)>(20500);
   $$10 = $350 ? 20500 : $345;
   $351 = (($347|0) / 2)&-1;
   $352 = ($351|0)<($$10|0);
   $$storemerge = $352 ? $351 : $$10;
   HEAP32[$233>>2] = $$storemerge;
   if ((($343|0) == 3)) {
    label = 100;
    break;
   } else if (!((($343|0) == 0))) {
    break;
   }
   $353 = $347 << 4;
   $354 = HEAP32[$147>>2]|0;
   $355 = Math_imul($353, $354)|0;
   $356 = (+($355|0));
   $357 = (($gfp) + 96|0);
   $358 = HEAP32[$357>>2]|0;
   $359 = (+($358|0));
   $360 = $359 * 1000.0;
   $361 = $356 / $360;
   $362 = $361;
   $363 = (($gfp) + 100|0);
   HEAPF32[$363>>2] = $362;
  }
 } while(0);
 if ((label|0) == 100) {
  $364 = $347 << 4;
  $365 = HEAP32[$147>>2]|0;
  $366 = Math_imul($364, $365)|0;
  $367 = (+($366|0));
  $368 = (($gfp) + 168|0);
  $369 = HEAP32[$368>>2]|0;
  $370 = (+($369|0));
  $371 = $370 * 1000.0;
  $372 = $367 / $371;
  $373 = $372;
  $374 = (($gfp) + 100|0);
  HEAPF32[$374>>2] = $373;
 }
 $375 = (($gfp) + 36|0);
 $376 = HEAP32[$375>>2]|0;
 $377 = ($376|0)==(0);
 $378 = (($gfp) + 60|0);
 if ($377) {
  HEAP32[$378>>2] = 0;
  $379 = (($gfp) + 64|0);
  HEAP32[$379>>2] = 0;
  $380 = (($1) + 132|0);
  HEAP32[$380>>2] = 0;
  $$pre$phi87Z2D = $379;
 } else {
  $$pre86 = (($gfp) + 64|0);
  $$pre$phi87Z2D = $$pre86;
 }
 $381 = HEAP32[$378>>2]|0;
 $382 = (($1) + 128|0);
 HEAP32[$382>>2] = $381;
 $383 = HEAP32[$$pre$phi87Z2D>>2]|0;
 $384 = (($1) + 136|0);
 HEAP32[$384>>2] = $383;
 $385 = ($383|0)==(0);
 if (!($385)) {
  $386 = (($1) + 132|0);
  HEAP32[$386>>2] = 1;
 }
 $387 = ($381|0)==(0);
 do {
  if ($387) {
   $393 = $383;
  } else {
   $388 = HEAP32[$73>>2]|0;
   $389 = HEAP32[$164>>2]|0;
   $390 = (_InitGainAnalysis($388,$389)|0);
   $391 = ($390|0)==(0);
   if (!($391)) {
    $$pre73 = HEAP32[$384>>2]|0;
    $393 = $$pre73;
    break;
   }
   _freegfc($1);
   HEAP32[$0>>2] = 0;
   $$0 = -6;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $392 = ($393|0)==(0);
 if (!($392)) {
  $394 = (($gfp) + 40|0);
  $395 = HEAP32[$394>>2]|0;
  $396 = ($395|0)==(0);
  if ($396) {
   $397 = (($1) + 85808|0);
   $398 = HEAP32[$397>>2]|0;
   $399 = ($398|0)==(0|0);
   if (!($399)) {
    (_hip_decode_exit($398)|0);
   }
   $400 = (_hip_decode_init()|0);
   HEAP32[$397>>2] = $400;
   $401 = HEAP32[$21>>2]|0;
   _hip_set_errorf($400,$401);
   $402 = HEAP32[$397>>2]|0;
   $403 = HEAP32[$18>>2]|0;
   _hip_set_debugf($402,$403);
   $404 = HEAP32[$397>>2]|0;
   $405 = HEAP32[$15>>2]|0;
   _hip_set_msgf($404,$405);
  }
 }
 $406 = (($gfp) + 128|0);
 $407 = HEAP32[$406>>2]|0;
 $408 = (($1) + 144|0);
 HEAP32[$408>>2] = $407;
 $409 = HEAP32[$233>>2]|0;
 $410 = (($1) + 52|0);
 HEAP32[$410>>2] = $409;
 $411 = (($gfp) + 188|0);
 $412 = HEAP32[$411>>2]|0;
 $413 = (($1) + 56|0);
 HEAP32[$413>>2] = $412;
 $414 = (($gfp) + 12|0);
 $415 = HEAP32[$414>>2]|0;
 $416 = (($1) + 60|0);
 HEAP32[$416>>2] = $415;
 $417 = HEAP32[$164>>2]|0;
 $418 = (($1) + 64|0);
 HEAP32[$418>>2] = $417;
 $419 = ($417|0)<(24001);
 $420 = $419 ? 1 : 2;
 $421 = (($1) + 76|0);
 HEAP32[$421>>2] = $420;
 $422 = (($1) + 84760|0);
 HEAP32[$422>>2] = 576;
 $423 = HEAP32[$106>>2]|0;
 if ((($423|0) == 4) | (($423|0) == 2) | (($423|0) == 1)) {
  $424 = (($gfp) + 164|0);
  $425 = HEAP32[$424>>2]|0;
  $426 = (9880 + ($425<<2)|0);
  $427 = +HEAPF32[$426>>2];
  $428 = (($gfp) + 100|0);
  HEAPF32[$428>>2] = $427;
 } else if ((($423|0) == 3)) {
  $429 = $417 << 4;
  $430 = HEAP32[$147>>2]|0;
  $431 = Math_imul($429, $430)|0;
  $432 = (+($431|0));
  $433 = (($gfp) + 168|0);
  $434 = HEAP32[$433>>2]|0;
  $435 = (+($434|0));
  $436 = $435 * 1000.0;
  $437 = $432 / $436;
  $438 = $437;
  $439 = (($gfp) + 100|0);
  HEAPF32[$439>>2] = $438;
 } else {
  $440 = $417 << 4;
  $441 = HEAP32[$147>>2]|0;
  $442 = Math_imul($440, $441)|0;
  $443 = (+($442|0));
  $444 = (($gfp) + 96|0);
  $445 = HEAP32[$444>>2]|0;
  $446 = (+($445|0));
  $447 = $446 * 1000.0;
  $448 = $443 / $447;
  $449 = $448;
  $450 = (($gfp) + 100|0);
  HEAPF32[$450>>2] = $449;
 }
 $451 = HEAP32[$300>>2]|0;
 $452 = ($451|0)==(4);
 if ($452) {
  HEAP32[$300>>2] = 1;
  $454 = 1;
 } else {
  $454 = $451;
 }
 $453 = (($1) + 180|0);
 HEAP32[$453>>2] = $454;
 $455 = ($412|0)>(0);
 if ($455) {
  $456 = (+($412|0));
  $457 = $456 * 2.0;
  $458 = $457;
  $459 = (($1) + 256|0);
  HEAPF32[$459>>2] = $458;
  $460 = (($gfp) + 196|0);
  $461 = HEAP32[$460>>2]|0;
  $462 = ($461|0)>(-1);
  if ($462) {
   $463 = (($412) + ($461))|0;
   $464 = (+($463|0));
   $465 = $464 * 2.0;
   $466 = $465;
   $467 = (($1) + 260|0);
   HEAPF32[$467>>2] = $466;
   $473 = $466;
  } else {
   $468 = (($1) + 260|0);
   HEAPF32[$468>>2] = $458;
   $473 = $458;
  }
  $469 = (+($417|0));
  $470 = $458 / $469;
  HEAPF32[$459>>2] = $470;
  $471 = (($1) + 260|0);
  $472 = $473 / $469;
  HEAPF32[$471>>2] = $472;
  $514 = $472;
 } else {
  $474 = (($1) + 256|0);
  HEAPF32[$474>>2] = 0.0;
  $475 = (($1) + 260|0);
  HEAPF32[$475>>2] = 0.0;
  $514 = 0.0;
 }
 $476 = (($1) + 248|0);
 HEAPF32[$476>>2] = 0.0;
 $477 = (($1) + 252|0);
 HEAPF32[$477>>2] = 0.0;
 $478 = ($409|0)>(0);
 do {
  if ($478) {
   $479 = (($417|0) / 2)&-1;
   $480 = ($409|0)<($479|0);
   if (!($480)) {
    break;
   }
   $481 = (+($409|0));
   $482 = $481 * 2.0;
   $483 = $482;
   HEAPF32[$477>>2] = $483;
   $484 = (($gfp) + 192|0);
   $485 = HEAP32[$484>>2]|0;
   $486 = ($485|0)>(-1);
   do {
    if ($486) {
     $487 = (($409) - ($485))|0;
     $488 = (+($487|0));
     $489 = $488 * 2.0;
     $490 = $489;
     HEAPF32[$476>>2] = $490;
     $491 = $490 < 0.0;
     if (!($491)) {
      $494 = $490;
      break;
     }
     HEAPF32[$476>>2] = 0.0;
     $494 = 0.0;
    } else {
     HEAPF32[$476>>2] = $483;
     $494 = $483;
    }
   } while(0);
   $492 = (+($417|0));
   $493 = $494 / $492;
   HEAPF32[$476>>2] = $493;
   $495 = $483 / $492;
   HEAPF32[$477>>2] = $495;
   $496 = $493 > 0.0;
   if ($496) {
    $band$010$i = 0;$lowpass_band$012$i = 32;$minband$011$i = 999;
   } else {
    break;
   }
   while(1) {
    $497 = (+($band$010$i|0));
    $498 = $497 * 0.0322580645161290313627;
    $499 = $498;
    $500 = !($499 >= $495);
    if ($500) {
     $lowpass_band$1$i = $lowpass_band$012$i;
    } else {
     $501 = ($lowpass_band$012$i|0)<($band$010$i|0);
     $502 = $501 ? $lowpass_band$012$i : $band$010$i;
     $lowpass_band$1$i = $502;
    }
    $503 = $493 < $499;
    $504 = $499 < $495;
    $or$cond18$i = $503 & $504;
    if ($or$cond18$i) {
     $505 = ($minband$011$i|0)<($band$010$i|0);
     $506 = $505 ? $minband$011$i : $band$010$i;
     $minband$1$i = $506;
    } else {
     $minband$1$i = $minband$011$i;
    }
    $507 = (($band$010$i) + 1)|0;
    $exitcond14$i = ($507|0)==(32);
    if ($exitcond14$i) {
     break;
    } else {
     $band$010$i = $507;$lowpass_band$012$i = $lowpass_band$1$i;$minband$011$i = $minband$1$i;
    }
   }
   $508 = ($minband$1$i|0)==(999);
   $lowpass_band$0$minband$0$i = $508 ? $lowpass_band$1$i : $minband$1$i;
   $storemerge$in$in$in$i = (+($lowpass_band$0$minband$0$i|0));
   $storemerge$in$in$i = $storemerge$in$in$in$i + -0.75;
   $storemerge$in$i = $storemerge$in$in$i * 0.0322580645161290313627;
   $storemerge$i = $storemerge$in$i;
   HEAPF32[$476>>2] = $storemerge$i;
   $509 = (+($lowpass_band$1$i|0));
   $510 = $509 * 0.0322580645161290313627;
   $511 = $510;
   HEAPF32[$477>>2] = $511;
  }
 } while(0);
 $512 = (($1) + 260|0);
 $513 = $514 > 0.0;
 $515 = $514;
 $516 = $515 < 0.0217741935483870968637;
 $or$cond$i = $513 & $516;
 $517 = (($1) + 256|0);
 if ($or$cond$i) {
  HEAPF32[$517>>2] = 0.0;
  HEAPF32[$512>>2] = 0.0;
  _lame_msgf($1,12160,$vararg_buffer);
  $$pr$i = +HEAPF32[$512>>2];
  $519 = $$pr$i;
 } else {
  $519 = $514;
 }
 $518 = $519 > 0.0;
 do {
  if ($518) {
   $520 = +HEAPF32[$517>>2];
   $band$16$i = 0;$highpass_band$08$i = -1;$maxband$07$i = -1;
   while(1) {
    $521 = (+($band$16$i|0));
    $522 = $521 * 0.0322580645161290313627;
    $523 = $522;
    $524 = !($523 <= $520);
    if ($524) {
     $highpass_band$1$i = $highpass_band$08$i;
    } else {
     $525 = ($highpass_band$08$i|0)>($band$16$i|0);
     $526 = $525 ? $highpass_band$08$i : $band$16$i;
     $highpass_band$1$i = $526;
    }
    $527 = $520 < $523;
    $528 = $523 < $519;
    $or$cond19$i = $527 & $528;
    if ($or$cond19$i) {
     $529 = ($maxband$07$i|0)>($band$16$i|0);
     $530 = $529 ? $maxband$07$i : $band$16$i;
     $maxband$1$i = $530;
    } else {
     $maxband$1$i = $maxband$07$i;
    }
    $531 = (($band$16$i) + 1)|0;
    $exitcond13$i = ($531|0)==(32);
    if ($exitcond13$i) {
     break;
    } else {
     $band$16$i = $531;$highpass_band$08$i = $highpass_band$1$i;$maxband$07$i = $maxband$1$i;
    }
   }
   $532 = (+($highpass_band$1$i|0));
   $533 = $532 * 0.0322580645161290313627;
   $534 = $533;
   HEAPF32[$517>>2] = $534;
   $535 = ($maxband$1$i|0)==(-1);
   if ($535) {
    $536 = $532 + 0.75;
    $537 = $536 * 0.0322580645161290313627;
    $538 = $537;
    HEAPF32[$512>>2] = $538;
    $547 = $538;$band$24$i = 0;
    break;
   } else {
    $539 = (+($maxband$1$i|0));
    $540 = $539 + 0.75;
    $541 = $540 * 0.0322580645161290313627;
    $542 = $541;
    HEAPF32[$512>>2] = $542;
    $547 = $542;$band$24$i = 0;
    break;
   }
  } else {
   $547 = $519;$band$24$i = 0;
  }
 } while(0);
 while(1) {
  $543 = (+($band$24$i|0));
  $544 = $543 * 0.0322580635547637939453;
  $545 = +HEAPF32[$517>>2];
  $546 = $547 > $545;
  do {
   if ($546) {
    $548 = $547 - $544;
    $549 = $548;
    $550 = $547 - $545;
    $551 = $550;
    $552 = $551 + 9.99999999999999945153E-21;
    $553 = $549 / $552;
    $554 = $553;
    $555 = $554;
    $556 = $554 > 1.0;
    if ($556) {
     $fc1$0$i = 0.0;
     break;
    }
    $557 = !($554 <= 0.0);
    if (!($557)) {
     $fc1$0$i = 1.0;
     break;
    }
    $558 = $555 * 1.570796326794896558;
    $559 = (+Math_cos((+$558)));
    $560 = $559;
    $fc1$0$i = $560;
   } else {
    $fc1$0$i = 1.0;
   }
  } while(0);
  $561 = +HEAPF32[$477>>2];
  $562 = +HEAPF32[$476>>2];
  $563 = $561 > $562;
  do {
   if ($563) {
    $564 = $544 - $562;
    $565 = $564;
    $566 = $561 - $562;
    $567 = $566;
    $568 = $567 + 9.99999999999999945153E-21;
    $569 = $565 / $568;
    $570 = $569;
    $571 = $570;
    $572 = $570 > 1.0;
    if ($572) {
     $fc2$0$i = 0.0;
     break;
    }
    $573 = !($570 <= 0.0);
    if (!($573)) {
     $fc2$0$i = 1.0;
     break;
    }
    $574 = $571 * 1.570796326794896558;
    $575 = (+Math_cos((+$574)));
    $576 = $575;
    $fc2$0$i = $576;
   } else {
    $fc2$0$i = 1.0;
   }
  } while(0);
  $577 = $fc1$0$i * $fc2$0$i;
  $578 = ((($1) + ($band$24$i<<2)|0) + 37040|0);
  HEAPF32[$578>>2] = $577;
  $579 = (($band$24$i) + 1)|0;
  $exitcond$i = ($579|0)==(32);
  if ($exitcond$i) {
   break;
  }
  $$pre$i = +HEAPF32[$512>>2];
  $547 = $$pre$i;$band$24$i = $579;
 }
 $580 = HEAP32[$418>>2]|0;
 $581 = (_SmpFrqIndex($580,$2)|0);
 $582 = (($1) + 20|0);
 HEAP32[$582>>2] = $581;
 $583 = ($581|0)<(0);
 if ($583) {
  _freegfc($1);
  HEAP32[$0>>2] = 0;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $584 = HEAP32[$106>>2]|0;
 $585 = ($584|0)==(0);
 do {
  if ($585) {
   $586 = HEAP32[$587>>2]|0;
   $588 = ($586|0)==(0);
   if (!($588)) {
    $589 = (($1) + 84744|0);
    HEAP32[$589>>2] = 0;
    break;
   }
   $590 = (($gfp) + 96|0);
   $591 = HEAP32[$590>>2]|0;
   $592 = HEAP32[$2>>2]|0;
   $593 = HEAP32[$418>>2]|0;
   $594 = (_FindNearestBitrate($591,$592,$593)|0);
   HEAP32[$590>>2] = $594;
   $595 = HEAP32[$2>>2]|0;
   $596 = HEAP32[$418>>2]|0;
   $597 = (_BitrateIndex($594,$595,$596)|0);
   $598 = (($1) + 84744|0);
   HEAP32[$598>>2] = $597;
   $599 = ($597|0)<(1);
   if (!($599)) {
    break;
   }
   _freegfc($1);
   HEAP32[$0>>2] = 0;
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  } else {
   $600 = (($1) + 84744|0);
   HEAP32[$600>>2] = 1;
  }
 } while(0);
 _init_bit_stream_w($1);
 $601 = HEAP32[$582>>2]|0;
 $602 = HEAP32[$2>>2]|0;
 $603 = ($602*3)|0;
 $604 = (($603) + ($601))|0;
 $605 = HEAP32[$418>>2]|0;
 $606 = ($605|0)<(16000);
 $607 = $606 ? 6 : 0;
 $608 = (($604) + ($607))|0;
 $i$136 = 0;
 while(1) {
  $695 = ((64992 + (($608*204)|0)|0) + ($i$136<<2)|0);
  $696 = HEAP32[$695>>2]|0;
  $697 = ((($1) + ($i$136<<2)|0) + 21360|0);
  HEAP32[$697>>2] = $696;
  $698 = (($i$136) + 1)|0;
  $exitcond45 = ($698|0)==(23);
  if ($exitcond45) {
   break;
  } else {
   $i$136 = $698;
  }
 }
 $609 = (($1) + 21448|0);
 $610 = (($1) + 21444|0);
 $611 = HEAP32[$609>>2]|0;
 $612 = HEAP32[$610>>2]|0;
 $613 = (($611) - ($612))|0;
 $614 = (($613|0) / 6)&-1;
 $615 = (($1) + 21508|0);
 HEAP32[$615>>2] = $612;
 $616 = (($614) + ($612))|0;
 $617 = (($1) + 21512|0);
 HEAP32[$617>>2] = $616;
 $618 = $614 << 1;
 $619 = (($618) + ($612))|0;
 $620 = (($1) + 21516|0);
 HEAP32[$620>>2] = $619;
 $621 = ($614*3)|0;
 $622 = (($621) + ($612))|0;
 $623 = (($1) + 21520|0);
 HEAP32[$623>>2] = $622;
 $624 = $614 << 2;
 $625 = (($624) + ($612))|0;
 $626 = (($1) + 21524|0);
 HEAP32[$626>>2] = $625;
 $627 = ($614*5)|0;
 $628 = (($627) + ($612))|0;
 $629 = (($1) + 21528|0);
 HEAP32[$629>>2] = $628;
 $630 = (($1) + 21532|0);
 HEAP32[$630>>2] = 576;
 $631 = ((64992 + (($608*204)|0)|0) + 92|0);
 $632 = HEAP32[$631>>2]|0;
 $633 = (($1) + 21452|0);
 HEAP32[$633>>2] = $632;
 $634 = ((64992 + (($608*204)|0)|0) + 96|0);
 $635 = HEAP32[$634>>2]|0;
 $636 = (($1) + 21456|0);
 HEAP32[$636>>2] = $635;
 $637 = ((64992 + (($608*204)|0)|0) + 100|0);
 $638 = HEAP32[$637>>2]|0;
 $639 = (($1) + 21460|0);
 HEAP32[$639>>2] = $638;
 $640 = ((64992 + (($608*204)|0)|0) + 104|0);
 $641 = HEAP32[$640>>2]|0;
 $642 = (($1) + 21464|0);
 HEAP32[$642>>2] = $641;
 $643 = ((64992 + (($608*204)|0)|0) + 108|0);
 $644 = HEAP32[$643>>2]|0;
 $645 = (($1) + 21468|0);
 HEAP32[$645>>2] = $644;
 $646 = ((64992 + (($608*204)|0)|0) + 112|0);
 $647 = HEAP32[$646>>2]|0;
 $648 = (($1) + 21472|0);
 HEAP32[$648>>2] = $647;
 $649 = ((64992 + (($608*204)|0)|0) + 116|0);
 $650 = HEAP32[$649>>2]|0;
 $651 = (($1) + 21476|0);
 HEAP32[$651>>2] = $650;
 $652 = ((64992 + (($608*204)|0)|0) + 120|0);
 $653 = HEAP32[$652>>2]|0;
 $654 = (($1) + 21480|0);
 HEAP32[$654>>2] = $653;
 $655 = ((64992 + (($608*204)|0)|0) + 124|0);
 $656 = HEAP32[$655>>2]|0;
 $657 = (($1) + 21484|0);
 HEAP32[$657>>2] = $656;
 $658 = ((64992 + (($608*204)|0)|0) + 128|0);
 $659 = HEAP32[$658>>2]|0;
 $660 = (($1) + 21488|0);
 HEAP32[$660>>2] = $659;
 $661 = ((64992 + (($608*204)|0)|0) + 132|0);
 $662 = HEAP32[$661>>2]|0;
 $663 = (($1) + 21492|0);
 HEAP32[$663>>2] = $662;
 $664 = ((64992 + (($608*204)|0)|0) + 136|0);
 $665 = HEAP32[$664>>2]|0;
 $666 = (($1) + 21496|0);
 HEAP32[$666>>2] = $665;
 $667 = ((64992 + (($608*204)|0)|0) + 140|0);
 $668 = HEAP32[$667>>2]|0;
 $669 = (($1) + 21500|0);
 HEAP32[$669>>2] = $668;
 $670 = ((64992 + (($608*204)|0)|0) + 144|0);
 $671 = HEAP32[$670>>2]|0;
 $672 = (($1) + 21504|0);
 HEAP32[$672>>2] = $671;
 $673 = (($671) - ($668))|0;
 $674 = (($673|0) / 6)&-1;
 $675 = (($1) + 21536|0);
 HEAP32[$675>>2] = $668;
 $676 = (($674) + ($668))|0;
 $677 = (($1) + 21540|0);
 HEAP32[$677>>2] = $676;
 $678 = $674 << 1;
 $679 = (($678) + ($668))|0;
 $680 = (($1) + 21544|0);
 HEAP32[$680>>2] = $679;
 $681 = ($674*3)|0;
 $682 = (($681) + ($668))|0;
 $683 = (($1) + 21548|0);
 HEAP32[$683>>2] = $682;
 $684 = $674 << 2;
 $685 = (($684) + ($668))|0;
 $686 = (($1) + 21552|0);
 HEAP32[$686>>2] = $685;
 $687 = ($674*5)|0;
 $688 = (($687) + ($668))|0;
 $689 = (($1) + 21556|0);
 HEAP32[$689>>2] = $688;
 $690 = (($1) + 21560|0);
 HEAP32[$690>>2] = 192;
 $691 = HEAP32[$421>>2]|0;
 $692 = ($691|0)==(2);
 $693 = HEAP32[$147>>2]|0;
 $694 = ($693|0)==(1);
 if ($692) {
  $699 = $694 ? 21 : 36;
  $700 = (($1) + 24|0);
  HEAP32[$700>>2] = $699;
  $707 = $699;
 } else {
  $701 = $694 ? 13 : 21;
  $702 = (($1) + 24|0);
  HEAP32[$702>>2] = $701;
  $707 = $701;
 }
 $703 = HEAP32[$80>>2]|0;
 $704 = ($703|0)==(0);
 if (!($704)) {
  $705 = (($1) + 24|0);
  $706 = $707 | 2;
  HEAP32[$705>>2] = $706;
 }
 HEAP32[$1>>2] = -487877;
 $709 = $691;$711 = $693;$k$031 = 0;
 while(1) {
  $708 = ($709*700)|0;
  $710 = Math_imul($708, $711)|0;
  $712 = (+($710|0));
  $713 = ((($1) + ($k$031<<2)|0) + 39756|0);
  HEAPF32[$713>>2] = $712;
  $714 = (($k$031) + 1)|0;
  $exitcond = ($714|0)==(19);
  if ($exitcond) {
   break;
  }
  $$pre74 = HEAP32[$421>>2]|0;
  $$pre75 = HEAP32[$147>>2]|0;
  $709 = $$pre74;$711 = $$pre75;$k$031 = $714;
 }
 $715 = (($gfp) + 220|0);
 $716 = HEAP32[$715>>2]|0;
 $717 = ($716|0)==(-1);
 if ($717) {
  HEAP32[$715>>2] = 4;
 }
 $718 = HEAP32[$106>>2]|0;
 do {
  if ((($718|0) == 4) | (($718|0) == 1)) {
   $719 = (($gfp) + 124|0);
   $720 = HEAP32[$719>>2]|0;
   $721 = ($720|0)<(0);
   if ($721) {
    HEAP32[$719>>2] = 2;
   }
   $722 = (($gfp) + 244|0);
   $723 = HEAP32[$722>>2]|0;
   $724 = ($723|0)<(0);
   if ($724) {
    HEAP32[$722>>2] = 0;
   }
   $725 = (($gfp) + 164|0);
   $726 = HEAP32[$725>>2]|0;
   $727 = Math_imul($726, -10)|0;
   $728 = (($727) + 500)|0;
   (_apply_preset($gfp,$728,0)|0);
   $729 = (($gfp) + 44|0);
   $730 = HEAP32[$729>>2]|0;
   $731 = ($730|0)<(0);
   do {
    if ($731) {
     HEAP32[$729>>2] = 3;
     label = 190;
    } else {
     $732 = ($730|0)<(5);
     if ($732) {
      label = 190;
      break;
     }
     $733 = ($730|0)>(7);
     if (!($733)) {
      break;
     }
     HEAP32[$729>>2] = 7;
    }
   } while(0);
   if ((label|0) == 190) {
    HEAP32[$729>>2] = 0;
   }
   $734 = (($gfp) + 140|0);
   $735 = HEAP32[$734>>2]|0;
   $736 = ($735|0)==(0);
   if ($736) {
    $738 = HEAP32[$418>>2]|0;
    $739 = ($738|0)>(44000);
    $740 = $739&1;
    $741 = (($1) + 85092|0);
    HEAP32[$741>>2] = $740;
   } else {
    $737 = (($1) + 85092|0);
    HEAP32[$737>>2] = 0;
   }
   $742 = (($1) + 85812|0);
   HEAP32[$742>>2] = 1;
  } else if ((($718|0) == 2)) {
   $743 = (($gfp) + 164|0);
   $744 = HEAP32[$743>>2]|0;
   $745 = Math_imul($744, -10)|0;
   $746 = (($745) + 500)|0;
   (_apply_preset($gfp,$746,0)|0);
   $747 = (($gfp) + 140|0);
   $748 = HEAP32[$747>>2]|0;
   $749 = ($748|0)==(0);
   if ($749) {
    $751 = HEAP32[$418>>2]|0;
    $752 = ($751|0)>(44000);
    $753 = $752&1;
    $754 = (($1) + 85092|0);
    HEAP32[$754>>2] = $753;
   } else {
    $750 = (($1) + 85092|0);
    HEAP32[$750>>2] = 0;
   }
   $755 = (($gfp) + 44|0);
   $756 = HEAP32[$755>>2]|0;
   $757 = ($756|0)>(6);
   do {
    if ($757) {
     HEAP32[$755>>2] = 6;
    } else {
     $758 = ($756|0)<(0);
     if (!($758)) {
      break;
     }
     HEAP32[$755>>2] = 3;
    }
   } while(0);
   $759 = (($1) + 85812|0);
   HEAP32[$759>>2] = 2;
  } else {
   $760 = (($1) + 85092|0);
   HEAP32[$760>>2] = 0;
   $761 = (($gfp) + 44|0);
   $762 = HEAP32[$761>>2]|0;
   $763 = ($762|0)<(0);
   if ($763) {
    HEAP32[$761>>2] = 3;
   }
   $764 = ($718|0)==(0);
   if ($764) {
    $765 = (($gfp) + 96|0);
    $766 = HEAP32[$765>>2]|0;
    (_lame_set_VBR_mean_bitrate_kbps($gfp,$766)|0);
   }
   $767 = (($gfp) + 168|0);
   $768 = HEAP32[$767>>2]|0;
   (_apply_preset($gfp,$768,0)|0);
   HEAP32[$106>>2] = $718;
   $769 = (($1) + 85812|0);
   if ($764) {
    HEAP32[$769>>2] = 3;
    break;
   } else {
    HEAP32[$769>>2] = 4;
    break;
   }
  }
 } while(0);
 $770 = (($gfp) + 200|0);
 $771 = +HEAPF32[$770>>2];
 $772 = (($1) + 84912|0);
 HEAPF32[$772>>2] = $771;
 $773 = (($gfp) + 204|0);
 $774 = +HEAPF32[$773>>2];
 $775 = (($1) + 84916|0);
 HEAPF32[$775>>2] = $774;
 $776 = (($gfp) + 256|0);
 $777 = HEAP32[$776>>2]|0;
 $778 = ($777|0)==(0);
 if (!($778)) {
  $779 = (($gfp) + 260|0);
  $780 = +HEAPF32[$779>>2];
  $781 = $780 + $771;
  HEAPF32[$772>>2] = $781;
  $782 = +HEAPF32[$779>>2];
  $783 = $782 + $774;
  HEAPF32[$775>>2] = $783;
 }
 $784 = HEAP32[$106>>2]|0;
 $785 = ($784|0)==(0);
 if ($785) {
  $$pre90 = (($gfp) + 168|0);
  $$pre$phi91Z2D = $$pre90;$836 = 0;
 } else {
  $786 = (($1) + 112|0);
  HEAP32[$786>>2] = 1;
  $787 = (($1) + 116|0);
  $788 = HEAP32[$418>>2]|0;
  $789 = ($788|0)<(16000);
  $$11 = $789 ? 8 : 14;
  HEAP32[$787>>2] = $$11;
  $790 = (($gfp) + 172|0);
  $791 = HEAP32[$790>>2]|0;
  $792 = ($791|0)==(0);
  do {
   if ($792) {
    $1097 = 1;
   } else {
    $793 = HEAP32[$2>>2]|0;
    $794 = (_FindNearestBitrate($791,$793,$788)|0);
    HEAP32[$790>>2] = $794;
    $795 = HEAP32[$2>>2]|0;
    $796 = HEAP32[$418>>2]|0;
    $797 = (_BitrateIndex($794,$795,$796)|0);
    HEAP32[$786>>2] = $797;
    $798 = ($797|0)<(0);
    if ($798) {
     $$0 = -1;
    } else {
     $1097 = $797;
     break;
    }
    STACKTOP = sp;return ($$0|0);
   }
  } while(0);
  $799 = (($gfp) + 176|0);
  $800 = HEAP32[$799>>2]|0;
  $801 = ($800|0)==(0);
  do {
   if ($801) {
    $811 = $1097;
   } else {
    $802 = HEAP32[$2>>2]|0;
    $803 = HEAP32[$418>>2]|0;
    $804 = (_FindNearestBitrate($800,$802,$803)|0);
    HEAP32[$799>>2] = $804;
    $805 = HEAP32[$2>>2]|0;
    $806 = HEAP32[$418>>2]|0;
    $807 = (_BitrateIndex($804,$805,$806)|0);
    HEAP32[$787>>2] = $807;
    $808 = ($807|0)<(0);
    if ($808) {
     $$0 = -1;
     STACKTOP = sp;return ($$0|0);
    } else {
     $$pre76 = HEAP32[$786>>2]|0;
     $811 = $$pre76;
     break;
    }
   }
  } while(0);
  $809 = HEAP32[$2>>2]|0;
  $810 = ((141224 + ($809<<6)|0) + ($811<<2)|0);
  $812 = HEAP32[$810>>2]|0;
  HEAP32[$790>>2] = $812;
  $813 = HEAP32[$787>>2]|0;
  $814 = HEAP32[$2>>2]|0;
  $815 = ((141224 + ($814<<6)|0) + ($813<<2)|0);
  $816 = HEAP32[$815>>2]|0;
  HEAP32[$799>>2] = $816;
  $817 = HEAP32[$787>>2]|0;
  $818 = HEAP32[$2>>2]|0;
  $819 = ((141224 + ($818<<6)|0) + ($817<<2)|0);
  $820 = HEAP32[$819>>2]|0;
  $821 = (($gfp) + 168|0);
  $822 = HEAP32[$821>>2]|0;
  $823 = ($820|0)<($822|0);
  $$12 = $823 ? $820 : $822;
  HEAP32[$821>>2] = $$12;
  $824 = HEAP32[$786>>2]|0;
  $825 = HEAP32[$2>>2]|0;
  $826 = ((141224 + ($825<<6)|0) + ($824<<2)|0);
  $827 = HEAP32[$826>>2]|0;
  $828 = ($827|0)>($$12|0);
  $829 = $828 ? $827 : $$12;
  HEAP32[$821>>2] = $829;
  $$pre53 = HEAP32[$106>>2]|0;
  $$pre$phi91Z2D = $821;$836 = $$pre53;
 }
 $830 = (($gfp) + 152|0);
 $831 = HEAP32[$830>>2]|0;
 $832 = (($1) + 100|0);
 HEAP32[$832>>2] = $831;
 $833 = HEAP32[$375>>2]|0;
 $834 = (($1) + 156|0);
 HEAP32[$834>>2] = $833;
 $835 = (($1) + 104|0);
 HEAP32[$835>>2] = $836;
 $837 = (($gfp) + 80|0);
 $838 = HEAP32[$837>>2]|0;
 $839 = (($1) + 85096|0);
 HEAP32[$839>>2] = $838;
 $840 = (($gfp) + 84|0);
 $841 = HEAP32[$840>>2]|0;
 $842 = (($1) + 28|0);
 HEAP32[$842>>2] = $841;
 $843 = (($gfp) + 88|0);
 $844 = HEAP32[$843>>2]|0;
 $845 = (($1) + 32|0);
 HEAP32[$845>>2] = $844;
 $846 = (($gfp) + 92|0);
 $847 = HEAP32[$846>>2]|0;
 $848 = (($1) + 36|0);
 HEAP32[$848>>2] = $847;
 $849 = (($gfp) + 96|0);
 $850 = HEAP32[$849>>2]|0;
 $851 = (($1) + 120|0);
 HEAP32[$851>>2] = $850;
 $852 = HEAP32[$$pre$phi91Z2D>>2]|0;
 $853 = (($1) + 108|0);
 HEAP32[$853>>2] = $852;
 $854 = (($gfp) + 100|0);
 $855 = +HEAPF32[$854>>2];
 $856 = (($1) + 244|0);
 HEAPF32[$856>>2] = $855;
 $857 = HEAP32[$0>>2]|0;
 $858 = (($gfp) + 44|0);
 $859 = HEAP32[$858>>2]|0;
 switch ($859|0) {
 case 5:  {
  $876 = (($857) + 28|0);
  $877 = HEAP32[$876>>2]|0;
  $878 = ($877|0)==(0);
  if ($878) {
   HEAP32[$876>>2] = 1;
  }
  $879 = (($857) + 40|0);
  HEAP32[$879>>2] = 0;
  $880 = (($857) + 44|0);
  HEAP32[$880>>2] = 0;
  $881 = (($857) + 32|0);
  $882 = HEAP32[$881>>2]|0;
  $883 = ($882|0)==(-1);
  if ($883) {
   HEAP32[$881>>2] = 1;
  }
  $884 = (($857) + 36|0);
  HEAP32[$884>>2] = 0;
  $885 = (($857) + 48|0);
  HEAP32[$885>>2] = 0;
  break;
 }
 case 8:  {
  HEAP32[$858>>2] = 7;
  label = 225;
  break;
 }
 case 7:  {
  label = 225;
  break;
 }
 case 6:  {
  $866 = (($857) + 28|0);
  $867 = HEAP32[$866>>2]|0;
  $868 = ($867|0)==(0);
  if ($868) {
   HEAP32[$866>>2] = 1;
  }
  $869 = (($857) + 40|0);
  HEAP32[$869>>2] = 0;
  $870 = (($857) + 44|0);
  HEAP32[$870>>2] = 0;
  $871 = (($857) + 32|0);
  $872 = HEAP32[$871>>2]|0;
  $873 = ($872|0)==(-1);
  if ($873) {
   HEAP32[$871>>2] = 1;
  }
  $874 = (($857) + 36|0);
  HEAP32[$874>>2] = 0;
  $875 = (($857) + 48|0);
  HEAP32[$875>>2] = 0;
  break;
 }
 case 3:  {
  $896 = (($857) + 28|0);
  $897 = HEAP32[$896>>2]|0;
  $898 = ($897|0)==(0);
  if ($898) {
   HEAP32[$896>>2] = 1;
  }
  $899 = (($857) + 40|0);
  HEAP32[$899>>2] = 1;
  $900 = (($857) + 44|0);
  HEAP32[$900>>2] = 1;
  $901 = (($857) + 32|0);
  $902 = HEAP32[$901>>2]|0;
  $903 = ($902|0)==(-1);
  if ($903) {
   HEAP32[$901>>2] = 1;
  }
  $904 = (($857) + 36|0);
  HEAP32[$904>>2] = 1;
  $905 = (($857) + 48|0);
  HEAP32[$905>>2] = 0;
  break;
 }
 case 2:  {
  $906 = (($857) + 28|0);
  $907 = HEAP32[$906>>2]|0;
  $908 = ($907|0)==(0);
  if ($908) {
   HEAP32[$906>>2] = 1;
  }
  $909 = (($857) + 85096|0);
  $910 = HEAP32[$909>>2]|0;
  $911 = ($910|0)==(0);
  if ($911) {
   HEAP32[$909>>2] = 2;
  }
  $912 = (($857) + 40|0);
  HEAP32[$912>>2] = 1;
  $913 = (($857) + 44|0);
  HEAP32[$913>>2] = 1;
  $914 = (($857) + 32|0);
  $915 = HEAP32[$914>>2]|0;
  $916 = ($915|0)==(-1);
  if ($916) {
   HEAP32[$914>>2] = 1;
  }
  $917 = (($857) + 36|0);
  HEAP32[$917>>2] = 1;
  $918 = (($857) + 48|0);
  HEAP32[$918>>2] = 0;
  break;
 }
 case 4:  {
  $886 = (($857) + 28|0);
  $887 = HEAP32[$886>>2]|0;
  $888 = ($887|0)==(0);
  if ($888) {
   HEAP32[$886>>2] = 1;
  }
  $889 = (($857) + 40|0);
  HEAP32[$889>>2] = 0;
  $890 = (($857) + 44|0);
  HEAP32[$890>>2] = 0;
  $891 = (($857) + 32|0);
  $892 = HEAP32[$891>>2]|0;
  $893 = ($892|0)==(-1);
  if ($893) {
   HEAP32[$891>>2] = 1;
  }
  $894 = (($857) + 36|0);
  HEAP32[$894>>2] = 1;
  $895 = (($857) + 48|0);
  HEAP32[$895>>2] = 0;
  break;
 }
 case 1:  {
  $919 = (($857) + 28|0);
  $920 = HEAP32[$919>>2]|0;
  $921 = ($920|0)==(0);
  if ($921) {
   HEAP32[$919>>2] = 1;
  }
  $922 = (($857) + 85096|0);
  $923 = HEAP32[$922>>2]|0;
  $924 = ($923|0)==(0);
  if ($924) {
   HEAP32[$922>>2] = 2;
  }
  $925 = (($857) + 40|0);
  HEAP32[$925>>2] = 2;
  $926 = (($857) + 44|0);
  HEAP32[$926>>2] = 1;
  $927 = (($857) + 32|0);
  $928 = HEAP32[$927>>2]|0;
  $929 = ($928|0)==(-1);
  if ($929) {
   HEAP32[$927>>2] = 1;
  }
  $930 = (($857) + 36|0);
  HEAP32[$930>>2] = 1;
  $931 = (($857) + 48|0);
  HEAP32[$931>>2] = 0;
  break;
 }
 case 0:  {
  $932 = (($857) + 28|0);
  $933 = HEAP32[$932>>2]|0;
  $934 = ($933|0)==(0);
  if ($934) {
   HEAP32[$932>>2] = 1;
  }
  $935 = (($857) + 85096|0);
  $936 = HEAP32[$935>>2]|0;
  $937 = ($936|0)==(0);
  if ($937) {
   HEAP32[$935>>2] = 2;
  }
  $938 = (($857) + 40|0);
  HEAP32[$938>>2] = 2;
  $939 = (($857) + 44|0);
  HEAP32[$939>>2] = 1;
  $940 = (($857) + 32|0);
  $941 = HEAP32[$940>>2]|0;
  $942 = ($941|0)==(-1);
  if ($942) {
   HEAP32[$940>>2] = 1;
  }
  $943 = (($857) + 36|0);
  HEAP32[$943>>2] = 1;
  $944 = (($857) + 48|0);
  HEAP32[$944>>2] = 1;
  break;
 }
 default: {
  $860 = (($857) + 28|0);
  HEAP32[$860>>2] = 0;
  $861 = (($857) + 36|0);
  ;HEAP32[$861+0>>2]=0|0;HEAP32[$861+4>>2]=0|0;HEAP32[$861+8>>2]=0|0;HEAP32[$861+12>>2]=0|0;
 }
 }
 do {
  if ((label|0) == 225) {
   $862 = (($857) + 28|0);
   HEAP32[$862>>2] = 0;
   $863 = (($857) + 36|0);
   $864 = (($857) + 48|0);
   ;HEAP32[$863+0>>2]=0|0;HEAP32[$863+4>>2]=0|0;HEAP32[$863+8>>2]=0|0;HEAP32[$863+12>>2]=0|0;
   $865 = HEAP32[$106>>2]|0;
   if (!((($865|0) == 4) | (($865|0) == 1))) {
    break;
   }
   HEAP32[$864>>2] = -1;
  }
 } while(0);
 $945 = (($gfp) + 232|0);
 $946 = HEAP32[$945>>2]|0;
 $947 = ($946|0)<(0);
 $948 = HEAP32[$68>>2]|0;
 $$30 = $947 ? 3 : $946;
 HEAP32[$948>>2] = $$30;
 $949 = (($gfp) + 236|0);
 $950 = +HEAPF32[$949>>2];
 $951 = $950;
 $952 = $951 * -0.100000000000000005551;
 $953 = (+Math_pow(10.0,(+$952)));
 $954 = $953;
 $955 = (($948) + 4|0);
 HEAPF32[$955>>2] = $954;
 $956 = (($gfp) + 240|0);
 $957 = HEAP32[$956>>2]|0;
 if ((($957|0) == 0)) {
  label = 270;
 } else if ((($957|0) == -1)) {
  HEAP32[$956>>2] = 0;
  label = 270;
 } else {
  $960 = $957;
 }
 do {
  if ((label|0) == 270) {
   $958 = HEAP32[$453>>2]|0;
   $switch = ($958>>>0)<(2);
   if (!($switch)) {
    $960 = 0;
    break;
   }
   HEAP32[$956>>2] = 1;
   $960 = 1;
  }
 } while(0);
 $959 = (($1) + 184|0);
 HEAP32[$959>>2] = $960;
 $961 = (_lame_get_quant_comp($gfp)|0);
 $962 = ($961|0)<(0);
 if ($962) {
  (_lame_set_quant_comp($gfp,1)|0);
 }
 $963 = (_lame_get_quant_comp_short($gfp)|0);
 $964 = ($963|0)<(0);
 if ($964) {
  (_lame_set_quant_comp_short($gfp,0)|0);
 }
 $965 = (+_lame_get_msfix($gfp));
 $966 = $965 < 0.0;
 if ($966) {
  _lame_set_msfix($gfp,0.0);
 }
 $967 = (_lame_get_exp_nspsytune($gfp)|0);
 $968 = $967 | 1;
 (_lame_set_exp_nspsytune($gfp,$968)|0);
 $969 = HEAP32[$715>>2]|0;
 $970 = ($969|0)<(0);
 if ($970) {
  HEAP32[$715>>2] = 4;
  $995 = 4;
 } else {
  $995 = $969;
 }
 $971 = (($gfp) + 224|0);
 $972 = +HEAPF32[$971>>2];
 $973 = $972 < 0.0;
 if ($973) {
  HEAPF32[$971>>2] = 4.0;
 }
 $974 = (($gfp) + 248|0);
 $975 = +HEAPF32[$974>>2];
 $976 = $975 < 0.0;
 if ($976) {
  HEAPF32[$974>>2] = 0.0;
  $981 = 0.0;
 } else {
  $981 = $975;
 }
 $977 = (($gfp) + 244|0);
 $978 = HEAP32[$977>>2]|0;
 $979 = ($978|0)<(0);
 if ($979) {
  HEAP32[$977>>2] = 1;
 }
 $980 = (($1) + 188|0);
 HEAPF32[$980>>2] = $981;
 $982 = (($gfp) + 252|0);
 $983 = +HEAPF32[$982>>2];
 $984 = (($1) + 192|0);
 HEAPF32[$984>>2] = $983;
 $985 = (($gfp) + 228|0);
 $986 = +HEAPF32[$985>>2];
 $987 = -$986;
 $988 = (($1) + 196|0);
 HEAPF32[$988>>2] = $987;
 $989 = $986 * -0.100000001490116119385;
 $990 = (+Math_pow(10.0,(+$989)));
 $991 = (($1) + 200|0);
 HEAPF32[$991>>2] = $990;
 $992 = +HEAPF32[$971>>2];
 $993 = (($1) + 204|0);
 HEAPF32[$993>>2] = $992;
 $994 = (($1) + 208|0);
 HEAP32[$994>>2] = $995;
 $996 = (($gfp) + 208|0);
 $997 = HEAP32[$996>>2]|0;
 $998 = (($1) + 212|0);
 HEAP32[$998>>2] = $997;
 $999 = (($gfp) + 212|0);
 $1000 = HEAP32[$999>>2]|0;
 $1001 = (($1) + 216|0);
 HEAP32[$1001>>2] = $1000;
 $1002 = (($gfp) + 216|0);
 $1003 = HEAP32[$1002>>2]|0;
 $1004 = (($1) + 220|0);
 HEAP32[$1004>>2] = $1003;
 $1005 = (($gfp) + 132|0);
 $1006 = HEAP32[$1005>>2]|0;
 $1007 = (($1) + 84|0);
 HEAP32[$1007>>2] = $1006;
 $1008 = (($gfp) + 136|0);
 $1009 = HEAP32[$1008>>2]|0;
 $1010 = (($1) + 88|0);
 HEAP32[$1010>>2] = $1009;
 $1011 = HEAP32[$977>>2]|0;
 $1012 = (($1) + 92|0);
 HEAP32[$1012>>2] = $1011;
 $1013 = (($gfp) + 148|0);
 $1014 = HEAP32[$1013>>2]|0;
 $1015 = $1014 & 2;
 $1016 = (($1) + 96|0);
 HEAP32[$1016>>2] = $1015;
 $1017 = HEAP32[$1013>>2]|0;
 $1018 = $1017 >>> 2;
 $1019 = $1018 & 63;
 $1020 = (+($1019|0));
 $1021 = (($1) + 232|0);
 $1022 = !($1020 >= 32.0);
 if ($1022) {
  $storemerge4 = $1020;
 } else {
  $1023 = $1020 + -64.0;
  $storemerge4 = $1023;
 }
 $1024 = $storemerge4 * 0.25;
 HEAPF32[$1021>>2] = $1024;
 $1025 = $1017 >>> 8;
 $1026 = $1025 & 63;
 $1027 = (+($1026|0));
 $1028 = (($1) + 228|0);
 $1029 = !($1027 >= 32.0);
 if ($1029) {
  $storemerge3 = $1027;
 } else {
  $1030 = $1027 + -64.0;
  $storemerge3 = $1030;
 }
 $1031 = $storemerge3 * 0.25;
 HEAPF32[$1028>>2] = $1031;
 $1032 = $1017 >>> 14;
 $1033 = $1032 & 63;
 $1034 = (+($1033|0));
 $1035 = (($1) + 236|0);
 $1036 = !($1034 >= 32.0);
 if ($1036) {
  $storemerge2 = $1034;
 } else {
  $1037 = $1034 + -64.0;
  $storemerge2 = $1037;
 }
 $1038 = $storemerge2 * 0.25;
 HEAPF32[$1035>>2] = $1038;
 $1039 = $1017 >>> 20;
 $1040 = $1039 & 63;
 $1041 = (+($1040|0));
 $1042 = (($1) + 240|0);
 $1043 = !($1041 >= 32.0);
 if ($1043) {
  $storemerge1 = $1041;
 } else {
  $1044 = $1041 + -64.0;
  $storemerge1 = $1044;
 }
 $1045 = $storemerge1 + $storemerge2;
 $1046 = $1045 * 0.25;
 HEAPF32[$1042>>2] = $1046;
 $1047 = (($gfp) + 20|0);
 $1048 = +HEAPF32[$1047>>2];
 $1049 = (($gfp) + 24|0);
 $1050 = +HEAPF32[$1049>>2];
 $1051 = $1048 * $1050;
 $1052 = (($gfp) + 28|0);
 $1053 = +HEAPF32[$1052>>2];
 $1054 = $1048 * $1053;
 $1055 = HEAP32[$95>>2]|0;
 $1056 = ($1055|0)==(2);
 do {
  if ($1056) {
   $1057 = HEAP32[$147>>2]|0;
   $1058 = ($1057|0)==(1);
   if (!($1058)) {
    $m10$sroa$0$0 = $1051;$m10$sroa$1$0 = 0.0;$m10$sroa$3$0 = $1054;
    break;
   }
   $1059 = $1051 * 0.5;
   $1060 = $1054 * 0.5;
   $m10$sroa$0$0 = $1059;$m10$sroa$1$0 = $1060;$m10$sroa$3$0 = 0.0;
  } else {
   $m10$sroa$0$0 = $1051;$m10$sroa$1$0 = 0.0;$m10$sroa$3$0 = $1054;
  }
 } while(0);
 $1061 = (($1) + 264|0);
 HEAPF32[$1061>>2] = $m10$sroa$0$0;
 $1062 = (($1) + 268|0);
 HEAPF32[$1062>>2] = $m10$sroa$1$0;
 $1063 = (($1) + 272|0);
 HEAPF32[$1063>>2] = 0.0;
 $1064 = (($1) + 276|0);
 HEAPF32[$1064>>2] = $m10$sroa$3$0;
 $1065 = (($1) + 39832|0);
 HEAP32[$1065>>2] = 0;
 $1066 = (($1) + 39836|0);
 HEAP32[$1066>>2] = 0;
 $1067 = HEAP32[$835>>2]|0;
 $1068 = ($1067|0)==(0);
 if ($1068) {
  $1069 = HEAP32[$2>>2]|0;
  $1070 = ($1069*72000)|0;
  $1071 = (($1070) + 72000)|0;
  $1072 = HEAP32[$851>>2]|0;
  $1073 = Math_imul($1071, $1072)|0;
  $1074 = HEAP32[$418>>2]|0;
  $1075 = (($1073|0) % ($1074|0))&-1;
  HEAP32[$1065>>2] = $1075;
  HEAP32[$1066>>2] = $1075;
 }
 $1076 = ($gfp|0)==(0|0);
 do {
  if (!($1076)) {
   $1077 = HEAP32[$gfp>>2]|0;
   $1078 = ($1077|0)==(-487877);
   if (!($1078)) {
    break;
   }
   $1079 = HEAP32[$0>>2]|0;
   $1080 = ($1079|0)==(0|0);
   if ($1080) {
    break;
   }
   $1081 = (($1079) + 84040|0);
   $1082 = (($1079) + 84748|0);
   HEAP32[$1082>>2] = 0;
   $1083 = (($gfp) + 68|0);
   $1084 = HEAP32[$1083>>2]|0;
   $1085 = ($1084|0)==(0);
   if (!($1085)) {
    (_id3tag_write_v2($gfp)|0);
   }
   $1086 = (($1079) + 85684|0);
   HEAPF32[$1086>>2] = 0.0;
   $1087 = (($1079) + 156|0);
   _memset(($1081|0),0,704)|0;
   $1088 = HEAP32[$1087>>2]|0;
   $1089 = ($1088|0)==(0);
   if ($1089) {
    break;
   }
   (_InitVbrTag($gfp)|0);
  }
 } while(0);
 _iteration_init($1);
 (_psymodel_init($gfp)|0);
 $1090 = (($gfp) + 124|0);
 $1091 = HEAP32[$1090>>2]|0;
 $1092 = (_get_max_frame_buffer_size_by_constraint($2,$1091)|0);
 $1093 = (($1) + 148|0);
 HEAP32[$1093>>2] = $1092;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _lame_init_bitstream($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($gfp|0)==(0|0);
 if ($0) {
  $$0 = -3;
 } else {
  $1 = HEAP32[$gfp>>2]|0;
  $2 = ($1|0)==(-487877);
  if ($2) {
   $3 = (($gfp) + 288|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==(0|0);
   if ($5) {
    $$0 = -3;
   } else {
    $6 = (($4) + 84040|0);
    $7 = (($4) + 84748|0);
    HEAP32[$7>>2] = 0;
    $8 = (($gfp) + 68|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = ($9|0)==(0);
    if (!($10)) {
     (_id3tag_write_v2($gfp)|0);
    }
    $11 = (($4) + 85684|0);
    HEAPF32[$11>>2] = 0.0;
    $12 = (($4) + 156|0);
    _memset(($6|0),0,704)|0;
    $13 = HEAP32[$12>>2]|0;
    $14 = ($13|0)==(0);
    if ($14) {
     $$0 = 0;
    } else {
     (_InitVbrTag($gfp)|0);
     $$0 = 0;
    }
   }
  } else {
   $$0 = -3;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_print_config($gfp) {
 $gfp = $gfp|0;
 var $$phi$trans$insert = 0, $$pre = 0, $$pre21 = 0, $$pre22 = 0, $$pre23 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0;
 var $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0.0, $9 = 0, $endptr = 0, $endptr$i10 = 0, $endptr$i13 = 0, $endptr$i7 = 0;
 var $endptr16 = 0, $endptr18 = 0, $endptr20 = 0, $or$cond = 0, $strlen = 0, $strlen$i12 = 0, $strlen$i6 = 0, $strlen$i9 = 0, $strlen15 = 0, $strlen17 = 0, $strlen19 = 0, $text = 0, $vararg_buffer24 = 0, $vararg_ptr1 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr19 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0;
 $vararg_buffer24 = sp;
 $text = sp + 16|0;
 $0 = (($gfp) + 288|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 16|0);
 $3 = (($1) + 64|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (+($4|0));
 $6 = (($1) + 60|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (+($7|0));
 $9 = (_get_lame_version()|0);
 $10 = (_get_lame_os_bitness()|0);
 $11 = (_get_lame_url()|0);
 HEAP32[$vararg_buffer24>>2] = $9;
 $vararg_ptr1 = (($vararg_buffer24) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $10;
 $vararg_ptr2 = (($vararg_buffer24) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $11;
 _lame_msgf($1,9920,$vararg_buffer24);
 $12 = (($1) + 85756|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 & 15;
 $15 = ($14|0)==(0);
 if (!($15)) {
  _memset(($text|0),0,256)|0;
  $16 = HEAP32[$12>>2]|0;
  $17 = $16 & 1;
  $18 = ($17|0)==(0);
  if ($18) {
   $20 = $16;
  } else {
   $strlen = (_strlen(($text|0))|0);
   $endptr = (($text) + ($strlen)|0);
   HEAP8[$endptr>>0]=5786957&255;HEAP8[$endptr+1>>0]=(5786957>>8)&255;HEAP8[$endptr+2>>0]=(5786957>>16)&255;HEAP8[$endptr+3>>0]=5786957>>24;
   $$pre = HEAP32[$12>>2]|0;
   $20 = $$pre;
  }
  $19 = $20 & 2;
  $21 = ($19|0)==(0);
  if ($21) {
   $25 = $20;
  } else {
   $22 = HEAP8[$text>>0]|0;
   $23 = ($22<<24>>24)==(0);
   if (!($23)) {
    $strlen$i6 = (_strlen(($text|0))|0);
    $endptr$i7 = (($text) + ($strlen$i6)|0);
    ;HEAP8[$endptr$i7+0>>0]=HEAP8[9944+0>>0]|0;HEAP8[$endptr$i7+1>>0]=HEAP8[9944+1>>0]|0;HEAP8[$endptr$i7+2>>0]=HEAP8[9944+2>>0]|0;
   }
   $strlen15 = (_strlen(($text|0))|0);
   $endptr16 = (($text) + ($strlen15)|0);
   ;HEAP8[$endptr16+0>>0]=HEAP8[9952+0>>0]|0;HEAP8[$endptr16+1>>0]=HEAP8[9952+1>>0]|0;HEAP8[$endptr16+2>>0]=HEAP8[9952+2>>0]|0;HEAP8[$endptr16+3>>0]=HEAP8[9952+3>>0]|0;HEAP8[$endptr16+4>>0]=HEAP8[9952+4>>0]|0;HEAP8[$endptr16+5>>0]=HEAP8[9952+5>>0]|0;HEAP8[$endptr16+6>>0]=HEAP8[9952+6>>0]|0;
   $$pre21 = HEAP32[$12>>2]|0;
   $25 = $$pre21;
  }
  $24 = $25 & 4;
  $26 = ($24|0)==(0);
  if ($26) {
   $30 = $25;
  } else {
   $27 = HEAP8[$text>>0]|0;
   $28 = ($27<<24>>24)==(0);
   if (!($28)) {
    $strlen$i9 = (_strlen(($text|0))|0);
    $endptr$i10 = (($text) + ($strlen$i9)|0);
    ;HEAP8[$endptr$i10+0>>0]=HEAP8[9944+0>>0]|0;HEAP8[$endptr$i10+1>>0]=HEAP8[9944+1>>0]|0;HEAP8[$endptr$i10+2>>0]=HEAP8[9944+2>>0]|0;
   }
   $strlen17 = (_strlen(($text|0))|0);
   $endptr18 = (($text) + ($strlen17)|0);
   HEAP8[$endptr18>>0]=4543315&255;HEAP8[$endptr18+1>>0]=(4543315>>8)&255;HEAP8[$endptr18+2>>0]=(4543315>>16)&255;HEAP8[$endptr18+3>>0]=4543315>>24;
   $$pre22 = HEAP32[$12>>2]|0;
   $30 = $$pre22;
  }
  $29 = $30 & 8;
  $31 = ($29|0)==(0);
  if (!($31)) {
   $32 = HEAP8[$text>>0]|0;
   $33 = ($32<<24>>24)==(0);
   if (!($33)) {
    $strlen$i12 = (_strlen(($text|0))|0);
    $endptr$i13 = (($text) + ($strlen$i12)|0);
    ;HEAP8[$endptr$i13+0>>0]=HEAP8[9944+0>>0]|0;HEAP8[$endptr$i13+1>>0]=HEAP8[9944+1>>0]|0;HEAP8[$endptr$i13+2>>0]=HEAP8[9944+2>>0]|0;
   }
   $strlen19 = (_strlen(($text|0))|0);
   $endptr20 = (($text) + ($strlen19)|0);
   ;HEAP8[$endptr20+0>>0]=HEAP8[9960+0>>0]|0;HEAP8[$endptr20+1>>0]=HEAP8[9960+1>>0]|0;HEAP8[$endptr20+2>>0]=HEAP8[9960+2>>0]|0;HEAP8[$endptr20+3>>0]=HEAP8[9960+3>>0]|0;HEAP8[$endptr20+4>>0]=HEAP8[9960+4>>0]|0;
  }
  HEAP32[$vararg_buffer24>>2] = $text;
  _lame_msgf($1,9968,$vararg_buffer24);
 }
 $34 = (($1) + 68|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)==(2);
 if ($36) {
  $37 = (($1) + 72|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($38|0)==(1);
  if ($39) {
   _lame_msgf($1,9992,$vararg_buffer24);
  }
 }
 $40 = (_isResamplingNecessary($2)|0);
 $41 = ($40|0)==(0);
 if (!($41)) {
  $42 = $8 * 0.00100000000000000002082;
  $43 = $5 * 0.00100000000000000002082;
  HEAPF64[tempDoublePtr>>3]=$42;HEAP32[$vararg_buffer24>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer24+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $vararg_ptr11 = (($vararg_buffer24) + 8|0);
  HEAPF64[tempDoublePtr>>3]=$43;HEAP32[$vararg_ptr11>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr11+4>>2]=HEAP32[tempDoublePtr+4>>2];
  _lame_msgf($1,10064,$vararg_buffer24);
 }
 $44 = (($1) + 260|0);
 $45 = +HEAPF32[$44>>2];
 $46 = $45 > 0.0;
 if ($46) {
  $47 = $45;
  $48 = (($1) + 256|0);
  $49 = +HEAPF32[$48>>2];
  $50 = $49;
  $51 = $50 * 0.5;
  $52 = $5 * $51;
  $53 = $47 * 0.5;
  $54 = $5 * $53;
  HEAPF64[tempDoublePtr>>3]=$52;HEAP32[$vararg_buffer24>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer24+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $vararg_ptr15 = (($vararg_buffer24) + 8|0);
  HEAPF64[tempDoublePtr>>3]=$54;HEAP32[$vararg_ptr15>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr15+4>>2]=HEAP32[tempDoublePtr+4>>2];
  _lame_msgf($1,10112,$vararg_buffer24);
 }
 $55 = (($1) + 248|0);
 $56 = +HEAPF32[$55>>2];
 $57 = $56 > 0.0;
 $$phi$trans$insert = (($1) + 252|0);
 $$pre23 = +HEAPF32[$$phi$trans$insert>>2];
 $58 = $$pre23 > 0.0;
 $or$cond = $57 | $58;
 if ($or$cond) {
  $59 = $56;
  $60 = $59 * 0.5;
  $61 = $5 * $60;
  $62 = $$pre23;
  $63 = $62 * 0.5;
  $64 = $5 * $63;
  HEAPF64[tempDoublePtr>>3]=$61;HEAP32[$vararg_buffer24>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer24+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $vararg_ptr19 = (($vararg_buffer24) + 8|0);
  HEAPF64[tempDoublePtr>>3]=$64;HEAP32[$vararg_ptr19>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr19+4>>2]=HEAP32[tempDoublePtr+4>>2];
  _lame_msgf($1,10184,$vararg_buffer24);
 } else {
  _lame_msgf($1,10256,$vararg_buffer24);
 }
 $65 = (($1) + 152|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = ($66|0)==(0);
 if ($67) {
  STACKTOP = sp;return;
 }
 _lame_msgf($1,10296,$vararg_buffer24);
 $68 = (($1) + 120|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = ($69|0)>(320);
 if (!($70)) {
  STACKTOP = sp;return;
 }
 _lame_msgf($1,10360,$vararg_buffer24);
 STACKTOP = sp;return;
}
function _lame_print_internals($gfp) {
 $gfp = $gfp|0;
 var $$ = 0, $$$ = 0, $$$$ = 0, $$1 = 0, $$2 = 0, $0 = 0, $1 = 0, $10 = 0.0, $100 = 0.0, $101 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0;
 var $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0;
 var $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0, $91 = 0.0, $92 = 0.0;
 var $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $pc$0 = 0, $pc$1 = 0, $pc$2 = 0, $pc$5 = 0, $vararg_buffer114 = 0, $vararg_ptr103 = 0, $vararg_ptr104 = 0, $vararg_ptr105 = 0, $vararg_ptr25 = 0, $vararg_ptr88 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer114 = sp;
 $0 = (($gfp) + 288|0);
 $1 = HEAP32[$0>>2]|0;
 _lame_msgf($1,10464,$vararg_buffer114);
 $2 = (($gfp) + 20|0);
 $3 = +HEAPF32[$2>>2];
 $4 = $3;
 HEAPF64[tempDoublePtr>>3]=$4;HEAP32[$vararg_buffer114>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer114+4>>2]=HEAP32[tempDoublePtr+4>>2];
 _lame_msgf($1,10480,$vararg_buffer114);
 $5 = (($gfp) + 24|0);
 $6 = +HEAPF32[$5>>2];
 $7 = $6;
 HEAPF64[tempDoublePtr>>3]=$7;HEAP32[$vararg_buffer114>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer114+4>>2]=HEAP32[tempDoublePtr+4>>2];
 _lame_msgf($1,10496,$vararg_buffer114);
 $8 = (($gfp) + 28|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $9;
 HEAPF64[tempDoublePtr>>3]=$10;HEAP32[$vararg_buffer114>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer114+4>>2]=HEAP32[tempDoublePtr+4>>2];
 _lame_msgf($1,10528,$vararg_buffer114);
 $11 = (($1) + 36|0);
 $12 = HEAP32[$11>>2]|0;
 if ((($12|0) == 2)) {
  $pc$0 = 10592;
 } else if ((($12|0) == 1)) {
  $pc$0 = 10568;
 } else {
  $pc$0 = 10560;
 }
 HEAP32[$vararg_buffer114>>2] = $pc$0;
 _lame_msgf($1,10624,$vararg_buffer114);
 $13 = (($gfp) + 140|0);
 $14 = HEAP32[$13>>2]|0;
 HEAP32[$vararg_buffer114>>2] = $14;
 _lame_msgf($1,10648,$vararg_buffer114);
 _lame_msgf($1,10672,$vararg_buffer114);
 _lame_msgf($1,10680,$vararg_buffer114);
 $15 = (($1) + 16|0);
 $16 = HEAP32[$15>>2]|0;
 if ((($16|0) == 0)) {
  $pc$1 = 10704;
 } else if ((($16|0) == 1)) {
  $pc$1 = 10712;
 } else if ((($16|0) == 2)) {
  $pc$1 = 10720;
 } else {
  $pc$1 = 10728;
 }
 HEAP32[$vararg_buffer114>>2] = $pc$1;
 _lame_msgf($1,10736,$vararg_buffer114);
 $17 = (($1) + 180|0);
 $18 = HEAP32[$17>>2]|0;
 switch ($18|0) {
 case 0:  {
  $pc$2 = 10776;
  break;
 }
 case 1:  {
  $pc$2 = 10760;
  break;
 }
 case 4:  {
  $pc$2 = 10808;
  break;
 }
 case 2:  {
  $pc$2 = 10784;
  break;
 }
 case 3:  {
  $pc$2 = 10800;
  break;
 }
 default: {
  $pc$2 = 10824;
 }
 }
 $19 = (($1) + 72|0);
 $20 = HEAP32[$19>>2]|0;
 HEAP32[$vararg_buffer114>>2] = $20;
 $vararg_ptr25 = (($vararg_buffer114) + 4|0);
 HEAP32[$vararg_ptr25>>2] = $pc$2;
 _lame_msgf($1,10840,$vararg_buffer114);
 $21 = (($1) + 104|0);
 $22 = HEAP32[$21>>2]|0;
 $cond = ($22|0)==(0);
 $$1 = $cond ? 10864 : 10872;
 HEAP32[$vararg_buffer114>>2] = $$1;
 _lame_msgf($1,10880,$vararg_buffer114);
 $23 = HEAP32[$21>>2]|0;
 $24 = ($23|0)==(4);
 do {
  if ($24) {
   HEAP32[$vararg_buffer114>>2] = 10896;
   _lame_msgf($1,11056,$vararg_buffer114);
  } else {
   $25 = (($1) + 152|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ($26|0)==(0);
   $$2 = $27 ? 10456 : 10912;
   if ((($23|0) == 1)) {
    HEAP32[$vararg_buffer114>>2] = $$2;
    _lame_msgf($1,11024,$vararg_buffer114);
    break;
   } else if ((($23|0) == 2)) {
    HEAP32[$vararg_buffer114>>2] = $$2;
    _lame_msgf($1,10992,$vararg_buffer114);
    break;
   } else if ((($23|0) == 3)) {
    HEAP32[$vararg_buffer114>>2] = $$2;
    _lame_msgf($1,10960,$vararg_buffer114);
    break;
   } else if ((($23|0) == 0)) {
    HEAP32[$vararg_buffer114>>2] = $$2;
    _lame_msgf($1,10928,$vararg_buffer114);
    break;
   } else {
    _lame_msgf($1,11096,$vararg_buffer114);
    break;
   }
  }
 } while(0);
 $28 = (($1) + 156|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==(0);
 if (!($30)) {
  _lame_msgf($1,11128,$vararg_buffer114);
 }
 _lame_msgf($1,10672,$vararg_buffer114);
 _lame_msgf($1,11152,$vararg_buffer114);
 $31 = (($1) + 184|0);
 $32 = HEAP32[$31>>2]|0;
 if ((($32|0) == 0)) {
  $pc$5 = 11176;
 } else if ((($32|0) == 1)) {
  $pc$5 = 11184;
 } else if ((($32|0) == 2)) {
  $pc$5 = 11200;
 } else if ((($32|0) == 3)) {
  $pc$5 = 11216;
 } else {
  $pc$5 = 10728;
 }
 HEAP32[$vararg_buffer114>>2] = $pc$5;
 _lame_msgf($1,11224,$vararg_buffer114);
 $33 = (($1) + 32|0);
 $34 = HEAP32[$33>>2]|0;
 HEAP32[$vararg_buffer114>>2] = $34;
 _lame_msgf($1,11256,$vararg_buffer114);
 $35 = (($1) + 84912|0);
 $36 = +HEAPF32[$35>>2];
 $37 = $36;
 HEAPF64[tempDoublePtr>>3]=$37;HEAP32[$vararg_buffer114>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer114+4>>2]=HEAP32[tempDoublePtr+4>>2];
 _lame_msgf($1,11280,$vararg_buffer114);
 $38 = (($1) + 84916|0);
 $39 = +HEAPF32[$38>>2];
 $40 = $39;
 HEAPF64[tempDoublePtr>>3]=$40;HEAP32[$vararg_buffer114>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer114+4>>2]=HEAP32[tempDoublePtr+4>>2];
 _lame_msgf($1,11304,$vararg_buffer114);
 $41 = (($1) + 84|0);
 $42 = HEAP32[$41>>2]|0;
 HEAP32[$vararg_buffer114>>2] = $42;
 _lame_msgf($1,11336,$vararg_buffer114);
 $43 = (($1) + 88|0);
 $44 = HEAP32[$43>>2]|0;
 HEAP32[$vararg_buffer114>>2] = $44;
 _lame_msgf($1,11368,$vararg_buffer114);
 $45 = (($1) + 28|0);
 $46 = HEAP32[$45>>2]|0;
 HEAP32[$vararg_buffer114>>2] = $46;
 _lame_msgf($1,11408,$vararg_buffer114);
 $47 = (($1) + 40|0);
 $48 = HEAP32[$47>>2]|0;
 HEAP32[$vararg_buffer114>>2] = $48;
 _lame_msgf($1,11432,$vararg_buffer114);
 $49 = (($1) + 44|0);
 $50 = HEAP32[$49>>2]|0;
 HEAP32[$vararg_buffer114>>2] = $50;
 _lame_msgf($1,11456,$vararg_buffer114);
 $51 = (($1) + 216|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ($52|0)!=(0);
 $$ = $53 ? 11488 : 11480;
 $54 = (($1) + 212|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = ($55|0)!=(0);
 $$$ = $56 ? 11528 : $$;
 $57 = (($1) + 220|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = ($58|0)!=(0);
 $$$$ = $59 ? 11552 : $$$;
 HEAP32[$vararg_buffer114>>2] = $$$$;
 _lame_msgf($1,11568,$vararg_buffer114);
 $60 = (($1) + 208|0);
 $61 = HEAP32[$60>>2]|0;
 HEAP32[$vararg_buffer114>>2] = $61;
 _lame_msgf($1,11584,$vararg_buffer114);
 $62 = (($1) + 204|0);
 $63 = +HEAPF32[$62>>2];
 $64 = $63;
 HEAPF64[tempDoublePtr>>3]=$64;HEAP32[$vararg_buffer114>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer114+4>>2]=HEAP32[tempDoublePtr+4>>2];
 $vararg_ptr88 = (($vararg_buffer114) + 8|0);
 HEAP32[$vararg_ptr88>>2] = 11624;
 _lame_msgf($1,11600,$vararg_buffer114);
 $65 = (($1) + 196|0);
 $66 = +HEAPF32[$65>>2];
 $67 = $66;
 HEAPF64[tempDoublePtr>>3]=$67;HEAP32[$vararg_buffer114>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer114+4>>2]=HEAP32[tempDoublePtr+4>>2];
 _lame_msgf($1,11648,$vararg_buffer114);
 $68 = (($1) + 85796|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = HEAP32[$69>>2]|0;
 HEAP32[$vararg_buffer114>>2] = $70;
 _lame_msgf($1,11680,$vararg_buffer114);
 $71 = HEAP32[$68>>2]|0;
 $72 = (($71) + 4|0);
 $73 = +HEAPF32[$72>>2];
 $74 = $73;
 HEAPF64[tempDoublePtr>>3]=$74;HEAP32[$vararg_buffer114>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer114+4>>2]=HEAP32[tempDoublePtr+4>>2];
 _lame_msgf($1,11704,$vararg_buffer114);
 _lame_msgf($1,11744,$vararg_buffer114);
 $75 = (($1) + 84768|0);
 $76 = +HEAPF32[$75>>2];
 $77 = $76;
 $78 = (+_log10((+$77)));
 $79 = $78 * 10.0;
 $80 = (($1) + 84796|0);
 $81 = +HEAPF32[$80>>2];
 $82 = $81;
 $83 = (+_log10((+$82)));
 $84 = $83 * 10.0;
 $85 = (($1) + 84824|0);
 $86 = +HEAPF32[$85>>2];
 $87 = $86;
 $88 = (+_log10((+$87)));
 $89 = $88 * 10.0;
 $90 = (($1) + 84852|0);
 $91 = +HEAPF32[$90>>2];
 $92 = $91;
 $93 = (+_log10((+$92)));
 $94 = $93 * 10.0;
 HEAPF64[tempDoublePtr>>3]=$79;HEAP32[$vararg_buffer114>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer114+4>>2]=HEAP32[tempDoublePtr+4>>2];
 $vararg_ptr103 = (($vararg_buffer114) + 8|0);
 HEAPF64[tempDoublePtr>>3]=$84;HEAP32[$vararg_ptr103>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr103+4>>2]=HEAP32[tempDoublePtr+4>>2];
 $vararg_ptr104 = (($vararg_buffer114) + 16|0);
 HEAPF64[tempDoublePtr>>3]=$89;HEAP32[$vararg_ptr104>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr104+4>>2]=HEAP32[tempDoublePtr+4>>2];
 $vararg_ptr105 = (($vararg_buffer114) + 24|0);
 HEAPF64[tempDoublePtr>>3]=$94;HEAP32[$vararg_ptr105>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr105+4>>2]=HEAP32[tempDoublePtr+4>>2];
 _lame_msgf($1,11792,$vararg_buffer114);
 $95 = (($1) + 92|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = ($96|0)!=(0);
 $98 = $97 ? 11864 : 11872;
 HEAP32[$vararg_buffer114>>2] = $98;
 _lame_msgf($1,11880,$vararg_buffer114);
 $99 = (($1) + 188|0);
 $100 = +HEAPF32[$99>>2];
 $101 = $100;
 HEAPF64[tempDoublePtr>>3]=$101;HEAP32[$vararg_buffer114>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer114+4>>2]=HEAP32[tempDoublePtr+4>>2];
 _lame_msgf($1,11920,$vararg_buffer114);
 _lame_msgf($1,10672,$vararg_buffer114);
 _lame_msgf($1,11960,$vararg_buffer114);
 STACKTOP = sp;return;
}
function _lame_encode_buffer($gfp,$pcm_l,$pcm_r,$nsamples,$mp3buf,$mp3buf_size) {
 $gfp = $gfp|0;
 $pcm_l = $pcm_l|0;
 $pcm_r = $pcm_r|0;
 $nsamples = $nsamples|0;
 $mp3buf = $mp3buf|0;
 $mp3buf_size = $mp3buf_size|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lame_encode_buffer_template($gfp,$pcm_l,$pcm_r,$nsamples,$mp3buf,$mp3buf_size,0,1,1.0)|0);
 STACKTOP = sp;return ($0|0);
}
function _lame_encode_buffer_template($gfp,$buffer_l,$buffer_r,$nsamples,$mp3buf,$mp3buf_size,$pcm_type,$aa,$norm) {
 $gfp = $gfp|0;
 $buffer_l = $buffer_l|0;
 $buffer_r = $buffer_r|0;
 $nsamples = $nsamples|0;
 $mp3buf = $mp3buf|0;
 $mp3buf_size = $mp3buf_size|0;
 $pcm_type = $pcm_type|0;
 $aa = $aa|0;
 $norm = +$norm;
 var $$$i1 = 0, $$0 = 0, $$01$i = 0, $$01$ph$i = 0, $$02$ph$i = 0, $$idx$val$i = 0, $$mux = 0, $$not = 0, $$phi$trans$insert = 0, $$pr14$i = 0, $$pre = 0, $$pre$phi$iZ2D = 0, $$pre12 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $ch$04$us$i = 0, $exitcond = 0, $exitcond10 = 0, $i$03$us$i = 0, $in_buffer$sroa$0$0$i = 0, $in_buffer$sroa$0$0$ph$i = 0, $in_buffer$sroa$1$0$i = 0, $in_buffer$sroa$1$0$ph$i = 0, $in_buffer$sroa$1$1$i = 0, $in_buffer_ptr$i = 0, $mp3size$0$ph$i = 0, $n_in$i = 0, $n_out$i = 0, $or$cond = 0, $or$cond$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $in_buffer_ptr$i = sp + 16|0;
 $n_in$i = sp + 12|0;
 $n_out$i = sp + 8|0;
 $0 = ($gfp|0)==(0|0);
 if ($0) {
  $$0 = -3;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = HEAP32[$gfp>>2]|0;
 $2 = ($1|0)==(-487877);
 if (!($2)) {
  $$0 = -3;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($gfp) + 288|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$0 = -3;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = HEAP32[$4>>2]|0;
 $7 = ($6|0)==(-487877);
 if (!($7)) {
  $$0 = -3;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = ($nsamples|0)==(0);
 if ($8) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = (($4) + 52152|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 do {
  if ($11) {
   label = 10;
  } else {
   $12 = (($4) + 52148|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)<($nsamples|0);
   if ($14) {
    _free($10);
    label = 10;
    break;
   } else {
    $$phi$trans$insert = (($4) + 52156|0);
    $$pre12 = HEAP32[$$phi$trans$insert>>2]|0;
    $$pr14$i = $10;$24 = $$pre12;
    label = 13;
    break;
   }
  }
 } while(0);
 if ((label|0) == 10) {
  $15 = (($4) + 52156|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)==(0|0);
  if (!($17)) {
   _free($16);
  }
  $18 = (_calloc($nsamples,4)|0);
  HEAP32[$9>>2] = $18;
  $19 = (_calloc($nsamples,4)|0);
  HEAP32[$15>>2] = $19;
  $20 = (($4) + 52148|0);
  HEAP32[$20>>2] = $nsamples;
  $21 = ($18|0)==(0|0);
  if ($21) {
   $$pre$phi$iZ2D = $15;$26 = $19;
  } else {
   $$pr14$i = $18;$24 = $19;
   label = 13;
  }
 }
 do {
  if ((label|0) == 13) {
   $22 = (($4) + 52156|0);
   $23 = ($24|0)==(0|0);
   if ($23) {
    _free($$pr14$i);
    $$pre = HEAP32[$22>>2]|0;
    $$pre$phi$iZ2D = $22;$26 = $$pre;
    break;
   }
   $28 = (($4) + 68|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ($29|0)>(1);
   $31 = ($buffer_l|0)==(0|0);
   do {
    if ($30) {
     $32 = ($buffer_r|0)==(0|0);
     $or$cond = $31 | $32;
     if ($or$cond) {
      $$0 = 0;
      STACKTOP = sp;return ($$0|0);
     } else {
      _lame_copy_inbuffer($4,$buffer_l,$buffer_r,$nsamples,$pcm_type,$aa,$norm);
      break;
     }
    } else {
     if ($31) {
      $$0 = 0;
      STACKTOP = sp;return ($$0|0);
     } else {
      _lame_copy_inbuffer($4,$buffer_l,$buffer_l,$nsamples,$pcm_type,$aa,$norm);
      break;
     }
    }
   } while(0);
   $33 = (($4) + 76|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ($34*576)|0;
   $36 = HEAP32[$4>>2]|0;
   $$not = ($36|0)!=(-487877);
   $$mux = $$not ? -3 : 0;
   if ($$not) {
    $$0 = $$mux;
    STACKTOP = sp;return ($$0|0);
   }
   $37 = (_copy_buffer($4,$mp3buf,$mp3buf_size,0)|0);
   $38 = ($37|0)<(0);
   if ($38) {
    $$0 = $37;
    STACKTOP = sp;return ($$0|0);
   }
   $39 = (($mp3buf) + ($37)|0);
   $40 = HEAP32[$9>>2]|0;
   $41 = HEAP32[$22>>2]|0;
   $$idx$val$i = HEAP32[$33>>2]|0;
   $42 = ($$idx$val$i*576)|0;
   $43 = (($42) + 752)|0;
   $44 = (($4) + 52160|0);
   HEAP32[$vararg_buffer>>2] = $44;
   $45 = (($4) + 68096|0);
   $46 = (($vararg_buffer) + 4|0);
   HEAP32[$46>>2] = $45;
   $47 = (($in_buffer_ptr$i) + 4|0);
   $48 = (($4) + 128|0);
   $49 = (($4) + 72|0);
   $50 = (($4) + 84036|0);
   $51 = (($4) + 84032|0);
   $52 = (($4) + 136|0);
   $53 = (($4) + 85676|0);
   $54 = ($mp3buf_size|0)==(0);
   $55 = Math_imul($34, -576)|0;
   $$01$ph$i = $nsamples;$$02$ph$i = $39;$in_buffer$sroa$0$0$ph$i = $40;$in_buffer$sroa$1$0$ph$i = $41;$mp3size$0$ph$i = $37;
   L47: while(1) {
    $$01$i = $$01$ph$i;$in_buffer$sroa$0$0$i = $in_buffer$sroa$0$0$ph$i;$in_buffer$sroa$1$0$i = $in_buffer$sroa$1$0$ph$i;
    while(1) {
     $56 = ($$01$i|0)>(0);
     if (!($56)) {
      $$0 = $mp3size$0$ph$i;
      label = 42;
      break L47;
     }
     HEAP32[$n_in$i>>2] = 0;
     HEAP32[$n_out$i>>2] = 0;
     HEAP32[$in_buffer_ptr$i>>2] = $in_buffer$sroa$0$0$i;
     HEAP32[$47>>2] = $in_buffer$sroa$1$0$i;
     _fill_buffer($4,$vararg_buffer,$in_buffer_ptr$i,$$01$i,$n_in$i,$n_out$i);
     $57 = HEAP32[$48>>2]|0;
     $58 = ($57|0)==(0);
     if (!($58)) {
      $59 = HEAP32[$52>>2]|0;
      $60 = ($59|0)==(0);
      if ($60) {
       $61 = HEAP32[$53>>2]|0;
       $62 = HEAP32[$50>>2]|0;
       $63 = HEAP32[$vararg_buffer>>2]|0;
       $64 = (($63) + ($62<<2)|0);
       $65 = HEAP32[$46>>2]|0;
       $66 = (($65) + ($62<<2)|0);
       $67 = HEAP32[$n_out$i>>2]|0;
       $68 = HEAP32[$49>>2]|0;
       $69 = (_AnalyzeSamples($61,$64,$66,$67,$68)|0);
       $70 = ($69|0)==(0);
       if ($70) {
        $$0 = -6;
        label = 42;
        break L47;
       }
      }
     }
     $71 = HEAP32[$n_in$i>>2]|0;
     $72 = (($$01$i) - ($71))|0;
     $73 = (($in_buffer$sroa$0$0$i) + ($71<<2)|0);
     $74 = HEAP32[$49>>2]|0;
     $75 = ($74|0)==(2);
     if ($75) {
      $76 = (($in_buffer$sroa$1$0$i) + ($71<<2)|0);
      $in_buffer$sroa$1$1$i = $76;
     } else {
      $in_buffer$sroa$1$1$i = $in_buffer$sroa$1$0$i;
     }
     $77 = HEAP32[$n_out$i>>2]|0;
     $78 = HEAP32[$50>>2]|0;
     $79 = (($78) + ($77))|0;
     HEAP32[$50>>2] = $79;
     $80 = HEAP32[$51>>2]|0;
     $81 = ($80|0)<(1);
     if ($81) {
      HEAP32[$51>>2] = 1728;
      $83 = 1728;
     } else {
      $83 = $80;
     }
     $82 = (($83) + ($77))|0;
     HEAP32[$51>>2] = $82;
     $84 = ($79|0)<($43|0);
     if ($84) {
      $$01$i = $72;$in_buffer$sroa$0$0$i = $73;$in_buffer$sroa$1$0$i = $in_buffer$sroa$1$1$i;
     } else {
      break;
     }
    }
    $85 = (($mp3buf_size) - ($mp3size$0$ph$i))|0;
    $$$i1 = $54 ? 0 : $85;
    $86 = HEAP32[$vararg_buffer>>2]|0;
    $87 = HEAP32[$46>>2]|0;
    $88 = (_lame_encode_mp3_frame($4,$86,$87,$$02$ph$i,$$$i1)|0);
    $89 = ($88|0)<(0);
    if ($89) {
     $$0 = $88;
     label = 42;
     break;
    }
    $90 = (($$02$ph$i) + ($88)|0);
    $91 = (($88) + ($mp3size$0$ph$i))|0;
    $92 = HEAP32[$50>>2]|0;
    $93 = (($92) - ($35))|0;
    HEAP32[$50>>2] = $93;
    $94 = HEAP32[$51>>2]|0;
    $95 = (($94) - ($35))|0;
    HEAP32[$51>>2] = $95;
    $96 = HEAP32[$49>>2]|0;
    $97 = ($96|0)>(0);
    $98 = ($93|0)>(0);
    $or$cond$i = $97 & $98;
    if (!($or$cond$i)) {
     $$01$ph$i = $72;$$02$ph$i = $90;$in_buffer$sroa$0$0$ph$i = $73;$in_buffer$sroa$1$0$ph$i = $in_buffer$sroa$1$1$i;$mp3size$0$ph$i = $91;
     continue;
    }
    $99 = (($55) + ($92))|0;
    $ch$04$us$i = 0;
    while(1) {
     $107 = (($vararg_buffer) + ($ch$04$us$i<<2)|0);
     $103 = HEAP32[$107>>2]|0;
     $i$03$us$i = 0;
     while(1) {
      $101 = (($i$03$us$i) + ($35))|0;
      $102 = (($103) + ($101<<2)|0);
      $104 = +HEAPF32[$102>>2];
      $105 = (($103) + ($i$03$us$i<<2)|0);
      HEAPF32[$105>>2] = $104;
      $106 = (($i$03$us$i) + 1)|0;
      $exitcond = ($106|0)==($99|0);
      if ($exitcond) {
       break;
      } else {
       $i$03$us$i = $106;
      }
     }
     $100 = (($ch$04$us$i) + 1)|0;
     $exitcond10 = ($100|0)==($96|0);
     if ($exitcond10) {
      $$01$ph$i = $72;$$02$ph$i = $90;$in_buffer$sroa$0$0$ph$i = $73;$in_buffer$sroa$1$0$ph$i = $in_buffer$sroa$1$1$i;$mp3size$0$ph$i = $91;
      continue L47;
     } else {
      $ch$04$us$i = $100;
     }
    }
   }
   if ((label|0) == 42) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $25 = ($26|0)==(0|0);
 if (!($25)) {
  _free($26);
 }
 HEAP32[$9>>2] = 0;
 HEAP32[$$pre$phi$iZ2D>>2] = 0;
 $27 = (($4) + 52148|0);
 HEAP32[$27>>2] = 0;
 _lame_errorf($4,12120,$vararg_buffer);
 $$0 = -2;
 STACKTOP = sp;return ($$0|0);
}
function _lame_encode_buffer_float($gfp,$pcm_l,$pcm_r,$nsamples,$mp3buf,$mp3buf_size) {
 $gfp = $gfp|0;
 $pcm_l = $pcm_l|0;
 $pcm_r = $pcm_r|0;
 $nsamples = $nsamples|0;
 $mp3buf = $mp3buf|0;
 $mp3buf_size = $mp3buf_size|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lame_encode_buffer_template($gfp,$pcm_l,$pcm_r,$nsamples,$mp3buf,$mp3buf_size,3,1,1.0)|0);
 STACKTOP = sp;return ($0|0);
}
function _lame_encode_buffer_ieee_float($gfp,$pcm_l,$pcm_r,$nsamples,$mp3buf,$mp3buf_size) {
 $gfp = $gfp|0;
 $pcm_l = $pcm_l|0;
 $pcm_r = $pcm_r|0;
 $nsamples = $nsamples|0;
 $mp3buf = $mp3buf|0;
 $mp3buf_size = $mp3buf_size|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lame_encode_buffer_template($gfp,$pcm_l,$pcm_r,$nsamples,$mp3buf,$mp3buf_size,3,1,32767.0)|0);
 STACKTOP = sp;return ($0|0);
}
function _lame_encode_buffer_interleaved_ieee_float($gfp,$pcm,$nsamples,$mp3buf,$mp3buf_size) {
 $gfp = $gfp|0;
 $pcm = $pcm|0;
 $nsamples = $nsamples|0;
 $mp3buf = $mp3buf|0;
 $mp3buf_size = $mp3buf_size|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pcm) + 4|0);
 $1 = (_lame_encode_buffer_template($gfp,$pcm,$0,$nsamples,$mp3buf,$mp3buf_size,3,2,32767.0)|0);
 STACKTOP = sp;return ($1|0);
}
function _lame_encode_buffer_ieee_double($gfp,$pcm_l,$pcm_r,$nsamples,$mp3buf,$mp3buf_size) {
 $gfp = $gfp|0;
 $pcm_l = $pcm_l|0;
 $pcm_r = $pcm_r|0;
 $nsamples = $nsamples|0;
 $mp3buf = $mp3buf|0;
 $mp3buf_size = $mp3buf_size|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lame_encode_buffer_template($gfp,$pcm_l,$pcm_r,$nsamples,$mp3buf,$mp3buf_size,4,1,32767.0)|0);
 STACKTOP = sp;return ($0|0);
}
function _lame_encode_buffer_interleaved_ieee_double($gfp,$pcm,$nsamples,$mp3buf,$mp3buf_size) {
 $gfp = $gfp|0;
 $pcm = $pcm|0;
 $nsamples = $nsamples|0;
 $mp3buf = $mp3buf|0;
 $mp3buf_size = $mp3buf_size|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pcm) + 8|0);
 $1 = (_lame_encode_buffer_template($gfp,$pcm,$0,$nsamples,$mp3buf,$mp3buf_size,4,2,32767.0)|0);
 STACKTOP = sp;return ($1|0);
}
function _lame_encode_buffer_int($gfp,$pcm_l,$pcm_r,$nsamples,$mp3buf,$mp3buf_size) {
 $gfp = $gfp|0;
 $pcm_l = $pcm_l|0;
 $pcm_r = $pcm_r|0;
 $nsamples = $nsamples|0;
 $mp3buf = $mp3buf|0;
 $mp3buf_size = $mp3buf_size|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lame_encode_buffer_template($gfp,$pcm_l,$pcm_r,$nsamples,$mp3buf,$mp3buf_size,1,1,1.52587890625E-5)|0);
 STACKTOP = sp;return ($0|0);
}
function _lame_encode_buffer_long2($gfp,$pcm_l,$pcm_r,$nsamples,$mp3buf,$mp3buf_size) {
 $gfp = $gfp|0;
 $pcm_l = $pcm_l|0;
 $pcm_r = $pcm_r|0;
 $nsamples = $nsamples|0;
 $mp3buf = $mp3buf|0;
 $mp3buf_size = $mp3buf_size|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lame_encode_buffer_template($gfp,$pcm_l,$pcm_r,$nsamples,$mp3buf,$mp3buf_size,2,1,1.52587890625E-5)|0);
 STACKTOP = sp;return ($0|0);
}
function _lame_encode_buffer_long($gfp,$pcm_l,$pcm_r,$nsamples,$mp3buf,$mp3buf_size) {
 $gfp = $gfp|0;
 $pcm_l = $pcm_l|0;
 $pcm_r = $pcm_r|0;
 $nsamples = $nsamples|0;
 $mp3buf = $mp3buf|0;
 $mp3buf_size = $mp3buf_size|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lame_encode_buffer_template($gfp,$pcm_l,$pcm_r,$nsamples,$mp3buf,$mp3buf_size,2,1,1.0)|0);
 STACKTOP = sp;return ($0|0);
}
function _lame_encode_buffer_interleaved($gfp,$pcm,$nsamples,$mp3buf,$mp3buf_size) {
 $gfp = $gfp|0;
 $pcm = $pcm|0;
 $nsamples = $nsamples|0;
 $mp3buf = $mp3buf|0;
 $mp3buf_size = $mp3buf_size|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pcm) + 2|0);
 $1 = (_lame_encode_buffer_template($gfp,$pcm,$0,$nsamples,$mp3buf,$mp3buf_size,0,2,1.0)|0);
 STACKTOP = sp;return ($1|0);
}
function _lame_encode_flush_nogap($gfp,$mp3buffer,$mp3buffer_size) {
 $gfp = $gfp|0;
 $mp3buffer = $mp3buffer|0;
 $mp3buffer_size = $mp3buffer_size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $rc$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($gfp|0)==(0|0);
 if ($0) {
  $rc$0 = -3;
 } else {
  $1 = HEAP32[$gfp>>2]|0;
  $2 = ($1|0)==(-487877);
  if ($2) {
   $3 = (($gfp) + 288|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==(0|0);
   if ($5) {
    $rc$0 = -3;
   } else {
    $6 = HEAP32[$4>>2]|0;
    $7 = ($6|0)==(-487877);
    if ($7) {
     _flush_bitstream($4);
     $8 = (_copy_buffer($4,$mp3buffer,$mp3buffer_size,1)|0);
     _save_gain_values($4);
     $rc$0 = $8;
    } else {
     $rc$0 = -3;
    }
   }
  } else {
   $rc$0 = -3;
  }
 }
 STACKTOP = sp;return ($rc$0|0);
}
function _save_gain_values($gfc) {
 $gfc = $gfc|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, $fabsf = 0.0;
 var $fabsf1 = 0.0, $floorf = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($gfc) + 85680|0);
 $1 = (($gfc) + 128|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 do {
  if (!($3)) {
   $4 = (($gfc) + 85676|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = (+_GetTitleGain($5));
   $7 = $6;
   $fabsf = (+Math_abs((+$6)));
   $8 = $fabsf > 24601.0;
   $9 = $6 + 24601.0;
   $fabsf1 = (+Math_abs((+$9)));
   $10 = $fabsf1;
   if ($8) {
    $11 = $fabsf;
    $12 = $11 * 9.99999997475242707878E-7;
    $13 = !($10 <= $12);
    if ($13) {
     label = 5;
    } else {
     label = 6;
    }
   } else {
    $14 = !($10 <= 0.0246009999378884458565);
    if ($14) {
     label = 5;
    } else {
     label = 6;
    }
   }
   if ((label|0) == 5) {
    $15 = $7 * 10.0;
    $16 = $15 + 0.5;
    $17 = (+Math_floor((+$16)));
    $18 = (~~(($17)));
    $19 = (($gfc) + 85688|0);
    HEAP32[$19>>2] = $18;
    break;
   }
   else if ((label|0) == 6) {
    $20 = (($gfc) + 85688|0);
    HEAP32[$20>>2] = 0;
    break;
   }
  }
 } while(0);
 $21 = (($gfc) + 132|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==(0);
 if ($23) {
  STACKTOP = sp;return;
 }
 $24 = (($gfc) + 85684|0);
 $25 = +HEAPF32[$24>>2];
 $26 = $25;
 $27 = $26 * 3.05185094759971922707E-5;
 $28 = (+_log10((+$27)));
 $29 = $28 * 200.0;
 $30 = (+Math_ceil((+$29)));
 $31 = (~~(($30)));
 $32 = (($gfc) + 85692|0);
 HEAP32[$32>>2] = $31;
 $33 = ($31|0)>(0);
 if ($33) {
  $34 = +HEAPF32[$24>>2];
  $35 = 3276700.0 / $34;
  $floorf = (+Math_floor((+$35)));
  $36 = $floorf;
  $37 = $36 * 0.0100000000000000002082;
  $38 = $37;
  HEAPF32[$0>>2] = $38;
  STACKTOP = sp;return;
 } else {
  HEAPF32[$0>>2] = -1.0;
  STACKTOP = sp;return;
 }
}
function _lame_encode_flush($gfp,$mp3buffer,$mp3buffer_size) {
 $gfp = $gfp|0;
 $mp3buffer = $mp3buffer|0;
 $mp3buffer_size = $mp3buffer_size|0;
 var $$ = 0, $$$ = 0, $$$$us = 0, $$$us = 0, $$0 = 0, $$04$lcssa = 0, $$04$lcssa20 = 0, $$0411 = 0, $$0411$us = 0, $$2 = 0, $$3 = 0, $$5 = 0, $$6 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $buffer = 0, $frames_left$09 = 0, $frames_left$09$us = 0, $imp3$0$lcssa = 0, $mp3count$0$lcssa = 0, $mp3count$0$lcssa21 = 0, $mp3count$010 = 0, $mp3count$010$us = 0, $or$cond = 0, $or$cond$us = 0, $resample_ratio$0 = 0.0, $samples_to_encode$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4608|0;
 $buffer = sp;
 $0 = ($gfp|0)==(0|0);
 if ($0) {
  $$0 = -3;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = HEAP32[$gfp>>2]|0;
 $2 = ($1|0)==(-487877);
 if (!($2)) {
  $$0 = -3;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($gfp) + 288|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$0 = -3;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = HEAP32[$4>>2]|0;
 $7 = ($6|0)==(-487877);
 if (!($7)) {
  $$0 = -3;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = (($4) + 84032|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)<(1);
 if ($10) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = (($4) + 16|0);
 $12 = (($4) + 76|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13*576)|0;
 $15 = (($14) + 752)|0;
 $16 = (($9) + -1152)|0;
 _memset(($buffer|0),0,4608)|0;
 $17 = (_isResamplingNecessary($11)|0);
 $18 = ($17|0)==(0);
 if ($18) {
  $resample_ratio$0 = 1.0;$samples_to_encode$0 = $16;
 } else {
  $19 = (($4) + 60|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (+($20|0));
  $22 = (($4) + 64|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (+($23|0));
  $25 = $21 / $24;
  $26 = 16.0 / $25;
  $27 = (+($16|0));
  $28 = $27 + $26;
  $29 = (~~(($28)));
  $resample_ratio$0 = $25;$samples_to_encode$0 = $29;
 }
 $30 = (($samples_to_encode$0|0) % ($14|0))&-1;
 $31 = (($14) - ($30))|0;
 $32 = ($31|0)<(576);
 $33 = $32 ? $14 : 0;
 $$5 = (($33) + ($31))|0;
 $34 = (($4) + 84764|0);
 HEAP32[$34>>2] = $$5;
 $35 = (($$5) + ($samples_to_encode$0))|0;
 $36 = (($35|0) / ($14|0))&-1;
 $37 = ($36|0)>(0);
 if ($37) {
  $38 = (($4) + 84748|0);
  $39 = (($4) + 84036|0);
  $40 = ($mp3buffer_size|0)==(0);
  $41 = (($buffer) + 2304|0);
  $$pre = HEAP32[$38>>2]|0;
  if ($40) {
   $$0411$us = $mp3buffer;$54 = $$pre;$frames_left$09$us = $36;$mp3count$010$us = 0;
   while(1) {
    $42 = HEAP32[$39>>2]|0;
    $43 = (($15) - ($42))|0;
    $44 = (+($43|0));
    $45 = $resample_ratio$0 * $44;
    $46 = (~~(($45)));
    $47 = ($46|0)>(1152);
    $$$us = $47 ? 1152 : $46;
    $48 = ($$$us|0)<(1);
    $$$$us = $48 ? 1 : $$$us;
    $49 = (_lame_encode_buffer_template($gfp,$buffer,$41,$$$$us,$$0411$us,0,0,1,1.0)|0);
    $50 = (($$0411$us) + ($49)|0);
    $51 = (($49) + ($mp3count$010$us))|0;
    $52 = HEAP32[$38>>2]|0;
    $53 = ($54|0)!=($52|0);
    $55 = $53&1;
    $56 = (($frames_left$09$us) - ($55))|0;
    $57 = ($56|0)>(0);
    $58 = ($49|0)>(-1);
    $or$cond$us = $57 & $58;
    if ($or$cond$us) {
     $$0411$us = $50;$54 = $52;$frames_left$09$us = $56;$mp3count$010$us = $51;
    } else {
     $$04$lcssa = $50;$imp3$0$lcssa = $49;$mp3count$0$lcssa = $51;
     break;
    }
   }
  } else {
   $$0411 = $mp3buffer;$72 = $$pre;$frames_left$09 = $36;$mp3count$010 = 0;
   while(1) {
    $59 = HEAP32[$39>>2]|0;
    $60 = (($15) - ($59))|0;
    $61 = (+($60|0));
    $62 = $resample_ratio$0 * $61;
    $63 = (~~(($62)));
    $64 = ($63|0)>(1152);
    $$ = $64 ? 1152 : $63;
    $65 = ($$|0)<(1);
    $$$ = $65 ? 1 : $$;
    $66 = (($mp3buffer_size) - ($mp3count$010))|0;
    $67 = (_lame_encode_buffer_template($gfp,$buffer,$41,$$$,$$0411,$66,0,1,1.0)|0);
    $68 = (($$0411) + ($67)|0);
    $69 = (($67) + ($mp3count$010))|0;
    $70 = HEAP32[$38>>2]|0;
    $71 = ($72|0)!=($70|0);
    $73 = $71&1;
    $74 = (($frames_left$09) - ($73))|0;
    $75 = ($74|0)>(0);
    $76 = ($67|0)>(-1);
    $or$cond = $75 & $76;
    if ($or$cond) {
     $$0411 = $68;$72 = $70;$frames_left$09 = $74;$mp3count$010 = $69;
    } else {
     $$04$lcssa = $68;$imp3$0$lcssa = $67;$mp3count$0$lcssa = $69;
     break;
    }
   }
  }
  HEAP32[$8>>2] = 0;
  $77 = ($imp3$0$lcssa|0)<(0);
  if ($77) {
   $$0 = $imp3$0$lcssa;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$04$lcssa20 = $$04$lcssa;$mp3count$0$lcssa21 = $mp3count$0$lcssa;
  }
 } else {
  HEAP32[$8>>2] = 0;
  $$04$lcssa20 = $mp3buffer;$mp3count$0$lcssa21 = 0;
 }
 $78 = (($mp3buffer_size) - ($mp3count$0$lcssa21))|0;
 $79 = ($mp3buffer_size|0)==(0);
 $$2 = $79 ? 0 : $78;
 _flush_bitstream($4);
 $80 = (_copy_buffer($4,$$04$lcssa20,$$2,1)|0);
 _save_gain_values($4);
 $81 = ($80|0)<(0);
 if ($81) {
  $$0 = $80;
  STACKTOP = sp;return ($$0|0);
 }
 $82 = (($80) + ($mp3count$0$lcssa21))|0;
 $83 = (($gfp) + 68|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = ($84|0)==(0);
 if ($85) {
  $$0 = $82;
  STACKTOP = sp;return ($$0|0);
 }
 $86 = (($mp3buffer_size) - ($82))|0;
 $$3 = $79 ? 0 : $86;
 $87 = (($$04$lcssa20) + ($80)|0);
 (_id3tag_write_v1($gfp)|0);
 $88 = (_copy_buffer($4,$87,$$3,0)|0);
 $89 = ($88|0)<(0);
 $90 = $89 ? 0 : $82;
 $$6 = (($90) + ($88))|0;
 $$0 = $$6;
 STACKTOP = sp;return ($$0|0);
}
function _lame_close($gfp) {
 $gfp = $gfp|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ret$02 = 0, $ret$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($gfp|0)==(0|0);
 if ($0) {
  $ret$1 = 0;
 } else {
  $1 = HEAP32[$gfp>>2]|0;
  $2 = ($1|0)==(-487877);
  if ($2) {
   $3 = (($gfp) + 288|0);
   $4 = HEAP32[$3>>2]|0;
   HEAP32[$gfp>>2] = 0;
   $5 = ($4|0)==(0|0);
   if ($5) {
    $ret$02 = -3;
   } else {
    $6 = HEAP32[$4>>2]|0;
    $7 = ($6|0)==(-487877);
    $$ = $7 ? 0 : -3;
    HEAP32[$4>>2] = 0;
    _freegfc($4);
    HEAP32[$3>>2] = 0;
    $ret$02 = $$;
   }
   $8 = (($gfp) + 284|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(0);
   if ($10) {
    $ret$1 = $ret$02;
   } else {
    _free($gfp);
    $ret$1 = $ret$02;
   }
  } else {
   $ret$1 = 0;
  }
 }
 STACKTOP = sp;return ($ret$1|0);
}
function _lame_encode_finish($gfp,$mp3buffer,$mp3buffer_size) {
 $gfp = $gfp|0;
 $mp3buffer = $mp3buffer|0;
 $mp3buffer_size = $mp3buffer_size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lame_encode_flush($gfp,$mp3buffer,$mp3buffer_size)|0);
 $1 = ($gfp|0)==(0|0);
 if (!($1)) {
  $2 = HEAP32[$gfp>>2]|0;
  $3 = ($2|0)==(-487877);
  if ($3) {
   $4 = (($gfp) + 288|0);
   $5 = HEAP32[$4>>2]|0;
   HEAP32[$gfp>>2] = 0;
   $6 = ($5|0)==(0|0);
   if (!($6)) {
    HEAP32[$5>>2] = 0;
    _freegfc($5);
    HEAP32[$4>>2] = 0;
   }
   $7 = (($gfp) + 284|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==(0);
   if (!($9)) {
    _free($gfp);
   }
  }
 }
 STACKTOP = sp;return ($0|0);
}
function _lame_mp3_tags_fid($gfp,$fpStream) {
 $gfp = $gfp|0;
 $fpStream = $fpStream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer3 = sp;
 $0 = ($gfp|0)==(0|0);
 do {
  if (!($0)) {
   $1 = HEAP32[$gfp>>2]|0;
   $2 = ($1|0)==(-487877);
   if ($2) {
    $3 = (($gfp) + 288|0);
    $4 = HEAP32[$3>>2]|0;
    $5 = ($4|0)==(0|0);
    if (!($5)) {
     $6 = HEAP32[$4>>2]|0;
     $7 = ($6|0)==(-487877);
     if ($7) {
      $8 = (($4) + 156|0);
      $9 = HEAP32[$8>>2]|0;
      $10 = ($9|0)==(0);
      $11 = ($fpStream|0)==(0|0);
      $or$cond = $10 | $11;
      if (!($or$cond)) {
       $12 = (_fseek(($fpStream|0),0,0)|0);
       $13 = ($12|0)==(0);
       if ($13) {
        $14 = (_PutVbrTag($gfp,$fpStream)|0);
        if ((($14|0) == -2)) {
         _lame_errorf($4,12008,$vararg_buffer3);
         break;
        } else if ((($14|0) == -1)) {
         _lame_errorf($4,11968,$vararg_buffer3);
         break;
        } else if ((($14|0) == -3)) {
         _lame_errorf($4,12064,$vararg_buffer3);
         break;
        } else {
         break;
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function _lame_init() {
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _init_log_table();
 $0 = (_calloc(1,304)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 _memset(($0|0),0,304)|0;
 HEAP32[$0>>2] = -487877;
 $2 = (_calloc(1,85840)|0);
 $3 = (($0) + 288|0);
 HEAP32[$3>>2] = $2;
 $4 = ($2|0)==(0|0);
 if ($4) {
  _free($0);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $5 = (($0) + 124|0);
  HEAP32[$5>>2] = 2;
  $6 = (($0) + 48|0);
  HEAP32[$6>>2] = 4;
  $7 = (($0) + 108|0);
  HEAP32[$7>>2] = 1;
  $8 = (($0) + 12|0);
  HEAP32[$8>>2] = 44100;
  $9 = (($0) + 8|0);
  HEAP32[$9>>2] = 2;
  $10 = (($0) + 4|0);
  HEAP32[$10>>2] = -1;
  $11 = (($0) + 36|0);
  HEAP32[$11>>2] = 1;
  $12 = (($0) + 44|0);
  HEAP32[$12>>2] = -1;
  $13 = (($0) + 240|0);
  HEAP32[$13>>2] = -1;
  $14 = (($0) + 88|0);
  HEAP32[$14>>2] = -1;
  $15 = (($0) + 184|0);
  HEAP32[$15>>2] = 0;
  $16 = (($0) + 188|0);
  HEAP32[$16>>2] = 0;
  $17 = (($0) + 192|0);
  HEAP32[$17>>2] = -1;
  $18 = (($0) + 196|0);
  HEAP32[$18>>2] = -1;
  $19 = (($0) + 156|0);
  HEAP32[$19>>2] = 0;
  $20 = (($0) + 164|0);
  HEAP32[$20>>2] = 4;
  $21 = (($0) + 224|0);
  HEAPF32[$21>>2] = -1.0;
  $22 = (($0) + 168|0);
  HEAP32[$22>>2] = 128;
  $23 = (($0) + 172|0);
  HEAP32[$23>>2] = 0;
  $24 = (($0) + 176|0);
  HEAP32[$24>>2] = 0;
  $25 = (($0) + 180|0);
  HEAP32[$25>>2] = 0;
  $26 = (($2) + 112|0);
  HEAP32[$26>>2] = 1;
  $27 = (($2) + 116|0);
  HEAP32[$27>>2] = 13;
  $28 = (($0) + 132|0);
  HEAP32[$28>>2] = -1;
  $29 = (($0) + 136|0);
  HEAP32[$29>>2] = -1;
  $30 = (($0) + 252|0);
  HEAPF32[$30>>2] = -1.0;
  $31 = (($2) + 84920|0);
  HEAP32[$31>>2] = 180;
  $32 = (($2) + 84924|0);
  HEAP32[$32>>2] = 180;
  $33 = (($2) + 84928|0);
  HEAP32[$33>>2] = 4;
  $34 = (($2) + 84932|0);
  HEAP32[$34>>2] = 4;
  $35 = (($2) + 84908|0);
  HEAPF32[$35>>2] = 1.0;
  $36 = (($0) + 264|0);
  HEAPF32[$36>>2] = -1.0;
  $37 = (($0) + 268|0);
  HEAPF32[$37>>2] = -1.0;
  $38 = (($0) + 20|0);
  HEAPF32[$38>>2] = 1.0;
  $39 = (($0) + 24|0);
  HEAPF32[$39>>2] = 1.0;
  $40 = (($0) + 28|0);
  HEAPF32[$40>>2] = 1.0;
  $41 = (($0) + 232|0);
  HEAP32[$41>>2] = -1;
  $42 = (($0) + 220|0);
  HEAP32[$42>>2] = -1;
  $43 = (($0) + 236|0);
  HEAPF32[$43>>2] = 0.0;
  $44 = (($0) + 244|0);
  HEAP32[$44>>2] = -1;
  $45 = (($0) + 248|0);
  HEAPF32[$45>>2] = -1.0;
  $46 = (($2) + 84032|0);
  HEAP32[$46>>2] = 1728;
  $47 = (($2) + 84764|0);
  HEAP32[$47>>2] = 0;
  $48 = (($2) + 84036|0);
  HEAP32[$48>>2] = 528;
  $49 = (($0) + 60|0);
  HEAP32[$49>>2] = 0;
  $50 = (($0) + 64|0);
  HEAP32[$50>>2] = 0;
  $51 = (($2) + 136|0);
  HEAP32[$51>>2] = 0;
  $52 = (($2) + 128|0);
  HEAP32[$52>>2] = 0;
  $53 = (($2) + 132|0);
  HEAP32[$53>>2] = 0;
  $54 = (($2) + 85680|0);
  $55 = (($2) + 85688|0);
  HEAP32[$55>>2] = 0;
  $56 = (($2) + 85692|0);
  HEAP32[$56>>2] = 0;
  HEAPF32[$54>>2] = -1.0;
  $57 = (($0) + 292|0);
  HEAP32[$57>>2] = 1;
  $58 = (($0) + 296|0);
  HEAP32[$58>>2] = 1;
  $59 = (($0) + 300|0);
  HEAP32[$59>>2] = 1;
  $60 = (($0) + 152|0);
  HEAP32[$60>>2] = 0;
  $61 = (($0) + 68|0);
  HEAP32[$61>>2] = 1;
  $62 = (($0) + 276|0);
  HEAP32[$62>>2] = 2;
  $63 = (($0) + 280|0);
  HEAP32[$63>>2] = 2;
  $64 = (($0) + 272|0);
  HEAP32[$64>>2] = 2;
  $65 = (($0) + 284|0);
  HEAP32[$65>>2] = 1;
  $$0 = $0;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _lame_bitrate_kbps($gfp,$bitrate_kbps) {
 $gfp = $gfp|0;
 $bitrate_kbps = $bitrate_kbps|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = ($gfp|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[$gfp>>2]|0;
 $2 = ($1|0)==(-487877);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = (($gfp) + 288|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = HEAP32[$4>>2]|0;
 $7 = ($6|0)==(-487877);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = (($4) + 152|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if ($10) {
  $13 = (($4) + 16|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((141224 + ($14<<6)|0) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  HEAP32[$bitrate_kbps>>2] = $16;
  $17 = HEAP32[$13>>2]|0;
  $18 = ((141224 + ($17<<6)|0) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($bitrate_kbps) + 4|0);
  HEAP32[$20>>2] = $19;
  $21 = HEAP32[$13>>2]|0;
  $22 = ((141224 + ($21<<6)|0) + 12|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($bitrate_kbps) + 8|0);
  HEAP32[$24>>2] = $23;
  $25 = HEAP32[$13>>2]|0;
  $26 = ((141224 + ($25<<6)|0) + 16|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($bitrate_kbps) + 12|0);
  HEAP32[$28>>2] = $27;
  $29 = HEAP32[$13>>2]|0;
  $30 = ((141224 + ($29<<6)|0) + 20|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (($bitrate_kbps) + 16|0);
  HEAP32[$32>>2] = $31;
  $33 = HEAP32[$13>>2]|0;
  $34 = ((141224 + ($33<<6)|0) + 24|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (($bitrate_kbps) + 20|0);
  HEAP32[$36>>2] = $35;
  $37 = HEAP32[$13>>2]|0;
  $38 = ((141224 + ($37<<6)|0) + 28|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (($bitrate_kbps) + 24|0);
  HEAP32[$40>>2] = $39;
  $41 = HEAP32[$13>>2]|0;
  $42 = ((141224 + ($41<<6)|0) + 32|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (($bitrate_kbps) + 28|0);
  HEAP32[$44>>2] = $43;
  $45 = HEAP32[$13>>2]|0;
  $46 = ((141224 + ($45<<6)|0) + 36|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (($bitrate_kbps) + 32|0);
  HEAP32[$48>>2] = $47;
  $49 = HEAP32[$13>>2]|0;
  $50 = ((141224 + ($49<<6)|0) + 40|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($bitrate_kbps) + 36|0);
  HEAP32[$52>>2] = $51;
  $53 = HEAP32[$13>>2]|0;
  $54 = ((141224 + ($53<<6)|0) + 44|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (($bitrate_kbps) + 40|0);
  HEAP32[$56>>2] = $55;
  $57 = HEAP32[$13>>2]|0;
  $58 = ((141224 + ($57<<6)|0) + 48|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = (($bitrate_kbps) + 44|0);
  HEAP32[$60>>2] = $59;
  $61 = HEAP32[$13>>2]|0;
  $62 = ((141224 + ($61<<6)|0) + 52|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = (($bitrate_kbps) + 48|0);
  HEAP32[$64>>2] = $63;
  $65 = HEAP32[$13>>2]|0;
  $66 = ((141224 + ($65<<6)|0) + 56|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = (($bitrate_kbps) + 52|0);
  HEAP32[$68>>2] = $67;
  STACKTOP = sp;return;
 } else {
  dest=$bitrate_kbps+0|0; stop=dest+56|0; do { HEAP32[dest>>2]=4294967295|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  $11 = (($4) + 120|0);
  $12 = HEAP32[$11>>2]|0;
  HEAP32[$bitrate_kbps>>2] = $12;
  STACKTOP = sp;return;
 }
}
function _lame_bitrate_hist($gfp,$bitrate_count) {
 $gfp = $gfp|0;
 $bitrate_count = $bitrate_count|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = ($gfp|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[$gfp>>2]|0;
 $2 = ($1|0)==(-487877);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = (($gfp) + 288|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = HEAP32[$4>>2]|0;
 $7 = ($6|0)==(-487877);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = (($4) + 152|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if ($10) {
  $13 = (($4) + 84076|0);
  $14 = HEAP32[$13>>2]|0;
  HEAP32[$bitrate_count>>2] = $14;
  $15 = (($4) + 84096|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($bitrate_count) + 4|0);
  HEAP32[$17>>2] = $16;
  $18 = (($4) + 84116|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($bitrate_count) + 8|0);
  HEAP32[$20>>2] = $19;
  $21 = (($4) + 84136|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($bitrate_count) + 12|0);
  HEAP32[$23>>2] = $22;
  $24 = (($4) + 84156|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($bitrate_count) + 16|0);
  HEAP32[$26>>2] = $25;
  $27 = (($4) + 84176|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($bitrate_count) + 20|0);
  HEAP32[$29>>2] = $28;
  $30 = (($4) + 84196|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (($bitrate_count) + 24|0);
  HEAP32[$32>>2] = $31;
  $33 = (($4) + 84216|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (($bitrate_count) + 28|0);
  HEAP32[$35>>2] = $34;
  $36 = (($4) + 84236|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($bitrate_count) + 32|0);
  HEAP32[$38>>2] = $37;
  $39 = (($4) + 84256|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = (($bitrate_count) + 36|0);
  HEAP32[$41>>2] = $40;
  $42 = (($4) + 84276|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (($bitrate_count) + 40|0);
  HEAP32[$44>>2] = $43;
  $45 = (($4) + 84296|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (($bitrate_count) + 44|0);
  HEAP32[$47>>2] = $46;
  $48 = (($4) + 84316|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($bitrate_count) + 48|0);
  HEAP32[$50>>2] = $49;
  $51 = (($4) + 84336|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (($bitrate_count) + 52|0);
  HEAP32[$53>>2] = $52;
  STACKTOP = sp;return;
 } else {
  dest=$bitrate_count+0|0; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  $11 = (($4) + 84056|0);
  $12 = HEAP32[$11>>2]|0;
  HEAP32[$bitrate_count>>2] = $12;
  STACKTOP = sp;return;
 }
}
function _lame_stereo_mode_hist($gfp,$stmode_count) {
 $gfp = $gfp|0;
 $stmode_count = $stmode_count|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ($gfp|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[$gfp>>2]|0;
 $2 = ($1|0)==(-487877);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = (($gfp) + 288|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = HEAP32[$4>>2]|0;
 $7 = ($6|0)==(-487877);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = (($4) + 84340|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$stmode_count>>2] = $9;
 $10 = (($4) + 84344|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($stmode_count) + 4|0);
 HEAP32[$12>>2] = $11;
 $13 = (($4) + 84348|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($stmode_count) + 8|0);
 HEAP32[$15>>2] = $14;
 $16 = (($4) + 84352|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($stmode_count) + 12|0);
 HEAP32[$18>>2] = $17;
 STACKTOP = sp;return;
}
function _lame_bitrate_stereo_mode_hist($gfp,$bitrate_stmode_count) {
 $gfp = $gfp|0;
 $bitrate_stmode_count = $bitrate_stmode_count|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $j$15 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($gfp|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[$gfp>>2]|0;
 $2 = ($1|0)==(-487877);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = (($gfp) + 288|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = HEAP32[$4>>2]|0;
 $7 = ($6|0)==(-487877);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = (($4) + 152|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if ($10) {
  $j$15 = 0;
  while(1) {
   $22 = (($j$15) + 1)|0;
   $23 = ((($4) + (($22*20)|0)|0) + 84040|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (($bitrate_stmode_count) + ($j$15<<4)|0);
   HEAP32[$25>>2] = $24;
   $26 = ((($4) + (($22*20)|0)|0) + 84044|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ((($bitrate_stmode_count) + ($j$15<<4)|0) + 4|0);
   HEAP32[$28>>2] = $27;
   $29 = ((($4) + (($22*20)|0)|0) + 84048|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ((($bitrate_stmode_count) + ($j$15<<4)|0) + 8|0);
   HEAP32[$31>>2] = $30;
   $32 = ((($4) + (($22*20)|0)|0) + 84052|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($bitrate_stmode_count) + ($j$15<<4)|0) + 12|0);
   HEAP32[$34>>2] = $33;
   $exitcond = ($22|0)==(14);
   if ($exitcond) {
    break;
   } else {
    $j$15 = $22;
   }
  }
  STACKTOP = sp;return;
 } else {
  _memset(($bitrate_stmode_count|0),0,224)|0;
  $11 = (($4) + 84040|0);
  $12 = HEAP32[$11>>2]|0;
  HEAP32[$bitrate_stmode_count>>2] = $12;
  $13 = (($4) + 84044|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($bitrate_stmode_count) + 4|0);
  HEAP32[$15>>2] = $14;
  $16 = (($4) + 84048|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($bitrate_stmode_count) + 8|0);
  HEAP32[$18>>2] = $17;
  $19 = (($4) + 84052|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($bitrate_stmode_count) + 12|0);
  HEAP32[$21>>2] = $20;
  STACKTOP = sp;return;
 }
}
function _lame_block_type_hist($gfp,$btype_count) {
 $gfp = $gfp|0;
 $btype_count = $btype_count|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($gfp|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[$gfp>>2]|0;
 $2 = ($1|0)==(-487877);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = (($gfp) + 288|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = HEAP32[$4>>2]|0;
 $7 = ($6|0)==(-487877);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = (($4) + 84720|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$btype_count>>2] = $9;
 $10 = (($4) + 84724|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($btype_count) + 4|0);
 HEAP32[$12>>2] = $11;
 $13 = (($4) + 84728|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($btype_count) + 8|0);
 HEAP32[$15>>2] = $14;
 $16 = (($4) + 84732|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($btype_count) + 12|0);
 HEAP32[$18>>2] = $17;
 $19 = (($4) + 84736|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($btype_count) + 16|0);
 HEAP32[$21>>2] = $20;
 $22 = (($4) + 84740|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($btype_count) + 20|0);
 HEAP32[$24>>2] = $23;
 STACKTOP = sp;return;
}
function _lame_bitrate_block_type_hist($gfp,$bitrate_btype_count) {
 $gfp = $gfp|0;
 $bitrate_btype_count = $bitrate_btype_count|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $j$15 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($gfp|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[$gfp>>2]|0;
 $2 = ($1|0)==(-487877);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = (($gfp) + 288|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = HEAP32[$4>>2]|0;
 $7 = ($6|0)==(-487877);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = (($4) + 152|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if ($10) {
  $j$15 = 0;
  while(1) {
   $28 = (($j$15) + 1)|0;
   $29 = ((($4) + (($28*24)|0)|0) + 84360|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (($bitrate_btype_count) + (($j$15*24)|0)|0);
   HEAP32[$31>>2] = $30;
   $32 = ((($4) + (($28*24)|0)|0) + 84364|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($bitrate_btype_count) + (($j$15*24)|0)|0) + 4|0);
   HEAP32[$34>>2] = $33;
   $35 = ((($4) + (($28*24)|0)|0) + 84368|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ((($bitrate_btype_count) + (($j$15*24)|0)|0) + 8|0);
   HEAP32[$37>>2] = $36;
   $38 = ((($4) + (($28*24)|0)|0) + 84372|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ((($bitrate_btype_count) + (($j$15*24)|0)|0) + 12|0);
   HEAP32[$40>>2] = $39;
   $41 = ((($4) + (($28*24)|0)|0) + 84376|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ((($bitrate_btype_count) + (($j$15*24)|0)|0) + 16|0);
   HEAP32[$43>>2] = $42;
   $44 = ((($4) + (($28*24)|0)|0) + 84380|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = ((($bitrate_btype_count) + (($j$15*24)|0)|0) + 20|0);
   HEAP32[$46>>2] = $45;
   $exitcond = ($28|0)==(14);
   if ($exitcond) {
    break;
   } else {
    $j$15 = $28;
   }
  }
  STACKTOP = sp;return;
 } else {
  _memset(($bitrate_btype_count|0),0,336)|0;
  $11 = (($4) + 84360|0);
  $12 = HEAP32[$11>>2]|0;
  HEAP32[$bitrate_btype_count>>2] = $12;
  $13 = (($4) + 84364|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($bitrate_btype_count) + 4|0);
  HEAP32[$15>>2] = $14;
  $16 = (($4) + 84368|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($bitrate_btype_count) + 8|0);
  HEAP32[$18>>2] = $17;
  $19 = (($4) + 84372|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($bitrate_btype_count) + 12|0);
  HEAP32[$21>>2] = $20;
  $22 = (($4) + 84376|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($bitrate_btype_count) + 16|0);
  HEAP32[$24>>2] = $23;
  $25 = (($4) + 84380|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($bitrate_btype_count) + 20|0);
  HEAP32[$27>>2] = $26;
  STACKTOP = sp;return;
 }
}
function _lame_copy_inbuffer($gfc,$l,$r,$nsamples,$pcm_type,$jump,$s) {
 $gfc = $gfc|0;
 $l = $l|0;
 $r = $r|0;
 $nsamples = $nsamples|0;
 $pcm_type = $pcm_type|0;
 $jump = $jump|0;
 $s = +$s;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0.0, $80 = 0.0;
 var $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $bl$03 = 0, $bl1$07 = 0, $bl15$015 = 0, $bl22$020 = 0, $bl8$012 = 0, $br$02 = 0;
 var $br16$016 = 0, $br2$06 = 0, $br23$021 = 0, $br9$011 = 0, $exitcond = 0, $exitcond24 = 0, $exitcond25 = 0, $exitcond26 = 0, $exitcond27 = 0, $i$01 = 0, $i10$010 = 0, $i17$017 = 0, $i24$022 = 0, $i3$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($gfc) + 52152|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($gfc) + 52156|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($gfc) + 264|0);
 $5 = +HEAPF32[$4>>2];
 $6 = $5 * $s;
 $7 = (($gfc) + 268|0);
 $8 = +HEAPF32[$7>>2];
 $9 = $8 * $s;
 $10 = (($gfc) + 272|0);
 $11 = +HEAPF32[$10>>2];
 $12 = $11 * $s;
 $13 = (($gfc) + 276|0);
 $14 = +HEAPF32[$13>>2];
 $15 = $14 * $s;
 switch ($pcm_type|0) {
 case 0:  {
  $16 = ($nsamples|0)>(0);
  if (!($16)) {
   STACKTOP = sp;return;
  }
  $bl$03 = $l;$br$02 = $r;$i$01 = 0;
  while(1) {
   $17 = HEAP16[$bl$03>>1]|0;
   $18 = (+($17<<16>>16));
   $19 = HEAP16[$br$02>>1]|0;
   $20 = (+($19<<16>>16));
   $21 = $6 * $18;
   $22 = $9 * $20;
   $23 = $21 + $22;
   $24 = $12 * $18;
   $25 = $15 * $20;
   $26 = $24 + $25;
   $27 = (($1) + ($i$01<<2)|0);
   HEAPF32[$27>>2] = $23;
   $28 = (($3) + ($i$01<<2)|0);
   HEAPF32[$28>>2] = $26;
   $29 = (($bl$03) + ($jump<<1)|0);
   $30 = (($br$02) + ($jump<<1)|0);
   $31 = (($i$01) + 1)|0;
   $exitcond = ($31|0)==($nsamples|0);
   if ($exitcond) {
    break;
   } else {
    $bl$03 = $29;$br$02 = $30;$i$01 = $31;
   }
  }
  STACKTOP = sp;return;
  break;
 }
 case 3:  {
  $64 = ($nsamples|0)>(0);
  if (!($64)) {
   STACKTOP = sp;return;
  }
  $bl15$015 = $l;$br16$016 = $r;$i17$017 = 0;
  while(1) {
   $65 = +HEAPF32[$bl15$015>>2];
   $66 = +HEAPF32[$br16$016>>2];
   $67 = $6 * $65;
   $68 = $9 * $66;
   $69 = $67 + $68;
   $70 = $12 * $65;
   $71 = $15 * $66;
   $72 = $70 + $71;
   $73 = (($1) + ($i17$017<<2)|0);
   HEAPF32[$73>>2] = $69;
   $74 = (($3) + ($i17$017<<2)|0);
   HEAPF32[$74>>2] = $72;
   $75 = (($bl15$015) + ($jump<<2)|0);
   $76 = (($br16$016) + ($jump<<2)|0);
   $77 = (($i17$017) + 1)|0;
   $exitcond26 = ($77|0)==($nsamples|0);
   if ($exitcond26) {
    break;
   } else {
    $bl15$015 = $75;$br16$016 = $76;$i17$017 = $77;
   }
  }
  STACKTOP = sp;return;
  break;
 }
 case 4:  {
  $78 = ($nsamples|0)>(0);
  if (!($78)) {
   STACKTOP = sp;return;
  }
  $bl22$020 = $l;$br23$021 = $r;$i24$022 = 0;
  while(1) {
   $79 = +HEAPF64[$bl22$020>>3];
   $80 = $79;
   $81 = +HEAPF64[$br23$021>>3];
   $82 = $81;
   $83 = $6 * $80;
   $84 = $9 * $82;
   $85 = $83 + $84;
   $86 = $12 * $80;
   $87 = $15 * $82;
   $88 = $86 + $87;
   $89 = (($1) + ($i24$022<<2)|0);
   HEAPF32[$89>>2] = $85;
   $90 = (($3) + ($i24$022<<2)|0);
   HEAPF32[$90>>2] = $88;
   $91 = (($bl22$020) + ($jump<<3)|0);
   $92 = (($br23$021) + ($jump<<3)|0);
   $93 = (($i24$022) + 1)|0;
   $exitcond27 = ($93|0)==($nsamples|0);
   if ($exitcond27) {
    break;
   } else {
    $bl22$020 = $91;$br23$021 = $92;$i24$022 = $93;
   }
  }
  STACKTOP = sp;return;
  break;
 }
 case 1:  {
  $32 = ($nsamples|0)>(0);
  if (!($32)) {
   STACKTOP = sp;return;
  }
  $bl1$07 = $l;$br2$06 = $r;$i3$05 = 0;
  while(1) {
   $33 = HEAP32[$bl1$07>>2]|0;
   $34 = (+($33|0));
   $35 = HEAP32[$br2$06>>2]|0;
   $36 = (+($35|0));
   $37 = $6 * $34;
   $38 = $9 * $36;
   $39 = $37 + $38;
   $40 = $12 * $34;
   $41 = $15 * $36;
   $42 = $40 + $41;
   $43 = (($1) + ($i3$05<<2)|0);
   HEAPF32[$43>>2] = $39;
   $44 = (($3) + ($i3$05<<2)|0);
   HEAPF32[$44>>2] = $42;
   $45 = (($bl1$07) + ($jump<<2)|0);
   $46 = (($br2$06) + ($jump<<2)|0);
   $47 = (($i3$05) + 1)|0;
   $exitcond24 = ($47|0)==($nsamples|0);
   if ($exitcond24) {
    break;
   } else {
    $bl1$07 = $45;$br2$06 = $46;$i3$05 = $47;
   }
  }
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $48 = ($nsamples|0)>(0);
  if (!($48)) {
   STACKTOP = sp;return;
  }
  $bl8$012 = $l;$br9$011 = $r;$i10$010 = 0;
  while(1) {
   $49 = HEAP32[$bl8$012>>2]|0;
   $50 = (+($49|0));
   $51 = HEAP32[$br9$011>>2]|0;
   $52 = (+($51|0));
   $53 = $6 * $50;
   $54 = $9 * $52;
   $55 = $53 + $54;
   $56 = $12 * $50;
   $57 = $15 * $52;
   $58 = $56 + $57;
   $59 = (($1) + ($i10$010<<2)|0);
   HEAPF32[$59>>2] = $55;
   $60 = (($3) + ($i10$010<<2)|0);
   HEAPF32[$60>>2] = $58;
   $61 = (($bl8$012) + ($jump<<2)|0);
   $62 = (($br9$011) + ($jump<<2)|0);
   $63 = (($i10$010) + 1)|0;
   $exitcond25 = ($63|0)==($nsamples|0);
   if ($exitcond25) {
    break;
   } else {
    $bl8$012 = $61;$br9$011 = $62;$i10$010 = $63;
   }
  }
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _lame_decode_exit() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _ExitMP3((12368|0));
 STACKTOP = sp;return 0;
}
function _lame_decode_init() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 (_InitMP3((12368|0))|0);
 STACKTOP = sp;return 0;
}
function _lame_decode1_headersB($buffer,$len,$pcm_l,$pcm_r,$mp3data,$enc_delay,$enc_padding) {
 $buffer = $buffer|0;
 $len = $len|0;
 $pcm_l = $pcm_l|0;
 $pcm_r = $pcm_r|0;
 $mp3data = $mp3data|0;
 $enc_delay = $enc_delay|0;
 $enc_padding = $enc_padding|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_decode1_headersB_clipchoice(12368,$buffer,$len,$pcm_l,$pcm_r,$mp3data,$enc_delay,$enc_padding,34368,8192,2,1)|0);
 STACKTOP = sp;return ($0|0);
}
function _decode1_headersB_clipchoice($pmp,$buffer,$len,$pcm_l_raw,$pcm_r_raw,$mp3data,$enc_delay,$enc_padding,$p,$psize,$decoded_sample_size,$decodeMP3_ptr) {
 $pmp = $pmp|0;
 $buffer = $buffer|0;
 $len = $len|0;
 $pcm_l_raw = $pcm_l_raw|0;
 $pcm_r_raw = $pcm_r_raw|0;
 $mp3data = $mp3data|0;
 $enc_delay = $enc_delay|0;
 $enc_padding = $enc_padding|0;
 $p = $p|0;
 $psize = $psize|0;
 $decoded_sample_size = $decoded_sample_size|0;
 $decodeMP3_ptr = $decodeMP3_ptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0, $107 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0;
 var $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond21 = 0, $exitcond22 = 0, $exitcond23 = 0, $i$01 = 0, $i$15 = 0, $i$210 = 0, $i$316 = 0, $p_samples$03 = 0, $p_samples2$07 = 0, $p_samples4$013 = 0, $p_samples7$019 = 0;
 var $pcm_l$02 = 0, $pcm_l1$06 = 0, $pcm_l3$011 = 0, $pcm_l5$017 = 0, $pcm_r$012 = 0, $pcm_r6$018 = 0, $processed_bytes = 0, $processed_samples$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $processed_bytes = sp;
 HEAP32[$mp3data>>2] = 0;
 $0 = (FUNCTION_TABLE_iiiiiii[$decodeMP3_ptr & 3]($pmp,$buffer,$len,$p,$psize,$processed_bytes)|0);
 $1 = (($pmp) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 $4 = (($pmp) + 60|0);
 if ($3) {
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)>(0);
  if ($6) {
   label = 4;
  } else {
   $7 = (($pmp) + 48|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)>(0);
   if ($9) {
    label = 4;
   }
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  HEAP32[$mp3data>>2] = 1;
  $10 = (($pmp) + 68|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($mp3data) + 4|0);
  HEAP32[$12>>2] = $11;
  $13 = (($pmp) + 100|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (_freqs + ($14<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($mp3data) + 8|0);
  HEAP32[$17>>2] = $16;
  $18 = (($pmp) + 112|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($mp3data) + 16|0);
  HEAP32[$20>>2] = $19;
  $21 = (($pmp) + 116|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($mp3data) + 20|0);
  HEAP32[$23>>2] = $22;
  $24 = (($pmp) + 88|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($pmp) + 76|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ((59968 + ($27<<4)|0) + ($25<<2)|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($mp3data) + 24|0);
  HEAP32[$30>>2] = $29;
  $31 = HEAP32[$4>>2]|0;
  $32 = ($31|0)>(0);
  do {
   if ($32) {
    $33 = $31 << 3;
    $34 = (($33) + 32)|0;
    $35 = Math_imul($16, $34)|0;
    $36 = (+($35|0));
    $37 = (+($29|0));
    $38 = $37 * 1000.0;
    $39 = $36 / $38;
    $40 = $39 + 0.5;
    $41 = (~~(($40)));
    $42 = (($mp3data) + 12|0);
    HEAP32[$42>>2] = $41;
   } else {
    $43 = (($pmp) + 48|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = ($44|0)>(0);
    if ($45) {
     $46 = $44 << 3;
     $47 = (($46) + 32)|0;
     $48 = Math_imul($16, $47)|0;
     $49 = (+($48|0));
     $50 = (+($29|0));
     $51 = $50 * 1000.0;
     $52 = $49 / $51;
     $53 = $52 + 0.5;
     $54 = (~~(($53)));
     $55 = (($mp3data) + 12|0);
     HEAP32[$55>>2] = $54;
     break;
    } else {
     $56 = (($pmp) + 96|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = HEAP32[$24>>2]|0;
     $59 = (($58) + -1)|0;
     $60 = HEAP32[$26>>2]|0;
     $61 = (((_tabsel_123 + (($60*192)|0)|0) + ($59<<6)|0) + ($57<<2)|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = (($mp3data) + 12|0);
     HEAP32[$63>>2] = $62;
     break;
    }
   }
  } while(0);
  $64 = (($pmp) + 12|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = ($65|0)>(0);
  if ($66) {
   $67 = (($mp3data) + 32|0);
   HEAP32[$67>>2] = $65;
   $68 = HEAP32[$64>>2]|0;
   $69 = Math_imul($68, $29)|0;
   $70 = (($mp3data) + 28|0);
   HEAP32[$70>>2] = $69;
   $71 = (($pmp) + 16|0);
   $72 = HEAP32[$71>>2]|0;
   HEAP32[$enc_delay>>2] = $72;
   $73 = (($pmp) + 20|0);
   $74 = HEAP32[$73>>2]|0;
   HEAP32[$enc_padding>>2] = $74;
  }
 }
 if ((($0|0) == -1)) {
  $processed_samples$0 = -1;
  STACKTOP = sp;return ($processed_samples$0|0);
 } else if ((($0|0) == 0)) {
  $75 = (($pmp) + 68|0);
  $76 = HEAP32[$75>>2]|0;
  if ((($76|0) == 2)) {
   $89 = HEAP32[$processed_bytes>>2]|0;
   $90 = (($89|0) / ($decoded_sample_size|0))&-1;
   $91 = $90 >> 1;
   $92 = ($decoded_sample_size|0)==(2);
   $93 = ($91|0)>(0);
   if ($92) {
    if (!($93)) {
     $processed_samples$0 = $91;
     STACKTOP = sp;return ($processed_samples$0|0);
    }
    $i$210 = 0;$p_samples4$013 = $p;$pcm_l3$011 = $pcm_l_raw;$pcm_r$012 = $pcm_r_raw;
    while(1) {
     $94 = (($p_samples4$013) + 2|0);
     $95 = HEAP16[$p_samples4$013>>1]|0;
     $96 = (($pcm_l3$011) + 2|0);
     HEAP16[$pcm_l3$011>>1] = $95;
     $97 = (($p_samples4$013) + 4|0);
     $98 = HEAP16[$94>>1]|0;
     $99 = (($pcm_r$012) + 2|0);
     HEAP16[$pcm_r$012>>1] = $98;
     $100 = (($i$210) + 1)|0;
     $exitcond22 = ($100|0)==($91|0);
     if ($exitcond22) {
      $processed_samples$0 = $91;
      break;
     } else {
      $i$210 = $100;$p_samples4$013 = $97;$pcm_l3$011 = $96;$pcm_r$012 = $99;
     }
    }
    STACKTOP = sp;return ($processed_samples$0|0);
   } else {
    if (!($93)) {
     $processed_samples$0 = $91;
     STACKTOP = sp;return ($processed_samples$0|0);
    }
    $i$316 = 0;$p_samples7$019 = $p;$pcm_l5$017 = $pcm_l_raw;$pcm_r6$018 = $pcm_r_raw;
    while(1) {
     $101 = (($p_samples7$019) + 4|0);
     $102 = +HEAPF32[$p_samples7$019>>2];
     $103 = (($pcm_l5$017) + 4|0);
     HEAPF32[$pcm_l5$017>>2] = $102;
     $104 = (($p_samples7$019) + 8|0);
     $105 = +HEAPF32[$101>>2];
     $106 = (($pcm_r6$018) + 4|0);
     HEAPF32[$pcm_r6$018>>2] = $105;
     $107 = (($i$316) + 1)|0;
     $exitcond23 = ($107|0)==($91|0);
     if ($exitcond23) {
      $processed_samples$0 = $91;
      break;
     } else {
      $i$316 = $107;$p_samples7$019 = $104;$pcm_l5$017 = $103;$pcm_r6$018 = $106;
     }
    }
    STACKTOP = sp;return ($processed_samples$0|0);
   }
  } else if ((($76|0) == 1)) {
   $77 = HEAP32[$processed_bytes>>2]|0;
   $78 = (($77|0) / ($decoded_sample_size|0))&-1;
   $79 = ($decoded_sample_size|0)==(2);
   $80 = ($78|0)>(0);
   if ($79) {
    if (!($80)) {
     $processed_samples$0 = $78;
     STACKTOP = sp;return ($processed_samples$0|0);
    }
    $i$01 = 0;$p_samples$03 = $p;$pcm_l$02 = $pcm_l_raw;
    while(1) {
     $81 = (($p_samples$03) + 2|0);
     $82 = HEAP16[$p_samples$03>>1]|0;
     $83 = (($pcm_l$02) + 2|0);
     HEAP16[$pcm_l$02>>1] = $82;
     $84 = (($i$01) + 1)|0;
     $exitcond = ($84|0)==($78|0);
     if ($exitcond) {
      $processed_samples$0 = $78;
      break;
     } else {
      $i$01 = $84;$p_samples$03 = $81;$pcm_l$02 = $83;
     }
    }
    STACKTOP = sp;return ($processed_samples$0|0);
   } else {
    if (!($80)) {
     $processed_samples$0 = $78;
     STACKTOP = sp;return ($processed_samples$0|0);
    }
    $i$15 = 0;$p_samples2$07 = $p;$pcm_l1$06 = $pcm_l_raw;
    while(1) {
     $85 = (($p_samples2$07) + 4|0);
     $86 = +HEAPF32[$p_samples2$07>>2];
     $87 = (($pcm_l1$06) + 4|0);
     HEAPF32[$pcm_l1$06>>2] = $86;
     $88 = (($i$15) + 1)|0;
     $exitcond21 = ($88|0)==($78|0);
     if ($exitcond21) {
      $processed_samples$0 = $78;
      break;
     } else {
      $i$15 = $88;$p_samples2$07 = $85;$pcm_l1$06 = $87;
     }
    }
    STACKTOP = sp;return ($processed_samples$0|0);
   }
  } else {
   $processed_samples$0 = -1;
   STACKTOP = sp;return ($processed_samples$0|0);
  }
 } else if ((($0|0) == 1)) {
  $processed_samples$0 = 0;
  STACKTOP = sp;return ($processed_samples$0|0);
 } else {
  $processed_samples$0 = -1;
  STACKTOP = sp;return ($processed_samples$0|0);
 }
 return 0|0;
}
function _lame_decode1_headers($buffer,$len,$pcm_l,$pcm_r,$mp3data) {
 $buffer = $buffer|0;
 $len = $len|0;
 $pcm_l = $pcm_l|0;
 $pcm_r = $pcm_r|0;
 $mp3data = $mp3data|0;
 var $0 = 0, $enc_delay = 0, $enc_padding = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $enc_delay = sp + 4|0;
 $enc_padding = sp;
 $0 = (_decode1_headersB_clipchoice(12368,$buffer,$len,$pcm_l,$pcm_r,$mp3data,$enc_delay,$enc_padding,34368,8192,2,1)|0);
 STACKTOP = sp;return ($0|0);
}
function _lame_decode1($buffer,$len,$pcm_l,$pcm_r) {
 $buffer = $buffer|0;
 $len = $len|0;
 $pcm_l = $pcm_l|0;
 $pcm_r = $pcm_r|0;
 var $0 = 0, $enc_delay$i = 0, $enc_padding$i = 0, $mp3data = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $enc_delay$i = sp + 44|0;
 $enc_padding$i = sp + 40|0;
 $mp3data = sp;
 $0 = (_decode1_headersB_clipchoice(12368,$buffer,$len,$pcm_l,$pcm_r,$mp3data,$enc_delay$i,$enc_padding$i,34368,8192,2,1)|0);
 STACKTOP = sp;return ($0|0);
}
function _lame_decode_headers($buffer,$len,$pcm_l,$pcm_r,$mp3data) {
 $buffer = $buffer|0;
 $len = $len|0;
 $pcm_l = $pcm_l|0;
 $pcm_r = $pcm_r|0;
 $mp3data = $mp3data|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $enc_delay$i = 0, $enc_padding$i = 0, $totsize$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $enc_delay$i = sp + 4|0;
 $enc_padding$i = sp;
 $$01 = $len;$totsize$0 = 0;
 while(1) {
  $0 = (($pcm_l) + ($totsize$0<<1)|0);
  $1 = (($pcm_r) + ($totsize$0<<1)|0);
  $2 = (_decode1_headersB_clipchoice(12368,$buffer,$$01,$0,$1,$mp3data,$enc_delay$i,$enc_padding$i,34368,8192,2,1)|0);
  if ((($2|0) == -1)) {
   break;
  } else if ((($2|0) == 0)) {
   $$0 = $totsize$0;
   label = 5;
   break;
  }
  $3 = (($2) + ($totsize$0))|0;
  $$01 = 0;$totsize$0 = $3;
 }
 if ((label|0) == 5) {
  STACKTOP = sp;return ($$0|0);
 }
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _lame_decode($buffer,$len,$pcm_l,$pcm_r) {
 $buffer = $buffer|0;
 $len = $len|0;
 $pcm_l = $pcm_l|0;
 $pcm_r = $pcm_r|0;
 var $$0$i = 0, $$01$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $enc_delay$i$i = 0, $enc_padding$i$i = 0, $mp3data = 0, $totsize$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $enc_delay$i$i = sp + 44|0;
 $enc_padding$i$i = sp + 40|0;
 $mp3data = sp;
 $$01$i = $len;$totsize$0$i = 0;
 while(1) {
  $0 = (($pcm_l) + ($totsize$0$i<<1)|0);
  $1 = (($pcm_r) + ($totsize$0$i<<1)|0);
  $2 = (_decode1_headersB_clipchoice(12368,$buffer,$$01$i,$0,$1,$mp3data,$enc_delay$i$i,$enc_padding$i$i,34368,8192,2,1)|0);
  if ((($2|0) == 0)) {
   break;
  } else if ((($2|0) == -1)) {
   $$0$i = -1;
   label = 5;
   break;
  }
  $3 = (($2) + ($totsize$0$i))|0;
  $$01$i = 0;$totsize$0$i = $3;
 }
 if ((label|0) == 5) {
  STACKTOP = sp;return ($$0$i|0);
 }
 $$0$i = $totsize$0$i;
 STACKTOP = sp;return ($$0$i|0);
}
function _hip_decode_init() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_calloc(1,22000)|0);
 (_InitMP3(($0|0))|0);
 STACKTOP = sp;return ($0|0);
}
function _hip_decode_exit($hip) {
 $hip = $hip|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($hip|0)==(0|0);
 if (!($0)) {
  _ExitMP3(($hip|0));
  _free($hip);
 }
 STACKTOP = sp;return 0;
}
function _hip_decode1_unclipped($hip,$buffer,$len,$pcm_l,$pcm_r) {
 $hip = $hip|0;
 $buffer = $buffer|0;
 $len = $len|0;
 $pcm_l = $pcm_l|0;
 $pcm_r = $pcm_r|0;
 var $$0 = 0, $0 = 0, $1 = 0, $enc_delay = 0, $enc_padding = 0, $mp3data = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $mp3data = sp + 8|0;
 $enc_delay = sp + 4|0;
 $enc_padding = sp;
 $0 = ($hip|0)==(0|0);
 if ($0) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = (_decode1_headersB_clipchoice($hip,$buffer,$len,$pcm_l,$pcm_r,$mp3data,$enc_delay,$enc_padding,42560,9216,4,2)|0);
 $$0 = $1;
 STACKTOP = sp;return ($$0|0);
}
function _hip_decode1_headers($hip,$buffer,$len,$pcm_l,$pcm_r,$mp3data) {
 $hip = $hip|0;
 $buffer = $buffer|0;
 $len = $len|0;
 $pcm_l = $pcm_l|0;
 $pcm_r = $pcm_r|0;
 $mp3data = $mp3data|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $enc_delay = 0, $enc_padding = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $enc_delay = sp + 4|0;
 $enc_padding = sp;
 $0 = ($hip|0)==(0|0);
 if ($0) {
  $$0$i = -1;
  STACKTOP = sp;return ($$0$i|0);
 }
 $1 = (_decode1_headersB_clipchoice($hip,$buffer,$len,$pcm_l,$pcm_r,$mp3data,$enc_delay,$enc_padding,51776,8192,2,1)|0);
 $$0$i = $1;
 STACKTOP = sp;return ($$0$i|0);
}
function _hip_decode1_headersB($hip,$buffer,$len,$pcm_l,$pcm_r,$mp3data,$enc_delay,$enc_padding) {
 $hip = $hip|0;
 $buffer = $buffer|0;
 $len = $len|0;
 $pcm_l = $pcm_l|0;
 $pcm_r = $pcm_r|0;
 $mp3data = $mp3data|0;
 $enc_delay = $enc_delay|0;
 $enc_padding = $enc_padding|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($hip|0)==(0|0);
 if ($0) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = (_decode1_headersB_clipchoice($hip,$buffer,$len,$pcm_l,$pcm_r,$mp3data,$enc_delay,$enc_padding,51776,8192,2,1)|0);
 $$0 = $1;
 STACKTOP = sp;return ($$0|0);
}
function _hip_decode1($hip,$buffer,$len,$pcm_l,$pcm_r) {
 $hip = $hip|0;
 $buffer = $buffer|0;
 $len = $len|0;
 $pcm_l = $pcm_l|0;
 $pcm_r = $pcm_r|0;
 var $$0$i$i = 0, $0 = 0, $1 = 0, $enc_delay$i = 0, $enc_padding$i = 0, $mp3data = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $enc_delay$i = sp + 44|0;
 $enc_padding$i = sp + 40|0;
 $mp3data = sp;
 $0 = ($hip|0)==(0|0);
 if ($0) {
  $$0$i$i = -1;
  STACKTOP = sp;return ($$0$i$i|0);
 }
 $1 = (_decode1_headersB_clipchoice($hip,$buffer,$len,$pcm_l,$pcm_r,$mp3data,$enc_delay$i,$enc_padding$i,51776,8192,2,1)|0);
 $$0$i$i = $1;
 STACKTOP = sp;return ($$0$i$i|0);
}
function _hip_decode_headers($hip,$buffer,$len,$pcm_l,$pcm_r,$mp3data) {
 $hip = $hip|0;
 $buffer = $buffer|0;
 $len = $len|0;
 $pcm_l = $pcm_l|0;
 $pcm_r = $pcm_r|0;
 $mp3data = $mp3data|0;
 var $$0 = 0, $$013 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $enc_delay$i = 0, $enc_padding$i = 0, $totsize$04 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $enc_delay$i = sp + 4|0;
 $enc_padding$i = sp;
 $0 = ($hip|0)==(0|0);
 L1: do {
  if (!($0)) {
   $$013 = $len;$totsize$04 = 0;
   while(1) {
    $1 = (($pcm_r) + ($totsize$04<<1)|0);
    $2 = (($pcm_l) + ($totsize$04<<1)|0);
    $3 = (_decode1_headersB_clipchoice($hip,$buffer,$$013,$2,$1,$mp3data,$enc_delay$i,$enc_padding$i,51776,8192,2,1)|0);
    if ((($3|0) == 0)) {
     $$0 = $totsize$04;
     break;
    } else if ((($3|0) == -1)) {
     break L1;
    }
    $4 = (($3) + ($totsize$04))|0;
    $$013 = 0;$totsize$04 = $4;
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _hip_decode($hip,$buffer,$len,$pcm_l,$pcm_r) {
 $hip = $hip|0;
 $buffer = $buffer|0;
 $len = $len|0;
 $pcm_l = $pcm_l|0;
 $pcm_r = $pcm_r|0;
 var $$0$i = 0, $$013$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $enc_delay$i$i = 0, $enc_padding$i$i = 0, $mp3data = 0, $totsize$04$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $enc_delay$i$i = sp + 44|0;
 $enc_padding$i$i = sp + 40|0;
 $mp3data = sp;
 $0 = ($hip|0)==(0|0);
 if ($0) {
  $$0$i = -1;
  STACKTOP = sp;return ($$0$i|0);
 } else {
  $$013$i = $len;$totsize$04$i = 0;
 }
 while(1) {
  $1 = (($pcm_r) + ($totsize$04$i<<1)|0);
  $2 = (($pcm_l) + ($totsize$04$i<<1)|0);
  $3 = (_decode1_headersB_clipchoice($hip,$buffer,$$013$i,$2,$1,$mp3data,$enc_delay$i$i,$enc_padding$i$i,51776,8192,2,1)|0);
  if ((($3|0) == -1)) {
   $$0$i = -1;
   label = 5;
   break;
  } else if ((($3|0) == 0)) {
   break;
  }
  $4 = (($3) + ($totsize$04$i))|0;
  $$013$i = 0;$totsize$04$i = $4;
 }
 if ((label|0) == 5) {
  STACKTOP = sp;return ($$0$i|0);
 }
 $$0$i = $totsize$04$i;
 STACKTOP = sp;return ($$0$i|0);
}
function _hip_set_pinfo($hip,$pinfo) {
 $hip = $hip|0;
 $pinfo = $pinfo|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($hip|0)==(0|0);
 if (!($0)) {
  $1 = (($hip) + 21984|0);
  HEAP32[$1>>2] = $pinfo;
 }
 STACKTOP = sp;return;
}
function _hip_set_errorf($hip,$func) {
 $hip = $hip|0;
 $func = $func|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($hip|0)==(0|0);
 if (!($0)) {
  $1 = (($hip) + 21996|0);
  HEAP32[$1>>2] = $func;
 }
 STACKTOP = sp;return;
}
function _hip_set_debugf($hip,$func) {
 $hip = $hip|0;
 $func = $func|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($hip|0)==(0|0);
 if (!($0)) {
  $1 = (($hip) + 21992|0);
  HEAP32[$1>>2] = $func;
 }
 STACKTOP = sp;return;
}
function _hip_set_msgf($hip,$func) {
 $hip = $hip|0;
 $func = $func|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($hip|0)==(0|0);
 if (!($0)) {
  $1 = (($hip) + 21988|0);
  HEAP32[$1>>2] = $func;
 }
 STACKTOP = sp;return;
}
function _mdct_sub48($gfc,$w0,$w1) {
 $gfc = $gfc|0;
 $w0 = $w0|0;
 $w1 = $w1|0;
 var $$02$i = 0, $$pre = 0.0, $$sum = 0, $$sum1 = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum15 = 0, $$sum2 = 0, $$sum3 = 0, $$sum6 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0.0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0.0, $12 = 0, $120 = 0.0;
 var $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0.0, $136 = 0.0, $137 = 0, $138 = 0, $139 = 0.0;
 var $14 = 0, $140 = 0.0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0, $153 = 0.0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0;
 var $176 = 0.0, $177 = 0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0;
 var $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0.0;
 var $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0.0, $224 = 0, $225 = 0, $226 = 0, $227 = 0.0, $228 = 0.0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0.0, $232 = 0, $233 = 0, $234 = 0, $235 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0, $239 = 0.0, $24 = 0, $240 = 0, $241 = 0.0, $242 = 0.0, $243 = 0, $244 = 0, $245 = 0.0, $246 = 0, $247 = 0.0;
 var $248 = 0.0, $249 = 0.0, $25 = 0, $250 = 0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0, $255 = 0.0, $256 = 0.0, $257 = 0, $258 = 0, $259 = 0.0, $26 = 0, $260 = 0.0, $261 = 0.0, $262 = 0.0, $263 = 0.0, $264 = 0.0, $265 = 0.0;
 var $266 = 0.0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0, $270 = 0.0, $271 = 0.0, $272 = 0.0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0.0, $277 = 0.0, $278 = 0.0, $279 = 0.0, $28 = 0, $280 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0.0;
 var $284 = 0.0, $285 = 0, $286 = 0.0, $287 = 0.0, $288 = 0.0, $289 = 0.0, $29 = 0.0, $290 = 0.0, $291 = 0.0, $292 = 0.0, $293 = 0.0, $294 = 0, $295 = 0.0, $296 = 0, $297 = 0.0, $298 = 0.0, $299 = 0.0, $3 = 0, $30 = 0.0, $300 = 0.0;
 var $301 = 0.0, $302 = 0.0, $303 = 0.0, $304 = 0.0, $305 = 0.0, $306 = 0.0, $307 = 0.0, $308 = 0.0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0.0, $313 = 0.0, $314 = 0.0, $315 = 0.0, $316 = 0.0, $317 = 0, $318 = 0.0, $319 = 0;
 var $32 = 0.0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0.0, $324 = 0.0, $325 = 0.0, $326 = 0.0, $327 = 0.0, $328 = 0.0, $329 = 0.0, $33 = 0.0, $330 = 0.0, $331 = 0.0, $332 = 0.0, $333 = 0, $334 = 0.0, $335 = 0, $336 = 0.0, $337 = 0.0;
 var $338 = 0.0, $339 = 0.0, $34 = 0, $340 = 0.0, $341 = 0.0, $342 = 0.0, $343 = 0.0, $344 = 0.0, $345 = 0.0, $346 = 0.0, $347 = 0.0, $348 = 0.0, $349 = 0, $35 = 0.0, $350 = 0.0, $351 = 0, $352 = 0.0, $353 = 0.0, $354 = 0.0, $355 = 0.0;
 var $356 = 0.0, $357 = 0.0, $358 = 0.0, $359 = 0.0, $36 = 0.0, $360 = 0.0, $361 = 0.0, $362 = 0.0, $363 = 0.0, $364 = 0.0, $365 = 0.0, $366 = 0.0, $367 = 0.0, $368 = 0.0, $369 = 0.0, $37 = 0, $370 = 0.0, $371 = 0.0, $372 = 0.0, $373 = 0.0;
 var $374 = 0.0, $375 = 0.0, $376 = 0.0, $377 = 0.0, $378 = 0.0, $379 = 0.0, $38 = 0.0, $380 = 0.0, $381 = 0.0, $382 = 0.0, $383 = 0.0, $384 = 0.0, $385 = 0.0, $386 = 0, $387 = 0.0, $388 = 0, $389 = 0.0, $39 = 0.0, $390 = 0.0, $391 = 0.0;
 var $392 = 0.0, $393 = 0.0, $394 = 0.0, $395 = 0.0, $396 = 0.0, $397 = 0.0, $398 = 0.0, $399 = 0.0, $4 = 0, $40 = 0, $400 = 0.0, $401 = 0.0, $402 = 0.0, $403 = 0.0, $404 = 0.0, $405 = 0.0, $406 = 0.0, $407 = 0.0, $408 = 0.0, $409 = 0;
 var $41 = 0.0, $410 = 0.0, $411 = 0, $412 = 0.0, $413 = 0.0, $414 = 0.0, $415 = 0.0, $416 = 0.0, $417 = 0.0, $418 = 0.0, $419 = 0.0, $42 = 0.0, $420 = 0.0, $421 = 0.0, $422 = 0.0, $423 = 0.0, $424 = 0.0, $425 = 0, $426 = 0.0, $427 = 0;
 var $428 = 0.0, $429 = 0.0, $43 = 0, $430 = 0.0, $431 = 0.0, $432 = 0.0, $433 = 0.0, $434 = 0.0, $435 = 0.0, $436 = 0.0, $437 = 0.0, $438 = 0.0, $439 = 0.0, $44 = 0.0, $440 = 0.0, $441 = 0, $442 = 0.0, $443 = 0, $444 = 0, $445 = 0;
 var $446 = 0, $447 = 0.0, $448 = 0, $449 = 0.0, $45 = 0.0, $450 = 0.0, $451 = 0, $452 = 0, $453 = 0.0, $454 = 0, $455 = 0.0, $456 = 0.0, $457 = 0.0, $458 = 0.0, $459 = 0.0, $46 = 0, $460 = 0.0, $461 = 0, $462 = 0, $463 = 0;
 var $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0.0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0;
 var $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0;
 var $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, $band$133 = 0, $ch$037 = 0, $exitcond = 0, $exitcond$i = 0, $exitcond43 = 0, $exitcond44 = 0, $exitcond45 = 0, $exitcond46 = 0, $gr$035 = 0, $k$021 = 0, $k$123 = 0, $k$227 = 0;
 var $k$324 = 0, $k$430 = 0, $l$01$i = 0, $mdct_enc$031 = 0, $or$cond = 0, $or$cond17 = 0, $samp$019 = 0, $scevgep = 0, $type$0 = 0, $w0$pn36 = 0, $wk$0 = 0, $wk$134 = 0, $wk$220 = 0, $work = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $work = sp;
 $0 = (($gfc) + 72|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = (($gfc) + 76|0);
 $4 = (($work) + 68|0);
 $5 = (($work) + 36|0);
 $6 = (($work) + 60|0);
 $7 = (($work) + 44|0);
 $8 = (($work) + 56|0);
 $9 = (($work) + 48|0);
 $10 = (($work) + 32|0);
 $11 = (($work) + 4|0);
 $12 = (($work) + 28|0);
 $13 = (($work) + 8|0);
 $14 = (($work) + 24|0);
 $15 = (($work) + 12|0);
 $16 = (($work) + 20|0);
 $17 = (($work) + 16|0);
 $18 = (($work) + 64|0);
 $19 = (($work) + 40|0);
 $20 = (($work) + 52|0);
 $ch$037 = 0;$w0$pn36 = $w0;
 while(1) {
  $21 = HEAP32[$3>>2]|0;
  $22 = ($21|0)>(0);
  if ($22) {
   $wk$0 = (($w0$pn36) + 1144|0);
   $gr$035 = 0;$wk$134 = $wk$0;
   while(1) {
    $23 = (1 - ($gr$035))|0;
    $24 = (((($gfc) + (($ch$037*4608)|0)|0) + (($23*2304)|0)|0) + 27824|0);
    $k$021 = 0;$samp$019 = $24;$wk$220 = $wk$134;
    while(1) {
     _window_subband($wk$220,$samp$019);
     $25 = (($wk$220) + 128|0);
     $26 = (($samp$019) + 128|0);
     _window_subband($25,$26);
     $27 = (($samp$019) + 256|0);
     $28 = (($samp$019) + 132|0);
     $29 = +HEAPF32[$28>>2];
     $30 = $29 * -1.0;
     HEAPF32[$28>>2] = $30;
     $31 = (($samp$019) + 140|0);
     $32 = +HEAPF32[$31>>2];
     $33 = $32 * -1.0;
     HEAPF32[$31>>2] = $33;
     $34 = (($samp$019) + 148|0);
     $35 = +HEAPF32[$34>>2];
     $36 = $35 * -1.0;
     HEAPF32[$34>>2] = $36;
     $37 = (($samp$019) + 156|0);
     $38 = +HEAPF32[$37>>2];
     $39 = $38 * -1.0;
     HEAPF32[$37>>2] = $39;
     $40 = (($samp$019) + 164|0);
     $41 = +HEAPF32[$40>>2];
     $42 = $41 * -1.0;
     HEAPF32[$40>>2] = $42;
     $43 = (($samp$019) + 172|0);
     $44 = +HEAPF32[$43>>2];
     $45 = $44 * -1.0;
     HEAPF32[$43>>2] = $45;
     $46 = (($samp$019) + 180|0);
     $47 = +HEAPF32[$46>>2];
     $48 = $47 * -1.0;
     HEAPF32[$46>>2] = $48;
     $49 = (($samp$019) + 188|0);
     $50 = +HEAPF32[$49>>2];
     $51 = $50 * -1.0;
     HEAPF32[$49>>2] = $51;
     $52 = (($samp$019) + 196|0);
     $53 = +HEAPF32[$52>>2];
     $54 = $53 * -1.0;
     HEAPF32[$52>>2] = $54;
     $55 = (($samp$019) + 204|0);
     $56 = +HEAPF32[$55>>2];
     $57 = $56 * -1.0;
     HEAPF32[$55>>2] = $57;
     $58 = (($samp$019) + 212|0);
     $59 = +HEAPF32[$58>>2];
     $60 = $59 * -1.0;
     HEAPF32[$58>>2] = $60;
     $61 = (($samp$019) + 220|0);
     $62 = +HEAPF32[$61>>2];
     $63 = $62 * -1.0;
     HEAPF32[$61>>2] = $63;
     $64 = (($samp$019) + 228|0);
     $65 = +HEAPF32[$64>>2];
     $66 = $65 * -1.0;
     HEAPF32[$64>>2] = $66;
     $67 = (($samp$019) + 236|0);
     $68 = +HEAPF32[$67>>2];
     $69 = $68 * -1.0;
     HEAPF32[$67>>2] = $69;
     $70 = (($samp$019) + 244|0);
     $71 = +HEAPF32[$70>>2];
     $72 = $71 * -1.0;
     HEAPF32[$70>>2] = $72;
     $73 = (($samp$019) + 252|0);
     $74 = +HEAPF32[$73>>2];
     $75 = $74 * -1.0;
     HEAPF32[$73>>2] = $75;
     $76 = (($wk$220) + 256|0);
     $77 = (($k$021) + 1)|0;
     $exitcond = ($77|0)==(9);
     if ($exitcond) {
      break;
     } else {
      $k$021 = $77;$samp$019 = $27;$wk$220 = $76;
     }
    }
    $78 = (((($gfc) + (($gr$035*10504)|0)|0) + (($ch$037*5252)|0)|0) + 304|0);
    $79 = (((($gfc) + (($gr$035*10504)|0)|0) + (($ch$037*5252)|0)|0) + 5092|0);
    $80 = (((($gfc) + (($gr$035*10504)|0)|0) + (($ch$037*5252)|0)|0) + 5096|0);
    $band$133 = 0;$mdct_enc$031 = $78;
    while(1) {
     $81 = HEAP32[$79>>2]|0;
     $82 = (60000 + ($band$133<<2)|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = HEAP32[$80>>2]|0;
     $85 = ($84|0)!=(0);
     $86 = ($band$133|0)<(2);
     $or$cond = $85 & $86;
     $type$0 = $or$cond ? 0 : $81;
     $87 = ((($gfc) + ($band$133<<2)|0) + 37040|0);
     $88 = +HEAPF32[$87>>2];
     $89 = $88;
     $90 = $89 < 9.99999999999999979886E-13;
     do {
      if ($90) {
       dest=$mdct_enc$031+0|0; stop=dest+72|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
      } else {
       $91 = $88 < 1.0;
       L18: do {
        if ($91) {
         $96 = $88;$k$123 = 0;
         while(1) {
          $92 = $k$123 << 5;
          $$sum15 = (($92) + ($83))|0;
          $93 = ((((($gfc) + (($ch$037*4608)|0)|0) + (($23*2304)|0)|0) + ($$sum15<<2)|0) + 27824|0);
          $94 = +HEAPF32[$93>>2];
          $95 = $96 * $94;
          HEAPF32[$93>>2] = $95;
          $97 = (($k$123) + 1)|0;
          $exitcond43 = ($97|0)==(18);
          if ($exitcond43) {
           break L18;
          }
          $$pre = +HEAPF32[$87>>2];
          $96 = $$pre;$k$123 = $97;
         }
        }
       } while(0);
       $98 = ($type$0|0)==(2);
       if (!($98)) {
        $k$324 = -9;
        while(1) {
         $221 = (($k$324) + 27)|0;
         $222 = ((60128 + (($type$0*144)|0)|0) + ($221<<2)|0);
         $223 = +HEAPF32[$222>>2];
         $224 = (($k$324) + 9)|0;
         $225 = $224 << 5;
         $$sum2 = (($225) + ($83))|0;
         $226 = ((((($gfc) + (($ch$037*4608)|0)|0) + (($23*2304)|0)|0) + ($$sum2<<2)|0) + 27824|0);
         $227 = +HEAPF32[$226>>2];
         $228 = $223 * $227;
         $229 = (($k$324) + 36)|0;
         $230 = ((60128 + (($type$0*144)|0)|0) + ($229<<2)|0);
         $231 = +HEAPF32[$230>>2];
         $232 = (8 - ($k$324))|0;
         $233 = $232 << 5;
         $$sum3 = (($233) + ($83))|0;
         $234 = ((((($gfc) + (($ch$037*4608)|0)|0) + (($23*2304)|0)|0) + ($$sum3<<2)|0) + 27824|0);
         $235 = +HEAPF32[$234>>2];
         $236 = $231 * $235;
         $237 = $228 + $236;
         $238 = ((60128 + (($type$0*144)|0)|0) + ($224<<2)|0);
         $239 = +HEAPF32[$238>>2];
         $240 = ((((($gfc) + (($ch$037*4608)|0)|0) + (($gr$035*2304)|0)|0) + ($$sum2<<2)|0) + 27824|0);
         $241 = +HEAPF32[$240>>2];
         $242 = $239 * $241;
         $243 = (($k$324) + 18)|0;
         $244 = ((60128 + (($type$0*144)|0)|0) + ($243<<2)|0);
         $245 = +HEAPF32[$244>>2];
         $246 = ((((($gfc) + (($ch$037*4608)|0)|0) + (($gr$035*2304)|0)|0) + ($$sum3<<2)|0) + 27824|0);
         $247 = +HEAPF32[$246>>2];
         $248 = $245 * $247;
         $249 = $242 - $248;
         $$sum6 = (($k$324) + 12)|0;
         $250 = ((60128 + ($$sum6<<2)|0) + 288|0);
         $251 = +HEAPF32[$250>>2];
         $252 = $251 * $249;
         $253 = $237 - $252;
         $254 = (($work) + ($224<<2)|0);
         HEAPF32[$254>>2] = $253;
         $255 = $237 * $251;
         $256 = $249 + $255;
         $257 = (($work) + ($243<<2)|0);
         HEAPF32[$257>>2] = $256;
         $258 = (($k$324) + 1)|0;
         $exitcond44 = ($258|0)==(0);
         if ($exitcond44) {
          break;
         } else {
          $k$324 = $258;
         }
        }
        $259 = +HEAPF32[$4>>2];
        $260 = +HEAPF32[$5>>2];
        $261 = $259 - $260;
        $262 = +HEAPF32[$6>>2];
        $263 = +HEAPF32[$7>>2];
        $264 = $262 - $263;
        $265 = +HEAPF32[$8>>2];
        $266 = +HEAPF32[$9>>2];
        $267 = $265 - $266;
        $268 = +HEAPF32[$work>>2];
        $269 = +HEAPF32[$10>>2];
        $270 = $268 + $269;
        $271 = +HEAPF32[$11>>2];
        $272 = +HEAPF32[$12>>2];
        $273 = $271 + $272;
        $274 = +HEAPF32[$13>>2];
        $275 = +HEAPF32[$14>>2];
        $276 = $274 + $275;
        $277 = +HEAPF32[$15>>2];
        $278 = +HEAPF32[$16>>2];
        $279 = $277 + $278;
        $280 = $270 + $276;
        $281 = $280 - $279;
        $282 = +HEAPF32[$17>>2];
        $283 = $273 - $282;
        $284 = $281 - $283;
        $285 = (($mdct_enc$031) + 68|0);
        HEAPF32[$285>>2] = $284;
        $286 = $281 * 0.5;
        $287 = +HEAPF32[$17>>2];
        $288 = $273 - $287;
        $289 = $286 + $288;
        $290 = $261 - $264;
        $291 = $290 - $267;
        $292 = $291 * 0.866025388240814208984;
        $293 = $292 + $289;
        $294 = (($mdct_enc$031) + 20|0);
        HEAPF32[$294>>2] = $293;
        $295 = $292 - $289;
        $296 = (($mdct_enc$031) + 24|0);
        HEAPF32[$296>>2] = $295;
        $297 = +HEAPF32[$18>>2];
        $298 = +HEAPF32[$19>>2];
        $299 = $297 - $298;
        $300 = $299 * 0.866025388240814208984;
        $301 = $273 * 0.5;
        $302 = +HEAPF32[$17>>2];
        $303 = $301 + $302;
        $304 = $261 * 0.984807729721069335937;
        $305 = $304 + $300;
        $306 = $264 * 0.642787635326385498046;
        $307 = $306 + $305;
        $308 = $267 * 0.342020153999328613281;
        $309 = $308 + $307;
        $310 = $270 * 0.173648178577423095703;
        $311 = $310 + $303;
        $312 = $276 * -0.766044437885284423828;
        $313 = $311 - $312;
        $314 = $279 * 0.939692616462707519531;
        $315 = $314 + $313;
        $316 = $309 + $315;
        $317 = (($mdct_enc$031) + 4|0);
        HEAPF32[$317>>2] = $316;
        $318 = $309 - $315;
        $319 = (($mdct_enc$031) + 8|0);
        HEAPF32[$319>>2] = $318;
        $320 = $261 * 0.642787635326385498046;
        $321 = $320 - $300;
        $322 = $264 * 0.342020153999328613281;
        $323 = $321 - $322;
        $324 = $267 * 0.984807729721069335937;
        $325 = $324 + $323;
        $326 = $270 * 0.766044437885284423828;
        $327 = $326 + $303;
        $328 = $276 * 0.939692616462707519531;
        $329 = $327 - $328;
        $330 = $279 * -0.173648178577423095703;
        $331 = $330 + $329;
        $332 = $325 + $331;
        $333 = (($mdct_enc$031) + 36|0);
        HEAPF32[$333>>2] = $332;
        $334 = $325 - $331;
        $335 = (($mdct_enc$031) + 40|0);
        HEAPF32[$335>>2] = $334;
        $336 = $261 * 0.342020153999328613281;
        $337 = $336 - $300;
        $338 = $264 * 0.984807729721069335937;
        $339 = $338 + $337;
        $340 = $267 * 0.642787635326385498046;
        $341 = $339 - $340;
        $342 = $270 * 0.939692616462707519531;
        $343 = $342 - $303;
        $344 = $276 * -0.173648178577423095703;
        $345 = $344 + $343;
        $346 = $279 * -0.766044437885284423828;
        $347 = $345 - $346;
        $348 = $341 + $347;
        $349 = (($mdct_enc$031) + 52|0);
        HEAPF32[$349>>2] = $348;
        $350 = $341 - $347;
        $351 = (($mdct_enc$031) + 56|0);
        HEAPF32[$351>>2] = $350;
        $352 = +HEAPF32[$10>>2];
        $353 = +HEAPF32[$work>>2];
        $354 = $352 - $353;
        $355 = +HEAPF32[$14>>2];
        $356 = +HEAPF32[$13>>2];
        $357 = $355 - $356;
        $358 = +HEAPF32[$16>>2];
        $359 = +HEAPF32[$15>>2];
        $360 = $358 - $359;
        $361 = +HEAPF32[$4>>2];
        $362 = +HEAPF32[$5>>2];
        $363 = $361 + $362;
        $364 = +HEAPF32[$18>>2];
        $365 = +HEAPF32[$19>>2];
        $366 = $364 + $365;
        $367 = +HEAPF32[$6>>2];
        $368 = +HEAPF32[$7>>2];
        $369 = $367 + $368;
        $370 = +HEAPF32[$8>>2];
        $371 = +HEAPF32[$9>>2];
        $372 = $370 + $371;
        $373 = $363 + $369;
        $374 = $373 + $372;
        $375 = +HEAPF32[$20>>2];
        $376 = $366 + $375;
        $377 = $374 + $376;
        HEAPF32[$mdct_enc$031>>2] = $377;
        $378 = $374 * 0.5;
        $379 = +HEAPF32[$20>>2];
        $380 = $366 + $379;
        $381 = $378 - $380;
        $382 = $354 - $357;
        $383 = $382 + $360;
        $384 = $383 * 0.866025388240814208984;
        $385 = $384 + $381;
        $386 = (($mdct_enc$031) + 44|0);
        HEAPF32[$386>>2] = $385;
        $387 = $381 - $384;
        $388 = (($mdct_enc$031) + 48|0);
        HEAPF32[$388>>2] = $387;
        $389 = +HEAPF32[$12>>2];
        $390 = +HEAPF32[$11>>2];
        $391 = $389 - $390;
        $392 = $391 * 0.866025388240814208984;
        $393 = +HEAPF32[$20>>2];
        $394 = $366 * 0.5;
        $395 = $393 - $394;
        $396 = $363 * 0.939692616462707519531;
        $397 = $396 - $395;
        $398 = $369 * -0.173648178577423095703;
        $399 = $398 + $397;
        $400 = $372 * -0.766044437885284423828;
        $401 = $400 + $399;
        $402 = $354 * 0.342020153999328613281;
        $403 = $402 + $392;
        $404 = $357 * 0.984807729721069335937;
        $405 = $404 + $403;
        $406 = $360 * 0.642787635326385498046;
        $407 = $406 + $405;
        $408 = $401 + $407;
        $409 = (($mdct_enc$031) + 12|0);
        HEAPF32[$409>>2] = $408;
        $410 = $401 - $407;
        $411 = (($mdct_enc$031) + 16|0);
        HEAPF32[$411>>2] = $410;
        $412 = $363 * 0.766044437885284423828;
        $413 = $412 + $395;
        $414 = $369 * 0.939692616462707519531;
        $415 = $413 - $414;
        $416 = $372 * -0.173648178577423095703;
        $417 = $415 - $416;
        $418 = $354 * 0.642787635326385498046;
        $419 = $418 + $392;
        $420 = $357 * 0.342020153999328613281;
        $421 = $419 - $420;
        $422 = $360 * 0.984807729721069335937;
        $423 = $421 - $422;
        $424 = $417 + $423;
        $425 = (($mdct_enc$031) + 28|0);
        HEAPF32[$425>>2] = $424;
        $426 = $417 - $423;
        $427 = (($mdct_enc$031) + 32|0);
        HEAPF32[$427>>2] = $426;
        $428 = $363 * 0.173648178577423095703;
        $429 = $428 + $395;
        $430 = $369 * -0.766044437885284423828;
        $431 = $429 - $430;
        $432 = $372 * 0.939692616462707519531;
        $433 = $431 - $432;
        $434 = $354 * 0.984807729721069335937;
        $435 = $434 - $392;
        $436 = $357 * 0.642787635326385498046;
        $437 = $436 + $435;
        $438 = $360 * 0.342020153999328613281;
        $439 = $437 - $438;
        $440 = $433 + $439;
        $441 = (($mdct_enc$031) + 60|0);
        HEAPF32[$441>>2] = $440;
        $442 = $433 - $439;
        $443 = (($mdct_enc$031) + 64|0);
        HEAPF32[$443>>2] = $442;
        break;
       }
       $99 = (($83) + 288)|0;
       $100 = (($83) + 480)|0;
       $k$227 = -3;
       while(1) {
        $101 = (($k$227) + 3)|0;
        $102 = ((60128 + ($101<<2)|0) + 288|0);
        $103 = +HEAPF32[$102>>2];
        $104 = $k$227 << 5;
        $$sum7 = (($99) + ($104))|0;
        $105 = ((((($gfc) + (($ch$037*4608)|0)|0) + (($gr$035*2304)|0)|0) + ($$sum7<<2)|0) + 27824|0);
        $106 = +HEAPF32[$105>>2];
        $107 = $103 * $106;
        $108 = (8 - ($k$227))|0;
        $109 = $108 << 5;
        $$sum8 = (($109) + ($83))|0;
        $110 = ((((($gfc) + (($ch$037*4608)|0)|0) + (($gr$035*2304)|0)|0) + ($$sum8<<2)|0) + 27824|0);
        $111 = +HEAPF32[$110>>2];
        $112 = $107 - $111;
        $113 = ($k$227*3)|0;
        $114 = (($113) + 9)|0;
        $115 = (($mdct_enc$031) + ($114<<2)|0);
        HEAPF32[$115>>2] = $112;
        $116 = (14 - ($k$227))|0;
        $117 = $116 << 5;
        $$sum9 = (($117) + ($83))|0;
        $118 = ((((($gfc) + (($ch$037*4608)|0)|0) + (($gr$035*2304)|0)|0) + ($$sum9<<2)|0) + 27824|0);
        $119 = +HEAPF32[$118>>2];
        $120 = $103 * $119;
        $$sum10 = (($100) + ($104))|0;
        $121 = ((((($gfc) + (($ch$037*4608)|0)|0) + (($gr$035*2304)|0)|0) + ($$sum10<<2)|0) + 27824|0);
        $122 = +HEAPF32[$121>>2];
        $123 = $120 + $122;
        $124 = (($113) + 18)|0;
        $125 = (($mdct_enc$031) + ($124<<2)|0);
        HEAPF32[$125>>2] = $123;
        $126 = +HEAPF32[$121>>2];
        $127 = $103 * $126;
        $128 = +HEAPF32[$118>>2];
        $129 = $127 - $128;
        $130 = (($113) + 10)|0;
        $131 = (($mdct_enc$031) + ($130<<2)|0);
        HEAPF32[$131>>2] = $129;
        $132 = (2 - ($k$227))|0;
        $133 = $132 << 5;
        $$sum11 = (($133) + ($83))|0;
        $134 = ((((($gfc) + (($ch$037*4608)|0)|0) + (($23*2304)|0)|0) + ($$sum11<<2)|0) + 27824|0);
        $135 = +HEAPF32[$134>>2];
        $136 = $103 * $135;
        $137 = $101 << 5;
        $$sum12 = (($137) + ($83))|0;
        $138 = ((((($gfc) + (($ch$037*4608)|0)|0) + (($23*2304)|0)|0) + ($$sum12<<2)|0) + 27824|0);
        $139 = +HEAPF32[$138>>2];
        $140 = $136 + $139;
        $141 = (($113) + 19)|0;
        $142 = (($mdct_enc$031) + ($141<<2)|0);
        HEAPF32[$142>>2] = $140;
        $143 = +HEAPF32[$138>>2];
        $144 = $103 * $143;
        $145 = +HEAPF32[$134>>2];
        $146 = $144 - $145;
        $147 = (($113) + 11)|0;
        $148 = (($mdct_enc$031) + ($147<<2)|0);
        HEAPF32[$148>>2] = $146;
        $149 = ((((($gfc) + (($ch$037*4608)|0)|0) + (($23*2304)|0)|0) + ($$sum8<<2)|0) + 27824|0);
        $150 = +HEAPF32[$149>>2];
        $151 = $103 * $150;
        $152 = ((((($gfc) + (($ch$037*4608)|0)|0) + (($23*2304)|0)|0) + ($$sum7<<2)|0) + 27824|0);
        $153 = +HEAPF32[$152>>2];
        $154 = $151 + $153;
        $155 = (($113) + 20)|0;
        $156 = (($mdct_enc$031) + ($155<<2)|0);
        HEAPF32[$156>>2] = $154;
        $157 = (($k$227) + 1)|0;
        $exitcond45 = ($157|0)==(0);
        if ($exitcond45) {
         $$02$i = $mdct_enc$031;$l$01$i = 0;
         break;
        } else {
         $k$227 = $157;
        }
       }
       while(1) {
        $158 = (($$02$i) + 24|0);
        $159 = +HEAPF32[$158>>2];
        $160 = $159 * 0.131652504205703735352;
        $161 = (($$02$i) + 60|0);
        $162 = +HEAPF32[$161>>2];
        $163 = $160 - $162;
        $164 = +HEAPF32[$$02$i>>2];
        $165 = $164 * 0.767327010631561279296;
        $166 = (($$02$i) + 36|0);
        $167 = +HEAPF32[$166>>2];
        $168 = $165 - $167;
        $169 = $163 + $168;
        $170 = $163 - $168;
        $171 = $162 * 0.131652504205703735352;
        $172 = $159 + $171;
        $173 = $167 * 0.767327010631561279296;
        $174 = $164 + $173;
        $175 = $172 + $174;
        $176 = $174 - $172;
        $177 = (($$02$i) + 12|0);
        $178 = +HEAPF32[$177>>2];
        $179 = $178 * 0.414213567972183227539;
        $180 = (($$02$i) + 48|0);
        $181 = +HEAPF32[$180>>2];
        $182 = $179 - $181;
        $183 = $182;
        $184 = $183 * 2.06997811195308909253E-11;
        $185 = $184;
        $186 = $181 * 0.414213567972183227539;
        $187 = $178 + $186;
        $188 = $187;
        $189 = $188 * 2.06997811195308909253E-11;
        $190 = $189;
        $191 = $169;
        $192 = $191 * 1.90752519173727988323E-11;
        $193 = $185;
        $194 = $192 + $193;
        $195 = $194;
        HEAPF32[$$02$i>>2] = $195;
        $196 = -$175;
        $197 = $196;
        $198 = $197 * 1.90752519173727988323E-11;
        $199 = $190;
        $200 = $198 + $199;
        $201 = $200;
        HEAPF32[$161>>2] = $201;
        $202 = $170;
        $203 = $202 * 1.65196527440326735879E-11;
        $204 = $203;
        $205 = $175;
        $206 = $205 * 9.53762595868640426293E-12;
        $207 = $206 + $199;
        $208 = $207;
        $209 = $204 - $208;
        HEAPF32[$177>>2] = $209;
        $210 = $204 + $208;
        HEAPF32[$158>>2] = $210;
        $211 = $191 * 9.53762595868640426293E-12;
        $212 = $211 - $193;
        $213 = $212;
        $214 = $176;
        $215 = $214 * 1.65196527440326735879E-11;
        $216 = $215;
        $217 = $216 + $213;
        HEAPF32[$166>>2] = $217;
        $218 = $213 - $216;
        HEAPF32[$180>>2] = $218;
        $219 = (($$02$i) + 4|0);
        $220 = (($l$01$i) + 1)|0;
        $exitcond$i = ($220|0)==(3);
        if ($exitcond$i) {
         break;
        } else {
         $$02$i = $219;$l$01$i = $220;
        }
       }
      }
     } while(0);
     $444 = ($type$0|0)==(2);
     $445 = ($band$133|0)==(0);
     $or$cond17 = $444 | $445;
     L33: do {
      if (!($or$cond17)) {
       $k$430 = 7;
       while(1) {
        $446 = (($mdct_enc$031) + ($k$430<<2)|0);
        $447 = +HEAPF32[$446>>2];
        $$sum = (($k$430) + 20)|0;
        $448 = ((60128 + ($$sum<<2)|0) + 288|0);
        $449 = +HEAPF32[$448>>2];
        $450 = $447 * $449;
        $451 = $k$430 ^ -1;
        $452 = (($mdct_enc$031) + ($451<<2)|0);
        $453 = +HEAPF32[$452>>2];
        $$sum1 = (($k$430) + 28)|0;
        $454 = ((60128 + ($$sum1<<2)|0) + 288|0);
        $455 = +HEAPF32[$454>>2];
        $456 = $453 * $455;
        $457 = $450 + $456;
        $458 = $447 * $455;
        $459 = $449 * $453;
        $460 = $458 - $459;
        HEAPF32[$452>>2] = $457;
        HEAPF32[$446>>2] = $460;
        $461 = ($k$430|0)>(0);
        if (!($461)) {
         break L33;
        }
        $462 = (($k$430) + -1)|0;
        $k$430 = $462;
       }
      }
     } while(0);
     $463 = (($band$133) + 1)|0;
     $exitcond46 = ($463|0)==(32);
     if ($exitcond46) {
      break;
     }
     $464 = (($mdct_enc$031) + 72|0);
     $band$133 = $463;$mdct_enc$031 = $464;
    }
    $scevgep = (($wk$134) + 2304|0);
    $465 = (($gr$035) + 1)|0;
    $466 = HEAP32[$3>>2]|0;
    $467 = ($465|0)<($466|0);
    if ($467) {
     $gr$035 = $465;$wk$134 = $scevgep;
    } else {
     break;
    }
   }
   $468 = ($466|0)==(1);
   if ($468) {
    $469 = ((($gfc) + (($ch$037*4608)|0)|0) + 27824|0);
    $470 = ((($gfc) + (($ch$037*4608)|0)|0) + 30128|0);
    _memcpy(($469|0),($470|0),2304)|0;
   }
  }
  $471 = (($ch$037) + 1)|0;
  $472 = HEAP32[$0>>2]|0;
  $473 = ($471|0)<($472|0);
  if ($473) {
   $ch$037 = $471;$w0$pn36 = $w1;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _window_subband($x1,$a) {
 $x1 = $x1|0;
 $a = $a|0;
 var $$04 = 0, $0 = 0, $1 = 0, $10 = 0.0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0;
 var $115 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0, $127 = 0.0, $128 = 0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0;
 var $133 = 0.0, $134 = 0.0, $135 = 0.0, $136 = 0, $137 = 0.0, $138 = 0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0.0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0.0;
 var $151 = 0.0, $152 = 0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0.0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0.0, $175 = 0.0, $176 = 0, $177 = 0.0, $178 = 0.0, $179 = 0, $18 = 0.0, $180 = 0.0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0, $187 = 0.0;
 var $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0, $191 = 0.0, $192 = 0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0, $198 = 0.0, $199 = 0.0, $2 = 0.0, $20 = 0.0, $200 = 0.0, $201 = 0, $202 = 0.0, $203 = 0, $204 = 0.0;
 var $205 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0, $213 = 0.0, $214 = 0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0, $22 = 0.0, $220 = 0.0, $221 = 0.0, $222 = 0.0;
 var $223 = 0, $224 = 0.0, $225 = 0, $226 = 0.0, $227 = 0.0, $228 = 0.0, $229 = 0.0, $23 = 0.0, $230 = 0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0, $235 = 0.0, $236 = 0, $237 = 0.0, $238 = 0.0, $239 = 0.0, $24 = 0.0, $240 = 0.0;
 var $241 = 0, $242 = 0.0, $243 = 0.0, $244 = 0.0, $245 = 0, $246 = 0.0, $247 = 0, $248 = 0.0, $249 = 0.0, $25 = 0, $250 = 0.0, $251 = 0.0, $252 = 0, $253 = 0.0, $254 = 0.0, $255 = 0.0, $256 = 0.0, $257 = 0, $258 = 0.0, $259 = 0;
 var $26 = 0.0, $260 = 0.0, $261 = 0.0, $262 = 0.0, $263 = 0, $264 = 0.0, $265 = 0, $266 = 0.0, $267 = 0.0, $268 = 0, $269 = 0.0, $27 = 0.0, $270 = 0.0, $271 = 0.0, $272 = 0.0, $273 = 0.0, $274 = 0, $275 = 0.0, $276 = 0, $277 = 0.0;
 var $278 = 0.0, $279 = 0.0, $28 = 0.0, $280 = 0.0, $281 = 0, $282 = 0.0, $283 = 0, $284 = 0.0, $285 = 0.0, $286 = 0.0, $287 = 0.0, $288 = 0, $289 = 0.0, $29 = 0, $290 = 0, $291 = 0.0, $292 = 0.0, $293 = 0.0, $294 = 0.0, $295 = 0;
 var $296 = 0.0, $297 = 0, $298 = 0.0, $299 = 0.0, $3 = 0, $30 = 0.0, $300 = 0.0, $301 = 0.0, $302 = 0, $303 = 0.0, $304 = 0, $305 = 0.0, $306 = 0.0, $307 = 0.0, $308 = 0.0, $309 = 0, $31 = 0, $310 = 0.0, $311 = 0, $312 = 0.0;
 var $313 = 0.0, $314 = 0.0, $315 = 0.0, $316 = 0.0, $317 = 0.0, $318 = 0, $319 = 0.0, $32 = 0.0, $320 = 0, $321 = 0.0, $322 = 0.0, $323 = 0.0, $324 = 0.0, $325 = 0.0, $326 = 0.0, $327 = 0.0, $328 = 0.0, $329 = 0.0, $33 = 0.0, $330 = 0.0;
 var $331 = 0.0, $332 = 0.0, $333 = 0.0, $334 = 0.0, $335 = 0.0, $336 = 0.0, $337 = 0.0, $338 = 0.0, $339 = 0.0, $34 = 0.0, $340 = 0, $341 = 0.0, $342 = 0, $343 = 0.0, $344 = 0.0, $345 = 0.0, $346 = 0.0, $347 = 0, $348 = 0.0, $349 = 0;
 var $35 = 0, $350 = 0.0, $351 = 0.0, $352 = 0.0, $353 = 0.0, $354 = 0, $355 = 0.0, $356 = 0, $357 = 0.0, $358 = 0.0, $359 = 0.0, $36 = 0.0, $360 = 0.0, $361 = 0, $362 = 0.0, $363 = 0, $364 = 0.0, $365 = 0.0, $366 = 0.0, $367 = 0.0;
 var $368 = 0, $369 = 0.0, $37 = 0.0, $370 = 0, $371 = 0.0, $372 = 0.0, $373 = 0.0, $374 = 0.0, $375 = 0, $376 = 0.0, $377 = 0, $378 = 0.0, $379 = 0.0, $38 = 0.0, $380 = 0.0, $381 = 0.0, $382 = 0.0, $383 = 0.0, $384 = 0.0, $385 = 0.0;
 var $386 = 0.0, $387 = 0.0, $388 = 0.0, $389 = 0.0, $39 = 0, $390 = 0.0, $391 = 0.0, $392 = 0.0, $393 = 0.0, $394 = 0.0, $395 = 0.0, $396 = 0.0, $397 = 0.0, $398 = 0.0, $399 = 0.0, $4 = 0.0, $40 = 0.0, $400 = 0.0, $401 = 0.0, $402 = 0.0;
 var $403 = 0.0, $404 = 0.0, $405 = 0.0, $406 = 0.0, $407 = 0.0, $408 = 0.0, $409 = 0.0, $41 = 0, $410 = 0.0, $411 = 0.0, $412 = 0.0, $413 = 0.0, $414 = 0.0, $415 = 0.0, $416 = 0.0, $417 = 0.0, $418 = 0.0, $419 = 0.0, $42 = 0.0, $420 = 0.0;
 var $421 = 0.0, $422 = 0.0, $423 = 0.0, $424 = 0.0, $425 = 0.0, $426 = 0.0, $427 = 0.0, $428 = 0.0, $429 = 0.0, $43 = 0.0, $430 = 0.0, $431 = 0.0, $432 = 0.0, $433 = 0.0, $434 = 0.0, $435 = 0.0, $436 = 0.0, $437 = 0.0, $438 = 0.0, $439 = 0.0;
 var $44 = 0.0, $440 = 0.0, $441 = 0.0, $442 = 0.0, $443 = 0.0, $444 = 0.0, $445 = 0.0, $446 = 0.0, $447 = 0.0, $448 = 0.0, $449 = 0.0, $45 = 0, $450 = 0.0, $451 = 0.0, $452 = 0.0, $453 = 0.0, $454 = 0.0, $455 = 0.0, $456 = 0.0, $457 = 0.0;
 var $458 = 0.0, $459 = 0.0, $46 = 0.0, $460 = 0.0, $461 = 0.0, $462 = 0.0, $463 = 0.0, $464 = 0.0, $465 = 0.0, $466 = 0.0, $467 = 0.0, $468 = 0.0, $469 = 0.0, $47 = 0.0, $470 = 0.0, $471 = 0.0, $472 = 0.0, $473 = 0.0, $474 = 0.0, $475 = 0.0;
 var $476 = 0.0, $477 = 0.0, $478 = 0.0, $479 = 0.0, $48 = 0.0, $480 = 0.0, $481 = 0.0, $482 = 0.0, $483 = 0.0, $484 = 0.0, $485 = 0.0, $486 = 0.0, $487 = 0.0, $488 = 0.0, $489 = 0.0, $49 = 0, $490 = 0.0, $491 = 0.0, $492 = 0.0, $493 = 0.0;
 var $494 = 0.0, $495 = 0.0, $496 = 0.0, $497 = 0.0, $498 = 0.0, $499 = 0.0, $5 = 0.0, $50 = 0.0, $500 = 0.0, $501 = 0.0, $502 = 0.0, $503 = 0.0, $504 = 0.0, $505 = 0.0, $506 = 0.0, $507 = 0.0, $508 = 0.0, $509 = 0.0, $51 = 0, $510 = 0.0;
 var $511 = 0.0, $512 = 0.0, $513 = 0.0, $514 = 0.0, $515 = 0.0, $516 = 0.0, $517 = 0.0, $518 = 0.0, $519 = 0.0, $52 = 0.0, $520 = 0.0, $521 = 0.0, $522 = 0.0, $523 = 0.0, $524 = 0.0, $525 = 0.0, $526 = 0.0, $527 = 0.0, $528 = 0.0, $529 = 0.0;
 var $53 = 0.0, $530 = 0.0, $531 = 0.0, $532 = 0.0, $533 = 0.0, $534 = 0.0, $535 = 0.0, $536 = 0.0, $537 = 0.0, $538 = 0.0, $539 = 0.0, $54 = 0.0, $540 = 0.0, $541 = 0.0, $542 = 0.0, $543 = 0.0, $544 = 0.0, $545 = 0.0, $546 = 0.0, $547 = 0.0;
 var $548 = 0.0, $549 = 0.0, $55 = 0, $550 = 0.0, $551 = 0.0, $552 = 0.0, $553 = 0.0, $554 = 0.0, $555 = 0.0, $556 = 0.0, $557 = 0.0, $558 = 0.0, $559 = 0.0, $56 = 0.0, $560 = 0.0, $561 = 0.0, $562 = 0.0, $563 = 0.0, $564 = 0.0, $565 = 0.0;
 var $566 = 0.0, $567 = 0.0, $568 = 0.0, $569 = 0.0, $57 = 0.0, $570 = 0.0, $571 = 0.0, $572 = 0.0, $573 = 0.0, $574 = 0.0, $575 = 0.0, $576 = 0.0, $577 = 0.0, $578 = 0.0, $579 = 0.0, $58 = 0.0, $580 = 0.0, $581 = 0.0, $582 = 0.0, $583 = 0.0;
 var $584 = 0.0, $585 = 0.0, $586 = 0.0, $587 = 0.0, $588 = 0.0, $589 = 0.0, $59 = 0, $590 = 0.0, $591 = 0.0, $592 = 0.0, $593 = 0.0, $594 = 0.0, $595 = 0.0, $596 = 0.0, $597 = 0.0, $598 = 0.0, $599 = 0.0, $6 = 0, $60 = 0.0, $600 = 0.0;
 var $601 = 0.0, $602 = 0.0, $603 = 0.0, $604 = 0.0, $605 = 0.0, $606 = 0.0, $607 = 0.0, $608 = 0.0, $609 = 0.0, $61 = 0, $610 = 0.0, $611 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0;
 var $7 = 0.0, $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0.0, $80 = 0.0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0.0, $87 = 0.0;
 var $88 = 0.0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $exitcond = 0, $i$03 = 0, $wp$02 = 0, $x2$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($x1) + -248|0);
 $$04 = $x1;$i$03 = -15;$wp$02 = ((60704 + 40|0));$x2$01 = $0;
 while(1) {
  $1 = (($wp$02) + -40|0);
  $2 = +HEAPF32[$1>>2];
  $3 = (($x2$01) + -896|0);
  $4 = +HEAPF32[$3>>2];
  $5 = $2 * $4;
  $6 = (($$04) + 896|0);
  $7 = +HEAPF32[$6>>2];
  $8 = $2 * $7;
  $9 = (($wp$02) + -36|0);
  $10 = +HEAPF32[$9>>2];
  $11 = (($x2$01) + -640|0);
  $12 = +HEAPF32[$11>>2];
  $13 = $10 * $12;
  $14 = $5 + $13;
  $15 = (($$04) + 640|0);
  $16 = +HEAPF32[$15>>2];
  $17 = $10 * $16;
  $18 = $8 + $17;
  $19 = (($wp$02) + -32|0);
  $20 = +HEAPF32[$19>>2];
  $21 = (($x2$01) + -384|0);
  $22 = +HEAPF32[$21>>2];
  $23 = $20 * $22;
  $24 = $14 + $23;
  $25 = (($$04) + 384|0);
  $26 = +HEAPF32[$25>>2];
  $27 = $20 * $26;
  $28 = $18 + $27;
  $29 = (($wp$02) + -28|0);
  $30 = +HEAPF32[$29>>2];
  $31 = (($x2$01) + -128|0);
  $32 = +HEAPF32[$31>>2];
  $33 = $30 * $32;
  $34 = $24 + $33;
  $35 = (($$04) + 128|0);
  $36 = +HEAPF32[$35>>2];
  $37 = $30 * $36;
  $38 = $28 + $37;
  $39 = (($wp$02) + -24|0);
  $40 = +HEAPF32[$39>>2];
  $41 = (($x2$01) + 128|0);
  $42 = +HEAPF32[$41>>2];
  $43 = $40 * $42;
  $44 = $34 + $43;
  $45 = (($$04) + -128|0);
  $46 = +HEAPF32[$45>>2];
  $47 = $40 * $46;
  $48 = $38 + $47;
  $49 = (($wp$02) + -20|0);
  $50 = +HEAPF32[$49>>2];
  $51 = (($x2$01) + 384|0);
  $52 = +HEAPF32[$51>>2];
  $53 = $50 * $52;
  $54 = $44 + $53;
  $55 = (($$04) + -384|0);
  $56 = +HEAPF32[$55>>2];
  $57 = $50 * $56;
  $58 = $48 + $57;
  $59 = (($wp$02) + -16|0);
  $60 = +HEAPF32[$59>>2];
  $61 = (($x2$01) + 640|0);
  $62 = +HEAPF32[$61>>2];
  $63 = $60 * $62;
  $64 = $54 + $63;
  $65 = (($$04) + -640|0);
  $66 = +HEAPF32[$65>>2];
  $67 = $60 * $66;
  $68 = $58 + $67;
  $69 = (($wp$02) + -12|0);
  $70 = +HEAPF32[$69>>2];
  $71 = (($x2$01) + 896|0);
  $72 = +HEAPF32[$71>>2];
  $73 = $70 * $72;
  $74 = $64 + $73;
  $75 = (($$04) + -896|0);
  $76 = +HEAPF32[$75>>2];
  $77 = $70 * $76;
  $78 = $68 + $77;
  $79 = (($wp$02) + -8|0);
  $80 = +HEAPF32[$79>>2];
  $81 = (($$04) + -1024|0);
  $82 = +HEAPF32[$81>>2];
  $83 = $80 * $82;
  $84 = $74 + $83;
  $85 = (($x2$01) + 1024|0);
  $86 = +HEAPF32[$85>>2];
  $87 = $80 * $86;
  $88 = $78 - $87;
  $89 = (($wp$02) + -4|0);
  $90 = +HEAPF32[$89>>2];
  $91 = (($$04) + -768|0);
  $92 = +HEAPF32[$91>>2];
  $93 = $90 * $92;
  $94 = $84 + $93;
  $95 = (($x2$01) + 768|0);
  $96 = +HEAPF32[$95>>2];
  $97 = $90 * $96;
  $98 = $88 - $97;
  $99 = +HEAPF32[$wp$02>>2];
  $100 = (($$04) + -512|0);
  $101 = +HEAPF32[$100>>2];
  $102 = $99 * $101;
  $103 = $94 + $102;
  $104 = (($x2$01) + 512|0);
  $105 = +HEAPF32[$104>>2];
  $106 = $99 * $105;
  $107 = $98 - $106;
  $108 = (($wp$02) + 4|0);
  $109 = +HEAPF32[$108>>2];
  $110 = (($$04) + -256|0);
  $111 = +HEAPF32[$110>>2];
  $112 = $109 * $111;
  $113 = $103 + $112;
  $114 = (($x2$01) + 256|0);
  $115 = +HEAPF32[$114>>2];
  $116 = $109 * $115;
  $117 = $107 - $116;
  $118 = (($wp$02) + 8|0);
  $119 = +HEAPF32[$118>>2];
  $120 = +HEAPF32[$$04>>2];
  $121 = $119 * $120;
  $122 = $113 + $121;
  $123 = +HEAPF32[$x2$01>>2];
  $124 = $119 * $123;
  $125 = $117 - $124;
  $126 = (($wp$02) + 12|0);
  $127 = +HEAPF32[$126>>2];
  $128 = (($$04) + 256|0);
  $129 = +HEAPF32[$128>>2];
  $130 = $127 * $129;
  $131 = $122 + $130;
  $132 = (($x2$01) + -256|0);
  $133 = +HEAPF32[$132>>2];
  $134 = $127 * $133;
  $135 = $125 - $134;
  $136 = (($wp$02) + 16|0);
  $137 = +HEAPF32[$136>>2];
  $138 = (($$04) + 512|0);
  $139 = +HEAPF32[$138>>2];
  $140 = $137 * $139;
  $141 = $131 + $140;
  $142 = (($x2$01) + -512|0);
  $143 = +HEAPF32[$142>>2];
  $144 = $137 * $143;
  $145 = $135 - $144;
  $146 = (($wp$02) + 20|0);
  $147 = +HEAPF32[$146>>2];
  $148 = (($$04) + 768|0);
  $149 = +HEAPF32[$148>>2];
  $150 = $147 * $149;
  $151 = $141 + $150;
  $152 = (($x2$01) + -768|0);
  $153 = +HEAPF32[$152>>2];
  $154 = $147 * $153;
  $155 = $145 - $154;
  $156 = (($wp$02) + 24|0);
  $157 = +HEAPF32[$156>>2];
  $158 = $151 * $157;
  $159 = $155 - $158;
  $160 = $155 + $158;
  $161 = $i$03 << 1;
  $162 = (($161) + 30)|0;
  $163 = (($a) + ($162<<2)|0);
  HEAPF32[$163>>2] = $160;
  $164 = (($wp$02) + 28|0);
  $165 = +HEAPF32[$164>>2];
  $166 = $165 * $159;
  $167 = (($161) + 31)|0;
  $168 = (($a) + ($167<<2)|0);
  HEAPF32[$168>>2] = $166;
  $169 = (($wp$02) + 72|0);
  $170 = (($$04) + -4|0);
  $171 = (($x2$01) + 4|0);
  $172 = (($i$03) + 1)|0;
  $exitcond = ($172|0)==(0);
  if ($exitcond) {
   break;
  } else {
   $$04 = $170;$i$03 = $172;$wp$02 = $169;$x2$01 = $171;
  }
 }
 $173 = (($x1) + -124|0);
 $174 = +HEAPF32[$173>>2];
 $175 = $174 * 10612.802734375;
 $176 = (($x1) + -188|0);
 $177 = +HEAPF32[$176>>2];
 $178 = $177 * 12804.7978515625;
 $179 = (($x1) + -252|0);
 $180 = +HEAPF32[$179>>2];
 $181 = (($x1) + 4|0);
 $182 = +HEAPF32[$181>>2];
 $183 = $180 - $182;
 $184 = $183 * 5302.158203125;
 $185 = $175 + $184;
 $186 = (($x1) + -444|0);
 $187 = +HEAPF32[$186>>2];
 $188 = $187 * 1945.5516357421875;
 $189 = $178 + $188;
 $190 = (($x1) + -380|0);
 $191 = +HEAPF32[$190>>2];
 $192 = (($x1) + 132|0);
 $193 = +HEAPF32[$192>>2];
 $194 = $191 + $193;
 $195 = $194 * 929.77630615234375;
 $196 = $185 + $195;
 $197 = (($x1) + -700|0);
 $198 = +HEAPF32[$197>>2];
 $199 = $198 * 313.42449951171875;
 $200 = $189 + $199;
 $201 = (($x1) + -508|0);
 $202 = +HEAPF32[$201>>2];
 $203 = (($x1) + 260|0);
 $204 = +HEAPF32[$203>>2];
 $205 = $202 - $204;
 $206 = $205 * 728.80108642578125;
 $207 = $196 + $206;
 $208 = (($x1) + -956|0);
 $209 = +HEAPF32[$208>>2];
 $210 = $209 * 20.801593780517578125;
 $211 = $200 + $210;
 $212 = (($x1) + -636|0);
 $213 = +HEAPF32[$212>>2];
 $214 = (($x1) + 388|0);
 $215 = +HEAPF32[$214>>2];
 $216 = $213 + $215;
 $217 = $216 * 288.09765625;
 $218 = $207 + $217;
 $219 = (($x1) + 68|0);
 $220 = +HEAPF32[$219>>2];
 $221 = $220 * 1995.1556396484375;
 $222 = $211 - $221;
 $223 = (($x1) + -764|0);
 $224 = +HEAPF32[$223>>2];
 $225 = (($x1) + 516|0);
 $226 = +HEAPF32[$225>>2];
 $227 = $224 - $226;
 $228 = $227 * 64.917388916015625;
 $229 = $218 + $228;
 $230 = (($x1) + 324|0);
 $231 = +HEAPF32[$230>>2];
 $232 = $231 * 9.0008392333984375;
 $233 = $222 - $232;
 $234 = (($x1) + -892|0);
 $235 = +HEAPF32[$234>>2];
 $236 = (($x1) + 644|0);
 $237 = +HEAPF32[$236>>2];
 $238 = $235 + $237;
 $239 = $238 * 30.125003814697265625;
 $240 = $229 + $239;
 $241 = (($x1) + 580|0);
 $242 = +HEAPF32[$241>>2];
 $243 = $242 * -29.2021808624267578125;
 $244 = $233 - $243;
 $245 = (($x1) + -1020|0);
 $246 = +HEAPF32[$245>>2];
 $247 = (($x1) + 772|0);
 $248 = +HEAPF32[$247>>2];
 $249 = $246 - $248;
 $250 = $249 * 4.10145664215087890625;
 $251 = $240 + $250;
 $252 = (($x1) + 836|0);
 $253 = +HEAPF32[$252>>2];
 $254 = $244 - $253;
 $255 = $254 - $251;
 $256 = $254 + $251;
 $257 = (($a) + 56|0);
 $258 = +HEAPF32[$257>>2];
 $259 = (($a) + 60|0);
 $260 = +HEAPF32[$259>>2];
 $261 = $260 - $258;
 $262 = $258 + $256;
 $263 = (($a) + 124|0);
 $264 = $255 + $261;
 $265 = (($a) + 120|0);
 $266 = $255 - $261;
 $267 = $256 - $258;
 $268 = (($a) + 112|0);
 $269 = +HEAPF32[$268>>2];
 $270 = +HEAPF32[$a>>2];
 $271 = $269 - $270;
 $272 = $269 + $270;
 HEAPF32[$a>>2] = $272;
 $273 = $271 * 1.96157050132751464844;
 HEAPF32[$268>>2] = $273;
 $274 = (($a) + 116|0);
 $275 = +HEAPF32[$274>>2];
 $276 = (($a) + 4|0);
 $277 = +HEAPF32[$276>>2];
 $278 = $275 - $277;
 $279 = $275 + $277;
 HEAPF32[$276>>2] = $279;
 $280 = $278 * 1.96157050132751464844;
 HEAPF32[$274>>2] = $280;
 $281 = (($a) + 104|0);
 $282 = +HEAPF32[$281>>2];
 $283 = (($a) + 8|0);
 $284 = +HEAPF32[$283>>2];
 $285 = $282 - $284;
 $286 = $282 + $284;
 HEAPF32[$283>>2] = $286;
 $287 = $285 * 1.84775900840759277344;
 HEAPF32[$281>>2] = $287;
 $288 = (($a) + 108|0);
 $289 = +HEAPF32[$288>>2];
 $290 = (($a) + 12|0);
 $291 = +HEAPF32[$290>>2];
 $292 = $289 - $291;
 $293 = $289 + $291;
 HEAPF32[$290>>2] = $293;
 $294 = $292 * 1.84775900840759277344;
 HEAPF32[$288>>2] = $294;
 $295 = (($a) + 96|0);
 $296 = +HEAPF32[$295>>2];
 $297 = (($a) + 16|0);
 $298 = +HEAPF32[$297>>2];
 $299 = $296 - $298;
 $300 = $296 + $298;
 HEAPF32[$297>>2] = $300;
 $301 = $299 * 1.66293919086456298828;
 HEAPF32[$295>>2] = $301;
 $302 = (($a) + 100|0);
 $303 = +HEAPF32[$302>>2];
 $304 = (($a) + 20|0);
 $305 = +HEAPF32[$304>>2];
 $306 = $303 - $305;
 $307 = $303 + $305;
 HEAPF32[$304>>2] = $307;
 $308 = $306 * 1.66293919086456298828;
 HEAPF32[$302>>2] = $308;
 $309 = (($a) + 88|0);
 $310 = +HEAPF32[$309>>2];
 $311 = (($a) + 24|0);
 $312 = +HEAPF32[$311>>2];
 $313 = $310 - $312;
 $314 = $310 + $312;
 $315 = $313;
 $316 = $315 * 1.41421356237309514547;
 $317 = $316;
 $318 = (($a) + 92|0);
 $319 = +HEAPF32[$318>>2];
 $320 = (($a) + 28|0);
 $321 = +HEAPF32[$320>>2];
 $322 = $319 - $321;
 $323 = $319 + $321;
 $324 = $322;
 $325 = $324 * 1.41421356237309514547;
 $326 = $323;
 $327 = $325 - $326;
 $328 = $327;
 $329 = $323 - $314;
 $330 = $317 - $329;
 $331 = $328 - $330;
 $332 = $262 - $314;
 HEAPF32[$311>>2] = $332;
 $333 = $314 + $262;
 HEAPF32[$263>>2] = $333;
 $334 = $264 - $329;
 HEAPF32[$320>>2] = $334;
 $335 = $329 + $264;
 HEAPF32[$265>>2] = $335;
 $336 = $266 - $330;
 HEAPF32[$309>>2] = $336;
 $337 = $330 + $266;
 HEAPF32[$259>>2] = $337;
 $338 = $267 - $331;
 HEAPF32[$318>>2] = $338;
 $339 = $331 + $267;
 HEAPF32[$257>>2] = $339;
 $340 = (($a) + 80|0);
 $341 = +HEAPF32[$340>>2];
 $342 = (($a) + 32|0);
 $343 = +HEAPF32[$342>>2];
 $344 = $341 - $343;
 $345 = $341 + $343;
 $346 = $344 * 1.11114048957824707031;
 $347 = (($a) + 84|0);
 $348 = +HEAPF32[$347>>2];
 $349 = (($a) + 36|0);
 $350 = +HEAPF32[$349>>2];
 $351 = $348 - $350;
 $352 = $348 + $350;
 $353 = $351 * 1.11114048957824707031;
 $354 = (($a) + 72|0);
 $355 = +HEAPF32[$354>>2];
 $356 = (($a) + 40|0);
 $357 = +HEAPF32[$356>>2];
 $358 = $355 - $357;
 $359 = $355 + $357;
 $360 = $358 * 0.765366852283477783203;
 $361 = (($a) + 76|0);
 $362 = +HEAPF32[$361>>2];
 $363 = (($a) + 44|0);
 $364 = +HEAPF32[$363>>2];
 $365 = $362 - $364;
 $366 = $362 + $364;
 $367 = $365 * 0.765366852283477783203;
 $368 = (($a) + 64|0);
 $369 = +HEAPF32[$368>>2];
 $370 = (($a) + 48|0);
 $371 = +HEAPF32[$370>>2];
 $372 = $369 - $371;
 $373 = $369 + $371;
 $374 = $372 * 0.390180647373199462891;
 $375 = (($a) + 68|0);
 $376 = +HEAPF32[$375>>2];
 $377 = (($a) + 52|0);
 $378 = +HEAPF32[$377>>2];
 $379 = $376 - $378;
 $380 = $376 + $378;
 $381 = $379 * 0.390180647373199462891;
 $382 = +HEAPF32[$295>>2];
 $383 = $382 - $346;
 $384 = $346 + $382;
 HEAPF32[$340>>2] = $384;
 $385 = $383 * 0.765366852283477783203;
 HEAPF32[$295>>2] = $385;
 $386 = +HEAPF32[$302>>2];
 $387 = $386 - $353;
 $388 = $353 + $386;
 HEAPF32[$347>>2] = $388;
 $389 = $387 * 0.765366852283477783203;
 HEAPF32[$302>>2] = $389;
 $390 = +HEAPF32[$297>>2];
 $391 = $390 - $345;
 $392 = $390 + $345;
 HEAPF32[$297>>2] = $392;
 $393 = $391 * 0.765366852283477783203;
 HEAPF32[$342>>2] = $393;
 $394 = +HEAPF32[$304>>2];
 $395 = $394 - $352;
 $396 = $394 + $352;
 HEAPF32[$304>>2] = $396;
 $397 = $395 * 0.765366852283477783203;
 HEAPF32[$349>>2] = $397;
 $398 = +HEAPF32[$a>>2];
 $399 = $398 - $373;
 $400 = $398 + $373;
 HEAPF32[$a>>2] = $400;
 $401 = $399 * 1.84775900840759277344;
 HEAPF32[$370>>2] = $401;
 $402 = +HEAPF32[$276>>2];
 $403 = $402 - $380;
 $404 = $402 + $380;
 HEAPF32[$276>>2] = $404;
 $405 = $403 * 1.84775900840759277344;
 HEAPF32[$377>>2] = $405;
 $406 = +HEAPF32[$268>>2];
 $407 = $374 - $406;
 $408 = $374 + $406;
 HEAPF32[$368>>2] = $408;
 $409 = $407 * 1.84775900840759277344;
 HEAPF32[$268>>2] = $409;
 $410 = +HEAPF32[$274>>2];
 $411 = $410 - $381;
 $412 = $381 + $410;
 HEAPF32[$375>>2] = $412;
 $413 = $411 * 1.84775900840759277344;
 HEAPF32[$274>>2] = $413;
 $414 = +HEAPF32[$283>>2];
 $415 = $414 - $359;
 $416 = $415;
 $417 = $416 * 1.41421356237309514547;
 $418 = $417;
 $419 = $414 + $359;
 $420 = +HEAPF32[$290>>2];
 $421 = $420 - $366;
 $422 = $421;
 $423 = $422 * 1.41421356237309514547;
 $424 = $423;
 $425 = $420 + $366;
 $426 = +HEAPF32[$281>>2];
 $427 = $426 - $360;
 $428 = $427;
 $429 = $428 * 1.41421356237309514547;
 $430 = $429;
 $431 = $360 + $426;
 $432 = $430 - $431;
 $433 = +HEAPF32[$288>>2];
 $434 = $433 - $367;
 $435 = $434;
 $436 = $435 * 1.41421356237309514547;
 $437 = $436;
 $438 = $367 + $433;
 $439 = $437 - $438;
 $440 = $438 - $425;
 $441 = $425 - $419;
 $442 = +HEAPF32[$263>>2];
 $443 = $442 - $419;
 HEAPF32[$283>>2] = $443;
 $444 = $419 + $442;
 HEAPF32[$263>>2] = $444;
 $445 = $424 - $440;
 $446 = $431 - $441;
 $447 = +HEAPF32[$265>>2];
 $448 = $447 - $441;
 HEAPF32[$290>>2] = $448;
 $449 = $441 + $447;
 HEAPF32[$265>>2] = $449;
 $450 = $439 - $445;
 $451 = $440 - $446;
 $452 = +HEAPF32[$259>>2];
 $453 = $452 - $446;
 HEAPF32[$354>>2] = $453;
 $454 = $446 + $452;
 HEAPF32[$259>>2] = $454;
 $455 = $418 - $451;
 $456 = +HEAPF32[$257>>2];
 $457 = $456 - $451;
 HEAPF32[$361>>2] = $457;
 $458 = $451 + $456;
 HEAPF32[$257>>2] = $458;
 $459 = $445 - $455;
 $460 = +HEAPF32[$318>>2];
 $461 = $460 - $455;
 HEAPF32[$356>>2] = $461;
 $462 = $455 + $460;
 HEAPF32[$318>>2] = $462;
 $463 = $432 - $459;
 $464 = +HEAPF32[$309>>2];
 $465 = $464 - $459;
 HEAPF32[$363>>2] = $465;
 $466 = $459 + $464;
 HEAPF32[$309>>2] = $466;
 $467 = $450 - $463;
 $468 = +HEAPF32[$320>>2];
 $469 = $468 - $463;
 HEAPF32[$281>>2] = $469;
 $470 = $463 + $468;
 HEAPF32[$320>>2] = $470;
 $471 = +HEAPF32[$311>>2];
 $472 = $471 - $467;
 HEAPF32[$288>>2] = $472;
 $473 = $467 + $471;
 HEAPF32[$311>>2] = $473;
 $474 = +HEAPF32[$a>>2];
 $475 = +HEAPF32[$297>>2];
 $476 = $474 - $475;
 $477 = $476;
 $478 = $477 * 1.41421356237309514547;
 $479 = $478;
 $480 = $474 + $475;
 HEAPF32[$a>>2] = $480;
 HEAPF32[$297>>2] = $479;
 $481 = +HEAPF32[$276>>2];
 $482 = +HEAPF32[$304>>2];
 $483 = $481 - $482;
 $484 = $483;
 $485 = $484 * 1.41421356237309514547;
 $486 = $485;
 $487 = $481 + $482;
 $488 = +HEAPF32[$368>>2];
 $489 = +HEAPF32[$340>>2];
 $490 = $488 - $489;
 $491 = $490;
 $492 = $491 * 1.41421356237309514547;
 $493 = $492;
 $494 = $488 + $489;
 $495 = +HEAPF32[$375>>2];
 $496 = +HEAPF32[$347>>2];
 $497 = $495 - $496;
 $498 = $497;
 $499 = $498 * 1.41421356237309514547;
 $500 = $499;
 $501 = $495 + $496;
 $502 = +HEAPF32[$342>>2];
 $503 = +HEAPF32[$370>>2];
 $504 = $502 - $503;
 $505 = $504;
 $506 = $505 * -1.41421356237309514547;
 $507 = $506;
 $508 = $502 + $503;
 $509 = $507 - $508;
 $510 = +HEAPF32[$349>>2];
 $511 = +HEAPF32[$377>>2];
 $512 = $510 - $511;
 $513 = $512;
 $514 = $513 * -1.41421356237309514547;
 $515 = $514;
 $516 = $510 + $511;
 $517 = $515 - $516;
 $518 = +HEAPF32[$302>>2];
 $519 = +HEAPF32[$274>>2];
 $520 = $518 - $519;
 $521 = $520;
 $522 = $521 * -1.41421356237309514547;
 $523 = $522;
 $524 = $518 + $519;
 $525 = $523 - $524;
 $526 = +HEAPF32[$295>>2];
 $527 = +HEAPF32[$268>>2];
 $528 = $526 + $527;
 $529 = $528;
 $530 = $529 * -1.41421356237309514547;
 $531 = $530;
 $532 = $526 - $527;
 $533 = $531 - $532;
 $534 = $532 - $494;
 $535 = $493 - $534;
 $536 = $533 - $535;
 $537 = $524 - $501;
 $538 = $500 - $537;
 $539 = $525 - $538;
 $540 = $501 - $487;
 $541 = $516 - $540;
 $542 = $537 - $541;
 $543 = $486 - $542;
 $544 = $538 - $543;
 $545 = $517 - $544;
 $546 = $539 - $545;
 $547 = $487 - $480;
 $548 = $494 - $547;
 $549 = $540 - $548;
 $550 = $508 - $549;
 $551 = $541 - $550;
 $552 = $534 - $551;
 $553 = $542 - $552;
 $554 = +HEAPF32[$297>>2];
 $555 = $554 - $553;
 $556 = $543 - $555;
 $557 = $535 - $556;
 $558 = $544 - $557;
 $559 = $509 - $558;
 $560 = $545 - $559;
 $561 = $536 - $560;
 $562 = $546 - $561;
 $563 = +HEAPF32[$a>>2];
 $564 = +HEAPF32[$263>>2];
 $565 = $563 + $564;
 HEAPF32[$a>>2] = $565;
 $566 = $564 - $563;
 HEAPF32[$263>>2] = $566;
 $567 = +HEAPF32[$265>>2];
 $568 = $547 + $567;
 HEAPF32[$276>>2] = $568;
 $569 = $567 - $547;
 HEAPF32[$265>>2] = $569;
 $570 = +HEAPF32[$259>>2];
 $571 = $548 + $570;
 HEAPF32[$368>>2] = $571;
 $572 = $570 - $548;
 HEAPF32[$259>>2] = $572;
 $573 = +HEAPF32[$257>>2];
 $574 = $549 + $573;
 HEAPF32[$375>>2] = $574;
 $575 = $573 - $549;
 HEAPF32[$257>>2] = $575;
 $576 = +HEAPF32[$318>>2];
 $577 = $550 + $576;
 HEAPF32[$342>>2] = $577;
 $578 = $576 - $550;
 HEAPF32[$318>>2] = $578;
 $579 = +HEAPF32[$309>>2];
 $580 = $551 + $579;
 HEAPF32[$349>>2] = $580;
 $581 = $579 - $551;
 HEAPF32[$309>>2] = $581;
 $582 = +HEAPF32[$320>>2];
 $583 = $552 + $582;
 HEAPF32[$295>>2] = $583;
 $584 = $582 - $552;
 HEAPF32[$320>>2] = $584;
 $585 = +HEAPF32[$311>>2];
 $586 = $553 + $585;
 HEAPF32[$302>>2] = $586;
 $587 = $585 - $553;
 HEAPF32[$311>>2] = $587;
 $588 = +HEAPF32[$288>>2];
 $589 = $555 + $588;
 HEAPF32[$297>>2] = $589;
 $590 = $588 - $555;
 HEAPF32[$288>>2] = $590;
 $591 = +HEAPF32[$281>>2];
 $592 = $556 + $591;
 HEAPF32[$304>>2] = $592;
 $593 = $591 - $556;
 HEAPF32[$281>>2] = $593;
 $594 = +HEAPF32[$363>>2];
 $595 = $557 + $594;
 HEAPF32[$340>>2] = $595;
 $596 = $594 - $557;
 HEAPF32[$363>>2] = $596;
 $597 = +HEAPF32[$356>>2];
 $598 = $558 + $597;
 HEAPF32[$347>>2] = $598;
 $599 = $597 - $558;
 HEAPF32[$356>>2] = $599;
 $600 = +HEAPF32[$361>>2];
 $601 = $559 + $600;
 HEAPF32[$370>>2] = $601;
 $602 = $600 - $559;
 HEAPF32[$361>>2] = $602;
 $603 = +HEAPF32[$354>>2];
 $604 = $560 + $603;
 HEAPF32[$377>>2] = $604;
 $605 = $603 - $560;
 HEAPF32[$354>>2] = $605;
 $606 = +HEAPF32[$290>>2];
 $607 = $561 + $606;
 HEAPF32[$268>>2] = $607;
 $608 = $606 - $561;
 HEAPF32[$290>>2] = $608;
 $609 = +HEAPF32[$283>>2];
 $610 = $562 + $609;
 HEAPF32[$274>>2] = $610;
 $611 = $609 - $562;
 HEAPF32[$283>>2] = $611;
 STACKTOP = sp;return;
}
function _apply_preset($gfp,$preset,$enforce) {
 $gfp = $gfp|0;
 $preset = $preset|0;
 $enforce = $enforce|0;
 var $$0 = 0, $$02$off = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 L1: do {
  switch ($preset|0) {
  case 1004: case 1001:  {
   (_lame_set_VBR($gfp,4)|0);
   $2 = (($gfp) + 152|0);
   HEAP32[$2>>2] = 480;
   label = 15;
   break;
  }
  case 1007: case 1006:  {
   (_lame_set_VBR($gfp,4)|0);
   $1 = (($gfp) + 152|0);
   HEAP32[$1>>2] = 460;
   label = 13;
   break;
  }
  case 1005: case 1002:  {
   (_lame_set_VBR($gfp,4)|0);
   $3 = (($gfp) + 152|0);
   HEAP32[$3>>2] = 500;
   label = 17;
   break;
  }
  case 1003:  {
   $4 = (($gfp) + 152|0);
   HEAP32[$4>>2] = 320;
   (_apply_abr_preset($gfp,320,$enforce)|0);
   (_lame_set_VBR($gfp,0)|0);
   $$0 = 320;
   break;
  }
  case 1000:  {
   (_lame_set_VBR($gfp,4)|0);
   $0 = (($gfp) + 152|0);
   HEAP32[$0>>2] = 470;
   label = 14;
   break;
  }
  default: {
   $5 = (($gfp) + 152|0);
   HEAP32[$5>>2] = $preset;
   switch ($preset|0) {
   case 440:  {
    _apply_vbr_preset($gfp,6,$enforce);
    $$0 = 440;
    break L1;
    break;
   }
   case 420:  {
    _apply_vbr_preset($gfp,8,$enforce);
    $$0 = 420;
    break L1;
    break;
   }
   case 490:  {
    _apply_vbr_preset($gfp,1,$enforce);
    $$0 = 490;
    break L1;
    break;
   }
   case 450:  {
    _apply_vbr_preset($gfp,5,$enforce);
    $$0 = 450;
    break L1;
    break;
   }
   case 480:  {
    label = 15;
    break L1;
    break;
   }
   case 460:  {
    label = 13;
    break L1;
    break;
   }
   case 500:  {
    label = 17;
    break L1;
    break;
   }
   case 410:  {
    _apply_vbr_preset($gfp,9,$enforce);
    $$0 = 410;
    break L1;
    break;
   }
   case 430:  {
    _apply_vbr_preset($gfp,7,$enforce);
    $$0 = 430;
    break L1;
    break;
   }
   case 470:  {
    label = 14;
    break L1;
    break;
   }
   default: {
    $$02$off = (($preset) + -8)|0;
    $6 = ($$02$off>>>0)<(313);
    if ($6) {
     $7 = (_apply_abr_preset($gfp,$preset,$enforce)|0);
     $$0 = $7;
     break L1;
    } else {
     HEAP32[$5>>2] = 0;
     $$0 = $preset;
     break L1;
    }
   }
   }
  }
  }
 } while(0);
 if ((label|0) == 13) {
  _apply_vbr_preset($gfp,4,$enforce);
  $$0 = 460;
 }
 else if ((label|0) == 14) {
  _apply_vbr_preset($gfp,3,$enforce);
  $$0 = 470;
 }
 else if ((label|0) == 15) {
  _apply_vbr_preset($gfp,2,$enforce);
  $$0 = 480;
 }
 else if ((label|0) == 17) {
  _apply_vbr_preset($gfp,0,$enforce);
  $$0 = 500;
 }
 STACKTOP = sp;return ($$0|0);
}
function _apply_abr_preset($gfp,$preset,$enforce) {
 $gfp = $gfp|0;
 $preset = $preset|0;
 $enforce = $enforce|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0;
 var $63 = 0.0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0.0;
 var $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0, $a$$i = 0, $a$$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $preset&65535;
 $1 = (_nearestBitrateFullIndex($0)|0);
 (_lame_set_VBR($gfp,3)|0);
 (_lame_set_VBR_mean_bitrate_kbps($gfp,$preset)|0);
 $2 = (_lame_get_VBR_mean_bitrate_kbps($gfp)|0);
 $3 = ($2|0)<(320);
 $a$$i = $3 ? $2 : 320;
 (_lame_set_VBR_mean_bitrate_kbps($gfp,$a$$i)|0);
 $4 = (_lame_get_VBR_mean_bitrate_kbps($gfp)|0);
 $5 = ($4|0)>(8);
 $a$$i1 = $5 ? $4 : 8;
 (_lame_set_VBR_mean_bitrate_kbps($gfp,$a$$i1)|0);
 $6 = (_lame_get_VBR_mean_bitrate_kbps($gfp)|0);
 (_lame_set_brate($gfp,$6)|0);
 $7 = (($1) + -12)|0;
 $8 = ($7>>>0)<(5);
 if ($8) {
  $9 = (_lame_get_exp_nspsytune($gfp)|0);
  $10 = $9 | 2;
  (_lame_set_exp_nspsytune($gfp,$10)|0);
 }
 $11 = ($1>>>0)<(13);
 if ($11) {
  (_lame_set_sfscale($gfp,1)|0);
 }
 $12 = ($enforce|0)!=(0);
 if ($12) {
  $32 = ((63352 + (($1*52)|0)|0) + 4|0);
  $33 = HEAP32[$32>>2]|0;
  (_lame_set_quant_comp($gfp,$33)|0);
  $34 = ((63352 + (($1*52)|0)|0) + 8|0);
  $35 = HEAP32[$34>>2]|0;
  (_lame_set_quant_comp_short($gfp,$35)|0);
  $36 = ((63352 + (($1*52)|0)|0) + 16|0);
  $37 = +HEAPF32[$36>>2];
  $38 = $37;
  _lame_set_msfix($gfp,$38);
  $39 = ((63352 + (($1*52)|0)|0) + 20|0);
  $40 = +HEAPF32[$39>>2];
  (_lame_set_short_threshold_lrm($gfp,$40)|0);
  $41 = ((63352 + (($1*52)|0)|0) + 24|0);
  $42 = +HEAPF32[$41>>2];
  (_lame_set_short_threshold_s($gfp,$42)|0);
 } else {
  $13 = (_lame_get_quant_comp($gfp)|0);
  $14 = ($13|0)==(-1);
  if ($14) {
   $15 = ((63352 + (($1*52)|0)|0) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   (_lame_set_quant_comp($gfp,$16)|0);
  }
  $17 = (_lame_get_quant_comp_short($gfp)|0);
  $18 = ($17|0)==(-1);
  if ($18) {
   $19 = ((63352 + (($1*52)|0)|0) + 8|0);
   $20 = HEAP32[$19>>2]|0;
   (_lame_set_quant_comp_short($gfp,$20)|0);
  }
  $21 = (+_lame_get_msfix($gfp));
  $22 = $21 + 1.0;
  $23 = ($22 != $22) | (0.0 != 0.0) |($22 == 0.0);
  if ($23) {
   $24 = ((63352 + (($1*52)|0)|0) + 16|0);
   $25 = +HEAPF32[$24>>2];
   $26 = $25;
   _lame_set_msfix($gfp,$26);
  }
  $27 = (+_lame_get_short_threshold_lrm($gfp));
  $28 = $27 + 1.0;
  $29 = ($28 != $28) | (0.0 != 0.0) |($28 == 0.0);
  if ($29) {
   $30 = ((63352 + (($1*52)|0)|0) + 20|0);
   $31 = +HEAPF32[$30>>2];
   (_lame_set_short_threshold_lrm($gfp,$31)|0);
  }
  $43 = (+_lame_get_short_threshold_s($gfp));
  $44 = $43 + 1.0;
  $45 = ($44 != $44) | (0.0 != 0.0) |($44 == 0.0);
  if ($45) {
   $46 = ((63352 + (($1*52)|0)|0) + 24|0);
   $47 = +HEAPF32[$46>>2];
   (_lame_set_short_threshold_s($gfp,$47)|0);
  }
 }
 $48 = (+_lame_get_scale($gfp));
 $49 = ((63352 + (($1*52)|0)|0) + 28|0);
 $50 = +HEAPF32[$49>>2];
 $51 = $48 * $50;
 (_lame_set_scale($gfp,$51)|0);
 if ($12) {
  $72 = ((63352 + (($1*52)|0)|0) + 32|0);
  $73 = +HEAPF32[$72>>2];
  (_lame_set_maskingadjust($gfp,$73)|0);
  $74 = $73;
  $75 = $74 * 1.10000000000000008882;
  $76 = $75;
  (_lame_set_maskingadjust_short($gfp,$76)|0);
  $77 = ((63352 + (($1*52)|0)|0) + 36|0);
  $78 = +HEAPF32[$77>>2];
  (_lame_set_ATHlower($gfp,$78)|0);
  $79 = ((63352 + (($1*52)|0)|0) + 40|0);
  $80 = +HEAPF32[$79>>2];
  (_lame_set_ATHcurve($gfp,$80)|0);
  $81 = ((63352 + (($1*52)|0)|0) + 44|0);
  $82 = +HEAPF32[$81>>2];
  (_lame_set_interChRatio($gfp,$82)|0);
  $88 = (63352 + (($1*52)|0)|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = (+($89|0));
  $91 = $90 * 0.015625;
  $92 = $91;
  $93 = (($gfp) + 288|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = (($94) + 280|0);
  HEAPF32[$95>>2] = $92;
  STACKTOP = sp;return ($preset|0);
 }
 $52 = (+_lame_get_maskingadjust($gfp));
 $53 = ($52 != $52) | (0.0 != 0.0) |($52 == 0.0);
 if ($53) {
  $54 = ((63352 + (($1*52)|0)|0) + 32|0);
  $55 = +HEAPF32[$54>>2];
  (_lame_set_maskingadjust($gfp,$55)|0);
 }
 $56 = (+_lame_get_maskingadjust_short($gfp));
 $57 = ($56 != $56) | (0.0 != 0.0) |($56 == 0.0);
 if ($57) {
  $58 = ((63352 + (($1*52)|0)|0) + 32|0);
  $59 = +HEAPF32[$58>>2];
  $60 = $59;
  $61 = $60 * 1.10000000000000008882;
  $62 = $61;
  (_lame_set_maskingadjust_short($gfp,$62)|0);
 }
 $63 = (+_lame_get_ATHlower($gfp));
 $64 = ($63 != $63) | (0.0 != 0.0) |($63 == 0.0);
 if ($64) {
  $65 = ((63352 + (($1*52)|0)|0) + 36|0);
  $66 = +HEAPF32[$65>>2];
  (_lame_set_ATHlower($gfp,$66)|0);
 }
 $67 = (+_lame_get_ATHcurve($gfp));
 $68 = $67 + 1.0;
 $69 = ($68 != $68) | (0.0 != 0.0) |($68 == 0.0);
 if ($69) {
  $70 = ((63352 + (($1*52)|0)|0) + 40|0);
  $71 = +HEAPF32[$70>>2];
  (_lame_set_ATHcurve($gfp,$71)|0);
 }
 $83 = (+_lame_get_interChRatio($gfp));
 $84 = $83 + 1.0;
 $85 = ($84 != $84) | (0.0 != 0.0) |($84 == 0.0);
 if (!($85)) {
  $88 = (63352 + (($1*52)|0)|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = (+($89|0));
  $91 = $90 * 0.015625;
  $92 = $91;
  $93 = (($gfp) + 288|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = (($94) + 280|0);
  HEAPF32[$95>>2] = $92;
  STACKTOP = sp;return ($preset|0);
 }
 $86 = ((63352 + (($1*52)|0)|0) + 44|0);
 $87 = +HEAPF32[$86>>2];
 (_lame_set_interChRatio($gfp,$87)|0);
 $88 = (63352 + (($1*52)|0)|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = (+($89|0));
 $91 = $90 * 0.015625;
 $92 = $91;
 $93 = (($gfp) + 288|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = (($94) + 280|0);
 HEAPF32[$95>>2] = $92;
 STACKTOP = sp;return ($preset|0);
}
function _apply_vbr_preset($gfp,$a,$enforce) {
 $gfp = $gfp|0;
 $a = $a|0;
 $enforce = $enforce|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0.0, $114 = 0;
 var $115 = 0.0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0.0, $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0.0, $142 = 0.0, $143 = 0, $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0.0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0;
 var $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0.0;
 var $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0;
 var $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0.0;
 var $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lame_get_VBR($gfp)|0);
 if ((($0|0) == 1) | (($0|0) == 4)) {
  $$0$i = 61848;
 } else {
  $$0$i = 62600;
 }
 $1 = (($gfp) + 160|0);
 $2 = +HEAPF32[$1>>2];
 $3 = (($$0$i) + (($a*68)|0)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($$0$i) + (($a*68)|0)|0) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($$0$i) + (($a*68)|0)|0) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($$0$i) + (($a*68)|0)|0) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($$0$i) + (($a*68)|0)|0) + 16|0);
 $12 = +HEAPF32[$11>>2];
 $13 = ((($$0$i) + (($a*68)|0)|0) + 20|0);
 $14 = +HEAPF32[$13>>2];
 $15 = ((($$0$i) + (($a*68)|0)|0) + 24|0);
 $16 = +HEAPF32[$15>>2];
 $17 = ((($$0$i) + (($a*68)|0)|0) + 28|0);
 $18 = +HEAPF32[$17>>2];
 $19 = ((($$0$i) + (($a*68)|0)|0) + 32|0);
 $20 = +HEAPF32[$19>>2];
 $21 = ((($$0$i) + (($a*68)|0)|0) + 36|0);
 $22 = +HEAPF32[$21>>2];
 $23 = ((($$0$i) + (($a*68)|0)|0) + 40|0);
 $24 = +HEAPF32[$23>>2];
 $25 = ((($$0$i) + (($a*68)|0)|0) + 44|0);
 $26 = +HEAPF32[$25>>2];
 $27 = ((($$0$i) + (($a*68)|0)|0) + 48|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($$0$i) + (($a*68)|0)|0) + 52|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($$0$i) + (($a*68)|0)|0) + 56|0);
 $32 = +HEAPF32[$31>>2];
 $33 = ((($$0$i) + (($a*68)|0)|0) + 60|0);
 $34 = +HEAPF32[$33>>2];
 $35 = ((($$0$i) + (($a*68)|0)|0) + 64|0);
 $36 = +HEAPF32[$35>>2];
 $37 = (($a) + 1)|0;
 $38 = ((($$0$i) + (($37*68)|0)|0) + 16|0);
 $39 = +HEAPF32[$38>>2];
 $40 = ((($$0$i) + (($37*68)|0)|0) + 20|0);
 $41 = +HEAPF32[$40>>2];
 $42 = ((($$0$i) + (($37*68)|0)|0) + 24|0);
 $43 = +HEAPF32[$42>>2];
 $44 = ((($$0$i) + (($37*68)|0)|0) + 28|0);
 $45 = +HEAPF32[$44>>2];
 $46 = ((($$0$i) + (($37*68)|0)|0) + 32|0);
 $47 = +HEAPF32[$46>>2];
 $48 = ((($$0$i) + (($37*68)|0)|0) + 36|0);
 $49 = +HEAPF32[$48>>2];
 $50 = ((($$0$i) + (($37*68)|0)|0) + 40|0);
 $51 = +HEAPF32[$50>>2];
 $52 = ((($$0$i) + (($37*68)|0)|0) + 44|0);
 $53 = +HEAPF32[$52>>2];
 $54 = ((($$0$i) + (($37*68)|0)|0) + 52|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = ((($$0$i) + (($37*68)|0)|0) + 56|0);
 $57 = +HEAPF32[$56>>2];
 $58 = ((($$0$i) + (($37*68)|0)|0) + 60|0);
 $59 = +HEAPF32[$58>>2];
 $60 = ((($$0$i) + (($37*68)|0)|0) + 64|0);
 $61 = +HEAPF32[$60>>2];
 $62 = $39 - $12;
 $63 = $2 * $62;
 $64 = $12 + $63;
 $65 = $41 - $14;
 $66 = $2 * $65;
 $67 = $14 + $66;
 $68 = $43 - $16;
 $69 = $2 * $68;
 $70 = $16 + $69;
 $71 = $45 - $18;
 $72 = $2 * $71;
 $73 = $18 + $72;
 $74 = $47 - $20;
 $75 = $2 * $74;
 $76 = $20 + $75;
 $77 = $49 - $22;
 $78 = $2 * $77;
 $79 = $22 + $78;
 $80 = $51 - $24;
 $81 = $2 * $80;
 $82 = $24 + $81;
 $83 = $53 - $26;
 $84 = $2 * $83;
 $85 = $26 + $84;
 $86 = (+($30|0));
 $87 = (($55) - ($30))|0;
 $88 = (+($87|0));
 $89 = $2 * $88;
 $90 = $86 + $89;
 $91 = (~~(($90)));
 $92 = $57 - $32;
 $93 = $2 * $92;
 $94 = $32 + $93;
 $95 = $59 - $34;
 $96 = $2 * $95;
 $97 = $34 + $96;
 $98 = $61 - $36;
 $99 = $2 * $98;
 $100 = $36 + $99;
 (_lame_set_VBR_q($gfp,$4)|0);
 $101 = ($enforce|0)!=(0);
 if ($101) {
  (_lame_set_quant_comp($gfp,$6)|0);
  (_lame_set_quant_comp_short($gfp,$8)|0);
 } else {
  $102 = (_lame_get_quant_comp($gfp)|0);
  $103 = ($102|0)==(-1);
  if ($103) {
   (_lame_set_quant_comp($gfp,$6)|0);
  }
  $104 = (_lame_get_quant_comp_short($gfp)|0);
  $105 = ($104|0)==(-1);
  if ($105) {
   (_lame_set_quant_comp_short($gfp,$8)|0);
  }
 }
 $106 = ($10|0)==(0);
 if (!($106)) {
  (_lame_set_experimentalY($gfp,$10)|0);
 }
 if ($101) {
  (_lame_set_short_threshold_lrm($gfp,$64)|0);
  (_lame_set_short_threshold_s($gfp,$67)|0);
  (_lame_set_maskingadjust($gfp,$70)|0);
  (_lame_set_maskingadjust_short($gfp,$73)|0);
 } else {
  $107 = (+_lame_get_short_threshold_lrm($gfp));
  $108 = $107 + 1.0;
  $109 = ($108 != $108) | (0.0 != 0.0) |($108 == 0.0);
  if ($109) {
   (_lame_set_short_threshold_lrm($gfp,$64)|0);
  }
  $110 = (+_lame_get_short_threshold_s($gfp));
  $111 = $110 + 1.0;
  $112 = ($111 != $111) | (0.0 != 0.0) |($111 == 0.0);
  if ($112) {
   (_lame_set_short_threshold_s($gfp,$67)|0);
  }
  $113 = (+_lame_get_maskingadjust($gfp));
  $114 = ($113 != $113) | (0.0 != 0.0) |($113 == 0.0);
  if ($114) {
   (_lame_set_maskingadjust($gfp,$70)|0);
  }
  $115 = (+_lame_get_maskingadjust_short($gfp));
  $116 = ($115 != $115) | (0.0 != 0.0) |($115 == 0.0);
  if ($116) {
   (_lame_set_maskingadjust_short($gfp,$73)|0);
  }
 }
 $117 = (_lame_get_VBR($gfp)|0);
 $118 = ($117|0)==(1);
 if ($118) {
  label = 23;
 } else {
  $119 = (_lame_get_VBR($gfp)|0);
  $120 = ($119|0)==(4);
  if ($120) {
   label = 23;
  }
 }
 if ((label|0) == 23) {
  (_lame_set_ATHtype($gfp,5)|0);
 }
 if ($101) {
  (_lame_set_ATHlower($gfp,$76)|0);
  (_lame_set_ATHcurve($gfp,$79)|0);
  (_lame_set_athaa_sensitivity($gfp,$82)|0);
 } else {
  $121 = (+_lame_get_ATHlower($gfp));
  $122 = ($121 != $121) | (0.0 != 0.0) |($121 == 0.0);
  if ($122) {
   (_lame_set_ATHlower($gfp,$76)|0);
  }
  $123 = (+_lame_get_ATHcurve($gfp));
  $124 = $123 + 1.0;
  $125 = ($124 != $124) | (0.0 != 0.0) |($124 == 0.0);
  if ($125) {
   (_lame_set_ATHcurve($gfp,$79)|0);
  }
  $126 = (+_lame_get_athaa_sensitivity($gfp));
  $127 = ($126 != $126) | (0.0 != 0.0) |($126 == 0.0);
  if ($127) {
   (_lame_set_athaa_sensitivity($gfp,$82)|0);
  }
 }
 $128 = $85 > 0.0;
 do {
  if ($128) {
   if ($101) {
    (_lame_set_interChRatio($gfp,$85)|0);
    break;
   }
   $129 = (+_lame_get_interChRatio($gfp));
   $130 = $129 + 1.0;
   $131 = ($130 != $130) | (0.0 != 0.0) |($130 == 0.0);
   if ($131) {
    (_lame_set_interChRatio($gfp,$85)|0);
   }
  }
 } while(0);
 $132 = ($28|0)>(0);
 if ($132) {
  $133 = (_lame_get_exp_nspsytune($gfp)|0);
  $134 = $133 | 2;
  (_lame_set_exp_nspsytune($gfp,$134)|0);
 }
 $135 = ($91|0)>(0);
 if ($135) {
  $136 = (_lame_get_exp_nspsytune($gfp)|0);
  $137 = $136 & 66060288;
  $138 = ($137|0)==(0);
  if ($138) {
   $139 = $91 << 20;
   $140 = $136 | $139;
   (_lame_set_exp_nspsytune($gfp,$140)|0);
  }
 }
 if ($101) {
  $145 = $94;
  _lame_set_msfix($gfp,$145);
  $147 = (($gfp) + 288|0);
  $148 = HEAP32[$147>>2]|0;
  $149 = (($148) + 280|0);
  HEAPF32[$149>>2] = $97;
  $150 = (($148) + 224|0);
  HEAPF32[$150>>2] = $100;
  STACKTOP = sp;return;
 }
 $141 = (+_lame_get_msfix($gfp));
 $142 = $141 + 1.0;
 $143 = ($142 != $142) | (0.0 != 0.0) |($142 == 0.0);
 if ($143) {
  $144 = $94;
  _lame_set_msfix($gfp,$144);
 }
 $146 = (($gfp) + 164|0);
 HEAP32[$146>>2] = $a;
 HEAPF32[$1>>2] = $2;
 $147 = (($gfp) + 288|0);
 $148 = HEAP32[$147>>2]|0;
 $149 = (($148) + 280|0);
 HEAPF32[$149>>2] = $97;
 $150 = (($148) + 224|0);
 HEAPF32[$150>>2] = $100;
 STACKTOP = sp;return;
}
function _L3psycho_anal_vbr($gfc,$buffer,$gr_out,$masking_ratio,$masking_MS_ratio,$percep_entropy,$percep_MS_entropy,$energy,$blocktype_d) {
 $gfc = $gfc|0;
 $buffer = $buffer|0;
 $gr_out = $gr_out|0;
 $masking_ratio = $masking_ratio|0;
 $masking_MS_ratio = $masking_MS_ratio|0;
 $percep_entropy = $percep_entropy|0;
 $percep_MS_entropy = $percep_MS_entropy|0;
 $energy = $energy|0;
 $blocktype_d = $blocktype_d|0;
 var $$$i = 0.0, $$$i64 = 0, $$01$i$i = 0.0, $$01$i$i41 = 0.0, $$02$i$i = 0.0, $$02$i$i42 = 0.0, $$1$i$i = 0.0, $$1$i$i49 = 0.0, $$lcssa$i$i = 0, $$lcssa$i$i36 = 0, $$lcssa1$i$i = 0.0, $$lcssa1$i$i35 = 0.0, $$not = 0, $$not177 = 0, $$phi$trans$insert = 0, $$phi$trans$insert$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i11 = 0.0, $$pre$i25 = 0.0;
 var $$pre34$i = 0.0, $$pre35$i = 0, $$pre36$i = 0, $$pre48$i = 0.0, $$pre51$i = 0, $$pre54$i = 0, $$pre6$i = 0, $$pre64$i = 0, $$pre66$i = 0, $$sum = 0, $$sum$i = 0, $$sum$us$i = 0, $$sum1$1$i = 0, $$sum1$2$i = 0, $$sum1$3$i = 0, $$sum1$4$i = 0, $$sum1$i = 0, $$sum1$us$1$i = 0, $$sum1$us$2$i = 0, $$sum1$us$3$i = 0;
 var $$sum1$us$4$i = 0, $$sum1$us$i = 0, $$sum2$1$i = 0, $$sum2$2$i = 0, $$sum2$3$i = 0, $$sum2$4$i = 0, $$sum2$i = 0, $$sum2$us$1$i = 0, $$sum2$us$2$i = 0, $$sum2$us$3$i = 0, $$sum2$us$4$i = 0, $$sum2$us$i = 0, $$sum3$1$i = 0, $$sum3$2$i = 0, $$sum3$3$i = 0, $$sum3$4$i = 0, $$sum3$i = 0, $$sum3$us$1$i = 0, $$sum3$us$2$i = 0, $$sum3$us$3$i = 0;
 var $$sum3$us$4$i = 0, $$sum3$us$i = 0, $$sum4$1$i = 0, $$sum4$2$i = 0, $$sum4$3$i = 0, $$sum4$4$i = 0, $$sum4$i = 0, $$sum4$us$1$i = 0, $$sum4$us$2$i = 0, $$sum4$us$3$i = 0, $$sum4$us$4$i = 0, $$sum4$us$i = 0, $$sum70 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $1000 = 0.0, $1001 = 0, $1002 = 0.0;
 var $1003 = 0.0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0.0, $1011 = 0.0, $1012 = 0, $1013 = 0, $1014 = 0.0, $1015 = 0, $1016 = 0.0, $1017 = 0.0, $1018 = 0.0, $1019 = 0.0, $102 = 0.0, $1020 = 0;
 var $1021 = 0.0, $1022 = 0, $1023 = 0.0, $1024 = 0.0, $1025 = 0.0, $1026 = 0, $1027 = 0.0, $1028 = 0, $1029 = 0, $103 = 0.0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0.0, $1037 = 0.0, $1038 = 0.0, $1039 = 0;
 var $104 = 0.0, $1040 = 0, $1041 = 0.0, $1042 = 0, $1043 = 0, $1044 = 0.0, $1045 = 0, $1046 = 0.0, $1047 = 0.0, $1048 = 0.0, $1049 = 0, $105 = 0.0, $1050 = 0, $1051 = 0.0, $1052 = 0.0, $1053 = 0, $1054 = 0.0, $1055 = 0, $1056 = 0.0, $1057 = 0;
 var $1058 = 0.0, $1059 = 0.0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0.0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0.0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0;
 var $1076 = 0.0, $1077 = 0, $1078 = 0.0, $1079 = 0, $108 = 0, $1080 = 0.0, $1081 = 0, $1082 = 0.0, $1083 = 0, $1084 = 0.0, $1085 = 0, $1086 = 0.0, $1087 = 0, $1088 = 0.0, $1089 = 0, $109 = 0.0, $1090 = 0.0, $1091 = 0, $1092 = 0.0, $1093 = 0;
 var $1094 = 0.0, $1095 = 0, $1096 = 0.0, $1097 = 0, $1098 = 0.0, $1099 = 0, $11 = 0.0, $110 = 0.0, $1100 = 0.0, $1101 = 0, $1102 = 0.0, $1103 = 0, $1104 = 0.0, $1105 = 0, $1106 = 0.0, $1107 = 0, $1108 = 0.0, $1109 = 0, $111 = 0.0, $1110 = 0.0;
 var $1111 = 0, $1112 = 0.0, $1113 = 0, $1114 = 0.0, $1115 = 0, $1116 = 0.0, $1117 = 0, $1118 = 0.0, $1119 = 0, $112 = 0.0, $1120 = 0.0, $1121 = 0, $1122 = 0.0, $1123 = 0, $1124 = 0.0, $1125 = 0, $1126 = 0.0, $1127 = 0, $1128 = 0, $1129 = 0;
 var $113 = 0.0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0.0, $1135 = 0.0, $1136 = 0.0, $1137 = 0.0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0;
 var $1148 = 0, $1149 = 0.0, $115 = 0, $1150 = 0.0, $1151 = 0.0, $1152 = 0, $1153 = 0.0, $1154 = 0, $1155 = 0, $1156 = 0.0, $1157 = 0.0, $1158 = 0.0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0;
 var $1166 = 0.0, $1167 = 0.0, $1168 = 0.0, $1169 = 0, $117 = 0, $1170 = 0.0, $1171 = 0.0, $1172 = 0.0, $1173 = 0, $1174 = 0.0, $1175 = 0, $1176 = 0.0, $1177 = 0.0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0;
 var $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0;
 var $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0.0, $1212 = 0, $1213 = 0, $1214 = 0.0, $1215 = 0, $1216 = 0.0, $1217 = 0, $1218 = 0.0, $1219 = 0;
 var $122 = 0, $1220 = 0.0, $1221 = 0, $1222 = 0.0, $1223 = 0.0, $1224 = 0.0, $1225 = 0.0, $1226 = 0.0, $1227 = 0.0, $1228 = 0.0, $1229 = 0.0, $123 = 0, $1230 = 0.0, $1231 = 0.0, $1232 = 0.0, $1233 = 0.0, $1234 = 0.0, $1235 = 0.0, $1236 = 0, $1237 = 0.0;
 var $1238 = 0, $1239 = 0.0, $124 = 0, $1240 = 0, $1241 = 0.0, $1242 = 0, $1243 = 0.0, $1244 = 0, $1245 = 0.0, $1246 = 0.0, $1247 = 0.0, $1248 = 0.0, $1249 = 0.0, $125 = 0, $1250 = 0.0, $1251 = 0.0, $1252 = 0.0, $1253 = 0.0, $1254 = 0.0, $1255 = 0.0;
 var $1256 = 0.0, $1257 = 0.0, $1258 = 0.0, $1259 = 0, $126 = 0, $1260 = 0.0, $1261 = 0, $1262 = 0.0, $1263 = 0, $1264 = 0.0, $1265 = 0, $1266 = 0.0, $1267 = 0, $1268 = 0.0, $1269 = 0.0, $127 = 0, $1270 = 0.0, $1271 = 0.0, $1272 = 0.0, $1273 = 0.0;
 var $1274 = 0.0, $1275 = 0.0, $1276 = 0.0, $1277 = 0.0, $1278 = 0.0, $1279 = 0.0, $128 = 0, $1280 = 0.0, $1281 = 0.0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0.0, $1286 = 0, $1287 = 0.0, $1288 = 0, $1289 = 0.0, $129 = 0, $1290 = 0, $1291 = 0.0;
 var $1292 = 0, $1293 = 0, $1294 = 0.0, $1295 = 0.0, $1296 = 0.0, $1297 = 0.0, $1298 = 0.0, $1299 = 0.0, $13 = 0, $130 = 0, $1300 = 0.0, $1301 = 0.0, $1302 = 0.0, $1303 = 0.0, $1304 = 0.0, $1305 = 0.0, $1306 = 0.0, $1307 = 0.0, $1308 = 0, $1309 = 0;
 var $131 = 0, $1310 = 0.0, $1311 = 0.0, $1312 = 0, $1313 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0.0, $149 = 0, $15 = 0.0, $150 = 0.0, $151 = 0, $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0, $157 = 0.0, $158 = 0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0, $163 = 0.0;
 var $164 = 0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0, $17 = 0, $170 = 0.0, $171 = 0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0, $177 = 0.0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0.0;
 var $182 = 0.0, $183 = 0, $184 = 0.0, $185 = 0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0, $191 = 0.0, $192 = 0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0, $198 = 0.0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0, $205 = 0.0, $206 = 0, $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0.0, $213 = 0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0.0;
 var $218 = 0.0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0.0, $231 = 0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0;
 var $236 = 0, $237 = 0.0, $238 = 0, $239 = 0.0, $24 = 0, $240 = 0.0, $241 = 0, $242 = 0.0, $243 = 0, $244 = 0.0, $245 = 0.0, $246 = 0.0, $247 = 0, $248 = 0.0, $249 = 0.0, $25 = 0, $250 = 0.0, $251 = 0, $252 = 0.0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0.0, $263 = 0.0, $264 = 0, $265 = 0, $266 = 0.0, $267 = 0, $268 = 0.0, $269 = 0.0, $27 = 0, $270 = 0, $271 = 0.0;
 var $272 = 0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0.0, $277 = 0.0, $278 = 0.0, $279 = 0, $28 = 0, $280 = 0.0, $281 = 0, $282 = 0, $283 = 0.0, $284 = 0.0, $285 = 0.0, $286 = 0.0, $287 = 0.0, $288 = 0.0, $289 = 0, $29 = 0;
 var $290 = 0.0, $291 = 0.0, $292 = 0, $293 = 0.0, $294 = 0, $295 = 0.0, $296 = 0, $297 = 0.0, $298 = 0, $299 = 0.0, $3 = 0, $30 = 0, $300 = 0, $301 = 0.0, $302 = 0, $303 = 0.0, $304 = 0, $305 = 0.0, $306 = 0, $307 = 0.0;
 var $308 = 0, $309 = 0.0, $31 = 0, $310 = 0, $311 = 0.0, $312 = 0, $313 = 0, $314 = 0.0, $315 = 0, $316 = 0.0, $317 = 0, $318 = 0, $319 = 0.0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0.0;
 var $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0.0, $332 = 0.0, $333 = 0, $334 = 0.0, $335 = 0, $336 = 0.0, $337 = 0, $338 = 0.0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0;
 var $344 = 0.0, $345 = 0, $346 = 0.0, $347 = 0, $348 = 0.0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0;
 var $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0.0, $377 = 0, $378 = 0, $379 = 0.0, $38 = 0;
 var $380 = 0, $381 = 0, $382 = 0.0, $383 = 0.0, $384 = 0.0, $385 = 0.0, $386 = 0.0, $387 = 0.0, $388 = 0, $389 = 0.0, $39 = 0, $390 = 0, $391 = 0, $392 = 0.0, $393 = 0, $394 = 0.0, $395 = 0, $396 = 0.0, $397 = 0, $398 = 0;
 var $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0;
 var $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0.0, $430 = 0, $431 = 0, $432 = 0, $433 = 0.0;
 var $434 = 0, $435 = 0.0, $436 = 0.0, $437 = 0.0, $438 = 0.0, $439 = 0.0, $44 = 0, $440 = 0, $441 = 0, $442 = 0.0, $443 = 0.0, $444 = 0, $445 = 0, $446 = 0.0, $447 = 0, $448 = 0, $449 = 0.0, $45 = 0.0, $450 = 0.0, $451 = 0.0;
 var $452 = 0.0, $453 = 0.0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0.0, $459 = 0.0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0.0, $466 = 0, $467 = 0, $468 = 0.0, $469 = 0.0, $47 = 0.0;
 var $470 = 0, $471 = 0, $472 = 0.0, $473 = 0, $474 = 0, $475 = 0, $476 = 0.0, $477 = 0, $478 = 0.0, $479 = 0.0, $48 = 0.0, $480 = 0.0, $481 = 0, $482 = 0.0, $483 = 0.0, $484 = 0.0, $485 = 0, $486 = 0, $487 = 0, $488 = 0;
 var $489 = 0, $49 = 0.0, $490 = 0, $491 = 0, $492 = 0, $493 = 0.0, $494 = 0.0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0.0, $500 = 0, $501 = 0, $502 = 0, $503 = 0.0, $504 = 0.0, $505 = 0;
 var $506 = 0, $507 = 0.0, $508 = 0.0, $509 = 0.0, $51 = 0, $510 = 0, $511 = 0.0, $512 = 0.0, $513 = 0, $514 = 0.0, $515 = 0.0, $516 = 0.0, $517 = 0, $518 = 0, $519 = 0, $52 = 0.0, $520 = 0, $521 = 0, $522 = 0, $523 = 0.0;
 var $524 = 0.0, $525 = 0.0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0.0, $533 = 0.0, $534 = 0, $535 = 0, $536 = 0, $537 = 0.0, $538 = 0.0, $539 = 0.0, $54 = 0.0, $540 = 0, $541 = 0;
 var $542 = 0, $542$phi = 0, $543 = 0.0, $544 = 0, $545 = 0.0, $546 = 0, $547 = 0, $548 = 0.0, $549 = 0, $55 = 0.0, $550 = 0.0, $551 = 0.0, $552 = 0.0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0;
 var $56 = 0.0, $560 = 0, $561 = 0, $562 = 0.0, $563 = 0.0, $564 = 0.0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0.0, $571 = 0.0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0.0, $577 = 0;
 var $578 = 0.0, $579 = 0, $58 = 0.0, $580 = 0.0, $581 = 0.0, $582 = 0.0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0.0, $59 = 0, $590 = 0.0, $591 = 0.0, $592 = 0, $593 = 0, $594 = 0, $595 = 0;
 var $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0.0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0.0, $606 = 0.0, $607 = 0.0, $608 = 0, $609 = 0, $61 = 0.0, $610 = 0, $611 = 0, $612 = 0;
 var $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0.0, $620 = 0, $621 = 0, $622 = 0.0, $623 = 0, $624 = 0.0, $625 = 0.0, $626 = 0, $627 = 0.0, $628 = 0.0, $629 = 0, $63 = 0.0, $630 = 0;
 var $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0.0, $637 = 0, $638 = 0.0, $639 = 0.0, $64 = 0, $640 = 0, $641 = 0.0, $642 = 0.0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0.0;
 var $65 = 0.0, $650 = 0.0, $651 = 0, $652 = 0, $653 = 0.0, $654 = 0, $655 = 0.0, $656 = 0.0, $657 = 0.0, $658 = 0.0, $659 = 0, $66 = 0, $660 = 0.0, $661 = 0, $662 = 0.0, $663 = 0.0, $664 = 0.0, $665 = 0, $666 = 0.0, $667 = 0;
 var $668 = 0, $669 = 0, $67 = 0.0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0.0, $676 = 0.0, $677 = 0.0, $678 = 0, $679 = 0, $68 = 0.0, $680 = 0, $681 = 0.0, $682 = 0.0, $683 = 0, $684 = 0, $685 = 0.0;
 var $686 = 0, $687 = 0.0, $688 = 0, $689 = 0.0, $69 = 0.0, $690 = 0.0, $691 = 0.0, $692 = 0, $693 = 0.0, $694 = 0, $695 = 0, $696 = 0.0, $697 = 0.0, $698 = 0, $699 = 0.0, $7 = 0, $70 = 0.0, $700 = 0.0, $701 = 0, $702 = 0;
 var $703 = 0, $704 = 0, $705 = 0.0, $706 = 0, $707 = 0.0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0.0, $712 = 0, $713 = 0.0, $714 = 0, $715 = 0.0, $716 = 0.0, $717 = 0.0, $718 = 0, $719 = 0, $72 = 0.0, $720 = 0.0;
 var $721 = 0, $722 = 0.0, $723 = 0.0, $724 = 0, $725 = 0.0, $726 = 0, $727 = 0.0, $728 = 0, $729 = 0.0, $73 = 0, $730 = 0.0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0;
 var $74 = 0.0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0.0, $746 = 0, $747 = 0, $748 = 0.0, $749 = 0, $75 = 0.0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0.0;
 var $758 = 0, $759 = 0.0, $76 = 0.0, $760 = 0.0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0.0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0;
 var $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0.0, $790 = 0, $791 = 0, $792 = 0, $793 = 0;
 var $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0.0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0.0, $810 = 0;
 var $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0.0, $818 = 0, $819 = 0, $82 = 0.0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0.0, $825 = 0, $826 = 0.0, $827 = 0.0, $828 = 0.0, $829 = 0.0;
 var $83 = 0.0, $830 = 0.0, $831 = 0, $832 = 0, $833 = 0, $834 = 0.0, $835 = 0.0, $836 = 0, $837 = 0, $838 = 0.0, $839 = 0, $84 = 0.0, $840 = 0, $841 = 0.0, $842 = 0.0, $843 = 0.0, $844 = 0.0, $845 = 0.0, $846 = 0, $847 = 0;
 var $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0.0, $858 = 0.0, $859 = 0, $86 = 0.0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0;
 var $866 = 0.0, $867 = 0.0, $868 = 0, $869 = 0, $87 = 0, $870 = 0.0, $871 = 0.0, $872 = 0.0, $873 = 0, $874 = 0.0, $875 = 0.0, $876 = 0, $877 = 0.0, $878 = 0.0, $879 = 0.0, $88 = 0.0, $880 = 0, $881 = 0, $882 = 0, $883 = 0;
 var $884 = 0, $885 = 0, $886 = 0.0, $887 = 0.0, $888 = 0.0, $889 = 0, $89 = 0.0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0.0, $896 = 0, $897 = 0, $898 = 0, $899 = 0.0, $9 = 0, $90 = 0.0, $900 = 0.0;
 var $901 = 0.0, $902 = 0, $903 = 0, $904 = 0, $904$phi = 0, $905 = 0.0, $906 = 0, $907 = 0.0, $908 = 0, $909 = 0, $91 = 0.0, $910 = 0.0, $911 = 0, $912 = 0.0, $913 = 0.0, $914 = 0.0, $915 = 0, $916 = 0, $917 = 0, $918 = 0;
 var $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0.0, $925 = 0.0, $926 = 0.0, $927 = 0, $928 = 0, $929 = 0, $93 = 0.0, $930 = 0, $931 = 0, $932 = 0.0, $933 = 0.0, $934 = 0, $935 = 0, $936 = 0;
 var $937 = 0, $938 = 0.0, $939 = 0, $94 = 0, $940 = 0.0, $941 = 0, $942 = 0.0, $943 = 0.0, $944 = 0.0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0.0, $950 = 0, $951 = 0.0, $952 = 0.0, $953 = 0.0, $954 = 0;
 var $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0.0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0.0, $970 = 0, $971 = 0, $972 = 0;
 var $973 = 0, $974 = 0, $975 = 0.0, $976 = 0.0, $977 = 0.0, $978 = 0, $979 = 0, $98 = 0.0, $980 = 0, $981 = 0, $982 = 0, $983 = 0.0, $984 = 0, $985 = 0.0, $986 = 0.0, $987 = 0, $988 = 0.0, $989 = 0.0, $99 = 0, $990 = 0;
 var $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0.0, $998 = 0, $999 = 0.0, $avg$i = 0, $b$0$lcssa$i$i = 0, $b$0$lcssa$i$i37 = 0, $b$01$i = 0, $b$017$i = 0, $b$02$i$i = 0, $b$02$i$i30 = 0, $b$030$i = 0, $b$08$i$i = 0, $b$114$i = 0, $b$14$i$ph = 0;
 var $b$21$i$ph = 0, $blocktype$0$i = 0, $brmerge = 0, $chn$01$i = 0, $chn$01$i$us = 0, $chn$01$i62 = 0, $chn$01$us$i = 0, $chn$0115 = 0, $chn$034$i = 0, $chn$034$us$i = 0, $chn$1106 = 0, $chn$126$i = 0, $chn$292 = 0, $chn$399 = 0, $chn$486 = 0, $chn$575 = 0, $chn$672 = 0, $dd$0$lcssa$i = 0, $dd$0$lcssa$i54 = 0, $dd$04$i = 0;
 var $dd$08$i = 0, $dd_n$0$lcssa$i = 0, $dd_n$0$lcssa$i53 = 0, $eb = 0, $ebb$0$lcssa$i = 0.0, $ebb$0$lcssa$i$i = 0.0, $ebb$02$i$i = 0.0, $ebb$020$i = 0.0, $ecb$0$be$i = 0.0, $ecb$0$be$i43 = 0.0, $ecb$0$lcssa$i = 0.0, $ecb$0$lcssa$i52 = 0.0, $ecb$06$i = 0.0, $ecb$07$i = 0.0, $ecb_limit1$0$i = 0.0, $ecb_limit_1$0$i = 0.0, $ecb_limit_2$0$i = 0.0, $enn$i = 0, $exitcond = 0, $exitcond$i = 0;
 var $exitcond$i$i = 0, $exitcond$i10 = 0, $exitcond$i17 = 0, $exitcond$i18 = 0, $exitcond$i6 = 0, $exitcond$i65 = 0, $exitcond$i7 = 0, $exitcond125 = 0, $exitcond126 = 0, $exitcond130 = 0, $exitcond131 = 0, $exitcond132 = 0, $exitcond134 = 0, $exitcond145 = 0, $exitcond146 = 0, $exitcond147 = 0, $exitcond148 = 0, $exitcond155 = 0, $exitcond164 = 0, $exitcond27$i = 0;
 var $exitcond32$i = 0, $exitcond33$i = 0, $exitcond38$i = 0, $exitcond40$i = 0, $exitcond41$i = 0, $exitcond43$i = 0, $exitcond46$i = 0, $exitcond47$i = 0, $exitcond48$i = 0, $exitcond51$i = 0, $exitcond52$i = 0, $exitcond9$i = 0, $fabsf$i = 0.0, $factor$0$1$i = 0.0, $factor$0$2$i = 0.0, $factor$0$i = 0.0, $fftenergy = 0, $fftenergy_s = 0, $i$01$i$i = 0, $i$022$i = 0;
 var $i$033$i = 0, $i$033$us$i = 0, $i$04$i$i = 0, $i$19$i = 0, $i$318$i = 0, $i$623$i = 0, $ispos$i$i = 0, $ispos$i$i47 = 0, $j$02$i = 0, $j$031$i = 0, $j$07$i$i = 0, $j$08$i = 0, $j$1$lcssa$i = 0, $j$1$lcssa$i$i = 0, $j$11$i = 0, $j$11$i$i = 0, $j$121$i = 0, $j$15$i = 0, $j$215$i = 0, $j$23$i = 0;
 var $j$3$i = 0, $j$3$lcssa$i = 0, $j$31$i = 0, $j$32$i = 0, $j$37$i = 0, $k$018$i = 0, $k$1$i = 0, $k$1$lcssa$i = 0, $k$110$i = 0, $k$15$i = 0, $kk$011$i = 0, $kk$011$in$i = 0, $kk$08$i = 0, $kk$08$in$i = 0, $last_thm = 0, $loudness_power$02$i$i = 0.0, $m$0$i$i = 0.0, $m$0$i$i27 = 0.0, $m$0$lcssa$i = 0.0, $m$0$lcssa$i$i = 0.0;
 var $m$019$i = 0.0, $m$03$i$i = 0.0, $m$1$i = 0.0, $m$1$i$i = 0.0, $m$1$i$i32 = 0.0, $m$1$i2$i = 0.0, $m$2$i$i = 0.0, $m$2$i$i33 = 0.0, $m$3$i$i = 0.0, $m$3$i$i39 = 0.0, $mask_idx_s$i = 0, $max$i = 0, $mr$0 = 0, $neg$i$i = 0, $neg$i$i48 = 0, $new_thmm = 0, $ns_attacks = 0, $ns_uselongblock$0$i = 0, $or$cond = 0, $or$cond$1$i = 0;
 var $or$cond$2$i = 0, $or$cond$i = 0, $or$cond$i20 = 0, $or$cond1 = 0, $or$cond7$1$i = 0, $or$cond7$2$i = 0, $or$cond7$i = 0, $p$014$i = 0.0, $p$1$i = 0.0, $p$2$i = 0.0, $pe_l$02$i = 0.0, $pe_l$1$i = 0.0, $pe_s$04$i = 0.0, $pe_s$2$1$i = 0.0, $pe_s$2$2$i = 0.0, $pe_s$2$i = 0.0, $pf$017$i = 0, $pf$113$i = 0, $phitmp$i = 0, $phitmp$i50 = 0;
 var $ppe$0 = 0, $prev_thm$0 = 0.0, $prev_thm$0$in = 0, $prev_thm$1 = 0.0, $ratio$0$i$i = 0.0, $ratio$0$i$i46 = 0.0, $sb$01$i = 0, $sb$02$i = 0, $sb$03$i = 0, $sb$084 = 0, $sblock$0102 = 0, $sblock$178 = 0, $scevgep = 0, $scevgep138 = 0, $scevgep141 = 0, $scevgep159 = 0, $scevgep162 = 0, $smax$i = 0, $smax$i$i = 0, $smax$i29 = 0;
 var $storemerge$i$i = 0, $storemerge$i$i28 = 0, $sub_short_factor = 0, $t1$0 = 0.0, $t2$0 = 0.0, $thm$i = 0, $thr = 0, $totalenergy$04$i = 0.0, $type$0 = 0, $type$1 = 0, $uselongblock = 0, $wsamp_L = 0, $wsamp_S = 0, $x$1$1$i = 0.0, $x$1$10$i = 0.0, $x$1$2$i = 0.0, $x$1$3$i = 0.0, $x$1$4$i = 0.0, $x$1$5$i = 0.0, $x$1$6$i = 0.0;
 var $x$1$7$i = 0.0, $x$1$8$i = 0.0, $x$1$9$i = 0.0, $x$1$i = 0.0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 26320|0;
 $mask_idx_s$i = sp + 21712|0;
 $enn$i = sp + 21660|0;
 $thm$i = sp + 21608|0;
 $max$i = sp + 21352|0;
 $avg$i = sp + 21096|0;
 $last_thm = sp + 20120|0;
 $fftenergy = sp + 18068|0;
 $fftenergy_s = sp + 16520|0;
 $wsamp_L = sp + 8328|0;
 $wsamp_S = sp + 2184|0;
 $eb = sp + 1160|0;
 $thr = sp + 136|0;
 $sub_short_factor = sp + 88|0;
 $ns_attacks = sp + 24|0;
 $uselongblock = sp + 16|0;
 $new_thmm = sp;
 $0 = (($gfc) + 85800|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($gfc) + 140|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $1199 = 0;
 } else {
  $5 = (($gfc) + 85804|0);
  $6 = HEAP32[$5>>2]|0;
  $1199 = $6;
 }
 $7 = (($gfc) + 192|0);
 $8 = +HEAPF32[$7>>2];
 $9 = $8 > 0.0;
 if ($9) {
  $10 = (($gfc) + 200|0);
  $11 = +HEAPF32[$10>>2];
  $12 = (($gfc) + 85796|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + 8|0);
  $15 = +HEAPF32[$14>>2];
  $16 = $11 * $15;
  $748 = $16;
 } else {
  $748 = 1.0;
 }
 dest=$ns_attacks+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $17 = (($gfc) + 180|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(1);
 if ($19) {
  $420 = 4;
 } else {
  $20 = (($gfc) + 72|0);
  $21 = HEAP32[$20>>2]|0;
  $420 = $21;
 }
 $22 = (($gfc) + 25660|0);
 _memcpy(($last_thm|0),($22|0),976)|0;
 if ($4) {
  $118 = 0;
 } else {
  $23 = (($gfc) + 85804|0);
  $24 = HEAP32[$23>>2]|0;
  $118 = $24;
 }
 $25 = (($gfc) + 72|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $19 ? 4 : $26;
 _memset(($mask_idx_s$i|0),0,4608)|0;
 $28 = ($26|0)>(0);
 if ($28) {
  $29 = ($27|0)>(2);
  if ($29) {
   $chn$034$us$i = 0;
   while(1) {
    $30 = (($buffer) + ($chn$034$us$i<<2)|0);
    $31 = HEAP32[$30>>2]|0;
    $i$033$us$i = 0;
    while(1) {
     $$sum$us$i = (($i$033$us$i) + 407)|0;
     $42 = (($31) + ($$sum$us$i<<2)|0);
     $43 = +HEAPF32[$42>>2];
     $$sum1$us$i = (($i$033$us$i) + 397)|0;
     $44 = (($31) + ($$sum1$us$i<<2)|0);
     $45 = +HEAPF32[$44>>2];
     $$sum2$us$i = (($i$033$us$i) + 418)|0;
     $46 = (($31) + ($$sum2$us$i<<2)|0);
     $47 = +HEAPF32[$46>>2];
     $48 = $45 + $47;
     $49 = $48 * -1.73032601840435268869E-17;
     $50 = $43 + $49;
     $$sum3$us$i = (($i$033$us$i) + 398)|0;
     $51 = (($31) + ($$sum3$us$i<<2)|0);
     $52 = +HEAPF32[$51>>2];
     $$sum4$us$i = (($i$033$us$i) + 417)|0;
     $53 = (($31) + ($$sum4$us$i<<2)|0);
     $54 = +HEAPF32[$53>>2];
     $55 = $52 + $54;
     $56 = $55 * -0.0170317199081182479858;
     $$sum1$us$1$i = (($i$033$us$i) + 399)|0;
     $57 = (($31) + ($$sum1$us$1$i<<2)|0);
     $58 = +HEAPF32[$57>>2];
     $$sum2$us$1$i = (($i$033$us$i) + 416)|0;
     $59 = (($31) + ($$sum2$us$1$i<<2)|0);
     $60 = +HEAPF32[$59>>2];
     $61 = $58 + $60;
     $62 = $61 * -1.34952796402352354858E-17;
     $63 = $50 + $62;
     $$sum3$us$1$i = (($i$033$us$i) + 400)|0;
     $64 = (($31) + ($$sum3$us$1$i<<2)|0);
     $65 = +HEAPF32[$64>>2];
     $$sum4$us$1$i = (($i$033$us$i) + 415)|0;
     $66 = (($31) + ($$sum4$us$1$i<<2)|0);
     $67 = +HEAPF32[$66>>2];
     $68 = $65 + $67;
     $69 = $68 * 0.0418072007596492767334;
     $70 = $56 + $69;
     $$sum1$us$2$i = (($i$033$us$i) + 401)|0;
     $71 = (($31) + ($$sum1$us$2$i<<2)|0);
     $72 = +HEAPF32[$71>>2];
     $$sum2$us$2$i = (($i$033$us$i) + 414)|0;
     $73 = (($31) + ($$sum2$us$2$i<<2)|0);
     $74 = +HEAPF32[$73>>2];
     $75 = $72 + $74;
     $76 = $75 * -6.73277968584922511131E-17;
     $77 = $63 + $76;
     $$sum3$us$2$i = (($i$033$us$i) + 402)|0;
     $78 = (($31) + ($$sum3$us$2$i<<2)|0);
     $79 = +HEAPF32[$78>>2];
     $$sum4$us$2$i = (($i$033$us$i) + 413)|0;
     $80 = (($31) + ($$sum4$us$2$i<<2)|0);
     $81 = +HEAPF32[$80>>2];
     $82 = $79 + $81;
     $83 = $82 * -0.0876324027776718139648;
     $84 = $70 + $83;
     $$sum1$us$3$i = (($i$033$us$i) + 403)|0;
     $85 = (($31) + ($$sum1$us$3$i<<2)|0);
     $86 = +HEAPF32[$85>>2];
     $$sum2$us$3$i = (($i$033$us$i) + 412)|0;
     $87 = (($31) + ($$sum2$us$3$i<<2)|0);
     $88 = +HEAPF32[$87>>2];
     $89 = $86 + $88;
     $90 = $89 * -3.08350002913188747265E-17;
     $91 = $77 + $90;
     $$sum3$us$3$i = (($i$033$us$i) + 404)|0;
     $92 = (($31) + ($$sum3$us$3$i<<2)|0);
     $93 = +HEAPF32[$92>>2];
     $$sum4$us$3$i = (($i$033$us$i) + 411)|0;
     $94 = (($31) + ($$sum4$us$3$i<<2)|0);
     $95 = +HEAPF32[$94>>2];
     $96 = $93 + $95;
     $97 = $96 * 0.186347603797912597656;
     $98 = $84 + $97;
     $$sum1$us$4$i = (($i$033$us$i) + 405)|0;
     $99 = (($31) + ($$sum1$us$4$i<<2)|0);
     $100 = +HEAPF32[$99>>2];
     $$sum2$us$4$i = (($i$033$us$i) + 410)|0;
     $101 = (($31) + ($$sum2$us$4$i<<2)|0);
     $102 = +HEAPF32[$101>>2];
     $103 = $100 + $102;
     $104 = $103 * -1.10442402531001678673E-16;
     $105 = $91 + $104;
     $$sum3$us$4$i = (($i$033$us$i) + 406)|0;
     $106 = (($31) + ($$sum3$us$4$i<<2)|0);
     $107 = +HEAPF32[$106>>2];
     $$sum4$us$4$i = (($i$033$us$i) + 409)|0;
     $108 = (($31) + ($$sum4$us$4$i<<2)|0);
     $109 = +HEAPF32[$108>>2];
     $110 = $107 + $109;
     $111 = $110 * -0.627637982368469238281;
     $112 = $98 + $111;
     $113 = $105 + $112;
     $114 = ((($mask_idx_s$i) + (($chn$034$us$i*2304)|0)|0) + ($i$033$us$i<<2)|0);
     HEAPF32[$114>>2] = $113;
     $115 = (($i$033$us$i) + 1)|0;
     $exitcond51$i = ($115|0)==(576);
     if ($exitcond51$i) {
      break;
     } else {
      $i$033$us$i = $115;
     }
    }
    $32 = (((($masking_ratio) + (($gr_out*976)|0)|0) + (($chn$034$us$i*488)|0)|0) + 244|0);
    $33 = ((($gfc) + (($chn$034$us$i*244)|0)|0) + 26636|0);
    _memcpy(($32|0),($33|0),244)|0;
    $34 = ((($masking_ratio) + (($gr_out*976)|0)|0) + (($chn$034$us$i*488)|0)|0);
    $35 = ((($gfc) + (($chn$034$us$i*244)|0)|0) + 25660|0);
    _memcpy(($34|0),($35|0),244)|0;
    $36 = (((($masking_MS_ratio) + (($gr_out*976)|0)|0) + (($chn$034$us$i*488)|0)|0) + 244|0);
    $37 = (($chn$034$us$i) + 2)|0;
    $38 = ((($gfc) + (($37*244)|0)|0) + 26636|0);
    _memcpy(($36|0),($38|0),244)|0;
    $39 = ((($masking_MS_ratio) + (($gr_out*976)|0)|0) + (($chn$034$us$i*488)|0)|0);
    $40 = ((($gfc) + (($37*244)|0)|0) + 25660|0);
    _memcpy(($39|0),($40|0),244)|0;
    $41 = (($chn$034$us$i) + 1)|0;
    $exitcond52$i = ($41|0)==($26|0);
    if ($exitcond52$i) {
     break;
    } else {
     $chn$034$us$i = $41;
    }
   }
  } else {
   $chn$034$i = 0;
   while(1) {
    $145 = (($buffer) + ($chn$034$i<<2)|0);
    $146 = HEAP32[$145>>2]|0;
    $i$033$i = 0;
    while(1) {
     $$sum$i = (($i$033$i) + 407)|0;
     $147 = (($146) + ($$sum$i<<2)|0);
     $148 = +HEAPF32[$147>>2];
     $$sum1$i = (($i$033$i) + 397)|0;
     $149 = (($146) + ($$sum1$i<<2)|0);
     $150 = +HEAPF32[$149>>2];
     $$sum2$i = (($i$033$i) + 418)|0;
     $151 = (($146) + ($$sum2$i<<2)|0);
     $152 = +HEAPF32[$151>>2];
     $153 = $150 + $152;
     $154 = $153 * -1.73032601840435268869E-17;
     $155 = $148 + $154;
     $$sum3$i = (($i$033$i) + 398)|0;
     $156 = (($146) + ($$sum3$i<<2)|0);
     $157 = +HEAPF32[$156>>2];
     $$sum4$i = (($i$033$i) + 417)|0;
     $158 = (($146) + ($$sum4$i<<2)|0);
     $159 = +HEAPF32[$158>>2];
     $160 = $157 + $159;
     $161 = $160 * -0.0170317199081182479858;
     $$sum1$1$i = (($i$033$i) + 399)|0;
     $162 = (($146) + ($$sum1$1$i<<2)|0);
     $163 = +HEAPF32[$162>>2];
     $$sum2$1$i = (($i$033$i) + 416)|0;
     $164 = (($146) + ($$sum2$1$i<<2)|0);
     $165 = +HEAPF32[$164>>2];
     $166 = $163 + $165;
     $167 = $166 * -1.34952796402352354858E-17;
     $168 = $155 + $167;
     $$sum3$1$i = (($i$033$i) + 400)|0;
     $169 = (($146) + ($$sum3$1$i<<2)|0);
     $170 = +HEAPF32[$169>>2];
     $$sum4$1$i = (($i$033$i) + 415)|0;
     $171 = (($146) + ($$sum4$1$i<<2)|0);
     $172 = +HEAPF32[$171>>2];
     $173 = $170 + $172;
     $174 = $173 * 0.0418072007596492767334;
     $175 = $161 + $174;
     $$sum1$2$i = (($i$033$i) + 401)|0;
     $176 = (($146) + ($$sum1$2$i<<2)|0);
     $177 = +HEAPF32[$176>>2];
     $$sum2$2$i = (($i$033$i) + 414)|0;
     $178 = (($146) + ($$sum2$2$i<<2)|0);
     $179 = +HEAPF32[$178>>2];
     $180 = $177 + $179;
     $181 = $180 * -6.73277968584922511131E-17;
     $182 = $168 + $181;
     $$sum3$2$i = (($i$033$i) + 402)|0;
     $183 = (($146) + ($$sum3$2$i<<2)|0);
     $184 = +HEAPF32[$183>>2];
     $$sum4$2$i = (($i$033$i) + 413)|0;
     $185 = (($146) + ($$sum4$2$i<<2)|0);
     $186 = +HEAPF32[$185>>2];
     $187 = $184 + $186;
     $188 = $187 * -0.0876324027776718139648;
     $189 = $175 + $188;
     $$sum1$3$i = (($i$033$i) + 403)|0;
     $190 = (($146) + ($$sum1$3$i<<2)|0);
     $191 = +HEAPF32[$190>>2];
     $$sum2$3$i = (($i$033$i) + 412)|0;
     $192 = (($146) + ($$sum2$3$i<<2)|0);
     $193 = +HEAPF32[$192>>2];
     $194 = $191 + $193;
     $195 = $194 * -3.08350002913188747265E-17;
     $196 = $182 + $195;
     $$sum3$3$i = (($i$033$i) + 404)|0;
     $197 = (($146) + ($$sum3$3$i<<2)|0);
     $198 = +HEAPF32[$197>>2];
     $$sum4$3$i = (($i$033$i) + 411)|0;
     $199 = (($146) + ($$sum4$3$i<<2)|0);
     $200 = +HEAPF32[$199>>2];
     $201 = $198 + $200;
     $202 = $201 * 0.186347603797912597656;
     $203 = $189 + $202;
     $$sum1$4$i = (($i$033$i) + 405)|0;
     $204 = (($146) + ($$sum1$4$i<<2)|0);
     $205 = +HEAPF32[$204>>2];
     $$sum2$4$i = (($i$033$i) + 410)|0;
     $206 = (($146) + ($$sum2$4$i<<2)|0);
     $207 = +HEAPF32[$206>>2];
     $208 = $205 + $207;
     $209 = $208 * -1.10442402531001678673E-16;
     $210 = $196 + $209;
     $$sum3$4$i = (($i$033$i) + 406)|0;
     $211 = (($146) + ($$sum3$4$i<<2)|0);
     $212 = +HEAPF32[$211>>2];
     $$sum4$4$i = (($i$033$i) + 409)|0;
     $213 = (($146) + ($$sum4$4$i<<2)|0);
     $214 = +HEAPF32[$213>>2];
     $215 = $212 + $214;
     $216 = $215 * -0.627637982368469238281;
     $217 = $203 + $216;
     $218 = $210 + $217;
     $219 = ((($mask_idx_s$i) + (($chn$034$i*2304)|0)|0) + ($i$033$i<<2)|0);
     HEAPF32[$219>>2] = $218;
     $220 = (($i$033$i) + 1)|0;
     $exitcond47$i = ($220|0)==(576);
     if ($exitcond47$i) {
      break;
     } else {
      $i$033$i = $220;
     }
    }
    $221 = (((($masking_ratio) + (($gr_out*976)|0)|0) + (($chn$034$i*488)|0)|0) + 244|0);
    $222 = ((($gfc) + (($chn$034$i*244)|0)|0) + 26636|0);
    _memcpy(($221|0),($222|0),244)|0;
    $223 = ((($masking_ratio) + (($gr_out*976)|0)|0) + (($chn$034$i*488)|0)|0);
    $224 = ((($gfc) + (($chn$034$i*244)|0)|0) + 25660|0);
    _memcpy(($223|0),($224|0),244)|0;
    $225 = (($chn$034$i) + 1)|0;
    $exitcond48$i = ($225|0)==($26|0);
    if ($exitcond48$i) {
     break;
    } else {
     $chn$034$i = $225;
    }
   }
  }
 }
 $116 = ($27|0)>(0);
 if ($116) {
  $117 = ($118|0)==(0|0);
  $119 = (($uselongblock) + 4|0);
  $120 = (($thm$i) + 4|0);
  $121 = (($enn$i) + 4|0);
  $122 = (($thm$i) + 8|0);
  $123 = (($enn$i) + 8|0);
  $124 = (($thm$i) + 12|0);
  $125 = (($thm$i) + 16|0);
  $126 = (($thm$i) + 20|0);
  $127 = (($thm$i) + 24|0);
  $128 = (($thm$i) + 28|0);
  $129 = (($thm$i) + 32|0);
  $130 = (($thm$i) + 36|0);
  $131 = (($thm$i) + 40|0);
  $132 = (($thm$i) + 44|0);
  $133 = (($max$i) + 4|0);
  $134 = (($max$i) + 8|0);
  $135 = (($max$i) + 12|0);
  $136 = (($enn$i) + 12|0);
  $137 = (($enn$i) + 16|0);
  $138 = (($enn$i) + 20|0);
  $139 = (($enn$i) + 24|0);
  $140 = (($enn$i) + 28|0);
  $141 = (($enn$i) + 32|0);
  $142 = (($enn$i) + 36|0);
  $143 = (($enn$i) + 40|0);
  $144 = (($enn$i) + 44|0);
  $chn$126$i = 0;
  while(1) {
   ;HEAP32[$max$i+0>>2]=0|0;HEAP32[$max$i+4>>2]=0|0;HEAP32[$max$i+8>>2]=0|0;HEAP32[$max$i+12>>2]=0|0;
   $226 = $chn$126$i & 1;
   $227 = (($mask_idx_s$i) + (($226*2304)|0)|0);
   $228 = ($chn$126$i|0)==(2);
   if ($228) {
    $i$19$i = 0;
    while(1) {
     $229 = (($mask_idx_s$i) + ($i$19$i<<2)|0);
     $230 = +HEAPF32[$229>>2];
     $231 = ((($mask_idx_s$i) + ($i$19$i<<2)|0) + 2304|0);
     $232 = +HEAPF32[$231>>2];
     $233 = $230 + $232;
     HEAPF32[$229>>2] = $233;
     $234 = $230 - $232;
     HEAPF32[$231>>2] = $234;
     $235 = (($i$19$i) + 1)|0;
     $exitcond$i = ($235|0)==(576);
     if ($exitcond$i) {
      break;
     } else {
      $i$19$i = $235;
     }
    }
   }
   $236 = ((($gfc) + (($chn$126$i*36)|0)|0) + 27660|0);
   $237 = +HEAPF32[$236>>2];
   HEAPF32[$thm$i>>2] = $237;
   $238 = ((($gfc) + (($chn$126$i*36)|0)|0) + 27652|0);
   $239 = +HEAPF32[$238>>2];
   $240 = $237 / $239;
   HEAPF32[$enn$i>>2] = $240;
   $241 = ((($gfc) + (($chn$126$i*36)|0)|0) + 27664|0);
   $242 = +HEAPF32[$241>>2];
   HEAPF32[$120>>2] = $242;
   $243 = ((($gfc) + (($chn$126$i*36)|0)|0) + 27656|0);
   $244 = +HEAPF32[$243>>2];
   $245 = $242 / $244;
   HEAPF32[$121>>2] = $245;
   $246 = $237 + $242;
   $247 = ((($gfc) + (($chn$126$i*36)|0)|0) + 27668|0);
   $248 = +HEAPF32[$247>>2];
   HEAPF32[$122>>2] = $248;
   $249 = $248 / $237;
   HEAPF32[$123>>2] = $249;
   $250 = $246 + $248;
   HEAPF32[$max$i>>2] = $250;
   $i$318$i = 0;$pf$017$i = $227;
   while(1) {
    $251 = (($pf$017$i) + 256|0);
    $p$014$i = 1.0;$pf$113$i = $pf$017$i;
    while(1) {
     $252 = +HEAPF32[$pf$113$i>>2];
     $fabsf$i = (+Math_abs((+$252)));
     $253 = $p$014$i < $fabsf$i;
     $p$1$i = $253 ? $fabsf$i : $p$014$i;
     $254 = (($pf$113$i) + 4|0);
     $255 = ($254>>>0)<($251>>>0);
     if ($255) {
      $p$014$i = $p$1$i;$pf$113$i = $254;
     } else {
      break;
     }
    }
    $256 = (($i$318$i) + 3)|0;
    $257 = (($thm$i) + ($256<<2)|0);
    HEAPF32[$257>>2] = $p$1$i;
    $258 = (((($gfc) + (($chn$126$i*36)|0)|0) + ($i$318$i<<2)|0) + 27636|0);
    HEAPF32[$258>>2] = $p$1$i;
    $259 = (($i$318$i|0) / 3)&-1;
    $260 = (($259) + 1)|0;
    $261 = (($max$i) + ($260<<2)|0);
    $262 = +HEAPF32[$261>>2];
    $263 = $p$1$i + $262;
    HEAPF32[$261>>2] = $263;
    $264 = (($i$318$i) + 1)|0;
    $265 = (($thm$i) + ($264<<2)|0);
    $266 = +HEAPF32[$265>>2];
    $267 = $p$1$i > $266;
    if ($267) {
     $268 = $p$1$i / $266;
     $p$2$i = $268;
    } else {
     $269 = $p$1$i * 10.0;
     $270 = $266 > $269;
     if ($270) {
      $271 = $266 / $269;
      $p$2$i = $271;
     } else {
      $p$2$i = 0.0;
     }
    }
    $272 = (($enn$i) + ($256<<2)|0);
    HEAPF32[$272>>2] = $p$2$i;
    $exitcond38$i = ($264|0)==(9);
    if ($exitcond38$i) {
     break;
    } else {
     $i$318$i = $264;$pf$017$i = $254;
    }
   }
   $273 = +HEAPF32[$124>>2];
   $274 = +HEAPF32[$125>>2];
   $275 = $273 + $274;
   $276 = +HEAPF32[$126>>2];
   $277 = $275 + $276;
   $278 = $276 * 6.0;
   $279 = $278 < $277;
   if ($279) {
    $280 = $274 * 6.0;
    $281 = $280 < $277;
    if ($281) {
     $factor$0$i = 0.25;
    } else {
     $factor$0$i = 0.5;
    }
   } else {
    $factor$0$i = 1.0;
   }
   $282 = (($sub_short_factor) + (($chn$126$i*12)|0)|0);
   HEAPF32[$282>>2] = $factor$0$i;
   $283 = +HEAPF32[$127>>2];
   $284 = +HEAPF32[$128>>2];
   $285 = $283 + $284;
   $286 = +HEAPF32[$129>>2];
   $287 = $285 + $286;
   $288 = $286 * 6.0;
   $289 = $288 < $287;
   if ($289) {
    $379 = $284 * 6.0;
    $380 = $379 < $287;
    if ($380) {
     $factor$0$1$i = 0.25;
    } else {
     $factor$0$1$i = 0.5;
    }
   } else {
    $factor$0$1$i = 1.0;
   }
   $381 = ((($sub_short_factor) + (($chn$126$i*12)|0)|0) + 4|0);
   HEAPF32[$381>>2] = $factor$0$1$i;
   $382 = +HEAPF32[$130>>2];
   $383 = +HEAPF32[$131>>2];
   $384 = $382 + $383;
   $385 = +HEAPF32[$132>>2];
   $386 = $384 + $385;
   $387 = $385 * 6.0;
   $388 = $387 < $386;
   if ($388) {
    $389 = $383 * 6.0;
    $390 = $389 < $386;
    if ($390) {
     $factor$0$2$i = 0.25;
    } else {
     $factor$0$2$i = 0.5;
    }
   } else {
    $factor$0$2$i = 1.0;
   }
   $391 = ((($sub_short_factor) + (($chn$126$i*12)|0)|0) + 8|0);
   HEAPF32[$391>>2] = $factor$0$2$i;
   if (!($117)) {
    $290 = +HEAPF32[$enn$i>>2];
    $291 = +HEAPF32[$121>>2];
    $292 = $290 < $291;
    $x$1$i = $292 ? $291 : $290;
    $293 = +HEAPF32[$123>>2];
    $294 = $x$1$i < $293;
    $x$1$1$i = $294 ? $293 : $x$1$i;
    $295 = +HEAPF32[$136>>2];
    $296 = $x$1$1$i < $295;
    $x$1$2$i = $296 ? $295 : $x$1$1$i;
    $297 = +HEAPF32[$137>>2];
    $298 = $x$1$2$i < $297;
    $x$1$3$i = $298 ? $297 : $x$1$2$i;
    $299 = +HEAPF32[$138>>2];
    $300 = $x$1$3$i < $299;
    $x$1$4$i = $300 ? $299 : $x$1$3$i;
    $301 = +HEAPF32[$139>>2];
    $302 = $x$1$4$i < $301;
    $x$1$5$i = $302 ? $301 : $x$1$4$i;
    $303 = +HEAPF32[$140>>2];
    $304 = $x$1$5$i < $303;
    $x$1$6$i = $304 ? $303 : $x$1$5$i;
    $305 = +HEAPF32[$141>>2];
    $306 = $x$1$6$i < $305;
    $x$1$7$i = $306 ? $305 : $x$1$6$i;
    $307 = +HEAPF32[$142>>2];
    $308 = $x$1$7$i < $307;
    $x$1$8$i = $308 ? $307 : $x$1$7$i;
    $309 = +HEAPF32[$143>>2];
    $310 = $x$1$8$i < $309;
    $x$1$9$i = $310 ? $309 : $x$1$8$i;
    $311 = +HEAPF32[$144>>2];
    $312 = $x$1$9$i < $311;
    $x$1$10$i = $312 ? $311 : $x$1$9$i;
    $313 = ((($118) + ($chn$126$i<<3)|0) + 197112|0);
    $314 = +HEAPF64[$313>>3];
    $315 = (((($118) + ($gr_out<<5)|0) + ($chn$126$i<<3)|0) + 197144|0);
    HEAPF64[$315>>3] = $314;
    $316 = $x$1$10$i;
    HEAPF64[$313>>3] = $316;
   }
   $317 = HEAP32[$0>>2]|0;
   $318 = ((($317) + ($chn$126$i<<2)|0) + 6480|0);
   $319 = +HEAPF32[$318>>2];
   $i$623$i = 0;
   while(1) {
    $320 = (($i$623$i|0) / 3)&-1;
    $321 = ((($ns_attacks) + ($chn$126$i<<4)|0) + ($320<<2)|0);
    $322 = HEAP32[$321>>2]|0;
    $323 = ($322|0)==(0);
    if ($323) {
     $324 = (($enn$i) + ($i$623$i<<2)|0);
     $325 = +HEAPF32[$324>>2];
     $326 = $325 > $319;
     if ($326) {
      $327 = (($i$623$i|0) % 3)&-1;
      $328 = (($327) + 1)|0;
      HEAP32[$321>>2] = $328;
     }
    }
    $329 = (($i$623$i) + 1)|0;
    $exitcond41$i = ($329|0)==(12);
    if ($exitcond41$i) {
     break;
    } else {
     $i$623$i = $329;
    }
   }
   $330 = (($ns_attacks) + ($chn$126$i<<4)|0);
   $331 = +HEAPF32[$max$i>>2];
   $332 = +HEAPF32[$133>>2];
   $333 = $331 > $332;
   $334 = $333 ? $331 : $332;
   $335 = $334 < 4.0E+4;
   $336 = $332 * 1.70000004768371582031;
   $337 = $331 < $336;
   $or$cond$i = $335 & $337;
   $338 = $331 * 1.70000004768371582031;
   $339 = $332 < $338;
   $or$cond7$i = $or$cond$i & $339;
   if ($or$cond7$i) {
    $340 = HEAP32[$330>>2]|0;
    $341 = ((($ns_attacks) + ($chn$126$i<<4)|0) + 4|0);
    $342 = HEAP32[$341>>2]|0;
    $343 = ($340|0)>($342|0);
    if (!($343)) {
     HEAP32[$330>>2] = 0;
    }
    HEAP32[$341>>2] = 0;
   }
   $344 = +HEAPF32[$134>>2];
   $345 = $332 > $344;
   $346 = $345 ? $332 : $344;
   $347 = $346 < 4.0E+4;
   $348 = $344 * 1.70000004768371582031;
   $349 = $332 < $348;
   $or$cond$1$i = $347 & $349;
   $350 = $344 < $336;
   $or$cond7$1$i = $or$cond$1$i & $350;
   if ($or$cond7$1$i) {
    $$pre64$i = ((($ns_attacks) + ($chn$126$i<<4)|0) + 8|0);
    HEAP32[$$pre64$i>>2] = 0;
   }
   $392 = +HEAPF32[$135>>2];
   $393 = $344 > $392;
   $394 = $393 ? $344 : $392;
   $395 = $394 < 4.0E+4;
   $396 = $392 * 1.70000004768371582031;
   $397 = $344 < $396;
   $or$cond$2$i = $395 & $397;
   $398 = $392 < $348;
   $or$cond7$2$i = $or$cond$2$i & $398;
   if ($or$cond7$2$i) {
    $$pre66$i = ((($ns_attacks) + ($chn$126$i<<4)|0) + 12|0);
    HEAP32[$$pre66$i>>2] = 0;
   }
   $399 = HEAP32[$330>>2]|0;
   $400 = ((($gfc) + ($chn$126$i<<2)|0) + 27780|0);
   $352 = HEAP32[$400>>2]|0;
   $401 = ($399|0)>($352|0);
   if ($401) {
    $354 = $399;
   } else {
    HEAP32[$330>>2] = 0;
    $354 = 0;
   }
   $351 = ($352|0)==(3);
   $$phi$trans$insert$i = ((($ns_attacks) + ($chn$126$i<<4)|0) + 4|0);
   $$pre$i = HEAP32[$$phi$trans$insert$i>>2]|0;
   if ($351) {
    label = 47;
   } else {
    $353 = (($$pre$i) + ($354))|0;
    $355 = ((($ns_attacks) + ($chn$126$i<<4)|0) + 8|0);
    $356 = HEAP32[$355>>2]|0;
    $357 = (($353) + ($356))|0;
    $358 = ((($ns_attacks) + ($chn$126$i<<4)|0) + 12|0);
    $359 = HEAP32[$358>>2]|0;
    $360 = (0 - ($359))|0;
    $361 = ($357|0)==($360|0);
    if ($361) {
     $ns_uselongblock$0$i = 1;
    } else {
     label = 47;
    }
   }
   do {
    if ((label|0) == 47) {
     label = 0;
     $362 = ($$pre$i|0)==(0);
     do {
      if ($362) {
       $368 = 0;
      } else {
       $363 = ($354|0)==(0);
       if ($363) {
        $368 = $$pre$i;
        break;
       }
       HEAP32[$$phi$trans$insert$i>>2] = 0;
       $368 = 0;
      }
     } while(0);
     $364 = ((($ns_attacks) + ($chn$126$i<<4)|0) + 8|0);
     $365 = HEAP32[$364>>2]|0;
     $366 = ($365|0)==(0);
     if ($366) {
      $ns_uselongblock$0$i = 0;
      break;
     }
     $367 = ($368|0)==(0);
     if (!($367)) {
      HEAP32[$364>>2] = 0;
      $ns_uselongblock$0$i = 0;
      break;
     }
     $369 = ((($ns_attacks) + ($chn$126$i<<4)|0) + 12|0);
     $370 = HEAP32[$369>>2]|0;
     $371 = ($370|0)==(0);
     if ($371) {
      $ns_uselongblock$0$i = 0;
      break;
     }
     HEAP32[$369>>2] = 0;
     $ns_uselongblock$0$i = 0;
    }
   } while(0);
   $372 = ($chn$126$i|0)<(2);
   do {
    if ($372) {
     $373 = (($uselongblock) + ($chn$126$i<<2)|0);
     HEAP32[$373>>2] = $ns_uselongblock$0$i;
    } else {
     $374 = ($ns_uselongblock$0$i|0)==(0);
     if (!($374)) {
      break;
     }
     HEAP32[$119>>2] = 0;
     HEAP32[$uselongblock>>2] = 0;
    }
   } while(0);
   $375 = ((($gfc) + ($chn$126$i<<2)|0) + 27620|0);
   $376 = +HEAPF32[$375>>2];
   $377 = (($energy) + ($chn$126$i<<2)|0);
   HEAPF32[$377>>2] = $376;
   $378 = (($chn$126$i) + 1)|0;
   $exitcond43$i = ($378|0)==($27|0);
   if ($exitcond43$i) {
    break;
   } else {
    $chn$126$i = $378;
   }
  }
 }
 $402 = (($gfc) + 184|0);
 $403 = HEAP32[$402>>2]|0;
 $404 = ($403|0)==(1);
 do {
  if ($404) {
   $405 = HEAP32[$uselongblock>>2]|0;
   $406 = ($405|0)==(0);
   $$pre6$i = (($uselongblock) + 4|0);
   if (!($406)) {
    $407 = HEAP32[$$pre6$i>>2]|0;
    $408 = ($407|0)==(0);
    if (!($408)) {
     break;
    }
   }
   HEAP32[$$pre6$i>>2] = 0;
   HEAP32[$uselongblock>>2] = 0;
  }
 } while(0);
 $409 = HEAP32[$25>>2]|0;
 $410 = ($409|0)>(0);
 if ($410) {
  if ((($403|0) == 3)) {
   $chn$01$i$us = 0;
   while(1) {
    $411 = (($uselongblock) + ($chn$01$i$us<<2)|0);
    HEAP32[$411>>2] = 0;
    $412 = (($chn$01$i$us) + 1)|0;
    $413 = ($412|0)<($409|0);
    if ($413) {
     $chn$01$i$us = $412;
    } else {
     break;
    }
   }
  } else if ((($403|0) == 2)) {
   $chn$01$us$i = 0;
   while(1) {
    $414 = (($uselongblock) + ($chn$01$us$i<<2)|0);
    HEAP32[$414>>2] = 1;
    $415 = (($chn$01$us$i) + 1)|0;
    $416 = ($415|0)<($409|0);
    if ($416) {
     $chn$01$us$i = $415;
    } else {
     break;
    }
   }
  } else {
   $chn$01$i = 0;
   while(1) {
    $417 = (($chn$01$i) + 1)|0;
    $418 = ($417|0)<($409|0);
    if ($418) {
     $chn$01$i = $417;
    } else {
     break;
    }
   }
  }
 }
 $419 = ($420|0)>(0);
 if ($419) {
  $421 = (($gfc) + 85796|0);
  $422 = (($max$i) + 4|0);
  $423 = (($gfc) + 84908|0);
  $$pre36$i = (($avg$i) + 4|0);
  $424 = (($gfc) + 85804|0);
  $chn$0115 = 0;
  while(1) {
   $425 = $chn$0115 & 1;
   $426 = (($wsamp_L) + ($425<<12)|0);
   $427 = HEAP32[$2>>2]|0;
   $428 = ($427|0)==(0);
   if ($428) {
    $463 = 0;
   } else {
    $429 = HEAP32[$424>>2]|0;
    $463 = $429;
   }
   $430 = ($chn$0115|0)<(2);
   if ($430) {
    _fft_long($gfc,$426,$chn$0115,$buffer);
   } else {
    $431 = ($chn$0115|0)==(2);
    if ($431) {
     $$sum70 = (($425) + 1)|0;
     $j$08$i = 1023;
     while(1) {
      $432 = ((($wsamp_L) + ($425<<12)|0) + ($j$08$i<<2)|0);
      $433 = +HEAPF32[$432>>2];
      $434 = ((($wsamp_L) + ($$sum70<<12)|0) + ($j$08$i<<2)|0);
      $435 = +HEAPF32[$434>>2];
      $436 = $433 + $435;
      $437 = $436 * 0.707106769084930419921;
      HEAPF32[$432>>2] = $437;
      $438 = $433 - $435;
      $439 = $438 * 0.707106769084930419921;
      HEAPF32[$434>>2] = $439;
      $440 = (($j$08$i) + -1)|0;
      $441 = ($j$08$i|0)>(0);
      if ($441) {
       $j$08$i = $440;
      } else {
       break;
      }
     }
    }
   }
   $442 = +HEAPF32[$426>>2];
   $443 = $442 * $442;
   HEAPF32[$fftenergy>>2] = $443;
   $j$15$i = 511;
   while(1) {
    $444 = (512 - ($j$15$i))|0;
    $445 = ((($wsamp_L) + ($425<<12)|0) + ($444<<2)|0);
    $446 = +HEAPF32[$445>>2];
    $447 = (($j$15$i) + 512)|0;
    $448 = ((($wsamp_L) + ($425<<12)|0) + ($447<<2)|0);
    $449 = +HEAPF32[$448>>2];
    $450 = $446 * $446;
    $451 = $449 * $449;
    $452 = $450 + $451;
    $453 = $452 * 0.5;
    $454 = (($fftenergy) + ($444<<2)|0);
    HEAPF32[$454>>2] = $453;
    $455 = (($j$15$i) + -1)|0;
    $456 = ($j$15$i|0)>(0);
    if ($456) {
     $j$15$i = $455;
    } else {
     $j$23$i = 11;$totalenergy$04$i = 0.0;
     break;
    }
   }
   while(1) {
    $457 = (($fftenergy) + ($j$23$i<<2)|0);
    $458 = +HEAPF32[$457>>2];
    $459 = $totalenergy$04$i + $458;
    $460 = (($j$23$i) + 1)|0;
    $exitcond9$i = ($460|0)==(513);
    if ($exitcond9$i) {
     break;
    } else {
     $j$23$i = $460;$totalenergy$04$i = $459;
    }
   }
   $461 = ((($gfc) + ($chn$0115<<2)|0) + 27620|0);
   HEAPF32[$461>>2] = $459;
   $462 = ($463|0)==(0|0);
   if (!($462)) {
    $j$31$i = 0;
    while(1) {
     $464 = (((($463) + ($chn$0115<<13)|0) + ($j$31$i<<3)|0) + 90936|0);
     $465 = +HEAPF64[$464>>3];
     $466 = ((((($463) + ($gr_out<<15)|0) + ($chn$0115<<13)|0) + ($j$31$i<<3)|0) + 123704|0);
     HEAPF64[$466>>3] = $465;
     $467 = (($fftenergy) + ($j$31$i<<2)|0);
     $468 = +HEAPF32[$467>>2];
     $469 = $468;
     HEAPF64[$464>>3] = $469;
     $470 = (($j$31$i) + 1)|0;
     $exitcond$i7 = ($470|0)==(513);
     if ($exitcond$i7) {
      break;
     } else {
      $j$31$i = $470;
     }
    }
   }
   if ($430) {
    $471 = ((($gfc) + ($chn$0115<<2)|0) + 27612|0);
    $472 = +HEAPF32[$471>>2];
    $473 = (((($gfc) + ($gr_out<<3)|0) + ($chn$0115<<2)|0) + 27804|0);
    HEAPF32[$473>>2] = $472;
    $474 = HEAP32[$421>>2]|0;
    $i$01$i$i = 0;$loudness_power$02$i$i = 0.0;
    while(1) {
     $475 = (($fftenergy) + ($i$01$i$i<<2)|0);
     $476 = +HEAPF32[$475>>2];
     $477 = ((($474) + ($i$01$i$i<<2)|0) + 724|0);
     $478 = +HEAPF32[$477>>2];
     $479 = $476 * $478;
     $480 = $loudness_power$02$i$i + $479;
     $481 = (($i$01$i$i) + 1)|0;
     $exitcond$i$i = ($481|0)==(512);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$01$i$i = $481;$loudness_power$02$i$i = $480;
     }
    }
    $482 = $480;
    $483 = $482 * 8.97487134359663339783E-12;
    $484 = $483;
    HEAPF32[$471>>2] = $484;
   }
   $485 = HEAP32[$0>>2]|0;
   $486 = (($485) + 2148|0);
   $487 = HEAP32[$486>>2]|0;
   $488 = ($487|0)>(0);
   if ($488) {
    $b$08$i$i = 0;$j$07$i$i = 0;
    while(1) {
     $489 = ((($485) + ($b$08$i$i<<2)|0) + 1716|0);
     $490 = HEAP32[$489>>2]|0;
     $491 = ($490|0)>(0);
     if ($491) {
      $ebb$02$i$i = 0.0;$i$04$i$i = 0;$j$11$i$i = $j$07$i$i;$m$03$i$i = 0.0;
      while(1) {
       $492 = (($fftenergy) + ($j$11$i$i<<2)|0);
       $493 = +HEAPF32[$492>>2];
       $494 = $ebb$02$i$i + $493;
       $495 = $m$03$i$i < $493;
       $m$1$i$i = $495 ? $493 : $m$03$i$i;
       $496 = (($i$04$i$i) + 1)|0;
       $497 = (($j$11$i$i) + 1)|0;
       $exitcond32$i = ($496|0)==($490|0);
       if ($exitcond32$i) {
        break;
       } else {
        $ebb$02$i$i = $494;$i$04$i$i = $496;$j$11$i$i = $497;$m$03$i$i = $m$1$i$i;
       }
      }
      $498 = ($490|0)>(1);
      $smax$i$i = $498 ? $490 : 1;
      $499 = (($smax$i$i) + ($j$07$i$i))|0;
      $ebb$0$lcssa$i$i = $494;$j$1$lcssa$i$i = $499;$m$0$lcssa$i$i = $m$1$i$i;
     } else {
      $ebb$0$lcssa$i$i = 0.0;$j$1$lcssa$i$i = $j$07$i$i;$m$0$lcssa$i$i = 0.0;
     }
     $500 = ((($eb) + ($chn$0115<<8)|0) + ($b$08$i$i<<2)|0);
     HEAPF32[$500>>2] = $ebb$0$lcssa$i$i;
     $501 = (($max$i) + ($b$08$i$i<<2)|0);
     HEAPF32[$501>>2] = $m$0$lcssa$i$i;
     $502 = ((($485) + ($b$08$i$i<<2)|0) + 512|0);
     $503 = +HEAPF32[$502>>2];
     $504 = $ebb$0$lcssa$i$i * $503;
     $505 = (($avg$i) + ($b$08$i$i<<2)|0);
     HEAPF32[$505>>2] = $504;
     $506 = (($b$08$i$i) + 1)|0;
     $exitcond33$i = ($506|0)==($487|0);
     if ($exitcond33$i) {
      break;
     } else {
      $b$08$i$i = $506;$j$07$i$i = $j$1$lcssa$i$i;
     }
    }
    $$pre$i11 = +HEAPF32[$avg$i>>2];
    $$pre34$i = +HEAPF32[$$pre36$i>>2];
    $508 = $$pre34$i;$509 = $$pre$i11;
   } else {
    $508 = 0.0;$509 = 0.0;
   }
   $507 = $508 + $509;
   $510 = $507 > 0.0;
   if ($510) {
    $511 = +HEAPF32[$max$i>>2];
    $512 = +HEAPF32[$422>>2];
    $513 = $511 < $512;
    $m$0$i$i = $513 ? $512 : $511;
    $514 = $m$0$i$i * 2.0;
    $515 = $514 - $507;
    $516 = $515 * 20.0;
    $517 = (($485) + 1716|0);
    $518 = HEAP32[$517>>2]|0;
    $519 = (($485) + 1720|0);
    $520 = HEAP32[$519>>2]|0;
    $521 = (($518) + -1)|0;
    $522 = (($521) + ($520))|0;
    $523 = (+($522|0));
    $524 = $507 * $523;
    $525 = $516 / $524;
    $526 = (~~(($525)));
    $527 = ($526|0)>(8);
    $528 = $526&255;
    $529 = $527 ? 8 : $528;
    $storemerge$i$i = $529;
   } else {
    $storemerge$i$i = 0;
   }
   HEAP8[$mask_idx_s$i>>0] = $storemerge$i$i;
   $530 = (($487) + -1)|0;
   $531 = ($530|0)>(1);
   $532 = +HEAPF32[$$pre36$i>>2];
   $533 = $509 + $532;
   if ($531) {
    $534 = ($530|0)>(2);
    $539 = $533;$542 = 0;$571 = $532;$b$02$i$i = 1;
    while(1) {
     $535 = (($b$02$i$i) + 1)|0;
     $536 = (($avg$i) + ($535<<2)|0);
     $537 = +HEAPF32[$536>>2];
     $538 = $539 + $537;
     $540 = $538 > 0.0;
     if ($540) {
      $541 = (($max$i) + ($542<<2)|0);
      $543 = +HEAPF32[$541>>2];
      $544 = (($max$i) + ($b$02$i$i<<2)|0);
      $545 = +HEAPF32[$544>>2];
      $546 = $543 < $545;
      $m$1$i2$i = $546 ? $545 : $543;
      $547 = (($max$i) + ($535<<2)|0);
      $548 = +HEAPF32[$547>>2];
      $549 = $m$1$i2$i < $548;
      $m$2$i$i = $549 ? $548 : $m$1$i2$i;
      $550 = $m$2$i$i * 3.0;
      $551 = $550 - $538;
      $552 = $551 * 20.0;
      $553 = ((($485) + ($542<<2)|0) + 1716|0);
      $554 = HEAP32[$553>>2]|0;
      $555 = ((($485) + ($b$02$i$i<<2)|0) + 1716|0);
      $556 = HEAP32[$555>>2]|0;
      $557 = ((($485) + ($535<<2)|0) + 1716|0);
      $558 = HEAP32[$557>>2]|0;
      $559 = (($554) + -1)|0;
      $560 = (($559) + ($556))|0;
      $561 = (($560) + ($558))|0;
      $562 = (+($561|0));
      $563 = $538 * $562;
      $564 = $552 / $563;
      $565 = (~~(($564)));
      $566 = ($565|0)>(8);
      $567 = $565&255;
      $568 = $566 ? 8 : $567;
      $569 = (($mask_idx_s$i) + ($b$02$i$i)|0);
      HEAP8[$569>>0] = $568;
     } else {
      $572 = (($mask_idx_s$i) + ($b$02$i$i)|0);
      HEAP8[$572>>0] = 0;
     }
     $570 = $571 + $537;
     $exitcond155 = ($535|0)==($530|0);
     if ($exitcond155) {
      break;
     } else {
      $542$phi = $b$02$i$i;$539 = $570;$571 = $537;$b$02$i$i = $535;$542 = $542$phi;
     }
    }
    $smax$i = $534 ? $530 : 2;
    $573 = (($smax$i) + -1)|0;
    $$lcssa$i$i = $573;$$lcssa1$i$i = $570;$b$0$lcssa$i$i = $smax$i;
   } else {
    $$lcssa$i$i = 0;$$lcssa1$i$i = $533;$b$0$lcssa$i$i = 1;
   }
   $574 = $$lcssa1$i$i > 0.0;
   if ($574) {
    $575 = (($max$i) + ($$lcssa$i$i<<2)|0);
    $576 = +HEAPF32[$575>>2];
    $577 = (($max$i) + ($b$0$lcssa$i$i<<2)|0);
    $578 = +HEAPF32[$577>>2];
    $579 = $576 < $578;
    $m$3$i$i = $579 ? $578 : $576;
    $580 = $m$3$i$i * 2.0;
    $581 = $580 - $$lcssa1$i$i;
    $582 = $581 * 20.0;
    $583 = ((($485) + ($$lcssa$i$i<<2)|0) + 1716|0);
    $584 = HEAP32[$583>>2]|0;
    $585 = ((($485) + ($b$0$lcssa$i$i<<2)|0) + 1716|0);
    $586 = HEAP32[$585>>2]|0;
    $587 = (($584) + -1)|0;
    $588 = (($587) + ($586))|0;
    $589 = (+($588|0));
    $590 = $$lcssa1$i$i * $589;
    $591 = $582 / $590;
    $592 = (~~(($591)));
    $593 = ($592|0)>(8);
    $594 = $592&255;
    $595 = $593 ? 8 : $594;
    $596 = (($mask_idx_s$i) + ($b$0$lcssa$i$i)|0);
    HEAP8[$596>>0] = $595;
   } else {
    $597 = (($mask_idx_s$i) + ($b$0$lcssa$i$i)|0);
    HEAP8[$597>>0] = 0;
   }
   if ($488) {
    $598 = (($485) + 2156|0);
    $599 = ((($gfc) + ($425<<2)|0) + 27796|0);
    $b$017$i = 0;$k$018$i = 0;
    while(1) {
     $604 = (($485) + ($b$017$i<<2)|0);
     $605 = +HEAPF32[$604>>2];
     $606 = +HEAPF32[$423>>2];
     $607 = $605 * $606;
     $608 = ((($485) + ($b$017$i<<3)|0) + 1204|0);
     $609 = HEAP32[$608>>2]|0;
     $610 = ((($485) + ($b$017$i<<3)|0) + 1208|0);
     $611 = HEAP32[$610>>2]|0;
     $612 = (($mask_idx_s$i) + ($b$017$i)|0);
     $613 = HEAP8[$612>>0]|0;
     $614 = $613&255;
     $615 = (64520 + ($614<<2)|0);
     $616 = HEAP32[$615>>2]|0;
     $617 = (($mask_idx_s$i) + ($609)|0);
     $618 = HEAP8[$617>>0]|0;
     $619 = $618&255;
     $620 = HEAP32[$598>>2]|0;
     $621 = (($620) + ($k$018$i<<2)|0);
     $622 = +HEAPF32[$621>>2];
     $623 = ((($eb) + ($chn$0115<<8)|0) + ($609<<2)|0);
     $624 = +HEAPF32[$623>>2];
     $625 = $622 * $624;
     $626 = (64440 + ($619<<2)|0);
     $627 = +HEAPF32[$626>>2];
     $628 = $625 * $627;
     $k$15$i = (($k$018$i) + 1)|0;
     $629 = ($609|0)<($611|0);
     if ($629) {
      $635 = $620;$dd$08$i = $619;$ecb$07$i = $628;$k$110$i = $k$15$i;$kk$011$in$i = $609;
      while(1) {
       $kk$011$i = (($kk$011$in$i) + 1)|0;
       $630 = (($mask_idx_s$i) + ($kk$011$i)|0);
       $631 = HEAP8[$630>>0]|0;
       $632 = $631&255;
       $633 = (($632) + ($dd$08$i))|0;
       $634 = (($635) + ($k$110$i<<2)|0);
       $636 = +HEAPF32[$634>>2];
       $637 = ((($eb) + ($chn$0115<<8)|0) + ($kk$011$i<<2)|0);
       $638 = +HEAPF32[$637>>2];
       $639 = $636 * $638;
       $640 = (64440 + ($632<<2)|0);
       $641 = +HEAPF32[$640>>2];
       $642 = $639 * $641;
       $643 = (($kk$011$i) - ($b$017$i))|0;
       $644 = $ecb$07$i < 0.0;
       $$01$i$i = $644 ? 0.0 : $ecb$07$i;
       $645 = $642 < 0.0;
       $$02$i$i = $645 ? 0.0 : $642;
       $646 = !($$01$i$i <= 0.0);
       do {
        if ($646) {
         $647 = !($$02$i$i <= 0.0);
         if (!($647)) {
          $ecb$0$be$i = $$01$i$i;
          break;
         }
         $648 = $$02$i$i > $$01$i$i;
         if ($648) {
          $649 = $$02$i$i / $$01$i$i;
          $ratio$0$i$i = $649;
         } else {
          $650 = $$01$i$i / $$02$i$i;
          $ratio$0$i$i = $650;
         }
         $ispos$i$i = ($643|0)>(-1);
         $neg$i$i = (0 - ($643))|0;
         $651 = $ispos$i$i ? $643 : $neg$i$i;
         $652 = ($651|0)>($616|0);
         if ($652) {
          $664 = +HEAPF32[64296>>2];
          $665 = $ratio$0$i$i < $664;
          if ($665) {
           $666 = $$01$i$i + $$02$i$i;
           $ecb$0$be$i = $666;
           break;
          } else {
           $$1$i$i = $648 ? $$02$i$i : $$01$i$i;
           $ecb$0$be$i = $$1$i$i;
           break;
          }
         } else {
          $653 = +HEAPF32[64288>>2];
          $654 = !($ratio$0$i$i >= $653);
          if ($654) {
           $656 = (+_fast_log2($ratio$0$i$i));
           $657 = $656;
           $658 = $657 * 4.8164799306236982801;
           $659 = (~~(($658)));
           $660 = $$01$i$i + $$02$i$i;
           $661 = (64480 + ($659<<2)|0);
           $662 = +HEAPF32[$661>>2];
           $663 = $660 * $662;
           $ecb$0$be$i = $663;
           break;
          } else {
           $655 = $$01$i$i + $$02$i$i;
           $ecb$0$be$i = $655;
           break;
          }
         }
        } else {
         $ecb$0$be$i = $$02$i$i;
        }
       } while(0);
       $exitcond27$i = ($kk$011$i|0)==($611|0);
       if ($exitcond27$i) {
        break;
       }
       $k$1$i = (($k$110$i) + 1)|0;
       $$pre35$i = HEAP32[$598>>2]|0;
       $635 = $$pre35$i;$dd$08$i = $633;$ecb$07$i = $ecb$0$be$i;$k$110$i = $k$1$i;$kk$011$in$i = $kk$011$i;
      }
      $667 = (($k$15$i) - ($609))|0;
      $668 = (($667) + ($611))|0;
      $669 = (1 - ($609))|0;
      $670 = (($669) + ($611))|0;
      $phitmp$i = $670 << 1;
      $dd$0$lcssa$i = $633;$dd_n$0$lcssa$i = $phitmp$i;$ecb$0$lcssa$i = $ecb$0$be$i;$k$1$lcssa$i = $668;
     } else {
      $dd$0$lcssa$i = $619;$dd_n$0$lcssa$i = 2;$ecb$0$lcssa$i = $628;$k$1$lcssa$i = $k$15$i;
     }
     $671 = $dd$0$lcssa$i << 1;
     $672 = $671 | 1;
     $673 = (($672|0) / ($dd_n$0$lcssa$i|0))&-1;
     $674 = (64440 + ($673<<2)|0);
     $675 = +HEAPF32[$674>>2];
     $676 = $675 * 0.5;
     $677 = $ecb$0$lcssa$i * $676;
     $678 = HEAP32[$599>>2]|0;
     $679 = ($678|0)==(2);
     do {
      if ($679) {
       $680 = (((($gfc) + ($chn$0115<<8)|0) + ($b$017$i<<2)|0) + 21564|0);
       $681 = +HEAPF32[$680>>2];
       $682 = $681 * 2.0;
       $683 = $682 > 0.0;
       if ($683) {
        $684 = $677 < $682;
        $685 = $684 ? $677 : $682;
        $686 = ((($thr) + ($chn$0115<<8)|0) + ($b$017$i<<2)|0);
        HEAPF32[$686>>2] = $685;
        $711 = $681;$720 = $685;
        break;
       } else {
        $687 = $677;
        $688 = ((($eb) + ($chn$0115<<8)|0) + ($b$017$i<<2)|0);
        $689 = +HEAPF32[$688>>2];
        $690 = $689;
        $691 = $690 * 0.299999999999999988898;
        $692 = $687 < $691;
        $$$i = $692 ? $687 : $691;
        $693 = $$$i;
        $694 = ((($thr) + ($chn$0115<<8)|0) + ($b$017$i<<2)|0);
        HEAPF32[$694>>2] = $693;
        $711 = $681;$720 = $693;
        break;
       }
      } else {
       $695 = (((($gfc) + ($chn$0115<<8)|0) + ($b$017$i<<2)|0) + 22588|0);
       $696 = +HEAPF32[$695>>2];
       $697 = $696 * 16.0;
       $698 = (((($gfc) + ($chn$0115<<8)|0) + ($b$017$i<<2)|0) + 21564|0);
       $699 = +HEAPF32[$698>>2];
       $700 = $699 * 2.0;
       $701 = !($697 <= 0.0);
       $ecb_limit_2$0$i = $701 ? $697 : $677;
       $702 = !($700 <= 0.0);
       $ecb_limit_1$0$i = $702 ? $700 : $677;
       $703 = ($678|0)==(0);
       if ($703) {
        $704 = $ecb_limit_1$0$i < $ecb_limit_2$0$i;
        $705 = $704 ? $ecb_limit_1$0$i : $ecb_limit_2$0$i;
        $ecb_limit1$0$i = $705;
       } else {
        $ecb_limit1$0$i = $ecb_limit_1$0$i;
       }
       $706 = $677 < $ecb_limit1$0$i;
       $707 = $706 ? $677 : $ecb_limit1$0$i;
       $708 = ((($thr) + ($chn$0115<<8)|0) + ($b$017$i<<2)|0);
       HEAPF32[$708>>2] = $707;
       $711 = $699;$720 = $707;
      }
     } while(0);
     $709 = (((($gfc) + ($chn$0115<<8)|0) + ($b$017$i<<2)|0) + 21564|0);
     $710 = (((($gfc) + ($chn$0115<<8)|0) + ($b$017$i<<2)|0) + 22588|0);
     HEAPF32[$710>>2] = $711;
     HEAPF32[$709>>2] = $677;
     $712 = (($max$i) + ($b$017$i<<2)|0);
     $713 = +HEAPF32[$712>>2];
     $714 = ((($485) + ($b$017$i<<2)|0) + 256|0);
     $715 = +HEAPF32[$714>>2];
     $716 = $713 * $715;
     $717 = $676 * $716;
     $718 = ((($thr) + ($chn$0115<<8)|0) + ($b$017$i<<2)|0);
     $719 = $720 > $717;
     if ($719) {
      HEAPF32[$718>>2] = $717;
      $723 = $717;
     } else {
      $723 = $720;
     }
     $721 = $607 > 1.0;
     if ($721) {
      $722 = $607 * $723;
      HEAPF32[$718>>2] = $722;
      $727 = $722;
     } else {
      $727 = $723;
     }
     $724 = ((($eb) + ($chn$0115<<8)|0) + ($b$017$i<<2)|0);
     $725 = +HEAPF32[$724>>2];
     $726 = $727 > $725;
     if ($726) {
      HEAPF32[$718>>2] = $725;
      $730 = $725;
     } else {
      $730 = $727;
     }
     $728 = $607 < 1.0;
     if ($728) {
      $729 = $607 * $730;
      HEAPF32[$718>>2] = $729;
     }
     $601 = (($b$017$i) + 1)|0;
     $731 = HEAP32[$486>>2]|0;
     $732 = ($601|0)<($731|0);
     if ($732) {
      $b$017$i = $601;$k$018$i = $k$1$lcssa$i;
     } else {
      break;
     }
    }
    $600 = ($601|0)<(64);
    if ($600) {
     $b$14$i$ph = $601;
     label = 118;
    }
   } else {
    $b$14$i$ph = 0;
    label = 118;
   }
   if ((label|0) == 118) {
    label = 0;
    $scevgep159 = ((($eb) + ($chn$0115<<8)|0) + ($b$14$i$ph<<2)|0);
    $602 = $b$14$i$ph << 2;
    $603 = (256 - ($602))|0;
    _memset(($scevgep159|0),0,($603|0))|0;
    $scevgep162 = ((($thr) + ($chn$0115<<8)|0) + ($b$14$i$ph<<2)|0);
    _memset(($scevgep162|0),0,($603|0))|0;
   }
   $733 = (($chn$0115) + 1)|0;
   $exitcond164 = ($733|0)==($420|0);
   if ($exitcond164) {
    break;
   } else {
    $chn$0115 = $733;
   }
  }
 }
 $734 = HEAP32[$17>>2]|0;
 $735 = ($734|0)==(1);
 if ($735) {
  $736 = HEAP32[$uselongblock>>2]|0;
  $737 = (($uselongblock) + 4|0);
  $738 = HEAP32[$737>>2]|0;
  $739 = (($738) + ($736))|0;
  $740 = ($739|0)==(2);
  if ($740) {
   $741 = (($1) + 768|0);
   $742 = (($gfc) + 85796|0);
   $743 = HEAP32[$742>>2]|0;
   $744 = (($743) + 212|0);
   $745 = +HEAPF32[$7>>2];
   $746 = (($1) + 2148|0);
   $747 = HEAP32[$746>>2]|0;
   _vbrpsy_compute_MS_thresholds($eb,$thr,$741,$744,$748,$745,$747);
  }
 }
 if ($419) {
  $chn$1106 = 0;
  while(1) {
   $749 = (($eb) + ($chn$1106<<8)|0);
   $750 = (($thr) + ($chn$1106<<8)|0);
   $751 = HEAP32[$0>>2]|0;
   $752 = ((($gfc) + (($chn$1106*244)|0)|0) + 26636|0);
   $753 = ((($gfc) + (($chn$1106*244)|0)|0) + 25660|0);
   _convert_partition2scalefac($751,$749,$750,$752,$753);
   $754 = HEAP32[$0>>2]|0;
   $755 = (($754) + 4320|0);
   _convert_partition2scalefac($755,$749,$750,$enn$i,$thm$i);
   $sb$02$i = 0;
   while(1) {
    $756 = (($enn$i) + ($sb$02$i<<2)|0);
    $757 = +HEAPF32[$756>>2];
    $758 = (($thm$i) + ($sb$02$i<<2)|0);
    $759 = +HEAPF32[$758>>2];
    $760 = $759 * 0.015625;
    $761 = (((($gfc) + (($chn$1106*244)|0)|0) + (($sb$02$i*12)|0)|0) + 26724|0);
    HEAPF32[$761>>2] = $757;
    $762 = (((($gfc) + (($chn$1106*244)|0)|0) + (($sb$02$i*12)|0)|0) + 25748|0);
    HEAPF32[$762>>2] = $760;
    $763 = (((($gfc) + (($chn$1106*244)|0)|0) + (($sb$02$i*12)|0)|0) + 26728|0);
    HEAPF32[$763>>2] = $757;
    $764 = (((($gfc) + (($chn$1106*244)|0)|0) + (($sb$02$i*12)|0)|0) + 25752|0);
    HEAPF32[$764>>2] = $760;
    $765 = (((($gfc) + (($chn$1106*244)|0)|0) + (($sb$02$i*12)|0)|0) + 26732|0);
    HEAPF32[$765>>2] = $757;
    $766 = (((($gfc) + (($chn$1106*244)|0)|0) + (($sb$02$i*12)|0)|0) + 25756|0);
    HEAPF32[$766>>2] = $760;
    $767 = (($sb$02$i) + 1)|0;
    $exitcond$i17 = ($767|0)==(13);
    if ($exitcond$i17) {
     break;
    } else {
     $sb$02$i = $767;
    }
   }
   $768 = (($chn$1106) + 1)|0;
   $exitcond148 = ($768|0)==($420|0);
   if ($exitcond148) {
    break;
   } else {
    $chn$1106 = $768;
   }
  }
 }
 $769 = HEAP32[$0>>2]|0;
 $770 = (($769) + 6500|0);
 $771 = HEAP32[$770>>2]|0;
 $772 = HEAP32[$uselongblock>>2]|0;
 $773 = (($uselongblock) + 4|0);
 $774 = HEAP32[$773>>2]|0;
 $775 = (0 - ($774))|0;
 $776 = (($1) + 2928|0);
 $777 = (($gfc) + 85796|0);
 $778 = (($1) + 4308|0);
 $779 = ($771|0)==(0);
 $780 = (($enn$i) + 4|0);
 $781 = (($thm$i) + 4|0);
 $782 = (($enn$i) + 8|0);
 $783 = (($thm$i) + 8|0);
 $784 = (($enn$i) + 12|0);
 $785 = (($thm$i) + 12|0);
 $786 = (($enn$i) + 16|0);
 $787 = (($thm$i) + 16|0);
 $788 = (($enn$i) + 20|0);
 $789 = (($thm$i) + 20|0);
 $790 = (($enn$i) + 24|0);
 $791 = (($thm$i) + 24|0);
 $792 = (($enn$i) + 28|0);
 $793 = (($thm$i) + 28|0);
 $794 = (($enn$i) + 32|0);
 $795 = (($thm$i) + 32|0);
 $796 = (($enn$i) + 36|0);
 $797 = (($thm$i) + 36|0);
 $798 = (($enn$i) + 40|0);
 $799 = (($thm$i) + 40|0);
 $800 = (($enn$i) + 44|0);
 $801 = (($thm$i) + 44|0);
 $802 = (($enn$i) + 48|0);
 $803 = (($thm$i) + 48|0);
 $804 = (($max$i) + 4|0);
 $805 = (($gfc) + 84908|0);
 $$pre54$i = (($avg$i) + 4|0);
 $sblock$0102 = 0;
 while(1) {
  if ($419) {
   $806 = ($sblock$0102|0)==(0);
   $807 = (($fftenergy_s) + (($sblock$0102*516)|0)|0);
   $chn$292 = 0;
   while(1) {
    $808 = $chn$292 & 1;
    $809 = (($uselongblock) + ($808<<2)|0);
    $810 = HEAP32[$809>>2]|0;
    $811 = ($810|0)!=(0);
    $or$cond = $811 & $779;
    do {
     if ($or$cond) {
      if ($806) {
       $812 = HEAP32[$0>>2]|0;
       $813 = (($812) + 4308|0);
       $814 = HEAP32[$813>>2]|0;
       $815 = ($814|0)>(0);
       if ($815) {
        $b$01$i = 0;
        while(1) {
         $816 = (((($gfc) + ($chn$292<<8)|0) + ($b$01$i<<2)|0) + 23612|0);
         $817 = +HEAPF32[$816>>2];
         $818 = (((($gfc) + ($chn$292<<8)|0) + ($b$01$i<<2)|0) + 24636|0);
         HEAPF32[$818>>2] = $817;
         $819 = (($b$01$i) + 1)|0;
         $exitcond$i18 = ($819|0)==($814|0);
         if ($exitcond$i18) {
          break;
         } else {
          $b$01$i = $819;
         }
        }
       }
      }
     } else {
      $820 = ($chn$292|0)<(2);
      $or$cond$i20 = $806 & $820;
      if ($or$cond$i20) {
       $821 = (($wsamp_S) + (($808*3072)|0)|0);
       _fft_short($gfc,$821,$chn$292,$buffer);
      }
      $822 = ($chn$292|0)==(2);
      if ($822) {
       $$sum = (($808) + 1)|0;
       $j$02$i = 255;
       while(1) {
        $823 = (((($wsamp_S) + (($808*3072)|0)|0) + ($sblock$0102<<10)|0) + ($j$02$i<<2)|0);
        $824 = +HEAPF32[$823>>2];
        $825 = (((($wsamp_S) + (($$sum*3072)|0)|0) + ($sblock$0102<<10)|0) + ($j$02$i<<2)|0);
        $826 = +HEAPF32[$825>>2];
        $827 = $824 + $826;
        $828 = $827 * 0.707106769084930419921;
        HEAPF32[$823>>2] = $828;
        $829 = $824 - $826;
        $830 = $829 * 0.707106769084930419921;
        HEAPF32[$825>>2] = $830;
        $831 = (($j$02$i) + -1)|0;
        $832 = ($j$02$i|0)>(0);
        if ($832) {
         $j$02$i = $831;
        } else {
         break;
        }
       }
      }
      $833 = ((($wsamp_S) + (($808*3072)|0)|0) + ($sblock$0102<<10)|0);
      $834 = +HEAPF32[$833>>2];
      $835 = $834 * $834;
      HEAPF32[$807>>2] = $835;
      $j$11$i = 127;
      while(1) {
       $836 = (128 - ($j$11$i))|0;
       $837 = (((($wsamp_S) + (($808*3072)|0)|0) + ($sblock$0102<<10)|0) + ($836<<2)|0);
       $838 = +HEAPF32[$837>>2];
       $839 = (($j$11$i) + 128)|0;
       $840 = (((($wsamp_S) + (($808*3072)|0)|0) + ($sblock$0102<<10)|0) + ($839<<2)|0);
       $841 = +HEAPF32[$840>>2];
       $842 = $838 * $838;
       $843 = $841 * $841;
       $844 = $842 + $843;
       $845 = $844 * 0.5;
       $846 = ((($fftenergy_s) + (($sblock$0102*516)|0)|0) + ($836<<2)|0);
       HEAPF32[$846>>2] = $845;
       $847 = (($j$11$i) + -1)|0;
       $848 = ($j$11$i|0)>(0);
       if ($848) {
        $j$11$i = $847;
       } else {
        break;
       }
      }
      $849 = HEAP32[$0>>2]|0;
      _memset(($max$i|0),0,256)|0;
      _memset(($avg$i|0),0,256)|0;
      $850 = (($849) + 4308|0);
      $851 = HEAP32[$850>>2]|0;
      $852 = ($851|0)>(0);
      if ($852) {
       $b$030$i = 0;$j$031$i = 0;
       while(1) {
        $853 = ((($849) + ($b$030$i<<2)|0) + 3876|0);
        $854 = HEAP32[$853>>2]|0;
        $855 = ($854|0)>(0);
        if ($855) {
         $ebb$020$i = 0.0;$i$022$i = 0;$j$121$i = $j$031$i;$m$019$i = 0.0;
         while(1) {
          $856 = ((($fftenergy_s) + (($sblock$0102*516)|0)|0) + ($j$121$i<<2)|0);
          $857 = +HEAPF32[$856>>2];
          $858 = $ebb$020$i + $857;
          $859 = $m$019$i < $857;
          $m$1$i = $859 ? $857 : $m$019$i;
          $860 = (($i$022$i) + 1)|0;
          $861 = (($j$121$i) + 1)|0;
          $exitcond46$i = ($860|0)==($854|0);
          if ($exitcond46$i) {
           break;
          } else {
           $ebb$020$i = $858;$i$022$i = $860;$j$121$i = $861;$m$019$i = $m$1$i;
          }
         }
         $862 = (($854) + ($j$031$i))|0;
         $ebb$0$lcssa$i = $858;$j$1$lcssa$i = $862;$m$0$lcssa$i = $m$1$i;
        } else {
         $ebb$0$lcssa$i = 0.0;$j$1$lcssa$i = $j$031$i;$m$0$lcssa$i = 0.0;
        }
        $863 = ((($eb) + ($chn$292<<8)|0) + ($b$030$i<<2)|0);
        HEAPF32[$863>>2] = $ebb$0$lcssa$i;
        $864 = (($max$i) + ($b$030$i<<2)|0);
        HEAPF32[$864>>2] = $m$0$lcssa$i;
        $865 = ((($849) + ($b$030$i<<2)|0) + 2672|0);
        $866 = +HEAPF32[$865>>2];
        $867 = $ebb$0$lcssa$i * $866;
        $868 = (($avg$i) + ($b$030$i<<2)|0);
        HEAPF32[$868>>2] = $867;
        $869 = (($b$030$i) + 1)|0;
        $exitcond132 = ($869|0)==($851|0);
        if ($exitcond132) {
         break;
        } else {
         $b$030$i = $869;$j$031$i = $j$1$lcssa$i;
        }
       }
       $$pre$i25 = +HEAPF32[$avg$i>>2];
       $$pre48$i = +HEAPF32[$$pre54$i>>2];
       $871 = $$pre48$i;$872 = $$pre$i25;
      } else {
       $871 = 0.0;$872 = 0.0;
      }
      $870 = $871 + $872;
      $873 = $870 > 0.0;
      if ($873) {
       $874 = +HEAPF32[$max$i>>2];
       $875 = +HEAPF32[$804>>2];
       $876 = $874 < $875;
       $m$0$i$i27 = $876 ? $875 : $874;
       $877 = $m$0$i$i27 * 2.0;
       $878 = $877 - $870;
       $879 = $878 * 20.0;
       $880 = (($849) + 3876|0);
       $881 = HEAP32[$880>>2]|0;
       $882 = (($849) + 3880|0);
       $883 = HEAP32[$882>>2]|0;
       $884 = (($881) + -1)|0;
       $885 = (($884) + ($883))|0;
       $886 = (+($885|0));
       $887 = $870 * $886;
       $888 = $879 / $887;
       $889 = (~~(($888)));
       $890 = ($889|0)>(8);
       $891 = $889&255;
       $892 = $890 ? 8 : $891;
       $storemerge$i$i28 = $892;
      } else {
       $storemerge$i$i28 = 0;
      }
      HEAP8[$mask_idx_s$i>>0] = $storemerge$i$i28;
      $893 = (($851) + -1)|0;
      $894 = ($893|0)>(1);
      $895 = $872 + $871;
      if ($894) {
       $896 = ($893|0)>(2);
       $901 = $895;$904 = 0;$933 = $871;$b$02$i$i30 = 1;
       while(1) {
        $897 = (($b$02$i$i30) + 1)|0;
        $898 = (($avg$i) + ($897<<2)|0);
        $899 = +HEAPF32[$898>>2];
        $900 = $901 + $899;
        $902 = $900 > 0.0;
        if ($902) {
         $903 = (($max$i) + ($904<<2)|0);
         $905 = +HEAPF32[$903>>2];
         $906 = (($max$i) + ($b$02$i$i30<<2)|0);
         $907 = +HEAPF32[$906>>2];
         $908 = $905 < $907;
         $m$1$i$i32 = $908 ? $907 : $905;
         $909 = (($max$i) + ($897<<2)|0);
         $910 = +HEAPF32[$909>>2];
         $911 = $m$1$i$i32 < $910;
         $m$2$i$i33 = $911 ? $910 : $m$1$i$i32;
         $912 = $m$2$i$i33 * 3.0;
         $913 = $912 - $900;
         $914 = $913 * 20.0;
         $915 = ((($849) + ($904<<2)|0) + 3876|0);
         $916 = HEAP32[$915>>2]|0;
         $917 = ((($849) + ($b$02$i$i30<<2)|0) + 3876|0);
         $918 = HEAP32[$917>>2]|0;
         $919 = ((($849) + ($897<<2)|0) + 3876|0);
         $920 = HEAP32[$919>>2]|0;
         $921 = (($916) + -1)|0;
         $922 = (($921) + ($918))|0;
         $923 = (($922) + ($920))|0;
         $924 = (+($923|0));
         $925 = $900 * $924;
         $926 = $914 / $925;
         $927 = (~~(($926)));
         $928 = ($927|0)>(8);
         $929 = $927&255;
         $930 = $928 ? 8 : $929;
         $931 = (($mask_idx_s$i) + ($b$02$i$i30)|0);
         HEAP8[$931>>0] = $930;
        } else {
         $934 = (($mask_idx_s$i) + ($b$02$i$i30)|0);
         HEAP8[$934>>0] = 0;
        }
        $932 = $933 + $899;
        $exitcond134 = ($897|0)==($893|0);
        if ($exitcond134) {
         break;
        } else {
         $904$phi = $b$02$i$i30;$901 = $932;$933 = $899;$b$02$i$i30 = $897;$904 = $904$phi;
        }
       }
       $smax$i29 = $896 ? $893 : 2;
       $935 = (($smax$i29) + -1)|0;
       $$lcssa$i$i36 = $935;$$lcssa1$i$i35 = $932;$b$0$lcssa$i$i37 = $smax$i29;
      } else {
       $$lcssa$i$i36 = 0;$$lcssa1$i$i35 = $895;$b$0$lcssa$i$i37 = 1;
      }
      $936 = $$lcssa1$i$i35 > 0.0;
      if ($936) {
       $937 = (($max$i) + ($$lcssa$i$i36<<2)|0);
       $938 = +HEAPF32[$937>>2];
       $939 = (($max$i) + ($b$0$lcssa$i$i37<<2)|0);
       $940 = +HEAPF32[$939>>2];
       $941 = $938 < $940;
       $m$3$i$i39 = $941 ? $940 : $938;
       $942 = $m$3$i$i39 * 2.0;
       $943 = $942 - $$lcssa1$i$i35;
       $944 = $943 * 20.0;
       $945 = ((($849) + ($$lcssa$i$i36<<2)|0) + 3876|0);
       $946 = HEAP32[$945>>2]|0;
       $947 = ((($849) + ($b$0$lcssa$i$i37<<2)|0) + 3876|0);
       $948 = HEAP32[$947>>2]|0;
       $949 = (($946) + -1)|0;
       $950 = (($949) + ($948))|0;
       $951 = (+($950|0));
       $952 = $$lcssa1$i$i35 * $951;
       $953 = $944 / $952;
       $954 = (~~(($953)));
       $955 = ($954|0)>(8);
       $956 = $954&255;
       $957 = $955 ? 8 : $956;
       $958 = (($mask_idx_s$i) + ($b$0$lcssa$i$i37)|0);
       HEAP8[$958>>0] = $957;
      } else {
       $959 = (($mask_idx_s$i) + ($b$0$lcssa$i$i37)|0);
       HEAP8[$959>>0] = 0;
      }
      if ($852) {
       $960 = (($849) + 4316|0);
       $b$114$i = 0;$j$215$i = 0;
       while(1) {
        $965 = ((($849) + ($b$114$i<<3)|0) + 3364|0);
        $966 = HEAP32[$965>>2]|0;
        $967 = ((($849) + ($b$114$i<<3)|0) + 3368|0);
        $968 = HEAP32[$967>>2]|0;
        $969 = (($mask_idx_s$i) + ($b$114$i)|0);
        $970 = HEAP8[$969>>0]|0;
        $971 = $970&255;
        $972 = (64520 + ($971<<2)|0);
        $973 = HEAP32[$972>>2]|0;
        $974 = ((($849) + ($b$114$i<<2)|0) + 2160|0);
        $975 = +HEAPF32[$974>>2];
        $976 = +HEAPF32[$805>>2];
        $977 = $975 * $976;
        $978 = (($mask_idx_s$i) + ($966)|0);
        $979 = HEAP8[$978>>0]|0;
        $980 = $979&255;
        $981 = HEAP32[$960>>2]|0;
        $982 = (($981) + ($j$215$i<<2)|0);
        $983 = +HEAPF32[$982>>2];
        $984 = ((($eb) + ($chn$292<<8)|0) + ($966<<2)|0);
        $985 = +HEAPF32[$984>>2];
        $986 = $983 * $985;
        $987 = (64440 + ($980<<2)|0);
        $988 = +HEAPF32[$987>>2];
        $989 = $986 * $988;
        $j$32$i = (($j$215$i) + 1)|0;
        $990 = ($966|0)<($968|0);
        if ($990) {
         $996 = $981;$dd$04$i = $980;$ecb$06$i = $989;$j$37$i = $j$32$i;$kk$08$in$i = $966;
         while(1) {
          $kk$08$i = (($kk$08$in$i) + 1)|0;
          $991 = (($mask_idx_s$i) + ($kk$08$i)|0);
          $992 = HEAP8[$991>>0]|0;
          $993 = $992&255;
          $994 = (($993) + ($dd$04$i))|0;
          $995 = (($996) + ($j$37$i<<2)|0);
          $997 = +HEAPF32[$995>>2];
          $998 = ((($eb) + ($chn$292<<8)|0) + ($kk$08$i<<2)|0);
          $999 = +HEAPF32[$998>>2];
          $1000 = $997 * $999;
          $1001 = (64440 + ($993<<2)|0);
          $1002 = +HEAPF32[$1001>>2];
          $1003 = $1000 * $1002;
          $1004 = (($kk$08$i) - ($b$114$i))|0;
          $1005 = $ecb$06$i < 0.0;
          $$01$i$i41 = $1005 ? 0.0 : $ecb$06$i;
          $1006 = $1003 < 0.0;
          $$02$i$i42 = $1006 ? 0.0 : $1003;
          $1007 = !($$01$i$i41 <= 0.0);
          do {
           if ($1007) {
            $1008 = !($$02$i$i42 <= 0.0);
            if (!($1008)) {
             $ecb$0$be$i43 = $$01$i$i41;
             break;
            }
            $1009 = $$02$i$i42 > $$01$i$i41;
            if ($1009) {
             $1010 = $$02$i$i42 / $$01$i$i41;
             $ratio$0$i$i46 = $1010;
            } else {
             $1011 = $$01$i$i41 / $$02$i$i42;
             $ratio$0$i$i46 = $1011;
            }
            $ispos$i$i47 = ($1004|0)>(-1);
            $neg$i$i48 = (0 - ($1004))|0;
            $1012 = $ispos$i$i47 ? $1004 : $neg$i$i48;
            $1013 = ($1012|0)>($973|0);
            if ($1013) {
             $1025 = +HEAPF32[64296>>2];
             $1026 = $ratio$0$i$i46 < $1025;
             if ($1026) {
              $1027 = $$01$i$i41 + $$02$i$i42;
              $ecb$0$be$i43 = $1027;
              break;
             } else {
              $$1$i$i49 = $1009 ? $$02$i$i42 : $$01$i$i41;
              $ecb$0$be$i43 = $$1$i$i49;
              break;
             }
            } else {
             $1014 = +HEAPF32[64288>>2];
             $1015 = !($ratio$0$i$i46 >= $1014);
             if ($1015) {
              $1017 = (+_fast_log2($ratio$0$i$i46));
              $1018 = $1017;
              $1019 = $1018 * 4.8164799306236982801;
              $1020 = (~~(($1019)));
              $1021 = $$01$i$i41 + $$02$i$i42;
              $1022 = (64480 + ($1020<<2)|0);
              $1023 = +HEAPF32[$1022>>2];
              $1024 = $1021 * $1023;
              $ecb$0$be$i43 = $1024;
              break;
             } else {
              $1016 = $$01$i$i41 + $$02$i$i42;
              $ecb$0$be$i43 = $1016;
              break;
             }
            }
           } else {
            $ecb$0$be$i43 = $$02$i$i42;
           }
          } while(0);
          $exitcond40$i = ($kk$08$i|0)==($968|0);
          if ($exitcond40$i) {
           break;
          }
          $j$3$i = (($j$37$i) + 1)|0;
          $$pre51$i = HEAP32[$960>>2]|0;
          $996 = $$pre51$i;$dd$04$i = $994;$ecb$06$i = $ecb$0$be$i43;$j$37$i = $j$3$i;$kk$08$in$i = $kk$08$i;
         }
         $1028 = (($j$32$i) - ($966))|0;
         $1029 = (($1028) + ($968))|0;
         $1030 = (1 - ($966))|0;
         $1031 = (($1030) + ($968))|0;
         $phitmp$i50 = $1031 << 1;
         $dd$0$lcssa$i54 = $994;$dd_n$0$lcssa$i53 = $phitmp$i50;$ecb$0$lcssa$i52 = $ecb$0$be$i43;$j$3$lcssa$i = $1029;
        } else {
         $dd$0$lcssa$i54 = $980;$dd_n$0$lcssa$i53 = 2;$ecb$0$lcssa$i52 = $989;$j$3$lcssa$i = $j$32$i;
        }
        $1032 = $dd$0$lcssa$i54 << 1;
        $1033 = $1032 | 1;
        $1034 = (($1033|0) / ($dd_n$0$lcssa$i53|0))&-1;
        $1035 = (64440 + ($1034<<2)|0);
        $1036 = +HEAPF32[$1035>>2];
        $1037 = $1036 * 0.5;
        $1038 = $ecb$0$lcssa$i52 * $1037;
        $1039 = ((($thr) + ($chn$292<<8)|0) + ($b$114$i<<2)|0);
        HEAPF32[$1039>>2] = $1038;
        $1040 = (((($gfc) + ($chn$292<<8)|0) + ($b$114$i<<2)|0) + 23612|0);
        $1041 = +HEAPF32[$1040>>2];
        $1042 = (((($gfc) + ($chn$292<<8)|0) + ($b$114$i<<2)|0) + 24636|0);
        HEAPF32[$1042>>2] = $1041;
        HEAPF32[$1040>>2] = $1038;
        $1043 = (($max$i) + ($b$114$i<<2)|0);
        $1044 = +HEAPF32[$1043>>2];
        $1045 = ((($849) + ($b$114$i<<2)|0) + 2416|0);
        $1046 = +HEAPF32[$1045>>2];
        $1047 = $1044 * $1046;
        $1048 = $1037 * $1047;
        $1049 = $1038 > $1048;
        if ($1049) {
         HEAPF32[$1039>>2] = $1048;
         $1052 = $1048;
        } else {
         $1052 = $1038;
        }
        $1050 = $977 > 1.0;
        if ($1050) {
         $1051 = $977 * $1052;
         HEAPF32[$1039>>2] = $1051;
         $1056 = $1051;
        } else {
         $1056 = $1052;
        }
        $1053 = ((($eb) + ($chn$292<<8)|0) + ($b$114$i<<2)|0);
        $1054 = +HEAPF32[$1053>>2];
        $1055 = $1056 > $1054;
        if ($1055) {
         HEAPF32[$1039>>2] = $1054;
         $1059 = $1054;
        } else {
         $1059 = $1056;
        }
        $1057 = $977 < 1.0;
        if ($1057) {
         $1058 = $977 * $1059;
         HEAPF32[$1039>>2] = $1058;
        }
        $962 = (($b$114$i) + 1)|0;
        $1060 = HEAP32[$850>>2]|0;
        $1061 = ($962|0)<($1060|0);
        if ($1061) {
         $b$114$i = $962;$j$215$i = $j$3$lcssa$i;
        } else {
         break;
        }
       }
       $961 = ($962|0)<(64);
       if ($961) {
        $b$21$i$ph = $962;
       } else {
        break;
       }
      } else {
       $b$21$i$ph = 0;
      }
      $scevgep138 = ((($eb) + ($chn$292<<8)|0) + ($b$21$i$ph<<2)|0);
      $963 = $b$21$i$ph << 2;
      $964 = (256 - ($963))|0;
      _memset(($scevgep138|0),0,($964|0))|0;
      $scevgep141 = ((($thr) + ($chn$292<<8)|0) + ($b$21$i$ph<<2)|0);
      _memset(($scevgep141|0),0,($964|0))|0;
     }
    } while(0);
    $1062 = (($chn$292) + 1)|0;
    $exitcond145 = ($1062|0)==($420|0);
    if ($exitcond145) {
     break;
    } else {
     $chn$292 = $1062;
    }
   }
  }
  $1063 = HEAP32[$17>>2]|0;
  $$not = ($1063|0)!=(1);
  $$not177 = ($772|0)!=($775|0);
  $brmerge = $$not | $$not177;
  if (!($brmerge)) {
   $1064 = HEAP32[$777>>2]|0;
   $1065 = (($1064) + 468|0);
   $1066 = +HEAPF32[$7>>2];
   $1067 = HEAP32[$778>>2]|0;
   _vbrpsy_compute_MS_thresholds($eb,$thr,$776,$1065,$748,$1066,$1067);
  }
  if ($419) {
   $chn$399 = 0;
   while(1) {
    $1068 = $chn$399 & 1;
    $1069 = (($uselongblock) + ($1068<<2)|0);
    $1070 = HEAP32[$1069>>2]|0;
    $1071 = ($1070|0)!=(0);
    $or$cond1 = $1071 & $779;
    if (!($or$cond1)) {
     $1072 = (($eb) + ($chn$399<<8)|0);
     $1073 = (($thr) + ($chn$399<<8)|0);
     $1074 = HEAP32[$0>>2]|0;
     $1075 = (($1074) + 2160|0);
     _convert_partition2scalefac($1075,$1072,$1073,$enn$i,$thm$i);
     $1076 = +HEAPF32[$enn$i>>2];
     $1077 = (((($gfc) + (($chn$399*244)|0)|0) + ($sblock$0102<<2)|0) + 26724|0);
     HEAPF32[$1077>>2] = $1076;
     $1078 = +HEAPF32[$thm$i>>2];
     $1079 = (((($gfc) + (($chn$399*244)|0)|0) + ($sblock$0102<<2)|0) + 25748|0);
     HEAPF32[$1079>>2] = $1078;
     $1080 = +HEAPF32[$780>>2];
     $1081 = (((($gfc) + (($chn$399*244)|0)|0) + ($sblock$0102<<2)|0) + 26736|0);
     HEAPF32[$1081>>2] = $1080;
     $1082 = +HEAPF32[$781>>2];
     $1083 = (((($gfc) + (($chn$399*244)|0)|0) + ($sblock$0102<<2)|0) + 25760|0);
     HEAPF32[$1083>>2] = $1082;
     $1084 = +HEAPF32[$782>>2];
     $1085 = (((($gfc) + (($chn$399*244)|0)|0) + ($sblock$0102<<2)|0) + 26748|0);
     HEAPF32[$1085>>2] = $1084;
     $1086 = +HEAPF32[$783>>2];
     $1087 = (((($gfc) + (($chn$399*244)|0)|0) + ($sblock$0102<<2)|0) + 25772|0);
     HEAPF32[$1087>>2] = $1086;
     $1088 = +HEAPF32[$784>>2];
     $1089 = (((($gfc) + (($chn$399*244)|0)|0) + ($sblock$0102<<2)|0) + 26760|0);
     HEAPF32[$1089>>2] = $1088;
     $1090 = +HEAPF32[$785>>2];
     $1091 = (((($gfc) + (($chn$399*244)|0)|0) + ($sblock$0102<<2)|0) + 25784|0);
     HEAPF32[$1091>>2] = $1090;
     $1092 = +HEAPF32[$786>>2];
     $1093 = (((($gfc) + (($chn$399*244)|0)|0) + ($sblock$0102<<2)|0) + 26772|0);
     HEAPF32[$1093>>2] = $1092;
     $1094 = +HEAPF32[$787>>2];
     $1095 = (((($gfc) + (($chn$399*244)|0)|0) + ($sblock$0102<<2)|0) + 25796|0);
     HEAPF32[$1095>>2] = $1094;
     $1096 = +HEAPF32[$788>>2];
     $1097 = (((($gfc) + (($chn$399*244)|0)|0) + ($sblock$0102<<2)|0) + 26784|0);
     HEAPF32[$1097>>2] = $1096;
     $1098 = +HEAPF32[$789>>2];
     $1099 = (((($gfc) + (($chn$399*244)|0)|0) + ($sblock$0102<<2)|0) + 25808|0);
     HEAPF32[$1099>>2] = $1098;
     $1100 = +HEAPF32[$790>>2];
     $1101 = (((($gfc) + (($chn$399*244)|0)|0) + ($sblock$0102<<2)|0) + 26796|0);
     HEAPF32[$1101>>2] = $1100;
     $1102 = +HEAPF32[$791>>2];
     $1103 = (((($gfc) + (($chn$399*244)|0)|0) + ($sblock$0102<<2)|0) + 25820|0);
     HEAPF32[$1103>>2] = $1102;
     $1104 = +HEAPF32[$792>>2];
     $1105 = (((($gfc) + (($chn$399*244)|0)|0) + ($sblock$0102<<2)|0) + 26808|0);
     HEAPF32[$1105>>2] = $1104;
     $1106 = +HEAPF32[$793>>2];
     $1107 = (((($gfc) + (($chn$399*244)|0)|0) + ($sblock$0102<<2)|0) + 25832|0);
     HEAPF32[$1107>>2] = $1106;
     $1108 = +HEAPF32[$794>>2];
     $1109 = (((($gfc) + (($chn$399*244)|0)|0) + ($sblock$0102<<2)|0) + 26820|0);
     HEAPF32[$1109>>2] = $1108;
     $1110 = +HEAPF32[$795>>2];
     $1111 = (((($gfc) + (($chn$399*244)|0)|0) + ($sblock$0102<<2)|0) + 25844|0);
     HEAPF32[$1111>>2] = $1110;
     $1112 = +HEAPF32[$796>>2];
     $1113 = (((($gfc) + (($chn$399*244)|0)|0) + ($sblock$0102<<2)|0) + 26832|0);
     HEAPF32[$1113>>2] = $1112;
     $1114 = +HEAPF32[$797>>2];
     $1115 = (((($gfc) + (($chn$399*244)|0)|0) + ($sblock$0102<<2)|0) + 25856|0);
     HEAPF32[$1115>>2] = $1114;
     $1116 = +HEAPF32[$798>>2];
     $1117 = (((($gfc) + (($chn$399*244)|0)|0) + ($sblock$0102<<2)|0) + 26844|0);
     HEAPF32[$1117>>2] = $1116;
     $1118 = +HEAPF32[$799>>2];
     $1119 = (((($gfc) + (($chn$399*244)|0)|0) + ($sblock$0102<<2)|0) + 25868|0);
     HEAPF32[$1119>>2] = $1118;
     $1120 = +HEAPF32[$800>>2];
     $1121 = (((($gfc) + (($chn$399*244)|0)|0) + ($sblock$0102<<2)|0) + 26856|0);
     HEAPF32[$1121>>2] = $1120;
     $1122 = +HEAPF32[$801>>2];
     $1123 = (((($gfc) + (($chn$399*244)|0)|0) + ($sblock$0102<<2)|0) + 25880|0);
     HEAPF32[$1123>>2] = $1122;
     $1124 = +HEAPF32[$802>>2];
     $1125 = (((($gfc) + (($chn$399*244)|0)|0) + ($sblock$0102<<2)|0) + 26868|0);
     HEAPF32[$1125>>2] = $1124;
     $1126 = +HEAPF32[$803>>2];
     $1127 = (((($gfc) + (($chn$399*244)|0)|0) + ($sblock$0102<<2)|0) + 25892|0);
     HEAPF32[$1127>>2] = $1126;
    }
    $1128 = (($chn$399) + 1)|0;
    $exitcond146 = ($1128|0)==($420|0);
    if ($exitcond146) {
     break;
    } else {
     $chn$399 = $1128;
    }
   }
  }
  $1129 = (($sblock$0102) + 1)|0;
  $exitcond147 = ($1129|0)==(3);
  if ($exitcond147) {
   break;
  } else {
   $sblock$0102 = $1129;
  }
 }
 if ($419) {
  $chn$486 = 0;
  while(1) {
   $1130 = ((($gfc) + ($chn$486<<2)|0) + 27780|0);
   $sb$084 = 0;
   while(1) {
    $scevgep = (((($gfc) + (($chn$486*244)|0)|0) + (($sb$084*12)|0)|0) + 25748|0);
    $1131 = (((($last_thm) + (($chn$486*244)|0)|0) + (($sb$084*12)|0)|0) + 92|0);
    $1132 = (((($last_thm) + (($chn$486*244)|0)|0) + (($sb$084*12)|0)|0) + 96|0);
    $sblock$178 = 0;
    while(1) {
     $1133 = ((((($gfc) + (($chn$486*244)|0)|0) + (($sb$084*12)|0)|0) + ($sblock$178<<2)|0) + 25748|0);
     $1134 = +HEAPF32[$1133>>2];
     $1135 = $1134;
     $1136 = $1135 * 0.800000000000000044408;
     $1137 = $1136;
     $1138 = ($sblock$178|0)>(0);
     if ($1138) {
      $1139 = (($sblock$178) + -1)|0;
      $1140 = (($new_thmm) + ($1139<<2)|0);
      $prev_thm$0$in = $1140;
     } else {
      $prev_thm$0$in = $1132;
     }
     $prev_thm$0 = +HEAPF32[$prev_thm$0$in>>2];
     $1141 = ((($ns_attacks) + ($chn$486<<4)|0) + ($sblock$178<<2)|0);
     $1142 = HEAP32[$1141>>2]|0;
     $1143 = ($1142|0)>(1);
     if ($1143) {
      label = 237;
     } else {
      $1144 = (($sblock$178) + 1)|0;
      $1145 = ((($ns_attacks) + ($chn$486<<4)|0) + ($1144<<2)|0);
      $1146 = HEAP32[$1145>>2]|0;
      $1147 = ($1146|0)==(1);
      if ($1147) {
       label = 237;
      } else {
       $t1$0 = $1137;
      }
     }
     if ((label|0) == 237) {
      label = 0;
      $1148 = $1137 > 0.0;
      if ($1148) {
       $1149 = $prev_thm$0 / $1137;
       $1150 = (+Math_pow((+$1149),0.360000014305114746094));
       $1151 = $1137 * $1150;
       $t1$0 = $1151;
      } else {
       $t1$0 = 0.0;
      }
     }
     $1152 = $t1$0 < $1137;
     $1153 = $1152 ? $t1$0 : $1137;
     $1154 = ($1142|0)==(1);
     L361: do {
      if ($1154) {
       $1155 = $1153 > 0.0;
       if (!($1155)) {
        $t2$0 = 0.0;
        break;
       }
       $1156 = $prev_thm$0 / $1153;
       $1157 = (+Math_pow((+$1156),0.180000007152557373047));
       $1158 = $1153 * $1157;
       $t2$0 = $1158;
      } else {
       $1159 = ($sblock$178|0)==(0);
       if ($1159) {
        $1160 = HEAP32[$1130>>2]|0;
        $1161 = ($1160|0)==(3);
        if ($1161) {
         label = 247;
        } else {
         label = 244;
        }
       } else {
        label = 244;
       }
       do {
        if ((label|0) == 244) {
         label = 0;
         if (!($1138)) {
          $t2$0 = $1137;
          break L361;
         }
         $1162 = (($sblock$178) + -1)|0;
         $1163 = ((($ns_attacks) + ($chn$486<<4)|0) + ($1162<<2)|0);
         $1164 = HEAP32[$1163>>2]|0;
         $1165 = ($1164|0)==(3);
         if (!($1165)) {
          $t2$0 = $1137;
          break L361;
         }
         if ((($sblock$178|0) == 1)) {
          $1167 = +HEAPF32[$1132>>2];
          $prev_thm$1 = $1167;
          break;
         } else if ((($sblock$178|0) == 2)) {
          $1168 = +HEAPF32[$new_thmm>>2];
          $prev_thm$1 = $1168;
          break;
         } else if ((($sblock$178|0) == 0)) {
          label = 247;
          break;
         } else {
          $prev_thm$1 = $prev_thm$0;
          break;
         }
        }
       } while(0);
       if ((label|0) == 247) {
        label = 0;
        $1166 = +HEAPF32[$1131>>2];
        $prev_thm$1 = $1166;
       }
       $1169 = $1153 > 0.0;
       if (!($1169)) {
        $t2$0 = 0.0;
        break;
       }
       $1170 = $prev_thm$1 / $1153;
       $1171 = (+Math_pow((+$1170),0.180000007152557373047));
       $1172 = $1153 * $1171;
       $t2$0 = $1172;
      }
     } while(0);
     $1173 = $t2$0 < $1153;
     $1174 = $1173 ? $t2$0 : $1153;
     $1175 = ((($sub_short_factor) + (($chn$486*12)|0)|0) + ($sblock$178<<2)|0);
     $1176 = +HEAPF32[$1175>>2];
     $1177 = $1176 * $1174;
     $1178 = (($new_thmm) + ($sblock$178<<2)|0);
     HEAPF32[$1178>>2] = $1177;
     $1179 = (($sblock$178) + 1)|0;
     $exitcond126 = ($1179|0)==(3);
     if ($exitcond126) {
      break;
     } else {
      $sblock$178 = $1179;
     }
    }
    ;HEAP32[$scevgep+0>>2]=HEAP32[$new_thmm+0>>2]|0;HEAP32[$scevgep+4>>2]=HEAP32[$new_thmm+4>>2]|0;HEAP32[$scevgep+8>>2]=HEAP32[$new_thmm+8>>2]|0;
    $1180 = (($sb$084) + 1)|0;
    $exitcond130 = ($1180|0)==(13);
    if ($exitcond130) {
     break;
    } else {
     $sb$084 = $1180;
    }
   }
   $1181 = (($chn$486) + 1)|0;
   $exitcond131 = ($1181|0)==($420|0);
   if ($exitcond131) {
    break;
   } else {
    $chn$486 = $1181;
   }
  }
  if ($419) {
   $chn$575 = 0;
   while(1) {
    $1182 = ((($ns_attacks) + ($chn$575<<4)|0) + 8|0);
    $1183 = HEAP32[$1182>>2]|0;
    $1184 = ((($gfc) + ($chn$575<<2)|0) + 27780|0);
    HEAP32[$1184>>2] = $1183;
    $1185 = (($chn$575) + 1)|0;
    $exitcond125 = ($1185|0)==($420|0);
    if ($exitcond125) {
     break;
    } else {
     $chn$575 = $1185;
    }
   }
  }
 }
 $1186 = HEAP32[$25>>2]|0;
 $1187 = ($1186|0)>(0);
 L385: do {
  if ($1187) {
   $1189 = $772;$chn$01$i62 = 0;
   while(1) {
    $1188 = ($1189|0)==(0);
    $1190 = ((($gfc) + ($chn$01$i62<<2)|0) + 27796|0);
    $1191 = HEAP32[$1190>>2]|0;
    do {
     if ($1188) {
      if ((($1191|0) == 0)) {
       HEAP32[$1190>>2] = 1;
       $1194 = 1;$blocktype$0$i = 2;
       break;
      } else if ((($1191|0) == 3)) {
       HEAP32[$1190>>2] = 2;
       $1194 = 2;$blocktype$0$i = 2;
       break;
      } else {
       $1194 = $1191;$blocktype$0$i = 2;
       break;
      }
     } else {
      $1192 = ($1191|0)==(2);
      $$$i64 = $1192 ? 3 : 0;
      $1194 = $1191;$blocktype$0$i = $$$i64;
     }
    } while(0);
    $1193 = (($blocktype_d) + ($chn$01$i62<<2)|0);
    HEAP32[$1193>>2] = $1194;
    HEAP32[$1190>>2] = $blocktype$0$i;
    $1195 = (($chn$01$i62) + 1)|0;
    $exitcond$i65 = ($1195|0)==($1186|0);
    if ($exitcond$i65) {
     break L385;
    }
    $$phi$trans$insert = (($uselongblock) + ($1195<<2)|0);
    $$pre = HEAP32[$$phi$trans$insert>>2]|0;
    $1189 = $$pre;$chn$01$i62 = $1195;
   }
  }
 } while(0);
 if (!($419)) {
  STACKTOP = sp;return 0;
 }
 $1196 = (($percep_MS_entropy) + -8|0);
 $1197 = (($blocktype_d) + 4|0);
 $1198 = ($1199|0)==(0|0);
 $chn$672 = 0;
 while(1) {
  $1200 = ($chn$672|0)>(1);
  if ($1200) {
   $1201 = HEAP32[$blocktype_d>>2]|0;
   $1202 = ($1201|0)==(2);
   if ($1202) {
    label = 269;
   } else {
    $1203 = HEAP32[$1197>>2]|0;
    $1204 = ($1203|0)==(2);
    if ($1204) {
     label = 269;
    } else {
     $type$0 = 0;
    }
   }
   if ((label|0) == 269) {
    label = 0;
    $type$0 = 2;
   }
   $1205 = (($chn$672) + -2)|0;
   $1206 = ((($masking_MS_ratio) + (($gr_out*976)|0)|0) + (($1205*488)|0)|0);
   $mr$0 = $1206;$ppe$0 = $1196;$type$1 = $type$0;
  } else {
   $1207 = (($blocktype_d) + ($chn$672<<2)|0);
   $1208 = HEAP32[$1207>>2]|0;
   $1209 = ((($masking_ratio) + (($gr_out*976)|0)|0) + (($chn$672*488)|0)|0);
   $mr$0 = $1209;$ppe$0 = $percep_entropy;$type$1 = $1208;
  }
  $1210 = ($type$1|0)==(2);
  $1211 = +HEAPF32[$805>>2];
  if ($1210) {
   $pe_s$04$i = 309.07000732421875;$sb$03$i = 0;
   while(1) {
    $1212 = (64392 + ($sb$03$i<<2)|0);
    $1213 = ((($mr$0) + (($sb$03$i*12)|0)|0) + 88|0);
    $1214 = +HEAPF32[$1213>>2];
    $1215 = $1214 > 0.0;
    do {
     if ($1215) {
      $1216 = $1211 * $1214;
      $1217 = ((($mr$0) + (($sb$03$i*12)|0)|0) + 332|0);
      $1218 = +HEAPF32[$1217>>2];
      $1219 = $1218 > $1216;
      if (!($1219)) {
       $pe_s$2$i = $pe_s$04$i;
       break;
      }
      $1220 = $1216 * 1.0E+10;
      $1221 = $1218 > $1220;
      $1222 = +HEAPF32[$1212>>2];
      $1223 = $1222;
      if ($1221) {
       $1224 = $1223 * 23.0258509299404607873;
       $1225 = $pe_s$04$i;
       $1226 = $1225 + $1224;
       $1227 = $1226;
       $pe_s$2$i = $1227;
       break;
      } else {
       $1228 = $1218 / $1216;
       $1229 = (+_fast_log2($1228));
       $1230 = $1229;
       $1231 = $1230 * 0.301029995663981142506;
       $1232 = $1223 * $1231;
       $1233 = $pe_s$04$i;
       $1234 = $1233 + $1232;
       $1235 = $1234;
       $pe_s$2$i = $1235;
       break;
      }
     } else {
      $pe_s$2$i = $pe_s$04$i;
     }
    } while(0);
    $1236 = ((($mr$0) + (($sb$03$i*12)|0)|0) + 92|0);
    $1237 = +HEAPF32[$1236>>2];
    $1238 = $1237 > 0.0;
    do {
     if ($1238) {
      $1239 = $1211 * $1237;
      $1240 = ((($mr$0) + (($sb$03$i*12)|0)|0) + 336|0);
      $1241 = +HEAPF32[$1240>>2];
      $1242 = $1241 > $1239;
      if (!($1242)) {
       $pe_s$2$1$i = $pe_s$2$i;
       break;
      }
      $1243 = $1239 * 1.0E+10;
      $1244 = $1241 > $1243;
      $1245 = +HEAPF32[$1212>>2];
      $1246 = $1245;
      if ($1244) {
       $1255 = $1246 * 23.0258509299404607873;
       $1256 = $pe_s$2$i;
       $1257 = $1256 + $1255;
       $1258 = $1257;
       $pe_s$2$1$i = $1258;
       break;
      } else {
       $1247 = $1241 / $1239;
       $1248 = (+_fast_log2($1247));
       $1249 = $1248;
       $1250 = $1249 * 0.301029995663981142506;
       $1251 = $1246 * $1250;
       $1252 = $pe_s$2$i;
       $1253 = $1252 + $1251;
       $1254 = $1253;
       $pe_s$2$1$i = $1254;
       break;
      }
     } else {
      $pe_s$2$1$i = $pe_s$2$i;
     }
    } while(0);
    $1259 = ((($mr$0) + (($sb$03$i*12)|0)|0) + 96|0);
    $1260 = +HEAPF32[$1259>>2];
    $1261 = $1260 > 0.0;
    do {
     if ($1261) {
      $1262 = $1211 * $1260;
      $1263 = ((($mr$0) + (($sb$03$i*12)|0)|0) + 340|0);
      $1264 = +HEAPF32[$1263>>2];
      $1265 = $1264 > $1262;
      if (!($1265)) {
       $pe_s$2$2$i = $pe_s$2$1$i;
       break;
      }
      $1266 = $1262 * 1.0E+10;
      $1267 = $1264 > $1266;
      $1268 = +HEAPF32[$1212>>2];
      $1269 = $1268;
      if ($1267) {
       $1278 = $1269 * 23.0258509299404607873;
       $1279 = $pe_s$2$1$i;
       $1280 = $1279 + $1278;
       $1281 = $1280;
       $pe_s$2$2$i = $1281;
       break;
      } else {
       $1270 = $1264 / $1262;
       $1271 = (+_fast_log2($1270));
       $1272 = $1271;
       $1273 = $1272 * 0.301029995663981142506;
       $1274 = $1269 * $1273;
       $1275 = $pe_s$2$1$i;
       $1276 = $1275 + $1274;
       $1277 = $1276;
       $pe_s$2$2$i = $1277;
       break;
      }
     } else {
      $pe_s$2$2$i = $pe_s$2$1$i;
     }
    } while(0);
    $1282 = (($sb$03$i) + 1)|0;
    $exitcond$i10 = ($1282|0)==(12);
    if ($exitcond$i10) {
     break;
    } else {
     $pe_s$04$i = $pe_s$2$2$i;$sb$03$i = $1282;
    }
   }
   $1283 = (($ppe$0) + ($chn$672<<2)|0);
   HEAPF32[$1283>>2] = $pe_s$2$2$i;
   $1311 = $pe_s$2$2$i;
  } else {
   $pe_l$02$i = 281.0574951171875;$sb$01$i = 0;
   while(1) {
    $1284 = (($mr$0) + ($sb$01$i<<2)|0);
    $1285 = +HEAPF32[$1284>>2];
    $1286 = $1285 > 0.0;
    do {
     if ($1286) {
      $1287 = $1211 * $1285;
      $1288 = ((($mr$0) + ($sb$01$i<<2)|0) + 244|0);
      $1289 = +HEAPF32[$1288>>2];
      $1290 = $1289 > $1287;
      if (!($1290)) {
       $pe_l$1$i = $pe_l$02$i;
       break;
      }
      $1291 = $1287 * 1.0E+10;
      $1292 = $1289 > $1291;
      $1293 = (64304 + ($sb$01$i<<2)|0);
      $1294 = +HEAPF32[$1293>>2];
      $1295 = $1294;
      if ($1292) {
       $1296 = $1295 * 23.0258509299404607873;
       $1297 = $pe_l$02$i;
       $1298 = $1297 + $1296;
       $1299 = $1298;
       $pe_l$1$i = $1299;
       break;
      } else {
       $1300 = $1289 / $1287;
       $1301 = (+_fast_log2($1300));
       $1302 = $1301;
       $1303 = $1302 * 0.301029995663981142506;
       $1304 = $1295 * $1303;
       $1305 = $pe_l$02$i;
       $1306 = $1305 + $1304;
       $1307 = $1306;
       $pe_l$1$i = $1307;
       break;
      }
     } else {
      $pe_l$1$i = $pe_l$02$i;
     }
    } while(0);
    $1308 = (($sb$01$i) + 1)|0;
    $exitcond$i6 = ($1308|0)==(21);
    if ($exitcond$i6) {
     break;
    } else {
     $pe_l$02$i = $pe_l$1$i;$sb$01$i = $1308;
    }
   }
   $1309 = (($ppe$0) + ($chn$672<<2)|0);
   HEAPF32[$1309>>2] = $pe_l$1$i;
   $1311 = $pe_l$1$i;
  }
  if (!($1198)) {
   $1310 = $1311;
   $1312 = (((($1199) + ($gr_out<<5)|0) + ($chn$672<<3)|0) + 189240|0);
   HEAPF64[$1312>>3] = $1310;
  }
  $1313 = (($chn$672) + 1)|0;
  $exitcond = ($1313|0)==($420|0);
  if ($exitcond) {
   break;
  } else {
   $chn$672 = $1313;
  }
 }
 STACKTOP = sp;return 0;
}
function _vbrpsy_compute_MS_thresholds($eb,$thr,$cb_mld,$ath_cb,$athlower,$msfix,$n) {
 $eb = $eb|0;
 $thr = $thr|0;
 $cb_mld = $cb_mld|0;
 $ath_cb = $ath_cb|0;
 $athlower = +$athlower;
 $msfix = +$msfix;
 $n = $n|0;
 var $0 = 0.0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0.0;
 var $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0.0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0;
 var $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0.0, $60 = 0, $61 = 0.0, $62 = 0;
 var $63 = 0.0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0.0, $8 = 0.0, $80 = 0;
 var $81 = 0.0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $b$02 = 0, $b$02$us = 0, $exitcond = 0, $exitcond3 = 0, $or$cond = 0, $or$cond$us = 0, $rmid$0 = 0.0, $rmid$0$us = 0.0, $rmid$2 = 0.0, $rmid$2$us = 0.0, $rside$0 = 0.0;
 var $rside$0$us = 0.0, $rside$2 = 0.0, $rside$2$us = 0.0, $thmM$0$us = 0.0, $thmS$0$us = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $msfix * 2.0;
 $1 = ($n|0)>(0);
 if (!($1)) {
  STACKTOP = sp;return;
 }
 $2 = $msfix > 0.0;
 if ($2) {
  $b$02$us = 0;
 } else {
  $b$02 = 0;
  while(1) {
   $58 = ((($eb) + ($b$02<<2)|0) + 512|0);
   $59 = +HEAPF32[$58>>2];
   $60 = ((($eb) + ($b$02<<2)|0) + 768|0);
   $61 = +HEAPF32[$60>>2];
   $62 = (($thr) + ($b$02<<2)|0);
   $63 = +HEAPF32[$62>>2];
   $64 = ((($thr) + ($b$02<<2)|0) + 256|0);
   $65 = +HEAPF32[$64>>2];
   $66 = ((($thr) + ($b$02<<2)|0) + 512|0);
   $67 = +HEAPF32[$66>>2];
   $68 = ((($thr) + ($b$02<<2)|0) + 768|0);
   $69 = +HEAPF32[$68>>2];
   $70 = $65 * 1.58000004291534423828;
   $71 = !($63 <= $70);
   $72 = $63 * 1.58000004291534423828;
   $73 = !($65 <= $72);
   $or$cond = $71 | $73;
   if ($or$cond) {
    $rmid$0 = $67;$rside$0 = $69;
   } else {
    $74 = (($cb_mld) + ($b$02<<2)|0);
    $75 = +HEAPF32[$74>>2];
    $76 = $61 * $75;
    $77 = $59 * $75;
    $78 = $69 < $76;
    $79 = $78 ? $69 : $76;
    $80 = $67 < $77;
    $81 = $80 ? $67 : $77;
    $82 = $67 > $79;
    $83 = $82 ? $67 : $79;
    $84 = $69 > $81;
    $85 = $84 ? $69 : $81;
    $rmid$0 = $83;$rside$0 = $85;
   }
   $86 = $rmid$0 > $59;
   $rmid$2 = $86 ? $59 : $rmid$0;
   $87 = $rside$0 > $61;
   $rside$2 = $87 ? $61 : $rside$0;
   HEAPF32[$66>>2] = $rmid$2;
   HEAPF32[$68>>2] = $rside$2;
   $88 = (($b$02) + 1)|0;
   $exitcond = ($88|0)==($n|0);
   if ($exitcond) {
    break;
   } else {
    $b$02 = $88;
   }
  }
  STACKTOP = sp;return;
 }
 while(1) {
  $3 = ((($eb) + ($b$02$us<<2)|0) + 512|0);
  $4 = +HEAPF32[$3>>2];
  $5 = ((($eb) + ($b$02$us<<2)|0) + 768|0);
  $6 = +HEAPF32[$5>>2];
  $7 = (($thr) + ($b$02$us<<2)|0);
  $8 = +HEAPF32[$7>>2];
  $9 = ((($thr) + ($b$02$us<<2)|0) + 256|0);
  $10 = +HEAPF32[$9>>2];
  $11 = ((($thr) + ($b$02$us<<2)|0) + 512|0);
  $12 = +HEAPF32[$11>>2];
  $13 = ((($thr) + ($b$02$us<<2)|0) + 768|0);
  $14 = +HEAPF32[$13>>2];
  $15 = $10 * 1.58000004291534423828;
  $16 = !($8 <= $15);
  $17 = $8 * 1.58000004291534423828;
  $18 = !($10 <= $17);
  $or$cond$us = $16 | $18;
  if ($or$cond$us) {
   $rmid$0$us = $12;$rside$0$us = $14;
  } else {
   $19 = (($cb_mld) + ($b$02$us<<2)|0);
   $20 = +HEAPF32[$19>>2];
   $21 = $6 * $20;
   $22 = $4 * $20;
   $23 = $14 < $21;
   $24 = $23 ? $14 : $21;
   $25 = $12 < $22;
   $26 = $25 ? $12 : $22;
   $27 = $12 > $24;
   $28 = $27 ? $12 : $24;
   $29 = $14 > $26;
   $30 = $29 ? $14 : $26;
   $rmid$0$us = $28;$rside$0$us = $30;
  }
  $31 = (($ath_cb) + ($b$02$us<<2)|0);
  $32 = +HEAPF32[$31>>2];
  $33 = $32 * $athlower;
  $34 = $8 > $33;
  $35 = $34 ? $8 : $33;
  $36 = $10 > $33;
  $37 = $36 ? $10 : $33;
  $38 = $rmid$0$us > $33;
  $39 = $38 ? $rmid$0$us : $33;
  $40 = $rside$0$us > $33;
  $41 = $40 ? $rside$0$us : $33;
  $42 = $39 + $41;
  $43 = $42 > 0.0;
  if ($43) {
   $44 = $35 < $37;
   $45 = $44 ? $35 : $37;
   $46 = $0 * $45;
   $47 = $46 < $42;
   if ($47) {
    $48 = $46 / $42;
    $49 = $39 * $48;
    $50 = $41 * $48;
    $thmM$0$us = $49;$thmS$0$us = $50;
   } else {
    $thmM$0$us = $39;$thmS$0$us = $41;
   }
  } else {
   $thmM$0$us = $39;$thmS$0$us = $41;
  }
  $51 = $thmM$0$us < $rmid$0$us;
  $52 = $51 ? $thmM$0$us : $rmid$0$us;
  $53 = $thmS$0$us < $rside$0$us;
  $54 = $53 ? $thmS$0$us : $rside$0$us;
  $55 = $52 > $4;
  $rmid$2$us = $55 ? $4 : $52;
  $56 = $54 > $6;
  $rside$2$us = $56 ? $6 : $54;
  HEAPF32[$11>>2] = $rmid$2$us;
  HEAPF32[$13>>2] = $rside$2$us;
  $57 = (($b$02$us) + 1)|0;
  $exitcond3 = ($57|0)==($n|0);
  if ($exitcond3) {
   break;
  } else {
   $b$02$us = $57;
  }
 }
 STACKTOP = sp;return;
}
function _psymodel_init($gfp) {
 $gfp = $gfp|0;
 var $$ = 0.0, $$0 = 0, $$lcssa50 = 0, $$x$3 = 0.0, $$x1$5 = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0.0;
 var $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0.0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0;
 var $148 = 0.0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0;
 var $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0;
 var $184 = 0.0, $185 = 0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0.0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0, $2 = 0, $20 = 0, $200 = 0.0;
 var $201 = 0.0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0.0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0, $250 = 0.0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0.0, $255 = 0;
 var $256 = 0, $257 = 0.0, $258 = 0, $259 = 0.0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0.0, $264 = 0, $265 = 0.0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0.0, $277 = 0.0, $278 = 0, $279 = 0, $28 = 0, $280 = 0.0, $281 = 0, $282 = 0.0, $283 = 0, $284 = 0, $285 = 0.0, $286 = 0.0, $287 = 0.0, $288 = 0.0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0.0, $294 = 0.0, $295 = 0.0, $296 = 0.0, $297 = 0.0, $298 = 0.0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0.0, $313 = 0.0, $314 = 0.0, $315 = 0.0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0;
 var $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0.0, $b$036 = 0, $b$3$lcssa109 = 0, $b$39 = 0, $b$47 = 0, $b$5$lcssa110 = 0, $b$54 = 0, $b$62 = 0, $bval = 0, $bval_width = 0, $eql_balance$034 = 0.0, $exitcond = 0, $exitcond101 = 0, $exitcond102 = 0;
 var $exitcond104 = 0, $exitcond106 = 0, $exitcond92 = 0, $exitcond97 = 0, $freq5$033 = 0.0, $i$089 = 0, $i$174 = 0, $i$270 = 0, $i$352 = 0, $i$435 = 0, $i$532 = 0, $j$081 = 0, $j$187 = 0, $j$369 = 0, $j$4$lcssa = 0, $j$462 = 0, $j$551 = 0, $j$6$lcssa = 0, $j$642 = 0, $k$060 = 0;
 var $k$140 = 0, $msfix$0 = 0.0, $norm = 0, $phitmp = 0, $phitmp1 = 0.0, $phitmp90 = 0.0, $phitmp91 = 0.0, $sb$083 = 0, $sk_s$0 = 0.0, $snr2$0 = 0.0, $x$0$lcssa = 0.0, $x$061 = 0.0, $x$1 = 0.0, $x$2 = 0.0, $x$3 = 0.0, $x1$0$lcssa = 0.0, $x1$041 = 0.0, $x1$1 = 0.0, $x1$2 = 0.0, $x1$3 = 0.0;
 var $x1$4 = 0.0, $x1$5 = 0.0, $x6$0 = 0.0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 768|0;
 $bval = sp + 512|0;
 $bval_width = sp + 256|0;
 $norm = sp;
 $0 = (($gfp) + 288|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 16|0);
 $3 = (($1) + 64|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (+($4|0));
 $6 = (($1) + 280|0);
 $7 = +HEAPF32[$6>>2];
 $8 = -$7;
 $9 = (($1) + 85800|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 if (!($11)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 _memset(($norm|0),0,256)|0;
 $12 = (_calloc(1,6504)|0);
 HEAP32[$9>>2] = $12;
 $13 = (($gfp) + 144|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($12) + 6500|0);
 HEAP32[$15>>2] = $14;
 $16 = (($1) + 27800|0);
 HEAP32[$16>>2] = 0;
 $17 = (($1) + 27796|0);
 HEAP32[$17>>2] = 0;
 $i$089 = 0;
 while(1) {
  $j$081 = 0;
  while(1) {
   $18 = (((($1) + ($i$089<<8)|0) + ($j$081<<2)|0) + 21564|0);
   HEAPF32[$18>>2] = 100000002004087734272.0;
   $19 = (((($1) + ($i$089<<8)|0) + ($j$081<<2)|0) + 22588|0);
   HEAPF32[$19>>2] = 100000002004087734272.0;
   $20 = (((($1) + ($i$089<<8)|0) + ($j$081<<2)|0) + 24636|0);
   HEAPF32[$20>>2] = 1.0;
   $21 = (((($1) + ($i$089<<8)|0) + ($j$081<<2)|0) + 23612|0);
   HEAPF32[$21>>2] = 1.0;
   $22 = (($j$081) + 1)|0;
   $exitcond101 = ($22|0)==(64);
   if ($exitcond101) {
    $sb$083 = 0;
    break;
   } else {
    $j$081 = $22;
   }
  }
  while(1) {
   $23 = (((($1) + (($i$089*244)|0)|0) + ($sb$083<<2)|0) + 26636|0);
   HEAPF32[$23>>2] = 100000002004087734272.0;
   $24 = (((($1) + (($i$089*244)|0)|0) + ($sb$083<<2)|0) + 25660|0);
   HEAPF32[$24>>2] = 100000002004087734272.0;
   $25 = (($sb$083) + 1)|0;
   $exitcond102 = ($25|0)==(22);
   if ($exitcond102) {
    break;
   } else {
    $sb$083 = $25;
   }
  }
  $26 = ((($1) + ($i$089<<2)|0) + 27780|0);
  $j$187 = 0;
  while(1) {
   $27 = (((($1) + (($i$089*244)|0)|0) + ($j$187<<2)|0) + 26724|0);
   HEAPF32[$27>>2] = 100000002004087734272.0;
   $28 = (((($1) + (($i$089*244)|0)|0) + ($j$187<<2)|0) + 25748|0);
   HEAPF32[$28>>2] = 100000002004087734272.0;
   $29 = (((($1) + (($i$089*244)|0)|0) + ($j$187<<2)|0) + 26736|0);
   HEAPF32[$29>>2] = 100000002004087734272.0;
   $30 = (((($1) + (($i$089*244)|0)|0) + ($j$187<<2)|0) + 25760|0);
   HEAPF32[$30>>2] = 100000002004087734272.0;
   $31 = (((($1) + (($i$089*244)|0)|0) + ($j$187<<2)|0) + 26748|0);
   HEAPF32[$31>>2] = 100000002004087734272.0;
   $32 = (((($1) + (($i$089*244)|0)|0) + ($j$187<<2)|0) + 25772|0);
   HEAPF32[$32>>2] = 100000002004087734272.0;
   $33 = (((($1) + (($i$089*244)|0)|0) + ($j$187<<2)|0) + 26760|0);
   HEAPF32[$33>>2] = 100000002004087734272.0;
   $34 = (((($1) + (($i$089*244)|0)|0) + ($j$187<<2)|0) + 25784|0);
   HEAPF32[$34>>2] = 100000002004087734272.0;
   $35 = (((($1) + (($i$089*244)|0)|0) + ($j$187<<2)|0) + 26772|0);
   HEAPF32[$35>>2] = 100000002004087734272.0;
   $36 = (((($1) + (($i$089*244)|0)|0) + ($j$187<<2)|0) + 25796|0);
   HEAPF32[$36>>2] = 100000002004087734272.0;
   $37 = (((($1) + (($i$089*244)|0)|0) + ($j$187<<2)|0) + 26784|0);
   HEAPF32[$37>>2] = 100000002004087734272.0;
   $38 = (((($1) + (($i$089*244)|0)|0) + ($j$187<<2)|0) + 25808|0);
   HEAPF32[$38>>2] = 100000002004087734272.0;
   $39 = (((($1) + (($i$089*244)|0)|0) + ($j$187<<2)|0) + 26796|0);
   HEAPF32[$39>>2] = 100000002004087734272.0;
   $40 = (((($1) + (($i$089*244)|0)|0) + ($j$187<<2)|0) + 25820|0);
   HEAPF32[$40>>2] = 100000002004087734272.0;
   $41 = (((($1) + (($i$089*244)|0)|0) + ($j$187<<2)|0) + 26808|0);
   HEAPF32[$41>>2] = 100000002004087734272.0;
   $42 = (((($1) + (($i$089*244)|0)|0) + ($j$187<<2)|0) + 25832|0);
   HEAPF32[$42>>2] = 100000002004087734272.0;
   $43 = (((($1) + (($i$089*244)|0)|0) + ($j$187<<2)|0) + 26820|0);
   HEAPF32[$43>>2] = 100000002004087734272.0;
   $44 = (((($1) + (($i$089*244)|0)|0) + ($j$187<<2)|0) + 25844|0);
   HEAPF32[$44>>2] = 100000002004087734272.0;
   $45 = (((($1) + (($i$089*244)|0)|0) + ($j$187<<2)|0) + 26832|0);
   HEAPF32[$45>>2] = 100000002004087734272.0;
   $46 = (((($1) + (($i$089*244)|0)|0) + ($j$187<<2)|0) + 25856|0);
   HEAPF32[$46>>2] = 100000002004087734272.0;
   $47 = (((($1) + (($i$089*244)|0)|0) + ($j$187<<2)|0) + 26844|0);
   HEAPF32[$47>>2] = 100000002004087734272.0;
   $48 = (((($1) + (($i$089*244)|0)|0) + ($j$187<<2)|0) + 25868|0);
   HEAPF32[$48>>2] = 100000002004087734272.0;
   $49 = (((($1) + (($i$089*244)|0)|0) + ($j$187<<2)|0) + 26856|0);
   HEAPF32[$49>>2] = 100000002004087734272.0;
   $50 = (((($1) + (($i$089*244)|0)|0) + ($j$187<<2)|0) + 25880|0);
   HEAPF32[$50>>2] = 100000002004087734272.0;
   $51 = (((($1) + (($i$089*244)|0)|0) + ($j$187<<2)|0) + 26868|0);
   HEAPF32[$51>>2] = 100000002004087734272.0;
   $52 = (((($1) + (($i$089*244)|0)|0) + ($j$187<<2)|0) + 25892|0);
   HEAPF32[$52>>2] = 100000002004087734272.0;
   HEAP32[$26>>2] = 0;
   $53 = (($j$187) + 1)|0;
   $exitcond104 = ($53|0)==(3);
   if ($exitcond104) {
    break;
   } else {
    $j$187 = $53;
   }
  }
  $54 = ((($1) + (($i$089*36)|0)|0) + 27636|0);
  HEAPF32[$54>>2] = 10.0;
  $55 = ((($1) + (($i$089*36)|0)|0) + 27640|0);
  HEAPF32[$55>>2] = 10.0;
  $56 = ((($1) + (($i$089*36)|0)|0) + 27644|0);
  HEAPF32[$56>>2] = 10.0;
  $57 = ((($1) + (($i$089*36)|0)|0) + 27648|0);
  HEAPF32[$57>>2] = 10.0;
  $58 = ((($1) + (($i$089*36)|0)|0) + 27652|0);
  HEAPF32[$58>>2] = 10.0;
  $59 = ((($1) + (($i$089*36)|0)|0) + 27656|0);
  HEAPF32[$59>>2] = 10.0;
  $60 = ((($1) + (($i$089*36)|0)|0) + 27660|0);
  HEAPF32[$60>>2] = 10.0;
  $61 = ((($1) + (($i$089*36)|0)|0) + 27664|0);
  HEAPF32[$61>>2] = 10.0;
  $62 = ((($1) + (($i$089*36)|0)|0) + 27668|0);
  HEAPF32[$62>>2] = 10.0;
  $63 = (($i$089) + 1)|0;
  $exitcond106 = ($63|0)==(4);
  if ($exitcond106) {
   break;
  } else {
   $i$089 = $63;
  }
 }
 $64 = (($1) + 27616|0);
 HEAPF32[$64>>2] = 0.0;
 $65 = (($1) + 27612|0);
 HEAPF32[$65>>2] = 0.0;
 $66 = (($1) + 21360|0);
 _init_numline($12,$5,1024,576,22,$66);
 _compute_bark_values($12,$5,1024,$bval,$bval_width);
 $67 = (($12) + 2148|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = ($68|0)>(0);
 if ($69) {
  $i$174 = 0;
  while(1) {
   $70 = (($norm) + ($i$174<<2)|0);
   HEAPF32[$70>>2] = 1.0;
   $71 = (($i$174) + 1)|0;
   $72 = ($71|0)<($68|0);
   if ($72) {
    $i$174 = $71;
   } else {
    break;
   }
  }
 }
 $73 = (($12) + 2156|0);
 $74 = (($12) + 1204|0);
 $75 = (_init_s3_values($73,$74,$68,$bval,$bval_width,$norm)|0);
 $76 = ($75|0)==(0);
 if (!($76)) {
  $$0 = $75;
  STACKTOP = sp;return ($$0|0);
 }
 $77 = HEAP32[$67>>2]|0;
 $78 = ($77|0)>(0);
 if ($78) {
  $79 = (($12) + 1716|0);
  $80 = (($1) + 85796|0);
  $81 = $8;
  $82 = (($12) + 256|0);
  $i$270 = 0;$j$369 = 0;
  while(1) {
   $83 = (($79) + ($i$270<<2)|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = ($84|0)>(0);
   if ($85) {
    $j$462 = $j$369;$k$060 = 0;$x$061 = 9.99999999999999953876E+36;
    while(1) {
     $86 = (+($j$462|0));
     $87 = $5 * $86;
     $88 = $87;
     $89 = $88 * 9.76562500000000020328E-7;
     $90 = $89;
     $91 = $90 * 1000.0;
     $92 = (+_ATHformula($2,$91));
     $93 = $92 + -20.0;
     $94 = $93;
     $95 = $94 * 0.100000000000000005551;
     $96 = (+Math_pow(10.0,(+$95)));
     $97 = $96;
     $98 = HEAP32[$83>>2]|0;
     $99 = (+($98|0));
     $100 = $97 * $99;
     $101 = $100;
     $102 = $x$061 > $101;
     $x$1 = $102 ? $101 : $x$061;
     $103 = (($k$060) + 1)|0;
     $104 = (($j$462) + 1)|0;
     $105 = ($103|0)<($98|0);
     if ($105) {
      $j$462 = $104;$k$060 = $103;$x$061 = $x$1;
     } else {
      break;
     }
    }
    $phitmp91 = $x$1;
    $122 = $98;$j$4$lcssa = $104;$x$0$lcssa = $phitmp91;
   } else {
    $122 = $84;$j$4$lcssa = $j$369;$x$0$lcssa = 9.99999993381581251071E+36;
   }
   $106 = HEAP32[$80>>2]|0;
   $107 = ((($106) + ($i$270<<2)|0) + 212|0);
   HEAPF32[$107>>2] = $x$0$lcssa;
   $108 = (($bval) + ($i$270<<2)|0);
   $109 = +HEAPF32[$108>>2];
   $110 = $109 * 0.100000001490116119385;
   $111 = $110;
   $112 = $111 + -1.0;
   $113 = $112 * 20.0;
   $114 = $113 > 6.0;
   $x$2 = $114 ? 30.0 : $113;
   $115 = $x$2 < $81;
   $x$3 = $115 ? $81 : $x$2;
   $116 = HEAP32[$3>>2]|0;
   $117 = ($116|0)<(44000);
   $$x$3 = $117 ? 30.0 : $x$3;
   $118 = $$x$3 + -8.0;
   $119 = $118 * 0.100000000000000005551;
   $120 = (+Math_pow(10.0,(+$119)));
   $121 = (+($122|0));
   $123 = $120 * $121;
   $124 = $123;
   $125 = (($82) + ($i$270<<2)|0);
   HEAPF32[$125>>2] = $124;
   $126 = (($i$270) + 1)|0;
   $127 = HEAP32[$67>>2]|0;
   $128 = ($126|0)<($127|0);
   if ($128) {
    $i$270 = $126;$j$369 = $j$4$lcssa;
   } else {
    break;
   }
  }
 }
 $129 = (($12) + 2160|0);
 $130 = (($1) + 21452|0);
 _init_numline($129,$5,256,192,13,$130);
 _compute_bark_values($129,$5,256,$bval,$bval_width);
 $131 = (($12) + 4308|0);
 $132 = HEAP32[$131>>2]|0;
 $133 = ($132|0)>(0);
 if ($133) {
  $134 = (($12) + 3876|0);
  $135 = (($1) + 85796|0);
  $136 = $8;
  $137 = (($12) + 2416|0);
  $i$352 = 0;$j$551 = 0;
  while(1) {
   $138 = (($bval) + ($i$352<<2)|0);
   $139 = +HEAPF32[$138>>2];
   $140 = !($139 >= 13.0);
   if ($140) {
    $snr2$0 = -0.825000000000000066613;
   } else {
    $141 = $139 + -13.0;
    $142 = $141 * -0.409090906381607055664;
    $143 = 24.0 - $139;
    $144 = $143 * -0.75;
    $145 = $142 + $144;
    $146 = $145;
    $phitmp1 = $146 * 0.100000000000000005551;
    $snr2$0 = $phitmp1;
   }
   $147 = (+Math_pow(10.0,(+$snr2$0)));
   $148 = $147;
   $149 = (($norm) + ($i$352<<2)|0);
   HEAPF32[$149>>2] = $148;
   $150 = (($134) + ($i$352<<2)|0);
   $151 = HEAP32[$150>>2]|0;
   $152 = ($151|0)>(0);
   if ($152) {
    $j$642 = $j$551;$k$140 = 0;$x1$041 = 9.99999999999999953876E+36;
    while(1) {
     $153 = (+($j$642|0));
     $154 = $5 * $153;
     $155 = $154;
     $156 = $155 * 3.90625000000000008132E-6;
     $157 = $156;
     $158 = $157 * 1000.0;
     $159 = (+_ATHformula($2,$158));
     $160 = $159 + -20.0;
     $161 = $160;
     $162 = $161 * 0.100000000000000005551;
     $163 = (+Math_pow(10.0,(+$162)));
     $164 = $163;
     $165 = HEAP32[$150>>2]|0;
     $166 = (+($165|0));
     $167 = $164 * $166;
     $168 = $167;
     $169 = $x1$041 > $168;
     $x1$1 = $169 ? $168 : $x1$041;
     $170 = (($k$140) + 1)|0;
     $171 = (($j$642) + 1)|0;
     $172 = ($170|0)<($165|0);
     if ($172) {
      $j$642 = $171;$k$140 = $170;$x1$041 = $x1$1;
     } else {
      break;
     }
    }
    $phitmp90 = $x1$1;
    $199 = $165;$j$6$lcssa = $171;$x1$0$lcssa = $phitmp90;
   } else {
    $199 = $151;$j$6$lcssa = $j$551;$x1$0$lcssa = 9.99999993381581251071E+36;
   }
   $173 = HEAP32[$135>>2]|0;
   $174 = ((($173) + ($i$352<<2)|0) + 468|0);
   HEAPF32[$174>>2] = $x1$0$lcssa;
   $175 = $139 * 0.0833333358168601989746;
   $176 = $175;
   $177 = $176 + -1.0;
   $178 = $177 * 7.0;
   $179 = $139 > 12.0;
   if ($179) {
    $180 = $178 + 1.0;
    $181 = (+Math_log((+$180)));
    $182 = $181 * 3.10000000000000008882;
    $183 = $182 + 1.0;
    $184 = $178 * $183;
    $x1$2 = $184;
   } else {
    $x1$2 = $178;
   }
   $185 = $139 < 12.0;
   if ($185) {
    $186 = 1.0 - $x1$2;
    $187 = (+Math_log((+$186)));
    $188 = $187 * 2.29999999999999982236;
    $189 = $188 + 1.0;
    $190 = $x1$2 * $189;
    $x1$3 = $190;
   } else {
    $x1$3 = $x1$2;
   }
   $191 = $x1$3 > 6.0;
   $x1$4 = $191 ? 30.0 : $x1$3;
   $192 = $x1$4 < $136;
   $x1$5 = $192 ? $136 : $x1$4;
   $193 = HEAP32[$3>>2]|0;
   $194 = ($193|0)<(44000);
   $$x1$5 = $194 ? 30.0 : $x1$5;
   $195 = $$x1$5 + -8.0;
   $196 = $195 * 0.100000000000000005551;
   $197 = (+Math_pow(10.0,(+$196)));
   $198 = (+($199|0));
   $200 = $197 * $198;
   $201 = $200;
   $202 = (($137) + ($i$352<<2)|0);
   HEAPF32[$202>>2] = $201;
   $203 = (($i$352) + 1)|0;
   $204 = HEAP32[$131>>2]|0;
   $205 = ($203|0)<($204|0);
   if ($205) {
    $i$352 = $203;$j$551 = $j$6$lcssa;
   } else {
    $$lcssa50 = $204;
    break;
   }
  }
 } else {
  $$lcssa50 = $132;
 }
 $206 = (($12) + 4316|0);
 $207 = (($12) + 3364|0);
 $208 = (_init_s3_values($206,$207,$$lcssa50,$bval,$bval_width,$norm)|0);
 $209 = ($208|0)==(0);
 if (!($209)) {
  $$0 = $208;
  STACKTOP = sp;return ($$0|0);
 }
 HEAPF32[64288>>2] = 3.65174126625061035156;
 HEAPF32[64296>>2] = 31.622776031494140625;
 _init_fft($1);
 $210 = $5;
 $211 = -44209.6337854856756167 / $210;
 $212 = (+Math_exp((+$211)));
 $213 = $212;
 $214 = (($12) + 6496|0);
 HEAPF32[$214>>2] = $213;
 $215 = (($1) + 96|0);
 $216 = HEAP32[$215>>2]|0;
 $217 = ($216|0)!=(0);
 $$ = $217 ? 1.0 : 3.5;
 $218 = (($1) + 192|0);
 $219 = +HEAPF32[$218>>2];
 $220 = ($219 != $219) | (0.0 != 0.0) |($219 == 0.0);
 $msfix$0 = $220 ? $$ : $219;
 HEAPF32[$218>>2] = $msfix$0;
 $221 = HEAP32[$67>>2]|0;
 $222 = ($221|0)>(0);
 if ($222) {
  $b$036 = 0;
  while(1) {
   $223 = ((($74) + ($b$036<<3)|0) + 4|0);
   $224 = HEAP32[$223>>2]|0;
   $225 = (($221) + -1)|0;
   $226 = ($224|0)>($225|0);
   if ($226) {
    HEAP32[$223>>2] = $225;
   }
   $227 = (($b$036) + 1)|0;
   $228 = ($227|0)<($221|0);
   if ($228) {
    $b$036 = $227;
   } else {
    break;
   }
  }
 }
 $229 = (($1) + 76|0);
 $230 = HEAP32[$229>>2]|0;
 $231 = (+($230|0));
 $232 = $231 * 576.0;
 $233 = $232 / $210;
 $234 = $233 * -1.19999999999999995559;
 $235 = (+Math_pow(10.0,(+$234)));
 $236 = $235;
 $237 = (($1) + 85796|0);
 $238 = HEAP32[$237>>2]|0;
 $239 = (($238) + 16|0);
 HEAPF32[$239>>2] = $236;
 $240 = (($238) + 8|0);
 HEAPF32[$240>>2] = 0.00999999977648258209228;
 $241 = (($238) + 12|0);
 HEAPF32[$241>>2] = 1.0;
 $242 = (($1) + 208|0);
 $243 = HEAP32[$242>>2]|0;
 $244 = ($243|0)==(-1);
 if (!($244)) {
  $245 = HEAP32[$3>>2]|0;
  $246 = (+($245|0));
  $247 = $246 * 9.765625E-4;
  $eql_balance$034 = 0.0;$freq5$033 = 0.0;$i$435 = 0;
  while(1) {
   $248 = $247 + $freq5$033;
   $249 = (+_ATHformula($2,$248));
   $250 = $249 * 0.100000001490116119385;
   $251 = $250;
   $252 = (+Math_pow(10.0,(+$251)));
   $253 = 1.0 / $252;
   $254 = $253;
   $255 = HEAP32[$237>>2]|0;
   $256 = ((($255) + ($i$435<<2)|0) + 724|0);
   HEAPF32[$256>>2] = $254;
   $257 = $eql_balance$034 + $254;
   $258 = (($i$435) + 1)|0;
   $exitcond97 = ($258|0)==(512);
   if ($exitcond97) {
    break;
   } else {
    $eql_balance$034 = $257;$freq5$033 = $248;$i$435 = $258;
   }
  }
  $259 = 1.0 / $257;
  $i$532 = 511;
  while(1) {
   $275 = ((($255) + ($i$532<<2)|0) + 724|0);
   $276 = +HEAPF32[$275>>2];
   $277 = $259 * $276;
   HEAPF32[$275>>2] = $277;
   $phitmp = (($i$532) + -1)|0;
   $278 = ($phitmp|0)>(-1);
   if ($278) {
    $i$532 = $phitmp;
   } else {
    break;
   }
  }
 }
 $260 = HEAP32[$131>>2]|0;
 $261 = ($260|0)>(0);
 $262 = (($gfp) + 264|0);
 $263 = +HEAPF32[$262>>2];
 $264 = (($gfp) + 268|0);
 $265 = +HEAPF32[$264>>2];
 $266 = $263 < 0.0;
 $x6$0 = $266 ? 4.40000009536743164063 : $263;
 $267 = $265 < 0.0;
 $y$0 = $267 ? 25.0 : $265;
 $268 = (($12) + 6480|0);
 $269 = (($12) + 6488|0);
 HEAPF32[$269>>2] = $x6$0;
 $270 = (($12) + 6484|0);
 HEAPF32[$270>>2] = $x6$0;
 HEAPF32[$268>>2] = $x6$0;
 $271 = (($12) + 6492|0);
 HEAPF32[$271>>2] = $y$0;
 $272 = (($gfp) + 164|0);
 $273 = HEAP32[$272>>2]|0;
 $274 = ($273|0)<(4);
 if ($274) {
  $sk_s$0 = -7.40000009536743164063;
 } else {
  $279 = (64240 + ($273<<2)|0);
  $280 = +HEAPF32[$279>>2];
  $281 = (($gfp) + 160|0);
  $282 = +HEAPF32[$281>>2];
  $283 = (($273) + 1)|0;
  $284 = (64240 + ($283<<2)|0);
  $285 = +HEAPF32[$284>>2];
  $286 = $280 - $285;
  $287 = $282 * $286;
  $288 = $280 + $287;
  $sk_s$0 = $288;
 }
 if ($261) {
  $292 = $260;$b$39 = 0;
  while(1) {
   $291 = (($292) - ($b$39))|0;
   $293 = (+($291|0));
   $294 = (+($292|0));
   $295 = $293 / $294;
   $296 = $sk_s$0 * $295;
   $297 = $296 * 0.100000001490116119385;
   $298 = (+Math_pow(10.0,(+$297)));
   $299 = (($129) + ($b$39<<2)|0);
   HEAPF32[$299>>2] = $298;
   $290 = (($b$39) + 1)|0;
   $300 = HEAP32[$131>>2]|0;
   $301 = ($290|0)<($300|0);
   if ($301) {
    $292 = $300;$b$39 = $290;
   } else {
    break;
   }
  }
  $289 = ($290|0)<(64);
  if ($289) {
   $b$3$lcssa109 = $290;
   label = 45;
  }
 } else {
  $b$3$lcssa109 = 0;
  label = 45;
 }
 if ((label|0) == 45) {
  $b$47 = $b$3$lcssa109;
  while(1) {
   $304 = (($129) + ($b$47<<2)|0);
   HEAPF32[$304>>2] = 1.0;
   $305 = (($b$47) + 1)|0;
   $exitcond92 = ($305|0)==(64);
   if ($exitcond92) {
    break;
   } else {
    $b$47 = $305;
   }
  }
 }
 $302 = HEAP32[$67>>2]|0;
 $303 = ($302|0)>(0);
 if ($303) {
  $309 = $302;$b$54 = 0;
  while(1) {
   $308 = (($309) - ($b$54))|0;
   $310 = (+($308|0));
   $311 = (+($309|0));
   $312 = $310 / $311;
   $313 = $sk_s$0 * $312;
   $314 = $313 * 0.100000001490116119385;
   $315 = (+Math_pow(10.0,(+$314)));
   $316 = (($12) + ($b$54<<2)|0);
   HEAPF32[$316>>2] = $315;
   $307 = (($b$54) + 1)|0;
   $317 = HEAP32[$67>>2]|0;
   $318 = ($307|0)<($317|0);
   if ($318) {
    $309 = $317;$b$54 = $307;
   } else {
    break;
   }
  }
  $306 = ($307|0)<(64);
  if ($306) {
   $b$5$lcssa110 = $307;
   label = 51;
  }
 } else {
  $b$5$lcssa110 = 0;
  label = 51;
 }
 if ((label|0) == 51) {
  $b$62 = $b$5$lcssa110;
  while(1) {
   $319 = (($12) + ($b$62<<2)|0);
   HEAPF32[$319>>2] = 1.0;
   $320 = (($b$62) + 1)|0;
   $exitcond = ($320|0)==(64);
   if ($exitcond) {
    break;
   } else {
    $b$62 = $320;
   }
  }
 }
 $321 = (($12) + 4320|0);
 _memcpy(($321|0),($12|0),2160)|0;
 _init_numline($321,$5,1024,192,13,$130);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _init_numline($gd,$sfreq,$fft_size,$mdct_size,$sbmax,$scalepos) {
 $gd = $gd|0;
 $sfreq = +$sfreq;
 $fft_size = $fft_size|0;
 $mdct_size = $mdct_size|0;
 $sbmax = $sbmax|0;
 $scalepos = $scalepos|0;
 var $$ = 0, $$1 = 0, $$op$i = 0.0, $$op$i2 = 0.0, $$op$op$i = 0.0, $$op$op$i3 = 0.0, $0 = 0.0, $1 = 0.0, $10 = 0.0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0.0, $11 = 0;
 var $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0;
 var $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0.0;
 var $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0;
 var $97 = 0, $98 = 0.0, $99 = 0.0, $b_frq = 0, $bo_w$0 = 0.0, $exitcond = 0, $exitcond17 = 0, $exitcond19 = 0, $i$29 = 0, $i$36 = 0, $j$0 = 0, $j$1$lcssa = 0, $j$112 = 0, $j$2 = 0, $j$38 = 0, $j2$0 = 0, $ni$0 = 0, $ni$1 = 0, $or$cond = 0, $partition = 0;
 var $sfb$04 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2320|0;
 $b_frq = sp + 2052|0;
 $partition = sp;
 $0 = (+($mdct_size|0));
 $1 = $0 * 2.0;
 $2 = $sfreq / $1;
 $3 = (+($fft_size|0));
 $4 = $3 / $1;
 _memset(($partition|0),0,2052)|0;
 $5 = $sfreq / $3;
 $6 = (($fft_size|0) / 2)&-1;
 $j$0 = 0;$ni$0 = 0;
 while(1) {
  $7 = ($ni$0|0)<(64);
  if (!($7)) {
   $j$2 = $j$0;$ni$1 = $ni$0;
   break;
  }
  $8 = (+($j$0|0));
  $9 = $5 * $8;
  $10 = (+_freq2bark($9));
  $11 = (($b_frq) + ($ni$0<<2)|0);
  HEAPF32[$11>>2] = $9;
  $j2$0 = $j$0;
  while(1) {
   $12 = (+($j2$0|0));
   $13 = $5 * $12;
   $14 = (+_freq2bark($13));
   $15 = $14 - $10;
   $16 = $15;
   $17 = !($16 < 0.340000000000000024425);
   $18 = ($j2$0|0)>($6|0);
   $or$cond = $17 | $18;
   $19 = (($j2$0) + 1)|0;
   if ($or$cond) {
    break;
   } else {
    $j2$0 = $19;
   }
  }
  $20 = (($j2$0) - ($j$0))|0;
  $21 = ((($gd) + ($ni$0<<2)|0) + 1716|0);
  HEAP32[$21>>2] = $20;
  $22 = ($20|0)>(0);
  if ($22) {
   $23 = (+($20|0));
   $24 = 1.0 / $23;
   $26 = $24;
  } else {
   $26 = 0.0;
  }
  $25 = ((($gd) + ($ni$0<<2)|0) + 512|0);
  HEAPF32[$25>>2] = $26;
  $27 = (($ni$0) + 1)|0;
  $28 = ($j$0|0)<($j2$0|0);
  if ($28) {
   $j$112 = $j$0;
   while(1) {
    $29 = (($j$112) + 1)|0;
    $30 = (($partition) + ($j$112<<2)|0);
    HEAP32[$30>>2] = $ni$0;
    $exitcond19 = ($29|0)==($j2$0|0);
    if ($exitcond19) {
     $j$1$lcssa = $j2$0;
     break;
    } else {
     $j$112 = $29;
    }
   }
  } else {
   $j$1$lcssa = $j$0;
  }
  $31 = ($j$1$lcssa|0)>($6|0);
  if ($31) {
   $j$2 = $6;$ni$1 = $27;
   break;
  } else {
   $j$0 = $j$1$lcssa;$ni$0 = $27;
  }
 }
 $32 = (+($j$2|0));
 $33 = $5 * $32;
 $34 = (($b_frq) + ($ni$1<<2)|0);
 HEAPF32[$34>>2] = $33;
 $35 = (($gd) + 2152|0);
 HEAP32[$35>>2] = $sbmax;
 $36 = (($gd) + 2148|0);
 HEAP32[$36>>2] = $ni$1;
 $37 = ($ni$1|0)>(0);
 if ($37) {
  $i$29 = 0;$j$38 = 0;
  while(1) {
   $40 = ((($gd) + ($i$29<<2)|0) + 1716|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (($41|0) / 2)&-1;
   $43 = (($42) + ($j$38))|0;
   $44 = (+($43|0));
   $45 = $5 * $44;
   $46 = (+_freq2bark($45));
   $47 = $46;
   $48 = $46 < 15.5;
   $$op$i = $47 * 0.0645161290322580627254;
   $$op$op$i = $$op$i * 3.141592653589793116;
   $49 = $48 ? $$op$op$i : 3.141592653589793116;
   $50 = (+Math_cos((+$49)));
   $51 = 1.0 - $50;
   $52 = $51 * 1.25;
   $53 = $52 + -2.5;
   $54 = (+Math_pow(10.0,(+$53)));
   $55 = $54;
   $56 = ((($gd) + ($i$29<<2)|0) + 768|0);
   HEAPF32[$56>>2] = $55;
   $57 = (($41) + ($j$38))|0;
   $39 = (($i$29) + 1)|0;
   $58 = HEAP32[$36>>2]|0;
   $59 = ($39|0)<($58|0);
   if ($59) {
    $i$29 = $39;$j$38 = $57;
   } else {
    break;
   }
  }
  $38 = ($39|0)<(64);
  if ($38) {
   $i$36 = $39;
   label = 15;
  }
 } else {
  $i$36 = 0;
  label = 15;
 }
 if ((label|0) == 15) {
  while(1) {
   label = 0;
   $62 = ((($gd) + ($i$36<<2)|0) + 768|0);
   HEAPF32[$62>>2] = 1.0;
   $63 = (($i$36) + 1)|0;
   $exitcond17 = ($63|0)==(64);
   if ($exitcond17) {
    break;
   } else {
    $i$36 = $63;
    label = 15;
   }
  }
 }
 $60 = ($sbmax|0)>(0);
 if (!($60)) {
  STACKTOP = sp;return;
 }
 $61 = $4;
 $sfb$04 = 0;
 while(1) {
  $64 = (($scalepos) + ($sfb$04<<2)|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = (($sfb$04) + 1)|0;
  $67 = (($scalepos) + ($66<<2)|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (+($65|0));
  $70 = $69 + -0.5;
  $71 = $61 * $70;
  $72 = $71 + 0.5;
  $73 = (+Math_floor((+$72)));
  $74 = (~~(($73)));
  $75 = ($74|0)<(0);
  $$ = $75 ? 0 : $74;
  $76 = (+($68|0));
  $77 = $76 + -0.5;
  $78 = $61 * $77;
  $79 = $78 + 0.5;
  $80 = (+Math_floor((+$79)));
  $81 = (~~(($80)));
  $82 = ($81|0)>($6|0);
  $$1 = $82 ? $6 : $81;
  $83 = (($partition) + ($$1<<2)|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = (($partition) + ($$<<2)|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = (($86) + ($84))|0;
  $88 = (($87|0) / 2)&-1;
  $89 = ((($gd) + ($sfb$04<<2)|0) + 1972|0);
  HEAP32[$89>>2] = $88;
  $90 = ((($gd) + ($sfb$04<<2)|0) + 2060|0);
  HEAP32[$90>>2] = $84;
  $91 = (+($68|0));
  $92 = $2 * $91;
  $93 = (($b_frq) + ($84<<2)|0);
  $94 = +HEAPF32[$93>>2];
  $95 = $92 - $94;
  $96 = (($84) + 1)|0;
  $97 = (($b_frq) + ($96<<2)|0);
  $98 = +HEAPF32[$97>>2];
  $99 = $98 - $94;
  $100 = $95 / $99;
  $101 = $100 < 0.0;
  if ($101) {
   $bo_w$0 = 0.0;
  } else {
   $102 = $100 > 1.0;
   if ($102) {
    $bo_w$0 = 1.0;
   } else {
    $bo_w$0 = $100;
   }
  }
  $103 = ((($gd) + ($sfb$04<<2)|0) + 1112|0);
  HEAPF32[$103>>2] = $bo_w$0;
  $104 = (+($65|0));
  $105 = $2 * $104;
  $106 = (+_freq2bark($105));
  $107 = $106;
  $108 = $106 < 15.5;
  $$op$i2 = $107 * 0.0645161290322580627254;
  $$op$op$i3 = $$op$i2 * 3.141592653589793116;
  $109 = $108 ? $$op$op$i3 : 3.141592653589793116;
  $110 = (+Math_cos((+$109)));
  $111 = 1.0 - $110;
  $112 = $111 * 1.25;
  $113 = $112 + -2.5;
  $114 = (+Math_pow(10.0,(+$113)));
  $115 = $114;
  $116 = ((($gd) + ($sfb$04<<2)|0) + 1024|0);
  HEAPF32[$116>>2] = $115;
  $exitcond = ($66|0)==($sbmax|0);
  if ($exitcond) {
   break;
  } else {
   $sfb$04 = $66;
  }
 }
 STACKTOP = sp;return;
}
function _compute_bark_values($gd,$sfreq,$fft_size,$bval,$bval_width) {
 $gd = $gd|0;
 $sfreq = +$sfreq;
 $fft_size = $fft_size|0;
 $bval = $bval|0;
 $bval_width = $bval_width|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0, $31 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $exitcond = 0, $j$01 = 0, $k$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($gd) + 2148|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (+($fft_size|0));
 $3 = $sfreq / $2;
 $4 = ($1|0)>(0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = $3;
 $j$01 = 0;$k$02 = 0;
 while(1) {
  $6 = ((($gd) + ($k$02<<2)|0) + 1716|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (+($j$01|0));
  $9 = $3 * $8;
  $10 = (+_freq2bark($9));
  $11 = (($7) + ($j$01))|0;
  $12 = (($11) + -1)|0;
  $13 = (+($12|0));
  $14 = $3 * $13;
  $15 = (+_freq2bark($14));
  $16 = $10 + $15;
  $17 = $16 * 0.5;
  $18 = (($bval) + ($k$02<<2)|0);
  HEAPF32[$18>>2] = $17;
  $19 = (+($j$01|0));
  $20 = $19 + -0.5;
  $21 = $5 * $20;
  $22 = $21;
  $23 = (+_freq2bark($22));
  $24 = (+($11|0));
  $25 = $24 + -0.5;
  $26 = $5 * $25;
  $27 = $26;
  $28 = (+_freq2bark($27));
  $29 = $28 - $23;
  $30 = (($bval_width) + ($k$02<<2)|0);
  HEAPF32[$30>>2] = $29;
  $31 = (($k$02) + 1)|0;
  $exitcond = ($31|0)==($1|0);
  if ($exitcond) {
   break;
  } else {
   $j$01 = $11;$k$02 = $31;
  }
 }
 STACKTOP = sp;return;
}
function _init_s3_values($p,$s3ind,$npart,$bval,$bval_width,$norm) {
 $p = $p|0;
 $s3ind = $s3ind|0;
 $npart = $npart|0;
 $bval = $bval|0;
 $bval_width = $bval_width|0;
 $norm = $norm|0;
 var $$0 = 0, $$0$i = 0.0, $$mux = 0, $$not = 0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0;
 var $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0;
 var $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0;
 var $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $9 = 0.0, $brmerge = 0, $exitcond = 0, $exitcond31 = 0, $exitcond32 = 0, $exitcond33 = 0, $i$022 = 0, $i$114 = 0, $i$23 = 0, $j$019 = 0, $j$18 = 0, $j$2 = 0, $j$2$in = 0, $k$05 = 0, $k$1$lcssa = 0, $numberOfNoneZero$0$lcssa = 0, $numberOfNoneZero$015 = 0;
 var $or$cond$i = 0, $phitmp = 0, $s3 = 0, $scevgep = 0, $scevgep26 = 0, $tempx$0$i = 0.0, $x$0$i = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16384|0;
 $s3 = sp;
 _memset(($s3|0),0,16384)|0;
 $0 = ($npart|0)>(0);
 if ($0) {
  $i$022 = 0;
  while(1) {
   $1 = (($bval) + ($i$022<<2)|0);
   $2 = +HEAPF32[$1>>2];
   $3 = (($norm) + ($i$022<<2)|0);
   $4 = +HEAPF32[$3>>2];
   $j$019 = 0;
   while(1) {
    $5 = (($bval) + ($j$019<<2)|0);
    $6 = +HEAPF32[$5>>2];
    $7 = $2 - $6;
    $8 = !($7 >= 0.0);
    if ($8) {
     $10 = $7 * 1.5;
     $tempx$0$i = $10;
    } else {
     $9 = $7 * 3.0;
     $tempx$0$i = $9;
    }
    $11 = $tempx$0$i;
    $12 = !($tempx$0$i >= 0.5);
    $13 = !($tempx$0$i <= 2.5);
    $or$cond$i = $12 | $13;
    if ($or$cond$i) {
     $x$0$i = 0.0;
    } else {
     $14 = $tempx$0$i + -0.5;
     $15 = $14 * $14;
     $16 = $15;
     $17 = $14;
     $18 = $17 * 2.0;
     $19 = $16 - $18;
     $20 = $19 * 8.0;
     $21 = $20;
     $x$0$i = $21;
    }
    $22 = $11 + 0.473999999999999976907;
    $23 = $22;
    $24 = $23;
    $25 = $24 * 7.5;
    $26 = $25 + 15.8113890000000001379;
    $27 = $23 * $23;
    $28 = $27;
    $29 = $28 + 1.0;
    $30 = (+Math_sqrt((+$29)));
    $31 = $30 * 17.5;
    $32 = $26 - $31;
    $33 = $32;
    $34 = !($33 <= -60.0);
    if ($34) {
     $35 = $x$0$i + $33;
     $36 = $35;
     $37 = $36 * 0.230258509299404584558;
     $38 = (+Math_exp((+$37)));
     $39 = $38;
     $40 = $39;
     $41 = $40 * 1.51304402821948169588;
     $42 = $41;
     $$0$i = $42;
    } else {
     $$0$i = 0.0;
    }
    $43 = (($bval_width) + ($j$019<<2)|0);
    $44 = +HEAPF32[$43>>2];
    $45 = $$0$i * $44;
    $46 = $45 * $4;
    $47 = ((($s3) + ($i$022<<8)|0) + ($j$019<<2)|0);
    HEAPF32[$47>>2] = $46;
    $48 = (($j$019) + 1)|0;
    $exitcond32 = ($48|0)==($npart|0);
    if ($exitcond32) {
     break;
    } else {
     $j$019 = $48;
    }
   }
   $49 = (($i$022) + 1)|0;
   $exitcond33 = ($49|0)==($npart|0);
   if ($exitcond33) {
    break;
   } else {
    $i$022 = $49;
   }
  }
  if ($0) {
   $i$114 = 0;$numberOfNoneZero$015 = 0;
   while(1) {
    $j$18 = 0;
    while(1) {
     $52 = ((($s3) + ($i$114<<8)|0) + ($j$18<<2)|0);
     $53 = +HEAPF32[$52>>2];
     $54 = $53 > 0.0;
     $51 = (($j$18) + 1)|0;
     if ($54) {
      $56 = $j$18;
      break;
     }
     $50 = ($51|0)<($npart|0);
     if ($50) {
      $j$18 = $51;
     } else {
      $56 = $51;
      break;
     }
    }
    $55 = (($s3ind) + ($i$114<<3)|0);
    HEAP32[$55>>2] = $56;
    $j$2$in = $npart;
    while(1) {
     $j$2 = (($j$2$in) + -1)|0;
     $57 = ($j$2|0)>(0);
     if (!($57)) {
      break;
     }
     $58 = ((($s3) + ($i$114<<8)|0) + ($j$2<<2)|0);
     $59 = +HEAPF32[$58>>2];
     $60 = $59 > 0.0;
     if ($60) {
      break;
     } else {
      $j$2$in = $j$2;
     }
    }
    $61 = ((($s3ind) + ($i$114<<3)|0) + 4|0);
    HEAP32[$61>>2] = $j$2;
    $62 = (($numberOfNoneZero$015) + ($j$2$in))|0;
    $63 = (($62) - ($56))|0;
    $64 = (($i$114) + 1)|0;
    $exitcond31 = ($64|0)==($npart|0);
    if ($exitcond31) {
     break;
    } else {
     $i$114 = $64;$numberOfNoneZero$015 = $63;
    }
   }
   $phitmp = $63 << 2;
   $numberOfNoneZero$0$lcssa = $phitmp;
  } else {
   $numberOfNoneZero$0$lcssa = 0;
  }
 } else {
  $numberOfNoneZero$0$lcssa = 0;
 }
 $65 = (_malloc($numberOfNoneZero$0$lcssa)|0);
 HEAP32[$p>>2] = $65;
 $66 = ($65|0)==(0|0);
 $$not = $0 ^ 1;
 $brmerge = $66 | $$not;
 $$mux = $66 << 31 >> 31;
 if ($brmerge) {
  $$0 = $$mux;
  STACKTOP = sp;return ($$0|0);
 } else {
  $i$23 = 0;$k$05 = 0;
 }
 while(1) {
  $67 = (($s3ind) + ($i$23<<3)|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = ((($s3ind) + ($i$23<<3)|0) + 4|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = ($68|0)>($70|0);
  if ($71) {
   $k$1$lcssa = $k$05;
  } else {
   $72 = HEAP32[$p>>2]|0;
   $73 = (($k$05) + 1)|0;
   $74 = (($73) + ($70))|0;
   $scevgep = (($72) + ($k$05<<2)|0);
   $scevgep26 = ((($s3) + ($i$23<<8)|0) + ($68<<2)|0);
   $75 = (($70) + 1)|0;
   $76 = (($75) - ($68))|0;
   $77 = $76 << 2;
   _memcpy(($scevgep|0),($scevgep26|0),($77|0))|0;
   $78 = (($74) - ($68))|0;
   $k$1$lcssa = $78;
  }
  $79 = (($i$23) + 1)|0;
  $exitcond = ($79|0)==($npart|0);
  if ($exitcond) {
   $$0 = 0;
   break;
  } else {
   $i$23 = $79;$k$05 = $k$1$lcssa;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _convert_partition2scalefac($gd,$eb,$thr,$enn_out,$thm_out) {
 $gd = $gd|0;
 $eb = $eb|0;
 $thr = $thr|0;
 $enn_out = $enn_out|0;
 $thm_out = $thm_out|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b$011 = 0, $b$1$lcssa = 0, $b$12 = 0, $enn$014 = 0.0, $enn$1$lcssa = 0.0, $enn$14 = 0.0, $exitcond = 0, $exitcond22 = 0, $sb$012 = 0, $sb$1$ph = 0, $sb$11 = 0;
 var $smax = 0, $thmm$013 = 0.0, $thmm$1$lcssa = 0.0, $thmm$13 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($gd) + 2152|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(0);
 L1: do {
  if ($2) {
   $3 = (($gd) + 2148|0);
   $$pre = HEAP32[$3>>2]|0;
   $b$011 = 0;$enn$014 = 0.0;$sb$012 = 0;$thmm$013 = 0.0;
   while(1) {
    $5 = ((($gd) + ($sb$012<<2)|0) + 2060|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = ($6|0)<($$pre|0);
    $8 = $7 ? $6 : $$pre;
    $9 = ($b$011|0)<($8|0);
    if ($9) {
     $10 = $6 ^ -1;
     $11 = $$pre ^ -1;
     $12 = ($10|0)>($11|0);
     $smax = $12 ? $10 : $11;
     $13 = $smax ^ -1;
     $b$12 = $b$011;$enn$14 = $enn$014;$thmm$13 = $thmm$013;
     while(1) {
      $14 = (($eb) + ($b$12<<2)|0);
      $15 = +HEAPF32[$14>>2];
      $16 = $enn$14 + $15;
      $17 = (($thr) + ($b$12<<2)|0);
      $18 = +HEAPF32[$17>>2];
      $19 = $thmm$13 + $18;
      $20 = (($b$12) + 1)|0;
      $exitcond22 = ($20|0)==($13|0);
      if ($exitcond22) {
       $b$1$lcssa = $13;$enn$1$lcssa = $16;$thmm$1$lcssa = $19;
       break;
      } else {
       $b$12 = $20;$enn$14 = $16;$thmm$13 = $19;
      }
     }
    } else {
     $b$1$lcssa = $b$011;$enn$1$lcssa = $enn$014;$thmm$1$lcssa = $thmm$013;
    }
    $21 = ($b$1$lcssa|0)<($$pre|0);
    if (!($21)) {
     break;
    }
    $25 = ((($gd) + ($sb$012<<2)|0) + 1112|0);
    $26 = +HEAPF32[$25>>2];
    $27 = 1.0 - $26;
    $28 = (($eb) + ($b$1$lcssa<<2)|0);
    $29 = +HEAPF32[$28>>2];
    $30 = $26 * $29;
    $31 = $enn$1$lcssa + $30;
    $32 = (($thr) + ($b$1$lcssa<<2)|0);
    $33 = +HEAPF32[$32>>2];
    $34 = $26 * $33;
    $35 = $thmm$1$lcssa + $34;
    $36 = (($enn_out) + ($sb$012<<2)|0);
    HEAPF32[$36>>2] = $31;
    $37 = (($thm_out) + ($sb$012<<2)|0);
    HEAPF32[$37>>2] = $35;
    $38 = +HEAPF32[$28>>2];
    $39 = $27 * $38;
    $40 = +HEAPF32[$32>>2];
    $41 = $27 * $40;
    $42 = (($b$1$lcssa) + 1)|0;
    $43 = (($sb$012) + 1)|0;
    $44 = ($43|0)<($1|0);
    if ($44) {
     $b$011 = $42;$enn$014 = $39;$sb$012 = $43;$thmm$013 = $41;
    } else {
     $sb$1$ph = $43;
     break L1;
    }
   }
   $22 = (($enn_out) + ($sb$012<<2)|0);
   HEAPF32[$22>>2] = $enn$1$lcssa;
   $23 = (($thm_out) + ($sb$012<<2)|0);
   HEAPF32[$23>>2] = $thmm$1$lcssa;
   $24 = (($sb$012) + 1)|0;
   $sb$1$ph = $24;
  } else {
   $sb$1$ph = 0;
  }
 } while(0);
 $4 = ($sb$1$ph|0)<($1|0);
 if ($4) {
  $sb$11 = $sb$1$ph;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $45 = (($enn_out) + ($sb$11<<2)|0);
  HEAPF32[$45>>2] = 0.0;
  $46 = (($thm_out) + ($sb$11<<2)|0);
  HEAPF32[$46>>2] = 0.0;
  $47 = (($sb$11) + 1)|0;
  $exitcond = ($47|0)==($1|0);
  if ($exitcond) {
   break;
  } else {
   $sb$11 = $47;
  }
 }
 STACKTOP = sp;return;
}
function _init_xrpow_core_init($gfc) {
 $gfc = $gfc|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($gfc) + 85824|0);
 HEAP32[$0>>2] = 5;
 STACKTOP = sp;return;
}
function _init_xrpow_core_c($cod_info,$xrpow,$upper,$sum) {
 $cod_info = $cod_info|0;
 $xrpow = $xrpow|0;
 $upper = $upper|0;
 $sum = $sum|0;
 var $$pre = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $exitcond = 0, $fabsf = 0.0, $i$01 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF32[$sum>>2] = 0.0;
 $0 = ($upper|0)<(0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (($cod_info) + 4764|0);
 $5 = 0.0;$i$01 = 0;
 while(1) {
  $2 = (($cod_info) + ($i$01<<2)|0);
  $3 = +HEAPF32[$2>>2];
  $fabsf = (+Math_abs((+$3)));
  $4 = $fabsf + $5;
  HEAPF32[$sum>>2] = $4;
  $6 = $fabsf;
  $7 = (+Math_sqrt((+$6)));
  $8 = $6 * $7;
  $9 = (+Math_sqrt((+$8)));
  $10 = $9;
  $11 = (($xrpow) + ($i$01<<2)|0);
  HEAPF32[$11>>2] = $10;
  $12 = +HEAPF32[$1>>2];
  $13 = $10 > $12;
  if ($13) {
   HEAPF32[$1>>2] = $10;
  }
  $exitcond = ($i$01|0)==($upper|0);
  if ($exitcond) {
   break;
  }
  $14 = (($i$01) + 1)|0;
  $$pre = +HEAPF32[$sum>>2];
  $5 = $$pre;$i$01 = $14;
 }
 STACKTOP = sp;return;
}
function _VBR_old_iteration_loop($gfc,$pe,$ms_ener_ratio,$ratio) {
 $gfc = $gfc|0;
 $pe = $pe|0;
 $ms_ener_ratio = $ms_ener_ratio|0;
 $ratio = $ratio|0;
 var $$$i = 0, $$$i7 = 0.0, $$0$i1 = 0, $$01$i = 0, $$1$i = 0, $$12$i = 0, $$lobit$i = 0, $$pre$i = 0, $$pre$i2 = 0, $$pre$phiZ2D = 0, $$pre$pre = 0, $$pre$pre$pre = 0, $$pre36 = 0, $$pre37 = 0, $$pre40 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0.0, $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0;
 var $210 = 0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0.0, $223 = 0.0, $224 = 0.0, $225 = 0.0, $226 = 0, $227 = 0.0, $228 = 0.0;
 var $229 = 0.0, $23 = 0, $230 = 0.0, $231 = 0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0, $237 = 0.0, $238 = 0.0, $239 = 0.0, $24 = 0, $240 = 0.0, $241 = 0, $242 = 0, $243 = 0, $244 = 0.0, $245 = 0, $246 = 0;
 var $247 = 0.0, $248 = 0.0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0;
 var $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0;
 var $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $analog_silence$0$lcssa37$i = 0, $analog_silence$023$i = 0, $analog_silence$1$$i = 0, $analog_silence$1$lcssa$i = 0, $analog_silence$115$i = 0, $bits$024$i = 0, $bits$1$lcssa$i = 0, $bits$116$i = 0, $bitsPerFrame$i$i = 0, $bst_cod_info$i = 0, $bst_xrpow$i = 0, $ch$014$i = 0, $ch$017 = 0;
 var $ch$07$i = 0, $ch$13$i = 0, $ch$13$us$us$i = 0, $ch$18 = 0, $dbits$0$i = 0, $exitcond = 0, $exitcond$i = 0, $exitcond$i$i = 0, $found$0$i = 0, $found$1$i = 0, $frameBits = 0, $gr$0 = 0, $gr$010$i = 0, $gr$020$i = 0, $gr$110 = 0, $gr$15$i = 0, $gr$15$us$i = 0, $i$01$i = 0, $i$01$i$i = 0, $i$01$i2$i = 0;
 var $indvars$iv$i = 0, $indvars$iv13$i = 0, $l3_xmin = 0, $masking_lower_db$0$i = 0.0, $max_bits = 0, $mean_bits = 0, $min_bits = 0, $pxmin$0$lcssa$i = 0, $pxmin$02$i = 0, $pxmin$14$i = 0, $scevgep$i = 0, $scevgep14$i = 0, $scevgep15$i = 0, $sfb$01$i = 0, $sfb$13$i = 0, $smax$i = 0, $storemerge = 0, $this_bits$0$i = 0, $this_bits$1$i = 0, $used_bits$0 = 0;
 var $used_bits$1$lcssa = 0, $used_bits$119 = 0, $used_bits$2 = 0, $xrpow = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 10608|0;
 $bst_cod_info$i = sp + 5344|0;
 $bst_xrpow$i = sp + 3040|0;
 $bitsPerFrame$i$i = sp + 3032|0;
 $l3_xmin = sp + 2408|0;
 $xrpow = sp + 104|0;
 $frameBits = sp + 40|0;
 $min_bits = sp + 24|0;
 $max_bits = sp + 8|0;
 $mean_bits = sp;
 $0 = (($gfc) + 116|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($gfc) + 84744|0);
 HEAP32[$2>>2] = $1;
 $3 = (_ResvFrameBegin($gfc,$bst_cod_info$i)|0);
 $4 = (($gfc) + 76|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3|0) / ($5|0))&-1;
 HEAP32[$bst_cod_info$i>>2] = $6;
 $7 = (($gfc) + 112|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$2>>2] = $8;
 $9 = (_getframebits($gfc)|0);
 HEAP32[$bitsPerFrame$i$i>>2] = $9;
 HEAP32[$2>>2] = 1;
 $10 = (_getframebits($gfc)|0);
 HEAP32[$bitsPerFrame$i$i>>2] = $10;
 $11 = HEAP32[$0>>2]|0;
 $12 = ($11|0)<(1);
 if (!($12)) {
  $i$01$i$i = 1;
  while(1) {
   HEAP32[$2>>2] = $i$01$i$i;
   $13 = (_ResvFrameBegin($gfc,$bitsPerFrame$i$i)|0);
   $14 = (($frameBits) + ($i$01$i$i<<2)|0);
   HEAP32[$14>>2] = $13;
   $15 = (($i$01$i$i) + 1)|0;
   $16 = HEAP32[$0>>2]|0;
   $17 = ($i$01$i$i|0)<($16|0);
   if ($17) {
    $i$01$i$i = $15;
   } else {
    break;
   }
  }
 }
 $18 = HEAP32[$4>>2]|0;
 $19 = ($18|0)>(0);
 L5: do {
  if ($19) {
   $20 = (($gfc) + 84756|0);
   $21 = (($gfc) + 72|0);
   $22 = (($gfc) + 84916|0);
   $23 = (($gfc) + 84908|0);
   $24 = (($gfc) + 84912|0);
   $analog_silence$023$i = 1;$bits$024$i = 0;$gr$020$i = 0;
   while(1) {
    $45 = (($max_bits) + ($gr$020$i<<3)|0);
    $46 = HEAP32[$bst_cod_info$i>>2]|0;
    $47 = (_on_pe($gfc,$pe,$45,$46,$gr$020$i,0)|0);
    $48 = HEAP32[$20>>2]|0;
    $49 = ($48|0)==(2);
    if ($49) {
     $i$01$i2$i = 0;
     while(1) {
      $50 = (((($gfc) + (($gr$020$i*10504)|0)|0) + ($i$01$i2$i<<2)|0) + 304|0);
      $51 = +HEAPF32[$50>>2];
      $52 = (((($gfc) + (($gr$020$i*10504)|0)|0) + ($i$01$i2$i<<2)|0) + 5556|0);
      $53 = +HEAPF32[$52>>2];
      $54 = $51 + $53;
      $55 = $54 * 0.707106769084930419921;
      HEAPF32[$50>>2] = $55;
      $56 = $51 - $53;
      $57 = $56 * 0.707106769084930419921;
      HEAPF32[$52>>2] = $57;
      $58 = (($i$01$i2$i) + 1)|0;
      $exitcond$i$i = ($58|0)==(576);
      if ($exitcond$i$i) {
       break;
      } else {
       $i$01$i2$i = $58;
      }
     }
     $59 = (($ms_ener_ratio) + ($gr$020$i<<2)|0);
     $60 = +HEAPF32[$59>>2];
     $61 = HEAP32[$bst_cod_info$i>>2]|0;
     _reduce_side($45,$60,$61,$47);
    }
    $62 = HEAP32[$21>>2]|0;
    $63 = ($62|0)>(0);
    if ($63) {
     $analog_silence$115$i = $analog_silence$023$i;$bits$116$i = $bits$024$i;$ch$014$i = 0;
     while(1) {
      $64 = (((($gfc) + (($gr$020$i*10504)|0)|0) + (($ch$014$i*5252)|0)|0) + 304|0);
      $65 = (((($gfc) + (($gr$020$i*10504)|0)|0) + (($ch$014$i*5252)|0)|0) + 5092|0);
      $66 = HEAP32[$65>>2]|0;
      $67 = ($66|0)==(2);
      $68 = ((($pe) + ($gr$020$i<<3)|0) + ($ch$014$i<<2)|0);
      $69 = +HEAPF32[$68>>2];
      $70 = $69;
      $71 = $70 * 0.00333333333333333354728;
      $72 = 3.5 - $71;
      $73 = (+Math_exp((+$72)));
      $74 = $73 + 1.0;
      if ($67) {
       $80 = 2.56000000000000005329 / $74;
       $81 = $80 + -0.140000000000000013323;
       $82 = $81;
       $83 = +HEAPF32[$22>>2];
       $84 = $83 - $82;
       $masking_lower_db$0$i = $84;
      } else {
       $75 = 1.28000000000000002665 / $74;
       $76 = $75 + -0.0500000000000000027756;
       $77 = $76;
       $78 = +HEAPF32[$24>>2];
       $79 = $78 - $77;
       $masking_lower_db$0$i = $79;
      }
      $85 = $masking_lower_db$0$i;
      $86 = $85 * 0.100000000000000005551;
      $87 = (+Math_pow(10.0,(+$86)));
      $88 = $87;
      HEAPF32[$23>>2] = $88;
      _init_outer_loop($gfc,$64);
      $89 = ((($ratio) + (($gr$020$i*976)|0)|0) + (($ch$014$i*488)|0)|0);
      $90 = ((($l3_xmin) + (($gr$020$i*312)|0)|0) + (($ch$014$i*156)|0)|0);
      $91 = (_calc_xmin($gfc,$89,$64,$90)|0);
      $92 = ($91|0)==(0);
      $analog_silence$1$$i = $92 ? $analog_silence$115$i : 0;
      $93 = ((($min_bits) + ($gr$020$i<<3)|0) + ($ch$014$i<<2)|0);
      HEAP32[$93>>2] = 126;
      $94 = ((($max_bits) + ($gr$020$i<<3)|0) + ($ch$014$i<<2)|0);
      $95 = HEAP32[$94>>2]|0;
      $96 = (($95) + ($bits$116$i))|0;
      $97 = (($ch$014$i) + 1)|0;
      $98 = HEAP32[$21>>2]|0;
      $99 = ($97|0)<($98|0);
      if ($99) {
       $analog_silence$115$i = $analog_silence$1$$i;$bits$116$i = $96;$ch$014$i = $97;
      } else {
       $$pre$i = $98;$analog_silence$1$lcssa$i = $analog_silence$1$$i;$bits$1$lcssa$i = $96;
       break;
      }
     }
    } else {
     $$pre$i = $62;$analog_silence$1$lcssa$i = $analog_silence$023$i;$bits$1$lcssa$i = $bits$024$i;
    }
    $100 = (($gr$020$i) + 1)|0;
    $26 = HEAP32[$4>>2]|0;
    $101 = ($100|0)<($26|0);
    if ($101) {
     $analog_silence$023$i = $analog_silence$1$lcssa$i;$bits$024$i = $bits$1$lcssa$i;$gr$020$i = $100;
    } else {
     break;
    }
   }
   $25 = ($26|0)>(0);
   if ($25) {
    $27 = ($bits$1$lcssa$i|0)>(0);
    if ($27) {
     $gr$15$us$i = 0;
    } else {
     $103 = $$pre$i;$gr$15$i = 0;
     while(1) {
      $102 = ($103|0)>(0);
      if ($102) {
       $268 = $103;$ch$13$i = 0;
       while(1) {
        $104 = ((($min_bits) + ($gr$15$i<<3)|0) + ($ch$13$i<<2)|0);
        $105 = HEAP32[$104>>2]|0;
        $106 = ((($max_bits) + ($gr$15$i<<3)|0) + ($ch$13$i<<2)|0);
        $107 = HEAP32[$106>>2]|0;
        $108 = ($105|0)>($107|0);
        if ($108) {
         HEAP32[$104>>2] = $107;
         $111 = $$pre$i;
        } else {
         $111 = $268;
        }
        $109 = (($ch$13$i) + 1)|0;
        $110 = ($109|0)<($111|0);
        if ($110) {
         $268 = $111;$ch$13$i = $109;
        } else {
         $269 = $111;
         break;
        }
       }
      } else {
       $269 = $103;
      }
      $112 = (($gr$15$i) + 1)|0;
      $113 = ($112|0)<($26|0);
      if ($113) {
       $103 = $269;$gr$15$i = $112;
      } else {
       $$pre$phiZ2D = $21;$267 = $26;$analog_silence$0$lcssa37$i = $analog_silence$1$lcssa$i;
       break L5;
      }
     }
    }
    while(1) {
     $28 = ($$pre$i|0)>(0);
     if ($28) {
      $29 = HEAP32[$0>>2]|0;
      $30 = (($frameBits) + ($29<<2)|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($bits$1$lcssa$i|0)>($31|0);
      $ch$13$us$us$i = 0;
      while(1) {
       $35 = ((($max_bits) + ($gr$15$us$i<<3)|0) + ($ch$13$us$us$i<<2)|0);
       $36 = HEAP32[$35>>2]|0;
       if ($32) {
        $37 = Math_imul($36, $31)|0;
        $38 = (($37|0) / ($bits$1$lcssa$i|0))&-1;
        HEAP32[$35>>2] = $38;
        $42 = $38;
       } else {
        $42 = $36;
       }
       $39 = ((($min_bits) + ($gr$15$us$i<<3)|0) + ($ch$13$us$us$i<<2)|0);
       $40 = HEAP32[$39>>2]|0;
       $41 = ($40|0)>($42|0);
       if ($41) {
        HEAP32[$39>>2] = $42;
       }
       $43 = (($ch$13$us$us$i) + 1)|0;
       $44 = ($43|0)<($$pre$i|0);
       if ($44) {
        $ch$13$us$us$i = $43;
       } else {
        break;
       }
      }
     }
     $33 = (($gr$15$us$i) + 1)|0;
     $34 = ($33|0)<($26|0);
     if ($34) {
      $gr$15$us$i = $33;
     } else {
      $$pre$phiZ2D = $21;$267 = $26;$analog_silence$0$lcssa37$i = $analog_silence$1$lcssa$i;
      break;
     }
    }
   } else {
    $$pre$phiZ2D = $21;$267 = $26;$analog_silence$0$lcssa37$i = $analog_silence$1$lcssa$i;
   }
  } else {
   $$pre40 = (($gfc) + 72|0);
   $$pre$phiZ2D = $$pre40;$267 = $18;$analog_silence$0$lcssa37$i = 1;
  }
 } while(0);
 $114 = ($analog_silence$0$lcssa37$i|0)==(0);
 $115 = (($gfc) + 124|0);
 $116 = (($gfc) + 85824|0);
 $117 = (($gfc) + 85096|0);
 $118 = (($gfc) + 85092|0);
 $119 = (($bst_cod_info$i) + 2304|0);
 $121 = $267;$gr$0 = 0;$used_bits$0 = 0;
 L49: while(1) {
  $120 = ($gr$0|0)<($121|0);
  if (!($120)) {
   if ($114) {
    label = 54;
   } else {
    $183 = HEAP32[$115>>2]|0;
    $184 = ($183|0)==(0);
    if ($184) {
     $storemerge = 1;
    } else {
     label = 54;
    }
   }
   if ((label|0) == 54) {
    label = 0;
    $185 = HEAP32[$7>>2]|0;
    $storemerge = $185;
   }
   HEAP32[$2>>2] = $storemerge;
   $186 = HEAP32[$0>>2]|0;
   $187 = ($storemerge|0)<($186|0);
   L58: do {
    if ($187) {
     $189 = $storemerge;
     while(1) {
      $188 = (($frameBits) + ($189<<2)|0);
      $190 = HEAP32[$188>>2]|0;
      $191 = ($used_bits$0|0)>($190|0);
      if (!($191)) {
       break L58;
      }
      $192 = (($189) + 1)|0;
      HEAP32[$2>>2] = $192;
      $193 = ($192|0)<($186|0);
      if ($193) {
       $189 = $192;
      } else {
       break;
      }
     }
    }
   } while(0);
   $194 = (_ResvFrameBegin($gfc,$mean_bits)|0);
   $195 = ($used_bits$0|0)>($194|0);
   $196 = HEAP32[$4>>2]|0;
   $197 = ($196|0)>(0);
   if (!($195)) {
    break;
   }
   if (!($197)) {
    $121 = $196;$gr$0 = 0;$used_bits$0 = 0;
    continue;
   }
   $$pre$i2 = HEAP32[$$pre$phiZ2D>>2]|0;
   $gr$010$i = 0;$indvars$iv$i = $l3_xmin;
   while(1) {
    $200 = ($$pre$i2|0)>(0);
    if ($200) {
     $ch$07$i = 0;$indvars$iv13$i = $indvars$iv$i;
     while(1) {
      $201 = ((($l3_xmin) + (($gr$010$i*312)|0)|0) + (($ch$07$i*156)|0)|0);
      $202 = (((($gfc) + (($gr$010$i*10504)|0)|0) + (($ch$07$i*5252)|0)|0) + 5160|0);
      $203 = HEAP32[$202>>2]|0;
      $204 = ($203|0)>(0);
      if ($204) {
       $205 = ($203|0)>(1);
       $pxmin$02$i = $201;$sfb$01$i = 0;
       while(1) {
        $206 = (+($sfb$01$i|0));
        $207 = $206 * $206;
        $208 = $207 * 5.99173553719008271335E-5;
        $209 = $208 + 1.0;
        $210 = (($pxmin$02$i) + 4|0);
        $211 = +HEAPF32[$pxmin$02$i>>2];
        $212 = $211;
        $213 = $212 * $209;
        $214 = $213;
        HEAPF32[$pxmin$02$i>>2] = $214;
        $215 = (($sfb$01$i) + 1)|0;
        $exitcond = ($215|0)==($203|0);
        if ($exitcond) {
         break;
        } else {
         $pxmin$02$i = $210;$sfb$01$i = $215;
        }
       }
       $smax$i = $205 ? $203 : 1;
       $scevgep15$i = (($indvars$iv13$i) + ($smax$i<<2)|0);
       $pxmin$0$lcssa$i = $scevgep15$i;
      } else {
       $pxmin$0$lcssa$i = $201;
      }
      $216 = (((($gfc) + (($gr$010$i*10504)|0)|0) + (($ch$07$i*5252)|0)|0) + 5092|0);
      $217 = HEAP32[$216>>2]|0;
      $218 = ($217|0)==(2);
      if ($218) {
       $219 = (((($gfc) + (($gr$010$i*10504)|0)|0) + (($ch$07$i*5252)|0)|0) + 5156|0);
       $220 = HEAP32[$219>>2]|0;
       $221 = ($220|0)<(13);
       if ($221) {
        $pxmin$14$i = $pxmin$0$lcssa$i;$sfb$13$i = $220;
        while(1) {
         $222 = (+($sfb$13$i|0));
         $223 = $222 * $222;
         $224 = $223 * 1.71597633136094689836E-4;
         $225 = $224 + 1.0;
         $226 = (($pxmin$14$i) + 4|0);
         $227 = +HEAPF32[$pxmin$14$i>>2];
         $228 = $227;
         $229 = $228 * $225;
         $230 = $229;
         HEAPF32[$pxmin$14$i>>2] = $230;
         $231 = (($pxmin$14$i) + 8|0);
         $232 = +HEAPF32[$226>>2];
         $233 = $232;
         $234 = $233 * $225;
         $235 = $234;
         HEAPF32[$226>>2] = $235;
         $236 = (($pxmin$14$i) + 12|0);
         $237 = +HEAPF32[$231>>2];
         $238 = $237;
         $239 = $225 * $238;
         $240 = $239;
         HEAPF32[$231>>2] = $240;
         $241 = (($sfb$13$i) + 1)|0;
         $exitcond$i = ($241|0)==(13);
         if ($exitcond$i) {
          break;
         } else {
          $pxmin$14$i = $236;$sfb$13$i = $241;
         }
        }
       }
      }
      $242 = ((($min_bits) + ($gr$010$i<<3)|0) + ($ch$07$i<<2)|0);
      $243 = HEAP32[$242>>2]|0;
      $244 = (+($243|0));
      $245 = ((($max_bits) + ($gr$010$i<<3)|0) + ($ch$07$i<<2)|0);
      $246 = HEAP32[$245>>2]|0;
      $247 = (+($246|0));
      $248 = $247 * 0.900000000000000022204;
      $249 = $244 > $248;
      $$$i7 = $249 ? $244 : $248;
      $250 = (~~(($$$i7)));
      HEAP32[$245>>2] = $250;
      $251 = (($ch$07$i) + 1)|0;
      $252 = ($251|0)<($$pre$i2|0);
      $scevgep14$i = (($indvars$iv13$i) + 156|0);
      if ($252) {
       $ch$07$i = $251;$indvars$iv13$i = $scevgep14$i;
      } else {
       break;
      }
     }
    }
    $253 = (($gr$010$i) + 1)|0;
    $254 = ($253|0)<($196|0);
    $scevgep$i = (($indvars$iv$i) + 312|0);
    if ($254) {
     $gr$010$i = $253;$indvars$iv$i = $scevgep$i;
    } else {
     $121 = $196;$gr$0 = 0;$used_bits$0 = 0;
     continue L49;
    }
   }
  }
  $122 = HEAP32[$$pre$phiZ2D>>2]|0;
  $123 = ($122|0)>(0);
  if ($123) {
   $ch$017 = 0;$used_bits$119 = $used_bits$0;
   while(1) {
    $124 = (((($gfc) + (($gr$0*10504)|0)|0) + (($ch$017*5252)|0)|0) + 304|0);
    HEAPF32[$bst_cod_info$i>>2] = 0.0;
    $125 = (((($gfc) + (($gr$0*10504)|0)|0) + (($ch$017*5252)|0)|0) + 5512|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = (((($gfc) + (($gr$0*10504)|0)|0) + (($ch$017*5252)|0)|0) + 5068|0);
    HEAPF32[$127>>2] = 0.0;
    $128 = (($xrpow) + ($126<<2)|0);
    $129 = (576 - ($126))|0;
    $130 = $129 << 2;
    _memset(($128|0),0,($130|0))|0;
    $131 = HEAP32[$116>>2]|0;
    FUNCTION_TABLE_viiii[$131 & 7]($124,$xrpow,$126,$bst_cod_info$i);
    $132 = +HEAPF32[$bst_cod_info$i>>2];
    $133 = $132 > 9.99999968265522538896E-21;
    if ($133) {
     $134 = HEAP32[$117>>2]|0;
     $135 = $134 >>> 1;
     $$lobit$i = $135 & 1;
     $136 = (((($gfc) + (($gr$0*10504)|0)|0) + (($ch$017*5252)|0)|0) + 5168|0);
     $137 = HEAP32[$136>>2]|0;
     $138 = ($137|0)>(0);
     if ($138) {
      $i$01$i = 0;
      while(1) {
       $139 = ((($gfc) + ($i$01$i<<2)|0) + 84936|0);
       HEAP32[$139>>2] = $$lobit$i;
       $140 = (($i$01$i) + 1)|0;
       $141 = HEAP32[$136>>2]|0;
       $142 = ($140|0)<($141|0);
       if ($142) {
        $i$01$i = $140;
       } else {
        break;
       }
      }
     }
     $144 = ((($max_bits) + ($gr$0<<3)|0) + ($ch$017<<2)|0);
     $145 = HEAP32[$144>>2]|0;
     $146 = ($145|0)==(0);
     if ($146) {
      $used_bits$2 = $used_bits$119;
     } else {
      $147 = ((($l3_xmin) + (($gr$0*312)|0)|0) + (($ch$017*156)|0)|0);
      $148 = ((($min_bits) + ($gr$0<<3)|0) + ($ch$017<<2)|0);
      $149 = HEAP32[$148>>2]|0;
      $150 = (($149) + ($145))|0;
      $151 = (($150|0) / 2)&-1;
      $152 = HEAP32[$118>>2]|0;
      _memset(($119|0),0,2304)|0;
      $153 = (($145) + -42)|0;
      $154 = (((($gfc) + (($gr$0*10504)|0)|0) + (($ch$017*5252)|0)|0) + 5072|0);
      $$0$i1 = $149;$$01$i = $145;$found$0$i = 0;$this_bits$0$i = $151;
      while(1) {
       $155 = ($this_bits$0$i|0)>($153|0);
       $$$i = $155 ? 0 : $152;
       HEAP32[$118>>2] = $$$i;
       $156 = (_outer_loop($gfc,$124,$147,$xrpow,$ch$017,$this_bits$0$i)|0);
       $157 = ($156|0)<(1);
       if ($157) {
        $158 = HEAP32[$154>>2]|0;
        _memcpy(($bst_cod_info$i|0),($124|0),5252)|0;
        _memcpy(($bst_xrpow$i|0),($xrpow|0),2304)|0;
        $159 = (($158) + -32)|0;
        $160 = (($159) - ($$0$i1))|0;
        $161 = (($159) + ($$0$i1))|0;
        $162 = (($161|0) / 2)&-1;
        $$1$i = $$0$i1;$$12$i = $159;$dbits$0$i = $160;$found$1$i = 1;$this_bits$1$i = $162;
       } else {
        $163 = (($this_bits$0$i) + 32)|0;
        $164 = (($$01$i) - ($163))|0;
        $165 = (($$01$i) + ($163))|0;
        $166 = (($165|0) / 2)&-1;
        $167 = ($found$0$i|0)==(0);
        if ($167) {
         $$1$i = $163;$$12$i = $$01$i;$dbits$0$i = $164;$found$1$i = 0;$this_bits$1$i = $166;
        } else {
         _memcpy(($124|0),($bst_cod_info$i|0),5252)|0;
         _memcpy(($xrpow|0),($bst_xrpow$i|0),2304)|0;
         $$1$i = $163;$$12$i = $$01$i;$dbits$0$i = $164;$found$1$i = 2;$this_bits$1$i = $166;
        }
       }
       $168 = ($dbits$0$i|0)>(12);
       if ($168) {
        $$0$i1 = $$1$i;$$01$i = $$12$i;$found$0$i = $found$1$i;$this_bits$0$i = $this_bits$1$i;
       } else {
        break;
       }
      }
      HEAP32[$118>>2] = $152;
      $169 = ($found$1$i|0)==(2);
      if ($169) {
       $170 = (((($gfc) + (($gr$0*10504)|0)|0) + (($ch$017*5252)|0)|0) + 2608|0);
       _memcpy(($170|0),($119|0),2304)|0;
      }
      $171 = HEAP32[$117>>2]|0;
      $172 = $171 & 1;
      $173 = ($172|0)==(0);
      if (!($173)) {
       _trancate_smallspectrums($gfc,$124,$147,$xrpow);
      }
      $174 = HEAP32[$154>>2]|0;
      $175 = (((($gfc) + (($gr$0*10504)|0)|0) + (($ch$017*5252)|0)|0) + 5148|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = (($174) + ($used_bits$119))|0;
      $178 = (($177) + ($176))|0;
      $used_bits$2 = $178;
     }
    } else {
     $143 = (((($gfc) + (($gr$0*10504)|0)|0) + (($ch$017*5252)|0)|0) + 2608|0);
     _memset(($143|0),0,2304)|0;
     $used_bits$2 = $used_bits$119;
    }
    $179 = (($ch$017) + 1)|0;
    $180 = HEAP32[$$pre$phiZ2D>>2]|0;
    $181 = ($179|0)<($180|0);
    if ($181) {
     $ch$017 = $179;$used_bits$119 = $used_bits$2;
    } else {
     break;
    }
   }
   $$pre$pre$pre = HEAP32[$4>>2]|0;
   $$pre$pre = $$pre$pre$pre;$used_bits$1$lcssa = $used_bits$2;
  } else {
   $$pre$pre = $121;$used_bits$1$lcssa = $used_bits$0;
  }
  $182 = (($gr$0) + 1)|0;
  $121 = $$pre$pre;$gr$0 = $182;$used_bits$0 = $used_bits$1$lcssa;
 }
 if (!($197)) {
  $266 = HEAP32[$mean_bits>>2]|0;
  _ResvFrameEnd($gfc,$266);
  STACKTOP = sp;return;
 }
 $198 = (($gfc) + 304|0);
 $199 = (($gfc) + 36|0);
 $$pre36 = HEAP32[$$pre$phiZ2D>>2]|0;
 $256 = $$pre36;$270 = $196;$gr$110 = 0;
 while(1) {
  $255 = ($256|0)>(0);
  if ($255) {
   $ch$18 = 0;
   while(1) {
    $257 = (((($gfc) + (($gr$110*10504)|0)|0) + (($ch$18*5252)|0)|0) + 304|0);
    _best_scalefac_store($gfc,$gr$110,$ch$18,$198);
    $258 = HEAP32[$199>>2]|0;
    $259 = ($258|0)==(1);
    if ($259) {
     _best_huffman_divide($gfc,$257);
    }
    _ResvAdjust($gfc,$257);
    $260 = (($ch$18) + 1)|0;
    $261 = HEAP32[$$pre$phiZ2D>>2]|0;
    $262 = ($260|0)<($261|0);
    if ($262) {
     $ch$18 = $260;
    } else {
     break;
    }
   }
   $$pre37 = HEAP32[$4>>2]|0;
   $265 = $$pre37;$271 = $261;
  } else {
   $265 = $270;$271 = $256;
  }
  $263 = (($gr$110) + 1)|0;
  $264 = ($263|0)<($265|0);
  if ($264) {
   $256 = $271;$270 = $265;$gr$110 = $263;
  } else {
   break;
  }
 }
 $266 = HEAP32[$mean_bits>>2]|0;
 _ResvFrameEnd($gfc,$266);
 STACKTOP = sp;return;
}
function _trancate_smallspectrums($gfc,$gi,$l3_xmin,$work) {
 $gfc = $gfc|0;
 $gi = $gi|0;
 $l3_xmin = $l3_xmin|0;
 $work = $work|0;
 var $$ = 0, $$lcssa = 0, $$lcssa10 = 0, $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0;
 var $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0;
 var $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0.0;
 var $77 = 0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $allowedNoise$0 = 0.0;
 var $distort = 0, $dummy = 0, $exitcond = 0, $fabsf = 0.0, $fabsf1 = 0.0, $fabsf2 = 0.0, $fabsf3 = 0.0, $fabsf4 = 0.0, $fabsf5 = 0.0, $fabsf9 = 0.0, $j$019 = 0, $j$1 = 0, $nsame$0$lcssa = 0, $nsame$011 = 0, $sfb$0 = 0, $start$0 = 0, $width$0 = 0, $xr$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0;
 $distort = sp + 24|0;
 $dummy = sp;
 $0 = (($gfc) + 85096|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 4;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = (($gi) + 4788|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(2);
  if ($6) {
   STACKTOP = sp;return;
  }
 }
 $7 = $1 & 128;
 $8 = ($7|0)==(0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 (_calc_noise($gi,$l3_xmin,$distort,$dummy,0)|0);
 $j$019 = 0;
 while(1) {
  $9 = ((($gi) + ($j$019<<2)|0) + 2304|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0);
  if ($11) {
   $xr$0 = 0.0;
  } else {
   $12 = (($gi) + ($j$019<<2)|0);
   $13 = +HEAPF32[$12>>2];
   $fabsf5 = (+Math_abs((+$13)));
   $xr$0 = $fabsf5;
  }
  $14 = (($work) + ($j$019<<2)|0);
  HEAPF32[$14>>2] = $xr$0;
  $15 = (($j$019) + 1)|0;
  $exitcond = ($15|0)==(576);
  if ($exitcond) {
   break;
  } else {
   $j$019 = $15;
  }
 }
 $16 = (($gi) + 4788|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(2);
 $$ = $18 ? 6 : 8;
 $19 = (($gi) + 4864|0);
 $j$1 = 0;$sfb$0 = $$;
 while(1) {
  $20 = ((($gi) + ($sfb$0<<2)|0) + 4872|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + ($j$1))|0;
  $23 = (($distort) + ($sfb$0<<2)|0);
  $24 = +HEAPF32[$23>>2];
  $25 = !($24 >= 1.0);
  L16: do {
   if ($25) {
    $26 = (($work) + ($j$1<<2)|0);
    _qsort($26,$21,4,1);
    $27 = (($22) + -1)|0;
    $28 = (($work) + ($27<<2)|0);
    $29 = +HEAPF32[$28>>2];
    $fabsf = (+Math_abs((+$29)));
    $30 = $fabsf;
    $31 = ($29 != $29) | (0.0 != 0.0) |($29 == 0.0);
    if ($31) {
     $34 = $29 == 0.0;
     if ($34) {
      break;
     }
    } else {
     $32 = $30 * 9.99999997475242707878E-7;
     $33 = !($30 <= $32);
     if (!($33)) {
      break;
     }
    }
    $35 = +HEAPF32[$23>>2];
    $36 = $35;
    $37 = 1.0 - $36;
    $38 = (($l3_xmin) + ($sfb$0<<2)|0);
    $39 = +HEAPF32[$38>>2];
    $40 = $39;
    $41 = $37 * $40;
    $42 = $41;
    $allowedNoise$0 = $42;$start$0 = 0;
    while(1) {
     $43 = (($start$0) + 1)|0;
     $44 = ($43|0)<($21|0);
     L24: do {
      if ($44) {
       $45 = (($start$0) + ($22))|0;
       $46 = (($45) - ($21))|0;
       $47 = (($work) + ($46<<2)|0);
       $48 = +HEAPF32[$47>>2];
       $fabsf2 = (+Math_abs((+$48)));
       $49 = (($start$0) + ($j$1))|0;
       $50 = $fabsf2;
       $51 = $50 * 9.99999997475242707878E-7;
       $93 = $43;$nsame$011 = 1;
       while(1) {
        $52 = (($49) + ($nsame$011))|0;
        $53 = (($work) + ($52<<2)|0);
        $54 = +HEAPF32[$53>>2];
        $fabsf3 = (+Math_abs((+$54)));
        $55 = $fabsf2 > $fabsf3;
        $56 = $48 - $54;
        $fabsf4 = (+Math_abs((+$56)));
        $57 = $fabsf4;
        if ($55) {
         $58 = !($57 <= $51);
         if ($58) {
          $$lcssa = $93;$$lcssa10 = 1;$$pre$phiZ2D = $49;$nsame$0$lcssa = $nsame$011;
          break L24;
         }
        } else {
         $59 = $fabsf3;
         $60 = $59 * 9.99999997475242707878E-7;
         $61 = !($57 <= $60);
         if ($61) {
          $$lcssa = $93;$$lcssa10 = 1;$$pre$phiZ2D = $49;$nsame$0$lcssa = $nsame$011;
          break L24;
         }
        }
        $62 = (($nsame$011) + 1)|0;
        $63 = (($62) + ($start$0))|0;
        $64 = ($63|0)<($21|0);
        if ($64) {
         $93 = $63;$nsame$011 = $62;
        } else {
         $$lcssa = $63;$$lcssa10 = 0;$$pre$phiZ2D = $49;$nsame$0$lcssa = $62;
         break;
        }
       }
      } else {
       $$pre = (($j$1) + ($start$0))|0;
       $$lcssa = $43;$$lcssa10 = 0;$$pre$phiZ2D = $$pre;$nsame$0$lcssa = 1;
      }
     } while(0);
     $65 = (($work) + ($$pre$phiZ2D<<2)|0);
     $66 = +HEAPF32[$65>>2];
     $67 = $66 * $66;
     $68 = (+($nsame$0$lcssa|0));
     $69 = $68 * $67;
     $70 = $allowedNoise$0 < $69;
     if ($70) {
      break;
     }
     $72 = $allowedNoise$0 - $69;
     if ($$lcssa10) {
      $allowedNoise$0 = $72;$start$0 = $$lcssa;
     } else {
      break L16;
     }
    }
    $71 = ($start$0|0)==(0);
    if (!($71)) {
     $73 = (($$pre$phiZ2D) + -1)|0;
     $74 = (($work) + ($73<<2)|0);
     $75 = +HEAPF32[$74>>2];
     $fabsf9 = (+Math_abs((+$75)));
     $76 = $fabsf9;
     $77 = ($75 != $75) | (0.0 != 0.0) |($75 == 0.0);
     if ($77) {
      $80 = $75 == 0.0;
      if ($80) {
       break;
      } else {
       $width$0 = $21;
      }
     } else {
      $78 = $76 * 9.99999997475242707878E-7;
      $79 = !($76 <= $78);
      if ($79) {
       $width$0 = $21;
      } else {
       break;
      }
     }
     while(1) {
      $81 = (($22) - ($width$0))|0;
      $82 = (($gi) + ($81<<2)|0);
      $83 = +HEAPF32[$82>>2];
      $fabsf1 = (+Math_abs((+$83)));
      $84 = !($fabsf1 <= $75);
      if (!($84)) {
       $85 = ((($gi) + ($81<<2)|0) + 2304|0);
       HEAP32[$85>>2] = 0;
      }
      $86 = (($width$0) + -1)|0;
      $87 = ($86|0)>(0);
      if ($87) {
       $width$0 = $86;
      } else {
       break;
      }
     }
    }
   }
  } while(0);
  $88 = (($sfb$0) + 1)|0;
  $89 = HEAP32[$19>>2]|0;
  $90 = ($88|0)<($89|0);
  if ($90) {
   $j$1 = $22;$sfb$0 = $88;
  } else {
   break;
  }
 }
 $91 = (_noquant_count_bits($gfc,$gi,0)|0);
 $92 = (($gi) + 4768|0);
 HEAP32[$92>>2] = $91;
 STACKTOP = sp;return;
}
function _VBR_new_iteration_loop($gfc,$pe,$ms_ener_ratio,$ratio) {
 $gfc = $gfc|0;
 $pe = $pe|0;
 $ms_ener_ratio = $ms_ener_ratio|0;
 $ratio = $ratio|0;
 var $$i$0 = 0, $$lobit$i = 0, $$pre = 0, $$pre$i = 0, $$pre41 = 0, $$pre42 = 0, $$pre43 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0.0;
 var $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0, $analog_silence$0$lcssa2627$i = 0;
 var $analog_silence$0$lcssa2628$i = 0, $analog_silence$014$i = 0, $analog_silence$1$$i = 0, $analog_silence$1$lcssa$i = 0, $analog_silence$110$i = 0, $bits$015$i = 0, $bits$1$lcssa$i = 0, $bits$111$i = 0, $ch$019 = 0, $ch$09$i = 0, $ch$12 = 0, $ch$13$i = 0, $exitcond$i$i = 0, $frameBits = 0, $gr$016$i = 0, $gr$022 = 0, $gr$13 = 0, $gr$15$i = 0, $i$0$lcssa = 0, $i$0$ph = 0;
 var $i$01$i = 0, $i$01$i$i = 0, $i$01$i2$i = 0, $i$012 = 0, $j$0$lcssa = 0, $j$07 = 0, $l3_xmin = 0, $max_bits = 0, $maximum_framebits$0$i = 0, $mean_bits = 0, $or$cond$i = 0, $sum$i = 0, $vararg_buffer = 0, $xrpow = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 9936|0;
 $vararg_buffer = sp;
 $sum$i = sp + 9928|0;
 $l3_xmin = sp + 9304|0;
 $xrpow = sp + 88|0;
 $frameBits = sp + 24|0;
 $max_bits = sp + 8|0;
 $mean_bits = sp + 4|0;
 _memset(($xrpow|0),0,9216)|0;
 $0 = (($gfc) + 152|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = (($gfc) + 116|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (($gfc) + 84744|0);
  HEAP32[$5>>2] = $4;
  (_ResvFrameBegin($gfc,$sum$i)|0);
  $6 = (($gfc) + 52144|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($gfc) + 112|0);
  $9 = HEAP32[$8>>2]|0;
  HEAP32[$5>>2] = $9;
  $10 = (_getframebits($gfc)|0);
  HEAP32[$vararg_buffer>>2] = $10;
  HEAP32[$5>>2] = 1;
  $11 = (_getframebits($gfc)|0);
  HEAP32[$vararg_buffer>>2] = $11;
  $12 = HEAP32[$3>>2]|0;
  $13 = ($12|0)<(1);
  if ($13) {
   $20 = $12;
  } else {
   $i$01$i$i = 1;
   while(1) {
    HEAP32[$5>>2] = $i$01$i$i;
    $14 = (_ResvFrameBegin($gfc,$vararg_buffer)|0);
    $15 = (($frameBits) + ($i$01$i$i<<2)|0);
    HEAP32[$15>>2] = $14;
    $16 = (($i$01$i$i) + 1)|0;
    $17 = HEAP32[$3>>2]|0;
    $18 = ($i$01$i$i|0)<($17|0);
    if ($18) {
     $i$01$i$i = $16;
    } else {
     $20 = $17;
     break;
    }
   }
  }
  $19 = (($frameBits) + ($20<<2)|0);
  $21 = HEAP32[$19>>2]|0;
  $164 = $7;$maximum_framebits$0$i = $21;
 } else {
  $22 = (($gfc) + 84744|0);
  HEAP32[$22>>2] = 0;
  $23 = (_ResvFrameBegin($gfc,$sum$i)|0);
  HEAP32[$frameBits>>2] = $23;
  $24 = (($gfc) + 52144|0);
  $25 = HEAP32[$24>>2]|0;
  $164 = $25;$maximum_framebits$0$i = $23;
 }
 $26 = (($gfc) + 76|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)>(0);
 if ($28) {
  $29 = (($gfc) + 84756|0);
  $30 = (($gfc) + 72|0);
  $31 = (($gfc) + 84912|0);
  $32 = (($gfc) + 84908|0);
  $analog_silence$014$i = 1;$bits$015$i = 0;$gr$016$i = 0;
  while(1) {
   $37 = (($max_bits) + ($gr$016$i<<3)|0);
   $38 = HEAP32[$sum$i>>2]|0;
   (_on_pe($gfc,$pe,$37,$38,$gr$016$i,0)|0);
   $39 = HEAP32[$29>>2]|0;
   $40 = ($39|0)==(2);
   if ($40) {
    $i$01$i2$i = 0;
    while(1) {
     $41 = (((($gfc) + (($gr$016$i*10504)|0)|0) + ($i$01$i2$i<<2)|0) + 304|0);
     $42 = +HEAPF32[$41>>2];
     $43 = (((($gfc) + (($gr$016$i*10504)|0)|0) + ($i$01$i2$i<<2)|0) + 5556|0);
     $44 = +HEAPF32[$43>>2];
     $45 = $42 + $44;
     $46 = $45 * 0.707106769084930419921;
     HEAPF32[$41>>2] = $46;
     $47 = $42 - $44;
     $48 = $47 * 0.707106769084930419921;
     HEAPF32[$43>>2] = $48;
     $49 = (($i$01$i2$i) + 1)|0;
     $exitcond$i$i = ($49|0)==(576);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$01$i2$i = $49;
     }
    }
   }
   $50 = HEAP32[$30>>2]|0;
   $51 = ($50|0)>(0);
   if ($51) {
    $analog_silence$110$i = $analog_silence$014$i;$bits$111$i = $bits$015$i;$ch$09$i = 0;
    while(1) {
     $52 = (((($gfc) + (($gr$016$i*10504)|0)|0) + (($ch$09$i*5252)|0)|0) + 304|0);
     $53 = +HEAPF32[$31>>2];
     $54 = $53;
     $55 = $54 * 0.100000000000000005551;
     $56 = (+Math_pow(10.0,(+$55)));
     $57 = $56;
     HEAPF32[$32>>2] = $57;
     _init_outer_loop($gfc,$52);
     $58 = ((($ratio) + (($gr$016$i*976)|0)|0) + (($ch$09$i*488)|0)|0);
     $59 = ((($l3_xmin) + (($gr$016$i*312)|0)|0) + (($ch$09$i*156)|0)|0);
     $60 = (_calc_xmin($gfc,$58,$52,$59)|0);
     $61 = ($60|0)==(0);
     $analog_silence$1$$i = $61 ? $analog_silence$110$i : 0;
     $62 = ((($max_bits) + ($gr$016$i<<3)|0) + ($ch$09$i<<2)|0);
     $63 = HEAP32[$62>>2]|0;
     $64 = (($63) + ($bits$111$i))|0;
     $65 = (($ch$09$i) + 1)|0;
     $66 = HEAP32[$30>>2]|0;
     $67 = ($65|0)<($66|0);
     if ($67) {
      $analog_silence$110$i = $analog_silence$1$$i;$bits$111$i = $64;$ch$09$i = $65;
     } else {
      $$pre$i = $66;$analog_silence$1$lcssa$i = $analog_silence$1$$i;$bits$1$lcssa$i = $64;
      break;
     }
    }
   } else {
    $$pre$i = $50;$analog_silence$1$lcssa$i = $analog_silence$014$i;$bits$1$lcssa$i = $bits$015$i;
   }
   $68 = (($gr$016$i) + 1)|0;
   $34 = HEAP32[$26>>2]|0;
   $69 = ($68|0)<($34|0);
   if ($69) {
    $analog_silence$014$i = $analog_silence$1$lcssa$i;$bits$015$i = $bits$1$lcssa$i;$gr$016$i = $68;
   } else {
    break;
   }
  }
  $33 = ($34|0)>(0);
  if ($33) {
   $35 = ($bits$1$lcssa$i|0)>($maximum_framebits$0$i|0);
   $36 = ($bits$1$lcssa$i|0)>(0);
   $or$cond$i = $35 & $36;
   $71 = $$pre$i;$gr$15$i = 0;
   while(1) {
    $70 = ($71|0)>(0);
    if ($70) {
     $166 = $71;$ch$13$i = 0;
     while(1) {
      if ($or$cond$i) {
       $72 = ((($max_bits) + ($gr$15$i<<3)|0) + ($ch$13$i<<2)|0);
       $73 = HEAP32[$72>>2]|0;
       $74 = Math_imul($73, $maximum_framebits$0$i)|0;
       $75 = (($74|0) / ($bits$1$lcssa$i|0))&-1;
       HEAP32[$72>>2] = $75;
       $78 = $$pre$i;
      } else {
       $78 = $166;
      }
      $76 = (($ch$13$i) + 1)|0;
      $77 = ($76|0)<($78|0);
      if ($77) {
       $166 = $78;$ch$13$i = $76;
      } else {
       $167 = $78;
       break;
      }
     }
    } else {
     $167 = $71;
    }
    $79 = (($gr$15$i) + 1)|0;
    $80 = ($79|0)<($34|0);
    if ($80) {
     $71 = $167;$gr$15$i = $79;
    } else {
     break;
    }
   }
  }
  $81 = ($analog_silence$1$lcssa$i|0)==(0);
  if ($81) {
   $136 = $164;$83 = $34;$analog_silence$0$lcssa2628$i = 0;
  } else {
   $165 = $34;$analog_silence$0$lcssa2627$i = $analog_silence$1$lcssa$i;
   label = 21;
  }
 } else {
  $165 = $27;$analog_silence$0$lcssa2627$i = 1;
  label = 21;
 }
 if ((label|0) == 21) {
  $136 = 0;$83 = $165;$analog_silence$0$lcssa2628$i = $analog_silence$0$lcssa2627$i;
 }
 $82 = ($83|0)>(0);
 if ($82) {
  $84 = (($gfc) + 72|0);
  $85 = (($gfc) + 85824|0);
  $86 = (($gfc) + 85096|0);
  $$pre42 = HEAP32[$84>>2]|0;
  $168 = $83;$88 = $$pre42;$gr$022 = 0;
  while(1) {
   $87 = ($88|0)>(0);
   if ($87) {
    $ch$019 = 0;
    while(1) {
     $89 = (((($gfc) + (($gr$022*10504)|0)|0) + (($ch$019*5252)|0)|0) + 304|0);
     $90 = ((($xrpow) + (($gr$022*4608)|0)|0) + (($ch$019*2304)|0)|0);
     HEAPF32[$sum$i>>2] = 0.0;
     $91 = (((($gfc) + (($gr$022*10504)|0)|0) + (($ch$019*5252)|0)|0) + 5512|0);
     $92 = HEAP32[$91>>2]|0;
     $93 = (((($gfc) + (($gr$022*10504)|0)|0) + (($ch$019*5252)|0)|0) + 5068|0);
     HEAPF32[$93>>2] = 0.0;
     $94 = (((($xrpow) + (($gr$022*4608)|0)|0) + (($ch$019*2304)|0)|0) + ($92<<2)|0);
     $95 = (576 - ($92))|0;
     $96 = $95 << 2;
     _memset(($94|0),0,($96|0))|0;
     $97 = HEAP32[$85>>2]|0;
     FUNCTION_TABLE_viiii[$97 & 7]($89,$90,$92,$sum$i);
     $98 = +HEAPF32[$sum$i>>2];
     $99 = $98 > 9.99999968265522538896E-21;
     if ($99) {
      $100 = HEAP32[$86>>2]|0;
      $101 = $100 >>> 1;
      $$lobit$i = $101 & 1;
      $102 = (((($gfc) + (($gr$022*10504)|0)|0) + (($ch$019*5252)|0)|0) + 5168|0);
      $103 = HEAP32[$102>>2]|0;
      $104 = ($103|0)>(0);
      if ($104) {
       $i$01$i = 0;
       while(1) {
        $105 = ((($gfc) + ($i$01$i<<2)|0) + 84936|0);
        HEAP32[$105>>2] = $$lobit$i;
        $106 = (($i$01$i) + 1)|0;
        $107 = HEAP32[$102>>2]|0;
        $108 = ($106|0)<($107|0);
        if ($108) {
         $i$01$i = $106;
        } else {
         break;
        }
       }
      }
     } else {
      $109 = (((($gfc) + (($gr$022*10504)|0)|0) + (($ch$019*5252)|0)|0) + 2608|0);
      _memset(($109|0),0,2304)|0;
      $110 = ((($max_bits) + ($gr$022<<3)|0) + ($ch$019<<2)|0);
      HEAP32[$110>>2] = 0;
     }
     $111 = (($ch$019) + 1)|0;
     $112 = HEAP32[$84>>2]|0;
     $113 = ($111|0)<($112|0);
     if ($113) {
      $ch$019 = $111;
     } else {
      break;
     }
    }
    $$pre43 = HEAP32[$26>>2]|0;
    $116 = $$pre43;$169 = $112;
   } else {
    $116 = $168;$169 = $88;
   }
   $114 = (($gr$022) + 1)|0;
   $115 = ($114|0)<($116|0);
   if ($115) {
    $168 = $116;$88 = $169;$gr$022 = $114;
   } else {
    break;
   }
  }
 }
 $117 = (_VBR_encode_frame($gfc,$xrpow,$l3_xmin,$max_bits)|0);
 $118 = HEAP32[$0>>2]|0;
 $119 = ($118|0)==(0);
 do {
  if ($119) {
   $120 = ($analog_silence$0$lcssa2628$i|0)==(0);
   if ($120) {
    label = 35;
   } else {
    $121 = (($gfc) + 124|0);
    $122 = HEAP32[$121>>2]|0;
    $123 = ($122|0)==(0);
    if ($123) {
     $i$0$ph = 1;
    } else {
     label = 35;
    }
   }
   if ((label|0) == 35) {
    $124 = (($gfc) + 112|0);
    $125 = HEAP32[$124>>2]|0;
    $i$0$ph = $125;
   }
   $126 = (($gfc) + 116|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = ($i$0$ph|0)<($127|0);
   L61: do {
    if ($128) {
     $i$012 = $i$0$ph;
     while(1) {
      $131 = (($frameBits) + ($i$012<<2)|0);
      $132 = HEAP32[$131>>2]|0;
      $133 = ($117|0)>($132|0);
      $130 = (($i$012) + 1)|0;
      if (!($133)) {
       $i$0$lcssa = $i$012;
       break L61;
      }
      $129 = ($130|0)<($127|0);
      if ($129) {
       $i$012 = $130;
      } else {
       $i$0$lcssa = $130;
       break;
      }
     }
    } else {
     $i$0$lcssa = $i$0$ph;
    }
   } while(0);
   $134 = ($i$0$lcssa|0)>($127|0);
   $$i$0 = $134 ? $127 : $i$0$lcssa;
   $135 = ($136|0)>(0);
   if (!($135)) {
    $145 = (($gfc) + 84744|0);
    HEAP32[$145>>2] = $$i$0;
    $148 = $$i$0;
    break;
   }
   $137 = ($127|0)>($$i$0|0);
   L69: do {
    if ($137) {
     $j$07 = $127;
     while(1) {
      $140 = (($frameBits) + ($j$07<<2)|0);
      $141 = HEAP32[$140>>2]|0;
      $142 = (($141) - ($117))|0;
      $143 = ($142|0)>($136|0);
      $139 = (($j$07) + -1)|0;
      if (!($143)) {
       $j$0$lcssa = $j$07;
       break L69;
      }
      $138 = ($139|0)>($$i$0|0);
      if ($138) {
       $j$07 = $139;
      } else {
       $j$0$lcssa = $139;
       break;
      }
     }
    } else {
     $j$0$lcssa = $127;
    }
   } while(0);
   $144 = (($gfc) + 84744|0);
   HEAP32[$144>>2] = $j$0$lcssa;
   $148 = $j$0$lcssa;
  } else {
   $146 = (($gfc) + 84744|0);
   HEAP32[$146>>2] = 0;
   $148 = 0;
  }
 } while(0);
 $147 = (($frameBits) + ($148<<2)|0);
 $149 = HEAP32[$147>>2]|0;
 $150 = ($117|0)>($149|0);
 if ($150) {
  _lame_errorf($gfc,64560,$vararg_buffer);
  _exit(-1);
  // unreachable;
 }
 (_ResvFrameBegin($gfc,$mean_bits)|0);
 $151 = HEAP32[$26>>2]|0;
 $152 = ($151|0)>(0);
 if (!($152)) {
  $163 = HEAP32[$mean_bits>>2]|0;
  _ResvFrameEnd($gfc,$163);
  STACKTOP = sp;return;
 }
 $153 = (($gfc) + 72|0);
 $$pre = HEAP32[$153>>2]|0;
 $155 = $$pre;$170 = $151;$gr$13 = 0;
 while(1) {
  $154 = ($155|0)>(0);
  if ($154) {
   $ch$12 = 0;
   while(1) {
    $156 = (((($gfc) + (($gr$13*10504)|0)|0) + (($ch$12*5252)|0)|0) + 304|0);
    _ResvAdjust($gfc,$156);
    $157 = (($ch$12) + 1)|0;
    $158 = HEAP32[$153>>2]|0;
    $159 = ($157|0)<($158|0);
    if ($159) {
     $ch$12 = $157;
    } else {
     break;
    }
   }
   $$pre41 = HEAP32[$26>>2]|0;
   $162 = $$pre41;$171 = $158;
  } else {
   $162 = $170;$171 = $155;
  }
  $160 = (($gr$13) + 1)|0;
  $161 = ($160|0)<($162|0);
  if ($161) {
   $155 = $171;$170 = $162;$gr$13 = $160;
  } else {
   break;
  }
 }
 $163 = HEAP32[$mean_bits>>2]|0;
 _ResvFrameEnd($gfc,$163);
 STACKTOP = sp;return;
}
function _ABR_iteration_loop($gfc,$pe,$ms_ener_ratio,$ratio) {
 $gfc = $gfc|0;
 $pe = $pe|0;
 $ms_ener_ratio = $ms_ener_ratio|0;
 $ratio = $ratio|0;
 var $$$i = 0, $$add_bits$0$i = 0, $$lobit$i = 0, $$pre = 0, $$pre37$i = 0, $$pre43$i = 0, $$pre44$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0.0;
 var $146 = 0.0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add_bits$0$i = 0, $add_bits$1$i = 0, $ch$021$i = 0;
 var $ch$03 = 0, $ch$128$i = 0, $ch$27$i = 0, $ch$32$i = 0, $exitcond$i = 0, $gr$030$i = 0, $gr$05 = 0, $gr$213$i = 0, $gr$34$i = 0, $i$01$i = 0, $i$01$i1 = 0, $l3_xmin = 0, $masking_lower_db$0 = 0.0, $masking_lower_db$0$in = 0, $mean_bits = 0, $mean_bits$i = 0, $or$cond$i = 0, $res_factor$0$i = 0.0, $res_factor$1$i = 0.0, $sum$022$i = 0;
 var $sum$i = 0, $targ_bits = 0, $totbits$012$i = 0, $totbits$1$lcssa$i = 0, $totbits$18$i = 0, $xrpow = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2496|0;
 $sum$i = sp + 2488|0;
 $mean_bits$i = sp + 2484|0;
 $l3_xmin = sp + 2328|0;
 $xrpow = sp + 24|0;
 $targ_bits = sp + 8|0;
 $mean_bits = sp;
 $0 = (($gfc) + 304|0);
 HEAP32[$mean_bits>>2] = 0;
 $1 = (($gfc) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($gfc) + 116|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($gfc) + 84744|0);
 HEAP32[$5>>2] = $4;
 $6 = (_ResvFrameBegin($gfc,$mean_bits$i)|0);
 HEAP32[$5>>2] = 1;
 $7 = (_getframebits($gfc)|0);
 $8 = (($gfc) + 24|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 << 3;
 $11 = (($7) - ($10))|0;
 $12 = HEAP32[$1>>2]|0;
 $13 = (($gfc) + 72|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = Math_imul($14, $12)|0;
 $16 = (($11|0) / ($15|0))&-1;
 $17 = (($gfc) + 108|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($2*576000)|0;
 $20 = Math_imul($19, $18)|0;
 HEAP32[$mean_bits$i>>2] = $20;
 $21 = (($gfc) + 85096|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $22 & 1;
 $24 = ($23|0)==(0);
 if ($24) {
  $31 = $20;
 } else {
  $25 = (+($20|0));
  $26 = $25 * 1.09000000000000007994;
  $27 = (~~(($26)));
  HEAP32[$mean_bits$i>>2] = $27;
  $31 = $27;
 }
 $28 = (($gfc) + 64|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (($31|0) / ($29|0))&-1;
 $32 = (($30) - ($10))|0;
 $33 = (($32|0) / ($15|0))&-1;
 HEAP32[$mean_bits$i>>2] = $33;
 $34 = (($gfc) + 244|0);
 $35 = +HEAPF32[$34>>2];
 $36 = $35;
 $37 = 11.0 - $36;
 $38 = $37 * 0.0127272727272727276954;
 $39 = $38 + 0.93000000000000004885;
 $40 = $39;
 $41 = $40;
 $42 = $41 < 0.900000000000000022204;
 $res_factor$0$i = $42 ? 0.899999976158142089843 : $40;
 $43 = ($12|0)>(0);
 if ($43) {
  $44 = $res_factor$0$i > 1.0;
  $res_factor$1$i = $44 ? 1.0 : $res_factor$0$i;
  $45 = (+($33|0));
  $46 = $45 * $res_factor$1$i;
  $47 = (~~(($46)));
  $48 = (($33|0) / 2)&-1;
  $49 = ($33*3)|0;
  $50 = (($49|0) / 2)&-1;
  $gr$030$i = 0;
  while(1) {
   $51 = ($14|0)>(0);
   if ($51) {
    $ch$021$i = 0;$sum$022$i = 0;
    while(1) {
     $52 = ((($targ_bits) + ($gr$030$i<<3)|0) + ($ch$021$i<<2)|0);
     HEAP32[$52>>2] = $47;
     $53 = ((($pe) + ($gr$030$i<<3)|0) + ($ch$021$i<<2)|0);
     $54 = +HEAPF32[$53>>2];
     $55 = $54 > 700.0;
     if ($55) {
      $56 = $54 + -700.0;
      $57 = $56;
      $58 = $57 * 0.714285714285714301575;
      $59 = (~~(($58)));
      HEAP32[$52>>2] = $47;
      $60 = (((($gfc) + (($gr$030$i*10504)|0)|0) + (($ch$021$i*5252)|0)|0) + 5092|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(2);
      if ($62) {
       $63 = ($59|0)<($48|0);
       $$$i = $63 ? $48 : $59;
       $add_bits$0$i = $$$i;
      } else {
       $add_bits$0$i = $59;
      }
      $64 = ($add_bits$0$i|0)>($50|0);
      if ($64) {
       $add_bits$1$i = $50;
      } else {
       $65 = ($add_bits$0$i|0)<(0);
       $$add_bits$0$i = $65 ? 0 : $add_bits$0$i;
       $add_bits$1$i = $$add_bits$0$i;
      }
      $66 = (($add_bits$1$i) + ($47))|0;
      HEAP32[$52>>2] = $66;
      $68 = $66;
     } else {
      $68 = $47;
     }
     $67 = ($68|0)>(4095);
     if ($67) {
      HEAP32[$52>>2] = 4095;
      $70 = 4095;
     } else {
      $70 = $68;
     }
     $69 = (($70) + ($sum$022$i))|0;
     $71 = (($ch$021$i) + 1)|0;
     $72 = ($71|0)<($14|0);
     if ($72) {
      $ch$021$i = $71;$sum$022$i = $69;
     } else {
      break;
     }
    }
    $73 = ($69|0)>(7680);
    if ($73) {
     $ch$128$i = 0;
     while(1) {
      $74 = ((($targ_bits) + ($gr$030$i<<3)|0) + ($ch$128$i<<2)|0);
      $75 = HEAP32[$74>>2]|0;
      $76 = ($75*7680)|0;
      $77 = (($76|0) / ($69|0))&-1;
      HEAP32[$74>>2] = $77;
      $78 = (($ch$128$i) + 1)|0;
      $79 = ($78|0)<($14|0);
      if ($79) {
       $ch$128$i = $78;
      } else {
       break;
      }
     }
    }
   }
   $80 = (($gr$030$i) + 1)|0;
   $81 = ($80|0)<($12|0);
   if ($81) {
    $gr$030$i = $80;
   } else {
    break;
   }
  }
 }
 $82 = (($gfc) + 84756|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = ($83|0)==(2);
 if ($84) {
  if ($43) {
   $85 = +HEAPF32[$ms_ener_ratio>>2];
   $86 = Math_imul($33, $14)|0;
   _reduce_side($targ_bits,$85,$86,7680);
   $87 = HEAP32[$1>>2]|0;
   $88 = ($87|0)>(1);
   if ($88) {
    $92 = 1;
    while(1) {
     $$pre43$i = HEAP32[$mean_bits$i>>2]|0;
     $$pre44$i = HEAP32[$13>>2]|0;
     $91 = (($targ_bits) + ($92<<3)|0);
     $93 = (($ms_ener_ratio) + ($92<<2)|0);
     $94 = +HEAPF32[$93>>2];
     $95 = Math_imul($$pre43$i, $$pre44$i)|0;
     _reduce_side($91,$94,$95,7680);
     $96 = (($92) + 1)|0;
     $97 = HEAP32[$1>>2]|0;
     $98 = ($96|0)<($97|0);
     if ($98) {
      $92 = $96;
     } else {
      $90 = $97;
      label = 21;
      break;
     }
    }
   } else {
    $90 = $87;
    label = 21;
   }
  }
 } else {
  $90 = $12;
  label = 21;
 }
 if ((label|0) == 21) {
  $89 = ($90|0)>(0);
  if ($89) {
   $$pre37$i = HEAP32[$13>>2]|0;
   $gr$213$i = 0;$totbits$012$i = 0;
   while(1) {
    $99 = ($$pre37$i|0)>(0);
    if ($99) {
     $ch$27$i = 0;$totbits$18$i = $totbits$012$i;
     while(1) {
      $100 = ((($targ_bits) + ($gr$213$i<<3)|0) + ($ch$27$i<<2)|0);
      $101 = HEAP32[$100>>2]|0;
      $102 = ($101|0)>(4095);
      if ($102) {
       HEAP32[$100>>2] = 4095;
       $104 = 4095;
      } else {
       $104 = $101;
      }
      $103 = (($104) + ($totbits$18$i))|0;
      $105 = (($ch$27$i) + 1)|0;
      $106 = ($105|0)<($$pre37$i|0);
      if ($106) {
       $ch$27$i = $105;$totbits$18$i = $103;
      } else {
       $totbits$1$lcssa$i = $103;
       break;
      }
     }
    } else {
     $totbits$1$lcssa$i = $totbits$012$i;
    }
    $107 = (($gr$213$i) + 1)|0;
    $108 = ($107|0)<($90|0);
    if ($108) {
     $gr$213$i = $107;$totbits$012$i = $totbits$1$lcssa$i;
    } else {
     break;
    }
   }
   $109 = ($totbits$1$lcssa$i|0)>($6|0);
   $110 = ($totbits$1$lcssa$i|0)>(0);
   $or$cond$i = $109 & $110;
   if ($or$cond$i) {
    $gr$34$i = 0;
    while(1) {
     $111 = ($$pre37$i|0)>(0);
     if ($111) {
      $ch$32$i = 0;
      while(1) {
       $112 = ((($targ_bits) + ($gr$34$i<<3)|0) + ($ch$32$i<<2)|0);
       $113 = HEAP32[$112>>2]|0;
       $114 = Math_imul($113, $6)|0;
       $115 = (($114|0) / ($totbits$1$lcssa$i|0))&-1;
       HEAP32[$112>>2] = $115;
       $116 = (($ch$32$i) + 1)|0;
       $117 = ($116|0)<($$pre37$i|0);
       if ($117) {
        $ch$32$i = $116;
       } else {
        break;
       }
      }
     }
     $118 = (($gr$34$i) + 1)|0;
     $119 = ($118|0)<($90|0);
     if ($119) {
      $gr$34$i = $118;
     } else {
      break;
     }
    }
   }
   $120 = ($90|0)>(0);
   if ($120) {
    $121 = (($gfc) + 84912|0);
    $122 = (($gfc) + 84916|0);
    $123 = (($gfc) + 84908|0);
    $124 = (($gfc) + 85824|0);
    $125 = (($gfc) + 36|0);
    $gr$05 = 0;
    while(1) {
     $126 = HEAP32[$82>>2]|0;
     $127 = ($126|0)==(2);
     if ($127) {
      $i$01$i = 0;
      while(1) {
       $128 = (((($gfc) + (($gr$05*10504)|0)|0) + ($i$01$i<<2)|0) + 304|0);
       $129 = +HEAPF32[$128>>2];
       $130 = (((($gfc) + (($gr$05*10504)|0)|0) + ($i$01$i<<2)|0) + 5556|0);
       $131 = +HEAPF32[$130>>2];
       $132 = $129 + $131;
       $133 = $132 * 0.707106769084930419921;
       HEAPF32[$128>>2] = $133;
       $134 = $129 - $131;
       $135 = $134 * 0.707106769084930419921;
       HEAPF32[$130>>2] = $135;
       $136 = (($i$01$i) + 1)|0;
       $exitcond$i = ($136|0)==(576);
       if ($exitcond$i) {
        break;
       } else {
        $i$01$i = $136;
       }
      }
     }
     $137 = HEAP32[$13>>2]|0;
     $138 = ($137|0)>(0);
     if ($138) {
      $ch$03 = 0;
      while(1) {
       $139 = (((($gfc) + (($gr$05*10504)|0)|0) + (($ch$03*5252)|0)|0) + 304|0);
       $140 = (((($gfc) + (($gr$05*10504)|0)|0) + (($ch$03*5252)|0)|0) + 5092|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(2);
       $masking_lower_db$0$in = $142 ? $122 : $121;
       $masking_lower_db$0 = +HEAPF32[$masking_lower_db$0$in>>2];
       $143 = $masking_lower_db$0;
       $144 = $143 * 0.100000000000000005551;
       $145 = (+Math_pow(10.0,(+$144)));
       $146 = $145;
       HEAPF32[$123>>2] = $146;
       _init_outer_loop($gfc,$139);
       HEAPF32[$sum$i>>2] = 0.0;
       $147 = (((($gfc) + (($gr$05*10504)|0)|0) + (($ch$03*5252)|0)|0) + 5512|0);
       $148 = HEAP32[$147>>2]|0;
       $149 = (((($gfc) + (($gr$05*10504)|0)|0) + (($ch$03*5252)|0)|0) + 5068|0);
       HEAPF32[$149>>2] = 0.0;
       $150 = (($xrpow) + ($148<<2)|0);
       $151 = (576 - ($148))|0;
       $152 = $151 << 2;
       _memset(($150|0),0,($152|0))|0;
       $153 = HEAP32[$124>>2]|0;
       FUNCTION_TABLE_viiii[$153 & 7]($139,$xrpow,$148,$sum$i);
       $154 = +HEAPF32[$sum$i>>2];
       $155 = $154 > 9.99999968265522538896E-21;
       if ($155) {
        $156 = HEAP32[$21>>2]|0;
        $157 = $156 >>> 1;
        $$lobit$i = $157 & 1;
        $158 = (((($gfc) + (($gr$05*10504)|0)|0) + (($ch$03*5252)|0)|0) + 5168|0);
        $159 = HEAP32[$158>>2]|0;
        $160 = ($159|0)>(0);
        if ($160) {
         $i$01$i1 = 0;
         while(1) {
          $161 = ((($gfc) + ($i$01$i1<<2)|0) + 84936|0);
          HEAP32[$161>>2] = $$lobit$i;
          $162 = (($i$01$i1) + 1)|0;
          $163 = HEAP32[$158>>2]|0;
          $164 = ($162|0)<($163|0);
          if ($164) {
           $i$01$i1 = $162;
          } else {
           break;
          }
         }
        }
        $166 = ((($ratio) + (($gr$05*976)|0)|0) + (($ch$03*488)|0)|0);
        $167 = (_calc_xmin($gfc,$166,$139,$l3_xmin)|0);
        $168 = ($167|0)==(0);
        $169 = ((($targ_bits) + ($gr$05<<3)|0) + ($ch$03<<2)|0);
        if ($168) {
         HEAP32[$169>>2] = $16;
         $170 = $16;
        } else {
         $$pre = HEAP32[$169>>2]|0;
         $170 = $$pre;
        }
        (_outer_loop($gfc,$139,$l3_xmin,$xrpow,$ch$03,$170)|0);
       } else {
        $165 = (((($gfc) + (($gr$05*10504)|0)|0) + (($ch$03*5252)|0)|0) + 2608|0);
        _memset(($165|0),0,2304)|0;
       }
       _best_scalefac_store($gfc,$gr$05,$ch$03,$0);
       $171 = HEAP32[$125>>2]|0;
       $172 = ($171|0)==(1);
       if ($172) {
        _best_huffman_divide($gfc,$139);
       }
       _ResvAdjust($gfc,$139);
       $173 = (($ch$03) + 1)|0;
       $174 = HEAP32[$13>>2]|0;
       $175 = ($173|0)<($174|0);
       if ($175) {
        $ch$03 = $173;
       } else {
        break;
       }
      }
     }
     $176 = (($gr$05) + 1)|0;
     $177 = HEAP32[$1>>2]|0;
     $178 = ($176|0)<($177|0);
     if ($178) {
      $gr$05 = $176;
     } else {
      break;
     }
    }
   }
  }
 }
 $179 = (($gfc) + 112|0);
 $180 = HEAP32[$179>>2]|0;
 HEAP32[$5>>2] = $180;
 $181 = HEAP32[$3>>2]|0;
 $182 = ($180|0)>($181|0);
 if ($182) {
  $189 = HEAP32[$mean_bits>>2]|0;
  _ResvFrameEnd($gfc,$189);
  STACKTOP = sp;return;
 }
 while(1) {
  $183 = (_ResvFrameBegin($gfc,$mean_bits)|0);
  $184 = ($183|0)>(-1);
  if ($184) {
   label = 53;
   break;
  }
  $185 = HEAP32[$5>>2]|0;
  $186 = (($185) + 1)|0;
  HEAP32[$5>>2] = $186;
  $187 = HEAP32[$3>>2]|0;
  $188 = ($185|0)<($187|0);
  if (!($188)) {
   label = 53;
   break;
  }
 }
 if ((label|0) == 53) {
  $189 = HEAP32[$mean_bits>>2]|0;
  _ResvFrameEnd($gfc,$189);
  STACKTOP = sp;return;
 }
}
function _init_outer_loop($gfc,$cod_info) {
 $gfc = $gfc|0;
 $cod_info = $cod_info|0;
 var $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0.0, $116 = 0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0, $148 = 0.0, $149 = 0.0, $15 = 0;
 var $150 = 0.0, $151 = 0.0, $152 = 0, $153 = 0.0, $154 = 0, $155 = 0, $156 = 0.0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0.0, $172 = 0, $173 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ath12$0$i = 0.0, $ath21$0$i = 0.0, $block$010$i = 0, $exitcond = 0;
 var $exitcond$i = 0, $exitcond19 = 0, $exitcond19$1 = 0, $exitcond19$2 = 0, $exitcond21 = 0, $exitcond22 = 0, $fabsf$i = 0.0, $fabsf2$i = 0.0, $gsfb$021$i = 0, $gsfb1$07$i = 0, $ix$012 = 0, $ix$1$lcssa = 0, $ix$26$us = 0, $ix$26$us$1 = 0, $ix$26$us$2 = 0, $ixwork = 0, $j$012$i = 0, $j$012$in$i = 0, $j$04 = 0, $j5$05$i = 0;
 var $j5$05$in$i = 0, $l$07$us = 0, $l$07$us$1 = 0, $l$07$us$2 = 0, $scevgep = 0, $scevgep$1 = 0, $scevgep$1$sum = 0, $scevgep$2 = 0, $scevgep$sum = 0, $sfb$017 = 0, $sfb$113 = 0, $sfb$25 = 0, $storemerge = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2304|0;
 $ixwork = sp;
 $0 = (($cod_info) + 4768|0);
 HEAP32[$0>>2] = 0;
 $1 = (($cod_info) + 4772|0);
 HEAP32[$1>>2] = 0;
 $2 = (($cod_info) + 4776|0);
 HEAP32[$2>>2] = 0;
 $3 = (($cod_info) + 4780|0);
 HEAP32[$3>>2] = 210;
 $4 = (($cod_info) + 4784|0);
 HEAP32[$4>>2] = 0;
 $5 = (($cod_info) + 4796|0);
 $6 = (($gfc) + 64|0);
 dest=$5+0|0; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)<(8001);
 $9 = (($cod_info) + 4848|0);
 if ($8) {
  HEAP32[$9>>2] = 17;
  $10 = (($cod_info) + 4852|0);
  HEAP32[$10>>2] = 9;
  $11 = (($cod_info) + 4856|0);
  HEAP32[$11>>2] = 17;
  $20 = 17;$22 = 17;
 } else {
  HEAP32[$9>>2] = 21;
  $12 = (($cod_info) + 4852|0);
  HEAP32[$12>>2] = 12;
  $13 = (($gfc) + 85092|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)!=(0);
  $16 = $15 ? 22 : 21;
  $17 = (($cod_info) + 4856|0);
  HEAP32[$17>>2] = $16;
  $20 = $16;$22 = 21;
 }
 $18 = (($cod_info) + 4856|0);
 $19 = (($cod_info) + 4864|0);
 HEAP32[$19>>2] = $20;
 $21 = (($cod_info) + 4860|0);
 HEAP32[$21>>2] = $22;
 $23 = (($cod_info) + 4868|0);
 HEAP32[$23>>2] = 11;
 $sfb$017 = 0;
 while(1) {
  $24 = (($sfb$017) + 1)|0;
  $25 = ((($gfc) + ($24<<2)|0) + 21360|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ((($gfc) + ($sfb$017<<2)|0) + 21360|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($26) - ($28))|0;
  $30 = ((($cod_info) + ($sfb$017<<2)|0) + 4872|0);
  HEAP32[$30>>2] = $29;
  $31 = ((($cod_info) + ($sfb$017<<2)|0) + 5028|0);
  HEAP32[$31>>2] = 3;
  $exitcond22 = ($24|0)==(22);
  if ($exitcond22) {
   break;
  } else {
   $sfb$017 = $24;
  }
 }
 $32 = (($cod_info) + 4788|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)==(2);
 L8: do {
  if ($34) {
   $35 = (($cod_info) + 4852|0);
   HEAP32[$35>>2] = 0;
   HEAP32[$9>>2] = 0;
   $36 = (($cod_info) + 4792|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ($37|0)==(0);
   if ($38) {
    $46 = 0;$49 = 0;
   } else {
    HEAP32[$35>>2] = 3;
    $39 = (($gfc) + 76|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = $40 << 1;
    $42 = (($41) + 4)|0;
    HEAP32[$9>>2] = $42;
    $46 = 3;$49 = $42;
   }
   $43 = HEAP32[$6>>2]|0;
   $44 = ($43|0)<(8001);
   if ($44) {
    $45 = (9 - ($46))|0;
    $47 = ($45*3)|0;
    $48 = (($47) + ($49))|0;
    HEAP32[$19>>2] = $48;
    $storemerge = $48;
   } else {
    $50 = (($gfc) + 85092|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = ($51|0)!=(0);
    $53 = $52 ? 13 : 12;
    $54 = (($53) - ($46))|0;
    $55 = ($54*3)|0;
    $56 = (($55) + ($49))|0;
    HEAP32[$19>>2] = $56;
    $57 = (12 - ($46))|0;
    $58 = ($57*3)|0;
    $59 = (($58) + ($49))|0;
    $storemerge = $59;
   }
   HEAP32[$21>>2] = $storemerge;
   $60 = (($storemerge) + -18)|0;
   HEAP32[$23>>2] = $60;
   HEAP32[$18>>2] = $49;
   $61 = ((($gfc) + ($49<<2)|0) + 21360|0);
   $62 = HEAP32[$61>>2]|0;
   _memcpy(($ixwork|0),($cod_info|0),2304)|0;
   $63 = (($cod_info) + ($62<<2)|0);
   $$phi$trans$insert = ((($gfc) + ($46<<2)|0) + 21452|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $68 = $$pre;$ix$012 = $63;$sfb$113 = $46;
   while(1) {
    $64 = (($sfb$113) + 1)|0;
    $65 = ((($gfc) + ($64<<2)|0) + 21452|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = ($68|0)<($66|0);
    if ($67) {
     $74 = (($66) - ($68))|0;
     $ix$26$us = $ix$012;$l$07$us = $68;
     while(1) {
      $69 = ($l$07$us*3)|0;
      $70 = (($ixwork) + ($69<<2)|0);
      $71 = +HEAPF32[$70>>2];
      $72 = (($ix$26$us) + 4|0);
      HEAPF32[$ix$26$us>>2] = $71;
      $73 = (($l$07$us) + 1)|0;
      $exitcond19 = ($73|0)==($66|0);
      if ($exitcond19) {
       break;
      } else {
       $ix$26$us = $72;$l$07$us = $73;
      }
     }
     $scevgep = (($ix$012) + ($74<<2)|0);
     $ix$26$us$1 = $scevgep;$l$07$us$1 = $68;
     while(1) {
      $162 = ($l$07$us$1*3)|0;
      $163 = (($162) + 1)|0;
      $164 = (($ixwork) + ($163<<2)|0);
      $165 = +HEAPF32[$164>>2];
      $166 = (($ix$26$us$1) + 4|0);
      HEAPF32[$ix$26$us$1>>2] = $165;
      $167 = (($l$07$us$1) + 1)|0;
      $exitcond19$1 = ($167|0)==($66|0);
      if ($exitcond19$1) {
       break;
      } else {
       $ix$26$us$1 = $166;$l$07$us$1 = $167;
      }
     }
     $scevgep$sum = $74 << 1;
     $scevgep$1 = (($ix$012) + ($scevgep$sum<<2)|0);
     $ix$26$us$2 = $scevgep$1;$l$07$us$2 = $68;
     while(1) {
      $168 = ($l$07$us$2*3)|0;
      $169 = (($168) + 2)|0;
      $170 = (($ixwork) + ($169<<2)|0);
      $171 = +HEAPF32[$170>>2];
      $172 = (($ix$26$us$2) + 4|0);
      HEAPF32[$ix$26$us$2>>2] = $171;
      $173 = (($l$07$us$2) + 1)|0;
      $exitcond19$2 = ($173|0)==($66|0);
      if ($exitcond19$2) {
       break;
      } else {
       $ix$26$us$2 = $172;$l$07$us$2 = $173;
      }
     }
     $scevgep$1$sum = (($scevgep$sum) + ($74))|0;
     $scevgep$2 = (($ix$012) + ($scevgep$1$sum<<2)|0);
     $ix$1$lcssa = $scevgep$2;
    } else {
     $ix$1$lcssa = $ix$012;
    }
    $exitcond21 = ($64|0)==(13);
    if ($exitcond21) {
     $j$04 = $49;$sfb$25 = $46;
     break;
    } else {
     $68 = $66;$ix$012 = $ix$1$lcssa;$sfb$113 = $64;
    }
   }
   while(1) {
    $75 = (($sfb$25) + 1)|0;
    $76 = ((($gfc) + ($75<<2)|0) + 21452|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = ((($gfc) + ($sfb$25<<2)|0) + 21452|0);
    $79 = HEAP32[$78>>2]|0;
    $80 = (($77) - ($79))|0;
    $81 = (($j$04) + 2)|0;
    $82 = ((($cod_info) + ($81<<2)|0) + 4872|0);
    HEAP32[$82>>2] = $80;
    $83 = (($j$04) + 1)|0;
    $84 = ((($cod_info) + ($83<<2)|0) + 4872|0);
    HEAP32[$84>>2] = $80;
    $85 = ((($cod_info) + ($j$04<<2)|0) + 4872|0);
    HEAP32[$85>>2] = $80;
    $86 = ((($cod_info) + ($j$04<<2)|0) + 5028|0);
    HEAP32[$86>>2] = 0;
    $87 = ((($cod_info) + ($83<<2)|0) + 5028|0);
    HEAP32[$87>>2] = 1;
    $88 = ((($cod_info) + ($81<<2)|0) + 5028|0);
    HEAP32[$88>>2] = 2;
    $exitcond = ($75|0)==(13);
    if ($exitcond) {
     break L8;
    }
    $89 = (($j$04) + 3)|0;
    $j$04 = $89;$sfb$25 = $75;
   }
  }
 } while(0);
 $90 = (($cod_info) + 5184|0);
 HEAP32[$90>>2] = 0;
 $91 = (($cod_info) + 5188|0);
 HEAP32[$91>>2] = 64616;
 $92 = (($cod_info) + 5192|0);
 $93 = (($cod_info) + 5208|0);
 ;HEAP32[$92+0>>2]=0|0;HEAP32[$92+4>>2]=0|0;HEAP32[$92+8>>2]=0|0;HEAP32[$92+12>>2]=0|0;
 HEAP32[$93>>2] = 575;
 $94 = (($cod_info) + 4608|0);
 _memset(($94|0),0,156)|0;
 $95 = (($gfc) + 104|0);
 $96 = HEAP32[$95>>2]|0;
 if ((($96|0) == 0) | (($96|0) == 3) | (($96|0) == 4) | (($96|0) == 1)) {
  STACKTOP = sp;return;
 }
 $97 = (($gfc) + 85796|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = HEAP32[$32>>2]|0;
 $100 = ($99|0)==(2);
 if (!($100)) {
  $101 = (($98) + 8|0);
  $102 = (($98) + 20|0);
  $103 = (($gfc) + 84852|0);
  $gsfb$021$i = 5;
  L40: while(1) {
   $110 = ((($gfc) + ($gsfb$021$i<<2)|0) + 21508|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = (($gsfb$021$i) + 1)|0;
   $113 = ((($gfc) + ($112<<2)|0) + 21508|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = +HEAPF32[$101>>2];
   $116 = ((($98) + ($gsfb$021$i<<2)|0) + 164|0);
   $117 = +HEAPF32[$116>>2];
   $118 = +HEAPF32[$102>>2];
   $119 = (+_athAdjust($115,$117,$118,0.0));
   $120 = +HEAPF32[$103>>2];
   $121 = $120 > 9.9999999600419720025E-13;
   if ($121) {
    $122 = $119 * $120;
    $ath21$0$i = $122;
   } else {
    $ath21$0$i = $119;
   }
   $123 = ($114|0)>($111|0);
   if ($123) {
    $j$012$in$i = $114;
    while(1) {
     $j$012$i = (($j$012$in$i) + -1)|0;
     $124 = (($cod_info) + ($j$012$i<<2)|0);
     $125 = +HEAPF32[$124>>2];
     $fabsf2$i = (+Math_abs((+$125)));
     $126 = $fabsf2$i < $ath21$0$i;
     if (!($126)) {
      label = 37;
      break L40;
     }
     HEAPF32[$124>>2] = 0.0;
     $127 = ($j$012$i|0)>($111|0);
     if ($127) {
      $j$012$in$i = $j$012$i;
     } else {
      break;
     }
    }
   }
   $128 = (($gsfb$021$i) + -1)|0;
   $129 = ($gsfb$021$i|0)>(0);
   if ($129) {
    $gsfb$021$i = $128;
   } else {
    label = 37;
    break;
   }
  }
  if ((label|0) == 37) {
   STACKTOP = sp;return;
  }
 }
 $104 = (($gfc) + 21500|0);
 $105 = (($gfc) + 21504|0);
 $106 = (($gfc) + 21536|0);
 $107 = (($98) + 8|0);
 $108 = (($98) + 20|0);
 $109 = (($gfc) + 84904|0);
 $block$010$i = 0;
 while(1) {
  $gsfb1$07$i = 5;
  L56: while(1) {
   $130 = HEAP32[$104>>2]|0;
   $131 = ($130*3)|0;
   $132 = HEAP32[$105>>2]|0;
   $133 = (($132) - ($130))|0;
   $134 = Math_imul($133, $block$010$i)|0;
   $135 = (($134) + ($131))|0;
   $136 = ((($gfc) + ($gsfb1$07$i<<2)|0) + 21536|0);
   $137 = HEAP32[$136>>2]|0;
   $138 = HEAP32[$106>>2]|0;
   $139 = (($137) - ($138))|0;
   $140 = (($135) + ($139))|0;
   $141 = (($gsfb1$07$i) + 1)|0;
   $142 = ((($gfc) + ($141<<2)|0) + 21536|0);
   $143 = HEAP32[$142>>2]|0;
   $144 = (($143) - ($137))|0;
   $145 = (($144) + ($140))|0;
   $146 = +HEAPF32[$107>>2];
   $147 = ((($98) + ($gsfb1$07$i<<2)|0) + 188|0);
   $148 = +HEAPF32[$147>>2];
   $149 = +HEAPF32[$108>>2];
   $150 = (+_athAdjust($146,$148,$149,0.0));
   $151 = +HEAPF32[$109>>2];
   $152 = $151 > 9.9999999600419720025E-13;
   if ($152) {
    $153 = $150 * $151;
    $ath12$0$i = $153;
   } else {
    $ath12$0$i = $150;
   }
   $154 = ($144|0)>(0);
   if ($154) {
    $j5$05$in$i = $145;
    while(1) {
     $j5$05$i = (($j5$05$in$i) + -1)|0;
     $155 = (($cod_info) + ($j5$05$i<<2)|0);
     $156 = +HEAPF32[$155>>2];
     $fabsf$i = (+Math_abs((+$156)));
     $157 = $fabsf$i < $ath12$0$i;
     if (!($157)) {
      break L56;
     }
     HEAPF32[$155>>2] = 0.0;
     $158 = ($j5$05$i|0)>($140|0);
     if ($158) {
      $j5$05$in$i = $j5$05$i;
     } else {
      break;
     }
    }
   }
   $159 = (($gsfb1$07$i) + -1)|0;
   $160 = ($gsfb1$07$i|0)>(0);
   if ($160) {
    $gsfb1$07$i = $159;
   } else {
    break;
   }
  }
  $161 = (($block$010$i) + 1)|0;
  $exitcond$i = ($161|0)==(3);
  if ($exitcond$i) {
   break;
  } else {
   $block$010$i = $161;
  }
 }
 STACKTOP = sp;return;
}
function _outer_loop($gfc,$cod_info,$l3_xmin,$xrpow,$ch,$targ_bits) {
 $gfc = $gfc|0;
 $cod_info = $cod_info|0;
 $l3_xmin = $l3_xmin|0;
 $xrpow = $xrpow|0;
 $ch = $ch|0;
 $targ_bits = $targ_bits|0;
 var $$ = 0, $$$$i = 0, $$$flag_GoneOver$3$i = 0, $$$i = 0, $$$i$i = 0.0, $$0 = 0, $$1 = 0, $$1$i$i = 0, $$1$i$i$ = 0, $$flag_GoneOver$0$i = 0, $$flag_GoneOver$01$i = 0, $$flag_GoneOver$3$i = 0, $$lcssa$i = 0, $$not = 0, $$pre = 0.0, $$pre$i = 0, $$pre$i$pre = 0, $$pre$i11$i = 0, $$pre$i5 = 0.0, $$pre$phi42$i$iZ2D = 0;
 var $$pre41$i$i = 0, $$pre58 = 0.0, $$pre59 = 0.0, $$pre60 = 0.0, $$pre61 = 0, $$pre73 = 0, $$s1$0$i$i = 0, $$s2$0$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0;
 var $109 = 0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0.0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0.0, $136 = 0.0, $137 = 0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
 var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
 var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0.0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
 var $253 = 0, $254 = 0.0, $255 = 0.0, $256 = 0, $257 = 0.0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0.0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0;
 var $271 = 0, $272 = 0, $273 = 0, $274 = 0.0, $275 = 0.0, $276 = 0, $277 = 0.0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0;
 var $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
 var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0;
 var $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0.0, $338 = 0, $339 = 0.0, $34 = 0, $340 = 0.0, $341 = 0.0, $342 = 0.0;
 var $343 = 0.0, $344 = 0, $345 = 0.0, $346 = 0.0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0.0, $355 = 0.0, $356 = 0, $357 = 0, $358 = 0.0, $359 = 0.0, $36 = 0, $360 = 0.0;
 var $361 = 0.0, $362 = 0, $363 = 0.0, $364 = 0.0, $365 = 0, $366 = 0.0, $367 = 0.0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0.0, $375 = 0.0, $376 = 0.0, $377 = 0.0, $378 = 0.0, $379 = 0.0;
 var $38 = 0, $380 = 0.0, $381 = 0.0, $382 = 0.0, $383 = 0.0, $384 = 0.0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0.0, $39 = 0, $390 = 0.0, $391 = 0.0, $392 = 0, $393 = 0.0, $394 = 0, $395 = 0.0, $396 = 0.0, $397 = 0;
 var $398 = 0, $399 = 0.0, $4 = 0, $40 = 0, $400 = 0.0, $401 = 0, $402 = 0.0, $403 = 0.0, $404 = 0, $405 = 0, $406 = 0, $407 = 0.0, $408 = 0, $409 = 0.0, $41 = 0, $410 = 0.0, $411 = 0.0, $412 = 0, $413 = 0.0, $414 = 0;
 var $415 = 0.0, $416 = 0, $417 = 0.0, $418 = 0.0, $419 = 0, $42 = 0, $420 = 0, $421 = 0.0, $422 = 0, $423 = 0.0, $424 = 0.0, $425 = 0.0, $426 = 0.0, $427 = 0, $428 = 0, $429 = 0.0, $43 = 0, $430 = 0.0, $431 = 0, $432 = 0.0;
 var $433 = 0.0, $434 = 0, $435 = 0.0, $436 = 0.0, $437 = 0.0, $438 = 0.0, $439 = 0.0, $44 = 0, $440 = 0.0, $441 = 0, $442 = 0, $443 = 0.0, $444 = 0, $445 = 0.0, $446 = 0.0, $447 = 0.0, $448 = 0.0, $449 = 0.0, $45 = 0, $450 = 0.0;
 var $451 = 0.0, $452 = 0.0, $453 = 0, $454 = 0, $455 = 0, $456 = 0.0, $457 = 0.0, $458 = 0, $459 = 0, $46 = 0, $460 = 0.0, $461 = 0.0, $462 = 0.0, $463 = 0.0, $464 = 0, $465 = 0.0, $466 = 0.0, $467 = 0, $468 = 0.0, $469 = 0.0;
 var $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0.0, $474 = 0.0, $475 = 0, $476 = 0, $477 = 0.0, $478 = 0.0, $479 = 0.0, $48 = 0, $480 = 0.0, $481 = 0, $482 = 0.0, $483 = 0.0, $484 = 0, $485 = 0.0, $486 = 0.0, $487 = 0;
 var $488 = 0, $489 = 0.0, $49 = 0, $490 = 0.0, $491 = 0.0, $492 = 0.0, $493 = 0, $494 = 0.0, $495 = 0.0, $496 = 0, $497 = 0.0, $498 = 0.0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0;
 var $505 = 0.0, $506 = 0.0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0;
 var $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0;
 var $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0.0, $548 = 0.0, $549 = 0, $55 = 0, $550 = 0.0, $551 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0, $99 = 0;
 var $CurrentStep$04$i = 0, $CurrentStep$2$i = 0, $CurrentStep$3$i = 0, $Direction$06$i = 0, $Direction$1$i = 0, $age$1 = 0, $age$2 = 0, $bRefine$034 = 0, $best_ggain_pass1$035 = 0, $best_noise_info = 0, $best_part2_3_length$033 = 0, $best_part2_3_length$1 = 0, $best_part2_3_length$2 = 0, $best_part2_3_length$3 = 0, $best_part2_3_length$3$ph = 0, $better$0 = 0, $better$0$i = 0, $better$0$in = 0, $better$1$i = 0, $brmerge = 0;
 var $cod_info_w = 0, $distort = 0, $exitcond$i = 0, $fabs$i$i = 0.0, $fabsf$i = 0.0, $fabsf1$i = 0.0, $fabsf10$i = 0.0, $fabsf11$i = 0.0, $fabsf2$i = 0.0, $fabsf3$i = 0.0, $fabsf4$i = 0.0, $fabsf5$i = 0.0, $fabsf6$i = 0.0, $fabsf7$i = 0.0, $fabsf8$i = 0.0, $fabsf9$i = 0.0, $flag_GoneOver$05$i = 0, $flag_GoneOver$3$i = 0, $j$0$lcssa$i$i = 0, $j$013$i$i = 0;
 var $j$03$i$i = 0, $j$05$i$i = 0, $j$1$i$i = 0, $klemm_noise$0$lcssa$i$i = 0.0, $klemm_noise$02$i$i = 0.0, $l$01$i$i = 0, $l$02$i$i = 0, $l$09$i$i = 0, $l$121$i$i = 0, $nBits$0$lcssa$i = 0, $nBits$02$i = 0, $noise_info = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$not = 0, $or$cond$not$demorgan = 0, $or$cond2 = 0, $or$cond3$i = 0, $or$cond4 = 0, $phitmp$i$i = 0;
 var $prev_noise = 0, $s$0$i$i = 0, $s$1$i$i = 0, $s1$0$lcssa$i$i = 0, $s1$01$i$i = 0, $s2$0$lcssa$i$i = 0, $s2$04$i$i = 0, $save_xrpow = 0, $sfb$01$i$i = 0, $sfb$01$i$i6 = 0, $sfb$01$i4$i = 0, $sfb$02$i$i = 0, $sfb$030$i$i = 0, $sfb$09$i$i = 0, $sfb$1$lcssa$i$i = 0, $sfb$12$i$i = 0, $sfb$13$i$i = 0, $sfb$25$i$i = 0, $sfb$3$lcssa$i$i = 0, $sfb$314$i$i = 0;
 var $sqrt$i$i = 0.0, $status$1$i = 0, $step$0$i = 0, $trigger$0$lcssa$i$i = 0.0, $trigger$010$i$i = 0.0, $trigger$1$i$i = 0.0, $trigger$2$i$i = 0.0, $window$025$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8256|0;
 $cod_info_w = sp + 2992|0;
 $save_xrpow = sp + 688|0;
 $distort = sp + 528|0;
 $best_noise_info = sp + 504|0;
 $prev_noise = sp + 24|0;
 $noise_info = sp;
 $0 = ((($gfc) + ($ch<<2)|0) + 84928|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($gfc) + ($ch<<2)|0) + 84920|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($cod_info) + 4780|0);
 HEAP32[$4>>2] = $3;
 $5 = (($cod_info) + 4844|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($targ_bits) - ($6))|0;
 $8 = (_count_bits($gfc,$xrpow,$cod_info,0)|0);
 $9 = ($1|0)==(1);
 $10 = ($8|0)==($7|0);
 $or$cond3$i = $9 | $10;
 if ($or$cond3$i) {
  $$lcssa$i = $8;
 } else {
  $13 = $8;$CurrentStep$04$i = $1;$Direction$06$i = 0;$flag_GoneOver$05$i = 0;
  while(1) {
   $12 = ($13|0)>($7|0);
   if ($12) {
    $14 = ($Direction$06$i|0)==(2);
    $$flag_GoneOver$0$i = $14 ? 1 : $flag_GoneOver$05$i;
    $15 = ($$flag_GoneOver$0$i|0)==(0);
    if ($15) {
     $CurrentStep$3$i = $CurrentStep$04$i;$Direction$1$i = 1;$flag_GoneOver$3$i = 0;$step$0$i = $CurrentStep$04$i;
    } else {
     $16 = (($CurrentStep$04$i|0) / 2)&-1;
     $CurrentStep$3$i = $16;$Direction$1$i = 1;$flag_GoneOver$3$i = $$flag_GoneOver$0$i;$step$0$i = $16;
    }
   } else {
    $17 = ($Direction$06$i|0)==(1);
    $$flag_GoneOver$01$i = $17 ? 1 : $flag_GoneOver$05$i;
    $18 = ($$flag_GoneOver$01$i|0)==(0);
    if ($18) {
     $CurrentStep$2$i = $CurrentStep$04$i;
    } else {
     $19 = (($CurrentStep$04$i|0) / 2)&-1;
     $CurrentStep$2$i = $19;
    }
    $20 = (0 - ($CurrentStep$2$i))|0;
    $CurrentStep$3$i = $CurrentStep$2$i;$Direction$1$i = 2;$flag_GoneOver$3$i = $$flag_GoneOver$01$i;$step$0$i = $20;
   }
   $21 = HEAP32[$4>>2]|0;
   $22 = (($21) + ($step$0$i))|0;
   $23 = ($22|0)<(0);
   $$$i = $23 ? 0 : $22;
   $$flag_GoneOver$3$i = $23 ? 1 : $flag_GoneOver$3$i;
   $24 = ($$$i|0)>(255);
   $$$$i = $24 ? 255 : $$$i;
   HEAP32[$4>>2] = $$$$i;
   $$$flag_GoneOver$3$i = $24 ? 1 : $$flag_GoneOver$3$i;
   $25 = (_count_bits($gfc,$xrpow,$cod_info,0)|0);
   $26 = ($CurrentStep$3$i|0)==(1);
   $27 = ($25|0)==($7|0);
   $or$cond$i = $26 | $27;
   if ($or$cond$i) {
    $$lcssa$i = $25;
    break;
   } else {
    $13 = $25;$CurrentStep$04$i = $CurrentStep$3$i;$Direction$06$i = $Direction$1$i;$flag_GoneOver$05$i = $$$flag_GoneOver$3$i;
   }
  }
 }
 $11 = ($$lcssa$i|0)>($7|0);
 L13: do {
  if ($11) {
   $nBits$02$i = $$lcssa$i;
   while(1) {
    $28 = HEAP32[$4>>2]|0;
    $29 = ($28|0)<(255);
    if (!($29)) {
     $nBits$0$lcssa$i = $nBits$02$i;
     break L13;
    }
    $30 = (($28) + 1)|0;
    HEAP32[$4>>2] = $30;
    $31 = (_count_bits($gfc,$xrpow,$cod_info,0)|0);
    $32 = ($31|0)>($7|0);
    if ($32) {
     $nBits$02$i = $31;
    } else {
     $nBits$0$lcssa$i = $31;
     break;
    }
   }
  } else {
   $nBits$0$lcssa$i = $$lcssa$i;
  }
 } while(0);
 $33 = HEAP32[$4>>2]|0;
 $34 = (($3) - ($33))|0;
 $35 = ($34|0)>(3);
 $36 = $35 ? 4 : 2;
 HEAP32[$0>>2] = $36;
 $37 = HEAP32[$4>>2]|0;
 HEAP32[$2>>2] = $37;
 $38 = (($cod_info) + 4768|0);
 HEAP32[$38>>2] = $nBits$0$lcssa$i;
 $39 = (($gfc) + 28|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ($40|0)==(0);
 if ($41) {
  $$0 = 100;
  STACKTOP = sp;return ($$0|0);
 }
 _memset(($prev_noise|0),0,476)|0;
 (_calc_noise($cod_info,$l3_xmin,$distort,$best_noise_info,$prev_noise)|0);
 $42 = HEAP32[$38>>2]|0;
 $43 = (($best_noise_info) + 20|0);
 HEAP32[$43>>2] = $42;
 _memcpy(($cod_info_w|0),($cod_info|0),5252)|0;
 _memcpy(($save_xrpow|0),($xrpow|0),2304)|0;
 $44 = (($gfc) + 85096|0);
 $45 = (($gfc) + 85092|0);
 $46 = (($cod_info_w) + 4836|0);
 $47 = (($cod_info_w) + 4860|0);
 $48 = (($gfc) + 40|0);
 $49 = (($cod_info_w) + 4764|0);
 $50 = (($cod_info_w) + 4844|0);
 $51 = (($cod_info_w) + 4780|0);
 $52 = (($cod_info_w) + 4768|0);
 $53 = (($best_noise_info) + 12|0);
 $54 = (($noise_info) + 20|0);
 $55 = (($cod_info) + 4788|0);
 $56 = (($gfc) + 84|0);
 $57 = (($gfc) + 88|0);
 $58 = (($noise_info) + 16|0);
 $59 = (($best_noise_info) + 16|0);
 $60 = (($noise_info) + 8|0);
 $61 = (($best_noise_info) + 8|0);
 $62 = (($gfc) + 48|0);
 $63 = (($noise_info) + 12|0);
 $64 = (($noise_info) + 4|0);
 $65 = (($best_noise_info) + 4|0);
 $66 = (($cod_info_w) + 4864|0);
 $67 = (($gfc) + 84936|0);
 $68 = (($cod_info_w) + 4832|0);
 $69 = (($cod_info_w) + 4788|0);
 $70 = (($gfc) + 32|0);
 $71 = (($cod_info_w) + 4848|0);
 $72 = (($cod_info_w) + 4868|0);
 $bRefine$034 = 0;$best_ggain_pass1$035 = 0;$best_part2_3_length$033 = 9999999;
 while(1) {
  $73 = ($bRefine$034|0)==(1);
  $$1$i$i = $73 ? 2 : 1;
  $74 = ($bRefine$034|0)==(0);
  $age$1 = 0;$best_part2_3_length$1 = $best_part2_3_length$033;
  L23: while(1) {
   $75 = HEAP32[$44>>2]|0;
   $76 = $75 & 2;
   $77 = ($76|0)==(0);
   $$ = $77 ? 3 : 20;
   $78 = HEAP32[$45>>2]|0;
   $79 = ($78|0)==(0);
   $$pre73 = HEAP32[$47>>2]|0;
   if (!($79)) {
    $80 = (($distort) + ($$pre73<<2)|0);
    $81 = +HEAPF32[$80>>2];
    $82 = $81 > 1.0;
    if ($82) {
     $best_part2_3_length$3$ph = $best_part2_3_length$1;
     label = 175;
     break;
    }
    $83 = HEAP32[$69>>2]|0;
    $84 = ($83|0)==(2);
    if ($84) {
     $85 = (($$pre73) + 1)|0;
     $86 = (($distort) + ($85<<2)|0);
     $87 = +HEAPF32[$86>>2];
     $88 = $87 > 1.0;
     if ($88) {
      $best_part2_3_length$3$ph = $best_part2_3_length$1;
      label = 175;
      break;
     }
     $89 = (($$pre73) + 2)|0;
     $90 = (($distort) + ($89<<2)|0);
     $91 = +HEAPF32[$90>>2];
     $92 = $91 > 1.0;
     if ($92) {
      $best_part2_3_length$3$ph = $best_part2_3_length$1;
      label = 175;
      break;
     }
    }
   }
   $93 = HEAP32[$46>>2]|0;
   $94 = ($93|0)==(0);
   $$$i$i = $94 ? 1.29683959484100341797 : 1.68179285526275634766;
   $95 = ($$pre73|0)>(0);
   if ($95) {
    $sfb$09$i$i = 0;$trigger$010$i$i = 0.0;
    while(1) {
     $96 = (($distort) + ($sfb$09$i$i<<2)|0);
     $97 = +HEAPF32[$96>>2];
     $98 = $trigger$010$i$i < $97;
     $trigger$1$i$i = $98 ? $97 : $trigger$010$i$i;
     $99 = (($sfb$09$i$i) + 1)|0;
     $exitcond$i = ($99|0)==($$pre73|0);
     if ($exitcond$i) {
      $trigger$0$lcssa$i$i = $trigger$1$i$i;
      break;
     } else {
      $sfb$09$i$i = $99;$trigger$010$i$i = $trigger$1$i$i;
     }
    }
   } else {
    $trigger$0$lcssa$i$i = 0.0;
   }
   $100 = HEAP32[$48>>2]|0;
   $101 = ($100|0)==(3);
   $$1$i$i$ = $101 ? $$1$i$i : $100;
   do {
    if ((($$1$i$i$|0) == 2)) {
     $trigger$2$i$i = $trigger$0$lcssa$i$i;
    } else if ((($$1$i$i$|0) == 1)) {
     $102 = $trigger$0$lcssa$i$i;
     $103 = $trigger$0$lcssa$i$i > 1.0;
     if ($103) {
      $sqrt$i$i = (+Math_sqrt((+$102)));
      $fabs$i$i = (+Math_abs((+$sqrt$i$i)));
      $104 = $trigger$0$lcssa$i$i == -inf;
      $105 = $fabs$i$i;
      $106 = $104 ? inf : $105;
      $trigger$2$i$i = $106;
      break;
     } else {
      $107 = $102 * 0.949999999999999955591;
      $108 = $107;
      $trigger$2$i$i = $108;
      break;
     }
    } else {
     $109 = $trigger$0$lcssa$i$i > 1.0;
     if ($109) {
      $trigger$2$i$i = 1.0;
     } else {
      $110 = $trigger$0$lcssa$i$i;
      $111 = $110 * 0.949999999999999955591;
      $112 = $111;
      $trigger$2$i$i = $112;
     }
    }
   } while(0);
   if ($95) {
    $543 = $100;$544 = $$pre73;$j$05$i$i = 0;$sfb$13$i$i = 0;
   } else {
    $best_part2_3_length$3$ph = $best_part2_3_length$1;
    label = 175;
    break;
   }
   while(1) {
    $113 = ((($cod_info_w) + ($sfb$13$i$i<<2)|0) + 4872|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = (($114) + ($j$05$i$i))|0;
    $116 = (($distort) + ($sfb$13$i$i<<2)|0);
    $117 = +HEAPF32[$116>>2];
    $118 = $117 < $trigger$2$i$i;
    if ($118) {
     $145 = $544;$545 = $543;
    } else {
     $119 = HEAP32[$44>>2]|0;
     $120 = $119 & 2;
     $121 = ($120|0)==(0);
     if (!($121)) {
      $122 = ((($gfc) + ($sfb$13$i$i<<2)|0) + 84936|0);
      $123 = HEAP32[$122>>2]|0;
      $124 = ($123|0)==(0);
      $125 = $124&1;
      HEAP32[$122>>2] = $125;
      if (!($124)) {
       $126 = HEAP32[$48>>2]|0;
       $127 = ($126|0)==(2);
       if ($127) {
        $$pre$i = $544;$546 = 2;
        break;
       }
      }
     }
     $128 = ((($cod_info_w) + ($sfb$13$i$i<<2)|0) + 4608|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = (($129) + 1)|0;
     HEAP32[$128>>2] = $130;
     $131 = ($114|0)>(0);
     if ($131) {
      $132 = (0 - ($114))|0;
      $$pre60 = +HEAPF32[$49>>2];
      $138 = $$pre60;$l$02$i$i = $132;
      while(1) {
       $133 = (($l$02$i$i) + ($115))|0;
       $134 = (($xrpow) + ($133<<2)|0);
       $135 = +HEAPF32[$134>>2];
       $136 = $$$i$i * $135;
       HEAPF32[$134>>2] = $136;
       $137 = $136 > $138;
       if ($137) {
        HEAPF32[$49>>2] = $136;
        $547 = $136;
       } else {
        $547 = $138;
       }
       $139 = (($l$02$i$i) + 1)|0;
       $140 = ($139|0)<(0);
       if ($140) {
        $138 = $547;$l$02$i$i = $139;
       } else {
        break;
       }
      }
     }
     $141 = HEAP32[$48>>2]|0;
     $142 = ($141|0)==(2);
     $$pre$i$pre = HEAP32[$47>>2]|0;
     if ($142) {
      $$pre$i = $$pre$i$pre;$546 = 2;
      break;
     } else {
      $145 = $$pre$i$pre;$545 = $141;
     }
    }
    $143 = (($sfb$13$i$i) + 1)|0;
    $144 = ($143|0)<($145|0);
    if ($144) {
     $543 = $545;$544 = $145;$j$05$i$i = $115;$sfb$13$i$i = $143;
    } else {
     $$pre$i = $145;$546 = $545;
     break;
    }
   }
   $146 = ($$pre$i|0)>(0);
   if ($146) {
    $sfb$01$i$i = 0;
   } else {
    $best_part2_3_length$3$ph = $best_part2_3_length$1;
    label = 175;
    break;
   }
   while(1) {
    $149 = ((($cod_info_w) + ($sfb$01$i$i<<2)|0) + 4608|0);
    $150 = HEAP32[$149>>2]|0;
    $151 = ((($cod_info_w) + ($sfb$01$i$i<<2)|0) + 5028|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = ((($cod_info_w) + ($152<<2)|0) + 4808|0);
    $154 = HEAP32[$153>>2]|0;
    $155 = (0 - ($154))|0;
    $156 = ($150|0)==($155|0);
    $148 = (($sfb$01$i$i) + 1)|0;
    if ($156) {
     break;
    }
    $147 = ($148|0)<($$pre$i|0);
    if ($147) {
     $sfb$01$i$i = $148;
    } else {
     $535 = $546;$best_part2_3_length$3 = $best_part2_3_length$1;
     break L23;
    }
   }
   $157 = (_scale_bitcount($gfc,$cod_info_w)|0);
   $158 = ($157|0)==(0);
   if (!($158)) {
    $159 = HEAP32[$39>>2]|0;
    $160 = ($159|0)>(1);
    if (!($160)) {
     $best_part2_3_length$3$ph = $best_part2_3_length$1;
     label = 175;
     break;
    }
    _memset(($67|0),0,156)|0;
    $161 = HEAP32[$46>>2]|0;
    $162 = ($161|0)==(0);
    L68: do {
     if ($162) {
      $163 = HEAP32[$47>>2]|0;
      $164 = ($163|0)>(0);
      if ($164) {
       $j$03$i$i = 0;$sfb$02$i$i = 0;
       while(1) {
        $165 = ((($cod_info_w) + ($sfb$02$i$i<<2)|0) + 4872|0);
        $166 = HEAP32[$165>>2]|0;
        $167 = ((($cod_info_w) + ($sfb$02$i$i<<2)|0) + 4608|0);
        $168 = HEAP32[$167>>2]|0;
        $169 = HEAP32[$68>>2]|0;
        $170 = ($169|0)==(0);
        if ($170) {
         $s$0$i$i = $168;
        } else {
         $171 = (64904 + ($sfb$02$i$i<<2)|0);
         $172 = HEAP32[$171>>2]|0;
         $173 = (($172) + ($168))|0;
         $s$0$i$i = $173;
        }
        $174 = (($166) + ($j$03$i$i))|0;
        $175 = $s$0$i$i & 1;
        $176 = ($175|0)==(0);
        do {
         if ($176) {
          $s$1$i$i = $s$0$i$i;
         } else {
          $177 = (($s$0$i$i) + 1)|0;
          $178 = ($166|0)>(0);
          if (!($178)) {
           $s$1$i$i = $177;
           break;
          }
          $179 = (0 - ($166))|0;
          $$pre = +HEAPF32[$49>>2];
          $185 = $$pre;$l$01$i$i = $179;
          while(1) {
           $180 = (($l$01$i$i) + ($174))|0;
           $181 = (($xrpow) + ($180<<2)|0);
           $182 = +HEAPF32[$181>>2];
           $183 = $182 * 1.29683959484100341797;
           HEAPF32[$181>>2] = $183;
           $184 = $183 > $185;
           if ($184) {
            HEAPF32[$49>>2] = $183;
            $548 = $183;
           } else {
            $548 = $185;
           }
           $186 = (($l$01$i$i) + 1)|0;
           $187 = ($186|0)<(0);
           if ($187) {
            $185 = $548;$l$01$i$i = $186;
           } else {
            $s$1$i$i = $177;
            break;
           }
          }
         }
        } while(0);
        $188 = $s$1$i$i >> 1;
        HEAP32[$167>>2] = $188;
        $189 = (($sfb$02$i$i) + 1)|0;
        $190 = HEAP32[$47>>2]|0;
        $191 = ($189|0)<($190|0);
        if ($191) {
         $j$03$i$i = $174;$sfb$02$i$i = $189;
        } else {
         break;
        }
       }
      }
      HEAP32[$68>>2] = 0;
      HEAP32[$46>>2] = 1;
      label = 91;
     } else {
      $192 = HEAP32[$69>>2]|0;
      $193 = ($192|0)==(2);
      if ($193) {
       $194 = HEAP32[$70>>2]|0;
       $195 = ($194|0)>(0);
       if ($195) {
        $196 = HEAP32[$71>>2]|0;
        $197 = ($196|0)>(0);
        if ($197) {
         $sfb$030$i$i = 0;
         while(1) {
          $200 = ((($cod_info_w) + ($sfb$030$i$i<<2)|0) + 4608|0);
          $201 = HEAP32[$200>>2]|0;
          $202 = ($201|0)>(15);
          $199 = (($sfb$030$i$i) + 1)|0;
          if ($202) {
           $best_part2_3_length$3$ph = $best_part2_3_length$1;
           label = 175;
           break L23;
          }
          $198 = ($199|0)<($196|0);
          if ($198) {
           $sfb$030$i$i = $199;
          } else {
           $204 = $196;$window$025$i$i = 0;
           break;
          }
         }
        } else {
         $204 = $196;$window$025$i$i = 0;
        }
        while(1) {
         $203 = (($window$025$i$i) + ($204))|0;
         $205 = HEAP32[$72>>2]|0;
         $206 = ($203|0)<($205|0);
         if ($206) {
          $s1$01$i$i = 0;$sfb$12$i$i = $203;
          while(1) {
           $207 = ((($cod_info_w) + ($sfb$12$i$i<<2)|0) + 4608|0);
           $208 = HEAP32[$207>>2]|0;
           $209 = ($s1$01$i$i|0)<($208|0);
           $$s1$0$i$i = $209 ? $208 : $s1$01$i$i;
           $210 = (($sfb$12$i$i) + 3)|0;
           $211 = ($210|0)<($205|0);
           if ($211) {
            $s1$01$i$i = $$s1$0$i$i;$sfb$12$i$i = $210;
           } else {
            $s1$0$lcssa$i$i = $$s1$0$i$i;$sfb$1$lcssa$i$i = $210;
            break;
           }
          }
         } else {
          $s1$0$lcssa$i$i = 0;$sfb$1$lcssa$i$i = $203;
         }
         $212 = HEAP32[$47>>2]|0;
         $213 = ($sfb$1$lcssa$i$i|0)<($212|0);
         if ($213) {
          $s2$04$i$i = 0;$sfb$25$i$i = $sfb$1$lcssa$i$i;
          while(1) {
           $214 = ((($cod_info_w) + ($sfb$25$i$i<<2)|0) + 4608|0);
           $215 = HEAP32[$214>>2]|0;
           $216 = ($s2$04$i$i|0)<($215|0);
           $$s2$0$i$i = $216 ? $215 : $s2$04$i$i;
           $217 = (($sfb$25$i$i) + 3)|0;
           $218 = ($217|0)<($212|0);
           if ($218) {
            $s2$04$i$i = $$s2$0$i$i;$sfb$25$i$i = $217;
           } else {
            break;
           }
          }
          $phitmp$i$i = ($$s2$0$i$i|0)<(8);
          $s2$0$lcssa$i$i = $phitmp$i$i;
         } else {
          $s2$0$lcssa$i$i = 1;
         }
         $219 = ($s1$0$lcssa$i$i|0)<(16);
         $or$cond$i$i = $219 & $s2$0$lcssa$i$i;
         do {
          if ($or$cond$i$i) {
           $$pre41$i$i = (($window$025$i$i) + 1)|0;
           $$pre$phi42$i$iZ2D = $$pre41$i$i;$282 = $212;
          } else {
           $220 = ((($cod_info_w) + ($window$025$i$i<<2)|0) + 4808|0);
           $221 = HEAP32[$220>>2]|0;
           $222 = ($221|0)>(6);
           if ($222) {
            $best_part2_3_length$3$ph = $best_part2_3_length$1;
            label = 175;
            break L23;
           }
           $223 = (($221) + 1)|0;
           HEAP32[$220>>2] = $223;
           $224 = HEAP32[$71>>2]|0;
           $225 = ((($gfc) + ($224<<2)|0) + 21360|0);
           $226 = HEAP32[$225>>2]|0;
           $227 = (($224) + ($window$025$i$i))|0;
           $228 = HEAP32[$47>>2]|0;
           $229 = ($227|0)<($228|0);
           $230 = (($window$025$i$i) + 1)|0;
           if ($229) {
            $231 = (2 - ($window$025$i$i))|0;
            $j$013$i$i = $226;$sfb$314$i$i = $227;
            while(1) {
             $232 = ((($cod_info_w) + ($sfb$314$i$i<<2)|0) + 4872|0);
             $233 = HEAP32[$232>>2]|0;
             $234 = ((($cod_info_w) + ($sfb$314$i$i<<2)|0) + 4608|0);
             $235 = HEAP32[$234>>2]|0;
             $236 = HEAP32[$46>>2]|0;
             $237 = 4 >>> $236;
             $238 = (($235) - ($237))|0;
             $239 = ($238|0)>(-1);
             if ($239) {
              HEAP32[$234>>2] = $238;
              $240 = ($233*3)|0;
              $241 = (($240) + ($j$013$i$i))|0;
              $j$1$i$i = $241;
             } else {
              HEAP32[$234>>2] = 0;
              $242 = HEAP32[$46>>2]|0;
              $243 = (($242) + 1)|0;
              $244 = $238 << $243;
              $245 = (($244) + 210)|0;
              $246 = (132496 + ($245<<2)|0);
              $247 = +HEAPF32[$246>>2];
              $248 = Math_imul($233, $230)|0;
              $249 = (($248) + ($j$013$i$i))|0;
              $250 = ($233|0)>(0);
              if ($250) {
               $251 = (0 - ($233))|0;
               $$pre58 = +HEAPF32[$49>>2];
               $257 = $$pre58;$l$09$i$i = $251;
               while(1) {
                $252 = (($l$09$i$i) + ($249))|0;
                $253 = (($xrpow) + ($252<<2)|0);
                $254 = +HEAPF32[$253>>2];
                $255 = $247 * $254;
                HEAPF32[$253>>2] = $255;
                $256 = $255 > $257;
                if ($256) {
                 HEAPF32[$49>>2] = $255;
                 $550 = $255;
                } else {
                 $550 = $257;
                }
                $258 = (($l$09$i$i) + 1)|0;
                $259 = ($258|0)<(0);
                if ($259) {
                 $257 = $550;$l$09$i$i = $258;
                } else {
                 break;
                }
               }
              }
              $260 = Math_imul($233, $231)|0;
              $261 = (($249) + ($260))|0;
              $j$1$i$i = $261;
             }
             $262 = (($sfb$314$i$i) + 3)|0;
             $263 = HEAP32[$47>>2]|0;
             $264 = ($262|0)<($263|0);
             if ($264) {
              $j$013$i$i = $j$1$i$i;$sfb$314$i$i = $262;
             } else {
              $549 = $263;$j$0$lcssa$i$i = $j$1$i$i;$sfb$3$lcssa$i$i = $262;
              break;
             }
            }
           } else {
            $549 = $228;$j$0$lcssa$i$i = $226;$sfb$3$lcssa$i$i = $227;
           }
           $265 = +HEAPF32[((132496 + 808|0))>>2];
           $266 = ((($cod_info_w) + ($sfb$3$lcssa$i$i<<2)|0) + 4872|0);
           $267 = HEAP32[$266>>2]|0;
           $268 = Math_imul($267, $230)|0;
           $269 = (($268) + ($j$0$lcssa$i$i))|0;
           $270 = ($267|0)>(0);
           if (!($270)) {
            $$pre$phi42$i$iZ2D = $230;$282 = $549;
            break;
           }
           $271 = (0 - ($267))|0;
           $$pre59 = +HEAPF32[$49>>2];
           $277 = $$pre59;$l$121$i$i = $271;
           while(1) {
            $272 = (($269) + ($l$121$i$i))|0;
            $273 = (($xrpow) + ($272<<2)|0);
            $274 = +HEAPF32[$273>>2];
            $275 = $265 * $274;
            HEAPF32[$273>>2] = $275;
            $276 = $275 > $277;
            if ($276) {
             HEAPF32[$49>>2] = $275;
             $551 = $275;
            } else {
             $551 = $277;
            }
            $278 = (($l$121$i$i) + 1)|0;
            $279 = ($278|0)<(0);
            if ($279) {
             $277 = $551;$l$121$i$i = $278;
            } else {
             $$pre$phi42$i$iZ2D = $230;$282 = $549;
             break;
            }
           }
          }
         } while(0);
         $280 = ($$pre$phi42$i$iZ2D|0)<(3);
         if (!($280)) {
          break;
         }
         $$pre$i11$i = HEAP32[$71>>2]|0;
         $204 = $$pre$i11$i;$window$025$i$i = $$pre$phi42$i$iZ2D;
        }
        $281 = ($282|0)>(0);
        if ($281) {
         $sfb$01$i4$i = 0;
        } else {
         $best_part2_3_length$3$ph = $best_part2_3_length$1;
         label = 175;
         break L23;
        }
        while(1) {
         $285 = ((($cod_info_w) + ($sfb$01$i4$i<<2)|0) + 4608|0);
         $286 = HEAP32[$285>>2]|0;
         $287 = ((($cod_info_w) + ($sfb$01$i4$i<<2)|0) + 5028|0);
         $288 = HEAP32[$287>>2]|0;
         $289 = ((($cod_info_w) + ($288<<2)|0) + 4808|0);
         $290 = HEAP32[$289>>2]|0;
         $291 = (0 - ($290))|0;
         $292 = ($286|0)==($291|0);
         $284 = (($sfb$01$i4$i) + 1)|0;
         if ($292) {
          label = 91;
          break L68;
         }
         $283 = ($284|0)<($282|0);
         if ($283) {
          $sfb$01$i4$i = $284;
         } else {
          $best_part2_3_length$3$ph = $best_part2_3_length$1;
          label = 175;
          break L23;
         }
        }
       } else {
        $status$1$i = $157;
       }
      } else {
       $status$1$i = $157;
      }
     }
    } while(0);
    if ((label|0) == 91) {
     label = 0;
     $293 = (_scale_bitcount($gfc,$cod_info_w)|0);
     $status$1$i = $293;
    }
    $294 = ($status$1$i|0)==(0);
    if (!($294)) {
     $best_part2_3_length$3$ph = $best_part2_3_length$1;
     label = 175;
     break;
    }
   }
   $295 = HEAP32[$46>>2]|0;
   $296 = ($295|0)==(0);
   $$1 = $296 ? 255 : 254;
   $297 = HEAP32[$50>>2]|0;
   $298 = (($targ_bits) - ($297))|0;
   $299 = ($298|0)<(1);
   if ($299) {
    $best_part2_3_length$3$ph = $best_part2_3_length$1;
    label = 175;
    break;
   }
   $300 = (_count_bits($gfc,$xrpow,$cod_info_w,$prev_noise)|0);
   HEAP32[$52>>2] = $300;
   $301 = ($300|0)>($298|0);
   $302 = HEAP32[$51>>2]|0;
   L142: do {
    if ($301) {
     $304 = $302;
     while(1) {
      $303 = ($304|0)>($$1|0);
      if ($303) {
       $310 = $304;
       break L142;
      }
      $305 = (($304) + 1)|0;
      HEAP32[$51>>2] = $305;
      $306 = (_count_bits($gfc,$xrpow,$cod_info_w,$prev_noise)|0);
      HEAP32[$52>>2] = $306;
      $307 = ($306|0)>($298|0);
      $308 = HEAP32[$51>>2]|0;
      if ($307) {
       $304 = $308;
      } else {
       $310 = $308;
       break;
      }
     }
    } else {
     $310 = $302;
    }
   } while(0);
   $309 = ($310|0)>($$1|0);
   if ($309) {
    $best_part2_3_length$3$ph = $best_part2_3_length$1;
    label = 175;
    break;
   }
   $311 = HEAP32[$53>>2]|0;
   $312 = ($311|0)==(0);
   if ($312) {
    $313 = (_count_bits($gfc,$xrpow,$cod_info_w,$prev_noise)|0);
    HEAP32[$52>>2] = $313;
    $314 = ($313|0)>($best_part2_3_length$1|0);
    $315 = HEAP32[$51>>2]|0;
    L150: do {
     if ($314) {
      $317 = $315;
      while(1) {
       $316 = ($317|0)>($$1|0);
       if ($316) {
        $323 = $317;
        break L150;
       }
       $318 = (($317) + 1)|0;
       HEAP32[$51>>2] = $318;
       $319 = (_count_bits($gfc,$xrpow,$cod_info_w,$prev_noise)|0);
       HEAP32[$52>>2] = $319;
       $320 = ($319|0)>($best_part2_3_length$1|0);
       $321 = HEAP32[$51>>2]|0;
       if ($320) {
        $317 = $321;
       } else {
        $323 = $321;
        break;
       }
      }
     } else {
      $323 = $315;
     }
    } while(0);
    $322 = ($323|0)>($$1|0);
    if ($322) {
     $best_part2_3_length$3$ph = $best_part2_3_length$1;
     label = 175;
     break;
    }
   }
   (_calc_noise($cod_info_w,$l3_xmin,$distort,$noise_info,$prev_noise)|0);
   $324 = HEAP32[$52>>2]|0;
   HEAP32[$54>>2] = $324;
   $325 = HEAP32[$55>>2]|0;
   $326 = ($325|0)==(2);
   $better$0$in = $326 ? $57 : $56;
   $better$0 = HEAP32[$better$0$in>>2]|0;
   L156: do {
    switch ($better$0|0) {
    case 0:  {
     $350 = HEAP32[$63>>2]|0;
     $351 = HEAP32[$53>>2]|0;
     $352 = ($350|0)<($351|0);
     do {
      if ($352) {
       $370 = 1;
      } else {
       $353 = ($350|0)==($351|0);
       if ($353) {
        $354 = +HEAPF32[$noise_info>>2];
        $355 = +HEAPF32[$best_noise_info>>2];
        $356 = $354 < $355;
        if ($356) {
         $370 = 1;
        } else {
         $fabsf9$i = (+Math_abs((+$354)));
         $fabsf10$i = (+Math_abs((+$355)));
         $357 = $fabsf9$i > $fabsf10$i;
         $358 = $354 - $355;
         $fabsf11$i = (+Math_abs((+$358)));
         $359 = $fabsf11$i;
         if ($357) {
          $360 = $fabsf9$i;
          $361 = $360 * 9.99999997475242707878E-7;
          $362 = !($359 <= $361);
          if ($362) {
           $370 = 0;
           break;
          }
         } else {
          $363 = $fabsf10$i;
          $364 = $363 * 9.99999997475242707878E-7;
          $365 = !($359 <= $364);
          if ($365) {
           $370 = 0;
           break;
          }
         }
         $366 = +HEAPF32[$64>>2];
         $367 = +HEAPF32[$65>>2];
         $368 = $366 < $367;
         $370 = $368;
        }
       } else {
        $370 = 0;
       }
      }
     } while(0);
     $369 = $370&1;
     $better$0$i = $369;
     break;
    }
    case 7:  {
     $502 = HEAP32[$63>>2]|0;
     $503 = HEAP32[$53>>2]|0;
     $504 = ($502|0)<($503|0);
     if ($504) {
      $509 = 1;
     } else {
      $505 = +HEAPF32[$noise_info>>2];
      $506 = +HEAPF32[$best_noise_info>>2];
      $507 = $505 < $506;
      $509 = $507;
     }
     $508 = $509&1;
     $better$0$i = $508;
     break;
    }
    case 5:  {
     $456 = +HEAPF32[$noise_info>>2];
     $457 = +HEAPF32[$best_noise_info>>2];
     $458 = $456 < $457;
     do {
      if ($458) {
       $472 = 1;
      } else {
       $fabsf6$i = (+Math_abs((+$456)));
       $fabsf7$i = (+Math_abs((+$457)));
       $459 = $fabsf6$i > $fabsf7$i;
       $460 = $456 - $457;
       $fabsf8$i = (+Math_abs((+$460)));
       $461 = $fabsf8$i;
       if ($459) {
        $462 = $fabsf6$i;
        $463 = $462 * 9.99999997475242707878E-7;
        $464 = !($461 <= $463);
        if ($464) {
         $472 = 0;
         break;
        }
       } else {
        $465 = $fabsf7$i;
        $466 = $465 * 9.99999997475242707878E-7;
        $467 = !($461 <= $466);
        if ($467) {
         $472 = 0;
         break;
        }
       }
       $468 = +HEAPF32[$64>>2];
       $469 = +HEAPF32[$65>>2];
       $470 = $468 < $469;
       $472 = $470;
      }
     } while(0);
     $471 = $472&1;
     $better$0$i = $471;
     break;
    }
    case 2:  {
     $395 = +HEAPF32[$64>>2];
     $396 = +HEAPF32[$65>>2];
     $397 = $395 < $396;
     $398 = $397&1;
     $better$0$i = $398;
     break;
    }
    case 3:  {
     $399 = +HEAPF32[$64>>2];
     $400 = +HEAPF32[$65>>2];
     $401 = $399 < $400;
     if ($401) {
      $402 = +HEAPF32[$60>>2];
      $403 = +HEAPF32[$61>>2];
      $404 = $402 < $403;
      $406 = $404;
     } else {
      $406 = 0;
     }
     $405 = $406&1;
     $better$0$i = $405;
     break;
    }
    case 1:  {
     $$pre$i5 = +HEAPF32[$60>>2];
     $393 = $$pre$i5;
     label = 122;
     break;
    }
    case 8:  {
     $371 = HEAP32[$66>>2]|0;
     $372 = ($371|0)>(0);
     if ($372) {
      $klemm_noise$02$i$i = 1.00000000000000006632E-37;$sfb$01$i$i6 = 0;
      while(1) {
       $373 = (($distort) + ($sfb$01$i$i6<<2)|0);
       $374 = +HEAPF32[$373>>2];
       $375 = $374;
       $376 = $375 * $375;
       $377 = $376 * 0.632000000000000006217;
       $378 = $375 * $377;
       $379 = $378 + 0.367999999999999993783;
       $380 = $379;
       $381 = (+_fast_log2($380));
       $382 = $381;
       $383 = $382 * 0.301029995663981142506;
       $384 = $klemm_noise$02$i$i + $383;
       $385 = (($sfb$01$i$i6) + 1)|0;
       $386 = HEAP32[$66>>2]|0;
       $387 = ($385|0)<($386|0);
       if ($387) {
        $klemm_noise$02$i$i = $384;$sfb$01$i$i6 = $385;
       } else {
        $klemm_noise$0$lcssa$i$i = $384;
        break;
       }
      }
     } else {
      $klemm_noise$0$lcssa$i$i = 1.00000000000000006632E-37;
     }
     $388 = $klemm_noise$0$lcssa$i$i < 9.99999999999999945153E-21;
     $389 = $klemm_noise$0$lcssa$i$i;
     $390 = $388 ? 9.99999968265522538896E-21 : $389;
     HEAPF32[$60>>2] = $390;
     $393 = $390;
     label = 122;
     break;
    }
    case 6:  {
     $473 = +HEAPF32[$noise_info>>2];
     $474 = +HEAPF32[$best_noise_info>>2];
     $475 = $473 < $474;
     do {
      if ($475) {
       $501 = 1;
      } else {
       $fabsf$i = (+Math_abs((+$473)));
       $fabsf1$i = (+Math_abs((+$474)));
       $476 = $fabsf$i > $fabsf1$i;
       $477 = $473 - $474;
       $fabsf2$i = (+Math_abs((+$477)));
       $478 = $fabsf2$i;
       if ($476) {
        $479 = $fabsf$i;
        $480 = $479 * 9.99999997475242707878E-7;
        $481 = !($478 <= $480);
        if ($481) {
         $501 = 0;
         break;
        }
       } else {
        $482 = $fabsf1$i;
        $483 = $482 * 9.99999997475242707878E-7;
        $484 = !($478 <= $483);
        if ($484) {
         $501 = 0;
         break;
        }
       }
       $485 = +HEAPF32[$60>>2];
       $486 = +HEAPF32[$61>>2];
       $487 = $485 < $486;
       if ($487) {
        $501 = 1;
       } else {
        $fabsf3$i = (+Math_abs((+$485)));
        $fabsf4$i = (+Math_abs((+$486)));
        $488 = $fabsf3$i > $fabsf4$i;
        $489 = $485 - $486;
        $fabsf5$i = (+Math_abs((+$489)));
        $490 = $fabsf5$i;
        if ($488) {
         $491 = $fabsf3$i;
         $492 = $491 * 9.99999997475242707878E-7;
         $493 = !($490 <= $492);
         if ($493) {
          $501 = 0;
          break;
         }
        } else {
         $494 = $fabsf4$i;
         $495 = $494 * 9.99999997475242707878E-7;
         $496 = !($490 <= $495);
         if ($496) {
          $501 = 0;
          break;
         }
        }
        $497 = +HEAPF32[$64>>2];
        $498 = +HEAPF32[$65>>2];
        $499 = $497 <= $498;
        $501 = $499;
       }
      }
     } while(0);
     $500 = $501&1;
     $better$0$i = $500;
     break;
    }
    case 4:  {
     $407 = +HEAPF32[$60>>2];
     $408 = !($407 <= 0.0);
     L212: do {
      if ($408) {
       $409 = $407;
       $433 = $409;
       label = 136;
      } else {
       $410 = +HEAPF32[$61>>2];
       $411 = $410;
       $412 = $411 > 0.200000000000000011102;
       if ($412) {
        $455 = 1;
       } else {
        $413 = $407;
        $414 = $410 < 0.0;
        do {
         if ($414) {
          $415 = $413 + -0.200000000000000011102;
          $416 = $411 > $415;
          if (!($416)) {
           break;
          }
          $417 = +HEAPF32[$64>>2];
          $418 = +HEAPF32[$65>>2];
          $419 = $417 < $418;
          if ($419) {
           $455 = 1;
           break L212;
          }
         }
        } while(0);
        $420 = $410 > 0.0;
        if ($420) {
         $421 = $413 + -0.200000000000000011102;
         $422 = $411 > $421;
         if (!($422)) {
          $433 = $413;
          label = 136;
          break;
         }
         $423 = +HEAPF32[$64>>2];
         $424 = +HEAPF32[$65>>2];
         $425 = +HEAPF32[$best_noise_info>>2];
         $426 = $424 + $425;
         $427 = $423 < $426;
         if ($427) {
          $455 = 1;
         } else {
          $433 = $413;
          label = 136;
         }
        } else {
         $433 = $413;
         label = 136;
        }
       }
      }
     } while(0);
     L222: do {
      if ((label|0) == 136) {
       label = 0;
       $428 = $407 > 0.0;
       if ($428) {
        $429 = +HEAPF32[$61>>2];
        $430 = $429;
        $431 = $430 > -0.0500000000000000027756;
        do {
         if ($431) {
          $432 = $433 + -0.100000000000000005551;
          $434 = $430 > $432;
          if (!($434)) {
           break;
          }
          $435 = +HEAPF32[$64>>2];
          $436 = +HEAPF32[$noise_info>>2];
          $437 = $435 + $436;
          $438 = +HEAPF32[$65>>2];
          $439 = +HEAPF32[$best_noise_info>>2];
          $440 = $438 + $439;
          $441 = $437 < $440;
          if ($441) {
           $455 = 1;
           break L222;
          }
         }
        } while(0);
        $442 = $430 > -0.100000000000000005551;
        if ($442) {
         $443 = $433 + -0.149999999999999994449;
         $444 = $430 > $443;
         if (!($444)) {
          $455 = 0;
          break;
         }
         $445 = +HEAPF32[$64>>2];
         $446 = +HEAPF32[$noise_info>>2];
         $447 = $445 + $446;
         $448 = $446 + $447;
         $449 = +HEAPF32[$65>>2];
         $450 = +HEAPF32[$best_noise_info>>2];
         $451 = $449 + $450;
         $452 = $450 + $451;
         $453 = $448 < $452;
         $455 = $453;
        } else {
         $455 = 0;
        }
       } else {
        $455 = 0;
       }
      }
     } while(0);
     $454 = $455&1;
     $better$0$i = $454;
     break;
    }
    default: {
     $327 = HEAP32[$53>>2]|0;
     $328 = ($327|0)>(0);
     if ($328) {
      $329 = HEAP32[$58>>2]|0;
      $330 = HEAP32[$59>>2]|0;
      $331 = ($329|0)<=($330|0);
      $332 = $331&1;
      $333 = ($329|0)==($330|0);
      if (!($333)) {
       $better$0$i = $332;
       break L156;
      }
      $334 = HEAP32[$43>>2]|0;
      $335 = ($324|0)<($334|0);
      $336 = $335&1;
      $better$0$i = $336;
      break L156;
     }
     $337 = +HEAPF32[$60>>2];
     $338 = $337 < 0.0;
     if ($338) {
      $339 = $337 * 10.0;
      $340 = (+($324|0));
      $341 = $340 + $339;
      $342 = +HEAPF32[$61>>2];
      $343 = $342 * 10.0;
      $344 = HEAP32[$43>>2]|0;
      $345 = (+($344|0));
      $346 = $343 + $345;
      $347 = $341 <= $346;
      $349 = $347;
     } else {
      $349 = 0;
     }
     $348 = $349&1;
     $better$0$i = $348;
    }
    }
   } while(0);
   if ((label|0) == 122) {
    label = 0;
    $391 = +HEAPF32[$61>>2];
    $392 = $393 < $391;
    $394 = $392&1;
    $better$0$i = $394;
   }
   $510 = HEAP32[$53>>2]|0;
   $511 = ($510|0)==(0);
   if ($511) {
    $512 = ($better$0$i|0)==(0);
    if ($512) {
     $517 = 0;
    } else {
     $513 = HEAP32[$54>>2]|0;
     $514 = HEAP32[$43>>2]|0;
     $515 = ($513|0)<($514|0);
     $517 = $515;
    }
    $516 = $517&1;
    $better$1$i = $516;
   } else {
    $better$1$i = $better$0$i;
   }
   $518 = ($better$1$i|0)==(0);
   do {
    if ($518) {
     $520 = HEAP32[$62>>2]|0;
     $521 = ($520|0)==(0);
     if ($521) {
      $522 = (($age$1) + 1)|0;
      $523 = ($age$1|0)<($$|0);
      $$not = $511 ^ 1;
      $brmerge = $523 | $$not;
      if (!($brmerge)) {
       $best_part2_3_length$3$ph = $best_part2_3_length$1;
       label = 175;
       break L23;
      }
      $524 = HEAP32[$48>>2]|0;
      $525 = ($524|0)!=(3);
      $or$cond$not$demorgan = $525 | $74;
      $or$cond$not = $or$cond$not$demorgan ^ 1;
      $526 = ($age$1|0)>(29);
      $or$cond2 = $526 & $or$cond$not;
      if ($or$cond2) {
       $best_part2_3_length$3$ph = $best_part2_3_length$1;
       label = 175;
       break L23;
      }
      if ($or$cond$not$demorgan) {
       $age$2 = $522;$best_part2_3_length$2 = $best_part2_3_length$1;
       break;
      }
      $527 = HEAP32[$51>>2]|0;
      $528 = (($527) - ($best_ggain_pass1$035))|0;
      $529 = ($528|0)>(15);
      if ($529) {
       $best_part2_3_length$3$ph = $best_part2_3_length$1;
       label = 175;
       break L23;
      } else {
       $age$2 = $522;$best_part2_3_length$2 = $best_part2_3_length$1;
      }
     } else {
      $age$2 = $age$1;$best_part2_3_length$2 = $best_part2_3_length$1;
     }
    } else {
     $519 = HEAP32[$38>>2]|0;
     ;HEAP32[$best_noise_info+0>>2]=HEAP32[$noise_info+0>>2]|0;HEAP32[$best_noise_info+4>>2]=HEAP32[$noise_info+4>>2]|0;HEAP32[$best_noise_info+8>>2]=HEAP32[$noise_info+8>>2]|0;HEAP32[$best_noise_info+12>>2]=HEAP32[$noise_info+12>>2]|0;HEAP32[$best_noise_info+16>>2]=HEAP32[$noise_info+16>>2]|0;HEAP32[$best_noise_info+20>>2]=HEAP32[$noise_info+20>>2]|0;
     _memcpy(($cod_info|0),($cod_info_w|0),5252)|0;
     _memcpy(($save_xrpow|0),($xrpow|0),2304)|0;
     $age$2 = 0;$best_part2_3_length$2 = $519;
    }
   } while(0);
   $530 = HEAP32[$51>>2]|0;
   $531 = HEAP32[$46>>2]|0;
   $532 = (($531) + ($530))|0;
   $533 = ($532|0)<(255);
   if ($533) {
    $age$1 = $age$2;$best_part2_3_length$1 = $best_part2_3_length$2;
   } else {
    $best_part2_3_length$3$ph = $best_part2_3_length$2;
    label = 175;
    break;
   }
  }
  if ((label|0) == 175) {
   label = 0;
   $$pre61 = HEAP32[$48>>2]|0;
   $535 = $$pre61;$best_part2_3_length$3 = $best_part2_3_length$3$ph;
  }
  $534 = ($535|0)==(3);
  $or$cond4 = $534 & $74;
  if (!($or$cond4)) {
   break;
  }
  _memcpy(($cod_info_w|0),($cod_info|0),5252)|0;
  _memcpy(($xrpow|0),($save_xrpow|0),2304)|0;
  $536 = HEAP32[$51>>2]|0;
  $bRefine$034 = 1;$best_ggain_pass1$035 = $536;$best_part2_3_length$033 = $best_part2_3_length$3;
 }
 $537 = (($gfc) + 104|0);
 $538 = HEAP32[$537>>2]|0;
 if ((($538|0) == 1) | (($538|0) == 4) | (($538|0) == 2)) {
  _memcpy(($xrpow|0),($save_xrpow|0),2304)|0;
 } else {
  $539 = HEAP32[$44>>2]|0;
  $540 = $539 & 1;
  $541 = ($540|0)==(0);
  if (!($541)) {
   _trancate_smallspectrums($gfc,$cod_info,$l3_xmin,$xrpow);
  }
 }
 $542 = HEAP32[$53>>2]|0;
 $$0 = $542;
 STACKTOP = sp;return ($$0|0);
}
function _CBR_iteration_loop($gfc,$pe,$ms_ener_ratio,$ratio) {
 $gfc = $gfc|0;
 $pe = $pe|0;
 $ms_ener_ratio = $ms_ener_ratio|0;
 $ratio = $ratio|0;
 var $$lobit$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0;
 var $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $ch$03 = 0, $exitcond$i = 0, $gr$04 = 0, $i$01$i = 0, $i$01$i1 = 0, $l3_xmin = 0, $masking_lower_db$0 = 0.0, $masking_lower_db$0$in = 0, $mean_bits = 0, $sum$i = 0;
 var $targ_bits = 0, $xrpow = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2480|0;
 $sum$i = sp + 2476|0;
 $l3_xmin = sp + 2320|0;
 $xrpow = sp + 16|0;
 $targ_bits = sp + 8|0;
 $mean_bits = sp;
 $0 = (($gfc) + 304|0);
 (_ResvFrameBegin($gfc,$mean_bits)|0);
 $1 = (($gfc) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(0);
 if (!($3)) {
  $68 = HEAP32[$mean_bits>>2]|0;
  _ResvFrameEnd($gfc,$68);
  STACKTOP = sp;return;
 }
 $4 = (($gfc) + 84756|0);
 $5 = (($gfc) + 72|0);
 $6 = (($gfc) + 84912|0);
 $7 = (($gfc) + 84916|0);
 $8 = (($gfc) + 84908|0);
 $9 = (($gfc) + 85824|0);
 $10 = (($gfc) + 85096|0);
 $11 = (($gfc) + 36|0);
 $gr$04 = 0;
 while(1) {
  $12 = HEAP32[$mean_bits>>2]|0;
  $13 = (_on_pe($gfc,$pe,$targ_bits,$12,$gr$04,$gr$04)|0);
  $14 = HEAP32[$4>>2]|0;
  $15 = ($14|0)==(2);
  if ($15) {
   $i$01$i = 0;
   while(1) {
    $16 = (((($gfc) + (($gr$04*10504)|0)|0) + ($i$01$i<<2)|0) + 304|0);
    $17 = +HEAPF32[$16>>2];
    $18 = (((($gfc) + (($gr$04*10504)|0)|0) + ($i$01$i<<2)|0) + 5556|0);
    $19 = +HEAPF32[$18>>2];
    $20 = $17 + $19;
    $21 = $20 * 0.707106769084930419921;
    HEAPF32[$16>>2] = $21;
    $22 = $17 - $19;
    $23 = $22 * 0.707106769084930419921;
    HEAPF32[$18>>2] = $23;
    $24 = (($i$01$i) + 1)|0;
    $exitcond$i = ($24|0)==(576);
    if ($exitcond$i) {
     break;
    } else {
     $i$01$i = $24;
    }
   }
   $25 = (($ms_ener_ratio) + ($gr$04<<2)|0);
   $26 = +HEAPF32[$25>>2];
   $27 = HEAP32[$mean_bits>>2]|0;
   _reduce_side($targ_bits,$26,$27,$13);
  }
  $28 = HEAP32[$5>>2]|0;
  $29 = ($28|0)>(0);
  if ($29) {
   $ch$03 = 0;
   while(1) {
    $30 = (((($gfc) + (($gr$04*10504)|0)|0) + (($ch$03*5252)|0)|0) + 304|0);
    $31 = (((($gfc) + (($gr$04*10504)|0)|0) + (($ch$03*5252)|0)|0) + 5092|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = ($32|0)==(2);
    $masking_lower_db$0$in = $33 ? $7 : $6;
    $masking_lower_db$0 = +HEAPF32[$masking_lower_db$0$in>>2];
    $34 = $masking_lower_db$0;
    $35 = $34 * 0.100000000000000005551;
    $36 = (+Math_pow(10.0,(+$35)));
    $37 = $36;
    HEAPF32[$8>>2] = $37;
    _init_outer_loop($gfc,$30);
    HEAPF32[$sum$i>>2] = 0.0;
    $38 = (((($gfc) + (($gr$04*10504)|0)|0) + (($ch$03*5252)|0)|0) + 5512|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = (((($gfc) + (($gr$04*10504)|0)|0) + (($ch$03*5252)|0)|0) + 5068|0);
    HEAPF32[$40>>2] = 0.0;
    $41 = (($xrpow) + ($39<<2)|0);
    $42 = (576 - ($39))|0;
    $43 = $42 << 2;
    _memset(($41|0),0,($43|0))|0;
    $44 = HEAP32[$9>>2]|0;
    FUNCTION_TABLE_viiii[$44 & 7]($30,$xrpow,$39,$sum$i);
    $45 = +HEAPF32[$sum$i>>2];
    $46 = $45 > 9.99999968265522538896E-21;
    if ($46) {
     $47 = HEAP32[$10>>2]|0;
     $48 = $47 >>> 1;
     $$lobit$i = $48 & 1;
     $49 = (((($gfc) + (($gr$04*10504)|0)|0) + (($ch$03*5252)|0)|0) + 5168|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = ($50|0)>(0);
     if ($51) {
      $i$01$i1 = 0;
      while(1) {
       $52 = ((($gfc) + ($i$01$i1<<2)|0) + 84936|0);
       HEAP32[$52>>2] = $$lobit$i;
       $53 = (($i$01$i1) + 1)|0;
       $54 = HEAP32[$49>>2]|0;
       $55 = ($53|0)<($54|0);
       if ($55) {
        $i$01$i1 = $53;
       } else {
        break;
       }
      }
     }
     $57 = ((($ratio) + (($gr$04*976)|0)|0) + (($ch$03*488)|0)|0);
     (_calc_xmin($gfc,$57,$30,$l3_xmin)|0);
     $58 = (($targ_bits) + ($ch$03<<2)|0);
     $59 = HEAP32[$58>>2]|0;
     (_outer_loop($gfc,$30,$l3_xmin,$xrpow,$ch$03,$59)|0);
    } else {
     $56 = (((($gfc) + (($gr$04*10504)|0)|0) + (($ch$03*5252)|0)|0) + 2608|0);
     _memset(($56|0),0,2304)|0;
    }
    _best_scalefac_store($gfc,$gr$04,$ch$03,$0);
    $60 = HEAP32[$11>>2]|0;
    $61 = ($60|0)==(1);
    if ($61) {
     _best_huffman_divide($gfc,$30);
    }
    _ResvAdjust($gfc,$30);
    $62 = (($ch$03) + 1)|0;
    $63 = HEAP32[$5>>2]|0;
    $64 = ($62|0)<($63|0);
    if ($64) {
     $ch$03 = $62;
    } else {
     break;
    }
   }
  }
  $65 = (($gr$04) + 1)|0;
  $66 = HEAP32[$1>>2]|0;
  $67 = ($65|0)<($66|0);
  if ($67) {
   $gr$04 = $65;
  } else {
   break;
  }
 }
 $68 = HEAP32[$mean_bits>>2]|0;
 _ResvFrameEnd($gfc,$68);
 STACKTOP = sp;return;
}
function _floatcompare($v1,$v2) {
 $v1 = $v1|0;
 $v2 = $v2|0;
 var $$ = 0, $$0 = 0, $0 = 0.0, $1 = 0.0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF32[$v1>>2];
 $1 = +HEAPF32[$v2>>2];
 $2 = $0 > $1;
 if ($2) {
  $$0 = 1;
 } else {
  $3 = $0 < $1;
  $$ = $3 << 31 >> 31;
  $$0 = $$;
 }
 STACKTOP = sp;return ($$0|0);
}
function _iteration_init($gfc) {
 $gfc = $gfc|0;
 var $$$i = 0.0, $$1$i = 0.0, $$2$i = 0.0, $$3$i = 0.0, $$phi$trans$insert$i = 0, $$pre = 0.0, $$pre$i = 0, $$pre46$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0.0, $165 = 0.0, $166 = 0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0.0;
 var $181 = 0.0, $182 = 0.0, $183 = 0, $184 = 0, $185 = 0.0, $186 = 0.0, $187 = 0, $188 = 0.0, $189 = 0.0, $19 = 0.0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0, $197 = 0, $198 = 0, $199 = 0.0;
 var $2 = 0, $20 = 0.0, $200 = 0.0, $201 = 0.0, $202 = 0, $203 = 0, $204 = 0, $205 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0, $209 = 0, $21 = 0.0, $210 = 0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0, $216 = 0;
 var $217 = 0, $218 = 0, $219 = 0, $22 = 0.0, $220 = 0, $221 = 0, $222 = 0, $223 = 0.0, $224 = 0.0, $225 = 0.0, $226 = 0.0, $227 = 0, $228 = 0, $229 = 0, $23 = 0.0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
 var $235 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0.0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0.0, $243 = 0.0, $244 = 0.0, $245 = 0.0, $246 = 0, $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0.0, $250 = 0.0, $251 = 0, $252 = 0;
 var $253 = 0, $254 = 0.0, $255 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0, $259 = 0, $26 = 0.0, $260 = 0, $261 = 0, $262 = 0.0, $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0, $267 = 0, $268 = 0.0, $269 = 0.0, $27 = 0.0, $270 = 0.0;
 var $271 = 0.0, $272 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0;
 var $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0;
 var $99 = 0.0, $ath$0$i$i = 0.0, $ath$0$i10$i = 0.0, $ath$0$i4$i = 0.0, $ath$0$i6$i = 0.0, $ath$0$i8$i = 0.0, $exitcond$i = 0, $exitcond31 = 0, $exitcond35 = 0, $exitcond38 = 0, $exitcond39 = 0, $exitcond39$i = 0, $exitcond40 = 0, $exitcond40$i = 0, $exitcond41 = 0, $exitcond41$i = 0, $exitcond42$i = 0, $exitcond43$i = 0, $exitcond44$i = 0, $exitcond45$i = 0;
 var $exp2 = 0.0, $exp21 = 0.0, $i$030 = 0, $i$035$i = 0, $i$103 = 0, $i$129 = 0, $i$129$i = 0, $i$222$i = 0, $i$228 = 0, $i$319$i = 0, $i$326 = 0, $i$615 = 0, $sfb$038$i = 0, $sfb$133$i = 0, $sfb$227$i = 0, $sfb$321$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($gfc) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 HEAP32[$0>>2] = 1;
 $3 = (($gfc) + 21312|0);
 HEAP32[$3>>2] = 0;
 $4 = (($gfc) + 16|0);
 $5 = (($gfc) + 85796|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($gfc) + 64|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (+($8|0));
 $10 = (($gfc) + 224|0);
 $11 = (($gfc) + 196|0);
 $sfb$038$i = 0;
 while(1) {
  $13 = ((($gfc) + ($sfb$038$i<<2)|0) + 21360|0);
  $14 = HEAP32[$13>>2]|0;
  $12 = (($sfb$038$i) + 1)|0;
  $15 = ((($gfc) + ($12<<2)|0) + 21360|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($6) + ($sfb$038$i<<2)|0) + 24|0);
  HEAPF32[$17>>2] = 9.99999993381581251071E+36;
  $18 = ($14|0)<($16|0);
  if ($18) {
   $i$035$i = $14;
   while(1) {
    $19 = (+($i$035$i|0));
    $20 = $9 * $19;
    $21 = $20 * 8.6805556202307343483E-4;
    $22 = (+_ATHformula($4,$21));
    $23 = +HEAPF32[$10>>2];
    $24 = $23 > 0.0;
    if ($24) {
     $25 = $22 - $23;
     $ath$0$i$i = $25;
    } else {
     $26 = $22 + -100.0;
     $ath$0$i$i = $26;
    }
    $27 = +HEAPF32[$11>>2];
    $28 = $ath$0$i$i + $27;
    $29 = $28 * 0.100000001490116119385;
    $30 = (+Math_pow(10.0,(+$29)));
    $31 = +HEAPF32[$17>>2];
    $32 = $31 < $30;
    $$$i = $32 ? $31 : $30;
    HEAPF32[$17>>2] = $$$i;
    $33 = (($i$035$i) + 1)|0;
    $exitcond44$i = ($33|0)==($16|0);
    if ($exitcond44$i) {
     break;
    } else {
     $i$035$i = $33;
    }
   }
  }
  $exitcond45$i = ($12|0)==(22);
  if ($exitcond45$i) {
   $sfb$133$i = 0;
   break;
  } else {
   $sfb$038$i = $12;
  }
 }
 while(1) {
  $35 = ((($gfc) + ($sfb$133$i<<2)|0) + 21508|0);
  $36 = HEAP32[$35>>2]|0;
  $34 = (($sfb$133$i) + 1)|0;
  $37 = ((($gfc) + ($34<<2)|0) + 21508|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ((($6) + ($sfb$133$i<<2)|0) + 164|0);
  HEAPF32[$39>>2] = 9.99999993381581251071E+36;
  $40 = ($36|0)<($38|0);
  if ($40) {
   $i$129$i = $36;
   while(1) {
    $41 = (+($i$129$i|0));
    $42 = $9 * $41;
    $43 = $42 * 8.6805556202307343483E-4;
    $44 = (+_ATHformula($4,$43));
    $45 = +HEAPF32[$10>>2];
    $46 = $45 > 0.0;
    if ($46) {
     $47 = $44 - $45;
     $ath$0$i4$i = $47;
    } else {
     $48 = $44 + -100.0;
     $ath$0$i4$i = $48;
    }
    $49 = +HEAPF32[$11>>2];
    $50 = $ath$0$i4$i + $49;
    $51 = $50 * 0.100000001490116119385;
    $52 = (+Math_pow(10.0,(+$51)));
    $53 = +HEAPF32[$39>>2];
    $54 = $53 < $52;
    $$1$i = $54 ? $53 : $52;
    HEAPF32[$39>>2] = $$1$i;
    $55 = (($i$129$i) + 1)|0;
    $exitcond42$i = ($55|0)==($38|0);
    if ($exitcond42$i) {
     break;
    } else {
     $i$129$i = $55;
    }
   }
  }
  $exitcond43$i = ($34|0)==(6);
  if ($exitcond43$i) {
   break;
  } else {
   $sfb$133$i = $34;
  }
 }
 $$phi$trans$insert$i = (($gfc) + 21452|0);
 $$pre$i = HEAP32[$$phi$trans$insert$i>>2]|0;
 $64 = $$pre$i;$sfb$227$i = 0;
 while(1) {
  $58 = ((($gfc) + ($sfb$227$i<<2)|0) + 21452|0);
  $59 = (($sfb$227$i) + 1)|0;
  $60 = ((($gfc) + ($59<<2)|0) + 21452|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ((($6) + ($sfb$227$i<<2)|0) + 112|0);
  HEAPF32[$62>>2] = 9.99999993381581251071E+36;
  $63 = ($64|0)<($61|0);
  if ($63) {
   $i$222$i = $64;
   while(1) {
    $65 = (+($i$222$i|0));
    $66 = $9 * $65;
    $67 = $66 * 0.00260416674427688121796;
    $68 = (+_ATHformula($4,$67));
    $69 = +HEAPF32[$10>>2];
    $70 = $69 > 0.0;
    if ($70) {
     $71 = $68 - $69;
     $ath$0$i6$i = $71;
    } else {
     $72 = $68 + -100.0;
     $ath$0$i6$i = $72;
    }
    $73 = +HEAPF32[$11>>2];
    $74 = $ath$0$i6$i + $73;
    $75 = $74 * 0.100000001490116119385;
    $76 = (+Math_pow(10.0,(+$75)));
    $77 = +HEAPF32[$62>>2];
    $78 = $77 < $76;
    $$2$i = $78 ? $77 : $76;
    HEAPF32[$62>>2] = $$2$i;
    $79 = (($i$222$i) + 1)|0;
    $exitcond40$i = ($79|0)==($61|0);
    if ($exitcond40$i) {
     break;
    } else {
     $i$222$i = $79;
    }
   }
   $$pre46$i = HEAP32[$60>>2]|0;
   $82 = $$pre46$i;$85 = $$2$i;
  } else {
   $82 = $61;$85 = 9.99999993381581251071E+36;
  }
  $80 = HEAP32[$58>>2]|0;
  $81 = (($82) - ($80))|0;
  $83 = (+($81|0));
  $84 = $85 * $83;
  HEAPF32[$62>>2] = $84;
  $exitcond41$i = ($59|0)==(13);
  if ($exitcond41$i) {
   break;
  } else {
   $64 = $82;$sfb$227$i = $59;
  }
 }
 $56 = (($gfc) + 21504|0);
 $57 = (($gfc) + 21500|0);
 $sfb$321$i = 0;
 while(1) {
  $86 = ((($gfc) + ($sfb$321$i<<2)|0) + 21536|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = (($sfb$321$i) + 1)|0;
  $89 = ((($gfc) + ($88<<2)|0) + 21536|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = ((($6) + ($sfb$321$i<<2)|0) + 188|0);
  HEAPF32[$91>>2] = 9.99999993381581251071E+36;
  $92 = ($87|0)<($90|0);
  if ($92) {
   $i$319$i = $87;
   while(1) {
    $93 = (+($i$319$i|0));
    $94 = $9 * $93;
    $95 = $94 * 0.00260416674427688121796;
    $96 = (+_ATHformula($4,$95));
    $97 = +HEAPF32[$10>>2];
    $98 = $97 > 0.0;
    if ($98) {
     $99 = $96 - $97;
     $ath$0$i8$i = $99;
    } else {
     $100 = $96 + -100.0;
     $ath$0$i8$i = $100;
    }
    $101 = +HEAPF32[$11>>2];
    $102 = $ath$0$i8$i + $101;
    $103 = $102 * 0.100000001490116119385;
    $104 = (+Math_pow(10.0,(+$103)));
    $105 = +HEAPF32[$91>>2];
    $106 = $105 < $104;
    $$3$i = $106 ? $105 : $104;
    HEAPF32[$91>>2] = $$3$i;
    $107 = (($i$319$i) + 1)|0;
    $exitcond$i = ($107|0)==($90|0);
    if ($exitcond$i) {
     $113 = $$3$i;
     break;
    } else {
     $i$319$i = $107;
    }
   }
  } else {
   $113 = 9.99999993381581251071E+36;
  }
  $108 = HEAP32[$56>>2]|0;
  $109 = HEAP32[$57>>2]|0;
  $110 = (($108) - ($109))|0;
  $111 = (+($110|0));
  $112 = $113 * $111;
  HEAPF32[$91>>2] = $112;
  $exitcond39$i = ($88|0)==(6);
  if ($exitcond39$i) {
   break;
  } else {
   $sfb$321$i = $88;
  }
 }
 $114 = (($gfc) + 220|0);
 $115 = HEAP32[$114>>2]|0;
 $116 = ($115|0)==(0);
 if (!($116)) {
  $117 = (($6) + 24|0);
  HEAPF32[$117>>2] = 9.99999968265522538896E-21;
  $118 = (($6) + 28|0);
  HEAPF32[$118>>2] = 9.99999968265522538896E-21;
  $119 = (($6) + 32|0);
  HEAPF32[$119>>2] = 9.99999968265522538896E-21;
  $120 = (($6) + 36|0);
  HEAPF32[$120>>2] = 9.99999968265522538896E-21;
  $121 = (($6) + 40|0);
  HEAPF32[$121>>2] = 9.99999968265522538896E-21;
  $122 = (($6) + 44|0);
  HEAPF32[$122>>2] = 9.99999968265522538896E-21;
  $123 = (($6) + 48|0);
  HEAPF32[$123>>2] = 9.99999968265522538896E-21;
  $124 = (($6) + 52|0);
  HEAPF32[$124>>2] = 9.99999968265522538896E-21;
  $125 = (($6) + 56|0);
  HEAPF32[$125>>2] = 9.99999968265522538896E-21;
  $126 = (($6) + 60|0);
  HEAPF32[$126>>2] = 9.99999968265522538896E-21;
  $127 = (($6) + 64|0);
  HEAPF32[$127>>2] = 9.99999968265522538896E-21;
  $128 = (($6) + 68|0);
  HEAPF32[$128>>2] = 9.99999968265522538896E-21;
  $129 = (($6) + 72|0);
  HEAPF32[$129>>2] = 9.99999968265522538896E-21;
  $130 = (($6) + 76|0);
  HEAPF32[$130>>2] = 9.99999968265522538896E-21;
  $131 = (($6) + 80|0);
  HEAPF32[$131>>2] = 9.99999968265522538896E-21;
  $132 = (($6) + 84|0);
  HEAPF32[$132>>2] = 9.99999968265522538896E-21;
  $133 = (($6) + 88|0);
  HEAPF32[$133>>2] = 9.99999968265522538896E-21;
  $134 = (($6) + 92|0);
  HEAPF32[$134>>2] = 9.99999968265522538896E-21;
  $135 = (($6) + 96|0);
  HEAPF32[$135>>2] = 9.99999968265522538896E-21;
  $136 = (($6) + 100|0);
  HEAPF32[$136>>2] = 9.99999968265522538896E-21;
  $137 = (($6) + 104|0);
  HEAPF32[$137>>2] = 9.99999968265522538896E-21;
  $138 = (($6) + 108|0);
  HEAPF32[$138>>2] = 9.99999968265522538896E-21;
  $139 = (($6) + 164|0);
  HEAPF32[$139>>2] = 9.99999968265522538896E-21;
  $140 = (($6) + 168|0);
  HEAPF32[$140>>2] = 9.99999968265522538896E-21;
  $141 = (($6) + 172|0);
  HEAPF32[$141>>2] = 9.99999968265522538896E-21;
  $142 = (($6) + 176|0);
  HEAPF32[$142>>2] = 9.99999968265522538896E-21;
  $143 = (($6) + 180|0);
  HEAPF32[$143>>2] = 9.99999968265522538896E-21;
  $144 = (($6) + 184|0);
  HEAPF32[$144>>2] = 9.99999968265522538896E-21;
  $145 = (($6) + 112|0);
  HEAPF32[$145>>2] = 9.99999968265522538896E-21;
  $146 = (($6) + 116|0);
  HEAPF32[$146>>2] = 9.99999968265522538896E-21;
  $147 = (($6) + 120|0);
  HEAPF32[$147>>2] = 9.99999968265522538896E-21;
  $148 = (($6) + 124|0);
  HEAPF32[$148>>2] = 9.99999968265522538896E-21;
  $149 = (($6) + 128|0);
  HEAPF32[$149>>2] = 9.99999968265522538896E-21;
  $150 = (($6) + 132|0);
  HEAPF32[$150>>2] = 9.99999968265522538896E-21;
  $151 = (($6) + 136|0);
  HEAPF32[$151>>2] = 9.99999968265522538896E-21;
  $152 = (($6) + 140|0);
  HEAPF32[$152>>2] = 9.99999968265522538896E-21;
  $153 = (($6) + 144|0);
  HEAPF32[$153>>2] = 9.99999968265522538896E-21;
  $154 = (($6) + 148|0);
  HEAPF32[$154>>2] = 9.99999968265522538896E-21;
  $155 = (($6) + 152|0);
  HEAPF32[$155>>2] = 9.99999968265522538896E-21;
  $156 = (($6) + 156|0);
  HEAPF32[$156>>2] = 9.99999968265522538896E-21;
  $157 = (($6) + 160|0);
  HEAPF32[$157>>2] = 9.99999968265522538896E-21;
  $158 = (($6) + 188|0);
  HEAPF32[$158>>2] = 9.99999968265522538896E-21;
  $159 = (($6) + 192|0);
  HEAPF32[$159>>2] = 9.99999968265522538896E-21;
  $160 = (($6) + 196|0);
  HEAPF32[$160>>2] = 9.99999968265522538896E-21;
  $161 = (($6) + 200|0);
  HEAPF32[$161>>2] = 9.99999968265522538896E-21;
  $162 = (($6) + 204|0);
  HEAPF32[$162>>2] = 9.99999968265522538896E-21;
  $163 = (($6) + 208|0);
  HEAPF32[$163>>2] = 9.99999968265522538896E-21;
 }
 $164 = (+_ATHformula($4,-1.0));
 $165 = +HEAPF32[$10>>2];
 $166 = $165 > 0.0;
 if ($166) {
  $167 = $164 - $165;
  $ath$0$i10$i = $167;
 } else {
  $168 = $164 + -100.0;
  $ath$0$i10$i = $168;
 }
 $169 = +HEAPF32[$11>>2];
 $170 = $ath$0$i10$i + $169;
 $171 = $170 * 0.100000001490116119385;
 $172 = (+Math_pow(10.0,(+$171)));
 $173 = $172;
 $174 = (+_log10((+$173)));
 $175 = $174 * 10.0;
 $176 = $175;
 $177 = HEAP32[$5>>2]|0;
 $178 = (($177) + 20|0);
 HEAPF32[$178>>2] = $176;
 HEAPF32[66832>>2] = 0.0;
 $i$030 = 1;
 while(1) {
  $179 = (+($i$030|0));
  $180 = $179;
  $181 = (+Math_pow((+$180),1.33333333333333325932));
  $182 = $181;
  $183 = (66832 + ($i$030<<2)|0);
  HEAPF32[$183>>2] = $182;
  $184 = (($i$030) + 1)|0;
  $exitcond41 = ($184|0)==(8208);
  if ($exitcond41) {
   break;
  } else {
   $i$030 = $184;
  }
 }
 HEAPF32[99664>>2] = 0.0;
 $$pre = +HEAPF32[66832>>2];
 $190 = $$pre;$i$129 = 1;
 while(1) {
  $185 = (+($i$129|0));
  $186 = $185 + -0.5;
  $187 = (66832 + ($i$129<<2)|0);
  $188 = +HEAPF32[$187>>2];
  $189 = $190 + $188;
  $191 = $189;
  $192 = $191 * 0.5;
  $193 = (+Math_pow((+$192),0.75));
  $194 = $186 - $193;
  $195 = $194;
  $196 = (99664 + ($i$129<<2)|0);
  HEAPF32[$196>>2] = $195;
  $197 = (($i$129) + 1)|0;
  $exitcond40 = ($197|0)==(8208);
  if ($exitcond40) {
   $i$228 = 0;
   break;
  } else {
   $190 = $188;$i$129 = $197;
  }
 }
 while(1) {
  $198 = (($i$228) + -210)|0;
  $199 = (+($198|0));
  $200 = $199 * -0.1875;
  $exp21 = (+_exp2((+$200)));
  $201 = $exp21;
  $202 = (132496 + ($i$228<<2)|0);
  HEAPF32[$202>>2] = $201;
  $203 = (($i$228) + 1)|0;
  $exitcond39 = ($203|0)==(257);
  if ($exitcond39) {
   $i$326 = 0;
   break;
  } else {
   $i$228 = $203;
  }
 }
 while(1) {
  $204 = (($i$326) + -326)|0;
  $205 = (+($204|0));
  $206 = $205 * 0.25;
  $exp2 = (+_exp2((+$206)));
  $207 = $exp2;
  $208 = (133528 + ($i$326<<2)|0);
  HEAPF32[$208>>2] = $207;
  $209 = (($i$326) + 1)|0;
  $exitcond38 = ($209|0)==(374);
  if ($exitcond38) {
   break;
  } else {
   $i$326 = $209;
  }
 }
 _huffman_init($gfc);
 _init_xrpow_core_init($gfc);
 $210 = (($gfc) + 232|0);
 $211 = +HEAPF32[$210>>2];
 $212 = $211 + -0.5;
 $213 = $212 * 0.100000001490116119385;
 $214 = (+Math_pow(10.0,(+$213)));
 $215 = (($gfc) + 84768|0);
 HEAPF32[$215>>2] = $214;
 $216 = (($gfc) + 84772|0);
 HEAPF32[$216>>2] = $214;
 $217 = (($gfc) + 84776|0);
 HEAPF32[$217>>2] = $214;
 $218 = (($gfc) + 84780|0);
 HEAPF32[$218>>2] = $214;
 $219 = (($gfc) + 84784|0);
 HEAPF32[$219>>2] = $214;
 $220 = (($gfc) + 84788|0);
 HEAPF32[$220>>2] = $214;
 $221 = (($gfc) + 84792|0);
 HEAPF32[$221>>2] = $214;
 $222 = (($gfc) + 228|0);
 $223 = +HEAPF32[$222>>2];
 $224 = $223 + -0.25;
 $225 = $224 * 0.100000001490116119385;
 $226 = (+Math_pow(10.0,(+$225)));
 $227 = (($gfc) + 84796|0);
 HEAPF32[$227>>2] = $226;
 $228 = (($gfc) + 84800|0);
 HEAPF32[$228>>2] = $226;
 $229 = (($gfc) + 84804|0);
 HEAPF32[$229>>2] = $226;
 $230 = (($gfc) + 84808|0);
 HEAPF32[$230>>2] = $226;
 $231 = (($gfc) + 84812|0);
 HEAPF32[$231>>2] = $226;
 $232 = (($gfc) + 84816|0);
 HEAPF32[$232>>2] = $226;
 $233 = (($gfc) + 84820|0);
 HEAPF32[$233>>2] = $226;
 $234 = (($gfc) + 236|0);
 $235 = +HEAPF32[$234>>2];
 $236 = $235 + -0.0250000003725290298462;
 $237 = $236 * 0.100000001490116119385;
 $238 = (+Math_pow(10.0,(+$237)));
 $i$615 = 14;
 while(1) {
  $239 = ((($gfc) + ($i$615<<2)|0) + 84768|0);
  HEAPF32[$239>>2] = $238;
  $240 = (($i$615) + 1)|0;
  $exitcond35 = ($240|0)==(21);
  if ($exitcond35) {
   break;
  } else {
   $i$615 = $240;
  }
 }
 $241 = (($gfc) + 240|0);
 $242 = +HEAPF32[$241>>2];
 $243 = $242 + 0.5;
 $244 = $243 * 0.100000001490116119385;
 $245 = (+Math_pow(10.0,(+$244)));
 $246 = (($gfc) + 84852|0);
 HEAPF32[$246>>2] = $245;
 $247 = +HEAPF32[$210>>2];
 $248 = $247 + -2.0;
 $249 = $248 * 0.100000001490116119385;
 $250 = (+Math_pow(10.0,(+$249)));
 $251 = (($gfc) + 84856|0);
 HEAPF32[$251>>2] = $250;
 $252 = (($gfc) + 84860|0);
 HEAPF32[$252>>2] = $250;
 $253 = (($gfc) + 84864|0);
 HEAPF32[$253>>2] = $250;
 $254 = +HEAPF32[$222>>2];
 $255 = $254 + -1.0;
 $256 = $255 * 0.100000001490116119385;
 $257 = (+Math_pow(10.0,(+$256)));
 $258 = (($gfc) + 84868|0);
 HEAPF32[$258>>2] = $257;
 $259 = (($gfc) + 84872|0);
 HEAPF32[$259>>2] = $257;
 $260 = (($gfc) + 84876|0);
 HEAPF32[$260>>2] = $257;
 $261 = (($gfc) + 84880|0);
 HEAPF32[$261>>2] = $257;
 $262 = +HEAPF32[$234>>2];
 $263 = $262 + -0.0500000007450580596924;
 $264 = $263 * 0.100000001490116119385;
 $265 = (+Math_pow(10.0,(+$264)));
 $i$103 = 7;
 while(1) {
  $266 = ((($gfc) + ($i$103<<2)|0) + 84856|0);
  HEAPF32[$266>>2] = $265;
  $267 = (($i$103) + 1)|0;
  $exitcond31 = ($267|0)==(12);
  if ($exitcond31) {
   break;
  } else {
   $i$103 = $267;
  }
 }
 $268 = +HEAPF32[$241>>2];
 $269 = $268 + 0.5;
 $270 = $269 * 0.100000001490116119385;
 $271 = (+Math_pow(10.0,(+$270)));
 $272 = (($gfc) + 84904|0);
 HEAPF32[$272>>2] = $271;
 STACKTOP = sp;return;
}
function _on_pe($gfc,$pe,$targ_bits,$mean_bits,$gr,$cbr) {
 $gfc = $gfc|0;
 $pe = $pe|0;
 $targ_bits = $targ_bits|0;
 $mean_bits = $mean_bits|0;
 $gr = $gr|0;
 $cbr = $cbr|0;
 var $$ = 0, $$3 = 0, $$4 = 0, $$not = 0, $$not32 = 0, $$storemerge = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0;
 var $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $add_bits = 0, $bits$017 = 0, $bits$17 = 0, $brmerge = 0;
 var $ch$018 = 0, $ch$114 = 0, $ch$211 = 0, $ch$38 = 0, $ch$45 = 0, $extra_bits = 0, $or$cond = 0, $storemerge = 0, $storemerge28 = 0, $tbits = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $extra_bits = sp + 12|0;
 $tbits = sp + 8|0;
 $add_bits = sp;
 HEAP32[$extra_bits>>2] = 0;
 $0 = $add_bits;
 $1 = $0;
 HEAP32[$1>>2] = 0;
 $2 = (($0) + 4)|0;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 _ResvMaxBits($gfc,$mean_bits,$tbits,$extra_bits,$cbr);
 $4 = HEAP32[$tbits>>2]|0;
 $5 = HEAP32[$extra_bits>>2]|0;
 $6 = (($5) + ($4))|0;
 $7 = ($6|0)>(7680);
 $$ = $7 ? 7680 : $6;
 $8 = (($gfc) + 72|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)>(0);
 if (!($10)) {
  STACKTOP = sp;return ($$|0);
 }
 $11 = ($mean_bits*3)|0;
 $12 = (($11|0) / 4)&-1;
 $14 = $9;$bits$017 = 0;$ch$018 = 0;
 while(1) {
  $13 = (($4|0) / ($14|0))&-1;
  $15 = ($13|0)>(4095);
  $$3 = $15 ? 4095 : $13;
  $16 = (($targ_bits) + ($ch$018<<2)|0);
  HEAP32[$16>>2] = $$3;
  $17 = (+($$3|0));
  $18 = ((($pe) + ($gr<<3)|0) + ($ch$018<<2)|0);
  $19 = +HEAPF32[$18>>2];
  $20 = $19 * $17;
  $21 = $20;
  $22 = $21 * 0.00142857142857142857019;
  $23 = (+($$3|0));
  $24 = $22 - $23;
  $25 = (~~(($24)));
  $26 = (($add_bits) + ($ch$018<<2)|0);
  $27 = ($25|0)>($12|0);
  $storemerge = $27 ? $12 : $25;
  $28 = ($storemerge|0)<(0);
  $$storemerge = $28 ? 0 : $storemerge;
  $29 = (($$storemerge) + ($$3))|0;
  $30 = ($29|0)>(4095);
  if ($30) {
   $31 = (4095 - ($$3))|0;
   $32 = ($31|0)<(0);
   $$4 = $32 ? 0 : $31;
   $storemerge28 = $$4;
  } else {
   $storemerge28 = $$storemerge;
  }
  HEAP32[$26>>2] = $storemerge28;
  $33 = (($storemerge28) + ($bits$017))|0;
  $34 = (($ch$018) + 1)|0;
  $35 = HEAP32[$8>>2]|0;
  $36 = ($34|0)<($35|0);
  if ($36) {
   $14 = $35;$bits$017 = $33;$ch$018 = $34;
  } else {
   break;
  }
 }
 $37 = ($33|0)>($5|0);
 $38 = ($33|0)>(0);
 $or$cond = $37 & $38;
 if ($or$cond) {
  $39 = ($35|0)>(0);
  if ($39) {
   $ch$114 = 0;
   while(1) {
    $41 = (($add_bits) + ($ch$114<<2)|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = Math_imul($42, $5)|0;
    $44 = (($43|0) / ($33|0))&-1;
    HEAP32[$41>>2] = $44;
    $45 = (($ch$114) + 1)|0;
    $46 = ($45|0)<($35|0);
    if ($46) {
     $ch$114 = $45;
    } else {
     break;
    }
   }
  } else {
   STACKTOP = sp;return ($$|0);
  }
 }
 $40 = ($35|0)>(0);
 if ($40) {
  $55 = $5;$ch$211 = 0;
 } else {
  STACKTOP = sp;return ($$|0);
 }
 while(1) {
  $50 = (($add_bits) + ($ch$211<<2)|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($targ_bits) + ($ch$211<<2)|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (($53) + ($51))|0;
  HEAP32[$52>>2] = $54;
  $47 = (($55) - ($51))|0;
  $56 = (($ch$211) + 1)|0;
  $49 = HEAP32[$8>>2]|0;
  $57 = ($56|0)<($49|0);
  if ($57) {
   $55 = $47;$ch$211 = $56;
  } else {
   break;
  }
 }
 HEAP32[$extra_bits>>2] = $47;
 $48 = ($49|0)>(0);
 if ($48) {
  $bits$17 = 0;$ch$38 = 0;
 } else {
  STACKTOP = sp;return ($$|0);
 }
 while(1) {
  $58 = (($targ_bits) + ($ch$38<<2)|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = (($59) + ($bits$17))|0;
  $61 = (($ch$38) + 1)|0;
  $62 = ($61|0)<($49|0);
  if ($62) {
   $bits$17 = $60;$ch$38 = $61;
  } else {
   break;
  }
 }
 $$not = ($60|0)<(7681);
 $$not32 = $48 ^ 1;
 $brmerge = $$not | $$not32;
 if ($brmerge) {
  STACKTOP = sp;return ($$|0);
 } else {
  $ch$45 = 0;
 }
 while(1) {
  $63 = (($targ_bits) + ($ch$45<<2)|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = ($64*7680)|0;
  $66 = (($65|0) / ($60|0))&-1;
  HEAP32[$63>>2] = $66;
  $67 = (($ch$45) + 1)|0;
  $68 = HEAP32[$8>>2]|0;
  $69 = ($67|0)<($68|0);
  if ($69) {
   $ch$45 = $67;
  } else {
   break;
  }
 }
 STACKTOP = sp;return ($$|0);
}
function _reduce_side($targ_bits,$ms_ener_ratio,$mean_bits,$max_bits) {
 $targ_bits = $targ_bits|0;
 $ms_ener_ratio = +$ms_ener_ratio;
 $mean_bits = $mean_bits|0;
 $max_bits = $max_bits|0;
 var $$ = 0, $$op = 0.0, $0 = 0.0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $fac$0 = 0.0, $move_bits$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $ms_ener_ratio;
 $1 = 0.5 - $0;
 $2 = $1 * 0.660000000000000031086;
 $3 = $2;
 $4 = $3 < 0.0;
 $fac$0 = $4 ? 0.0 : $3;
 $5 = $fac$0 > 0.5;
 $6 = $fac$0;
 $$op = $6 * 0.5;
 $7 = $5 ? 0.25 : $$op;
 $8 = HEAP32[$targ_bits>>2]|0;
 $9 = (($targ_bits) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + ($8))|0;
 $12 = (+($11|0));
 $13 = $7 * $12;
 $14 = (~~(($13)));
 $15 = (4095 - ($8))|0;
 $16 = ($14|0)>($15|0);
 $$ = $16 ? $15 : $14;
 $17 = ($$|0)<(0);
 $move_bits$1 = $17 ? 0 : $$;
 $18 = ($10|0)>(124);
 do {
  if ($18) {
   $19 = (($10) - ($move_bits$1))|0;
   $20 = ($19|0)>(125);
   if (!($20)) {
    $23 = (($8) + -125)|0;
    $24 = (($23) + ($10))|0;
    HEAP32[$targ_bits>>2] = $24;
    HEAP32[$9>>2] = 125;
    $26 = 125;$27 = $24;
    break;
   }
   $21 = ($8|0)<($mean_bits|0);
   if ($21) {
    $22 = (($move_bits$1) + ($8))|0;
    HEAP32[$targ_bits>>2] = $22;
    $33 = $22;
   } else {
    $33 = $8;
   }
   HEAP32[$9>>2] = $19;
   $26 = $19;$27 = $33;
  } else {
   $26 = $10;$27 = $8;
  }
 } while(0);
 $25 = (($26) + ($27))|0;
 $28 = ($25|0)>($max_bits|0);
 if (!($28)) {
  STACKTOP = sp;return;
 }
 $29 = Math_imul($27, $max_bits)|0;
 $30 = (($29|0) / ($25|0))&-1;
 HEAP32[$targ_bits>>2] = $30;
 $31 = Math_imul($26, $max_bits)|0;
 $32 = (($31|0) / ($25|0))&-1;
 HEAP32[$9>>2] = $32;
 STACKTOP = sp;return;
}
function _athAdjust($a,$x,$athFloor,$ATHfixpoint) {
 $a = +$a;
 $x = +$x;
 $athFloor = +$athFloor;
 $ATHfixpoint = +$ATHfixpoint;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0;
 var $9 = 0.0, $w$0 = 0.0, $w$1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $ATHfixpoint < 1.0;
 $1 = $0 ? 94.8244476318359375 : $ATHfixpoint;
 $2 = (+_fast_log2($x));
 $3 = $2;
 $4 = $3 * 3.01029995663981164711;
 $5 = $4;
 $6 = $a * $a;
 $7 = $5 - $athFloor;
 $8 = $6 > 9.99999968265522538896E-21;
 if ($8) {
  $9 = (+_fast_log2($6));
  $10 = $9;
  $11 = $10 * 0.0333334326559875798734;
  $12 = $11 + 1.0;
  $13 = $12;
  $w$0 = $13;
 } else {
  $w$0 = 0.0;
 }
 $14 = $w$0 < 0.0;
 $w$1 = $14 ? 0.0 : $w$0;
 $15 = $7 * $w$1;
 $16 = $athFloor + 90.3087310791015625;
 $17 = $16 - $1;
 $18 = $17 + $15;
 $19 = $18 * 0.100000001490116119385;
 $20 = (+Math_pow(10.0,(+$19)));
 STACKTOP = sp;return (+$20);
}
function _calc_xmin($gfc,$ratio,$cod_info,$pxmin) {
 $gfc = $gfc|0;
 $ratio = $ratio|0;
 $cod_info = $cod_info|0;
 $pxmin = $pxmin|0;
 var $$0$lcssa = 0, $$038 = 0, $$120 = 0, $$2$lcssa = 0, $$rh2$0 = 0.0, $$rh26$0 = 0.0, $$rh26$0$1 = 0.0, $$rh26$0$2 = 0.0, $$rh26$0$us = 0.0, $$rh26$0$us$1 = 0.0, $$rh26$0$us$2 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0, $115 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0;
 var $124 = 0.0, $125 = 0.0, $126 = 0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0, $133 = 0.0, $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0.0, $140 = 0.0, $141 = 0.0;
 var $142 = 0, $143 = 0, $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0.0, $150 = 0, $151 = 0, $152 = 0, $153 = 0.0, $154 = 0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0.0, $16 = 0.0;
 var $160 = 0.0, $161 = 0.0, $162 = 0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0.0, $167 = 0, $168 = 0.0, $169 = 0, $17 = 0.0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0, $177 = 0.0, $178 = 0.0;
 var $179 = 0, $18 = 0.0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0, $184 = 0.0, $185 = 0, $186 = 0.0, $187 = 0, $188 = 0, $189 = 0.0, $19 = 0.0, $190 = 0.0, $191 = 0.0, $192 = 0, $193 = 0.0, $194 = 0, $195 = 0.0, $196 = 0.0;
 var $197 = 0, $198 = 0, $199 = 0.0, $2 = 0, $20 = 0.0, $200 = 0.0, $201 = 0.0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0.0, $208 = 0.0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0.0, $216 = 0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0.0, $220 = 0, $221 = 0, $222 = 0.0, $223 = 0.0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0.0, $230 = 0, $231 = 0.0;
 var $232 = 0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0, $237 = 0, $238 = 0.0, $239 = 0.0, $24 = 0.0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0.0, $246 = 0.0, $247 = 0, $248 = 0, $249 = 0, $25 = 0.0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0.0, $254 = 0.0, $255 = 0.0, $256 = 0, $257 = 0.0, $258 = 0.0, $259 = 0, $26 = 0.0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0.0, $267 = 0, $268 = 0;
 var $269 = 0.0, $27 = 0, $270 = 0.0, $271 = 0.0, $272 = 0.0, $273 = 0.0, $274 = 0, $275 = 0, $276 = 0.0, $277 = 0.0, $278 = 0, $279 = 0, $28 = 0.0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0.0, $286 = 0.0;
 var $287 = 0.0, $288 = 0, $289 = 0.0, $29 = 0.0, $290 = 0.0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0.0, $299 = 0, $3 = 0, $30 = 0.0, $300 = 0, $301 = 0.0, $302 = 0.0, $303 = 0.0;
 var $304 = 0.0, $305 = 0.0, $306 = 0, $307 = 0, $308 = 0.0, $309 = 0.0, $31 = 0.0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0;
 var $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0.0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ath_over$0$lcssa = 0, $ath_over$035 = 0, $ath_over$1 = 0, $ath_over$2$lcssa = 0, $ath_over$214 = 0, $ath_over$3$lcssa = 0, $ath_over$4 = 0, $ath_over$4$1 = 0, $ath_over$4$2 = 0, $ath_over$4$us = 0, $ath_over$4$us$1 = 0, $ath_over$4$us$2 = 0, $en0$0$lcssa = 0.0, $en0$028 = 0.0, $en03$05$us = 0.0;
 var $en03$05$us$1 = 0.0, $en03$05$us$2 = 0.0, $exitcond = 0, $exitcond$1 = 0, $exitcond$2 = 0, $exitcond51 = 0, $fabsf = 0.0, $gsfb$0$lcssa = 0, $gsfb$037 = 0, $gsfb$116 = 0, $j$0$lcssa = 0, $j$036 = 0, $j$1$lcssa = 0, $j$129 = 0, $j$215 = 0, $j$3$lcssa = 0, $j$46$us = 0, $j$46$us$1 = 0, $j$46$us$2 = 0, $k$025 = 0;
 var $l$026 = 0, $l2$04$us = 0, $l2$04$us$1 = 0, $l2$04$us$2 = 0, $limit$0 = 0, $limit$0$in = 0, $limit$0$max_nonzero$1 = 0, $max_nonzero$0 = 0, $max_nonzero$1 = 0, $max_nonzero$2 = 0, $rh2$0$lcssa = 0.0, $rh2$027 = 0.0, $rh26$07$us = 0.0, $rh26$07$us$1 = 0.0, $rh26$07$us$2 = 0.0, $rh3$0 = 0.0, $rh37$0 = 0.0, $rh37$0$1 = 0.0, $rh37$0$2 = 0.0, $rh37$0$us = 0.0;
 var $rh37$0$us$1 = 0.0, $rh37$0$us$2 = 0.0, $sfb$018 = 0, $w$0$i = 0.0, $w$0$i1 = 0.0, $w$1$i = 0.0, $w$1$i2 = 0.0, $xmin$0 = 0.0, $xmin4$0 = 0.0, $xmin4$0$1 = 0.0, $xmin4$0$2 = 0.0, $xmin4$0$us = 0.0, $xmin4$0$us$1 = 0.0, $xmin4$0$us$2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($gfc) + 85796|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($cod_info) + 4856|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)>(0);
 if ($4) {
  $5 = (($1) + 8|0);
  $6 = (($1) + 20|0);
  $7 = (($gfc) + 224|0);
  $$038 = $pxmin;$ath_over$035 = 0;$gsfb$037 = 0;$j$036 = 0;
  while(1) {
   $8 = +HEAPF32[$5>>2];
   $9 = ((($1) + ($gsfb$037<<2)|0) + 24|0);
   $10 = +HEAPF32[$9>>2];
   $11 = +HEAPF32[$6>>2];
   $12 = +HEAPF32[$7>>2];
   $13 = $12 < 1.0;
   $14 = $13 ? 94.8244476318359375 : $12;
   $15 = (+_fast_log2($10));
   $16 = $15;
   $17 = $16 * 3.01029995663981164711;
   $18 = $17;
   $19 = $8 * $8;
   $20 = $18 - $11;
   $21 = $19 > 9.99999968265522538896E-21;
   if ($21) {
    $22 = (+_fast_log2($19));
    $23 = $22;
    $24 = $23 * 0.0333334326559875798734;
    $25 = $24 + 1.0;
    $26 = $25;
    $w$0$i = $26;
   } else {
    $w$0$i = 0.0;
   }
   $27 = $w$0$i < 0.0;
   $w$1$i = $27 ? 0.0 : $w$0$i;
   $28 = $20 * $w$1$i;
   $29 = $11 + 90.3087310791015625;
   $30 = $29 - $14;
   $31 = $30 + $28;
   $32 = $31 * 0.100000001490116119385;
   $33 = (+Math_pow(10.0,(+$32)));
   $34 = ((($gfc) + ($gsfb$037<<2)|0) + 84768|0);
   $35 = +HEAPF32[$34>>2];
   $36 = $33 * $35;
   $37 = ((($cod_info) + ($gsfb$037<<2)|0) + 4872|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = (+($38|0));
   $40 = $36 / $39;
   $41 = ($38|0)>(0);
   if ($41) {
    $en0$028 = 0.0;$j$129 = $j$036;$l$026 = 0;$rh2$027 = 2.22044604925031308085E-16;
    while(1) {
     $42 = (($j$129) + 1)|0;
     $43 = (($cod_info) + ($j$129<<2)|0);
     $44 = +HEAPF32[$43>>2];
     $45 = $44 * $44;
     $46 = $en0$028 + $45;
     $47 = $45 < $40;
     $48 = $47 ? $45 : $40;
     $49 = $rh2$027 + $48;
     $50 = (($l$026) + 1)|0;
     $exitcond51 = ($50|0)==($38|0);
     if ($exitcond51) {
      break;
     } else {
      $en0$028 = $46;$j$129 = $42;$l$026 = $50;$rh2$027 = $49;
     }
    }
    $51 = (($j$036) + ($38))|0;
    $en0$0$lcssa = $46;$j$1$lcssa = $51;$rh2$0$lcssa = $49;
   } else {
    $en0$0$lcssa = 0.0;$j$1$lcssa = $j$036;$rh2$0$lcssa = 2.22044604925031308085E-16;
   }
   $52 = $en0$0$lcssa > $36;
   $53 = $52&1;
   $ath_over$1 = (($53) + ($ath_over$035))|0;
   $54 = $en0$0$lcssa < $36;
   if ($54) {
    $rh3$0 = $en0$0$lcssa;
   } else {
    $55 = $rh2$0$lcssa < $36;
    $$rh2$0 = $55 ? $36 : $rh2$0$lcssa;
    $rh3$0 = $$rh2$0;
   }
   $56 = ((($ratio) + ($gsfb$037<<2)|0) + 244|0);
   $57 = +HEAPF32[$56>>2];
   $58 = $57 > 9.9999999600419720025E-13;
   if ($58) {
    $59 = (($ratio) + ($gsfb$037<<2)|0);
    $60 = +HEAPF32[$59>>2];
    $61 = $en0$0$lcssa * $60;
    $62 = $61 / $57;
    $63 = $62 * $35;
    $64 = $rh3$0 < $63;
    if ($64) {
     $xmin$0 = $63;
    } else {
     $xmin$0 = $rh3$0;
    }
   } else {
    $xmin$0 = $rh3$0;
   }
   $65 = $xmin$0 > 2.22044604925031308085E-16;
   $66 = $65 ? $xmin$0 : 2.22044604925031308085E-16;
   $67 = $66 + 9.99999982451670044181E-15;
   $68 = $en0$0$lcssa > $67;
   $69 = $68&1;
   $70 = ((($cod_info) + ($gsfb$037)|0) + 5212|0);
   HEAP8[$70>>0] = $69;
   $71 = (($$038) + 4|0);
   HEAPF32[$$038>>2] = $66;
   $72 = (($gsfb$037) + 1)|0;
   $73 = HEAP32[$2>>2]|0;
   $74 = ($72|0)<($73|0);
   if ($74) {
    $$038 = $71;$ath_over$035 = $ath_over$1;$gsfb$037 = $72;$j$036 = $j$1$lcssa;
   } else {
    $$0$lcssa = $71;$ath_over$0$lcssa = $ath_over$1;$gsfb$0$lcssa = $72;$j$0$lcssa = $j$1$lcssa;
    break;
   }
  }
 } else {
  $$0$lcssa = $pxmin;$ath_over$0$lcssa = 0;$gsfb$0$lcssa = 0;$j$0$lcssa = 0;
 }
 $k$025 = 575;
 while(1) {
  $77 = (($cod_info) + ($k$025<<2)|0);
  $78 = +HEAPF32[$77>>2];
  $fabsf = (+Math_abs((+$78)));
  $79 = $fabsf > 9.9999999600419720025E-13;
  $76 = (($k$025) + -1)|0;
  if ($79) {
   $max_nonzero$0 = $k$025;
   break;
  }
  $75 = ($76|0)>(0);
  if ($75) {
   $k$025 = $76;
  } else {
   $max_nonzero$0 = 0;
   break;
  }
 }
 $80 = (($cod_info) + 4788|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = ($81|0)==(2);
 if ($82) {
  $84 = (($max_nonzero$0|0) % 6)&-1;
  $85 = (($max_nonzero$0) + 5)|0;
  $86 = (($85) - ($84))|0;
  $max_nonzero$1 = $86;
 } else {
  $83 = $max_nonzero$0 | 1;
  $max_nonzero$1 = $83;
 }
 $87 = (($gfc) + 85092|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = ($88|0)==(0);
 if ($89) {
  $90 = (($gfc) + 64|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = ($91|0)<(44000);
  if ($92) {
   $93 = ($91|0)<(8001);
   if ($82) {
    $97 = $93 ? 9 : 12;
    $98 = ((($gfc) + ($97<<2)|0) + 21452|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = ($99*3)|0;
    $limit$0$in = $100;
   } else {
    $94 = $93 ? 17 : 21;
    $95 = ((($gfc) + ($94<<2)|0) + 21360|0);
    $96 = HEAP32[$95>>2]|0;
    $limit$0$in = $96;
   }
   $limit$0 = (($limit$0$in) + -1)|0;
   $101 = ($max_nonzero$1|0)>($limit$0|0);
   $limit$0$max_nonzero$1 = $101 ? $limit$0 : $max_nonzero$1;
   $max_nonzero$2 = $limit$0$max_nonzero$1;
  } else {
   $max_nonzero$2 = $max_nonzero$1;
  }
 } else {
  $max_nonzero$2 = $max_nonzero$1;
 }
 $102 = (($cod_info) + 5208|0);
 HEAP32[$102>>2] = $max_nonzero$2;
 $103 = (($cod_info) + 4864|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = ($gsfb$0$lcssa|0)<($104|0);
 if (!($105)) {
  $ath_over$2$lcssa = $ath_over$0$lcssa;
  STACKTOP = sp;return ($ath_over$2$lcssa|0);
 }
 $106 = (($cod_info) + 4852|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = (($1) + 8|0);
 $109 = (($1) + 20|0);
 $110 = (($gfc) + 224|0);
 $111 = (($gfc) + 92|0);
 $112 = (($gfc) + 85800|0);
 $$120 = $$0$lcssa;$ath_over$214 = $ath_over$0$lcssa;$gsfb$116 = $gsfb$0$lcssa;$j$215 = $j$0$lcssa;$sfb$018 = $107;
 while(1) {
  $113 = +HEAPF32[$108>>2];
  $114 = ((($1) + ($sfb$018<<2)|0) + 112|0);
  $115 = +HEAPF32[$114>>2];
  $116 = +HEAPF32[$109>>2];
  $117 = +HEAPF32[$110>>2];
  $118 = $117 < 1.0;
  $119 = $118 ? 94.8244476318359375 : $117;
  $120 = (+_fast_log2($115));
  $121 = $120;
  $122 = $121 * 3.01029995663981164711;
  $123 = $122;
  $124 = $113 * $113;
  $125 = $123 - $116;
  $126 = $124 > 9.99999968265522538896E-21;
  if ($126) {
   $127 = (+_fast_log2($124));
   $128 = $127;
   $129 = $128 * 0.0333334326559875798734;
   $130 = $129 + 1.0;
   $131 = $130;
   $w$0$i1 = $131;
  } else {
   $w$0$i1 = 0.0;
  }
  $132 = $w$0$i1 < 0.0;
  $w$1$i2 = $132 ? 0.0 : $w$0$i1;
  $133 = $125 * $w$1$i2;
  $134 = $116 + 90.3087310791015625;
  $135 = $134 - $119;
  $136 = $135 + $133;
  $137 = $136 * 0.100000001490116119385;
  $138 = (+Math_pow(10.0,(+$137)));
  $139 = ((($gfc) + ($sfb$018<<2)|0) + 84856|0);
  $140 = +HEAPF32[$139>>2];
  $141 = $138 * $140;
  $142 = ((($cod_info) + ($gsfb$116<<2)|0) + 4872|0);
  $143 = HEAP32[$142>>2]|0;
  $144 = (+($143|0));
  $145 = $141 / $144;
  $146 = ($143|0)>(0);
  if ($146) {
   $en03$05$us = 0.0;$j$46$us = $j$215;$l2$04$us = 0;$rh26$07$us = 2.22044604925031308085E-16;
   while(1) {
    $163 = (($j$46$us) + 1)|0;
    $164 = (($cod_info) + ($j$46$us<<2)|0);
    $165 = +HEAPF32[$164>>2];
    $166 = $165 * $165;
    $149 = $en03$05$us + $166;
    $167 = $166 < $145;
    $168 = $167 ? $166 : $145;
    $153 = $rh26$07$us + $168;
    $169 = (($l2$04$us) + 1)|0;
    $exitcond = ($169|0)==($143|0);
    if ($exitcond) {
     break;
    } else {
     $en03$05$us = $149;$j$46$us = $163;$l2$04$us = $169;$rh26$07$us = $153;
    }
   }
   $147 = (($143) + ($j$215))|0;
   $148 = $149 > $141;
   $150 = $148&1;
   $ath_over$4$us = (($150) + ($ath_over$214))|0;
   $151 = $149 < $141;
   if ($151) {
    $rh37$0$us = $149;
   } else {
    $152 = $153 < $141;
    $$rh26$0$us = $152 ? $141 : $153;
    $rh37$0$us = $$rh26$0$us;
   }
   $154 = ((($ratio) + (($sfb$018*12)|0)|0) + 332|0);
   $155 = +HEAPF32[$154>>2];
   $156 = $155 > 9.9999999600419720025E-13;
   if ($156) {
    $157 = ((($ratio) + (($sfb$018*12)|0)|0) + 88|0);
    $158 = +HEAPF32[$157>>2];
    $159 = $149 * $158;
    $160 = $159 / $155;
    $161 = $160 * $140;
    $162 = $rh37$0$us < $161;
    if ($162) {
     $xmin4$0$us = $161;
    } else {
     $xmin4$0$us = $rh37$0$us;
    }
   } else {
    $xmin4$0$us = $rh37$0$us;
   }
   $244 = $xmin4$0$us > 2.22044604925031308085E-16;
   $245 = $244 ? $xmin4$0$us : 2.22044604925031308085E-16;
   $246 = $245 + 9.99999982451670044181E-15;
   $247 = $149 > $246;
   $248 = $247&1;
   $249 = ((($cod_info) + ($gsfb$116)|0) + 5212|0);
   HEAP8[$249>>0] = $248;
   $250 = (($$120) + 4|0);
   HEAPF32[$$120>>2] = $245;
   $en03$05$us$1 = 0.0;$j$46$us$1 = $147;$l2$04$us$1 = 0;$rh26$07$us$1 = 2.22044604925031308085E-16;
   while(1) {
    $251 = (($j$46$us$1) + 1)|0;
    $252 = (($cod_info) + ($j$46$us$1<<2)|0);
    $253 = +HEAPF32[$252>>2];
    $254 = $253 * $253;
    $255 = $en03$05$us$1 + $254;
    $256 = $254 < $145;
    $257 = $256 ? $254 : $145;
    $258 = $rh26$07$us$1 + $257;
    $259 = (($l2$04$us$1) + 1)|0;
    $exitcond$1 = ($259|0)==($143|0);
    if ($exitcond$1) {
     break;
    } else {
     $en03$05$us$1 = $255;$j$46$us$1 = $251;$l2$04$us$1 = $259;$rh26$07$us$1 = $258;
    }
   }
   $260 = (($143) + ($147))|0;
   $261 = $255 > $141;
   $262 = $261&1;
   $ath_over$4$us$1 = (($262) + ($ath_over$4$us))|0;
   $263 = $255 < $141;
   if ($263) {
    $rh37$0$us$1 = $255;
   } else {
    $264 = $258 < $141;
    $$rh26$0$us$1 = $264 ? $141 : $258;
    $rh37$0$us$1 = $$rh26$0$us$1;
   }
   $265 = ((($ratio) + (($sfb$018*12)|0)|0) + 336|0);
   $266 = +HEAPF32[$265>>2];
   $267 = $266 > 9.9999999600419720025E-13;
   if ($267) {
    $268 = ((($ratio) + (($sfb$018*12)|0)|0) + 92|0);
    $269 = +HEAPF32[$268>>2];
    $270 = $255 * $269;
    $271 = $270 / $266;
    $272 = +HEAPF32[$139>>2];
    $273 = $271 * $272;
    $274 = $rh37$0$us$1 < $273;
    if ($274) {
     $xmin4$0$us$1 = $273;
    } else {
     $xmin4$0$us$1 = $rh37$0$us$1;
    }
   } else {
    $xmin4$0$us$1 = $rh37$0$us$1;
   }
   $275 = $xmin4$0$us$1 > 2.22044604925031308085E-16;
   $276 = $275 ? $xmin4$0$us$1 : 2.22044604925031308085E-16;
   $277 = $276 + 9.99999982451670044181E-15;
   $278 = $255 > $277;
   $279 = $278&1;
   $280 = (($gsfb$116) + 1)|0;
   $281 = ((($cod_info) + ($280)|0) + 5212|0);
   HEAP8[$281>>0] = $279;
   $282 = (($$120) + 8|0);
   HEAPF32[$250>>2] = $276;
   $en03$05$us$2 = 0.0;$j$46$us$2 = $260;$l2$04$us$2 = 0;$rh26$07$us$2 = 2.22044604925031308085E-16;
   while(1) {
    $283 = (($j$46$us$2) + 1)|0;
    $284 = (($cod_info) + ($j$46$us$2<<2)|0);
    $285 = +HEAPF32[$284>>2];
    $286 = $285 * $285;
    $287 = $en03$05$us$2 + $286;
    $288 = $286 < $145;
    $289 = $288 ? $286 : $145;
    $290 = $rh26$07$us$2 + $289;
    $291 = (($l2$04$us$2) + 1)|0;
    $exitcond$2 = ($291|0)==($143|0);
    if ($exitcond$2) {
     break;
    } else {
     $en03$05$us$2 = $287;$j$46$us$2 = $283;$l2$04$us$2 = $291;$rh26$07$us$2 = $290;
    }
   }
   $292 = (($143) + ($260))|0;
   $293 = $287 > $141;
   $294 = $293&1;
   $ath_over$4$us$2 = (($294) + ($ath_over$4$us$1))|0;
   $295 = $287 < $141;
   if ($295) {
    $rh37$0$us$2 = $287;
   } else {
    $296 = $290 < $141;
    $$rh26$0$us$2 = $296 ? $141 : $290;
    $rh37$0$us$2 = $$rh26$0$us$2;
   }
   $297 = ((($ratio) + (($sfb$018*12)|0)|0) + 340|0);
   $298 = +HEAPF32[$297>>2];
   $299 = $298 > 9.9999999600419720025E-13;
   if ($299) {
    $300 = ((($ratio) + (($sfb$018*12)|0)|0) + 96|0);
    $301 = +HEAPF32[$300>>2];
    $302 = $287 * $301;
    $303 = $302 / $298;
    $304 = +HEAPF32[$139>>2];
    $305 = $303 * $304;
    $306 = $rh37$0$us$2 < $305;
    if ($306) {
     $xmin4$0$us$2 = $305;
    } else {
     $xmin4$0$us$2 = $rh37$0$us$2;
    }
   } else {
    $xmin4$0$us$2 = $rh37$0$us$2;
   }
   $307 = $xmin4$0$us$2 > 2.22044604925031308085E-16;
   $308 = $307 ? $xmin4$0$us$2 : 2.22044604925031308085E-16;
   $309 = $308 + 9.99999982451670044181E-15;
   $310 = $287 > $309;
   $311 = $310&1;
   $312 = (($gsfb$116) + 2)|0;
   $313 = ((($cod_info) + ($312)|0) + 5212|0);
   HEAP8[$313>>0] = $311;
   HEAPF32[$282>>2] = $308;
   $ath_over$3$lcssa = $ath_over$4$us$2;$j$3$lcssa = $292;
  } else {
   $170 = $141 < 0.0;
   $171 = $170&1;
   $ath_over$4 = (($171) + ($ath_over$214))|0;
   $172 = $141 > 0.0;
   if ($172) {
    $rh37$0 = 0.0;
   } else {
    $173 = $141 > 2.22044604925031308085E-16;
    $$rh26$0 = $173 ? $141 : 2.22044604925031308085E-16;
    $rh37$0 = $$rh26$0;
   }
   $174 = ((($ratio) + (($sfb$018*12)|0)|0) + 332|0);
   $175 = +HEAPF32[$174>>2];
   $176 = $175 > 9.9999999600419720025E-13;
   if ($176) {
    $177 = 0.0 / $175;
    $178 = $177 * $140;
    $179 = $rh37$0 < $178;
    if ($179) {
     $xmin4$0 = $178;
    } else {
     $xmin4$0 = $rh37$0;
    }
   } else {
    $xmin4$0 = $rh37$0;
   }
   $206 = $xmin4$0 > 2.22044604925031308085E-16;
   $207 = $206 ? $xmin4$0 : 2.22044604925031308085E-16;
   $208 = $207 + 9.99999982451670044181E-15;
   $209 = $208 < 0.0;
   $210 = $209&1;
   $211 = ((($cod_info) + ($gsfb$116)|0) + 5212|0);
   HEAP8[$211>>0] = $210;
   $212 = (($$120) + 4|0);
   HEAPF32[$$120>>2] = $207;
   $ath_over$4$1 = (($171) + ($ath_over$4))|0;
   if ($172) {
    $rh37$0$1 = 0.0;
   } else {
    $213 = $141 > 2.22044604925031308085E-16;
    $$rh26$0$1 = $213 ? $141 : 2.22044604925031308085E-16;
    $rh37$0$1 = $$rh26$0$1;
   }
   $214 = ((($ratio) + (($sfb$018*12)|0)|0) + 336|0);
   $215 = +HEAPF32[$214>>2];
   $216 = $215 > 9.9999999600419720025E-13;
   if ($216) {
    $217 = 0.0 / $215;
    $218 = +HEAPF32[$139>>2];
    $219 = $217 * $218;
    $220 = $rh37$0$1 < $219;
    if ($220) {
     $xmin4$0$1 = $219;
    } else {
     $xmin4$0$1 = $rh37$0$1;
    }
   } else {
    $xmin4$0$1 = $rh37$0$1;
   }
   $221 = $xmin4$0$1 > 2.22044604925031308085E-16;
   $222 = $221 ? $xmin4$0$1 : 2.22044604925031308085E-16;
   $223 = $222 + 9.99999982451670044181E-15;
   $224 = $223 < 0.0;
   $225 = $224&1;
   $226 = (($gsfb$116) + 1)|0;
   $227 = ((($cod_info) + ($226)|0) + 5212|0);
   HEAP8[$227>>0] = $225;
   $228 = (($$120) + 8|0);
   HEAPF32[$212>>2] = $222;
   $ath_over$4$2 = (($171) + ($ath_over$4$1))|0;
   if ($172) {
    $rh37$0$2 = 0.0;
   } else {
    $229 = $141 > 2.22044604925031308085E-16;
    $$rh26$0$2 = $229 ? $141 : 2.22044604925031308085E-16;
    $rh37$0$2 = $$rh26$0$2;
   }
   $230 = ((($ratio) + (($sfb$018*12)|0)|0) + 340|0);
   $231 = +HEAPF32[$230>>2];
   $232 = $231 > 9.9999999600419720025E-13;
   if ($232) {
    $233 = 0.0 / $231;
    $234 = +HEAPF32[$139>>2];
    $235 = $233 * $234;
    $236 = $rh37$0$2 < $235;
    if ($236) {
     $xmin4$0$2 = $235;
    } else {
     $xmin4$0$2 = $rh37$0$2;
    }
   } else {
    $xmin4$0$2 = $rh37$0$2;
   }
   $237 = $xmin4$0$2 > 2.22044604925031308085E-16;
   $238 = $237 ? $xmin4$0$2 : 2.22044604925031308085E-16;
   $239 = $238 + 9.99999982451670044181E-15;
   $240 = $239 < 0.0;
   $241 = $240&1;
   $242 = (($gsfb$116) + 2)|0;
   $243 = ((($cod_info) + ($242)|0) + 5212|0);
   HEAP8[$243>>0] = $241;
   HEAPF32[$228>>2] = $238;
   $ath_over$3$lcssa = $ath_over$4$2;$j$3$lcssa = $j$215;
  }
  $$2$lcssa = (($$120) + 12|0);
  $180 = HEAP32[$111>>2]|0;
  $181 = ($180|0)==(0);
  if (!($181)) {
   $182 = +HEAPF32[$$120>>2];
   $183 = (($$120) + 4|0);
   $184 = +HEAPF32[$183>>2];
   $185 = $182 > $184;
   if ($185) {
    $186 = $182 - $184;
    $187 = HEAP32[$112>>2]|0;
    $188 = (($187) + 6496|0);
    $189 = +HEAPF32[$188>>2];
    $190 = $186 * $189;
    $191 = $184 + $190;
    HEAPF32[$183>>2] = $191;
    $195 = $191;
   } else {
    $195 = $184;
   }
   $192 = (($$120) + 8|0);
   $193 = +HEAPF32[$192>>2];
   $194 = $195 > $193;
   if ($194) {
    $196 = $195 - $193;
    $197 = HEAP32[$112>>2]|0;
    $198 = (($197) + 6496|0);
    $199 = +HEAPF32[$198>>2];
    $200 = $196 * $199;
    $201 = $193 + $200;
    HEAPF32[$192>>2] = $201;
   }
  }
  $202 = (($sfb$018) + 1)|0;
  $203 = (($gsfb$116) + 3)|0;
  $204 = HEAP32[$103>>2]|0;
  $205 = ($203|0)<($204|0);
  if ($205) {
   $$120 = $$2$lcssa;$ath_over$214 = $ath_over$3$lcssa;$gsfb$116 = $203;$j$215 = $j$3$lcssa;$sfb$018 = $202;
  } else {
   $ath_over$2$lcssa = $ath_over$3$lcssa;
   break;
  }
 }
 STACKTOP = sp;return ($ath_over$2$lcssa|0);
}
function _calc_noise($cod_info,$l3_xmin,$distort,$res,$prev_noise) {
 $cod_info = $cod_info|0;
 $l3_xmin = $l3_xmin|0;
 $distort = $distort|0;
 $res = $res|0;
 $prev_noise = $prev_noise|0;
 var $$ = 0, $$0119 = 0, $$020 = 0, $$06$i = 0, $$111$i = 0, $$219$i = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0;
 var $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0.0, $114 = 0, $115 = 0, $116 = 0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0, $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0, $144 = 0.0, $145 = 0.0;
 var $146 = 0.0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0.0, $154 = 0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0.0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0, $distort_$0$ph = 0.0, $fabsf$i = 0.0, $fabsf1$i = 0.0, $fabsf2$i = 0.0, $fabsf3$i = 0.0, $ix01$i = 0, $j$04$i = 0, $j$19$i = 0, $j$217$i = 0, $j$3$i = 0, $j$3$i210 = 0;
 var $j$3$i3$ph = 0, $j$3$i34 = 0, $l$0 = 0, $max_noise$0$lcssa = 0.0, $max_noise$013 = 0.0, $noise$0$ph = 0.0, $noise$05$i = 0.0, $noise$06 = 0.0, $noise$110$i = 0.0, $noise$218$i = 0.0, $noise$3$i = 0.0, $over$0$lcssa = 0, $over$015 = 0, $over$1 = 0, $over_noise_db$0$lcssa = 0.0, $over_noise_db$011 = 0.0, $over_noise_db$1 = 0.0, $scalefac$014 = 0, $sfb$016 = 0, $tot_noise_db$0$lcssa = 0.0;
 var $tot_noise_db$012 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ix01$i = sp;
 $0 = (($res) + 16|0);
 HEAP32[$0>>2] = 0;
 $1 = (($cod_info) + 4864|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(0);
 if (!($3)) {
  $max_noise$0$lcssa = -20.0;$over$0$lcssa = 0;$over_noise_db$0$lcssa = 0.0;$tot_noise_db$0$lcssa = 0.0;
  $159 = (($res) + 12|0);
  HEAP32[$159>>2] = $over$0$lcssa;
  $160 = (($res) + 4|0);
  HEAPF32[$160>>2] = $tot_noise_db$0$lcssa;
  HEAPF32[$res>>2] = $over_noise_db$0$lcssa;
  $161 = (($res) + 8|0);
  HEAPF32[$161>>2] = $max_noise$0$lcssa;
  STACKTOP = sp;return ($over$0$lcssa|0);
 }
 $4 = (($cod_info) + 4608|0);
 $5 = (($cod_info) + 4780|0);
 $6 = (($cod_info) + 4832|0);
 $7 = (($cod_info) + 4836|0);
 $8 = ($prev_noise|0)!=(0|0);
 $9 = (($cod_info) + 5208|0);
 $10 = (($cod_info) + 4776|0);
 $11 = (($cod_info) + 4772|0);
 $12 = (($ix01$i) + 4|0);
 $$0119 = $distort;$$020 = $l3_xmin;$j$3$i210 = 0;$max_noise$013 = -20.0;$over$015 = 0;$over_noise_db$011 = 0.0;$scalefac$014 = $4;$sfb$016 = 0;$tot_noise_db$012 = 0.0;
 while(1) {
  $13 = HEAP32[$5>>2]|0;
  $14 = (($scalefac$014) + 4|0);
  $15 = HEAP32[$scalefac$014>>2]|0;
  $16 = HEAP32[$6>>2]|0;
  $17 = ($16|0)==(0);
  if ($17) {
   $21 = 0;
  } else {
   $18 = (64904 + ($sfb$016<<2)|0);
   $19 = HEAP32[$18>>2]|0;
   $21 = $19;
  }
  $20 = (($21) + ($15))|0;
  $22 = HEAP32[$7>>2]|0;
  $23 = (($22) + 1)|0;
  $24 = $20 << $23;
  $25 = (($13) - ($24))|0;
  $26 = ((($cod_info) + ($sfb$016<<2)|0) + 5028|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ((($cod_info) + ($27<<2)|0) + 4808|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $29 << 3;
  $31 = (($25) - ($30))|0;
  $32 = (($$020) + 4|0);
  $33 = +HEAPF32[$$020>>2];
  $34 = 1.0 / $33;
  if ($8) {
   $35 = ((($prev_noise) + ($sfb$016<<2)|0) + 8|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ($36|0)==($31|0);
   if ($37) {
    $38 = ((($cod_info) + ($sfb$016<<2)|0) + 4872|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = (($39) + ($j$3$i210))|0;
    $41 = ((($prev_noise) + ($sfb$016<<2)|0) + 164|0);
    $42 = +HEAPF32[$41>>2];
    $43 = $34 * $42;
    $44 = ((($prev_noise) + ($sfb$016<<2)|0) + 320|0);
    $45 = +HEAPF32[$44>>2];
    $140 = $13;$distort_$0$ph = $43;$j$3$i3$ph = $40;$noise$0$ph = $45;
    label = 27;
   } else {
    label = 8;
   }
  } else {
   label = 8;
  }
  do {
   if ((label|0) == 8) {
    label = 0;
    $46 = (($31) + 116)|0;
    $47 = (133528 + ($46<<2)|0);
    $48 = +HEAPF32[$47>>2];
    $49 = ((($cod_info) + ($sfb$016<<2)|0) + 4872|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = $50 >> 1;
    $52 = (($50) + ($j$3$i210))|0;
    $53 = HEAP32[$9>>2]|0;
    $54 = ($52|0)>($53|0);
    if ($54) {
     $55 = (($53) - ($j$3$i210))|0;
     $56 = ($55|0)>(-1);
     if ($56) {
      $57 = (($55) + 1)|0;
      $58 = $57 >> 1;
      $l$0 = $58;
     } else {
      $l$0 = 0;
     }
    } else {
     $l$0 = $51;
    }
    $59 = HEAP32[$10>>2]|0;
    $60 = ($j$3$i210|0)>($59|0);
    do {
     if ($60) {
      $61 = ($l$0|0)==(0);
      if ($61) {
       $j$3$i = $j$3$i210;$noise$3$i = 0.0;
      } else {
       $$06$i = $l$0;$j$04$i = $j$3$i210;$noise$05$i = 0.0;
       while(1) {
        $62 = (($$06$i) + -1)|0;
        $63 = (($cod_info) + ($j$04$i<<2)|0);
        $64 = +HEAPF32[$63>>2];
        $65 = (($j$04$i) + 1)|0;
        $66 = $64 * $64;
        $67 = $noise$05$i + $66;
        $68 = (($cod_info) + ($65<<2)|0);
        $69 = +HEAPF32[$68>>2];
        $70 = (($j$04$i) + 2)|0;
        $71 = $69 * $69;
        $72 = $67 + $71;
        $73 = ($62|0)==(0);
        if ($73) {
         break;
        } else {
         $$06$i = $62;$j$04$i = $70;$noise$05$i = $72;
        }
       }
       $124 = $l$0 << 1;
       $125 = (($124) + ($j$3$i210))|0;
       $j$3$i = $125;$noise$3$i = $72;
      }
     } else {
      $74 = HEAP32[$11>>2]|0;
      $75 = ($j$3$i210|0)>($74|0);
      if ($75) {
       HEAPF32[$ix01$i>>2] = 0.0;
       HEAPF32[$12>>2] = $48;
       $77 = ($l$0|0)==(0);
       if ($77) {
        $j$3$i = $j$3$i210;$noise$3$i = 0.0;
        break;
       } else {
        $$111$i = $l$0;$j$19$i = $j$3$i210;$noise$110$i = 0.0;
       }
       while(1) {
        $78 = (($$111$i) + -1)|0;
        $79 = (($cod_info) + ($j$19$i<<2)|0);
        $80 = +HEAPF32[$79>>2];
        $fabsf2$i = (+Math_abs((+$80)));
        $81 = ((($cod_info) + ($j$19$i<<2)|0) + 2304|0);
        $82 = HEAP32[$81>>2]|0;
        $83 = (($ix01$i) + ($82<<2)|0);
        $84 = +HEAPF32[$83>>2];
        $85 = $fabsf2$i - $84;
        $86 = (($j$19$i) + 1)|0;
        $87 = $85 * $85;
        $88 = $noise$110$i + $87;
        $89 = (($cod_info) + ($86<<2)|0);
        $90 = +HEAPF32[$89>>2];
        $fabsf3$i = (+Math_abs((+$90)));
        $91 = ((($cod_info) + ($86<<2)|0) + 2304|0);
        $92 = HEAP32[$91>>2]|0;
        $93 = (($ix01$i) + ($92<<2)|0);
        $94 = +HEAPF32[$93>>2];
        $95 = $fabsf3$i - $94;
        $96 = (($j$19$i) + 2)|0;
        $97 = $95 * $95;
        $98 = $88 + $97;
        $99 = ($78|0)==(0);
        if ($99) {
         break;
        } else {
         $$111$i = $78;$j$19$i = $96;$noise$110$i = $98;
        }
       }
       $126 = $l$0 << 1;
       $127 = (($126) + ($j$3$i210))|0;
       $j$3$i = $127;$noise$3$i = $98;
       break;
      } else {
       $76 = ($l$0|0)==(0);
       if ($76) {
        $j$3$i = $j$3$i210;$noise$3$i = 0.0;
        break;
       } else {
        $$219$i = $l$0;$j$217$i = $j$3$i210;$noise$218$i = 0.0;
       }
       while(1) {
        $100 = (($$219$i) + -1)|0;
        $101 = (($cod_info) + ($j$217$i<<2)|0);
        $102 = +HEAPF32[$101>>2];
        $fabsf$i = (+Math_abs((+$102)));
        $103 = ((($cod_info) + ($j$217$i<<2)|0) + 2304|0);
        $104 = HEAP32[$103>>2]|0;
        $105 = (66832 + ($104<<2)|0);
        $106 = +HEAPF32[$105>>2];
        $107 = $48 * $106;
        $108 = $fabsf$i - $107;
        $109 = (($j$217$i) + 1)|0;
        $110 = $108 * $108;
        $111 = $noise$218$i + $110;
        $112 = (($cod_info) + ($109<<2)|0);
        $113 = +HEAPF32[$112>>2];
        $fabsf1$i = (+Math_abs((+$113)));
        $114 = ((($cod_info) + ($109<<2)|0) + 2304|0);
        $115 = HEAP32[$114>>2]|0;
        $116 = (66832 + ($115<<2)|0);
        $117 = +HEAPF32[$116>>2];
        $118 = $48 * $117;
        $119 = $fabsf1$i - $118;
        $120 = (($j$217$i) + 2)|0;
        $121 = $119 * $119;
        $122 = $111 + $121;
        $123 = ($100|0)==(0);
        if ($123) {
         break;
        } else {
         $$219$i = $100;$j$217$i = $120;$noise$218$i = $122;
        }
       }
       $128 = $l$0 << 1;
       $129 = (($128) + ($j$3$i210))|0;
       $j$3$i = $129;$noise$3$i = $122;
       break;
      }
     }
    } while(0);
    if ($8) {
     $130 = ((($prev_noise) + ($sfb$016<<2)|0) + 8|0);
     HEAP32[$130>>2] = $31;
     $131 = ((($prev_noise) + ($sfb$016<<2)|0) + 164|0);
     HEAPF32[$131>>2] = $noise$3$i;
    }
    $132 = $34 * $noise$3$i;
    $133 = $132 > 9.99999968265522538896E-21;
    $134 = $133 ? $132 : 9.99999968265522538896E-21;
    $135 = (+_fast_log2($134));
    $136 = $135;
    $137 = $136 * 0.301029995663981142506;
    $138 = $137;
    if ($8) {
     $139 = ((($prev_noise) + ($sfb$016<<2)|0) + 320|0);
     HEAPF32[$139>>2] = $138;
     $$pre = HEAP32[$5>>2]|0;
     $140 = $$pre;$distort_$0$ph = $132;$j$3$i3$ph = $j$3$i;$noise$0$ph = $138;
     label = 27;
     break;
    } else {
     HEAPF32[$$0119>>2] = $132;
     $j$3$i34 = $j$3$i;$noise$06 = $138;
     break;
    }
   }
  } while(0);
  if ((label|0) == 27) {
   label = 0;
   HEAPF32[$$0119>>2] = $distort_$0$ph;
   HEAP32[$prev_noise>>2] = $140;
   $j$3$i34 = $j$3$i3$ph;$noise$06 = $noise$0$ph;
  }
  $141 = (($$0119) + 4|0);
  $142 = $tot_noise_db$012 + $noise$06;
  $143 = $noise$06 > 0.0;
  if ($143) {
   $144 = $noise$06 * 10.0;
   $145 = $144;
   $146 = $145 + 0.5;
   $147 = (~~(($146)));
   $148 = ($147|0)>(1);
   $$ = $148 ? $147 : 1;
   $149 = Math_imul($$, $$)|0;
   $150 = HEAP32[$0>>2]|0;
   $151 = (($150) + ($149))|0;
   HEAP32[$0>>2] = $151;
   $152 = (($over$015) + 1)|0;
   $153 = $over_noise_db$011 + $noise$06;
   $over$1 = $152;$over_noise_db$1 = $153;
  } else {
   $over$1 = $over$015;$over_noise_db$1 = $over_noise_db$011;
  }
  $154 = $max_noise$013 > $noise$06;
  $155 = $154 ? $max_noise$013 : $noise$06;
  $156 = (($sfb$016) + 1)|0;
  $157 = HEAP32[$1>>2]|0;
  $158 = ($156|0)<($157|0);
  if ($158) {
   $$0119 = $141;$$020 = $32;$j$3$i210 = $j$3$i34;$max_noise$013 = $155;$over$015 = $over$1;$over_noise_db$011 = $over_noise_db$1;$scalefac$014 = $14;$sfb$016 = $156;$tot_noise_db$012 = $142;
  } else {
   $max_noise$0$lcssa = $155;$over$0$lcssa = $over$1;$over_noise_db$0$lcssa = $over_noise_db$1;$tot_noise_db$0$lcssa = $142;
   break;
  }
 }
 $159 = (($res) + 12|0);
 HEAP32[$159>>2] = $over$0$lcssa;
 $160 = (($res) + 4|0);
 HEAPF32[$160>>2] = $tot_noise_db$0$lcssa;
 HEAPF32[$res>>2] = $over_noise_db$0$lcssa;
 $161 = (($res) + 8|0);
 HEAPF32[$161>>2] = $max_noise$0$lcssa;
 STACKTOP = sp;return ($over$0$lcssa|0);
}
function _set_frame_pinfo($gfc,$ratio) {
 $gfc = $gfc|0;
 $ratio = $ratio|0;
 var $$$i = 0, $$1$i = 0.0, $$2$i = 0.0, $$phi$trans$insert$i = 0, $$phi$trans$insert39$i = 0, $$pre = 0, $$pre$i = 0, $$pre13 = 0, $$pre14 = 0, $$pre40$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0.0, $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0.0;
 var $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0, $136 = 0, $137 = 0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0.0;
 var $143 = 0.0, $144 = 0.0, $145 = 0, $146 = 0, $147 = 0.0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0.0, $154 = 0.0, $155 = 0, $156 = 0.0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0.0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0;
 var $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0;
 var $82 = 0.0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0.0, $ch$04 = 0;
 var $en0$0$lcssa$i = 0.0, $en0$017$i = 0.0, $en0$1$i = 0.0, $en0$2$lcssa$i = 0.0, $en0$25$i = 0.0, $en0$3$i = 0.0, $en0$4$i = 0.0, $exitcond$i = 0, $exitcond32$i = 0, $exitcond33$i = 0, $exitcond36$i = 0, $exitcond38$i = 0, $gr$08 = 0, $i$08$i = 0, $j$0$lcssa$i = 0, $j$023$i = 0, $j$1$lcssa$i = 0, $j$116$i = 0, $j$211$i = 0, $j$37$i = 0;
 var $j$4$lcssa$i = 0, $j$43$i = 0, $l$04$i = 0, $l3_xmin$i = 0, $noise$i = 0, $or$cond$i = 0, $scalefac_sav = 0, $sfb$0$lcssa$i = 0, $sfb$01 = 0, $sfb$024$i = 0, $sfb$113$i = 0, $sfb2$0$i = 0, $sfb2$112$i = 0, $sfb2$29$i = 0, $xfsf$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 496|0;
 $l3_xmin$i = sp + 340|0;
 $xfsf$i = sp + 184|0;
 $noise$i = sp + 160|0;
 $scalefac_sav = sp;
 $0 = (($gfc) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = (($gfc) + 72|0);
 $4 = (($gfc) + 85804|0);
 $5 = (($gfc) + 212|0);
 $6 = (($gfc) + 85796|0);
 $$phi$trans$insert39$i = (($gfc) + 21360|0);
 $7 = (($gfc) + 216|0);
 $8 = (($noise$i) + 12|0);
 $9 = (($noise$i) + 8|0);
 $10 = (($noise$i) + 4|0);
 $11 = (($noise$i) + 16|0);
 $$pre = HEAP32[$3>>2]|0;
 $13 = $$pre;$206 = $1;$gr$08 = 0;
 while(1) {
  $12 = ($13|0)>(0);
  if ($12) {
   $14 = ($gr$08|0)==(1);
   $ch$04 = 0;
   while(1) {
    $15 = (((($gfc) + (($gr$08*10504)|0)|0) + (($ch$04*5252)|0)|0) + 304|0);
    $16 = (((($gfc) + (($gr$08*10504)|0)|0) + (($ch$04*5252)|0)|0) + 4912|0);
    _memcpy(($scalefac_sav|0),($16|0),156)|0;
    if ($14) {
     $17 = ((($gfc) + (($ch$04*5252)|0)|0) + 15656|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($18|0)>(0);
     if ($19) {
      $208 = $18;$sfb$01 = 0;
      while(1) {
       $20 = (((($gfc) + (($ch$04*5252)|0)|0) + ($sfb$01<<2)|0) + 15416|0);
       $21 = HEAP32[$20>>2]|0;
       $22 = ($21|0)<(0);
       if ($22) {
        $23 = (((($gfc) + (($ch$04*5252)|0)|0) + ($sfb$01<<2)|0) + 4912|0);
        $24 = HEAP32[$23>>2]|0;
        HEAP32[$20>>2] = $24;
        $$pre14 = HEAP32[$17>>2]|0;
        $27 = $$pre14;
       } else {
        $27 = $208;
       }
       $25 = (($sfb$01) + 1)|0;
       $26 = ($25|0)<($27|0);
       if ($26) {
        $208 = $27;$sfb$01 = $25;
       } else {
        break;
       }
      }
     }
    }
    $28 = ((($ratio) + (($gr$08*976)|0)|0) + (($ch$04*488)|0)|0);
    $29 = (((($gfc) + (($gr$08*10504)|0)|0) + (($ch$04*5252)|0)|0) + 5140|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = ($30|0)==(0);
    $32 = $31 ? 0.5 : 1.0;
    (_calc_xmin($gfc,$28,$15,$l3_xmin$i)|0);
    (_calc_noise($15,$l3_xmin$i,$xfsf$i,$noise$i,0)|0);
    $33 = (((($gfc) + (($gr$08*10504)|0)|0) + (($ch$04*5252)|0)|0) + 5152|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = (((($gfc) + (($gr$08*10504)|0)|0) + (($ch$04*5252)|0)|0) + 5092|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($36|0)==(2);
    if ($37) {
     $sfb2$0$i = $34;
    } else {
     $38 = (((($gfc) + (($gr$08*10504)|0)|0) + (($ch$04*5252)|0)|0) + 5096|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = ($39|0)==(0);
     $$$i = $40 ? 22 : $34;
     $sfb2$0$i = $$$i;
    }
    $41 = ($sfb2$0$i|0)>(0);
    if ($41) {
     $42 = HEAP32[$4>>2]|0;
     $43 = HEAP32[$6>>2]|0;
     $44 = (((($gfc) + (($gr$08*10504)|0)|0) + (($ch$04*5252)|0)|0) + 5136|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45|0)!=(0);
     $$pre40$i = HEAP32[$$phi$trans$insert39$i>>2]|0;
     $51 = $$pre40$i;$j$023$i = 0;$sfb$024$i = 0;
     while(1) {
      $47 = (($sfb$024$i) + 1)|0;
      $48 = ((($gfc) + ($47<<2)|0) + 21360|0);
      $49 = HEAP32[$48>>2]|0;
      $50 = (($49) - ($51))|0;
      $52 = ($j$023$i|0)<($49|0);
      if ($52) {
       $en0$017$i = 0.0;$j$116$i = $j$023$i;
       while(1) {
        $53 = ((((($gfc) + (($gr$08*10504)|0)|0) + (($ch$04*5252)|0)|0) + ($j$116$i<<2)|0) + 304|0);
        $54 = +HEAPF32[$53>>2];
        $55 = $54 * $54;
        $56 = $en0$017$i + $55;
        $57 = (($j$116$i) + 1)|0;
        $exitcond36$i = ($57|0)==($49|0);
        if ($exitcond36$i) {
         $en0$0$lcssa$i = $56;$j$1$lcssa$i = $49;
         break;
        } else {
         $en0$017$i = $56;$j$116$i = $57;
        }
       }
      } else {
       $en0$0$lcssa$i = 0.0;$j$1$lcssa$i = $j$023$i;
      }
      $58 = (+($50|0));
      $59 = $en0$0$lcssa$i / $58;
      $60 = $59 * 999999986991104.0;
      $61 = $60;
      $62 = ((((($42) + (($gr$08*704)|0)|0) + (($ch$04*176)|0)|0) + ($sfb$024$i<<3)|0) + 190712|0);
      HEAPF64[$62>>3] = $61;
      $63 = (($l3_xmin$i) + ($sfb$024$i<<2)|0);
      $64 = +HEAPF32[$63>>2];
      $65 = $64 * 999999986991104.0;
      $66 = (($xfsf$i) + ($sfb$024$i<<2)|0);
      $67 = +HEAPF32[$66>>2];
      $68 = $65 * $67;
      $69 = $68 / $58;
      $70 = $69;
      $71 = ((((($42) + (($gr$08*352)|0)|0) + (($ch$04*176)|0)|0) + ($sfb$024$i<<3)|0) + 201208|0);
      HEAPF64[$71>>3] = $70;
      $72 = ((((($ratio) + (($gr$08*976)|0)|0) + (($ch$04*488)|0)|0) + ($sfb$024$i<<2)|0) + 244|0);
      $73 = +HEAPF32[$72>>2];
      $74 = $73 > 0.0;
      if ($74) {
       $75 = HEAP32[$5>>2]|0;
       $76 = ($75|0)==(0);
       if ($76) {
        $77 = $59 / $73;
        $en0$1$i = $77;
       } else {
        $en0$1$i = 0.0;
       }
      } else {
       $en0$1$i = 0.0;
      }
      $78 = (((($ratio) + (($gr$08*976)|0)|0) + (($ch$04*488)|0)|0) + ($sfb$024$i<<2)|0);
      $79 = +HEAPF32[$78>>2];
      $80 = $en0$1$i * $79;
      $81 = ((($43) + ($sfb$024$i<<2)|0) + 24|0);
      $82 = +HEAPF32[$81>>2];
      $83 = $80 > $82;
      $$1$i = $83 ? $80 : $82;
      $84 = $$1$i * 999999986991104.0;
      $85 = $84;
      $86 = ((((($42) + (($gr$08*704)|0)|0) + (($ch$04*176)|0)|0) + ($sfb$024$i<<3)|0) + 189304|0);
      HEAPF64[$86>>3] = $85;
      $87 = ((((($42) + (($gr$08*352)|0)|0) + (($ch$04*176)|0)|0) + ($sfb$024$i<<3)|0) + 199160|0);
      HEAPF64[$87>>3] = 0.0;
      $88 = ($sfb$024$i|0)>(10);
      $or$cond$i = $46 & $88;
      if ($or$cond$i) {
       $89 = (64904 + ($sfb$024$i<<2)|0);
       $90 = HEAP32[$89>>2]|0;
       $91 = (+($90|0));
       $92 = $32 * $91;
       $93 = -$92;
       $94 = $93;
       HEAPF64[$87>>3] = $94;
       $102 = $94;
      } else {
       $102 = 0.0;
      }
      $95 = ($sfb$024$i|0)<(21);
      if ($95) {
       $96 = ((((($gfc) + (($gr$08*10504)|0)|0) + (($ch$04*5252)|0)|0) + ($sfb$024$i<<2)|0) + 4912|0);
       $97 = HEAP32[$96>>2]|0;
       $98 = (+($97|0));
       $99 = $32 * $98;
       $100 = $99;
       $101 = $102 - $100;
       HEAPF64[$87>>3] = $101;
      }
      $exitcond38$i = ($47|0)==($sfb2$0$i|0);
      if ($exitcond38$i) {
       $j$0$lcssa$i = $j$1$lcssa$i;$sfb$0$lcssa$i = $sfb2$0$i;
       break;
      } else {
       $51 = $49;$j$023$i = $j$1$lcssa$i;$sfb$024$i = $47;
      }
     }
    } else {
     $j$0$lcssa$i = 0;$sfb$0$lcssa$i = 0;
    }
    if ($37) {
     $103 = (((($gfc) + (($gr$08*10504)|0)|0) + (($ch$04*5252)|0)|0) + 5156|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ($104|0)<(13);
     if ($105) {
      $106 = HEAP32[$4>>2]|0;
      $107 = HEAP32[$5>>2]|0;
      $108 = ($107|0)==(0);
      $109 = HEAP32[$6>>2]|0;
      $$phi$trans$insert$i = ((($gfc) + ($104<<2)|0) + 21452|0);
      $$pre$i = HEAP32[$$phi$trans$insert$i>>2]|0;
      $115 = $$pre$i;$j$211$i = $j$0$lcssa$i;$sfb$113$i = $104;$sfb2$112$i = $sfb$0$lcssa$i;
      while(1) {
       $111 = (($sfb$113$i) + 1)|0;
       $112 = ((($gfc) + ($111<<2)|0) + 21452|0);
       $113 = HEAP32[$112>>2]|0;
       $114 = (($113) - ($115))|0;
       $116 = ($115|0)<($113|0);
       $117 = (+($114|0));
       $118 = ($sfb$113$i*3)|0;
       $119 = ((($109) + ($sfb$113$i<<2)|0) + 112|0);
       $120 = +HEAPF32[$119>>2];
       $121 = ($sfb$113$i|0)<(12);
       $i$08$i = 0;$j$37$i = $j$211$i;$sfb2$29$i = $sfb2$112$i;
       while(1) {
        if ($116) {
         $en0$25$i = 0.0;$j$43$i = $j$37$i;$l$04$i = $115;
         while(1) {
          $122 = ((((($gfc) + (($gr$08*10504)|0)|0) + (($ch$04*5252)|0)|0) + ($j$43$i<<2)|0) + 304|0);
          $123 = +HEAPF32[$122>>2];
          $124 = $123 * $123;
          $125 = $en0$25$i + $124;
          $126 = (($j$43$i) + 1)|0;
          $127 = (($l$04$i) + 1)|0;
          $exitcond$i = ($127|0)==($113|0);
          if ($exitcond$i) {
           break;
          } else {
           $en0$25$i = $125;$j$43$i = $126;$l$04$i = $127;
          }
         }
         $128 = (($j$37$i) + ($114))|0;
         $en0$2$lcssa$i = $125;$j$4$lcssa$i = $128;
        } else {
         $en0$2$lcssa$i = 0.0;$j$4$lcssa$i = $j$37$i;
        }
        $129 = $en0$2$lcssa$i / $117;
        $130 = $129;
        $131 = $130 > 9.99999999999999945153E-21;
        $132 = $131 ? $129 : 9.99999968265522538896E-21;
        $133 = $132 * 999999986991104.0;
        $134 = $133;
        $135 = (($i$08$i) + ($118))|0;
        $136 = ((((($106) + (($gr$08*1248)|0)|0) + (($ch$04*312)|0)|0) + ($135<<3)|0) + 194616|0);
        HEAPF64[$136>>3] = $134;
        $137 = (($l3_xmin$i) + ($sfb2$29$i<<2)|0);
        $138 = +HEAPF32[$137>>2];
        $139 = $138 * 999999986991104.0;
        $140 = (($xfsf$i) + ($sfb2$29$i<<2)|0);
        $141 = +HEAPF32[$140>>2];
        $142 = $139 * $141;
        $143 = $142 / $117;
        $144 = $143;
        $145 = ((((($106) + (($gr$08*624)|0)|0) + (($ch$04*312)|0)|0) + ($135<<3)|0) + 201912|0);
        HEAPF64[$145>>3] = $144;
        $146 = (((((($ratio) + (($gr$08*976)|0)|0) + (($ch$04*488)|0)|0) + (($sfb$113$i*12)|0)|0) + ($i$08$i<<2)|0) + 332|0);
        $147 = +HEAPF32[$146>>2];
        $148 = $147 > 0.0;
        if ($148) {
         $149 = $132 / $147;
         $en0$3$i = $149;
        } else {
         $en0$3$i = 0.0;
        }
        if ($108) {
         $150 = HEAP32[$7>>2]|0;
         $151 = ($150|0)==(0);
         if ($151) {
          $en0$4$i = $en0$3$i;
         } else {
          label = 36;
         }
        } else {
         label = 36;
        }
        if ((label|0) == 36) {
         label = 0;
         $en0$4$i = 0.0;
        }
        $152 = (((((($ratio) + (($gr$08*976)|0)|0) + (($ch$04*488)|0)|0) + (($sfb$113$i*12)|0)|0) + ($i$08$i<<2)|0) + 88|0);
        $153 = +HEAPF32[$152>>2];
        $154 = $en0$4$i * $153;
        $155 = $154 > $120;
        $$2$i = $155 ? $154 : $120;
        $156 = $$2$i * 999999986991104.0;
        $157 = $156;
        $158 = ((((($106) + (($gr$08*1248)|0)|0) + (($ch$04*312)|0)|0) + ($135<<3)|0) + 192120|0);
        HEAPF64[$158>>3] = $157;
        $159 = ((((($gfc) + (($gr$08*10504)|0)|0) + (($ch$04*5252)|0)|0) + ($i$08$i<<2)|0) + 5112|0);
        $160 = HEAP32[$159>>2]|0;
        $161 = (+($160|0));
        $162 = $161 * -2.0;
        $163 = ((((($106) + (($gr$08*624)|0)|0) + (($ch$04*312)|0)|0) + ($135<<3)|0) + 199864|0);
        HEAPF64[$163>>3] = $162;
        if ($121) {
         $164 = ((((($gfc) + (($gr$08*10504)|0)|0) + (($ch$04*5252)|0)|0) + ($sfb2$29$i<<2)|0) + 4912|0);
         $165 = HEAP32[$164>>2]|0;
         $166 = (+($165|0));
         $167 = $32 * $166;
         $168 = $167;
         $169 = $162 - $168;
         HEAPF64[$163>>3] = $169;
        }
        $170 = (($sfb2$29$i) + 1)|0;
        $171 = (($i$08$i) + 1)|0;
        $exitcond32$i = ($171|0)==(3);
        if ($exitcond32$i) {
         break;
        } else {
         $i$08$i = $171;$j$37$i = $j$4$lcssa$i;$sfb2$29$i = $170;
        }
       }
       $110 = (($sfb2$112$i) + 3)|0;
       $exitcond33$i = ($111|0)==(13);
       if ($exitcond33$i) {
        break;
       } else {
        $115 = $113;$j$211$i = $j$4$lcssa$i;$sfb$113$i = $111;$sfb2$112$i = $110;
       }
      }
     }
    }
    $172 = (((($gfc) + (($gr$08*10504)|0)|0) + (($ch$04*5252)|0)|0) + 5084|0);
    $173 = HEAP32[$172>>2]|0;
    $174 = HEAP32[$4>>2]|0;
    $175 = (((($174) + ($gr$08<<3)|0) + ($ch$04<<2)|0) + 201112|0);
    HEAP32[$175>>2] = $173;
    $176 = (((($gfc) + (($gr$08*10504)|0)|0) + (($ch$04*5252)|0)|0) + 5072|0);
    $177 = HEAP32[$176>>2]|0;
    $178 = (((($gfc) + (($gr$08*10504)|0)|0) + (($ch$04*5252)|0)|0) + 5148|0);
    $179 = HEAP32[$178>>2]|0;
    $180 = (($179) + ($177))|0;
    $181 = (((($174) + ($gr$08<<3)|0) + ($ch$04<<2)|0) + 203400|0);
    HEAP32[$181>>2] = $180;
    $182 = HEAP32[$178>>2]|0;
    $183 = (((($174) + ($gr$08<<3)|0) + ($ch$04<<2)|0) + 203416|0);
    HEAP32[$183>>2] = $182;
    $184 = HEAP32[$8>>2]|0;
    $185 = (((($174) + ($gr$08<<3)|0) + ($ch$04<<2)|0) + 203160|0);
    HEAP32[$185>>2] = $184;
    $186 = +HEAPF32[$9>>2];
    $187 = $186;
    $188 = $187 * 10.0;
    $189 = (((($174) + ($gr$08<<4)|0) + ($ch$04<<3)|0) + 203208|0);
    HEAPF64[$189>>3] = $188;
    $190 = +HEAPF32[$noise$i>>2];
    $191 = $190;
    $192 = $191 * 10.0;
    $193 = (((($174) + ($gr$08<<4)|0) + ($ch$04<<3)|0) + 203240|0);
    HEAPF64[$193>>3] = $192;
    $194 = +HEAPF32[$10>>2];
    $195 = $194;
    $196 = $195 * 10.0;
    $197 = (((($174) + ($gr$08<<4)|0) + ($ch$04<<3)|0) + 203176|0);
    HEAPF64[$197>>3] = $196;
    $198 = HEAP32[$11>>2]|0;
    $199 = (((($174) + ($gr$08<<3)|0) + ($ch$04<<2)|0) + 203272|0);
    HEAP32[$199>>2] = $198;
    _memcpy(($16|0),($scalefac_sav|0),156)|0;
    $200 = (($ch$04) + 1)|0;
    $201 = HEAP32[$3>>2]|0;
    $202 = ($200|0)<($201|0);
    if ($202) {
     $ch$04 = $200;
    } else {
     break;
    }
   }
   $$pre13 = HEAP32[$0>>2]|0;
   $205 = $$pre13;$207 = $201;
  } else {
   $205 = $206;$207 = $13;
  }
  $203 = (($gr$08) + 1)|0;
  $204 = ($203|0)<($205|0);
  if ($204) {
   $13 = $207;$206 = $205;$gr$08 = $203;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _ResvFrameBegin($gfc,$mean_bits) {
 $gfc = $gfc|0;
 $mean_bits = $mean_bits|0;
 var $$ = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fullFrameBits$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_getframebits($gfc)|0);
 $1 = (($gfc) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 << 3;
 $4 = (($0) - ($3))|0;
 $5 = (($gfc) + 76|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4|0) / ($6|0))&-1;
 $8 = $6 << 11;
 $9 = (($8) + -8)|0;
 $10 = (($gfc) + 148|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) - ($0))|0;
 $13 = (($gfc) + 52144|0);
 $14 = ($12|0)>($9|0);
 $$ = $14 ? $9 : $12;
 HEAP32[$13>>2] = $$;
 $15 = ($$|0)<(0);
 if ($15) {
  label = 3;
 } else {
  $16 = (($gfc) + 144|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)==(0);
  if ($18) {
   $23 = $$;
  } else {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  HEAP32[$13>>2] = 0;
  $23 = 0;
 }
 $19 = Math_imul($6, $7)|0;
 $20 = (($gfc) + 52140|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)<($23|0);
 $$1 = $22 ? $21 : $23;
 $24 = (($$1) + ($19))|0;
 $25 = ($24|0)>($11|0);
 $fullFrameBits$0 = $25 ? $11 : $24;
 $26 = (($gfc) + 21320|0);
 HEAP32[$26>>2] = 0;
 $27 = (($gfc) + 85804|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)==(0|0);
 if ($29) {
  HEAP32[$mean_bits>>2] = $7;
  STACKTOP = sp;return ($fullFrameBits$0|0);
 }
 $30 = (($7|0) / 2)&-1;
 $31 = (($28) + 203484|0);
 HEAP32[$31>>2] = $30;
 $32 = HEAP32[$20>>2]|0;
 $33 = (($28) + 203488|0);
 HEAP32[$33>>2] = $32;
 HEAP32[$mean_bits>>2] = $7;
 STACKTOP = sp;return ($fullFrameBits$0|0);
}
function _ResvMaxBits($gfc,$mean_bits,$targ_bits,$extra_bits,$cbr) {
 $gfc = $gfc|0;
 $mean_bits = $mean_bits|0;
 $targ_bits = $targ_bits|0;
 $extra_bits = $extra_bits|0;
 $cbr = $cbr|0;
 var $$ = 0, $$1 = 0, $$1$ = 0, $$not = 0, $$not2 = 0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ResvMax$0 = 0, $add_bits$0 = 0, $brmerge = 0, $targBits$0 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($gfc) + 52140|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($gfc) + 52144|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($cbr|0)==(0);
 $5 = $4 ? 0 : $mean_bits;
 $$1 = (($1) + ($5))|0;
 $6 = (($gfc) + 85096|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  $ResvMax$0 = $3;
 } else {
  $10 = (+($3|0));
  $11 = $10 * 0.900000000000000022204;
  $12 = (~~(($11)));
  $ResvMax$0 = $12;
 }
 $13 = ($$1*10)|0;
 $14 = ($ResvMax$0*9)|0;
 $15 = ($13|0)>($14|0);
 if ($15) {
  $16 = (($14|0) / 10)&-1;
  $17 = (($$1) - ($16))|0;
  $18 = (($17) + ($mean_bits))|0;
  $19 = $7 | 128;
  HEAP32[$6>>2] = $19;
  $add_bits$0 = $17;$targBits$0 = $18;
 } else {
  $20 = $7 & 127;
  HEAP32[$6>>2] = $20;
  $21 = (($gfc) + 144|0);
  $22 = HEAP32[$21>>2]|0;
  $$not = ($22|0)!=(0);
  $$not2 = $9 ^ 1;
  $brmerge = $$not | $$not2;
  if ($brmerge) {
   $add_bits$0 = 0;$targBits$0 = $mean_bits;
  } else {
   $23 = (+($mean_bits|0));
   $24 = $23 * 0.900000000000000022204;
   $25 = (~~(($24)));
   $add_bits$0 = 0;$targBits$0 = $25;
  }
 }
 $26 = ($3*6)|0;
 $27 = (($26|0) / 10)&-1;
 $28 = ($$1|0)<($27|0);
 $$1$ = $28 ? $$1 : $27;
 $29 = (($$1$) - ($add_bits$0))|0;
 $30 = ($29|0)<(0);
 $$ = $30 ? 0 : $29;
 HEAP32[$targ_bits>>2] = $targBits$0;
 HEAP32[$extra_bits>>2] = $$;
 STACKTOP = sp;return;
}
function _ResvAdjust($gfc,$gi) {
 $gfc = $gfc|0;
 $gi = $gi|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $sum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($gi) + 4768|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($gi) + 4844|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($gfc) + 52140|0);
 $5 = HEAP32[$4>>2]|0;
 $sum = (($3) + ($1))|0;
 $6 = (($5) - ($sum))|0;
 HEAP32[$4>>2] = $6;
 STACKTOP = sp;return;
}
function _ResvFrameEnd($gfc,$mean_bits) {
 $gfc = $gfc|0;
 $mean_bits = $mean_bits|0;
 var $$stuffingBits$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $stuffingBits$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($gfc) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = Math_imul($1, $mean_bits)|0;
 $3 = (($gfc) + 52140|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($2))|0;
 $6 = (($gfc) + 21324|0);
 $7 = (($gfc) + 21320|0);
 $8 = (($5|0) % 8)&-1;
 $9 = (($5) - ($8))|0;
 $10 = (($gfc) + 52144|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) - ($11))|0;
 $13 = ($12|0)>(0);
 $14 = $13 ? $12 : 0;
 $stuffingBits$1 = (($14) + ($8))|0;
 $15 = (($gfc) + 21312|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $16 << 3;
 $18 = ($17|0)<($stuffingBits$1|0);
 $$stuffingBits$1 = $18 ? $17 : $stuffingBits$1;
 $19 = (($$stuffingBits$1|0) / 8)&-1;
 $20 = $19 << 3;
 HEAP32[$7>>2] = $20;
 $21 = (($stuffingBits$1) - ($20))|0;
 $22 = (($5) - ($20))|0;
 $23 = (($16) - ($19))|0;
 HEAP32[$15>>2] = $23;
 HEAP32[$6>>2] = $21;
 $24 = (($22) - ($21))|0;
 HEAP32[$3>>2] = $24;
 STACKTOP = sp;return;
}
function _lame_set_num_samples($gfp,$num_samples) {
 $gfp = $gfp|0;
 $num_samples = $num_samples|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = -1;
 } else {
  $2 = (($gfp) + 4|0);
  HEAP32[$2>>2] = $num_samples;
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_get_num_samples($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = (($gfp) + 4|0);
  $3 = HEAP32[$2>>2]|0;
  $$0 = $3;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_set_in_samplerate($gfp,$in_samplerate) {
 $gfp = $gfp|0;
 $in_samplerate = $in_samplerate|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = -1;
 } else {
  $2 = (($gfp) + 12|0);
  HEAP32[$2>>2] = $in_samplerate;
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_get_in_samplerate($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = (($gfp) + 12|0);
  $3 = HEAP32[$2>>2]|0;
  $$0 = $3;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_set_num_channels($gfp,$num_channels) {
 $gfp = $gfp|0;
 $num_channels = $num_channels|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = -1;
 } else {
  $2 = ($num_channels|0)>(2);
  $3 = ($num_channels|0)==(0);
  $or$cond = $2 | $3;
  if ($or$cond) {
   $$0 = -1;
  } else {
   $4 = (($gfp) + 8|0);
   HEAP32[$4>>2] = $num_channels;
   $$0 = 0;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_get_num_channels($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = (($gfp) + 8|0);
  $3 = HEAP32[$2>>2]|0;
  $$0 = $3;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_set_scale($gfp,$scale) {
 $gfp = $gfp|0;
 $scale = +$scale;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = -1;
 } else {
  $2 = (($gfp) + 20|0);
  HEAPF32[$2>>2] = $scale;
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_get_scale($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0.0;
 } else {
  $2 = (($gfp) + 20|0);
  $3 = +HEAPF32[$2>>2];
  $$0 = $3;
 }
 STACKTOP = sp;return (+$$0);
}
function _lame_set_scale_left($gfp,$scale) {
 $gfp = $gfp|0;
 $scale = +$scale;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = -1;
 } else {
  $2 = (($gfp) + 24|0);
  HEAPF32[$2>>2] = $scale;
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_get_scale_left($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0.0;
 } else {
  $2 = (($gfp) + 24|0);
  $3 = +HEAPF32[$2>>2];
  $$0 = $3;
 }
 STACKTOP = sp;return (+$$0);
}
function _lame_set_scale_right($gfp,$scale) {
 $gfp = $gfp|0;
 $scale = +$scale;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = -1;
 } else {
  $2 = (($gfp) + 28|0);
  HEAPF32[$2>>2] = $scale;
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_get_scale_right($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0.0;
 } else {
  $2 = (($gfp) + 28|0);
  $3 = +HEAPF32[$2>>2];
  $$0 = $3;
 }
 STACKTOP = sp;return (+$$0);
}
function _lame_set_out_samplerate($gfp,$out_samplerate) {
 $gfp = $gfp|0;
 $out_samplerate = $out_samplerate|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = -1;
 } else {
  $2 = (($gfp) + 16|0);
  HEAP32[$2>>2] = $out_samplerate;
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_get_out_samplerate($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = (($gfp) + 16|0);
  $3 = HEAP32[$2>>2]|0;
  $$0 = $3;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_set_analysis($gfp,$analysis) {
 $gfp = $gfp|0;
 $analysis = $analysis|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 $2 = ($analysis>>>0)>(1);
 $or$cond = $1 | $2;
 if ($or$cond) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($gfp) + 32|0);
 HEAP32[$3>>2] = $analysis;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _lame_get_analysis($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = (($gfp) + 32|0);
  $3 = HEAP32[$2>>2]|0;
  $$0 = $3;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_set_bWriteVbrTag($gfp,$bWriteVbrTag) {
 $gfp = $gfp|0;
 $bWriteVbrTag = $bWriteVbrTag|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 $2 = ($bWriteVbrTag>>>0)>(1);
 $or$cond = $1 | $2;
 if ($or$cond) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($gfp) + 36|0);
 HEAP32[$3>>2] = $bWriteVbrTag;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _lame_get_bWriteVbrTag($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = (($gfp) + 36|0);
  $3 = HEAP32[$2>>2]|0;
  $$0 = $3;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_set_decode_only($gfp,$decode_only) {
 $gfp = $gfp|0;
 $decode_only = $decode_only|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 $2 = ($decode_only>>>0)>(1);
 $or$cond = $1 | $2;
 if ($or$cond) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($gfp) + 40|0);
 HEAP32[$3>>2] = $decode_only;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _lame_get_decode_only($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = (($gfp) + 40|0);
  $3 = HEAP32[$2>>2]|0;
  $$0 = $3;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_set_ogg($gfp,$ogg) {
 $gfp = $gfp|0;
 $ogg = $ogg|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function _lame_get_ogg($gfp) {
 $gfp = $gfp|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function _lame_set_quality($gfp,$quality) {
 $gfp = $gfp|0;
 $quality = $quality|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 do {
  if ($1) {
   $$0 = -1;
  } else {
   $2 = ($quality|0)<(0);
   if ($2) {
    $3 = (($gfp) + 44|0);
    HEAP32[$3>>2] = 0;
    $$0 = 0;
    break;
   }
   $4 = ($quality|0)>(9);
   $5 = (($gfp) + 44|0);
   if ($4) {
    HEAP32[$5>>2] = 9;
    $$0 = 0;
    break;
   } else {
    HEAP32[$5>>2] = $quality;
    $$0 = 0;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _lame_get_quality($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = (($gfp) + 44|0);
  $3 = HEAP32[$2>>2]|0;
  $$0 = $3;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_set_mode($gfp,$mode) {
 $gfp = $gfp|0;
 $mode = $mode|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 $2 = ($mode>>>0)>(4);
 $or$cond = $1 | $2;
 if ($or$cond) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($gfp) + 48|0);
 HEAP32[$3>>2] = $mode;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _lame_get_mode($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 4;
 } else {
  $2 = (($gfp) + 48|0);
  $3 = HEAP32[$2>>2]|0;
  $$0 = $3;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_set_mode_automs($gfp,$mode_automs) {
 $gfp = $gfp|0;
 $mode_automs = $mode_automs|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 $2 = ($mode_automs>>>0)>(1);
 $or$cond = $1 | $2;
 if ($or$cond) {
  $$0 = -1;
 } else {
  $3 = (_is_lame_global_flags_valid($gfp)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   $$0 = 0;
  } else {
   $5 = (($gfp) + 48|0);
   HEAP32[$5>>2] = 1;
   $$0 = 0;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_get_mode_automs($gfp) {
 $gfp = $gfp|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 1;
}
function _lame_set_force_ms($gfp,$force_ms) {
 $gfp = $gfp|0;
 $force_ms = $force_ms|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 $2 = ($force_ms>>>0)>(1);
 $or$cond = $1 | $2;
 if ($or$cond) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($gfp) + 52|0);
 HEAP32[$3>>2] = $force_ms;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _lame_get_force_ms($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = (($gfp) + 52|0);
  $3 = HEAP32[$2>>2]|0;
  $$0 = $3;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_set_free_format($gfp,$free_format) {
 $gfp = $gfp|0;
 $free_format = $free_format|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 $2 = ($free_format>>>0)>(1);
 $or$cond = $1 | $2;
 if ($or$cond) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($gfp) + 56|0);
 HEAP32[$3>>2] = $free_format;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _lame_get_free_format($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = (($gfp) + 56|0);
  $3 = HEAP32[$2>>2]|0;
  $$0 = $3;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_set_findReplayGain($gfp,$findReplayGain) {
 $gfp = $gfp|0;
 $findReplayGain = $findReplayGain|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 $2 = ($findReplayGain>>>0)>(1);
 $or$cond = $1 | $2;
 if ($or$cond) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($gfp) + 60|0);
 HEAP32[$3>>2] = $findReplayGain;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _lame_get_findReplayGain($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = (($gfp) + 60|0);
  $3 = HEAP32[$2>>2]|0;
  $$0 = $3;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_set_decode_on_the_fly($gfp,$decode_on_the_fly) {
 $gfp = $gfp|0;
 $decode_on_the_fly = $decode_on_the_fly|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 $2 = ($decode_on_the_fly>>>0)>(1);
 $or$cond = $1 | $2;
 if ($or$cond) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($gfp) + 64|0);
 HEAP32[$3>>2] = $decode_on_the_fly;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _lame_get_decode_on_the_fly($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = (($gfp) + 64|0);
  $3 = HEAP32[$2>>2]|0;
  $$0 = $3;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_set_findPeakSample($gfp,$arg) {
 $gfp = $gfp|0;
 $arg = $arg|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $or$cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 $2 = ($arg>>>0)>(1);
 $or$cond$i = $1 | $2;
 if ($or$cond$i) {
  $$0$i = -1;
  STACKTOP = sp;return ($$0$i|0);
 }
 $3 = (($gfp) + 64|0);
 HEAP32[$3>>2] = $arg;
 $$0$i = 0;
 STACKTOP = sp;return ($$0$i|0);
}
function _lame_get_findPeakSample($gfp) {
 $gfp = $gfp|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0$i = 0;
 } else {
  $2 = (($gfp) + 64|0);
  $3 = HEAP32[$2>>2]|0;
  $$0$i = $3;
 }
 STACKTOP = sp;return ($$0$i|0);
}
function _lame_set_ReplayGain_input($gfp,$arg) {
 $gfp = $gfp|0;
 $arg = $arg|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $or$cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 $2 = ($arg>>>0)>(1);
 $or$cond$i = $1 | $2;
 if ($or$cond$i) {
  $$0$i = -1;
  STACKTOP = sp;return ($$0$i|0);
 }
 $3 = (($gfp) + 60|0);
 HEAP32[$3>>2] = $arg;
 $$0$i = 0;
 STACKTOP = sp;return ($$0$i|0);
}
function _lame_get_ReplayGain_input($gfp) {
 $gfp = $gfp|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0$i = 0;
 } else {
  $2 = (($gfp) + 60|0);
  $3 = HEAP32[$2>>2]|0;
  $$0$i = $3;
 }
 STACKTOP = sp;return ($$0$i|0);
}
function _lame_set_ReplayGain_decode($gfp,$arg) {
 $gfp = $gfp|0;
 $arg = $arg|0;
 var $$0$i2 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $or$cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 $2 = ($arg>>>0)>(1);
 $or$cond$i = $1 | $2;
 if ($or$cond$i) {
  $$0$i2 = -1;
 } else {
  $3 = (($gfp) + 64|0);
  HEAP32[$3>>2] = $arg;
  $4 = (_is_lame_global_flags_valid($gfp)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   $$0$i2 = -1;
  } else {
   $6 = (($gfp) + 60|0);
   HEAP32[$6>>2] = $arg;
   $$0$i2 = 0;
  }
 }
 STACKTOP = sp;return ($$0$i2|0);
}
function _lame_get_ReplayGain_decode($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  $2 = (($gfp) + 64|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)>(0);
  if ($4) {
   $5 = (_is_lame_global_flags_valid($gfp)|0);
   $6 = ($5|0)==(0);
   if (!($6)) {
    $7 = (($gfp) + 60|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = ($8|0)>(0);
    if ($9) {
     $$0 = 1;
     STACKTOP = sp;return ($$0|0);
    }
   }
  }
 }
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _lame_set_nogap_total($gfp,$the_nogap_total) {
 $gfp = $gfp|0;
 $the_nogap_total = $the_nogap_total|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = -1;
 } else {
  $2 = (($gfp) + 72|0);
  HEAP32[$2>>2] = $the_nogap_total;
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_get_nogap_total($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = (($gfp) + 72|0);
  $3 = HEAP32[$2>>2]|0;
  $$0 = $3;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_set_nogap_currentindex($gfp,$the_nogap_index) {
 $gfp = $gfp|0;
 $the_nogap_index = $the_nogap_index|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = -1;
 } else {
  $2 = (($gfp) + 76|0);
  HEAP32[$2>>2] = $the_nogap_index;
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_get_nogap_currentindex($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = (($gfp) + 76|0);
  $3 = HEAP32[$2>>2]|0;
  $$0 = $3;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_set_errorf($gfp,$func) {
 $gfp = $gfp|0;
 $func = $func|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = -1;
 } else {
  $2 = (($gfp) + 280|0);
  HEAP32[$2>>2] = $func;
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_set_debugf($gfp,$func) {
 $gfp = $gfp|0;
 $func = $func|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = -1;
 } else {
  $2 = (($gfp) + 276|0);
  HEAP32[$2>>2] = $func;
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_set_msgf($gfp,$func) {
 $gfp = $gfp|0;
 $func = $func|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = -1;
 } else {
  $2 = (($gfp) + 272|0);
  HEAP32[$2>>2] = $func;
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_set_brate($gfp,$brate) {
 $gfp = $gfp|0;
 $brate = $brate|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = -1;
 } else {
  $2 = (($gfp) + 96|0);
  HEAP32[$2>>2] = $brate;
  $3 = ($brate|0)>(320);
  if ($3) {
   $4 = (($gfp) + 128|0);
   HEAP32[$4>>2] = 1;
   $$0 = 0;
  } else {
   $$0 = 0;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_get_brate($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = (($gfp) + 96|0);
  $3 = HEAP32[$2>>2]|0;
  $$0 = $3;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_set_compression_ratio($gfp,$compression_ratio) {
 $gfp = $gfp|0;
 $compression_ratio = +$compression_ratio;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($gfp) + 100|0);
 HEAPF32[$2>>2] = $compression_ratio;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _lame_get_compression_ratio($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0.0;
 } else {
  $2 = (($gfp) + 100|0);
  $3 = +HEAPF32[$2>>2];
  $$0 = $3;
 }
 STACKTOP = sp;return (+$$0);
}
function _lame_set_copyright($gfp,$copyright) {
 $gfp = $gfp|0;
 $copyright = $copyright|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 $2 = ($copyright>>>0)>(1);
 $or$cond = $1 | $2;
 if ($or$cond) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($gfp) + 104|0);
 HEAP32[$3>>2] = $copyright;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _lame_get_copyright($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = (($gfp) + 104|0);
  $3 = HEAP32[$2>>2]|0;
  $$0 = $3;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_set_original($gfp,$original) {
 $gfp = $gfp|0;
 $original = $original|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 $2 = ($original>>>0)>(1);
 $or$cond = $1 | $2;
 if ($or$cond) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($gfp) + 108|0);
 HEAP32[$3>>2] = $original;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _lame_get_original($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = (($gfp) + 108|0);
  $3 = HEAP32[$2>>2]|0;
  $$0 = $3;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_set_error_protection($gfp,$error_protection) {
 $gfp = $gfp|0;
 $error_protection = $error_protection|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 $2 = ($error_protection>>>0)>(1);
 $or$cond = $1 | $2;
 if ($or$cond) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($gfp) + 120|0);
 HEAP32[$3>>2] = $error_protection;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _lame_get_error_protection($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = (($gfp) + 120|0);
  $3 = HEAP32[$2>>2]|0;
  $$0 = $3;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_set_padding_type($gfp,$padding_type) {
 $gfp = $gfp|0;
 $padding_type = $padding_type|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function _lame_get_padding_type($gfp) {
 $gfp = $gfp|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2;
}
function _lame_set_extension($gfp,$extension) {
 $gfp = $gfp|0;
 $extension = $extension|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 $2 = ($extension>>>0)>(1);
 $or$cond = $1 | $2;
 if ($or$cond) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($gfp) + 112|0);
 HEAP32[$3>>2] = $extension;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _lame_get_extension($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = (($gfp) + 112|0);
  $3 = HEAP32[$2>>2]|0;
  $$0 = $3;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_set_strict_ISO($gfp,$val) {
 $gfp = $gfp|0;
 $val = $val|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 $2 = ($val>>>0)>(2);
 $or$cond = $1 | $2;
 if ($or$cond) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($gfp) + 124|0);
 HEAP32[$3>>2] = $val;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _lame_get_strict_ISO($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = (($gfp) + 124|0);
  $3 = HEAP32[$2>>2]|0;
  $$0 = $3;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_set_disable_reservoir($gfp,$disable_reservoir) {
 $gfp = $gfp|0;
 $disable_reservoir = $disable_reservoir|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 $2 = ($disable_reservoir>>>0)>(1);
 $or$cond = $1 | $2;
 if ($or$cond) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($gfp) + 128|0);
 HEAP32[$3>>2] = $disable_reservoir;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _lame_get_disable_reservoir($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = (($gfp) + 128|0);
  $3 = HEAP32[$2>>2]|0;
  $$0 = $3;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_set_experimentalX($gfp,$experimentalX) {
 $gfp = $gfp|0;
 $experimentalX = $experimentalX|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (_is_lame_global_flags_valid($gfp)|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  $4 = (($gfp) + 132|0);
  HEAP32[$4>>2] = $experimentalX;
 }
 $5 = (_is_lame_global_flags_valid($gfp)|0);
 $6 = ($5|0)==(0);
 if ($6) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = (($gfp) + 136|0);
 HEAP32[$7>>2] = $experimentalX;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _lame_set_quant_comp($gfp,$quant_type) {
 $gfp = $gfp|0;
 $quant_type = $quant_type|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = -1;
 } else {
  $2 = (($gfp) + 132|0);
  HEAP32[$2>>2] = $quant_type;
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_set_quant_comp_short($gfp,$quant_type) {
 $gfp = $gfp|0;
 $quant_type = $quant_type|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = -1;
 } else {
  $2 = (($gfp) + 136|0);
  HEAP32[$2>>2] = $quant_type;
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_get_experimentalX($gfp) {
 $gfp = $gfp|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0$i = 0;
 } else {
  $2 = (($gfp) + 132|0);
  $3 = HEAP32[$2>>2]|0;
  $$0$i = $3;
 }
 STACKTOP = sp;return ($$0$i|0);
}
function _lame_get_quant_comp($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = (($gfp) + 132|0);
  $3 = HEAP32[$2>>2]|0;
  $$0 = $3;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_get_quant_comp_short($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = (($gfp) + 136|0);
  $3 = HEAP32[$2>>2]|0;
  $$0 = $3;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_set_experimentalY($gfp,$experimentalY) {
 $gfp = $gfp|0;
 $experimentalY = $experimentalY|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = -1;
 } else {
  $2 = (($gfp) + 140|0);
  HEAP32[$2>>2] = $experimentalY;
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_get_experimentalY($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = (($gfp) + 140|0);
  $3 = HEAP32[$2>>2]|0;
  $$0 = $3;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_set_experimentalZ($gfp,$experimentalZ) {
 $gfp = $gfp|0;
 $experimentalZ = $experimentalZ|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = -1;
 } else {
  $2 = (($gfp) + 144|0);
  HEAP32[$2>>2] = $experimentalZ;
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_get_experimentalZ($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = (($gfp) + 144|0);
  $3 = HEAP32[$2>>2]|0;
  $$0 = $3;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_set_exp_nspsytune($gfp,$exp_nspsytune) {
 $gfp = $gfp|0;
 $exp_nspsytune = $exp_nspsytune|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = -1;
 } else {
  $2 = (($gfp) + 148|0);
  HEAP32[$2>>2] = $exp_nspsytune;
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_get_exp_nspsytune($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = (($gfp) + 148|0);
  $3 = HEAP32[$2>>2]|0;
  $$0 = $3;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_set_VBR($gfp,$VBR) {
 $gfp = $gfp|0;
 $VBR = $VBR|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 $2 = ($VBR>>>0)>(4);
 $or$cond = $1 | $2;
 if ($or$cond) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($gfp) + 156|0);
 HEAP32[$3>>2] = $VBR;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _lame_get_VBR($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = (($gfp) + 156|0);
  $3 = HEAP32[$2>>2]|0;
  $$0 = $3;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_set_VBR_q($gfp,$VBR_q) {
 $gfp = $gfp|0;
 $VBR_q = $VBR_q|0;
 var $$01 = 0, $$1 = 0, $$VBR_q = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $VBR_q$lobit = 0, $ret$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$01 = -1;
  STACKTOP = sp;return ($$01|0);
 }
 $2 = ($VBR_q|0)<(0);
 $$VBR_q = $2 ? 0 : $VBR_q;
 $VBR_q$lobit = $VBR_q >> 31;
 $3 = ($$VBR_q|0)>(9);
 $$1 = $3 ? 9 : $$VBR_q;
 $ret$1 = $3 ? -1 : $VBR_q$lobit;
 $4 = (($gfp) + 164|0);
 HEAP32[$4>>2] = $$1;
 $5 = (($gfp) + 160|0);
 HEAPF32[$5>>2] = 0.0;
 $$01 = $ret$1;
 STACKTOP = sp;return ($$01|0);
}
function _lame_get_VBR_q($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = (($gfp) + 164|0);
  $3 = HEAP32[$2>>2]|0;
  $$0 = $3;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_set_VBR_quality($gfp,$VBR_q) {
 $gfp = $gfp|0;
 $VBR_q = +$VBR_q;
 var $$0 = 0.0, $$01 = 0, $$1 = 0.0, $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, $ret$0 = 0, $ret$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$01 = -1;
  STACKTOP = sp;return ($$01|0);
 }
 $2 = $VBR_q < 0.0;
 $$0 = $2 ? 0.0 : $VBR_q;
 $ret$0 = $2 << 31 >> 31;
 $3 = $$0;
 $4 = $3 > 9.99900000000000055422;
 $$1 = $4 ? 9.99899959564208984375 : $$0;
 $ret$1 = $4 ? -1 : $ret$0;
 $5 = (~~(($$1)));
 $6 = (($gfp) + 164|0);
 HEAP32[$6>>2] = $5;
 $7 = (+($5|0));
 $8 = $$1 - $7;
 $9 = (($gfp) + 160|0);
 HEAPF32[$9>>2] = $8;
 $$01 = $ret$1;
 STACKTOP = sp;return ($$01|0);
}
function _lame_get_VBR_quality($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $2 = (($gfp) + 164|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (+($3|0));
 $5 = (($gfp) + 160|0);
 $6 = +HEAPF32[$5>>2];
 $7 = $4 + $6;
 $$0 = $7;
 STACKTOP = sp;return (+$$0);
}
function _lame_set_VBR_mean_bitrate_kbps($gfp,$VBR_mean_bitrate_kbps) {
 $gfp = $gfp|0;
 $VBR_mean_bitrate_kbps = $VBR_mean_bitrate_kbps|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($gfp) + 168|0);
 HEAP32[$2>>2] = $VBR_mean_bitrate_kbps;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _lame_get_VBR_mean_bitrate_kbps($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = (($gfp) + 168|0);
  $3 = HEAP32[$2>>2]|0;
  $$0 = $3;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_set_VBR_min_bitrate_kbps($gfp,$VBR_min_bitrate_kbps) {
 $gfp = $gfp|0;
 $VBR_min_bitrate_kbps = $VBR_min_bitrate_kbps|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($gfp) + 172|0);
 HEAP32[$2>>2] = $VBR_min_bitrate_kbps;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _lame_get_VBR_min_bitrate_kbps($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = (($gfp) + 172|0);
  $3 = HEAP32[$2>>2]|0;
  $$0 = $3;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_set_VBR_max_bitrate_kbps($gfp,$VBR_max_bitrate_kbps) {
 $gfp = $gfp|0;
 $VBR_max_bitrate_kbps = $VBR_max_bitrate_kbps|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($gfp) + 176|0);
 HEAP32[$2>>2] = $VBR_max_bitrate_kbps;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _lame_get_VBR_max_bitrate_kbps($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = (($gfp) + 176|0);
  $3 = HEAP32[$2>>2]|0;
  $$0 = $3;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_set_VBR_hard_min($gfp,$VBR_hard_min) {
 $gfp = $gfp|0;
 $VBR_hard_min = $VBR_hard_min|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 $2 = ($VBR_hard_min>>>0)>(1);
 $or$cond = $1 | $2;
 if ($or$cond) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($gfp) + 180|0);
 HEAP32[$3>>2] = $VBR_hard_min;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _lame_get_VBR_hard_min($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = (($gfp) + 180|0);
  $3 = HEAP32[$2>>2]|0;
  $$0 = $3;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_set_lowpassfreq($gfp,$lowpassfreq) {
 $gfp = $gfp|0;
 $lowpassfreq = $lowpassfreq|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = -1;
 } else {
  $2 = (($gfp) + 184|0);
  HEAP32[$2>>2] = $lowpassfreq;
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_get_lowpassfreq($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = (($gfp) + 184|0);
  $3 = HEAP32[$2>>2]|0;
  $$0 = $3;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_set_lowpasswidth($gfp,$lowpasswidth) {
 $gfp = $gfp|0;
 $lowpasswidth = $lowpasswidth|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = -1;
 } else {
  $2 = (($gfp) + 192|0);
  HEAP32[$2>>2] = $lowpasswidth;
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_get_lowpasswidth($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = (($gfp) + 192|0);
  $3 = HEAP32[$2>>2]|0;
  $$0 = $3;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_set_highpassfreq($gfp,$highpassfreq) {
 $gfp = $gfp|0;
 $highpassfreq = $highpassfreq|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = -1;
 } else {
  $2 = (($gfp) + 188|0);
  HEAP32[$2>>2] = $highpassfreq;
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_get_highpassfreq($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = (($gfp) + 188|0);
  $3 = HEAP32[$2>>2]|0;
  $$0 = $3;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_set_highpasswidth($gfp,$highpasswidth) {
 $gfp = $gfp|0;
 $highpasswidth = $highpasswidth|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = -1;
 } else {
  $2 = (($gfp) + 196|0);
  HEAP32[$2>>2] = $highpasswidth;
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_get_highpasswidth($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = (($gfp) + 196|0);
  $3 = HEAP32[$2>>2]|0;
  $$0 = $3;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_set_maskingadjust($gfp,$adjust) {
 $gfp = $gfp|0;
 $adjust = +$adjust;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = -1;
 } else {
  $2 = (($gfp) + 200|0);
  HEAPF32[$2>>2] = $adjust;
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_get_maskingadjust($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0.0;
 } else {
  $2 = (($gfp) + 200|0);
  $3 = +HEAPF32[$2>>2];
  $$0 = $3;
 }
 STACKTOP = sp;return (+$$0);
}
function _lame_set_maskingadjust_short($gfp,$adjust) {
 $gfp = $gfp|0;
 $adjust = +$adjust;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = -1;
 } else {
  $2 = (($gfp) + 204|0);
  HEAPF32[$2>>2] = $adjust;
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_get_maskingadjust_short($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0.0;
 } else {
  $2 = (($gfp) + 204|0);
  $3 = +HEAPF32[$2>>2];
  $$0 = $3;
 }
 STACKTOP = sp;return (+$$0);
}
function _lame_set_ATHonly($gfp,$ATHonly) {
 $gfp = $gfp|0;
 $ATHonly = $ATHonly|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = -1;
 } else {
  $2 = (($gfp) + 208|0);
  HEAP32[$2>>2] = $ATHonly;
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_get_ATHonly($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = (($gfp) + 208|0);
  $3 = HEAP32[$2>>2]|0;
  $$0 = $3;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_set_ATHshort($gfp,$ATHshort) {
 $gfp = $gfp|0;
 $ATHshort = $ATHshort|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = -1;
 } else {
  $2 = (($gfp) + 212|0);
  HEAP32[$2>>2] = $ATHshort;
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_get_ATHshort($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = (($gfp) + 212|0);
  $3 = HEAP32[$2>>2]|0;
  $$0 = $3;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_set_noATH($gfp,$noATH) {
 $gfp = $gfp|0;
 $noATH = $noATH|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = -1;
 } else {
  $2 = (($gfp) + 216|0);
  HEAP32[$2>>2] = $noATH;
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_get_noATH($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = (($gfp) + 216|0);
  $3 = HEAP32[$2>>2]|0;
  $$0 = $3;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_set_ATHtype($gfp,$ATHtype) {
 $gfp = $gfp|0;
 $ATHtype = $ATHtype|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = -1;
 } else {
  $2 = (($gfp) + 220|0);
  HEAP32[$2>>2] = $ATHtype;
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_get_ATHtype($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = (($gfp) + 220|0);
  $3 = HEAP32[$2>>2]|0;
  $$0 = $3;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_set_ATHcurve($gfp,$ATHcurve) {
 $gfp = $gfp|0;
 $ATHcurve = +$ATHcurve;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = -1;
 } else {
  $2 = (($gfp) + 224|0);
  HEAPF32[$2>>2] = $ATHcurve;
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_get_ATHcurve($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0.0;
 } else {
  $2 = (($gfp) + 224|0);
  $3 = +HEAPF32[$2>>2];
  $$0 = $3;
 }
 STACKTOP = sp;return (+$$0);
}
function _lame_set_ATHlower($gfp,$ATHlower) {
 $gfp = $gfp|0;
 $ATHlower = +$ATHlower;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = -1;
 } else {
  $2 = (($gfp) + 228|0);
  HEAPF32[$2>>2] = $ATHlower;
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_get_ATHlower($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0.0;
 } else {
  $2 = (($gfp) + 228|0);
  $3 = +HEAPF32[$2>>2];
  $$0 = $3;
 }
 STACKTOP = sp;return (+$$0);
}
function _lame_set_athaa_type($gfp,$athaa_type) {
 $gfp = $gfp|0;
 $athaa_type = $athaa_type|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = -1;
 } else {
  $2 = (($gfp) + 232|0);
  HEAP32[$2>>2] = $athaa_type;
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_get_athaa_type($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = (($gfp) + 232|0);
  $3 = HEAP32[$2>>2]|0;
  $$0 = $3;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_set_athaa_loudapprox($gfp,$athaa_loudapprox) {
 $gfp = $gfp|0;
 $athaa_loudapprox = $athaa_loudapprox|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function _lame_get_athaa_loudapprox($gfp) {
 $gfp = $gfp|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2;
}
function _lame_set_athaa_sensitivity($gfp,$athaa_sensitivity) {
 $gfp = $gfp|0;
 $athaa_sensitivity = +$athaa_sensitivity;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($gfp) + 236|0);
 HEAPF32[$2>>2] = $athaa_sensitivity;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _lame_get_athaa_sensitivity($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0.0;
 } else {
  $2 = (($gfp) + 236|0);
  $3 = +HEAPF32[$2>>2];
  $$0 = $3;
 }
 STACKTOP = sp;return (+$$0);
}
function _lame_set_cwlimit($gfp,$cwlimit) {
 $gfp = $gfp|0;
 $cwlimit = $cwlimit|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function _lame_get_cwlimit($gfp) {
 $gfp = $gfp|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function _lame_set_allow_diff_short($gfp,$allow_diff_short) {
 $gfp = $gfp|0;
 $allow_diff_short = $allow_diff_short|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $not$ = ($allow_diff_short|0)==(0);
 $2 = $not$&1;
 $3 = (($gfp) + 240|0);
 HEAP32[$3>>2] = $2;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _lame_get_allow_diff_short($gfp) {
 $gfp = $gfp|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($gfp) + 240|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 $$ = $4&1;
 $$0 = $$;
 STACKTOP = sp;return ($$0|0);
}
function _lame_set_useTemporal($gfp,$useTemporal) {
 $gfp = $gfp|0;
 $useTemporal = $useTemporal|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)!=(0);
 $2 = ($useTemporal>>>0)<(2);
 $or$cond = $1 & $2;
 if (!($or$cond)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($gfp) + 244|0);
 HEAP32[$3>>2] = $useTemporal;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _lame_get_useTemporal($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = (($gfp) + 244|0);
  $3 = HEAP32[$2>>2]|0;
  $$0 = $3;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_set_interChRatio($gfp,$ratio) {
 $gfp = $gfp|0;
 $ratio = +$ratio;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $or$cond = 0, $or$cond1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 $2 = !($ratio >= 0.0);
 $or$cond = $1 | $2;
 $3 = !($ratio <= 1.0);
 $or$cond1 = $or$cond | $3;
 if ($or$cond1) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (($gfp) + 248|0);
 HEAPF32[$4>>2] = $ratio;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _lame_get_interChRatio($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0.0;
 } else {
  $2 = (($gfp) + 248|0);
  $3 = +HEAPF32[$2>>2];
  $$0 = $3;
 }
 STACKTOP = sp;return (+$$0);
}
function _lame_set_substep($gfp,$method) {
 $gfp = $gfp|0;
 $method = $method|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)!=(0);
 $2 = ($method>>>0)<(8);
 $or$cond = $1 & $2;
 if (!($or$cond)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($gfp) + 80|0);
 HEAP32[$3>>2] = $method;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _lame_get_substep($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = (($gfp) + 80|0);
  $3 = HEAP32[$2>>2]|0;
  $$0 = $3;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_set_sfscale($gfp,$val) {
 $gfp = $gfp|0;
 $val = $val|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = ($val|0)!=(0);
 $3 = $2 ? 2 : 1;
 $4 = (($gfp) + 84|0);
 HEAP32[$4>>2] = $3;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _lame_get_sfscale($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($gfp) + 84|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(2);
 $5 = $4&1;
 $$0 = $5;
 STACKTOP = sp;return ($$0|0);
}
function _lame_set_subblock_gain($gfp,$sbgain) {
 $gfp = $gfp|0;
 $sbgain = $sbgain|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = -1;
 } else {
  $2 = (($gfp) + 88|0);
  HEAP32[$2>>2] = $sbgain;
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_get_subblock_gain($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = (($gfp) + 88|0);
  $3 = HEAP32[$2>>2]|0;
  $$0 = $3;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_set_no_short_blocks($gfp,$no_short_blocks) {
 $gfp = $gfp|0;
 $no_short_blocks = $no_short_blocks|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)!=(0);
 $2 = ($no_short_blocks>>>0)<(2);
 $or$cond = $1 & $2;
 if (!($or$cond)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ($no_short_blocks|0)!=(0);
 $4 = $3 ? 2 : 0;
 $5 = (($gfp) + 240|0);
 HEAP32[$5>>2] = $4;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _lame_get_no_short_blocks($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 do {
  if ($1) {
   $$0 = -1;
  } else {
   $2 = (($gfp) + 240|0);
   $3 = HEAP32[$2>>2]|0;
   if ((($3|0) == 2)) {
    $$0 = 1;
    break;
   } else if ((($3|0) == 1) | (($3|0) == 0) | (($3|0) == 3)) {
    $$0 = 0;
    break;
   } else {
    $$0 = -1;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _lame_set_force_short_blocks($gfp,$short_blocks) {
 $gfp = $gfp|0;
 $short_blocks = $short_blocks|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 $2 = ($short_blocks>>>0)>(1);
 $or$cond = $1 | $2;
 do {
  if ($or$cond) {
   $$0 = -1;
  } else {
   $3 = ($short_blocks|0)==(1);
   $4 = (($gfp) + 240|0);
   if ($3) {
    HEAP32[$4>>2] = 3;
    $$0 = 0;
    break;
   }
   $5 = HEAP32[$4>>2]|0;
   $6 = ($5|0)==(3);
   if ($6) {
    HEAP32[$4>>2] = 0;
    $$0 = 0;
   } else {
    $$0 = 0;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _lame_get_force_short_blocks($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 do {
  if ($1) {
   $$0 = -1;
  } else {
   $2 = (($gfp) + 240|0);
   $3 = HEAP32[$2>>2]|0;
   if ((($3|0) == 3)) {
    $$0 = 1;
    break;
   } else if ((($3|0) == 1) | (($3|0) == 0) | (($3|0) == 2)) {
    $$0 = 0;
    break;
   } else {
    $$0 = -1;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _lame_set_short_threshold_lrm($gfp,$lrm) {
 $gfp = $gfp|0;
 $lrm = +$lrm;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = -1;
 } else {
  $2 = (($gfp) + 264|0);
  HEAPF32[$2>>2] = $lrm;
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_get_short_threshold_lrm($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0.0;
 } else {
  $2 = (($gfp) + 264|0);
  $3 = +HEAPF32[$2>>2];
  $$0 = $3;
 }
 STACKTOP = sp;return (+$$0);
}
function _lame_set_short_threshold_s($gfp,$s) {
 $gfp = $gfp|0;
 $s = +$s;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = -1;
 } else {
  $2 = (($gfp) + 268|0);
  HEAPF32[$2>>2] = $s;
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_get_short_threshold_s($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0.0;
 } else {
  $2 = (($gfp) + 268|0);
  $3 = +HEAPF32[$2>>2];
  $$0 = $3;
 }
 STACKTOP = sp;return (+$$0);
}
function _lame_set_short_threshold($gfp,$lrm,$s) {
 $gfp = $gfp|0;
 $lrm = +$lrm;
 $s = +$s;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (_is_lame_global_flags_valid($gfp)|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  $4 = (($gfp) + 264|0);
  HEAPF32[$4>>2] = $lrm;
 }
 $5 = (_is_lame_global_flags_valid($gfp)|0);
 $6 = ($5|0)==(0);
 if ($6) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = (($gfp) + 268|0);
 HEAPF32[$7>>2] = $s;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _lame_set_emphasis($gfp,$emphasis) {
 $gfp = $gfp|0;
 $emphasis = $emphasis|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)!=(0);
 $2 = ($emphasis>>>0)<(4);
 $or$cond = $1 & $2;
 if (!($or$cond)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($gfp) + 116|0);
 HEAP32[$3>>2] = $emphasis;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _lame_get_emphasis($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = (($gfp) + 116|0);
  $3 = HEAP32[$2>>2]|0;
  $$0 = $3;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_get_version($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = (($gfp) + 288|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = (_is_lame_internal_flags_valid($3)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   $$0 = 0;
  } else {
   $6 = (($3) + 16|0);
   $7 = HEAP32[$6>>2]|0;
   $$0 = $7;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_get_encoder_delay($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = (($gfp) + 288|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = (_is_lame_internal_flags_valid($3)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   $$0 = 0;
  } else {
   $6 = (($3) + 84760|0);
   $7 = HEAP32[$6>>2]|0;
   $$0 = $7;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_get_encoder_padding($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = (($gfp) + 288|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = (_is_lame_internal_flags_valid($3)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   $$0 = 0;
  } else {
   $6 = (($3) + 84764|0);
   $7 = HEAP32[$6>>2]|0;
   $$0 = $7;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_get_framesize($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = (($gfp) + 288|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = (_is_lame_internal_flags_valid($3)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   $$0 = 0;
  } else {
   $6 = (($3) + 76|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7*576)|0;
   $$0 = $8;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_get_frameNum($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = (($gfp) + 288|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = (_is_lame_internal_flags_valid($3)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   $$0 = 0;
  } else {
   $6 = (($3) + 84748|0);
   $7 = HEAP32[$6>>2]|0;
   $$0 = $7;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_get_mf_samples_to_encode($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = (($gfp) + 288|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = (_is_lame_internal_flags_valid($3)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   $$0 = 0;
  } else {
   $6 = (($3) + 84032|0);
   $7 = HEAP32[$6>>2]|0;
   $$0 = $7;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_get_size_mp3buffer($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $size = sp;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = (($gfp) + 288|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = (_is_lame_internal_flags_valid($3)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   $$0 = 0;
  } else {
   (_compute_flushbits($3,$size)|0);
   $6 = HEAP32[$size>>2]|0;
   $$0 = $6;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_get_RadioGain($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = (($gfp) + 288|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = (_is_lame_internal_flags_valid($3)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   $$0 = 0;
  } else {
   $6 = (($3) + 85688|0);
   $7 = HEAP32[$6>>2]|0;
   $$0 = $7;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_get_AudiophileGain($gfp) {
 $gfp = $gfp|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return 0;
 } else {
  STACKTOP = sp;return 0;
 }
 return 0|0;
}
function _lame_get_PeakSample($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0.0;
 } else {
  $2 = (($gfp) + 288|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = (_is_lame_internal_flags_valid($3)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   $$0 = 0.0;
  } else {
   $6 = (($3) + 85684|0);
   $7 = +HEAPF32[$6>>2];
   $$0 = $7;
  }
 }
 STACKTOP = sp;return (+$$0);
}
function _lame_get_noclipGainChange($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = (($gfp) + 288|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = (_is_lame_internal_flags_valid($3)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   $$0 = 0;
  } else {
   $6 = (($3) + 85692|0);
   $7 = HEAP32[$6>>2]|0;
   $$0 = $7;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_get_noclipScale($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0.0;
 } else {
  $2 = (($gfp) + 288|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = (_is_lame_internal_flags_valid($3)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   $$0 = 0.0;
  } else {
   $6 = (($3) + 85680|0);
   $7 = +HEAPF32[$6>>2];
   $$0 = $7;
  }
 }
 STACKTOP = sp;return (+$$0);
}
function _lame_get_totalframes($gfp) {
 $gfp = $gfp|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $pcm_samples_to_encode$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($gfp) + 288|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_is_lame_internal_flags_valid($3)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = (($3) + 76|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7*576)|0;
 $9 = (($gfp) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(-1);
 if ($11) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = (($gfp) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($gfp) + 16|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($13|0)!=($15|0);
 $17 = ($13|0)>(0);
 $or$cond = $16 & $17;
 if ($or$cond) {
  $18 = (+($15|0));
  $19 = (+($13|0));
  $20 = $18 / $19;
  $21 = (+($10>>>0));
  $22 = $21 * $20;
  $23 = (~~(($22))>>>0);
  $pcm_samples_to_encode$0 = $23;
 } else {
  $pcm_samples_to_encode$0 = $10;
 }
 $24 = (($pcm_samples_to_encode$0) + 576)|0;
 $25 = (($24>>>0) % ($8>>>0))&-1;
 $26 = (($8) - ($25))|0;
 $27 = ($26>>>0)<(576);
 $28 = $27 ? $8 : 0;
 $$ = (($26) + ($24))|0;
 $29 = (($$) + ($28))|0;
 $30 = (($29>>>0) / ($8>>>0))&-1;
 $$0 = $30;
 STACKTOP = sp;return ($$0|0);
}
function _lame_set_preset($gfp,$preset) {
 $gfp = $gfp|0;
 $preset = $preset|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($gfp) + 152|0);
 HEAP32[$2>>2] = $preset;
 $3 = (_apply_preset($gfp,$preset,1)|0);
 $$0 = $3;
 STACKTOP = sp;return ($$0|0);
}
function _lame_set_asm_optimizations($gfp,$optim,$mode) {
 $gfp = $gfp|0;
 $optim = $optim|0;
 $mode = $mode|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 do {
  if ($1) {
   $$0 = -1;
  } else {
   $2 = ($mode|0)==(1);
   $3 = $2&1;
   if ((($optim|0) == 3)) {
    $6 = (($gfp) + 300|0);
    HEAP32[$6>>2] = $3;
    $$0 = 3;
    break;
   } else if ((($optim|0) == 2)) {
    $5 = (($gfp) + 296|0);
    HEAP32[$5>>2] = $3;
    $$0 = 2;
    break;
   } else if ((($optim|0) == 1)) {
    $4 = (($gfp) + 292|0);
    HEAP32[$4>>2] = $3;
    $$0 = 1;
    break;
   } else {
    $$0 = $optim;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _lame_set_write_id3tag_automatic($gfp,$v) {
 $gfp = $gfp|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = (($gfp) + 68|0);
 HEAP32[$2>>2] = $v;
 STACKTOP = sp;return;
}
function _lame_get_write_id3tag_automatic($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 1;
 } else {
  $2 = (($gfp) + 68|0);
  $3 = HEAP32[$2>>2]|0;
  $$0 = $3;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lame_set_tune($gfp,$val) {
 $gfp = $gfp|0;
 $val = +$val;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = (($gfp) + 260|0);
 HEAPF32[$2>>2] = $val;
 $3 = (($gfp) + 256|0);
 HEAP32[$3>>2] = 1;
 STACKTOP = sp;return;
}
function _lame_set_msfix($gfp,$msfix) {
 $gfp = $gfp|0;
 $msfix = +$msfix;
 var $0 = 0, $1 = 0, $2 = 0.0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = $msfix;
 $3 = (($gfp) + 252|0);
 HEAPF32[$3>>2] = $2;
 STACKTOP = sp;return;
}
function _lame_get_msfix($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0.0;
 } else {
  $2 = (($gfp) + 252|0);
  $3 = +HEAPF32[$2>>2];
  $$0 = $3;
 }
 STACKTOP = sp;return (+$$0);
}
function _lame_set_preset_expopts($gfp,$preset_expopts) {
 $gfp = $gfp|0;
 $preset_expopts = $preset_expopts|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function _lame_set_preset_notune($gfp,$preset_notune) {
 $gfp = $gfp|0;
 $preset_notune = $preset_notune|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function _lame_get_bitrate($mpeg_version,$table_index) {
 $mpeg_version = $mpeg_version|0;
 $table_index = $table_index|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mpeg_version>>>0)<(3);
 $1 = ($table_index>>>0)<(16);
 $or$cond = $0 & $1;
 if (!($or$cond)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = ((141224 + ($mpeg_version<<6)|0) + ($table_index<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 $$0 = $3;
 STACKTOP = sp;return ($$0|0);
}
function _lame_get_samplerate($mpeg_version,$table_index) {
 $mpeg_version = $mpeg_version|0;
 $table_index = $table_index|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mpeg_version>>>0)<(3);
 $1 = ($table_index>>>0)<(4);
 $or$cond = $0 & $1;
 if (!($or$cond)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = ((141416 + ($mpeg_version<<4)|0) + ($table_index<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 $$0 = $3;
 STACKTOP = sp;return ($$0|0);
}
function _noquant_count_bits($gfc,$gi,$prev_noise) {
 $gfc = $gfc|0;
 $gi = $gi|0;
 $prev_noise = $prev_noise|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a1$0$lcssa = 0, $a1$03 = 0, $a1$2 = 0, $a2$0$lcssa = 0, $a2$02 = 0, $a2$1 = 0, $bits = 0, $i$0 = 0, $i$1$ = 0, $i$1$1 = 0, $i$1$lcssa = 0, $i$1$lcssa16 = 0, $i$14 = 0, $sfb$0 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $bits = sp;
 HEAP32[$bits>>2] = 0;
 $0 = (($gi) + 2304|0);
 $1 = (($gi) + 5208|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 2)|0;
 $4 = $3 & -2;
 $5 = ($4|0)>(576);
 $$ = $5 ? 576 : $4;
 $6 = ($prev_noise|0)!=(0|0);
 if ($6) {
  $7 = (($prev_noise) + 4|0);
  HEAP32[$7>>2] = 0;
  $i$0 = $$;
 } else {
  $i$0 = $$;
 }
 while(1) {
  $8 = ($i$0|0)>(1);
  if (!($8)) {
   label = 4;
   break;
  }
  $10 = (($i$0) + -1)|0;
  $11 = ((($gi) + ($10<<2)|0) + 2304|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($i$0) + -2)|0;
  $14 = ((($gi) + ($13<<2)|0) + 2304|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $15 | $12;
  $17 = ($16|0)==(0);
  if ($17) {
   $i$0 = $13;
  } else {
   label = 6;
   break;
  }
 }
 if ((label|0) == 4) {
  $9 = (($gi) + 4776|0);
  HEAP32[$9>>2] = $i$0;
  label = 9;
 }
 else if ((label|0) == 6) {
  $18 = (($gi) + 4776|0);
  HEAP32[$18>>2] = $i$0;
  $19 = ($i$0|0)>(3);
  if ($19) {
   $a1$03 = 0;$a2$02 = 0;$i$14 = $i$0;
   while(1) {
    $20 = (($i$14) + -4)|0;
    $21 = ((($gi) + ($20<<2)|0) + 2304|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (($i$14) + -3)|0;
    $24 = ((($gi) + ($23<<2)|0) + 2304|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = (($i$14) + -2)|0;
    $27 = ((($gi) + ($26<<2)|0) + 2304|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($i$14) + -1)|0;
    $30 = ((($gi) + ($29<<2)|0) + 2304|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = $25 | $22;
    $33 = $32 | $28;
    $34 = $33 | $31;
    $35 = ($34>>>0)>(1);
    if ($35) {
     $a1$0$lcssa = $a1$03;$a2$0$lcssa = $a2$02;$i$1$lcssa = $i$14;
     break;
    }
    $36 = $22 << 1;
    $37 = (($36) + ($25))|0;
    $38 = $37 << 1;
    $39 = (($38) + ($28))|0;
    $40 = $39 << 1;
    $41 = (($40) + ($31))|0;
    $42 = (135032 + ($41)|0);
    $43 = HEAP8[$42>>0]|0;
    $44 = $43&255;
    $45 = (($44) + ($a1$03))|0;
    $46 = (135048 + ($41)|0);
    $47 = HEAP8[$46>>0]|0;
    $48 = $47&255;
    $49 = (($48) + ($a2$02))|0;
    $50 = ($20|0)>(3);
    if ($50) {
     $a1$03 = $45;$a2$02 = $49;$i$14 = $20;
    } else {
     $a1$0$lcssa = $45;$a2$0$lcssa = $49;$i$1$lcssa = $20;
     break;
    }
   }
   HEAP32[$bits>>2] = $a1$0$lcssa;
   $52 = (($gi) + 4840|0);
   HEAP32[$52>>2] = 0;
   $53 = ($a1$0$lcssa|0)>($a2$0$lcssa|0);
   if ($53) {
    HEAP32[$bits>>2] = $a2$0$lcssa;
    HEAP32[$52>>2] = 1;
    $55 = $a2$0$lcssa;$i$1$lcssa16 = $i$1$lcssa;
   } else {
    $55 = $a1$0$lcssa;$i$1$lcssa16 = $i$1$lcssa;
   }
  } else {
   label = 9;
  }
 }
 if ((label|0) == 9) {
  HEAP32[$bits>>2] = 0;
  $51 = (($gi) + 4840|0);
  HEAP32[$51>>2] = 0;
  $55 = 0;$i$1$lcssa16 = $i$0;
 }
 $54 = (($gi) + 5184|0);
 HEAP32[$54>>2] = $55;
 $56 = (($gi) + 4772|0);
 HEAP32[$56>>2] = $i$1$lcssa16;
 $57 = ($i$1$lcssa16|0)==(0);
 if ($57) {
  $$0 = HEAP32[$bits>>2]|0;
  STACKTOP = sp;return ($$0|0);
 }
 $58 = (($gi) + 4788|0);
 $59 = HEAP32[$58>>2]|0;
 if ((($59|0) == 0)) {
  $64 = (($i$1$lcssa16) + -2)|0;
  $65 = ((($gfc) + ($64)|0) + 85100|0);
  $66 = HEAP8[$65>>0]|0;
  $67 = $66 << 24 >> 24;
  $68 = (($gi) + 4824|0);
  HEAP32[$68>>2] = $67;
  $69 = (($i$1$lcssa16) + -1)|0;
  $70 = ((($gfc) + ($69)|0) + 85100|0);
  $71 = HEAP8[$70>>0]|0;
  $72 = $71 << 24 >> 24;
  $73 = (($gi) + 4828|0);
  HEAP32[$73>>2] = $72;
  $74 = (($67) + 2)|0;
  $75 = (($74) + ($72))|0;
  $76 = ((($gfc) + ($75<<2)|0) + 21360|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = (($67) + 1)|0;
  $79 = ((($gfc) + ($78<<2)|0) + 21360|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = ($77|0)<($i$1$lcssa16|0);
  if ($81) {
   $82 = (($gfc) + 85816|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = ((($gi) + ($77<<2)|0) + 2304|0);
   $85 = ((($gi) + ($i$1$lcssa16<<2)|0) + 2304|0);
   $86 = (FUNCTION_TABLE_iiii[$83 & 7]($84,$85,$bits)|0);
   $87 = (($gi) + 4804|0);
   HEAP32[$87>>2] = $86;
   $a1$2 = $80;$a2$1 = $77;
  } else {
   $a1$2 = $80;$a2$1 = $77;
  }
 } else if ((($59|0) == 2)) {
  $60 = (($gfc) + 21464|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ($61*3)|0;
  $63 = ($62|0)>($i$1$lcssa16|0);
  $i$1$ = $63 ? $i$1$lcssa16 : $62;
  $a1$2 = $i$1$;$a2$1 = $i$1$lcssa16;
 } else {
  $88 = (($gi) + 4824|0);
  HEAP32[$88>>2] = 7;
  $89 = (($gi) + 4828|0);
  HEAP32[$89>>2] = 13;
  $90 = (($gfc) + 21392|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = ($91|0)>($i$1$lcssa16|0);
  $i$1$1 = $92 ? $i$1$lcssa16 : $91;
  $a1$2 = $i$1$1;$a2$1 = $i$1$lcssa16;
 }
 $93 = ($a1$2|0)<($i$1$lcssa16|0);
 $94 = $93 ? $a1$2 : $i$1$lcssa16;
 $95 = ($a2$1|0)<($i$1$lcssa16|0);
 $96 = $95 ? $a2$1 : $i$1$lcssa16;
 $97 = ($94|0)>(0);
 if ($97) {
  $98 = (($gfc) + 85816|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = ((($gi) + ($94<<2)|0) + 2304|0);
  $101 = (FUNCTION_TABLE_iiii[$99 & 7]($0,$100,$bits)|0);
  $102 = (($gi) + 4796|0);
  HEAP32[$102>>2] = $101;
 }
 $103 = ($94|0)<($96|0);
 if ($103) {
  $104 = (($gfc) + 85816|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = ((($gi) + ($94<<2)|0) + 2304|0);
  $107 = ((($gi) + ($96<<2)|0) + 2304|0);
  $108 = (FUNCTION_TABLE_iiii[$105 & 7]($106,$107,$bits)|0);
  $109 = (($gi) + 4800|0);
  HEAP32[$109>>2] = $108;
 }
 $110 = (($gfc) + 36|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = ($111|0)==(2);
 if ($112) {
  $113 = HEAP32[$bits>>2]|0;
  $114 = (($gi) + 4768|0);
  HEAP32[$114>>2] = $113;
  _best_huffman_divide($gfc,$gi);
  $115 = HEAP32[$114>>2]|0;
  HEAP32[$bits>>2] = $115;
 }
 if (!($6)) {
  $$0 = HEAP32[$bits>>2]|0;
  STACKTOP = sp;return ($$0|0);
 }
 $116 = HEAP32[$58>>2]|0;
 $117 = ($116|0)==(0);
 if (!($117)) {
  $$0 = HEAP32[$bits>>2]|0;
  STACKTOP = sp;return ($$0|0);
 }
 $118 = HEAP32[$56>>2]|0;
 $sfb$0 = 0;
 while(1) {
  $119 = ((($gfc) + ($sfb$0<<2)|0) + 21360|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = ($120|0)<($118|0);
  $122 = (($sfb$0) + 1)|0;
  if ($121) {
   $sfb$0 = $122;
  } else {
   break;
  }
 }
 $123 = (($prev_noise) + 4|0);
 HEAP32[$123>>2] = $sfb$0;
 $$0 = HEAP32[$bits>>2]|0;
 STACKTOP = sp;return ($$0|0);
}
function _best_huffman_divide($gfc,$gi) {
 $gfc = $gfc|0;
 $gi = $gi|0;
 var $$ = 0, $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $a1$0$lcssa = 0, $a1$06 = 0, $a2$0$a1$0 = 0, $a2$0$lcssa = 0, $a2$05 = 0, $bits$i1 = 0, $bits$i2 = 0, $cod_info2 = 0, $gi$idx = 0, $gi$idx$val = 0, $i$0$ = 0, $i$07 = 0, $r0$12$i = 0, $r01_bits = 0, $r01_div = 0, $r0_tbl = 0, $r1$01$i = 0, $r1_tbl = 0;
 var $r2$01$i = 0, $r2$01$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 5632|0;
 $bits$i2 = sp + 5624|0;
 $bits$i1 = sp + 5620|0;
 $cod_info2 = sp + 368|0;
 $r01_bits = sp + 276|0;
 $r01_div = sp + 184|0;
 $r0_tbl = sp + 92|0;
 $r1_tbl = sp;
 $0 = (($gi) + 2304|0);
 $1 = (($gi) + 4788|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(2);
 L1: do {
  if ($3) {
   $4 = (($gfc) + 76|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($5|0)==(1);
   if ($6) {
    STACKTOP = sp;return;
   } else {
    _memcpy(($cod_info2|0),($gi|0),5252)|0;
    $198 = $gi;
    label = 5;
    break;
   }
  } else {
   _memcpy(($cod_info2|0),($gi|0),5252)|0;
   $7 = ($2|0)==(0);
   if ($7) {
    $gi$idx = (($gi) + 4772|0);
    $gi$idx$val = HEAP32[$gi$idx>>2]|0;
    HEAP32[$r01_bits>>2] = 100000;
    $8 = (($r01_bits) + 4|0);
    HEAP32[$8>>2] = 100000;
    $9 = (($r01_bits) + 8|0);
    HEAP32[$9>>2] = 100000;
    $10 = (($r01_bits) + 12|0);
    HEAP32[$10>>2] = 100000;
    $11 = (($r01_bits) + 16|0);
    HEAP32[$11>>2] = 100000;
    $12 = (($r01_bits) + 20|0);
    HEAP32[$12>>2] = 100000;
    $13 = (($r01_bits) + 24|0);
    HEAP32[$13>>2] = 100000;
    $14 = (($r01_bits) + 28|0);
    HEAP32[$14>>2] = 100000;
    $15 = (($r01_bits) + 32|0);
    HEAP32[$15>>2] = 100000;
    $16 = (($r01_bits) + 36|0);
    HEAP32[$16>>2] = 100000;
    $17 = (($r01_bits) + 40|0);
    HEAP32[$17>>2] = 100000;
    $18 = (($r01_bits) + 44|0);
    HEAP32[$18>>2] = 100000;
    $19 = (($r01_bits) + 48|0);
    HEAP32[$19>>2] = 100000;
    $20 = (($r01_bits) + 52|0);
    HEAP32[$20>>2] = 100000;
    $21 = (($r01_bits) + 56|0);
    HEAP32[$21>>2] = 100000;
    $22 = (($r01_bits) + 60|0);
    HEAP32[$22>>2] = 100000;
    $23 = (($r01_bits) + 64|0);
    HEAP32[$23>>2] = 100000;
    $24 = (($r01_bits) + 68|0);
    HEAP32[$24>>2] = 100000;
    $25 = (($r01_bits) + 72|0);
    HEAP32[$25>>2] = 100000;
    $26 = (($r01_bits) + 76|0);
    HEAP32[$26>>2] = 100000;
    $27 = (($r01_bits) + 80|0);
    HEAP32[$27>>2] = 100000;
    $28 = (($r01_bits) + 84|0);
    HEAP32[$28>>2] = 100000;
    $29 = (($r01_bits) + 88|0);
    HEAP32[$29>>2] = 100000;
    $30 = (($gfc) + 85816|0);
    $r0$12$i = 0;
    while(1) {
     $32 = (($r0$12$i) + 1)|0;
     $33 = ((($gfc) + ($32<<2)|0) + 21360|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ($34|0)<($gi$idx$val|0);
     if (!($35)) {
      break;
     }
     HEAP32[$bits$i1>>2] = 0;
     $36 = HEAP32[$30>>2]|0;
     $37 = ((($gi) + ($34<<2)|0) + 2304|0);
     $38 = (FUNCTION_TABLE_iiii[$36 & 7]($0,$37,$bits$i1)|0);
     $r1$01$i = 0;
     while(1) {
      $39 = (($r1$01$i) + ($r0$12$i))|0;
      $40 = (($39) + 2)|0;
      $41 = ((($gfc) + ($40<<2)|0) + 21360|0);
      $42 = HEAP32[$41>>2]|0;
      $43 = ($42|0)<($gi$idx$val|0);
      if (!($43)) {
       break;
      }
      $44 = HEAP32[$bits$i1>>2]|0;
      HEAP32[$bits$i2>>2] = $44;
      $45 = HEAP32[$30>>2]|0;
      $46 = ((($gi) + ($42<<2)|0) + 2304|0);
      $47 = (FUNCTION_TABLE_iiii[$45 & 7]($37,$46,$bits$i2)|0);
      $48 = (($r01_bits) + ($39<<2)|0);
      $49 = HEAP32[$48>>2]|0;
      $50 = HEAP32[$bits$i2>>2]|0;
      $51 = ($49|0)>($50|0);
      if ($51) {
       HEAP32[$48>>2] = $50;
       $52 = (($r01_div) + ($39<<2)|0);
       HEAP32[$52>>2] = $r0$12$i;
       $53 = (($r0_tbl) + ($39<<2)|0);
       HEAP32[$53>>2] = $38;
       $54 = (($r1_tbl) + ($39<<2)|0);
       HEAP32[$54>>2] = $47;
      }
      $55 = (($r1$01$i) + 1)|0;
      $56 = ($55|0)<(8);
      if ($56) {
       $r1$01$i = $55;
      } else {
       break;
      }
     }
     $31 = ($32|0)<(16);
     if ($31) {
      $r0$12$i = $32;
     } else {
      break;
     }
    }
    $57 = (($cod_info2) + 4772|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = (($cod_info2) + 5184|0);
    $60 = (($gi) + 4768|0);
    $61 = ((($gi) + ($58<<2)|0) + 2304|0);
    $62 = (($gi) + 4824|0);
    $63 = (($gi) + 4828|0);
    $64 = (($gi) + 4796|0);
    $65 = (($gi) + 4800|0);
    $66 = (($gi) + 4804|0);
    $r2$01$i = 2;
    while(1) {
     $67 = ((($gfc) + ($r2$01$i<<2)|0) + 21360|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = ($68|0)<($58|0);
     if (!($69)) {
      $$pre$phiZ2D = $57;$106 = $gi;
      break L1;
     }
     $70 = (($r2$01$i) + -2)|0;
     $71 = (($r01_bits) + ($70<<2)|0);
     $72 = HEAP32[$71>>2]|0;
     $73 = HEAP32[$59>>2]|0;
     $74 = (($73) + ($72))|0;
     HEAP32[$bits$i1>>2] = $74;
     $75 = HEAP32[$60>>2]|0;
     $76 = ($75|0)>($74|0);
     if (!($76)) {
      $$pre$phiZ2D = $57;$106 = $gi;
      break L1;
     }
     $77 = HEAP32[$30>>2]|0;
     $78 = ((($gi) + ($68<<2)|0) + 2304|0);
     $79 = (FUNCTION_TABLE_iiii[$77 & 7]($78,$61,$bits$i1)|0);
     $80 = HEAP32[$60>>2]|0;
     $81 = HEAP32[$bits$i1>>2]|0;
     $82 = ($80|0)>($81|0);
     if ($82) {
      _memcpy(($gi|0),($cod_info2|0),5252)|0;
      HEAP32[$60>>2] = $81;
      $83 = (($r01_div) + ($70<<2)|0);
      $84 = HEAP32[$83>>2]|0;
      HEAP32[$62>>2] = $84;
      $85 = (($70) - ($84))|0;
      HEAP32[$63>>2] = $85;
      $86 = (($r0_tbl) + ($70<<2)|0);
      $87 = HEAP32[$86>>2]|0;
      HEAP32[$64>>2] = $87;
      $88 = (($r1_tbl) + ($70<<2)|0);
      $89 = HEAP32[$88>>2]|0;
      HEAP32[$65>>2] = $89;
      HEAP32[$66>>2] = $79;
     }
     $90 = (($r2$01$i) + 1)|0;
     $91 = ($90|0)<(23);
     if ($91) {
      $r2$01$i = $90;
     } else {
      $$pre$phiZ2D = $57;$106 = $gi;
      break;
     }
    }
   } else {
    $198 = $gi;
    label = 5;
   }
  }
 } while(0);
 if ((label|0) == 5) {
  $$pre = (($cod_info2) + 4772|0);
  $$pre$phiZ2D = $$pre;$106 = $198;
 }
 $92 = HEAP32[$$pre$phiZ2D>>2]|0;
 $93 = ($92|0)==(0);
 if ($93) {
  STACKTOP = sp;return;
 }
 $94 = (($92) + -2)|0;
 $95 = ((($gi) + ($94<<2)|0) + 2304|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = (($92) + -1)|0;
 $98 = ((($gi) + ($97<<2)|0) + 2304|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = $99 | $96;
 $101 = ($100>>>0)>(1);
 if ($101) {
  STACKTOP = sp;return;
 }
 $102 = (($gi) + 4776|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = (($103) + 2)|0;
 $105 = ($104|0)>(576);
 if ($105) {
  STACKTOP = sp;return;
 }
 _memcpy(($cod_info2|0),($106|0),5252)|0;
 $107 = (($cod_info2) + 4776|0);
 HEAP32[$107>>2] = $104;
 $108 = HEAP32[$$pre$phiZ2D>>2]|0;
 $109 = ($104|0)>($108|0);
 if ($109) {
  $a1$06 = 0;$a2$05 = 0;$i$07 = $104;
  while(1) {
   $110 = (($i$07) + -4)|0;
   $111 = ((($gi) + ($110<<2)|0) + 2304|0);
   $112 = HEAP32[$111>>2]|0;
   $113 = $112 << 1;
   $114 = (($i$07) + -3)|0;
   $115 = ((($gi) + ($114<<2)|0) + 2304|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = (($113) + ($116))|0;
   $118 = $117 << 1;
   $119 = (($i$07) + -2)|0;
   $120 = ((($gi) + ($119<<2)|0) + 2304|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = (($118) + ($121))|0;
   $123 = $122 << 1;
   $124 = (($i$07) + -1)|0;
   $125 = ((($gi) + ($124<<2)|0) + 2304|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = (($123) + ($126))|0;
   $128 = (135032 + ($127)|0);
   $129 = HEAP8[$128>>0]|0;
   $130 = $129&255;
   $131 = (($130) + ($a1$06))|0;
   $132 = (135048 + ($127)|0);
   $133 = HEAP8[$132>>0]|0;
   $134 = $133&255;
   $135 = (($134) + ($a2$05))|0;
   $136 = ($110|0)>($108|0);
   if ($136) {
    $a1$06 = $131;$a2$05 = $135;$i$07 = $110;
   } else {
    $137 = $110;$a1$0$lcssa = $131;$a2$0$lcssa = $135;
    break;
   }
  }
 } else {
  $137 = $104;$a1$0$lcssa = 0;$a2$0$lcssa = 0;
 }
 HEAP32[$$pre$phiZ2D>>2] = $137;
 $138 = (($cod_info2) + 4840|0);
 $139 = ($a1$0$lcssa|0)>($a2$0$lcssa|0);
 $$ = $139&1;
 $a2$0$a1$0 = $139 ? $a2$0$lcssa : $a1$0$lcssa;
 HEAP32[$138>>2] = $$;
 $140 = (($cod_info2) + 5184|0);
 HEAP32[$140>>2] = $a2$0$a1$0;
 $141 = (($cod_info2) + 4788|0);
 $142 = HEAP32[$141>>2]|0;
 $143 = ($142|0)==(0);
 if (!($143)) {
  $177 = (($cod_info2) + 4768|0);
  HEAP32[$177>>2] = $a2$0$a1$0;
  $178 = (($gfc) + 21392|0);
  $179 = HEAP32[$178>>2]|0;
  $180 = ($179|0)>($137|0);
  $i$0$ = $180 ? $137 : $179;
  $181 = ($i$0$|0)>(0);
  if ($181) {
   $182 = (($gfc) + 85816|0);
   $183 = HEAP32[$182>>2]|0;
   $184 = ((($gi) + ($i$0$<<2)|0) + 2304|0);
   $185 = (FUNCTION_TABLE_iiii[$183 & 7]($0,$184,$177)|0);
   $186 = (($cod_info2) + 4796|0);
   HEAP32[$186>>2] = $185;
  }
  $187 = ($137|0)>($i$0$|0);
  if ($187) {
   $188 = (($gfc) + 85816|0);
   $189 = HEAP32[$188>>2]|0;
   $190 = ((($gi) + ($i$0$<<2)|0) + 2304|0);
   $191 = ((($gi) + ($137<<2)|0) + 2304|0);
   $192 = (FUNCTION_TABLE_iiii[$189 & 7]($190,$191,$177)|0);
   $193 = (($cod_info2) + 4800|0);
   HEAP32[$193>>2] = $192;
  }
  $194 = (($gi) + 4768|0);
  $195 = HEAP32[$194>>2]|0;
  $196 = HEAP32[$177>>2]|0;
  $197 = ($195|0)>($196|0);
  if (!($197)) {
   STACKTOP = sp;return;
  }
  _memcpy(($106|0),($cod_info2|0),5252)|0;
  STACKTOP = sp;return;
 }
 $144 = (($gi) + 4768|0);
 $145 = (($gfc) + 85816|0);
 $146 = ((($gi) + ($137<<2)|0) + 2304|0);
 $147 = (($gi) + 4824|0);
 $148 = (($gi) + 4828|0);
 $149 = (($gi) + 4796|0);
 $150 = (($gi) + 4800|0);
 $151 = (($gi) + 4804|0);
 $r2$01$i3 = 2;
 while(1) {
  $152 = ((($gfc) + ($r2$01$i3<<2)|0) + 21360|0);
  $153 = HEAP32[$152>>2]|0;
  $154 = ($153|0)<($137|0);
  if (!($154)) {
   label = 38;
   break;
  }
  $155 = (($r2$01$i3) + -2)|0;
  $156 = (($r01_bits) + ($155<<2)|0);
  $157 = HEAP32[$156>>2]|0;
  $158 = HEAP32[$140>>2]|0;
  $159 = (($158) + ($157))|0;
  HEAP32[$bits$i2>>2] = $159;
  $160 = HEAP32[$144>>2]|0;
  $161 = ($160|0)>($159|0);
  if (!($161)) {
   label = 38;
   break;
  }
  $162 = HEAP32[$145>>2]|0;
  $163 = ((($gi) + ($153<<2)|0) + 2304|0);
  $164 = (FUNCTION_TABLE_iiii[$162 & 7]($163,$146,$bits$i2)|0);
  $165 = HEAP32[$144>>2]|0;
  $166 = HEAP32[$bits$i2>>2]|0;
  $167 = ($165|0)>($166|0);
  if ($167) {
   _memcpy(($106|0),($cod_info2|0),5252)|0;
   HEAP32[$144>>2] = $166;
   $168 = (($r01_div) + ($155<<2)|0);
   $169 = HEAP32[$168>>2]|0;
   HEAP32[$147>>2] = $169;
   $170 = (($155) - ($169))|0;
   HEAP32[$148>>2] = $170;
   $171 = (($r0_tbl) + ($155<<2)|0);
   $172 = HEAP32[$171>>2]|0;
   HEAP32[$149>>2] = $172;
   $173 = (($r1_tbl) + ($155<<2)|0);
   $174 = HEAP32[$173>>2]|0;
   HEAP32[$150>>2] = $174;
   HEAP32[$151>>2] = $164;
  }
  $175 = (($r2$01$i3) + 1)|0;
  $176 = ($175|0)<(23);
  if ($176) {
   $r2$01$i3 = $175;
  } else {
   label = 38;
   break;
  }
 }
 if ((label|0) == 38) {
  STACKTOP = sp;return;
 }
}
function _count_bits($gfc,$xr,$gi,$prev_noise) {
 $gfc = $gfc|0;
 $xr = $xr|0;
 $gi = $gi|0;
 $prev_noise = $prev_noise|0;
 var $$$i = 0, $$0 = 0, $$042$i = 0, $$1$i = 0, $$2$i = 0, $$not$i = 0, $$pre$pre = 0, $$pre9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0.0, $117 = 0, $118 = 0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $17 = 0.0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0, $99 = 0, $acc_iData$038$i = 0, $acc_iData$1$i = 0, $acc_iData$2$i = 0, $acc_iData$3$i = 0, $acc_iData$4$i = 0, $acc_iData$5$i = 0, $acc_xp$040$i = 0, $acc_xp$1$i = 0, $acc_xp$2$i = 0, $acc_xp$3$i = 0, $acc_xp$4$i = 0;
 var $acc_xp$5$i = 0, $accumulate$036$i = 0, $accumulate$3$i = 0, $accumulate$4$i = 0, $accumulate01$037$i = 0, $accumulate01$2$i = 0, $accumulate01$4$i = 0, $i$02$i$i = 0, $i$02$i10$i = 0, $i$02$i15$i = 0, $i$02$i5$i = 0, $iData$032$i = 0, $iData$1$i = 0, $j$029$i = 0, $j$03 = 0, $j$1$i = 0, $k$01 = 0, $l$0$i = 0, $not$$i$i = 0, $not$$i11$i = 0;
 var $not$$i16$i = 0, $not$$i6$i = 0, $not$1$i$i = 0, $not$1$i12$i = 0, $not$1$i17$i = 0, $not$1$i7$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond3$i = 0, $or$cond4$i = 0, $sfb$030$i = 0, $sfb$04 = 0, $sfb$1$i = 0, $sfb$2$i = 0, $step$020$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($gi) + 4780|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (132496 + ($1<<2)|0);
 $3 = +HEAPF32[$2>>2];
 $4 = 8206.0 / $3;
 $5 = (($gi) + 4764|0);
 $6 = +HEAPF32[$5>>2];
 $7 = $6 > $4;
 if ($7) {
  $$0 = 100000;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = (($gi) + 2304|0);
 $9 = ($prev_noise|0)!=(0|0);
 if ($9) {
  $10 = HEAP32[$prev_noise>>2]|0;
  $11 = ($1|0)==($10|0);
  $159 = $11;
 } else {
  $159 = 0;
 }
 $12 = (($gi) + 4788|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(2);
 $$2$i = $14 ? 38 : 21;
 $15 = (($gi) + 4832|0);
 $16 = (($gi) + 4836|0);
 $17 = 0.594599962234497070313 / $3;
 $18 = (($gi) + 5208|0);
 $19 = (($$2$i) + 1)|0;
 $20 = (($prev_noise) + 4|0);
 $$042$i = $xr;$acc_iData$038$i = $8;$acc_xp$040$i = $xr;$accumulate$036$i = 0;$accumulate01$037$i = 0;$iData$032$i = $8;$j$029$i = 0;$sfb$030$i = 0;
 while(1) {
  if ($159) {
   label = 7;
  } else {
   $21 = HEAP32[$12>>2]|0;
   $22 = ($21|0)==(0);
   if ($22) {
    label = 7;
   } else {
    $step$020$i = -1;
    label = 15;
   }
  }
  if ((label|0) == 7) {
   label = 0;
   $23 = HEAP32[$0>>2]|0;
   $24 = ((($gi) + ($sfb$030$i<<2)|0) + 4608|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = HEAP32[$15>>2]|0;
   $27 = ($26|0)==(0);
   if ($27) {
    $31 = 0;
   } else {
    $28 = (64904 + ($sfb$030$i<<2)|0);
    $29 = HEAP32[$28>>2]|0;
    $31 = $29;
   }
   $30 = (($31) + ($25))|0;
   $32 = HEAP32[$16>>2]|0;
   $33 = (($32) + 1)|0;
   $34 = $30 << $33;
   $35 = (($23) - ($34))|0;
   $36 = ((($gi) + ($sfb$030$i<<2)|0) + 5028|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ((($gi) + ($37<<2)|0) + 4808|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = $39 << 3;
   $41 = (($35) - ($40))|0;
   if ($159) {
    $42 = ((($prev_noise) + ($sfb$030$i<<2)|0) + 8|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = ($43|0)==($41|0);
    if ($44) {
     $45 = ($accumulate$036$i|0)==(0);
     if (!($45)) {
      _quantize_lines_xrpow($accumulate$036$i,$3,$acc_xp$040$i,$acc_iData$038$i);
     }
     $46 = ($accumulate01$037$i|0)==(0);
     if ($46) {
      $acc_iData$5$i = $acc_iData$038$i;$acc_xp$5$i = $acc_xp$040$i;$accumulate$4$i = 0;$accumulate01$4$i = 0;$sfb$2$i = $sfb$030$i;
     } else {
      $i$02$i$i = 0;
      while(1) {
       $47 = (($acc_xp$040$i) + ($i$02$i$i<<2)|0);
       $48 = +HEAPF32[$47>>2];
       $49 = $i$02$i$i | 1;
       $50 = (($acc_xp$040$i) + ($49<<2)|0);
       $51 = +HEAPF32[$50>>2];
       $not$$i$i = !($17 > $48);
       $52 = $not$$i$i&1;
       $not$1$i$i = !($17 > $51);
       $53 = $not$1$i$i&1;
       $54 = (($acc_iData$038$i) + ($i$02$i$i<<2)|0);
       HEAP32[$54>>2] = $52;
       $55 = (($acc_iData$038$i) + ($49<<2)|0);
       HEAP32[$55>>2] = $53;
       $56 = (($i$02$i$i) + 2)|0;
       $57 = ($56>>>0)<($accumulate01$037$i>>>0);
       if ($57) {
        $i$02$i$i = $56;
       } else {
        $acc_iData$5$i = $acc_iData$038$i;$acc_xp$5$i = $acc_xp$040$i;$accumulate$4$i = 0;$accumulate01$4$i = 0;$sfb$2$i = $sfb$030$i;
        break;
       }
      }
     }
    } else {
     $step$020$i = $41;
     label = 15;
    }
   } else {
    $step$020$i = $41;
    label = 15;
   }
  }
  if ((label|0) == 15) {
   label = 0;
   $58 = ((($gi) + ($sfb$030$i<<2)|0) + 4872|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = (($59) + ($j$029$i))|0;
   $61 = HEAP32[$18>>2]|0;
   $62 = ($60|0)>($61|0);
   if ($62) {
    $63 = (($61) - ($j$029$i))|0;
    $64 = (($63) + 1)|0;
    $65 = ((($gi) + ($61<<2)|0) + 2304|0);
    $66 = (576 - ($61))|0;
    $67 = $66 << 2;
    _memset(($65|0),0,($67|0))|0;
    $68 = ($64|0)<(0);
    $$$i = $68 ? 0 : $64;
    $l$0$i = $$$i;$sfb$1$i = $19;
   } else {
    $l$0$i = $59;$sfb$1$i = $sfb$030$i;
   }
   $69 = ($accumulate$036$i|0)!=(0);
   $$not$i = $69 ^ 1;
   $70 = ($accumulate01$037$i|0)==(0);
   $or$cond$i = $70 & $$not$i;
   $acc_iData$1$i = $or$cond$i ? $iData$032$i : $acc_iData$038$i;
   $acc_xp$1$i = $or$cond$i ? $$042$i : $acc_xp$040$i;
   if ($9) {
    $71 = HEAP32[$20>>2]|0;
    $72 = ($71|0)<(1);
    $73 = ($sfb$1$i|0)<($71|0);
    $or$cond3$i = $72 | $73;
    if ($or$cond3$i) {
     label = 23;
    } else {
     $74 = ((($prev_noise) + ($sfb$1$i<<2)|0) + 8|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = ($75|0)<(1);
     $77 = ($step$020$i|0)<($75|0);
     $or$cond4$i = $76 | $77;
     if ($or$cond4$i) {
      label = 23;
     } else {
      if ($69) {
       _quantize_lines_xrpow($accumulate$036$i,$3,$acc_xp$1$i,$acc_iData$1$i);
       $acc_iData$2$i = $iData$032$i;$acc_xp$2$i = $$042$i;
      } else {
       $acc_iData$2$i = $acc_iData$1$i;$acc_xp$2$i = $acc_xp$1$i;
      }
      $78 = (($l$0$i) + ($accumulate01$037$i))|0;
      $acc_iData$4$i = $acc_iData$2$i;$acc_xp$4$i = $acc_xp$2$i;$accumulate$3$i = 0;$accumulate01$2$i = $78;
     }
    }
   } else {
    label = 23;
   }
   if ((label|0) == 23) {
    label = 0;
    if ($70) {
     $acc_iData$3$i = $acc_iData$1$i;$acc_xp$3$i = $acc_xp$1$i;
    } else {
     $i$02$i10$i = 0;
     while(1) {
      $79 = (($acc_xp$1$i) + ($i$02$i10$i<<2)|0);
      $80 = +HEAPF32[$79>>2];
      $81 = $i$02$i10$i | 1;
      $82 = (($acc_xp$1$i) + ($81<<2)|0);
      $83 = +HEAPF32[$82>>2];
      $not$$i11$i = !($17 > $80);
      $84 = $not$$i11$i&1;
      $not$1$i12$i = !($17 > $83);
      $85 = $not$1$i12$i&1;
      $86 = (($acc_iData$1$i) + ($i$02$i10$i<<2)|0);
      HEAP32[$86>>2] = $84;
      $87 = (($acc_iData$1$i) + ($81<<2)|0);
      HEAP32[$87>>2] = $85;
      $88 = (($i$02$i10$i) + 2)|0;
      $89 = ($88>>>0)<($accumulate01$037$i>>>0);
      if ($89) {
       $i$02$i10$i = $88;
      } else {
       $acc_iData$3$i = $iData$032$i;$acc_xp$3$i = $$042$i;
       break;
      }
     }
    }
    $90 = (($l$0$i) + ($accumulate$036$i))|0;
    $acc_iData$4$i = $acc_iData$3$i;$acc_xp$4$i = $acc_xp$3$i;$accumulate$3$i = $90;$accumulate01$2$i = 0;
   }
   $91 = ($l$0$i|0)<(1);
   if ($91) {
    label = 27;
    break;
   } else {
    $acc_iData$5$i = $acc_iData$4$i;$acc_xp$5$i = $acc_xp$4$i;$accumulate$4$i = $accumulate$3$i;$accumulate01$4$i = $accumulate01$2$i;$sfb$2$i = $sfb$1$i;
   }
  }
  $105 = ($sfb$2$i|0)>($$2$i|0);
  if ($105) {
   $$1$i = $$042$i;$iData$1$i = $iData$032$i;$j$1$i = $j$029$i;
  } else {
   $106 = ((($gi) + ($sfb$2$i<<2)|0) + 4872|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = (($iData$032$i) + ($107<<2)|0);
   $109 = (($$042$i) + ($107<<2)|0);
   $110 = (($107) + ($j$029$i))|0;
   $$1$i = $109;$iData$1$i = $108;$j$1$i = $110;
  }
  $111 = (($sfb$2$i) + 1)|0;
  $112 = ($sfb$2$i|0)<($$2$i|0);
  if ($112) {
   $$042$i = $$1$i;$acc_iData$038$i = $acc_iData$5$i;$acc_xp$040$i = $acc_xp$5$i;$accumulate$036$i = $accumulate$4$i;$accumulate01$037$i = $accumulate01$4$i;$iData$032$i = $iData$1$i;$j$029$i = $j$1$i;$sfb$030$i = $111;
  } else {
   label = 34;
   break;
  }
 }
 if ((label|0) == 27) {
  $92 = ($accumulate01$2$i|0)==(0);
  if (!($92)) {
   $i$02$i15$i = 0;
   while(1) {
    $93 = (($acc_xp$4$i) + ($i$02$i15$i<<2)|0);
    $94 = +HEAPF32[$93>>2];
    $95 = $i$02$i15$i | 1;
    $96 = (($acc_xp$4$i) + ($95<<2)|0);
    $97 = +HEAPF32[$96>>2];
    $not$$i16$i = !($17 > $94);
    $98 = $not$$i16$i&1;
    $not$1$i17$i = !($17 > $97);
    $99 = $not$1$i17$i&1;
    $100 = (($acc_iData$4$i) + ($i$02$i15$i<<2)|0);
    HEAP32[$100>>2] = $98;
    $101 = (($acc_iData$4$i) + ($95<<2)|0);
    HEAP32[$101>>2] = $99;
    $102 = (($i$02$i15$i) + 2)|0;
    $103 = ($102>>>0)<($accumulate01$2$i>>>0);
    if ($103) {
     $i$02$i15$i = $102;
    } else {
     break;
    }
   }
  }
  $104 = ($accumulate$3$i|0)==(0);
  if (!($104)) {
   _quantize_lines_xrpow($accumulate$3$i,$3,$acc_xp$4$i,$acc_iData$4$i);
  }
 }
 else if ((label|0) == 34) {
  $113 = ($accumulate$4$i|0)==(0);
  if (!($113)) {
   _quantize_lines_xrpow($accumulate$4$i,$3,$acc_xp$5$i,$acc_iData$5$i);
  }
  $114 = ($accumulate01$4$i|0)==(0);
  if (!($114)) {
   $i$02$i5$i = 0;
   while(1) {
    $115 = (($acc_xp$5$i) + ($i$02$i5$i<<2)|0);
    $116 = +HEAPF32[$115>>2];
    $117 = $i$02$i5$i | 1;
    $118 = (($acc_xp$5$i) + ($117<<2)|0);
    $119 = +HEAPF32[$118>>2];
    $not$$i6$i = !($17 > $116);
    $120 = $not$$i6$i&1;
    $not$1$i7$i = !($17 > $119);
    $121 = $not$1$i7$i&1;
    $122 = (($acc_iData$5$i) + ($i$02$i5$i<<2)|0);
    HEAP32[$122>>2] = $120;
    $123 = (($acc_iData$5$i) + ($117<<2)|0);
    HEAP32[$123>>2] = $121;
    $124 = (($i$02$i5$i) + 2)|0;
    $125 = ($124>>>0)<($accumulate01$4$i>>>0);
    if ($125) {
     $i$02$i5$i = $124;
    } else {
     break;
    }
   }
  }
 }
 $126 = (($gfc) + 85096|0);
 $127 = HEAP32[$126>>2]|0;
 $128 = $127 & 2;
 $129 = ($128|0)==(0);
 if (!($129)) {
  $130 = HEAP32[$0>>2]|0;
  $131 = HEAP32[$16>>2]|0;
  $132 = (($131) + ($130))|0;
  $133 = (132496 + ($132<<2)|0);
  $134 = +HEAPF32[$133>>2];
  $135 = $134;
  $136 = 0.634521682242438989086 / $135;
  $137 = $136;
  $138 = (($gi) + 4860|0);
  $139 = HEAP32[$138>>2]|0;
  $140 = ($139|0)>(0);
  if ($140) {
   $160 = $139;$j$03 = 0;$sfb$04 = 0;
   while(1) {
    $141 = ((($gi) + ($sfb$04<<2)|0) + 4872|0);
    $142 = HEAP32[$141>>2]|0;
    $143 = ((($gfc) + ($sfb$04<<2)|0) + 84936|0);
    $144 = HEAP32[$143>>2]|0;
    $145 = ($144|0)!=(0);
    $146 = (($142) + ($j$03))|0;
    $147 = ($142|0)>(0);
    $or$cond = $145 & $147;
    if ($or$cond) {
     $k$01 = $j$03;
     while(1) {
      $148 = (($xr) + ($k$01<<2)|0);
      $149 = +HEAPF32[$148>>2];
      $150 = !($149 >= $137);
      $$pre9 = ((($gi) + ($k$01<<2)|0) + 2304|0);
      if ($150) {
       $152 = 0;
      } else {
       $151 = HEAP32[$$pre9>>2]|0;
       $152 = $151;
      }
      HEAP32[$$pre9>>2] = $152;
      $153 = (($k$01) + 1)|0;
      $154 = ($153|0)<($146|0);
      if ($154) {
       $k$01 = $153;
      } else {
       break;
      }
     }
     $$pre$pre = HEAP32[$138>>2]|0;
     $157 = $$pre$pre;
    } else {
     $157 = $160;
    }
    $155 = (($sfb$04) + 1)|0;
    $156 = ($155|0)<($157|0);
    if ($156) {
     $160 = $157;$j$03 = $146;$sfb$04 = $155;
    } else {
     break;
    }
   }
  }
 }
 $158 = (_noquant_count_bits($gfc,$gi,$prev_noise)|0);
 $$0 = $158;
 STACKTOP = sp;return ($$0|0);
}
function _best_scalefac_store($gfc,$gr,$ch,$l3_side) {
 $gfc = $gfc|0;
 $gr = $gr|0;
 $ch = $ch|0;
 $l3_side = $l3_side|0;
 var $$pre = 0, $$pre$i = 0, $$pre38 = 0, $$pre39 = 0, $$s$0 = 0, $$s1$0$1$i = 0, $$s1$0$10$i = 0, $$s1$0$2$i = 0, $$s1$0$3$i = 0, $$s1$0$4$i = 0, $$s1$0$5$i = 0, $$s1$0$6$i = 0, $$s1$0$7$i = 0, $$s1$0$8$i = 0, $$s1$0$9$i = 0, $$s1$0$i = 0, $$s2$0$1$i = 0, $$s2$0$2$i = 0, $$s2$0$3$i = 0, $$s2$0$4$i = 0;
 var $$s2$0$5$i = 0, $$s2$0$6$i = 0, $$s2$0$7$i = 0, $$s2$0$8$i = 0, $$s2$0$9$i = 0, $$s2$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
 var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0;
 var $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0;
 var $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0;
 var $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0;
 var $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c1$1$1$i = 0, $c1$1$10$i = 0, $c1$1$2$i = 0, $c1$1$3$i = 0, $c1$1$4$i = 0;
 var $c1$1$5$i = 0, $c1$1$6$i = 0, $c1$1$7$i = 0, $c1$1$8$i = 0, $c1$1$9$i = 0, $c1$1$i = 0, $c2$0$lcssa$i = 0, $c2$1$1$i = 0, $c2$1$2$i = 0, $c2$1$3$i = 0, $c2$1$4$i = 0, $c2$1$5$i = 0, $c2$1$6$i = 0, $c2$1$7$i = 0, $c2$1$8$i = 0, $c2$1$i = 0, $exitcond$i = 0, $i$11$i = 0, $j$024 = 0, $l$0$lcssa = 0;
 var $l$018 = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i$1 = 0, $or$cond$i$2 = 0, $or$cond$i$3 = 0, $or$cond2 = 0, $or$cond3 = 0, $recalc$0$lcssa = 0, $recalc$025 = 0, $recalc$1 = 0, $recalc$2 = 0, $recalc$3 = 0, $recalc$4 = 0, $s$015 = 0, $s1$1$1$i = 0, $s1$1$10$i = 0, $s1$1$2$i = 0, $s1$1$3$i = 0, $s1$1$4$i = 0;
 var $s1$1$5$i = 0, $s1$1$6$i = 0, $s1$1$7$i = 0, $s1$1$8$i = 0, $s1$1$9$i = 0, $s1$1$i = 0, $s2$0$lcssa$i = 0, $s2$1$1$i = 0, $s2$1$2$i = 0, $s2$1$3$i = 0, $s2$1$4$i = 0, $s2$1$5$i = 0, $s2$1$6$i = 0, $s2$1$7$i = 0, $s2$1$8$i = 0, $s2$1$i = 0, $scevgep = 0, $scevgep32 = 0, $scevgep32$1 = 0, $scevgep32$2 = 0;
 var $scevgep32$3 = 0, $scevgep34 = 0, $sfb$0$lcssa$i = 0, $sfb$0$lcssa$i$1 = 0, $sfb$0$lcssa$i$2 = 0, $sfb$0$lcssa$i$3 = 0, $sfb$012$i = 0, $sfb$012$i$1 = 0, $sfb$012$i$2 = 0, $sfb$012$i$3 = 0, $sfb$026 = 0, $sfb$114 = 0, $sfb$210 = 0, $sfb$3$lcssa = 0, $sfb$38 = 0, $sfb$54 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($l3_side) + (($gr*10504)|0)|0) + (($ch*5252)|0)|0);
 $1 = (((($l3_side) + (($gr*10504)|0)|0) + (($ch*5252)|0)|0) + 4860|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(0);
 if ($3) {
  $306 = $2;$j$024 = 0;$recalc$025 = 0;$sfb$026 = 0;
  while(1) {
   $4 = ((((($l3_side) + (($gr*10504)|0)|0) + (($ch*5252)|0)|0) + ($sfb$026<<2)|0) + 4872|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = (($5) + ($j$024))|0;
   $7 = ($5|0)>(0);
   L4: do {
    if ($7) {
     $l$018 = $j$024;
     while(1) {
      $10 = ((((($l3_side) + (($gr*10504)|0)|0) + (($ch*5252)|0)|0) + ($l$018<<2)|0) + 2304|0);
      $11 = HEAP32[$10>>2]|0;
      $12 = ($11|0)==(0);
      $9 = (($l$018) + 1)|0;
      if (!($12)) {
       $l$0$lcssa = $l$018;
       break L4;
      }
      $8 = ($9|0)<($6|0);
      if ($8) {
       $l$018 = $9;
      } else {
       $l$0$lcssa = $9;
       break;
      }
     }
    } else {
     $l$0$lcssa = $j$024;
    }
   } while(0);
   $13 = ($l$0$lcssa|0)==($6|0);
   if ($13) {
    $14 = ((((($l3_side) + (($gr*10504)|0)|0) + (($ch*5252)|0)|0) + ($sfb$026<<2)|0) + 4608|0);
    HEAP32[$14>>2] = -2;
    $$pre = HEAP32[$1>>2]|0;
    $17 = $$pre;$recalc$1 = -2;
   } else {
    $17 = $306;$recalc$1 = $recalc$025;
   }
   $15 = (($sfb$026) + 1)|0;
   $16 = ($15|0)<($17|0);
   if ($16) {
    $306 = $17;$j$024 = $6;$recalc$025 = $recalc$1;$sfb$026 = $15;
   } else {
    $25 = $17;$recalc$0$lcssa = $recalc$1;
    break;
   }
  }
 } else {
  $25 = $2;$recalc$0$lcssa = 0;
 }
 $18 = (((($l3_side) + (($gr*10504)|0)|0) + (($ch*5252)|0)|0) + 4836|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(0);
 $21 = (((($l3_side) + (($gr*10504)|0)|0) + (($ch*5252)|0)|0) + 4832|0);
 if ($20) {
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)==(0);
  if ($23) {
   $24 = ($25|0)>(0);
   if ($24) {
    $s$015 = 0;$sfb$114 = 0;
    while(1) {
     $26 = ((((($l3_side) + (($gr*10504)|0)|0) + (($ch*5252)|0)|0) + ($sfb$114<<2)|0) + 4608|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = ($27|0)>(0);
     $29 = $28 ? $27 : 0;
     $$s$0 = $29 | $s$015;
     $30 = (($sfb$114) + 1)|0;
     $31 = ($30|0)<($25|0);
     if ($31) {
      $s$015 = $$s$0;$sfb$114 = $30;
     } else {
      break;
     }
    }
    $32 = $$s$0 & 1;
    $33 = ($32|0)==(0);
    $34 = ($$s$0|0)!=(0);
    $or$cond = $33 & $34;
    if ($or$cond) {
     if ($24) {
      $307 = $25;$sfb$210 = 0;
      while(1) {
       $35 = ((((($l3_side) + (($gr*10504)|0)|0) + (($ch*5252)|0)|0) + ($sfb$210<<2)|0) + 4608|0);
       $36 = HEAP32[$35>>2]|0;
       $37 = ($36|0)>(0);
       if ($37) {
        $38 = $36 >> 1;
        HEAP32[$35>>2] = $38;
        $$pre38 = HEAP32[$1>>2]|0;
        $41 = $$pre38;
       } else {
        $41 = $307;
       }
       $39 = (($sfb$210) + 1)|0;
       $40 = ($39|0)<($41|0);
       if ($40) {
        $307 = $41;$sfb$210 = $39;
       } else {
        break;
       }
      }
     }
     HEAP32[$18>>2] = 1;
     $recalc$2 = 1;
    } else {
     $recalc$2 = $recalc$0$lcssa;
    }
   } else {
    $recalc$2 = $recalc$0$lcssa;
   }
  } else {
   $recalc$2 = $recalc$0$lcssa;
  }
 } else {
  $recalc$2 = $recalc$0$lcssa;
 }
 $42 = HEAP32[$21>>2]|0;
 $43 = ($42|0)==(0);
 if ($43) {
  $44 = (((($l3_side) + (($gr*10504)|0)|0) + (($ch*5252)|0)|0) + 4788|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ($45|0)==(2);
  if ($46) {
   $recalc$3 = $recalc$2;
  } else {
   $47 = (($gfc) + 76|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($48|0)==(2);
   if ($49) {
    $sfb$38 = 11;
    while(1) {
     $52 = ((((($l3_side) + (($gr*10504)|0)|0) + (($ch*5252)|0)|0) + ($sfb$38<<2)|0) + 4608|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = (64904 + ($sfb$38<<2)|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($53|0)>=($55|0);
     $57 = ($53|0)==(-2);
     $or$cond2 = $56 | $57;
     $51 = (($sfb$38) + 1)|0;
     if (!($or$cond2)) {
      $sfb$3$lcssa = $sfb$38;
      break;
     }
     $50 = ($51|0)<(21);
     if ($50) {
      $sfb$38 = $51;
     } else {
      $sfb$3$lcssa = $51;
      break;
     }
    }
    $58 = ($sfb$3$lcssa|0)==(21);
    if ($58) {
     $59 = (((($l3_side) + (($gr*10504)|0)|0) + (($ch*5252)|0)|0) + 4652|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = ($60|0)>(0);
     if ($61) {
      $62 = HEAP32[((64904 + 44|0))>>2]|0;
      $63 = (($60) - ($62))|0;
      HEAP32[$59>>2] = $63;
     }
     $64 = (((($l3_side) + (($gr*10504)|0)|0) + (($ch*5252)|0)|0) + 4656|0);
     $65 = HEAP32[$64>>2]|0;
     $66 = ($65|0)>(0);
     if ($66) {
      $264 = HEAP32[((64904 + 48|0))>>2]|0;
      $265 = (($65) - ($264))|0;
      HEAP32[$64>>2] = $265;
     }
     $266 = (((($l3_side) + (($gr*10504)|0)|0) + (($ch*5252)|0)|0) + 4660|0);
     $267 = HEAP32[$266>>2]|0;
     $268 = ($267|0)>(0);
     if ($268) {
      $269 = HEAP32[((64904 + 52|0))>>2]|0;
      $270 = (($267) - ($269))|0;
      HEAP32[$266>>2] = $270;
     }
     $271 = (((($l3_side) + (($gr*10504)|0)|0) + (($ch*5252)|0)|0) + 4664|0);
     $272 = HEAP32[$271>>2]|0;
     $273 = ($272|0)>(0);
     if ($273) {
      $274 = HEAP32[((64904 + 56|0))>>2]|0;
      $275 = (($272) - ($274))|0;
      HEAP32[$271>>2] = $275;
     }
     $276 = (((($l3_side) + (($gr*10504)|0)|0) + (($ch*5252)|0)|0) + 4668|0);
     $277 = HEAP32[$276>>2]|0;
     $278 = ($277|0)>(0);
     if ($278) {
      $279 = HEAP32[((64904 + 60|0))>>2]|0;
      $280 = (($277) - ($279))|0;
      HEAP32[$276>>2] = $280;
     }
     $281 = (((($l3_side) + (($gr*10504)|0)|0) + (($ch*5252)|0)|0) + 4672|0);
     $282 = HEAP32[$281>>2]|0;
     $283 = ($282|0)>(0);
     if ($283) {
      $284 = HEAP32[((64904 + 64|0))>>2]|0;
      $285 = (($282) - ($284))|0;
      HEAP32[$281>>2] = $285;
     }
     $286 = (((($l3_side) + (($gr*10504)|0)|0) + (($ch*5252)|0)|0) + 4676|0);
     $287 = HEAP32[$286>>2]|0;
     $288 = ($287|0)>(0);
     if ($288) {
      $289 = HEAP32[((64904 + 68|0))>>2]|0;
      $290 = (($287) - ($289))|0;
      HEAP32[$286>>2] = $290;
     }
     $291 = (((($l3_side) + (($gr*10504)|0)|0) + (($ch*5252)|0)|0) + 4680|0);
     $292 = HEAP32[$291>>2]|0;
     $293 = ($292|0)>(0);
     if ($293) {
      $294 = HEAP32[((64904 + 72|0))>>2]|0;
      $295 = (($292) - ($294))|0;
      HEAP32[$291>>2] = $295;
     }
     $296 = (((($l3_side) + (($gr*10504)|0)|0) + (($ch*5252)|0)|0) + 4684|0);
     $297 = HEAP32[$296>>2]|0;
     $298 = ($297|0)>(0);
     if ($298) {
      $299 = HEAP32[((64904 + 76|0))>>2]|0;
      $300 = (($297) - ($299))|0;
      HEAP32[$296>>2] = $300;
     }
     $301 = (((($l3_side) + (($gr*10504)|0)|0) + (($ch*5252)|0)|0) + 4688|0);
     $302 = HEAP32[$301>>2]|0;
     $303 = ($302|0)>(0);
     if ($303) {
      $304 = HEAP32[((64904 + 80|0))>>2]|0;
      $305 = (($302) - ($304))|0;
      HEAP32[$301>>2] = $305;
     }
     HEAP32[$21>>2] = 1;
     $recalc$3 = 1;
    } else {
     $recalc$3 = $recalc$2;
    }
   } else {
    $recalc$3 = $recalc$2;
   }
  }
 } else {
  $recalc$3 = $recalc$2;
 }
 $67 = $ch << 2;
 $68 = (($67) + 4)|0;
 $scevgep34 = ((($l3_side) + ($68<<2)|0) + 21008|0);
 ;HEAP32[$scevgep34+0>>2]=0|0;HEAP32[$scevgep34+4>>2]=0|0;HEAP32[$scevgep34+8>>2]=0|0;HEAP32[$scevgep34+12>>2]=0|0;
 $69 = (($gfc) + 76|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = ($70|0)==(2);
 $72 = ($gr|0)==(1);
 $or$cond3 = $71 & $72;
 if ($or$cond3) {
  $73 = ((($l3_side) + (($ch*5252)|0)|0) + 4788|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = ($74|0)==(2);
  if ($75) {
   $recalc$4 = $recalc$3;
  } else {
   $76 = ((($l3_side) + (($ch*5252)|0)|0) + 15292|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = ($77|0)==(2);
   if ($78) {
    $recalc$4 = $recalc$3;
   } else {
    $$pre$i = HEAP32[141464>>2]|0;
    $scevgep = ((($l3_side) + (($ch*5252)|0)|0) + 15112|0);
    $79 = HEAP32[((141464 + 4|0))>>2]|0;
    $80 = ($$pre$i|0)<($79|0);
    L71: do {
     if ($80) {
      $sfb$012$i = $$pre$i;
      while(1) {
       $83 = (((($l3_side) + (($ch*5252)|0)|0) + ($sfb$012$i<<2)|0) + 4608|0);
       $84 = HEAP32[$83>>2]|0;
       $85 = (((($l3_side) + (($ch*5252)|0)|0) + ($sfb$012$i<<2)|0) + 15112|0);
       $86 = HEAP32[$85>>2]|0;
       $87 = ($84|0)!=($86|0);
       $88 = ($86|0)>(-1);
       $or$cond$i = $87 & $88;
       $82 = (($sfb$012$i) + 1)|0;
       if ($or$cond$i) {
        $sfb$0$lcssa$i = $sfb$012$i;
        break L71;
       }
       $81 = ($82|0)<($79|0);
       if ($81) {
        $sfb$012$i = $82;
       } else {
        $sfb$0$lcssa$i = $82;
        break;
       }
      }
     } else {
      $sfb$0$lcssa$i = $$pre$i;
     }
    } while(0);
    $89 = ($sfb$0$lcssa$i|0)==($79|0);
    if ($89) {
     if ($80) {
      $scevgep32 = (((($l3_side) + (($ch*5252)|0)|0) + ($$pre$i<<2)|0) + 15112|0);
      $92 = (($79) - ($$pre$i))|0;
      $93 = $92 << 2;
      _memset(($scevgep32|0),-1,($93|0))|0;
     }
     $94 = ((($l3_side) + ($ch<<4)|0) + 21024|0);
     HEAP32[$94>>2] = 1;
    }
    $90 = HEAP32[((141464 + 8|0))>>2]|0;
    $91 = ($79|0)<($90|0);
    L82: do {
     if ($91) {
      $sfb$012$i$1 = $79;
      while(1) {
       $223 = (((($l3_side) + (($ch*5252)|0)|0) + ($sfb$012$i$1<<2)|0) + 4608|0);
       $224 = HEAP32[$223>>2]|0;
       $225 = (((($l3_side) + (($ch*5252)|0)|0) + ($sfb$012$i$1<<2)|0) + 15112|0);
       $226 = HEAP32[$225>>2]|0;
       $227 = ($224|0)!=($226|0);
       $228 = ($226|0)>(-1);
       $or$cond$i$1 = $227 & $228;
       $229 = (($sfb$012$i$1) + 1)|0;
       if ($or$cond$i$1) {
        $sfb$0$lcssa$i$1 = $sfb$012$i$1;
        break L82;
       }
       $230 = ($229|0)<($90|0);
       if ($230) {
        $sfb$012$i$1 = $229;
       } else {
        $sfb$0$lcssa$i$1 = $229;
        break;
       }
      }
     } else {
      $sfb$0$lcssa$i$1 = $79;
     }
    } while(0);
    $231 = ($sfb$0$lcssa$i$1|0)==($90|0);
    if ($231) {
     if ($91) {
      $scevgep32$1 = (((($l3_side) + (($ch*5252)|0)|0) + ($79<<2)|0) + 15112|0);
      $232 = (($90) - ($79))|0;
      $233 = $232 << 2;
      _memset(($scevgep32$1|0),-1,($233|0))|0;
     }
     $234 = ((($l3_side) + ($ch<<4)|0) + 21028|0);
     HEAP32[$234>>2] = 1;
    }
    $235 = HEAP32[((141464 + 12|0))>>2]|0;
    $236 = ($90|0)<($235|0);
    L93: do {
     if ($236) {
      $sfb$012$i$2 = $90;
      while(1) {
       $237 = (((($l3_side) + (($ch*5252)|0)|0) + ($sfb$012$i$2<<2)|0) + 4608|0);
       $238 = HEAP32[$237>>2]|0;
       $239 = (((($l3_side) + (($ch*5252)|0)|0) + ($sfb$012$i$2<<2)|0) + 15112|0);
       $240 = HEAP32[$239>>2]|0;
       $241 = ($238|0)!=($240|0);
       $242 = ($240|0)>(-1);
       $or$cond$i$2 = $241 & $242;
       $243 = (($sfb$012$i$2) + 1)|0;
       if ($or$cond$i$2) {
        $sfb$0$lcssa$i$2 = $sfb$012$i$2;
        break L93;
       }
       $244 = ($243|0)<($235|0);
       if ($244) {
        $sfb$012$i$2 = $243;
       } else {
        $sfb$0$lcssa$i$2 = $243;
        break;
       }
      }
     } else {
      $sfb$0$lcssa$i$2 = $90;
     }
    } while(0);
    $245 = ($sfb$0$lcssa$i$2|0)==($235|0);
    if ($245) {
     if ($236) {
      $scevgep32$2 = (((($l3_side) + (($ch*5252)|0)|0) + ($90<<2)|0) + 15112|0);
      $246 = (($235) - ($90))|0;
      $247 = $246 << 2;
      _memset(($scevgep32$2|0),-1,($247|0))|0;
     }
     $248 = ((($l3_side) + ($ch<<4)|0) + 21032|0);
     HEAP32[$248>>2] = 1;
    }
    $249 = HEAP32[((141464 + 16|0))>>2]|0;
    $250 = ($235|0)<($249|0);
    L104: do {
     if ($250) {
      $sfb$012$i$3 = $235;
      while(1) {
       $251 = (((($l3_side) + (($ch*5252)|0)|0) + ($sfb$012$i$3<<2)|0) + 4608|0);
       $252 = HEAP32[$251>>2]|0;
       $253 = (((($l3_side) + (($ch*5252)|0)|0) + ($sfb$012$i$3<<2)|0) + 15112|0);
       $254 = HEAP32[$253>>2]|0;
       $255 = ($252|0)!=($254|0);
       $256 = ($254|0)>(-1);
       $or$cond$i$3 = $255 & $256;
       $257 = (($sfb$012$i$3) + 1)|0;
       if ($or$cond$i$3) {
        $sfb$0$lcssa$i$3 = $sfb$012$i$3;
        break L104;
       }
       $258 = ($257|0)<($249|0);
       if ($258) {
        $sfb$012$i$3 = $257;
       } else {
        $sfb$0$lcssa$i$3 = $257;
        break;
       }
      }
     } else {
      $sfb$0$lcssa$i$3 = $235;
     }
    } while(0);
    $259 = ($sfb$0$lcssa$i$3|0)==($249|0);
    if ($259) {
     if ($250) {
      $scevgep32$3 = (((($l3_side) + (($ch*5252)|0)|0) + ($235<<2)|0) + 15112|0);
      $260 = (($249) - ($235))|0;
      $261 = $260 << 2;
      _memset(($scevgep32$3|0),-1,($261|0))|0;
     }
     $262 = ((($l3_side) + ($ch<<4)|0) + 21036|0);
     HEAP32[$262>>2] = 1;
    }
    $99 = HEAP32[$scevgep>>2]|0;
    $263 = ($99|0)==(-1);
    if ($263) {
     $c1$1$i = 0;$s1$1$i = 0;
    } else {
     $98 = ($99|0)>(0);
     $$s1$0$i = $98 ? $99 : 0;
     $c1$1$i = 1;$s1$1$i = $$s1$0$i;
    }
    $100 = ((($l3_side) + (($ch*5252)|0)|0) + 15116|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = ($101|0)==(-1);
    if ($102) {
     $c1$1$1$i = $c1$1$i;$s1$1$1$i = $s1$1$i;
    } else {
     $167 = (($c1$1$i) + 1)|0;
     $168 = ($s1$1$i|0)<($101|0);
     $$s1$0$1$i = $168 ? $101 : $s1$1$i;
     $c1$1$1$i = $167;$s1$1$1$i = $$s1$0$1$i;
    }
    $169 = ((($l3_side) + (($ch*5252)|0)|0) + 15120|0);
    $170 = HEAP32[$169>>2]|0;
    $171 = ($170|0)==(-1);
    if ($171) {
     $c1$1$2$i = $c1$1$1$i;$s1$1$2$i = $s1$1$1$i;
    } else {
     $172 = (($c1$1$1$i) + 1)|0;
     $173 = ($s1$1$1$i|0)<($170|0);
     $$s1$0$2$i = $173 ? $170 : $s1$1$1$i;
     $c1$1$2$i = $172;$s1$1$2$i = $$s1$0$2$i;
    }
    $174 = ((($l3_side) + (($ch*5252)|0)|0) + 15124|0);
    $175 = HEAP32[$174>>2]|0;
    $176 = ($175|0)==(-1);
    if ($176) {
     $c1$1$3$i = $c1$1$2$i;$s1$1$3$i = $s1$1$2$i;
    } else {
     $177 = (($c1$1$2$i) + 1)|0;
     $178 = ($s1$1$2$i|0)<($175|0);
     $$s1$0$3$i = $178 ? $175 : $s1$1$2$i;
     $c1$1$3$i = $177;$s1$1$3$i = $$s1$0$3$i;
    }
    $179 = ((($l3_side) + (($ch*5252)|0)|0) + 15128|0);
    $180 = HEAP32[$179>>2]|0;
    $181 = ($180|0)==(-1);
    if ($181) {
     $c1$1$4$i = $c1$1$3$i;$s1$1$4$i = $s1$1$3$i;
    } else {
     $182 = (($c1$1$3$i) + 1)|0;
     $183 = ($s1$1$3$i|0)<($180|0);
     $$s1$0$4$i = $183 ? $180 : $s1$1$3$i;
     $c1$1$4$i = $182;$s1$1$4$i = $$s1$0$4$i;
    }
    $184 = ((($l3_side) + (($ch*5252)|0)|0) + 15132|0);
    $185 = HEAP32[$184>>2]|0;
    $186 = ($185|0)==(-1);
    if ($186) {
     $c1$1$5$i = $c1$1$4$i;$s1$1$5$i = $s1$1$4$i;
    } else {
     $187 = (($c1$1$4$i) + 1)|0;
     $188 = ($s1$1$4$i|0)<($185|0);
     $$s1$0$5$i = $188 ? $185 : $s1$1$4$i;
     $c1$1$5$i = $187;$s1$1$5$i = $$s1$0$5$i;
    }
    $189 = ((($l3_side) + (($ch*5252)|0)|0) + 15136|0);
    $190 = HEAP32[$189>>2]|0;
    $191 = ($190|0)==(-1);
    if ($191) {
     $c1$1$6$i = $c1$1$5$i;$s1$1$6$i = $s1$1$5$i;
    } else {
     $192 = (($c1$1$5$i) + 1)|0;
     $193 = ($s1$1$5$i|0)<($190|0);
     $$s1$0$6$i = $193 ? $190 : $s1$1$5$i;
     $c1$1$6$i = $192;$s1$1$6$i = $$s1$0$6$i;
    }
    $194 = ((($l3_side) + (($ch*5252)|0)|0) + 15140|0);
    $195 = HEAP32[$194>>2]|0;
    $196 = ($195|0)==(-1);
    if ($196) {
     $c1$1$7$i = $c1$1$6$i;$s1$1$7$i = $s1$1$6$i;
    } else {
     $197 = (($c1$1$6$i) + 1)|0;
     $198 = ($s1$1$6$i|0)<($195|0);
     $$s1$0$7$i = $198 ? $195 : $s1$1$6$i;
     $c1$1$7$i = $197;$s1$1$7$i = $$s1$0$7$i;
    }
    $199 = ((($l3_side) + (($ch*5252)|0)|0) + 15144|0);
    $200 = HEAP32[$199>>2]|0;
    $201 = ($200|0)==(-1);
    if ($201) {
     $c1$1$8$i = $c1$1$7$i;$s1$1$8$i = $s1$1$7$i;
    } else {
     $202 = (($c1$1$7$i) + 1)|0;
     $203 = ($s1$1$7$i|0)<($200|0);
     $$s1$0$8$i = $203 ? $200 : $s1$1$7$i;
     $c1$1$8$i = $202;$s1$1$8$i = $$s1$0$8$i;
    }
    $204 = ((($l3_side) + (($ch*5252)|0)|0) + 15148|0);
    $205 = HEAP32[$204>>2]|0;
    $206 = ($205|0)==(-1);
    if ($206) {
     $c1$1$9$i = $c1$1$8$i;$s1$1$9$i = $s1$1$8$i;
    } else {
     $207 = (($c1$1$8$i) + 1)|0;
     $208 = ($s1$1$8$i|0)<($205|0);
     $$s1$0$9$i = $208 ? $205 : $s1$1$8$i;
     $c1$1$9$i = $207;$s1$1$9$i = $$s1$0$9$i;
    }
    $209 = ((($l3_side) + (($ch*5252)|0)|0) + 15152|0);
    $210 = HEAP32[$209>>2]|0;
    $211 = ($210|0)==(-1);
    if ($211) {
     $c1$1$10$i = $c1$1$9$i;$s1$1$10$i = $s1$1$9$i;
    } else {
     $212 = (($c1$1$9$i) + 1)|0;
     $213 = ($s1$1$9$i|0)<($210|0);
     $$s1$0$10$i = $213 ? $210 : $s1$1$9$i;
     $c1$1$10$i = $212;$s1$1$10$i = $$s1$0$10$i;
    }
    $95 = ((($l3_side) + (($ch*5252)|0)|0) + 15156|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = ($96|0)==(-1);
    if ($97) {
     $c2$1$i = 0;$s2$1$i = 0;
    } else {
     $105 = ($96|0)>(0);
     $$s2$0$i = $105 ? $96 : 0;
     $c2$1$i = 1;$s2$1$i = $$s2$0$i;
    }
    $106 = ((($l3_side) + (($ch*5252)|0)|0) + 15160|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = ($107|0)==(-1);
    if ($108) {
     $c2$1$1$i = $c2$1$i;$s2$1$1$i = $s2$1$i;
    } else {
     $125 = (($c2$1$i) + 1)|0;
     $126 = ($s2$1$i|0)<($107|0);
     $$s2$0$1$i = $126 ? $107 : $s2$1$i;
     $c2$1$1$i = $125;$s2$1$1$i = $$s2$0$1$i;
    }
    $127 = ((($l3_side) + (($ch*5252)|0)|0) + 15164|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = ($128|0)==(-1);
    if ($129) {
     $c2$1$2$i = $c2$1$1$i;$s2$1$2$i = $s2$1$1$i;
    } else {
     $130 = (($c2$1$1$i) + 1)|0;
     $131 = ($s2$1$1$i|0)<($128|0);
     $$s2$0$2$i = $131 ? $128 : $s2$1$1$i;
     $c2$1$2$i = $130;$s2$1$2$i = $$s2$0$2$i;
    }
    $132 = ((($l3_side) + (($ch*5252)|0)|0) + 15168|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = ($133|0)==(-1);
    if ($134) {
     $c2$1$3$i = $c2$1$2$i;$s2$1$3$i = $s2$1$2$i;
    } else {
     $135 = (($c2$1$2$i) + 1)|0;
     $136 = ($s2$1$2$i|0)<($133|0);
     $$s2$0$3$i = $136 ? $133 : $s2$1$2$i;
     $c2$1$3$i = $135;$s2$1$3$i = $$s2$0$3$i;
    }
    $137 = ((($l3_side) + (($ch*5252)|0)|0) + 15172|0);
    $138 = HEAP32[$137>>2]|0;
    $139 = ($138|0)==(-1);
    if ($139) {
     $c2$1$4$i = $c2$1$3$i;$s2$1$4$i = $s2$1$3$i;
    } else {
     $140 = (($c2$1$3$i) + 1)|0;
     $141 = ($s2$1$3$i|0)<($138|0);
     $$s2$0$4$i = $141 ? $138 : $s2$1$3$i;
     $c2$1$4$i = $140;$s2$1$4$i = $$s2$0$4$i;
    }
    $142 = ((($l3_side) + (($ch*5252)|0)|0) + 15176|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = ($143|0)==(-1);
    if ($144) {
     $c2$1$5$i = $c2$1$4$i;$s2$1$5$i = $s2$1$4$i;
    } else {
     $145 = (($c2$1$4$i) + 1)|0;
     $146 = ($s2$1$4$i|0)<($143|0);
     $$s2$0$5$i = $146 ? $143 : $s2$1$4$i;
     $c2$1$5$i = $145;$s2$1$5$i = $$s2$0$5$i;
    }
    $147 = ((($l3_side) + (($ch*5252)|0)|0) + 15180|0);
    $148 = HEAP32[$147>>2]|0;
    $149 = ($148|0)==(-1);
    if ($149) {
     $c2$1$6$i = $c2$1$5$i;$s2$1$6$i = $s2$1$5$i;
    } else {
     $150 = (($c2$1$5$i) + 1)|0;
     $151 = ($s2$1$5$i|0)<($148|0);
     $$s2$0$6$i = $151 ? $148 : $s2$1$5$i;
     $c2$1$6$i = $150;$s2$1$6$i = $$s2$0$6$i;
    }
    $152 = ((($l3_side) + (($ch*5252)|0)|0) + 15184|0);
    $153 = HEAP32[$152>>2]|0;
    $154 = ($153|0)==(-1);
    if ($154) {
     $c2$1$7$i = $c2$1$6$i;$s2$1$7$i = $s2$1$6$i;
    } else {
     $155 = (($c2$1$6$i) + 1)|0;
     $156 = ($s2$1$6$i|0)<($153|0);
     $$s2$0$7$i = $156 ? $153 : $s2$1$6$i;
     $c2$1$7$i = $155;$s2$1$7$i = $$s2$0$7$i;
    }
    $157 = ((($l3_side) + (($ch*5252)|0)|0) + 15188|0);
    $158 = HEAP32[$157>>2]|0;
    $159 = ($158|0)==(-1);
    if ($159) {
     $c2$1$8$i = $c2$1$7$i;$s2$1$8$i = $s2$1$7$i;
    } else {
     $160 = (($c2$1$7$i) + 1)|0;
     $161 = ($s2$1$7$i|0)<($158|0);
     $$s2$0$8$i = $161 ? $158 : $s2$1$7$i;
     $c2$1$8$i = $160;$s2$1$8$i = $$s2$0$8$i;
    }
    $162 = ((($l3_side) + (($ch*5252)|0)|0) + 15192|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ($163|0)==(-1);
    if ($164) {
     $c2$0$lcssa$i = $c2$1$8$i;$s2$0$lcssa$i = $s2$1$8$i;
    } else {
     $165 = (($c2$1$8$i) + 1)|0;
     $166 = ($s2$1$8$i|0)<($163|0);
     $$s2$0$9$i = $166 ? $163 : $s2$1$8$i;
     $c2$0$lcssa$i = $165;$s2$0$lcssa$i = $$s2$0$9$i;
    }
    $103 = ((($l3_side) + (($ch*5252)|0)|0) + 15348|0);
    $104 = ((($l3_side) + (($ch*5252)|0)|0) + 15288|0);
    $i$11$i = 0;
    while(1) {
     $109 = (142280 + ($i$11$i<<2)|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = ($s1$1$10$i|0)<($110|0);
     do {
      if ($111) {
       $112 = (142344 + ($i$11$i<<2)|0);
       $113 = HEAP32[$112>>2]|0;
       $114 = ($s2$0$lcssa$i|0)<($113|0);
       if (!($114)) {
        break;
       }
       $115 = (141488 + ($i$11$i<<2)|0);
       $116 = HEAP32[$115>>2]|0;
       $117 = Math_imul($116, $c1$1$10$i)|0;
       $118 = (141552 + ($i$11$i<<2)|0);
       $119 = HEAP32[$118>>2]|0;
       $120 = Math_imul($119, $c2$0$lcssa$i)|0;
       $121 = (($120) + ($117))|0;
       $122 = HEAP32[$103>>2]|0;
       $123 = ($122|0)>($121|0);
       if (!($123)) {
        break;
       }
       HEAP32[$103>>2] = $121;
       HEAP32[$104>>2] = $i$11$i;
      }
     } while(0);
     $124 = (($i$11$i) + 1)|0;
     $exitcond$i = ($124|0)==(16);
     if ($exitcond$i) {
      $recalc$4 = 0;
      break;
     } else {
      $i$11$i = $124;
     }
    }
   }
  }
 } else {
  $recalc$4 = $recalc$3;
 }
 $214 = HEAP32[$1>>2]|0;
 $215 = ($214|0)>(0);
 if ($215) {
  $308 = $214;$sfb$54 = 0;
  while(1) {
   $216 = ((((($l3_side) + (($gr*10504)|0)|0) + (($ch*5252)|0)|0) + ($sfb$54<<2)|0) + 4608|0);
   $217 = HEAP32[$216>>2]|0;
   $218 = ($217|0)==(-2);
   if ($218) {
    HEAP32[$216>>2] = 0;
    $$pre39 = HEAP32[$1>>2]|0;
    $221 = $$pre39;
   } else {
    $221 = $308;
   }
   $219 = (($sfb$54) + 1)|0;
   $220 = ($219|0)<($221|0);
   if ($220) {
    $308 = $221;$sfb$54 = $219;
   } else {
    break;
   }
  }
 }
 $222 = ($recalc$4|0)==(0);
 if ($222) {
  STACKTOP = sp;return;
 }
 (_scale_bitcount($gfc,$0)|0);
 STACKTOP = sp;return;
}
function _scale_bitcount($gfc,$cod_info) {
 $gfc = $gfc|0;
 $cod_info = $cod_info|0;
 var $$$i = 0, $$$i1 = 0, $$0 = 0, $$max_slen1$0$i = 0, $$max_slen2$0$i = 0, $$over$0$1$i = 0, $$over$0$2$i = 0, $$over$0$3$i = 0, $$phi$trans$insert26$i = 0, $$phi$trans$insert28$i = 0, $$phi$trans$insert30$i = 0, $$pre$i = 0, $$pre25$i = 0, $$pre27$i = 0, $$pre29$i = 0, $$pre31$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond$i = 0, $exitcond$i5 = 0, $exitcond12 = 0, $exitcond21$1$i = 0, $exitcond21$2$i = 0, $exitcond21$3$i = 0, $exitcond21$i = 0, $i$16$i = 0, $i$211$1$i = 0, $i$211$2$i = 0, $i$211$3$i = 0;
 var $k$01$i = 0, $max_sfac$i = 0, $max_slen1$0$lcssa$i = 0, $max_slen1$05$i = 0, $max_slen2$0$lcssa$i = 0, $max_slen2$03$i = 0, $partition$010$i = 0, $row_in_table$0$i = 0, $sfb$0$lcssa$i = 0, $sfb$012$i = 0, $sfb$09$i = 0, $sfb$1$lcssa$i = 0, $sfb$17$i = 0, $sfb$2$lcssa$i = 0, $sfb$24$i = 0, $sfb$3$lcssa$1$i = 0, $sfb$3$lcssa$2$i = 0, $sfb$3$lcssa$i = 0, $sfb$312$1$i = 0, $sfb$312$2$i = 0;
 var $sfb$312$3$i = 0, $sfb$312$i = 0, $sfb$32$i = 0, $smax$i = 0, $smax$i2 = 0, $tab$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $max_sfac$i = sp;
 $0 = (($gfc) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(2);
 if ($2) {
  $3 = (($cod_info) + 4788|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(2);
  if ($5) {
   $6 = (($cod_info) + 4792|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)!=(0);
   $$$i = $8 ? 142152 : 142088;
   $tab$0$i = $$$i;
  } else {
   $9 = (($cod_info) + 4832|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(0);
   if ($11) {
    $sfb$012$i = 11;
    while(1) {
     $14 = ((($cod_info) + ($sfb$012$i<<2)|0) + 4608|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = (64904 + ($sfb$012$i<<2)|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = ($15|0)<($17|0);
     $13 = (($sfb$012$i) + 1)|0;
     if ($18) {
      $sfb$0$lcssa$i = $sfb$012$i;
      break;
     }
     $12 = ($13|0)<(21);
     if ($12) {
      $sfb$012$i = $13;
     } else {
      $sfb$0$lcssa$i = $13;
      break;
     }
    }
    $19 = ($sfb$0$lcssa$i|0)==(21);
    if ($19) {
     HEAP32[$9>>2] = 1;
     $20 = HEAP32[((64904 + 44|0))>>2]|0;
     $21 = (($cod_info) + 4652|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = (($22) - ($20))|0;
     HEAP32[$21>>2] = $23;
     $24 = HEAP32[((64904 + 48|0))>>2]|0;
     $25 = (($cod_info) + 4656|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = (($26) - ($24))|0;
     HEAP32[$25>>2] = $27;
     $28 = HEAP32[((64904 + 52|0))>>2]|0;
     $29 = (($cod_info) + 4660|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = (($30) - ($28))|0;
     HEAP32[$29>>2] = $31;
     $32 = HEAP32[((64904 + 56|0))>>2]|0;
     $33 = (($cod_info) + 4664|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = (($34) - ($32))|0;
     HEAP32[$33>>2] = $35;
     $36 = HEAP32[((64904 + 60|0))>>2]|0;
     $37 = (($cod_info) + 4668|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = (($38) - ($36))|0;
     HEAP32[$37>>2] = $39;
     $40 = HEAP32[((64904 + 64|0))>>2]|0;
     $41 = (($cod_info) + 4672|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = (($42) - ($40))|0;
     HEAP32[$41>>2] = $43;
     $44 = HEAP32[((64904 + 68|0))>>2]|0;
     $45 = (($cod_info) + 4676|0);
     $46 = HEAP32[$45>>2]|0;
     $47 = (($46) - ($44))|0;
     HEAP32[$45>>2] = $47;
     $48 = HEAP32[((64904 + 72|0))>>2]|0;
     $49 = (($cod_info) + 4680|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = (($50) - ($48))|0;
     HEAP32[$49>>2] = $51;
     $52 = HEAP32[((64904 + 76|0))>>2]|0;
     $53 = (($cod_info) + 4684|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = (($54) - ($52))|0;
     HEAP32[$53>>2] = $55;
     $56 = HEAP32[((64904 + 80|0))>>2]|0;
     $57 = (($cod_info) + 4688|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = (($58) - ($56))|0;
     HEAP32[$57>>2] = $59;
     $tab$0$i = 142216;
    } else {
     $tab$0$i = 142216;
    }
   } else {
    $tab$0$i = 142216;
   }
  }
  $60 = (($cod_info) + 4868|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ($61|0)>(0);
  if ($62) {
   $max_slen1$05$i = 0;$sfb$24$i = 0;
   while(1) {
    $67 = ((($cod_info) + ($sfb$24$i<<2)|0) + 4608|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = ($max_slen1$05$i|0)<($68|0);
    $$max_slen1$0$i = $69 ? $68 : $max_slen1$05$i;
    $70 = (($sfb$24$i) + 1)|0;
    $exitcond12 = ($70|0)==($61|0);
    if ($exitcond12) {
     break;
    } else {
     $max_slen1$05$i = $$max_slen1$0$i;$sfb$24$i = $70;
    }
   }
   $63 = ($61|0)>(1);
   $smax$i = $63 ? $61 : 1;
   $max_slen1$0$lcssa$i = $$max_slen1$0$i;$sfb$2$lcssa$i = $smax$i;
  } else {
   $max_slen1$0$lcssa$i = 0;$sfb$2$lcssa$i = 0;
  }
  $64 = (($cod_info) + 4860|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = ($sfb$2$lcssa$i|0)<($65|0);
  if ($66) {
   $max_slen2$03$i = 0;$sfb$32$i = $sfb$2$lcssa$i;
   while(1) {
    $71 = ((($cod_info) + ($sfb$32$i<<2)|0) + 4608|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ($max_slen2$03$i|0)<($72|0);
    $$max_slen2$0$i = $73 ? $72 : $max_slen2$03$i;
    $74 = (($sfb$32$i) + 1)|0;
    $exitcond = ($74|0)==($65|0);
    if ($exitcond) {
     $max_slen2$0$lcssa$i = $$max_slen2$0$i;
     break;
    } else {
     $max_slen2$03$i = $$max_slen2$0$i;$sfb$32$i = $74;
    }
   }
  } else {
   $max_slen2$0$lcssa$i = 0;
  }
  $75 = (($cod_info) + 4844|0);
  HEAP32[$75>>2] = 100000;
  $76 = (($cod_info) + 4784|0);
  $86 = 100000;$k$01$i = 0;
  while(1) {
   $77 = (142280 + ($k$01$i<<2)|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = ($max_slen1$0$lcssa$i|0)<($78|0);
   if ($79) {
    $80 = (142344 + ($k$01$i<<2)|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = ($max_slen2$0$lcssa$i|0)<($81|0);
    if ($82) {
     $83 = (($tab$0$i) + ($k$01$i<<2)|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = ($86|0)>($84|0);
     if ($85) {
      HEAP32[$75>>2] = $84;
      HEAP32[$76>>2] = $k$01$i;
      $89 = $84;
     } else {
      $89 = $86;
     }
    } else {
     $89 = $86;
    }
   } else {
    $89 = $86;
   }
   $87 = (($k$01$i) + 1)|0;
   $exitcond$i = ($87|0)==(16);
   if ($exitcond$i) {
    break;
   } else {
    $86 = $89;$k$01$i = $87;
   }
  }
  $88 = ($89|0)==(100000);
  $90 = $88&1;
  $$0 = $90;
  STACKTOP = sp;return ($$0|0);
 }
 $91 = (($cod_info) + 4832|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = ($92|0)==(0);
 ;HEAP32[$max_sfac$i+0>>2]=0|0;HEAP32[$max_sfac$i+4>>2]=0|0;HEAP32[$max_sfac$i+8>>2]=0|0;HEAP32[$max_sfac$i+12>>2]=0|0;
 $$$i1 = $93 ? 0 : 2;
 $94 = (($cod_info) + 4788|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = ($95|0)==(2);
 if ($96) {
  $partition$010$i = 0;$sfb$09$i = 0;
  while(1) {
   $100 = (((64616 + (($$$i1*48)|0)|0) + ($partition$010$i<<2)|0) + 16|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = (($101|0) / 3)&-1;
   $103 = ($101|0)>(2);
   if ($103) {
    $104 = (($max_sfac$i) + ($partition$010$i<<2)|0);
    $105 = ($102|0)>(1);
    $$pre$i = HEAP32[$104>>2]|0;
    $110 = $$pre$i;$i$16$i = 0;$sfb$17$i = $sfb$09$i;
    while(1) {
     $106 = ($sfb$17$i*3)|0;
     $107 = ((($cod_info) + ($106<<2)|0) + 4608|0);
     $108 = HEAP32[$107>>2]|0;
     $109 = ($108|0)>($110|0);
     if ($109) {
      HEAP32[$104>>2] = $108;
      $115 = $108;
     } else {
      $115 = $110;
     }
     $111 = (($106) + 1)|0;
     $112 = ((($cod_info) + ($111<<2)|0) + 4608|0);
     $113 = HEAP32[$112>>2]|0;
     $114 = ($113|0)>($115|0);
     if ($114) {
      HEAP32[$104>>2] = $113;
      $191 = $113;
     } else {
      $191 = $115;
     }
     $187 = (($106) + 2)|0;
     $188 = ((($cod_info) + ($187<<2)|0) + 4608|0);
     $189 = HEAP32[$188>>2]|0;
     $190 = ($189|0)>($191|0);
     if ($190) {
      HEAP32[$104>>2] = $189;
      $227 = $189;
     } else {
      $227 = $191;
     }
     $192 = (($i$16$i) + 1)|0;
     $193 = (($sfb$17$i) + 1)|0;
     $194 = ($192|0)<($102|0);
     if ($194) {
      $110 = $227;$i$16$i = $192;$sfb$17$i = $193;
     } else {
      break;
     }
    }
    $smax$i2 = $105 ? $102 : 1;
    $116 = (($smax$i2) + ($sfb$09$i))|0;
    $sfb$1$lcssa$i = $116;
   } else {
    $sfb$1$lcssa$i = $sfb$09$i;
   }
   $117 = (($partition$010$i) + 1)|0;
   $exitcond$i5 = ($117|0)==(4);
   if ($exitcond$i5) {
    break;
   } else {
    $partition$010$i = $117;$sfb$09$i = $sfb$1$lcssa$i;
   }
  }
  $$pre25$i = HEAP32[$max_sfac$i>>2]|0;
  $$phi$trans$insert26$i = (($max_sfac$i) + 4|0);
  $$pre27$i = HEAP32[$$phi$trans$insert26$i>>2]|0;
  $$phi$trans$insert28$i = (($max_sfac$i) + 8|0);
  $$pre29$i = HEAP32[$$phi$trans$insert28$i>>2]|0;
  $$phi$trans$insert30$i = (($max_sfac$i) + 12|0);
  $$pre31$i = HEAP32[$$phi$trans$insert30$i>>2]|0;
  $129 = $$pre25$i;$134 = $$pre27$i;$139 = $$pre29$i;$144 = $$pre31$i;$row_in_table$0$i = 1;
 } else {
  $97 = (64616 + (($$$i1*48)|0)|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = ($98|0)>(0);
  if ($99) {
   $121 = 0;$sfb$312$i = 0;
   while(1) {
    $118 = ((($cod_info) + ($sfb$312$i<<2)|0) + 4608|0);
    $119 = HEAP32[$118>>2]|0;
    $120 = ($119|0)>($121|0);
    if ($120) {
     HEAP32[$max_sfac$i>>2] = $119;
     $225 = $119;
    } else {
     $225 = $121;
    }
    $122 = (($sfb$312$i) + 1)|0;
    $exitcond21$i = ($122|0)==($98|0);
    if ($exitcond21$i) {
     $224 = $225;$sfb$3$lcssa$i = $98;
     break;
    } else {
     $121 = $225;$sfb$312$i = $122;
    }
   }
  } else {
   $224 = 0;$sfb$3$lcssa$i = 0;
  }
  $123 = ((64616 + (($$$i1*48)|0)|0) + 4|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = ($124|0)>(0);
  if ($125) {
   $195 = (($max_sfac$i) + 4|0);
   $199 = 0;$i$211$1$i = 0;$sfb$312$1$i = $sfb$3$lcssa$i;
   while(1) {
    $196 = ((($cod_info) + ($sfb$312$1$i<<2)|0) + 4608|0);
    $197 = HEAP32[$196>>2]|0;
    $198 = ($197|0)>($199|0);
    if ($198) {
     HEAP32[$195>>2] = $197;
     $228 = $197;
    } else {
     $228 = $199;
    }
    $200 = (($i$211$1$i) + 1)|0;
    $201 = (($sfb$312$1$i) + 1)|0;
    $exitcond21$1$i = ($200|0)==($124|0);
    if ($exitcond21$1$i) {
     break;
    } else {
     $199 = $228;$i$211$1$i = $200;$sfb$312$1$i = $201;
    }
   }
   $202 = (($124) + ($sfb$3$lcssa$i))|0;
   $226 = $228;$sfb$3$lcssa$1$i = $202;
  } else {
   $226 = 0;$sfb$3$lcssa$1$i = $sfb$3$lcssa$i;
  }
  $203 = ((64616 + (($$$i1*48)|0)|0) + 8|0);
  $204 = HEAP32[$203>>2]|0;
  $205 = ($204|0)>(0);
  if ($205) {
   $206 = (($max_sfac$i) + 8|0);
   $210 = 0;$i$211$2$i = 0;$sfb$312$2$i = $sfb$3$lcssa$1$i;
   while(1) {
    $207 = ((($cod_info) + ($sfb$312$2$i<<2)|0) + 4608|0);
    $208 = HEAP32[$207>>2]|0;
    $209 = ($208|0)>($210|0);
    if ($209) {
     HEAP32[$206>>2] = $208;
     $230 = $208;
    } else {
     $230 = $210;
    }
    $211 = (($i$211$2$i) + 1)|0;
    $212 = (($sfb$312$2$i) + 1)|0;
    $exitcond21$2$i = ($211|0)==($204|0);
    if ($exitcond21$2$i) {
     break;
    } else {
     $210 = $230;$i$211$2$i = $211;$sfb$312$2$i = $212;
    }
   }
   $213 = (($204) + ($sfb$3$lcssa$1$i))|0;
   $229 = $230;$sfb$3$lcssa$2$i = $213;
  } else {
   $229 = 0;$sfb$3$lcssa$2$i = $sfb$3$lcssa$1$i;
  }
  $214 = ((64616 + (($$$i1*48)|0)|0) + 12|0);
  $215 = HEAP32[$214>>2]|0;
  $216 = ($215|0)>(0);
  if ($216) {
   $217 = (($max_sfac$i) + 12|0);
   $221 = 0;$i$211$3$i = 0;$sfb$312$3$i = $sfb$3$lcssa$2$i;
   while(1) {
    $218 = ((($cod_info) + ($sfb$312$3$i<<2)|0) + 4608|0);
    $219 = HEAP32[$218>>2]|0;
    $220 = ($219|0)>($221|0);
    if ($220) {
     HEAP32[$217>>2] = $219;
     $231 = $219;
    } else {
     $231 = $221;
    }
    $222 = (($i$211$3$i) + 1)|0;
    $223 = (($sfb$312$3$i) + 1)|0;
    $exitcond21$3$i = ($222|0)==($215|0);
    if ($exitcond21$3$i) {
     $129 = $224;$134 = $226;$139 = $229;$144 = $231;$row_in_table$0$i = 0;
     break;
    } else {
     $221 = $231;$i$211$3$i = $222;$sfb$312$3$i = $223;
    }
   }
  } else {
   $129 = $224;$134 = $226;$139 = $229;$144 = 0;$row_in_table$0$i = 0;
  }
 }
 $126 = (141928 + ($$$i1<<4)|0);
 $127 = HEAP32[$126>>2]|0;
 $128 = ($129|0)>($127|0);
 $130 = $128&1;
 $131 = ((141928 + ($$$i1<<4)|0) + 4|0);
 $132 = HEAP32[$131>>2]|0;
 $133 = ($134|0)>($132|0);
 $135 = $133&1;
 $$over$0$1$i = (($135) + ($130))|0;
 $136 = ((141928 + ($$$i1<<4)|0) + 8|0);
 $137 = HEAP32[$136>>2]|0;
 $138 = ($139|0)>($137|0);
 $140 = $138&1;
 $$over$0$2$i = (($$over$0$1$i) + ($140))|0;
 $141 = ((141928 + ($$$i1<<4)|0) + 12|0);
 $142 = HEAP32[$141>>2]|0;
 $143 = ($144|0)>($142|0);
 $145 = $143&1;
 $$over$0$3$i = (($$over$0$2$i) + ($145))|0;
 $146 = ($$over$0$3$i|0)==(0);
 if (!($146)) {
  $$0 = $$over$0$3$i;
  STACKTOP = sp;return ($$0|0);
 }
 $147 = ((64616 + (($$$i1*48)|0)|0) + ($row_in_table$0$i<<4)|0);
 $148 = (($cod_info) + 5188|0);
 HEAP32[$148>>2] = $147;
 $149 = (142024 + ($129<<2)|0);
 $150 = HEAP32[$149>>2]|0;
 $151 = (($cod_info) + 5192|0);
 HEAP32[$151>>2] = $150;
 $152 = (142024 + ($134<<2)|0);
 $153 = HEAP32[$152>>2]|0;
 $154 = (($cod_info) + 5196|0);
 HEAP32[$154>>2] = $153;
 $155 = (142024 + ($139<<2)|0);
 $156 = HEAP32[$155>>2]|0;
 $157 = (($cod_info) + 5200|0);
 HEAP32[$157>>2] = $156;
 $158 = (142024 + ($144<<2)|0);
 $159 = HEAP32[$158>>2]|0;
 $160 = (($cod_info) + 5204|0);
 HEAP32[$160>>2] = $159;
 if ($93) {
  $161 = ($150*5)|0;
  $162 = (($161) + ($153))|0;
  $163 = $162 << 4;
  $164 = $156 << 2;
  $165 = (($164) + ($163))|0;
  $166 = (($165) + ($159))|0;
  $167 = (($cod_info) + 4784|0);
  HEAP32[$167>>2] = $166;
 } else {
  $168 = ($150*3)|0;
  $169 = (($168) + 500)|0;
  $170 = (($169) + ($153))|0;
  $171 = (($cod_info) + 4784|0);
  HEAP32[$171>>2] = $170;
 }
 $172 = (($cod_info) + 4844|0);
 $173 = HEAP32[$147>>2]|0;
 $174 = Math_imul($173, $150)|0;
 $175 = (((64616 + (($$$i1*48)|0)|0) + ($row_in_table$0$i<<4)|0) + 4|0);
 $176 = HEAP32[$175>>2]|0;
 $177 = Math_imul($176, $153)|0;
 $178 = (($177) + ($174))|0;
 $179 = (((64616 + (($$$i1*48)|0)|0) + ($row_in_table$0$i<<4)|0) + 8|0);
 $180 = HEAP32[$179>>2]|0;
 $181 = Math_imul($180, $156)|0;
 $182 = (($178) + ($181))|0;
 $183 = (((64616 + (($$$i1*48)|0)|0) + ($row_in_table$0$i<<4)|0) + 12|0);
 $184 = HEAP32[$183>>2]|0;
 $185 = Math_imul($184, $159)|0;
 $186 = (($182) + ($185))|0;
 HEAP32[$172>>2] = $186;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _huffman_init($gfc) {
 $gfc = $gfc|0;
 var $$bv_index$0 = 0, $$bv_index$2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bv_index$0 = 0, $bv_index$2 = 0, $i$01 = 0, $scfb_anz$0 = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($gfc) + 85816|0);
 HEAP32[$0>>2] = 2;
 $i$01 = 2;
 while(1) {
  $scfb_anz$0 = 0;
  while(1) {
   $1 = (($scfb_anz$0) + 1)|0;
   $2 = ((($gfc) + ($1<<2)|0) + 21360|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)<($i$01|0);
   if ($4) {
    $scfb_anz$0 = $1;
   } else {
    break;
   }
  }
  $5 = (141616 + ($1<<3)|0);
  $6 = HEAP32[$5>>2]|0;
  $bv_index$0 = $6;
  while(1) {
   $7 = (($bv_index$0) + 1)|0;
   $8 = ((($gfc) + ($7<<2)|0) + 21360|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)>($i$01|0);
   $11 = (($bv_index$0) + -1)|0;
   if ($10) {
    $bv_index$0 = $11;
   } else {
    break;
   }
  }
  $12 = ($bv_index$0|0)<(0);
  $$bv_index$0 = $12 ? $6 : $bv_index$0;
  $13 = $$bv_index$0&255;
  $14 = (($i$01) + -2)|0;
  $15 = ((($gfc) + ($14)|0) + 85100|0);
  HEAP8[$15>>0] = $13;
  $16 = ((141616 + ($1<<3)|0) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $sext = $$bv_index$0 << 24;
  $18 = $sext >> 24;
  $bv_index$2 = $17;
  while(1) {
   $19 = (($bv_index$2) + 2)|0;
   $20 = (($19) + ($18))|0;
   $21 = ((($gfc) + ($20<<2)|0) + 21360|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)>($i$01|0);
   $24 = (($bv_index$2) + -1)|0;
   if ($23) {
    $bv_index$2 = $24;
   } else {
    break;
   }
  }
  $25 = ($bv_index$2|0)<(0);
  $$bv_index$2 = $25 ? $17 : $bv_index$2;
  $26 = $$bv_index$2&255;
  $27 = (($i$01) + -1)|0;
  $28 = ((($gfc) + ($27)|0) + 85100|0);
  HEAP8[$28>>0] = $26;
  $29 = (($i$01) + 2)|0;
  $30 = ($29|0)<(577);
  if ($30) {
   $i$01 = $29;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _choose_table_nonMMX($ix,$end,$_s) {
 $ix = $ix|0;
 $end = $end|0;
 $_s = $_s|0;
 var $$0 = 0, $$0$i = 0, $$0$i1 = 0, $$2$i = 0, $$max1$0$i = 0, $$op$i = 0, $$sum$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $choice$0$lcssa = 0, $choice$02 = 0;
 var $choice2$0$lcssa = 0, $choice2$04 = 0, $max1$0$i = 0, $max2$0$i = 0, $max2$1$$max1$0$i = 0, $max2$1$i = 0, $sum$0$i = 0, $sum$2$i = 0, $t2$t1$i = 0, $y$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0$i = $ix;$max1$0$i = 0;$max2$0$i = 0;
 while(1) {
  $0 = (($$0$i) + 4|0);
  $1 = HEAP32[$$0$i>>2]|0;
  $2 = (($$0$i) + 8|0);
  $3 = HEAP32[$0>>2]|0;
  $4 = ($max1$0$i|0)<($1|0);
  $$max1$0$i = $4 ? $1 : $max1$0$i;
  $5 = ($max2$0$i|0)<($3|0);
  $max2$1$i = $5 ? $3 : $max2$0$i;
  $6 = ($2>>>0)<($end>>>0);
  if ($6) {
   $$0$i = $2;$max1$0$i = $$max1$0$i;$max2$0$i = $max2$1$i;
  } else {
   break;
  }
 }
 $7 = ($$max1$0$i|0)<($max2$1$i|0);
 $max2$1$$max1$0$i = $7 ? $max2$1$i : $$max1$0$i;
 $8 = ($max2$1$$max1$0$i>>>0)<(16);
 if ($8) {
  $9 = (141800 + ($max2$1$$max1$0$i<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (FUNCTION_TABLE_iiiii[$10 & 7]($ix,$end,$max2$1$$max1$0$i,$_s)|0);
  $$0 = $11;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = ($max2$1$$max1$0$i>>>0)>(8206);
 if ($12) {
  HEAP32[$_s>>2] = 100000;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = (($max2$1$$max1$0$i) + -15)|0;
 $choice2$04 = 24;
 while(1) {
  $16 = ((139552 + ($choice2$04<<4)|0) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17>>>0)<($13>>>0);
  $15 = (($choice2$04) + 1)|0;
  if (!($18)) {
   $choice2$0$lcssa = $choice2$04;
   break;
  }
  $14 = ($15|0)<(32);
  if ($14) {
   $choice2$04 = $15;
  } else {
   $choice2$0$lcssa = $15;
   break;
  }
 }
 $19 = (($choice2$0$lcssa) + -8)|0;
 $20 = ($19|0)<(24);
 L16: do {
  if ($20) {
   $choice$02 = $19;
   while(1) {
    $23 = ((139552 + ($choice$02<<4)|0) + 4|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24>>>0)<($13>>>0);
    $22 = (($choice$02) + 1)|0;
    if (!($25)) {
     $choice$0$lcssa = $choice$02;
     break L16;
    }
    $21 = ($22|0)<(24);
    if ($21) {
     $choice$02 = $22;
    } else {
     $choice$0$lcssa = $22;
     break;
    }
   }
  } else {
   $choice$0$lcssa = $19;
  }
 } while(0);
 $26 = (139552 + ($choice$0$lcssa<<4)|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $27 << 16;
 $29 = (139552 + ($choice2$0$lcssa<<4)|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($28) + ($30))|0;
 $$0$i1 = $ix;$sum$0$i = 0;
 while(1) {
  $32 = (($$0$i1) + 4|0);
  $33 = HEAP32[$$0$i1>>2]|0;
  $34 = (($$0$i1) + 8|0);
  $35 = HEAP32[$32>>2]|0;
  $36 = ($33>>>0)>(14);
  $37 = $36 ? $31 : 0;
  $$sum$0$i = (($37) + ($sum$0$i))|0;
  $38 = ($35>>>0)>(14);
  $39 = $38 ? $31 : 0;
  $y$0$i = $38 ? 15 : $35;
  $$op$i = $33 << 4;
  $40 = $36 ? 240 : $$op$i;
  $41 = (($y$0$i) + ($40))|0;
  $42 = (140096 + ($41<<2)|0);
  $43 = HEAP32[$42>>2]|0;
  $sum$2$i = (($$sum$0$i) + ($43))|0;
  $44 = (($sum$2$i) + ($39))|0;
  $45 = ($34>>>0)<($end>>>0);
  if ($45) {
   $$0$i1 = $34;$sum$0$i = $44;
  } else {
   break;
  }
 }
 $46 = $44 & 65535;
 $47 = $44 >>> 16;
 $48 = ($47>>>0)>($46>>>0);
 $t2$t1$i = $48 ? $choice2$0$lcssa : $choice$0$lcssa;
 $$2$i = $48 ? $46 : $47;
 $49 = HEAP32[$_s>>2]|0;
 $50 = (($49) + ($$2$i))|0;
 HEAP32[$_s>>2] = $50;
 $$0 = $t2$t1$i;
 STACKTOP = sp;return ($$0|0);
}
function _count_bit_null($ix,$end,$max,$s) {
 $ix = $ix|0;
 $end = $end|0;
 $max = $max|0;
 $s = $s|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function _count_bit_noESC($ix,$end,$mx,$s) {
 $ix = $ix|0;
 $end = $end|0;
 $mx = $mx|0;
 $s = $s|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sum1$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((139552 + 28|0))>>2]|0;
 $$0 = $ix;$sum1$0 = 0;
 while(1) {
  $1 = (($$0) + 4|0);
  $2 = HEAP32[$$0>>2]|0;
  $3 = (($$0) + 8|0);
  $4 = HEAP32[$1>>2]|0;
  $5 = $2 << 1;
  $6 = (($5) + ($4))|0;
  $7 = (($0) + ($6)|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = $8&255;
  $10 = (($9) + ($sum1$0))|0;
  $11 = ($3>>>0)<($end>>>0);
  if ($11) {
   $$0 = $3;$sum1$0 = $10;
  } else {
   break;
  }
 }
 $12 = HEAP32[$s>>2]|0;
 $13 = (($12) + ($10))|0;
 HEAP32[$s>>2] = $13;
 STACKTOP = sp;return 1;
}
function _count_bit_noESC_from2($ix,$end,$max,$s) {
 $ix = $ix|0;
 $end = $end|0;
 $max = $max|0;
 $s = $s|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sum$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($max) + -1)|0;
 $1 = (141864 + ($0<<2)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (139552 + ($2<<4)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($0|0)==(1);
 $6 = $5 ? 141120 : 141160;
 $$0 = $ix;$sum$0 = 0;
 while(1) {
  $7 = (($$0) + 4|0);
  $8 = HEAP32[$$0>>2]|0;
  $9 = (($$0) + 8|0);
  $10 = HEAP32[$7>>2]|0;
  $11 = Math_imul($8, $4)|0;
  $12 = (($11) + ($10))|0;
  $13 = (($6) + ($12<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + ($sum$0))|0;
  $16 = ($9>>>0)<($end>>>0);
  if ($16) {
   $$0 = $9;$sum$0 = $15;
  } else {
   break;
  }
 }
 $17 = $15 & 65535;
 $18 = $15 >>> 16;
 $19 = ($18>>>0)>($17>>>0);
 $$ = $19 ? $17 : $18;
 $20 = $19&1;
 $$1 = (($20) + ($2))|0;
 $21 = HEAP32[$s>>2]|0;
 $22 = (($21) + ($$))|0;
 HEAP32[$s>>2] = $22;
 STACKTOP = sp;return ($$1|0);
}
function _count_bit_noESC_from3($ix,$end,$max,$s) {
 $ix = $ix|0;
 $end = $end|0;
 $max = $max|0;
 $s = $s|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sum1$0 = 0;
 var $sum1$2 = 0, $sum2$0 = 0, $sum3$0 = 0, $t$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($max) + -1)|0;
 $1 = (141864 + ($0<<2)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (139552 + ($2<<4)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((139552 + ($2<<4)|0) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($2) + 1)|0;
 $8 = ((139552 + ($7<<4)|0) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($2) + 2)|0;
 $11 = ((139552 + ($10<<4)|0) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $$0 = $ix;$sum1$0 = 0;$sum2$0 = 0;$sum3$0 = 0;
 while(1) {
  $13 = (($$0) + 4|0);
  $14 = HEAP32[$$0>>2]|0;
  $15 = (($$0) + 8|0);
  $16 = HEAP32[$13>>2]|0;
  $17 = Math_imul($14, $4)|0;
  $18 = (($17) + ($16))|0;
  $19 = (($6) + ($18)|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  $22 = (($21) + ($sum1$0))|0;
  $23 = (($9) + ($18)|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24&255;
  $26 = (($25) + ($sum2$0))|0;
  $27 = (($12) + ($18)|0);
  $28 = HEAP8[$27>>0]|0;
  $29 = $28&255;
  $30 = (($29) + ($sum3$0))|0;
  $31 = ($15>>>0)<($end>>>0);
  if ($31) {
   $$0 = $15;$sum1$0 = $22;$sum2$0 = $26;$sum3$0 = $30;
  } else {
   break;
  }
 }
 $32 = ($22>>>0)>($26>>>0);
 $$ = $32 ? $7 : $2;
 $$1 = $32 ? $26 : $22;
 $33 = ($$1>>>0)>($30>>>0);
 $t$1 = $33 ? $10 : $$;
 $sum1$2 = $33 ? $30 : $$1;
 $34 = HEAP32[$s>>2]|0;
 $35 = (($34) + ($sum1$2))|0;
 HEAP32[$s>>2] = $35;
 STACKTOP = sp;return ($t$1|0);
}
function _quantize_lines_xrpow($l,$istep,$xp,$pi) {
 $l = $l|0;
 $istep = +$istep;
 $xp = $xp|0;
 $pi = $pi|0;
 var $$01$lcssa = 0, $$013 = 0, $$04 = 0, $0 = 0, $1 = 0, $10 = 0.0, $100 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0;
 var $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0;
 var $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0.0;
 var $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0.0;
 var $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, $fi$0$lcssa = 0, $fi$02 = 0, $scevgep = 0, $scevgep7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $l & 2;
 $1 = $l >>> 2;
 $2 = ($1|0)==(0);
 if ($2) {
  $$01$lcssa = $xp;$fi$0$lcssa = $pi;
 } else {
  $3 = $1 << 2;
  $scevgep7 = (($pi) + ($3<<2)|0);
  $$013 = $xp;$$04 = $1;$fi$02 = $pi;
  while(1) {
   $4 = (($$04) + -1)|0;
   $5 = +HEAPF32[$$013>>2];
   $6 = $5 * $istep;
   $7 = $6;
   $8 = (($$013) + 4|0);
   $9 = +HEAPF32[$8>>2];
   $10 = $9 * $istep;
   $11 = $10;
   $12 = (($$013) + 8|0);
   $13 = +HEAPF32[$12>>2];
   $14 = $13 * $istep;
   $15 = $14;
   $16 = (($$013) + 12|0);
   $17 = +HEAPF32[$16>>2];
   $18 = $17 * $istep;
   $19 = $18;
   $20 = $7 + 8388608.0;
   $21 = $20;
   $22 = $11 + 8388608.0;
   $23 = $22;
   $24 = (($fi$02) + 4|0);
   $25 = $15 + 8388608.0;
   $26 = $25;
   $27 = (($fi$02) + 8|0);
   $28 = $19 + 8388608.0;
   $29 = $28;
   $30 = (($fi$02) + 12|0);
   $31 = (HEAPF32[tempDoublePtr>>2]=$21,HEAP32[tempDoublePtr>>2]|0);
   $32 = (($31) + -1258291200)|0;
   $33 = (99664 + ($32<<2)|0);
   $34 = +HEAPF32[$33>>2];
   $35 = $34;
   $36 = $20 + $35;
   $37 = $36;
   $38 = (HEAPF32[tempDoublePtr>>2]=$23,HEAP32[tempDoublePtr>>2]|0);
   $39 = (($38) + -1258291200)|0;
   $40 = (99664 + ($39<<2)|0);
   $41 = +HEAPF32[$40>>2];
   $42 = $41;
   $43 = $22 + $42;
   $44 = $43;
   $45 = (HEAPF32[tempDoublePtr>>2]=$26,HEAP32[tempDoublePtr>>2]|0);
   $46 = (($45) + -1258291200)|0;
   $47 = (99664 + ($46<<2)|0);
   $48 = +HEAPF32[$47>>2];
   $49 = $48;
   $50 = $25 + $49;
   $51 = $50;
   $52 = (HEAPF32[tempDoublePtr>>2]=$29,HEAP32[tempDoublePtr>>2]|0);
   $53 = (($52) + -1258291200)|0;
   $54 = (99664 + ($53<<2)|0);
   $55 = +HEAPF32[$54>>2];
   $56 = $55;
   $57 = $28 + $56;
   $58 = $57;
   $59 = (HEAPF32[tempDoublePtr>>2]=$37,HEAP32[tempDoublePtr>>2]|0);
   $60 = (($59) + -1258291200)|0;
   HEAP32[$fi$02>>2] = $60;
   $61 = (HEAPF32[tempDoublePtr>>2]=$44,HEAP32[tempDoublePtr>>2]|0);
   $62 = (($61) + -1258291200)|0;
   HEAP32[$24>>2] = $62;
   $63 = (HEAPF32[tempDoublePtr>>2]=$51,HEAP32[tempDoublePtr>>2]|0);
   $64 = (($63) + -1258291200)|0;
   HEAP32[$27>>2] = $64;
   $65 = (HEAPF32[tempDoublePtr>>2]=$58,HEAP32[tempDoublePtr>>2]|0);
   $66 = (($65) + -1258291200)|0;
   HEAP32[$30>>2] = $66;
   $67 = (($fi$02) + 16|0);
   $68 = (($$013) + 16|0);
   $69 = ($4|0)==(0);
   if ($69) {
    break;
   } else {
    $$013 = $68;$$04 = $4;$fi$02 = $67;
   }
  }
  $scevgep = (($xp) + ($3<<2)|0);
  $$01$lcssa = $scevgep;$fi$0$lcssa = $scevgep7;
 }
 $70 = ($0|0)==(0);
 if ($70) {
  STACKTOP = sp;return;
 }
 $71 = +HEAPF32[$$01$lcssa>>2];
 $72 = $71 * $istep;
 $73 = $72;
 $74 = (($$01$lcssa) + 4|0);
 $75 = +HEAPF32[$74>>2];
 $76 = $75 * $istep;
 $77 = $76;
 $78 = $73 + 8388608.0;
 $79 = $78;
 $80 = $77 + 8388608.0;
 $81 = $80;
 $82 = (($fi$0$lcssa) + 4|0);
 $83 = (HEAPF32[tempDoublePtr>>2]=$79,HEAP32[tempDoublePtr>>2]|0);
 $84 = (($83) + -1258291200)|0;
 $85 = (99664 + ($84<<2)|0);
 $86 = +HEAPF32[$85>>2];
 $87 = $86;
 $88 = $78 + $87;
 $89 = $88;
 $90 = (HEAPF32[tempDoublePtr>>2]=$81,HEAP32[tempDoublePtr>>2]|0);
 $91 = (($90) + -1258291200)|0;
 $92 = (99664 + ($91<<2)|0);
 $93 = +HEAPF32[$92>>2];
 $94 = $93;
 $95 = $80 + $94;
 $96 = $95;
 $97 = (HEAPF32[tempDoublePtr>>2]=$89,HEAP32[tempDoublePtr>>2]|0);
 $98 = (($97) + -1258291200)|0;
 HEAP32[$fi$0$lcssa>>2] = $98;
 $99 = (HEAPF32[tempDoublePtr>>2]=$96,HEAP32[tempDoublePtr>>2]|0);
 $100 = (($99) + -1258291200)|0;
 HEAP32[$82>>2] = $100;
 STACKTOP = sp;return;
}
function _free_id3tag($gfc) {
 $gfc = $gfc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $node$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($gfc) + 85704|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  _free($1);
  HEAP32[$0>>2] = 0;
 }
 $3 = (($gfc) + 85708|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  _free($4);
  HEAP32[$3>>2] = 0;
 }
 $6 = (($gfc) + 85712|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  _free($7);
  HEAP32[$6>>2] = 0;
 }
 $9 = (($gfc) + 85716|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 if (!($11)) {
  _free($10);
  HEAP32[$9>>2] = 0;
 }
 $12 = (($gfc) + 85728|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0|0);
 if (!($14)) {
  _free($13);
  HEAP32[$12>>2] = 0;
  $15 = (($gfc) + 85732|0);
  HEAP32[$15>>2] = 0;
  $16 = (($gfc) + 85740|0);
  HEAP32[$16>>2] = 0;
 }
 $17 = (($gfc) + 85744|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0|0);
 if ($19) {
  STACKTOP = sp;return;
 } else {
  $node$0 = $18;
 }
 while(1) {
  $20 = (($node$0) + 12|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($node$0) + 24|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = HEAP32[$node$0>>2]|0;
  _free($21);
  _free($23);
  _free($node$0);
  $25 = ($24|0)==(0|0);
  if ($25) {
   break;
  } else {
   $node$0 = $24;
  }
 }
 HEAP32[$17>>2] = 0;
 $26 = (($gfc) + 85748|0);
 HEAP32[$26>>2] = 0;
 STACKTOP = sp;return;
}
function _freegfc($gfc) {
 $gfc = $gfc|0;
 var $$pre$i = 0, $$pre1$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $i$01 = 0;
 while(1) {
  $0 = ((($gfc) + ($i$01<<2)|0) + 37192|0);
  $1 = HEAP32[$0>>2]|0;
  $2 = ($1|0)==(0|0);
  if (!($2)) {
   _free($1);
   HEAP32[$0>>2] = 0;
  }
  $3 = (($i$01) + 1)|0;
  $exitcond = ($3|0)==(641);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $3;
  }
 }
 $4 = (($gfc) + 37184|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  _free($5);
  HEAP32[$4>>2] = 0;
 }
 $7 = (($gfc) + 37188|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  _free($8);
  HEAP32[$7>>2] = 0;
 }
 $10 = (($gfc) + 284|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  _free($11);
  HEAP32[$10>>2] = 0;
 }
 $13 = (($gfc) + 85780|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(0|0);
 if (!($15)) {
  _free($14);
  HEAP32[$13>>2] = 0;
  $16 = (($gfc) + 85776|0);
  HEAP32[$16>>2] = 0;
 }
 $17 = (($gfc) + 85796|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0|0);
 if (!($19)) {
  _free($18);
 }
 $20 = (($gfc) + 85676|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(0|0);
 if (!($22)) {
  _free($21);
 }
 $23 = (($gfc) + 52152|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0|0);
 if (!($25)) {
  _free($24);
 }
 $26 = (($gfc) + 52156|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)==(0|0);
 if (!($28)) {
  _free($27);
 }
 _free_id3tag($gfc);
 $29 = (($gfc) + 85808|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)==(0|0);
 if ($31) {
  $32 = ($gfc|0)==(0|0);
  if ($32) {
   _free($gfc);
   STACKTOP = sp;return;
  }
 } else {
  (_hip_decode_exit($30)|0);
  HEAP32[$29>>2] = 0;
 }
 $33 = (($gfc) + 85800|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ($34|0)==(0|0);
 if ($35) {
  _free($gfc);
  STACKTOP = sp;return;
 }
 $36 = (($34) + 2156|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($37|0)==(0|0);
 if ($38) {
  $40 = $34;
 } else {
  _free($37);
  $$pre$i = HEAP32[$33>>2]|0;
  $40 = $$pre$i;
 }
 $39 = (($40) + 4316|0);
 $41 = HEAP32[$39>>2]|0;
 $42 = ($41|0)==(0|0);
 if ($42) {
  $43 = $40;
 } else {
  _free($41);
  $$pre1$i = HEAP32[$33>>2]|0;
  $43 = $$pre1$i;
 }
 _free($43);
 _free($gfc);
 STACKTOP = sp;return;
}
function _malloc_aligned($ptr,$size,$bytes) {
 $ptr = $ptr|0;
 $size = $size|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ptr|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (($ptr) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = (($bytes) + ($size))|0;
 $5 = (_malloc($4)|0);
 HEAP32[$1>>2] = $5;
 $6 = ($bytes|0)==(0);
 if ($6) {
  HEAP32[$ptr>>2] = $5;
  STACKTOP = sp;return;
 } else {
  $7 = $5;
  $8 = (($bytes) + -1)|0;
  $9 = (($8) + ($7))|0;
  $10 = (($9>>>0) % ($bytes>>>0))&-1;
  $11 = (($9) - ($10))|0;
  $12 = $11;
  HEAP32[$ptr>>2] = $12;
  STACKTOP = sp;return;
 }
}
function _free_aligned($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ptr|0)==(0|0);
 if (!($0)) {
  $1 = (($ptr) + 4|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   _free($2);
   HEAP32[$1>>2] = 0;
   HEAP32[$ptr>>2] = 0;
  }
 }
 STACKTOP = sp;return;
}
function _ATHformula($cfg,$f) {
 $cfg = $cfg|0;
 $f = +$f;
 var $0 = 0, $1 = 0, $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0.0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0;
 var $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0, $132 = 0.0, $133 = 0;
 var $134 = 0.0, $135 = 0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0.0, $150 = 0.0, $151 = 0.0;
 var $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0, $159 = 0.0, $16 = 0.0, $160 = 0, $161 = 0.0, $162 = 0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0.0;
 var $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0;
 var $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0;
 var $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0;
 var $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0.0;
 var $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0;
 var $99 = 0, $ath$0 = 0.0, $f$op$i = 0.0, $f$op$i1 = 0.0, $f$op$i10 = 0.0, $f$op$i13 = 0.0, $f$op$i16 = 0.0, $f$op$i4 = 0.0, $f$op$i7 = 0.0, $pow2$i = 0.0, $pow2$i11 = 0.0, $pow2$i14 = 0.0, $pow2$i17 = 0.0, $pow2$i2 = 0.0, $pow2$i5 = 0.0, $pow2$i8 = 0.0, $pow21$i = 0.0, $pow21$i12 = 0.0, $pow21$i15 = 0.0, $pow21$i18 = 0.0;
 var $pow21$i3 = 0.0, $pow21$i6 = 0.0, $pow21$i9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($cfg) + 192|0);
 $1 = HEAP32[$0>>2]|0;
 switch ($1|0) {
 case 0:  {
  $2 = $f;
  $3 = $2 < -0.299999999999999988898;
  $f$op$i = $f * 0.00100000004749745130539;
  $4 = $3 ? 3.41000008583068847656 : $f$op$i;
  $5 = $4 < 0.100000001490116119385;
  $6 = $5 ? 0.100000001490116119385 : $4;
  $7 = $6 > 24.0;
  $8 = $6;
  $9 = $7 ? 24.0 : $8;
  $10 = (+Math_pow((+$9),-0.800000000000000044408));
  $11 = $10 * 3.64000000000000012434;
  $12 = $9 + -3.39999999999999991118;
  $pow2$i = $12 * $12;
  $13 = $pow2$i * -0.599999999999999977796;
  $14 = (+Math_exp((+$13)));
  $15 = $14 * 6.79999999999999982236;
  $16 = $11 - $15;
  $17 = $9 + -8.69999999999999928946;
  $pow21$i = $17 * $17;
  $18 = $pow21$i * -0.149999999999999994449;
  $19 = (+Math_exp((+$18)));
  $20 = $19 * 6.0;
  $21 = $16 + $20;
  $22 = (+Math_pow((+$9),4.0));
  $23 = $22 * 9.599999999999999159E-4;
  $24 = $21 + $23;
  $25 = $24;
  $ath$0 = $25;
  STACKTOP = sp;return (+$ath$0);
  break;
 }
 case 2:  {
  $50 = $f;
  $51 = $50 < -0.299999999999999988898;
  $f$op$i4 = $f * 0.00100000004749745130539;
  $52 = $51 ? 3.41000008583068847656 : $f$op$i4;
  $53 = $52 < 0.100000001490116119385;
  $54 = $53 ? 0.100000001490116119385 : $52;
  $55 = $54 > 24.0;
  $56 = $54;
  $57 = $55 ? 24.0 : $56;
  $58 = (+Math_pow((+$57),-0.800000000000000044408));
  $59 = $58 * 3.64000000000000012434;
  $60 = $57 + -3.39999999999999991118;
  $pow2$i5 = $60 * $60;
  $61 = $pow2$i5 * -0.599999999999999977796;
  $62 = (+Math_exp((+$61)));
  $63 = $62 * 6.79999999999999982236;
  $64 = $59 - $63;
  $65 = $57 + -8.69999999999999928946;
  $pow21$i6 = $65 * $65;
  $66 = $pow21$i6 * -0.149999999999999994449;
  $67 = (+Math_exp((+$66)));
  $68 = $67 * 6.0;
  $69 = $64 + $68;
  $70 = (+Math_pow((+$57),4.0));
  $71 = $70 * 5.99999999999999947438E-4;
  $72 = $69 + $71;
  $73 = $72;
  $ath$0 = $73;
  STACKTOP = sp;return (+$ath$0);
  break;
 }
 case 1:  {
  $26 = $f;
  $27 = $26 < -0.299999999999999988898;
  $f$op$i1 = $f * 0.00100000004749745130539;
  $28 = $27 ? 3.41000008583068847656 : $f$op$i1;
  $29 = $28 < 0.100000001490116119385;
  $30 = $29 ? 0.100000001490116119385 : $28;
  $31 = $30 > 24.0;
  $32 = $30;
  $33 = $31 ? 24.0 : $32;
  $34 = (+Math_pow((+$33),-0.800000000000000044408));
  $35 = $34 * 3.64000000000000012434;
  $36 = $33 + -3.39999999999999991118;
  $pow2$i2 = $36 * $36;
  $37 = $pow2$i2 * -0.599999999999999977796;
  $38 = (+Math_exp((+$37)));
  $39 = $38 * 6.79999999999999982236;
  $40 = $35 - $39;
  $41 = $33 + -8.69999999999999928946;
  $pow21$i3 = $41 * $41;
  $42 = $pow21$i3 * -0.149999999999999994449;
  $43 = (+Math_exp((+$42)));
  $44 = $43 * 6.0;
  $45 = $40 + $44;
  $46 = (+Math_pow((+$33),4.0));
  $47 = $46 * 5.59999999999999950942E-4;
  $48 = $45 + $47;
  $49 = $48;
  $ath$0 = $49;
  STACKTOP = sp;return (+$ath$0);
  break;
 }
 case 3:  {
  $74 = $f;
  $75 = $74 < -0.299999999999999988898;
  $f$op$i7 = $f * 0.00100000004749745130539;
  $76 = $75 ? 3.41000008583068847656 : $f$op$i7;
  $77 = $76 < 0.100000001490116119385;
  $78 = $77 ? 0.100000001490116119385 : $76;
  $79 = $78 > 24.0;
  $80 = $78;
  $81 = $79 ? 24.0 : $80;
  $82 = (+Math_pow((+$81),-0.800000000000000044408));
  $83 = $82 * 3.64000000000000012434;
  $84 = $81 + -3.39999999999999991118;
  $pow2$i8 = $84 * $84;
  $85 = $pow2$i8 * -0.599999999999999977796;
  $86 = (+Math_exp((+$85)));
  $87 = $86 * 6.79999999999999982236;
  $88 = $83 - $87;
  $89 = $81 + -8.69999999999999928946;
  $pow21$i9 = $89 * $89;
  $90 = $pow21$i9 * -0.149999999999999994449;
  $91 = (+Math_exp((+$90)));
  $92 = $91 * 6.0;
  $93 = $88 + $92;
  $94 = (+Math_pow((+$81),4.0));
  $95 = $94 * 6.39999999999999943934E-4;
  $96 = $93 + $95;
  $97 = $96;
  $98 = $97 + 6.0;
  $ath$0 = $98;
  STACKTOP = sp;return (+$ath$0);
  break;
 }
 case 5:  {
  $128 = (($cfg) + 188|0);
  $129 = +HEAPF32[$128>>2];
  $130 = $f;
  $131 = $130 < -0.299999999999999988898;
  $f$op$i13 = $f * 0.00100000004749745130539;
  $132 = $131 ? 3.41000008583068847656 : $f$op$i13;
  $133 = $132 < 3.41000008583068847656;
  $134 = $133 ? 3.41000008583068847656 : $132;
  $135 = $134 > 16.1000003814697265625;
  $136 = $134;
  $137 = $135 ? 16.1000003814697265625 : $136;
  $138 = (+Math_pow((+$137),-0.800000000000000044408));
  $139 = $138 * 3.64000000000000012434;
  $140 = $137 + -3.39999999999999991118;
  $pow2$i14 = $140 * $140;
  $141 = $pow2$i14 * -0.599999999999999977796;
  $142 = (+Math_exp((+$141)));
  $143 = $142 * 6.79999999999999982236;
  $144 = $139 - $143;
  $145 = $137 + -8.69999999999999928946;
  $pow21$i15 = $145 * $145;
  $146 = $pow21$i15 * -0.149999999999999994449;
  $147 = (+Math_exp((+$146)));
  $148 = $147 * 6.0;
  $149 = $144 + $148;
  $150 = $129;
  $151 = $150 * 4.00000000000000032721E-5;
  $152 = $151 + 5.99999999999999947438E-4;
  $153 = (+Math_pow((+$137),4.0));
  $154 = $152 * $153;
  $155 = $149 + $154;
  $156 = $155;
  $ath$0 = $156;
  STACKTOP = sp;return (+$ath$0);
  break;
 }
 case 4:  {
  $99 = (($cfg) + 188|0);
  $100 = +HEAPF32[$99>>2];
  $101 = $f;
  $102 = $101 < -0.299999999999999988898;
  $f$op$i10 = $f * 0.00100000004749745130539;
  $103 = $102 ? 3.41000008583068847656 : $f$op$i10;
  $104 = $103 < 0.100000001490116119385;
  $105 = $104 ? 0.100000001490116119385 : $103;
  $106 = $105 > 24.0;
  $107 = $105;
  $108 = $106 ? 24.0 : $107;
  $109 = (+Math_pow((+$108),-0.800000000000000044408));
  $110 = $109 * 3.64000000000000012434;
  $111 = $108 + -3.39999999999999991118;
  $pow2$i11 = $111 * $111;
  $112 = $pow2$i11 * -0.599999999999999977796;
  $113 = (+Math_exp((+$112)));
  $114 = $113 * 6.79999999999999982236;
  $115 = $110 - $114;
  $116 = $108 + -8.69999999999999928946;
  $pow21$i12 = $116 * $116;
  $117 = $pow21$i12 * -0.149999999999999994449;
  $118 = (+Math_exp((+$117)));
  $119 = $118 * 6.0;
  $120 = $115 + $119;
  $121 = $100;
  $122 = $121 * 4.00000000000000032721E-5;
  $123 = $122 + 5.99999999999999947438E-4;
  $124 = (+Math_pow((+$108),4.0));
  $125 = $123 * $124;
  $126 = $120 + $125;
  $127 = $126;
  $ath$0 = $127;
  STACKTOP = sp;return (+$ath$0);
  break;
 }
 default: {
  $157 = $f;
  $158 = $157 < -0.299999999999999988898;
  $f$op$i16 = $f * 0.00100000004749745130539;
  $159 = $158 ? 3.41000008583068847656 : $f$op$i16;
  $160 = $159 < 0.100000001490116119385;
  $161 = $160 ? 0.100000001490116119385 : $159;
  $162 = $161 > 24.0;
  $163 = $161;
  $164 = $162 ? 24.0 : $163;
  $165 = (+Math_pow((+$164),-0.800000000000000044408));
  $166 = $165 * 3.64000000000000012434;
  $167 = $164 + -3.39999999999999991118;
  $pow2$i17 = $167 * $167;
  $168 = $pow2$i17 * -0.599999999999999977796;
  $169 = (+Math_exp((+$168)));
  $170 = $169 * 6.79999999999999982236;
  $171 = $166 - $170;
  $172 = $164 + -8.69999999999999928946;
  $pow21$i18 = $172 * $172;
  $173 = $pow21$i18 * -0.149999999999999994449;
  $174 = (+Math_exp((+$173)));
  $175 = $174 * 6.0;
  $176 = $171 + $175;
  $177 = (+Math_pow((+$164),4.0));
  $178 = $177 * 5.99999999999999947438E-4;
  $179 = $176 + $178;
  $180 = $179;
  $ath$0 = $180;
  STACKTOP = sp;return (+$ath$0);
 }
 }
 return +0;
}
function _freq2bark($freq) {
 $freq = +$freq;
 var $$op = 0.0, $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $freq < 0.0;
 $1 = $freq;
 $$op = $1 * 0.00100000000000000002082;
 $2 = $$op;
 $3 = $0 ? 0.0 : $2;
 $4 = $3;
 $5 = $4 * 0.760000000000000008881;
 $6 = (+Math_atan((+$5)));
 $7 = $6 * 13.0;
 $8 = $3 * $3;
 $9 = $8;
 $10 = $9 * 0.0177777777777777777624;
 $11 = (+Math_atan((+$10)));
 $12 = $11 * 3.5;
 $13 = $7 + $12;
 $14 = $13;
 STACKTOP = sp;return (+$14);
}
function _FindNearestBitrate($bRate,$version,$samplerate) {
 $bRate = $bRate|0;
 $version = $version|0;
 $samplerate = $samplerate|0;
 var $$bitrate$0 = 0, $$version = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bitrate$01 = 0, $bitrate$1 = 0;
 var $exitcond = 0, $i$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($samplerate|0)<(16000);
 $$version = $0 ? 2 : $version;
 $1 = ((141224 + ($$version<<6)|0) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $bitrate$01 = $2;$i$02 = 2;
 while(1) {
  $3 = ((141224 + ($$version<<6)|0) + ($i$02<<2)|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)>(0);
  if ($5) {
   $6 = (($4) - ($bRate))|0;
   $7 = ($6|0)>(0);
   $8 = (0 - ($6))|0;
   $9 = $7 ? $6 : $8;
   $10 = (($bitrate$01) - ($bRate))|0;
   $11 = ($10|0)>(0);
   $12 = (0 - ($10))|0;
   $13 = $11 ? $10 : $12;
   $14 = ($9|0)<($13|0);
   $$bitrate$0 = $14 ? $4 : $bitrate$01;
   $bitrate$1 = $$bitrate$0;
  } else {
   $bitrate$1 = $bitrate$01;
  }
  $15 = (($i$02) + 1)|0;
  $exitcond = ($15|0)==(15);
  if ($exitcond) {
   break;
  } else {
   $bitrate$01 = $bitrate$1;$i$02 = $15;
  }
 }
 STACKTOP = sp;return ($bitrate$1|0);
}
function _nearestBitrateFullIndex($bitrate) {
 $bitrate = $bitrate|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b$0 = 0, $lower_range$0 = 0, $lower_range$0$upper_range$0 = 0, $lower_range_kbps$0 = 0, $upper_range$0 = 0, $upper_range_kbps$0 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = $bitrate&65535;
 $b$0 = 0;
 while(1) {
  $1 = ($b$0|0)<(16);
  if (!($1)) {
   $lower_range$0 = 16;$lower_range_kbps$0 = 320;$upper_range$0 = 16;$upper_range_kbps$0 = 320;
   break;
  }
  $2 = (($b$0) + 1)|0;
  $3 = (142408 + ($2<<2)|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($0|0)>($4|0);
  $$ = $5 ? $0 : $4;
  $6 = ($$|0)==($0|0);
  if ($6) {
   $b$0 = $2;
  } else {
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  $7 = (142408 + ($b$0<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  $lower_range$0 = $b$0;$lower_range_kbps$0 = $8;$upper_range$0 = $2;$upper_range_kbps$0 = $4;
 }
 $9 = (($upper_range_kbps$0) - ($0))|0;
 $10 = (($0) - ($lower_range_kbps$0))|0;
 $11 = ($9|0)>($10|0);
 $lower_range$0$upper_range$0 = $11 ? $lower_range$0 : $upper_range$0;
 STACKTOP = sp;return ($lower_range$0$upper_range$0|0);
}
function _map2MP3Frequency($freq) {
 $freq = $freq|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($freq|0)<(8001);
 if ($0) {
  $$0 = 8000;
 } else {
  $1 = ($freq|0)<(11026);
  if ($1) {
   $$0 = 11025;
  } else {
   $2 = ($freq|0)<(12001);
   if ($2) {
    $$0 = 12000;
   } else {
    $3 = ($freq|0)<(16001);
    if ($3) {
     $$0 = 16000;
    } else {
     $4 = ($freq|0)<(22051);
     if ($4) {
      $$0 = 22050;
     } else {
      $5 = ($freq|0)<(24001);
      if ($5) {
       $$0 = 24000;
      } else {
       $6 = ($freq|0)<(32001);
       if ($6) {
        $$0 = 32000;
       } else {
        $7 = ($freq|0)<(44101);
        $$ = $7 ? 44100 : 48000;
        $$0 = $$;
       }
      }
     }
    }
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _BitrateIndex($bRate,$version,$samplerate) {
 $bRate = $bRate|0;
 $version = $version|0;
 $samplerate = $samplerate|0;
 var $$0 = 0, $$version = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $i$02 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($samplerate|0)<(16000);
 $$version = $0 ? 2 : $version;
 $i$02 = 0;
 while(1) {
  $3 = ((141224 + ($$version<<6)|0) + ($i$02<<2)|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)>(0);
  $6 = ($4|0)==($bRate|0);
  $or$cond = $5 & $6;
  $2 = (($i$02) + 1)|0;
  if ($or$cond) {
   $$0 = $i$02;
   label = 4;
   break;
  }
  $1 = ($2|0)<(15);
  if ($1) {
   $i$02 = $2;
  } else {
   $$0 = -1;
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _SmpFrqIndex($sample_freq,$version) {
 $sample_freq = $sample_freq|0;
 $version = $version|0;
 var $$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 do {
  if ((($sample_freq|0) == 24000)) {
   HEAP32[$version>>2] = 0;
   $$0 = 1;
  } else if ((($sample_freq|0) == 12000)) {
   HEAP32[$version>>2] = 0;
   $$0 = 1;
  } else if ((($sample_freq|0) == 11025)) {
   HEAP32[$version>>2] = 0;
   $$0 = 0;
  } else if ((($sample_freq|0) == 22050)) {
   HEAP32[$version>>2] = 0;
   $$0 = 0;
  } else if ((($sample_freq|0) == 48000)) {
   HEAP32[$version>>2] = 1;
   $$0 = 1;
  } else if ((($sample_freq|0) == 8000)) {
   HEAP32[$version>>2] = 0;
   $$0 = 2;
  } else if ((($sample_freq|0) == 44100)) {
   HEAP32[$version>>2] = 1;
   $$0 = 0;
  } else if ((($sample_freq|0) == 16000)) {
   HEAP32[$version>>2] = 0;
   $$0 = 2;
  } else if ((($sample_freq|0) == 32000)) {
   HEAP32[$version>>2] = 1;
   $$0 = 2;
  } else {
   HEAP32[$version>>2] = 0;
   $$0 = -1;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _isResamplingNecessary($cfg) {
 $cfg = $cfg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($cfg) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (+($1|0));
 $3 = $2 * 0.999499976634979248046;
 $4 = (~~(($3)));
 $5 = (($cfg) + 44|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)<($4|0);
 if ($7) {
  $12 = 1;
  $11 = $12&1;
  STACKTOP = sp;return ($11|0);
 }
 $8 = $2 * 1.00049996376037597656;
 $9 = (~~(($8)));
 $10 = ($9|0)<($6|0);
 $12 = $10;
 $11 = $12&1;
 STACKTOP = sp;return ($11|0);
}
function _fill_buffer($gfc,$mfbuf,$in_buffer,$nsamples,$n_in,$n_out) {
 $gfc = $gfc|0;
 $mfbuf = $mfbuf|0;
 $in_buffer = $in_buffer|0;
 $nsamples = $nsamples|0;
 $n_in = $n_in|0;
 $n_out = $n_out|0;
 var $$$i = 0, $$0$i$i = 0.0, $$0$in$i$i = 0.0, $$01$i$i = 0.0, $$1$i$i = 0.0, $$in$i = 0, $$neg2$i = 0, $$op$i = 0.0, $$op45$i = 0, $$op45$op$i = 0, $$op46$i = 0, $$pre = 0, $$pre$i = 0.0, $$pre$phi44$iZ2D = 0, $$pre41$i = 0.0, $$pre42$i = 0, $$pre43$i = 0, $$pre7 = 0, $$sum = 0, $0 = 0;
 var $1 = 0, $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0.0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0.0, $155 = 0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0.0;
 var $171 = 0.0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0.0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0.0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0;
 var $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0;
 var $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0;
 var $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0;
 var $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $ch$0 = 0, $ch$1 = 0, $exitcond$i = 0, $exitcond32$i = 0, $fabsf$i$i = 0.0, $i$026$i = 0, $i$119$i = 0, $i$220$i = 0, $i$310$i = 0, $i$49$i = 0, $i$5$lcssa$i = 0, $i$55$i = 0, $i$64$i = 0, $i$tr$lcssa$i$i = 0, $i$tr1$i$i = 0;
 var $i$tr1$i$i$phi = 0, $j$0$lcssa$i = 0, $j$021$i = 0, $j$1$i = 0, $j$3$i = 0, $j$43$i = 0, $j$tr2$i$i = 0, $k$0$lcssa$i = 0, $k$012$i = 0, $len$$i = 0, $sum$018$i = 0.0, $xvalue$011$i = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($gfc) + 84036|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($gfc) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3*576)|0;
 $5 = (($gfc) + 72|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($gfc) + 64|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (+($8|0));
 $10 = $9 * 0.999499976634979248046;
 $11 = (~~(($10)));
 $12 = (($gfc) + 60|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)<($11|0);
 if (!($14)) {
  $15 = $9 * 1.00049996376037597656;
  $16 = (~~(($15)));
  $17 = ($16|0)<($13|0);
  if (!($17)) {
   $196 = ($4|0)<($nsamples|0);
   $197 = $196 ? $4 : $nsamples;
   $198 = $197 << 2;
   $ch$1 = 0;
   while(1) {
    $199 = (($mfbuf) + ($ch$1<<2)|0);
    $200 = HEAP32[$199>>2]|0;
    $201 = (($200) + ($1<<2)|0);
    $202 = (($in_buffer) + ($ch$1<<2)|0);
    $203 = HEAP32[$202>>2]|0;
    _memcpy(($201|0),($203|0),($198|0))|0;
    $204 = (($ch$1) + 1)|0;
    $205 = ($204|0)<($6|0);
    if ($205) {
     $ch$1 = $204;
    } else {
     break;
    }
   }
   HEAP32[$n_out>>2] = $197;
   HEAP32[$n_in>>2] = $197;
   STACKTOP = sp;return;
  }
 }
 $18 = (($gfc) + 12|0);
 $19 = (($gfc) + 37184|0);
 $20 = (($gfc) + 37188|0);
 $21 = (($gfc) + 37168|0);
 $22 = ($3|0)>(0);
 $28 = $13;$30 = $8;$ch$0 = 0;
 while(1) {
  $23 = (($mfbuf) + ($ch$0<<2)|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($in_buffer) + ($ch$0<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (+($28|0));
  $29 = (+($30|0));
  $31 = $27 / $29;
  $32 = ($28|0)==(0);
  if ($32) {
   $i$tr$lcssa$i$i = $30;
  } else {
   $i$tr1$i$i = $30;$j$tr2$i$i = $28;
   while(1) {
    $33 = (($i$tr1$i$i|0) % ($j$tr2$i$i|0))&-1;
    $34 = ($33|0)==(0);
    if ($34) {
     $i$tr$lcssa$i$i = $j$tr2$i$i;
     break;
    } else {
     $i$tr1$i$i$phi = $j$tr2$i$i;$j$tr2$i$i = $33;$i$tr1$i$i = $i$tr1$i$i$phi;
    }
   }
  }
  $35 = (($30|0) / ($i$tr$lcssa$i$i|0))&-1;
  $36 = ($35|0)>(320);
  $$$i = $36 ? 320 : $35;
  $37 = $31 + 0.5;
  $38 = (+Math_floor((+$37)));
  $39 = $31 - $38;
  $40 = (+Math_abs((+$39)));
  $41 = $40 < 1.00000000000000004792E-4;
  $42 = 1.0 / $31;
  $43 = $42;
  $44 = $43 > 1.0;
  $45 = $41 ? 32 : 31;
  $46 = (($45) + 1)|0;
  $47 = HEAP32[$18>>2]|0;
  $48 = ($47|0)==(0);
  if ($48) {
   $49 = (_calloc($46,4)|0);
   HEAP32[$19>>2] = $49;
   $50 = (_calloc($46,4)|0);
   HEAP32[$20>>2] = $50;
   $51 = $$$i << 1;
   $52 = ($$$i|0)<(0);
   if ($52) {
    ;HEAP32[$21+0>>2]=0|0;HEAP32[$21+4>>2]=0|0;HEAP32[$21+8>>2]=0|0;HEAP32[$21+12>>2]=0|0;
    $j$0$lcssa$i = 0;
   } else {
    $i$026$i = 0;
    while(1) {
     $53 = (_calloc($46,4)|0);
     $54 = ((($gfc) + ($i$026$i<<2)|0) + 37192|0);
     HEAP32[$54>>2] = $53;
     $55 = (($i$026$i) + 1)|0;
     $56 = ($i$026$i|0)<($51|0);
     if ($56) {
      $i$026$i = $55;
     } else {
      break;
     }
    }
    ;HEAP32[$21+0>>2]=0|0;HEAP32[$21+4>>2]=0|0;HEAP32[$21+8>>2]=0|0;HEAP32[$21+12>>2]=0|0;
    $57 = (+($$$i|0));
    $58 = $57 * 2.0;
    $59 = $43;
    $$op$i = $59 * 3.141592653589793116;
    $60 = $$op$i;
    $61 = $44 ? 3.14159274101257324219 : $60;
    $62 = (+($45|0));
    $63 = $61;
    $64 = $63 * 0.318309886183790691216;
    $65 = $62 * $61;
    $66 = (+($45|0));
    $67 = $66 * 3.141592653589793116;
    $68 = ($35|0)<(320);
    $69 = $35 << 1;
    $$op45$i = $69 ^ -2;
    $$op45$op$i = (-2 - ($$op45$i))|0;
    $70 = $68 ? $$op45$op$i : 640;
    $j$021$i = 0;
    while(1) {
     $71 = (($j$021$i) - ($$$i))|0;
     $72 = (+($71|0));
     $73 = $72 / $58;
     $74 = $73;
     $75 = ((($gfc) + ($j$021$i<<2)|0) + 37192|0);
     $76 = HEAP32[$75>>2]|0;
     $i$119$i = 0;$sum$018$i = 0.0;
     while(1) {
      $77 = (+($i$119$i|0));
      $78 = $77 - $74;
      $79 = $78 / $62;
      $80 = $79 < 0.0;
      $$01$i$i = $80 ? 0.0 : $79;
      $81 = $$01$i$i > 1.0;
      $$1$i$i = $81 ? 1.0 : $$01$i$i;
      $82 = $$1$i$i + -0.5;
      $fabsf$i$i = (+Math_abs((+$82)));
      $83 = $fabsf$i$i;
      $84 = $83 < 1.00000000000000006228E-9;
      if ($84) {
       $$0$in$i$i = $64;
      } else {
       $85 = $$1$i$i * 2.0;
       $86 = $$1$i$i * 4.0;
       $87 = $85;
       $88 = $86;
       $89 = $87 * 3.141592653589793116;
       $90 = $88 * 3.141592653589793116;
       $91 = (+Math_cos((+$89)));
       $92 = (+Math_cos((+$90)));
       $93 = $91 * 0.5;
       $94 = $92 * 0.0800000000000000016653;
       $95 = 0.419999999999999984457 - $93;
       $96 = $95 + $94;
       $97 = $82;
       $98 = $96;
       $99 = $98;
       $100 = $65 * $82;
       $101 = $100;
       $102 = (+Math_sin((+$101)));
       $103 = $102 * $99;
       $104 = $67 * $97;
       $105 = $103 / $104;
       $$0$in$i$i = $105;
      }
      $$0$i$i = $$0$in$i$i;
      $106 = (($76) + ($i$119$i<<2)|0);
      HEAPF32[$106>>2] = $$0$i$i;
      $107 = $sum$018$i + $$0$i$i;
      $108 = (($i$119$i) + 1)|0;
      $109 = ($i$119$i|0)<($45|0);
      if ($109) {
       $i$119$i = $108;$sum$018$i = $107;
      } else {
       $i$220$i = 0;
       break;
      }
     }
     while(1) {
      $110 = (($76) + ($i$220$i<<2)|0);
      $111 = +HEAPF32[$110>>2];
      $112 = $111 / $107;
      HEAPF32[$110>>2] = $112;
      $113 = (($i$220$i) + 1)|0;
      $114 = ($i$220$i|0)<($45|0);
      if ($114) {
       $i$220$i = $113;
      } else {
       break;
      }
     }
     $115 = (($j$021$i) + 1)|0;
     $116 = ($j$021$i|0)<($51|0);
     if ($116) {
      $j$021$i = $115;
     } else {
      break;
     }
    }
    $117 = ($70|0)>(0);
    $$op46$i = $70 | 1;
    $118 = $117 ? $$op46$i : 1;
    $j$0$lcssa$i = $118;
   }
   HEAP32[$18>>2] = 1;
   $j$1$i = $j$0$lcssa$i;
  } else {
   $j$1$i = 0;
  }
  $119 = ((($gfc) + ($ch$0<<2)|0) + 37184|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = ((($gfc) + ($ch$0<<3)|0) + 37168|0);
  L35: do {
   if ($22) {
    $122 = $45 >>> 1;
    $123 = (($45) - ($122))|0;
    $124 = $45 & 1;
    $125 = (+($124|0));
    $126 = $125 * 0.5;
    $127 = (+($$$i|0));
    $$pre$i = +HEAPF64[$121>>3];
    $k$012$i = 0;
    while(1) {
     $128 = (+($k$012$i|0));
     $129 = $31 * $128;
     $130 = $129 - $$pre$i;
     $131 = (+Math_floor((+$130)));
     $132 = (~~(($131)));
     $133 = (($132) + ($123))|0;
     $134 = ($133|0)<($nsamples|0);
     if (!($134)) {
      $$pre$phi44$iZ2D = $123;$171 = $$pre$i;$j$3$i = $132;$k$0$lcssa$i = $k$012$i;
      break L35;
     }
     $135 = (+($132|0));
     $136 = $126 + $135;
     $137 = $130 - $136;
     $138 = $137;
     $139 = $138 * 2.0;
     $140 = $127 * $139;
     $141 = $127 + $140;
     $142 = $141;
     $143 = $142 + 0.5;
     $144 = (+Math_floor((+$143)));
     $145 = (~~(($144)));
     $146 = (($132) - ($122))|0;
     $147 = ((($gfc) + ($145<<2)|0) + 37192|0);
     $148 = HEAP32[$147>>2]|0;
     $i$310$i = 0;$xvalue$011$i = 0.0;
     while(1) {
      $149 = (($i$310$i) + ($146))|0;
      $150 = ($149|0)<(0);
      if ($150) {
       $151 = (($149) + ($46))|0;
       $152 = (($120) + ($151<<2)|0);
       $$in$i = $152;
      } else {
       $153 = (($26) + ($149<<2)|0);
       $$in$i = $153;
      }
      $154 = +HEAPF32[$$in$i>>2];
      $155 = (($148) + ($i$310$i<<2)|0);
      $156 = +HEAPF32[$155>>2];
      $157 = $154 * $156;
      $158 = $xvalue$011$i + $157;
      $159 = (($i$310$i) + 1)|0;
      $160 = ($i$310$i|0)<($45|0);
      if ($160) {
       $i$310$i = $159;$xvalue$011$i = $158;
      } else {
       break;
      }
     }
     $$sum = (($k$012$i) + ($1))|0;
     $161 = (($24) + ($$sum<<2)|0);
     HEAPF32[$161>>2] = $158;
     $162 = (($k$012$i) + 1)|0;
     $163 = ($162|0)<($4|0);
     if ($163) {
      $k$012$i = $162;
     } else {
      $$pre$phi44$iZ2D = $123;$171 = $$pre$i;$j$3$i = $132;$k$0$lcssa$i = $162;
      break;
     }
    }
   } else {
    $$pre41$i = +HEAPF64[$121>>3];
    $$pre42$i = $45 >>> 1;
    $$pre43$i = (($45) - ($$pre42$i))|0;
    $$pre$phi44$iZ2D = $$pre43$i;$171 = $$pre41$i;$j$3$i = $j$1$i;$k$0$lcssa$i = 0;
   }
  } while(0);
  $164 = (($j$3$i) + ($$pre$phi44$iZ2D))|0;
  $165 = ($164|0)>($nsamples|0);
  $len$$i = $165 ? $nsamples : $164;
  HEAP32[$n_in>>2] = $len$$i;
  $166 = (+($len$$i|0));
  $167 = (+($k$0$lcssa$i|0));
  $168 = $31 * $167;
  $169 = $166 - $168;
  $170 = $171 + $169;
  HEAPF64[$121>>3] = $170;
  $172 = ($len$$i|0)<($46|0);
  if ($172) {
   $180 = (($46) - ($len$$i))|0;
   $181 = ($180|0)>(0);
   if ($181) {
    $i$55$i = 0;
    while(1) {
     $184 = (($i$55$i) + ($len$$i))|0;
     $185 = (($120) + ($184<<2)|0);
     $186 = +HEAPF32[$185>>2];
     $187 = (($120) + ($i$55$i<<2)|0);
     HEAPF32[$187>>2] = $186;
     $188 = (($i$55$i) + 1)|0;
     $exitcond32$i = ($188|0)==($180|0);
     if ($exitcond32$i) {
      $i$5$lcssa$i = $180;
      break;
     } else {
      $i$55$i = $188;
     }
    }
   } else {
    $i$5$lcssa$i = 0;
   }
   $182 = ($i$5$lcssa$i|0)<($46|0);
   if ($182) {
    $183 = (($46) - ($i$5$lcssa$i))|0;
    $i$64$i = $i$5$lcssa$i;$j$43$i = 0;
    while(1) {
     $189 = (($26) + ($j$43$i<<2)|0);
     $190 = +HEAPF32[$189>>2];
     $191 = (($120) + ($i$64$i<<2)|0);
     HEAPF32[$191>>2] = $190;
     $192 = (($i$64$i) + 1)|0;
     $193 = (($j$43$i) + 1)|0;
     $exitcond$i = ($193|0)==($183|0);
     if ($exitcond$i) {
      break;
     } else {
      $i$64$i = $192;$j$43$i = $193;
     }
    }
   }
  } else {
   $$neg2$i = $45 ^ -1;
   $173 = (($len$$i) + ($$neg2$i))|0;
   $i$49$i = 0;
   while(1) {
    $174 = (($173) + ($i$49$i))|0;
    $175 = (($26) + ($174<<2)|0);
    $176 = +HEAPF32[$175>>2];
    $177 = (($120) + ($i$49$i<<2)|0);
    HEAPF32[$177>>2] = $176;
    $178 = (($i$49$i) + 1)|0;
    $179 = ($178|0)<($46|0);
    if ($179) {
     $i$49$i = $178;
    } else {
     break;
    }
   }
  }
  $194 = (($ch$0) + 1)|0;
  $195 = ($194|0)<($6|0);
  if (!($195)) {
   break;
  }
  $$pre = HEAP32[$12>>2]|0;
  $$pre7 = HEAP32[$7>>2]|0;
  $28 = $$pre;$30 = $$pre7;$ch$0 = $194;
 }
 HEAP32[$n_out>>2] = $k$0$lcssa$i;
 STACKTOP = sp;return;
}
function _lame_report_def($format,$args) {
 $format = $format|0;
 $args = $args|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[_stderr>>2]|0;
 (_vfprintf(($0|0),($format|0),($args|0))|0);
 (_fflush(($0|0))|0);
 STACKTOP = sp;return;
}
function _lame_report_fnc($print_f,$format,$varargs) {
 $print_f = $print_f|0;
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $args = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $args = sp;
 $0 = ($print_f|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 HEAP32[$args>>2] = $varargs;
 FUNCTION_TABLE_vii[$print_f & 3]($format,$args);
 STACKTOP = sp;return;
}
function _lame_debugf($gfc,$format,$varargs) {
 $gfc = $gfc|0;
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $args = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $args = sp;
 $0 = ($gfc|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (($gfc) + 85832|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  STACKTOP = sp;return;
 }
 HEAP32[$args>>2] = $varargs;
 $4 = HEAP32[$1>>2]|0;
 FUNCTION_TABLE_vii[$4 & 3]($format,$args);
 STACKTOP = sp;return;
}
function _lame_msgf($gfc,$format,$varargs) {
 $gfc = $gfc|0;
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $args = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $args = sp;
 $0 = ($gfc|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (($gfc) + 85828|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  STACKTOP = sp;return;
 }
 HEAP32[$args>>2] = $varargs;
 $4 = HEAP32[$1>>2]|0;
 FUNCTION_TABLE_vii[$4 & 3]($format,$args);
 STACKTOP = sp;return;
}
function _lame_errorf($gfc,$format,$varargs) {
 $gfc = $gfc|0;
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $args = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $args = sp;
 $0 = ($gfc|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (($gfc) + 85836|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  STACKTOP = sp;return;
 }
 HEAP32[$args>>2] = $varargs;
 $4 = HEAP32[$1>>2]|0;
 FUNCTION_TABLE_vii[$4 & 3]($format,$args);
 STACKTOP = sp;return;
}
function _has_MMX() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function _has_3DNow() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function _has_SSE() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function _has_SSE2() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function _disable_FPE() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function _init_log_table() {
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, $exitcond = 0, $j$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[142480>>2]|0;
 $1 = ($0|0)==(0);
 if ($1) {
  $j$01 = 0;
 } else {
  HEAP32[142480>>2] = 1;
  STACKTOP = sp;return;
 }
 while(1) {
  $2 = (+($j$01|0));
  $3 = $2 * 0.001953125;
  $4 = $3 + 1.0;
  $5 = $4;
  $6 = (+Math_log((+$5)));
  $7 = $6 * 1.442695040888963387;
  $8 = $7;
  $9 = (142488 + ($j$01<<2)|0);
  HEAPF32[$9>>2] = $8;
  $10 = (($j$01) + 1)|0;
  $exitcond = ($10|0)==(513);
  if ($exitcond) {
   break;
  } else {
   $j$01 = $10;
  }
 }
 HEAP32[142480>>2] = 1;
 STACKTOP = sp;return;
}
function _fast_log2($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
 $1 = $0 >>> 23;
 $2 = $1 & 255;
 $3 = (($2) + -127)|0;
 $4 = (+($3|0));
 $5 = $0 & 16383;
 $6 = (+($5|0));
 $7 = $6 * 6.103515625E-5;
 $8 = $0 >>> 14;
 $9 = $8 & 511;
 $10 = (142488 + ($9<<2)|0);
 $11 = +HEAPF32[$10>>2];
 $12 = 1.0 - $7;
 $13 = $12 * $11;
 $14 = (($9) + 1)|0;
 $15 = (142488 + ($14<<2)|0);
 $16 = +HEAPF32[$15>>2];
 $17 = $7 * $16;
 $18 = $13 + $17;
 $19 = $4 + $18;
 STACKTOP = sp;return (+$19);
}
function _VBR_encode_frame($gfc,$xr34orig,$l3_xmin,$max_bits) {
 $gfc = $gfc|0;
 $xr34orig = $xr34orig|0;
 $l3_xmin = $l3_xmin|0;
 $max_bits = $max_bits|0;
 var $$ = 0, $$$i = 0, $$$i$i$i = 0, $$$i$i$us = 0, $$$i22$i = 0, $$$i38$i = 0, $$$i4$i$i = 0, $$$i6$i = 0, $$0 = 0, $$0$lcssa$i$i = 0, $$03$i$i = 0, $$1$i = 0, $$gain_ok$0$i$i = 0, $$lcssa = 0, $$lcssa22 = 0.0, $$lcssa23 = 0, $$m$0$i$i = 0, $$maxsf$0$i = 0, $$maxsf$03$i = 0, $$neg11 = 0;
 var $$neg13 = 0, $$neg15 = 0, $$neg17 = 0, $$neg19 = 0, $$neg9 = 0, $$ok$0 = 0, $$ok$2 = 0, $$ok$5 = 0, $$ok$55 = 0, $$phi$trans$insert$i = 0, $$phi$trans$insert304 = 0, $$pre = 0, $$pre$i = 0.0, $$pre305 = 0, $$pre83$i = 0.0, $$pre84$i = 0.0, $$sfmax$2$i$i = 0, $$sfmax$2$i12$i = 0, $$sfmax$2$i28$i = 0, $$sfmax$2$i44$i = 0;
 var $$sum$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0.0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0.0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0, $236 = 0.0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0.0, $242 = 0.0, $243 = 0.0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0.0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0.0, $291 = 0.0, $292 = 0.0, $293 = 0, $294 = 0.0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0.0, $299 = 0.0, $3 = 0, $30 = 0, $300 = 0.0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0.0, $337 = 0.0, $338 = 0.0, $339 = 0, $34 = 0, $340 = 0.0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0.0, $347 = 0, $348 = 0.0, $349 = 0.0;
 var $35 = 0, $350 = 0.0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
 var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0;
 var $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0;
 var $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0.0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0;
 var $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0.0, $472 = 0, $473 = 0, $474 = 0, $475 = 0;
 var $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0;
 var $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0;
 var $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0.0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0;
 var $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0.0, $547 = 0;
 var $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0;
 var $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0.0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0;
 var $584 = 0.0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0;
 var $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0.0, $618 = 0, $619 = 0;
 var $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0;
 var $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0.0;
 var $656 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0.0, $bi$0$i = 0, $bi$0$i$lcssa21 = 0;
 var $bi$0$i$us = 0, $bi$0$in$i = 0, $bi$0$in$i$us = 0, $bi2$0$i = 0, $bi2$0$in$i = 0, $bi_ok$0$i = 0, $bi_ok$0$i$us = 0, $bi_ok$1$i = 0, $bi_ok$1$i$lcssa = 0, $bi_ok$1$i$us = 0, $bi_ok3$0$i = 0, $bi_ok3$1$i = 0, $bo$0$i = 0, $bo$0$i$us = 0, $bo$1$i = 0, $bo$1$i$us = 0, $bo5$0$i = 0, $bo5$1$i = 0, $brmerge$demorgan = 0, $bu$0$i = 0;
 var $bu$0$i$us = 0, $bu$1$i = 0, $bu$1$i$us = 0, $bu4$0$i = 0, $bu4$1$i = 0, $ch$0198 = 0, $ch$10111 = 0, $ch$1187 = 0, $ch$1189 = 0, $ch$1376 = 0, $ch$1469$us = 0, $ch$1550 = 0, $ch$2172 = 0, $ch$3160 = 0, $ch$4130 = 0, $ch$5136 = 0, $ch$6141 = 0, $ch$7145 = 0, $ch$8101 = 0, $ch$9106 = 0;
 var $curr$0$lcssa$i$i = 0, $exitcond = 0, $exitcond$i = 0, $exitcond$i$i$i = 0, $exitcond$i7$i$i = 0, $exitcond11$i = 0, $exitcond248 = 0, $exitcond250 = 0, $exitcond251 = 0, $exitcond252 = 0, $exitcond253 = 0, $exitcond254 = 0, $exitcond255 = 0, $exitcond256 = 0, $exitcond257 = 0, $exitcond259 = 0, $exitcond260 = 0, $exitcond261 = 0, $exitcond263 = 0, $exitcond265 = 0;
 var $exitcond267 = 0, $exitcond268 = 0, $exitcond270 = 0, $exitcond272 = 0, $exitcond280 = 0, $exitcond285 = 0, $exitcond287 = 0, $exitcond288 = 0, $exitcond294 = 0, $f = 0, $f2 = 0, $f4 = 0, $gain$1$i$i$i = 0, $gain$1$i5$i$i = 0, $gain$1$vbrmax$0$i$i$i = 0, $gain$1$vbrmax$0$i6$i$i = 0, $gain_ok$0$lcssa$i$i = 0, $gain_ok$0$ph25$i$i = 0, $gain_ok$018$i$i = 0, $gr$0206 = 0;
 var $gr$1083$us = 0, $gr$1173$us = 0, $gr$1196 = 0, $gr$1263 = 0, $gr$2179 = 0, $gr$3167 = 0, $gr$4152 = 0, $gr$5125 = 0, $gr$6122 = 0, $gr$7119 = 0, $gr$8114 = 0, $gr$996 = 0, $i$01$i$i = 0, $i$02$i = 0, $i$02$i$i = 0, $i$02$i$i$i = 0, $i$02$i2$i$i = 0, $i$03$i$i$us = 0, $i$03$i18$i = 0, $i$03$i2$i = 0;
 var $i$03$i34$i = 0, $i$06$i = 0, $i$18$i$i = 0, $i$18$i25$i = 0, $i$18$i41$i = 0, $i$18$i9$i = 0, $j$01$i = 0, $j$01$i$i$us = 0, $j$01$i20$i = 0, $j$01$i36$i = 0, $j$01$i4$i = 0, $j$02$i$i = 0, $j$07$i = 0, $j$16$i$i = 0, $j$16$i11$i = 0, $j$16$i27$i = 0, $j$16$i43$i = 0, $l$0$ph26$i$i = 0, $m$03$i$i = 0, $m2$0$i = 0;
 var $m_o$0$$i = 0, $m_o$08$i = 0, $m_o$1$i = 0, $max_nbits_ch = 0, $max_nbits_fr$0208 = 0, $max_nbits_fr$1$lcssa = 0, $max_nbits_fr$1199 = 0, $max_nbits_gr = 0, $maxsf$010$i = 0, $maxsf$3$i = 0, $maxsf$4$i = 0, $ok$0166 = 0, $ok$2$lcssa = 0, $ok$2159 = 0, $ok$4$lcssa = 0, $ok$495 = 0, $ok$5$lcssa = 0, $ok$586 = 0, $or$cond$i = 0, $or$cond2$i = 0;
 var $phitmp = 0, $r$0$ph27$i$i = 0, $r$019$i$i = 0, $s$0137 = 0.0, $s$1 = 0.0, $s3$0126 = 0.0, $s3$1 = 0.0, $s5$0102 = 0.0, $s5$1 = 0.0, $scevgep = 0, $scevgep$i$i = 0, $scevgep275 = 0, $scevgep283 = 0, $scevgep290 = 0, $scevgep292 = 0, $sf$1$1$i$i = 0, $sf$1$2$i$i = 0, $sf$1$3$i$i = 0, $sf$1$4$i$i = 0, $sf$1$5$i$i = 0;
 var $sf$1$6$i$i = 0, $sf$1$i$i = 0, $sf$1$in$1$i$i = 0, $sf$1$in$2$i$i = 0, $sf$1$in$3$i$i = 0, $sf$1$in$4$i$i = 0, $sf$1$in$5$i$i = 0, $sf$1$in$6$i$i = 0, $sf$1$in$p$1$i$i = 0, $sf$1$in$p$2$i$i = 0, $sf$1$in$p$3$i$i = 0, $sf$1$in$p$4$i$i = 0, $sf$1$in$p$5$i$i = 0, $sf$1$in$p$6$i$i = 0, $sf_ok$1$1$i$i = 0, $sf_ok$1$2$i$i = 0, $sf_ok$1$3$i$i = 0, $sf_ok$1$4$i$i = 0, $sf_ok$1$5$i$i = 0, $sf_ok$1$6$i$i = 0;
 var $sf_ok$1$7$i$i = 0, $sf_ok$1$i$i = 0, $sfb$09$i = 0, $sfb$15$i = 0, $sfb$24$i = 0, $sfmax$02$i$i$us = 0, $sfmax$02$i19$i = 0, $sfmax$02$i3$i = 0, $sfmax$02$i35$i = 0, $sfmax$27$i$i = 0, $sfmax$27$i10$i = 0, $sfmax$27$i26$i = 0, $sfmax$27$i42$i = 0, $sfmax$4$i14$i = 0, $sfmax$4$i30$i = 0, $sfmax$4$i46$i = 0, $sftemp$i$i$i = 0, $sfwork_ = 0, $short_block_constrain$long_block_constrain = 0, $sum_fr$0$lcssa = 0;
 var $sum_fr$0151 = 0, $sum_fr$1$lcssa = 0, $sum_fr$194 = 0, $sum_gr$0$lcssa = 0, $sum_gr$088 = 0, $that_ = 0, $use_nbits_ch = 0, $use_nbits_fr$0$lcssa = 0, $use_nbits_fr$0181 = 0, $use_nbits_fr$1$lcssa = 0, $use_nbits_fr$165 = 0, $use_nbits_gr = 0, $vararg_buffer13 = 0, $vararg_ptr15 = 0, $vbrmax$01$i$i$i = 0, $vbrmax$01$i3$i$i = 0, $vbrsfmin_ = 0, $wrk$i = 0, $x$0$i$i$us = 0, $x$0$i7$i = 0;
 var $x$0$sfmax$0$i$i$us = 0, $x$0$sfmax$0$i24$i = 0, $x$0$sfmax$0$i40$i = 0, $x$0$sfmax$0$i8$i = 0, $xfsf$0$lcssa$i$i = 0.0, $xfsf$01$i$i = 0.0, $xfsf$1$i$i = 0.0, $xfsf$2$i$i = 0.0, $xfsf$3$i$i = 0.0, $xfsf$4$i$i = 0.0, $xfsf$5$i$i = 0.0, $xfsf$6$i$i = 0.0, $xfsf$7$i$i = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1792|0;
 $vararg_buffer13 = sp + 40|0;
 $sftemp$i$i$i = sp + 1628|0;
 $wrk$i = sp + 1472|0;
 $sfwork_ = sp + 848|0;
 $vbrsfmin_ = sp + 224|0;
 $that_ = sp + 80|0;
 $max_nbits_ch = sp + 64|0;
 $max_nbits_gr = sp + 32|0;
 $use_nbits_ch = sp + 48|0;
 $use_nbits_gr = sp + 24|0;
 $f = sp + 16|0;
 $f2 = sp + 8|0;
 $f4 = sp;
 $0 = (($gfc) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($gfc) + 72|0);
 $3 = HEAP32[$2>>2]|0;
 ;HEAP32[$max_nbits_ch+0>>2]=0|0;HEAP32[$max_nbits_ch+4>>2]=0|0;HEAP32[$max_nbits_ch+8>>2]=0|0;HEAP32[$max_nbits_ch+12>>2]=0|0;
 $4 = $max_nbits_gr;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 ;HEAP32[$use_nbits_ch+0>>2]=HEAP32[144544+0>>2]|0;HEAP32[$use_nbits_ch+4>>2]=HEAP32[144544+4>>2]|0;HEAP32[$use_nbits_ch+8>>2]=HEAP32[144544+8>>2]|0;HEAP32[$use_nbits_ch+12>>2]=HEAP32[144544+12>>2]|0;
 $8 = $use_nbits_gr;
 $9 = $8;
 HEAP32[$9>>2] = 7681;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = 7681;
 $12 = ($1|0)>(0);
 if (!($12)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = ($3|0)>(0);
 $14 = (($gfc) + 48|0);
 $15 = $3 << 2;
 $gr$0206 = 0;$max_nbits_fr$0208 = 0;
 while(1) {
  $17 = (($max_nbits_gr) + ($gr$0206<<2)|0);
  HEAP32[$17>>2] = 0;
  if ($13) {
   $scevgep283 = (($use_nbits_ch) + ($gr$0206<<3)|0);
   _memset(($scevgep283|0),0,($15|0))|0;
   $$pre = HEAP32[$14>>2]|0;
   $22 = 0;$ch$0198 = 0;$max_nbits_fr$1199 = $max_nbits_fr$0208;
   while(1) {
    $18 = ((($max_bits) + ($gr$0206<<3)|0) + ($ch$0198<<2)|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ((($max_nbits_ch) + ($gr$0206<<3)|0) + ($ch$0198<<2)|0);
    HEAP32[$20>>2] = $19;
    $21 = (($22) + ($19))|0;
    $23 = (($19) + ($max_nbits_fr$1199))|0;
    $24 = ($$pre|0)<(0);
    $25 = $24 ? 1 : 2;
    $26 = (((($that_) + (($gr$0206*72)|0)|0) + (($ch$0198*36)|0)|0) + 4|0);
    HEAP32[$26>>2] = $25;
    $27 = (((($that_) + (($gr$0206*72)|0)|0) + (($ch$0198*36)|0)|0) + 12|0);
    HEAP32[$27>>2] = $gfc;
    $28 = (((($gfc) + (($gr$0206*10504)|0)|0) + (($ch$0198*5252)|0)|0) + 304|0);
    $29 = (((($that_) + (($gr$0206*72)|0)|0) + (($ch$0198*36)|0)|0) + 16|0);
    HEAP32[$29>>2] = $28;
    $30 = ((($xr34orig) + (($gr$0206*4608)|0)|0) + (($ch$0198*2304)|0)|0);
    $31 = (((($that_) + (($gr$0206*72)|0)|0) + (($ch$0198*36)|0)|0) + 8|0);
    HEAP32[$31>>2] = $30;
    $32 = (((($gfc) + (($gr$0206*10504)|0)|0) + (($ch$0198*5252)|0)|0) + 5092|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = ($33|0)==(2);
    $35 = ((($that_) + (($gr$0206*72)|0)|0) + (($ch$0198*36)|0)|0);
    $short_block_constrain$long_block_constrain = $34 ? 6 : 7;
    HEAP32[$35>>2] = $short_block_constrain$long_block_constrain;
    $36 = (($ch$0198) + 1)|0;
    $exitcond280 = ($36|0)==($3|0);
    if ($exitcond280) {
     break;
    } else {
     $22 = $21;$ch$0198 = $36;$max_nbits_fr$1199 = $23;
    }
   }
   HEAP32[$17>>2] = $21;
   $max_nbits_fr$1$lcssa = $23;
  } else {
   $max_nbits_fr$1$lcssa = $max_nbits_fr$0208;
  }
  $37 = (($gr$0206) + 1)|0;
  $exitcond285 = ($37|0)==($1|0);
  if ($exitcond285) {
   break;
  } else {
   $gr$0206 = $37;$max_nbits_fr$0208 = $max_nbits_fr$1$lcssa;
  }
 }
 if ($12) {
  $16 = ($3|0)>(0);
  $gr$1196 = 0;
  L15: while(1) {
   if ($16) {
    $ch$1189 = 0;
    while(1) {
     $scevgep = ((($vbrsfmin_) + (($gr$1196*312)|0)|0) + (($ch$1189*156)|0)|0);
     $41 = ((($max_bits) + ($gr$1196<<3)|0) + ($ch$1189<<2)|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = ($42|0)>(0);
     if ($43) {
      $44 = ((($sfwork_) + (($gr$1196*312)|0)|0) + (($ch$1189*156)|0)|0);
      $45 = (((($that_) + (($gr$1196*72)|0)|0) + (($ch$1189*36)|0)|0) + 16|0);
      $46 = HEAP32[$45>>2]|0;
      $47 = (((($that_) + (($gr$1196*72)|0)|0) + (($ch$1189*36)|0)|0) + 8|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = (($46) + 5208|0);
      $50 = HEAP32[$49>>2]|0;
      $51 = (($46) + 4864|0);
      $52 = HEAP32[$51>>2]|0;
      $53 = (((($that_) + (($gr$1196*72)|0)|0) + (($ch$1189*36)|0)|0) + 20|0);
      $54 = (((($that_) + (($gr$1196*72)|0)|0) + (($ch$1189*36)|0)|0) + 4|0);
      ;HEAP32[$53+0>>2]=0|0;HEAP32[$53+4>>2]=0|0;HEAP32[$53+8>>2]=0|0;HEAP32[$53+12>>2]=0|0;
      $i$06$i = 0;$j$07$i = 0;$m_o$08$i = -1;$maxsf$010$i = 0;$sfb$09$i = 0;
      while(1) {
       $61 = ((($46) + ($sfb$09$i<<2)|0) + 4872|0);
       $62 = HEAP32[$61>>2]|0;
       $63 = (($50) - ($j$07$i))|0;
       $64 = (($63) + 1)|0;
       $65 = ($62>>>0)>($64>>>0);
       $$1$i = $65 ? $64 : $62;
       $66 = (($48) + ($j$07$i<<2)|0);
       $67 = $$1$i >>> 2;
       $68 = $$1$i & 3;
       $69 = ($67|0)==(0);
       if ($69) {
        $$0$lcssa$i$i = $66;$xfsf$0$lcssa$i$i = 0.0;
       } else {
        $$03$i$i = $66;$i$02$i$i = $67;$xfsf$01$i$i = 0.0;
        while(1) {
         $70 = (($i$02$i$i) + -1)|0;
         $71 = +HEAPF32[$$03$i$i>>2];
         $72 = $xfsf$01$i$i < $71;
         $xfsf$1$i$i = $72 ? $71 : $xfsf$01$i$i;
         $73 = (($$03$i$i) + 4|0);
         $74 = +HEAPF32[$73>>2];
         $75 = $xfsf$1$i$i < $74;
         $xfsf$2$i$i = $75 ? $74 : $xfsf$1$i$i;
         $76 = (($$03$i$i) + 8|0);
         $77 = +HEAPF32[$76>>2];
         $78 = $xfsf$2$i$i < $77;
         $xfsf$3$i$i = $78 ? $77 : $xfsf$2$i$i;
         $79 = (($$03$i$i) + 12|0);
         $80 = +HEAPF32[$79>>2];
         $81 = $xfsf$3$i$i < $80;
         $xfsf$4$i$i = $81 ? $80 : $xfsf$3$i$i;
         $82 = (($$03$i$i) + 16|0);
         $83 = ($70|0)==(0);
         if ($83) {
          break;
         } else {
          $$03$i$i = $82;$i$02$i$i = $70;$xfsf$01$i$i = $xfsf$4$i$i;
         }
        }
        $84 = $67 << 2;
        $$sum$i = (($84) + ($j$07$i))|0;
        $scevgep$i$i = (($48) + ($$sum$i<<2)|0);
        $$0$lcssa$i$i = $scevgep$i$i;$xfsf$0$lcssa$i$i = $xfsf$4$i$i;
       }
       if ((($68|0) == 1)) {
        $xfsf$6$i$i = $xfsf$0$lcssa$i$i;
        label = 25;
       } else if ((($68|0) == 3)) {
        $85 = (($$0$lcssa$i$i) + 8|0);
        $86 = +HEAPF32[$85>>2];
        $87 = $xfsf$0$lcssa$i$i < $86;
        if ($87) {
         $xfsf$5$i$i = $86;
         label = 23;
        } else {
         $xfsf$5$i$i = $xfsf$0$lcssa$i$i;
         label = 23;
        }
       } else if ((($68|0) == 2)) {
        $xfsf$5$i$i = $xfsf$0$lcssa$i$i;
        label = 23;
       } else {
        $xfsf$7$i$i = $xfsf$0$lcssa$i$i;
       }
       if ((label|0) == 23) {
        label = 0;
        $88 = (($$0$lcssa$i$i) + 4|0);
        $89 = +HEAPF32[$88>>2];
        $90 = $xfsf$5$i$i < $89;
        if ($90) {
         $xfsf$6$i$i = $89;
         label = 25;
        } else {
         $xfsf$6$i$i = $xfsf$5$i$i;
         label = 25;
        }
       }
       if ((label|0) == 25) {
        label = 0;
        $91 = +HEAPF32[$$0$lcssa$i$i>>2];
        $92 = $xfsf$6$i$i < $91;
        if ($92) {
         $xfsf$7$i$i = $91;
        } else {
         $xfsf$7$i$i = $xfsf$6$i$i;
        }
       }
       $93 = +HEAPF32[((132496 + 512|0))>>2];
       $94 = $xfsf$7$i$i * $93;
       $95 = !($94 <= 8206.0);
       $sf_ok$1$i$i = $95 ? -1 : -128;
       $sf$1$i$i = $95 ? -64 : 64;
       $96 = $sf$1$i$i&255;
       $97 = (132496 + ($96<<2)|0);
       $98 = +HEAPF32[$97>>2];
       $99 = $xfsf$7$i$i * $98;
       $100 = !($99 <= 8206.0);
       $sf$1$in$p$1$i$i = $100 ? 32 : 224;
       $sf$1$in$1$i$i = (($sf$1$in$p$1$i$i) + ($96))|0;
       $sf_ok$1$1$i$i = $100 ? $sf_ok$1$i$i : $sf$1$i$i;
       $sf$1$1$i$i = $sf$1$in$1$i$i&255;
       $101 = $sf$1$in$1$i$i & 224;
       $102 = (132496 + ($101<<2)|0);
       $103 = +HEAPF32[$102>>2];
       $104 = $xfsf$7$i$i * $103;
       $105 = !($104 <= 8206.0);
       $sf$1$in$p$2$i$i = $105 ? 16 : 240;
       $sf$1$in$2$i$i = (($sf$1$in$p$2$i$i) + ($sf$1$in$1$i$i))|0;
       $sf_ok$1$2$i$i = $105 ? $sf_ok$1$1$i$i : $sf$1$1$i$i;
       $sf$1$2$i$i = $sf$1$in$2$i$i&255;
       $106 = $sf$1$in$2$i$i & 240;
       $107 = (132496 + ($106<<2)|0);
       $108 = +HEAPF32[$107>>2];
       $109 = $xfsf$7$i$i * $108;
       $110 = !($109 <= 8206.0);
       $sf$1$in$p$3$i$i = $110 ? 8 : 248;
       $sf$1$in$3$i$i = (($106) + ($sf$1$in$p$3$i$i))|0;
       $sf_ok$1$3$i$i = $110 ? $sf_ok$1$2$i$i : $sf$1$2$i$i;
       $sf$1$3$i$i = $sf$1$in$3$i$i&255;
       $111 = $sf$1$in$3$i$i & 248;
       $112 = (132496 + ($111<<2)|0);
       $113 = +HEAPF32[$112>>2];
       $114 = $xfsf$7$i$i * $113;
       $115 = !($114 <= 8206.0);
       $sf$1$in$p$4$i$i = $115 ? 4 : 252;
       $sf$1$in$4$i$i = (($sf$1$in$3$i$i) + ($sf$1$in$p$4$i$i))|0;
       $sf_ok$1$4$i$i = $115 ? $sf_ok$1$3$i$i : $sf$1$3$i$i;
       $sf$1$4$i$i = $sf$1$in$4$i$i&255;
       $116 = $sf$1$in$4$i$i & 252;
       $117 = (132496 + ($116<<2)|0);
       $118 = +HEAPF32[$117>>2];
       $119 = $xfsf$7$i$i * $118;
       $120 = !($119 <= 8206.0);
       $sf$1$in$p$5$i$i = $120 ? 2 : 254;
       $sf$1$in$5$i$i = (($sf$1$in$4$i$i) + ($sf$1$in$p$5$i$i))|0;
       $sf_ok$1$5$i$i = $120 ? $sf_ok$1$4$i$i : $sf$1$4$i$i;
       $sf$1$5$i$i = $sf$1$in$5$i$i&255;
       $121 = $sf$1$in$5$i$i & 254;
       $122 = (132496 + ($121<<2)|0);
       $123 = +HEAPF32[$122>>2];
       $124 = $xfsf$7$i$i * $123;
       $125 = !($124 <= 8206.0);
       $sf$1$in$p$6$i$i = $125 ? 1 : 255;
       $sf$1$in$6$i$i = (($121) + ($sf$1$in$p$6$i$i))|0;
       $sf_ok$1$6$i$i = $125 ? $sf_ok$1$5$i$i : $sf$1$5$i$i;
       $sf$1$6$i$i = $sf$1$in$6$i$i&255;
       $126 = $sf$1$in$6$i$i & 255;
       $127 = (132496 + ($126<<2)|0);
       $128 = +HEAPF32[$127>>2];
       $129 = $xfsf$7$i$i * $128;
       $130 = !($129 <= 8206.0);
       $sf_ok$1$7$i$i = $130 ? $sf_ok$1$6$i$i : $sf$1$6$i$i;
       $131 = $sf_ok$1$7$i$i&255;
       $132 = (((($vbrsfmin_) + (($gr$1196*312)|0)|0) + (($ch$1189*156)|0)|0) + ($sfb$09$i<<2)|0);
       HEAP32[$132>>2] = $131;
       $133 = HEAP32[$53>>2]|0;
       $134 = ($133|0)<($131|0);
       if ($134) {
        HEAP32[$53>>2] = $131;
       }
       $135 = ((((($that_) + (($gr$1196*72)|0)|0) + (($ch$1189*36)|0)|0) + ($i$06$i<<2)|0) + 24|0);
       $136 = HEAP32[$135>>2]|0;
       $137 = ($136|0)<($131|0);
       if ($137) {
        HEAP32[$135>>2] = $131;
       }
       $138 = (($i$06$i) + 1)|0;
       $139 = ($138>>>0)>(2);
       $$$i = $139 ? 0 : $138;
       $140 = ($sfb$09$i|0)<($52|0);
       $141 = ($62>>>0)>(2);
       $or$cond$i = $140 & $141;
       if ($or$cond$i) {
        $142 = ((($46) + ($sfb$09$i)|0) + 5212|0);
        $143 = HEAP8[$142>>0]|0;
        $144 = ($143<<24>>24)==(0);
        if ($144) {
         $m2$0$i = -1;$m_o$1$i = $m_o$08$i;$maxsf$3$i = -1;
        } else {
         $145 = HEAP32[$54>>2]|0;
         $146 = (($46) + ($j$07$i<<2)|0);
         $147 = (((($l3_xmin) + (($gr$1196*312)|0)|0) + (($ch$1189*156)|0)|0) + ($sfb$09$i<<2)|0);
         $148 = +HEAPF32[$147>>2];
         $149 = (FUNCTION_TABLE_iiidii[$145 & 3]($146,$66,$148,$$1$i,$sf_ok$1$7$i$i)|0);
         $150 = $149&255;
         $151 = ($maxsf$010$i&255)<($149&255);
         $$maxsf$0$i = $151 ? $149 : $maxsf$010$i;
         $152 = ($m_o$08$i|0)>=($150|0);
         $153 = ($149<<24>>24)==(-1);
         $or$cond2$i = $152 | $153;
         $m_o$0$$i = $or$cond2$i ? $m_o$08$i : $150;
         $m2$0$i = $149;$m_o$1$i = $m_o$0$$i;$maxsf$3$i = $$maxsf$0$i;
        }
       } else {
        $154 = ($maxsf$010$i&255)<($sf_ok$1$7$i$i&255);
        $$maxsf$03$i = $154 ? $sf_ok$1$7$i$i : $maxsf$010$i;
        $m2$0$i = $$maxsf$03$i;$m_o$1$i = $m_o$08$i;$maxsf$3$i = $$maxsf$03$i;
       }
       $155 = $m2$0$i&255;
       $156 = (((($sfwork_) + (($gr$1196*312)|0)|0) + (($ch$1189*156)|0)|0) + ($sfb$09$i<<2)|0);
       HEAP32[$156>>2] = $155;
       $57 = (($sfb$09$i) + 1)|0;
       $157 = (($62) + ($j$07$i))|0;
       $158 = ($157>>>0)>($50>>>0);
       if ($158) {
        break;
       } else {
        $i$06$i = $$$i;$j$07$i = $157;$m_o$08$i = $m_o$1$i;$maxsf$010$i = $maxsf$3$i;$sfb$09$i = $57;
       }
      }
      $55 = ((($that_) + (($gr$1196*72)|0)|0) + (($ch$1189*36)|0)|0);
      $56 = ($57|0)<(39);
      if ($56) {
       $58 = $maxsf$3$i&255;
       $scevgep275 = (((($vbrsfmin_) + (($gr$1196*312)|0)|0) + (($ch$1189*156)|0)|0) + ($57<<2)|0);
       $59 = $57 << 2;
       $60 = (156 - ($59))|0;
       _memset(($scevgep275|0),0,($60|0))|0;
       $sfb$15$i = $57;
       while(1) {
        $159 = (((($sfwork_) + (($gr$1196*312)|0)|0) + (($ch$1189*156)|0)|0) + ($sfb$15$i<<2)|0);
        HEAP32[$159>>2] = $58;
        $160 = (($sfb$15$i) + 1)|0;
        $exitcond11$i = ($160|0)==(39);
        if ($exitcond11$i) {
         break;
        } else {
         $sfb$15$i = $160;
        }
       }
      }
      $161 = ($m_o$1$i|0)>(-1);
      if ($161) {
       $sfb$24$i = 0;
       while(1) {
        $162 = (((($sfwork_) + (($gr$1196*312)|0)|0) + (($ch$1189*156)|0)|0) + ($sfb$24$i<<2)|0);
        $163 = HEAP32[$162>>2]|0;
        $164 = ($163|0)==(255);
        if ($164) {
         HEAP32[$162>>2] = $m_o$1$i;
        }
        $165 = (($sfb$24$i) + 1)|0;
        $exitcond$i = ($165|0)==(39);
        if ($exitcond$i) {
         break;
        } else {
         $sfb$24$i = $165;
        }
       }
       $166 = $m_o$1$i&255;
       $maxsf$4$i = $166;
      } else {
       $maxsf$4$i = $maxsf$3$i;
      }
      $167 = $maxsf$4$i&255;
      $168 = HEAP32[$55>>2]|0;
      FUNCTION_TABLE_viiii[$168 & 7]($55,$44,$scevgep,$167);
      $169 = (((($that_) + (($gr$1196*72)|0)|0) + (($ch$1189*36)|0)|0) + 12|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = HEAP32[$45>>2]|0;
      $172 = (_scale_bitcount($170,$171)|0);
      $173 = ($172|0)==(0);
      if (!($173)) {
       label = 43;
       break L15;
      }
     }
     $175 = (($ch$1189) + 1)|0;
     $176 = ($175|0)<($3|0);
     if ($176) {
      $ch$1189 = $175;
     } else {
      break;
     }
    }
   }
   $177 = (($gr$1196) + 1)|0;
   $178 = ($177|0)<($1|0);
   if ($178) {
    $gr$1196 = $177;
   } else {
    break;
   }
  }
  if ((label|0) == 43) {
   $174 = HEAP32[$169>>2]|0;
   _lame_errorf($174,144648,$vararg_buffer13);
   _exit(-1);
   // unreachable;
  }
  if ($12) {
   $38 = ($3|0)>(0);
   $39 = (($gfc) + 304|0);
   $40 = (($gfc) + 36|0);
   $gr$2179 = 0;$use_nbits_fr$0181 = 0;
   while(1) {
    $179 = (($use_nbits_gr) + ($gr$2179<<2)|0);
    HEAP32[$179>>2] = 0;
    if ($38) {
     $197 = 0;$ch$2172 = 0;
     while(1) {
      $180 = ((($max_bits) + ($gr$2179<<3)|0) + ($ch$2172<<2)|0);
      $181 = HEAP32[$180>>2]|0;
      $182 = ($181|0)>(0);
      if ($182) {
       $183 = ((($that_) + (($gr$2179*72)|0)|0) + (($ch$2172*36)|0)|0);
       $184 = (((($that_) + (($gr$2179*72)|0)|0) + (($ch$2172*36)|0)|0) + 16|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = (($185) + 2304|0);
       _memset(($186|0),0,2304)|0;
       (_quantizeAndCountBits($183)|0);
      }
      _best_scalefac_store($gfc,$gr$2179,$ch$2172,$39);
      $187 = HEAP32[$40>>2]|0;
      $188 = ($187|0)==(1);
      if ($188) {
       $189 = (((($gfc) + (($gr$2179*10504)|0)|0) + (($ch$2172*5252)|0)|0) + 304|0);
       _best_huffman_divide($gfc,$189);
      }
      $190 = (((($gfc) + (($gr$2179*10504)|0)|0) + (($ch$2172*5252)|0)|0) + 5072|0);
      $191 = HEAP32[$190>>2]|0;
      $192 = (((($gfc) + (($gr$2179*10504)|0)|0) + (($ch$2172*5252)|0)|0) + 5148|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = (($193) + ($191))|0;
      $195 = ((($use_nbits_ch) + ($gr$2179<<3)|0) + ($ch$2172<<2)|0);
      HEAP32[$195>>2] = $194;
      $196 = (($197) + ($194))|0;
      $198 = (($ch$2172) + 1)|0;
      $exitcond270 = ($198|0)==($3|0);
      if ($exitcond270) {
       break;
      } else {
       $197 = $196;$ch$2172 = $198;
      }
     }
     HEAP32[$179>>2] = $196;
     $200 = $196;
    } else {
     $200 = 0;
    }
    $199 = (($200) + ($use_nbits_fr$0181))|0;
    $201 = (($gr$2179) + 1)|0;
    $exitcond272 = ($201|0)==($1|0);
    if ($exitcond272) {
     $use_nbits_fr$0$lcssa = $199;
     break;
    } else {
     $gr$2179 = $201;$use_nbits_fr$0181 = $199;
    }
   }
  } else {
   $use_nbits_fr$0$lcssa = 0;
  }
 } else {
  $use_nbits_fr$0$lcssa = 0;
 }
 $202 = ($use_nbits_fr$0$lcssa|0)>($max_nbits_fr$1$lcssa|0);
 if (!($202)) {
  if (!($12)) {
   $$0 = $use_nbits_fr$0$lcssa;
   STACKTOP = sp;return ($$0|0);
  }
  $203 = ($3|0)>(0);
  $gr$3167 = 0;$ok$0166 = 1;
  while(1) {
   $204 = (($use_nbits_gr) + ($gr$3167<<2)|0);
   $205 = HEAP32[$204>>2]|0;
   $206 = ($205|0)>(7680);
   $$ok$0 = $206 ? 0 : $ok$0166;
   if ($203) {
    $ch$3160 = 0;$ok$2159 = $$ok$0;
    while(1) {
     $207 = ((($use_nbits_ch) + ($gr$3167<<3)|0) + ($ch$3160<<2)|0);
     $208 = HEAP32[$207>>2]|0;
     $209 = ($208|0)>(4095);
     $$ok$2 = $209 ? 0 : $ok$2159;
     $210 = (($ch$3160) + 1)|0;
     $exitcond267 = ($210|0)==($3|0);
     if ($exitcond267) {
      $ok$2$lcssa = $$ok$2;
      break;
     } else {
      $ch$3160 = $210;$ok$2159 = $$ok$2;
     }
    }
   } else {
    $ok$2$lcssa = $$ok$0;
   }
   $211 = (($gr$3167) + 1)|0;
   $exitcond268 = ($211|0)==($1|0);
   if ($exitcond268) {
    break;
   } else {
    $gr$3167 = $211;$ok$0166 = $ok$2$lcssa;
   }
  }
  $212 = ($ok$2$lcssa|0)==(0);
  if (!($212)) {
   $$0 = $use_nbits_fr$0$lcssa;
   STACKTOP = sp;return ($$0|0);
  }
 }
 if ($12) {
  $213 = ($3|0)>(0);
  $214 = ($3|0)>(1);
  $gr$4152 = 0;$sum_fr$0151 = 0;
  while(1) {
   $215 = (($max_nbits_gr) + ($gr$4152<<2)|0);
   HEAP32[$215>>2] = 0;
   if ($213) {
    $221 = 0;$ch$4130 = 0;
    while(1) {
     $216 = ((($use_nbits_ch) + ($gr$4152<<3)|0) + ($ch$4130<<2)|0);
     $217 = HEAP32[$216>>2]|0;
     $218 = ($217|0)>(4095);
     $219 = ((($max_nbits_ch) + ($gr$4152<<3)|0) + ($ch$4130<<2)|0);
     $$ = $218 ? 4095 : $217;
     HEAP32[$219>>2] = $$;
     $220 = (($$) + ($221))|0;
     $222 = (($ch$4130) + 1)|0;
     $exitcond259 = ($222|0)==($3|0);
     if ($exitcond259) {
      break;
     } else {
      $221 = $220;$ch$4130 = $222;
     }
    }
    HEAP32[$215>>2] = $220;
    $223 = ($220|0)>(7680);
    if ($223) {
     $224 = $f;
     $225 = $224;
     HEAP32[$225>>2] = 0;
     $226 = (($224) + 4)|0;
     $227 = $226;
     HEAP32[$227>>2] = 0;
     if ($213) {
      $ch$5136 = 0;$s$0137 = 0.0;
      while(1) {
       $228 = ((($max_nbits_ch) + ($gr$4152<<3)|0) + ($ch$5136<<2)|0);
       $229 = HEAP32[$228>>2]|0;
       $230 = ($229|0)>(0);
       if ($230) {
        $231 = (+($229|0));
        $232 = (+Math_sqrt((+$231)));
        $233 = (+Math_sqrt((+$232)));
        $234 = $233;
        $235 = (($f) + ($ch$5136<<2)|0);
        HEAPF32[$235>>2] = $234;
        $236 = $s$0137 + $234;
        $s$1 = $236;
       } else {
        $237 = (($f) + ($ch$5136<<2)|0);
        HEAPF32[$237>>2] = 0.0;
        $s$1 = $s$0137;
       }
       $238 = (($ch$5136) + 1)|0;
       $exitcond260 = ($238|0)==($3|0);
       if ($exitcond260) {
        break;
       } else {
        $ch$5136 = $238;$s$0137 = $s$1;
       }
      }
      if ($213) {
       $239 = $s$1 > 0.0;
       $ch$6141 = 0;
       while(1) {
        if ($239) {
         $240 = (($f) + ($ch$6141<<2)|0);
         $241 = +HEAPF32[$240>>2];
         $242 = $241 * 7680.0;
         $243 = $242 / $s$1;
         $244 = (~~(($243)));
         $245 = ((($max_nbits_ch) + ($gr$4152<<3)|0) + ($ch$6141<<2)|0);
         HEAP32[$245>>2] = $244;
        } else {
         $246 = ((($max_nbits_ch) + ($gr$4152<<3)|0) + ($ch$6141<<2)|0);
         HEAP32[$246>>2] = 0;
        }
        $247 = (($ch$6141) + 1)|0;
        $exitcond261 = ($247|0)==($3|0);
        if ($exitcond261) {
         break;
        } else {
         $ch$6141 = $247;
        }
       }
      }
     }
     if ($214) {
      $248 = (($max_nbits_ch) + ($gr$4152<<3)|0);
      $249 = HEAP32[$248>>2]|0;
      $250 = (($use_nbits_ch) + ($gr$4152<<3)|0);
      $251 = HEAP32[$250>>2]|0;
      $252 = (($251) + 32)|0;
      $253 = ($249|0)>($252|0);
      $254 = ((($max_nbits_ch) + ($gr$4152<<3)|0) + 4|0);
      $255 = HEAP32[$254>>2]|0;
      if ($253) {
       $256 = (($255) + ($249))|0;
       $$neg9 = (-32 - ($251))|0;
       $257 = (($$neg9) + ($256))|0;
       HEAP32[$254>>2] = $257;
       HEAP32[$248>>2] = $252;
       $263 = $257;$265 = $252;
      } else {
       $263 = $255;$265 = $249;
      }
      $258 = ((($max_nbits_ch) + ($gr$4152<<3)|0) + 4|0);
      $259 = ((($use_nbits_ch) + ($gr$4152<<3)|0) + 4|0);
      $260 = HEAP32[$259>>2]|0;
      $261 = (($260) + 32)|0;
      $262 = ($263|0)>($261|0);
      if ($262) {
       $264 = (($265) + ($263))|0;
       $$neg11 = (-32 - ($260))|0;
       $266 = (($$neg11) + ($264))|0;
       HEAP32[$248>>2] = $266;
       HEAP32[$258>>2] = $261;
       $268 = $266;$270 = $261;
      } else {
       $268 = $265;$270 = $263;
      }
      $267 = ($268|0)>(4095);
      if ($267) {
       HEAP32[$248>>2] = 4095;
      }
      $269 = ($270|0)>(4095);
      if ($269) {
       HEAP32[$258>>2] = 4095;
      }
     }
     HEAP32[$215>>2] = 0;
     if ($213) {
      $274 = 0;$ch$7145 = 0;
      while(1) {
       $271 = ((($max_nbits_ch) + ($gr$4152<<3)|0) + ($ch$7145<<2)|0);
       $272 = HEAP32[$271>>2]|0;
       $273 = (($274) + ($272))|0;
       $275 = (($ch$7145) + 1)|0;
       $exitcond263 = ($275|0)==($3|0);
       if ($exitcond263) {
        break;
       } else {
        $274 = $273;$ch$7145 = $275;
       }
      }
      HEAP32[$215>>2] = $273;
      $277 = $273;
     } else {
      $277 = 0;
     }
    } else {
     $277 = $220;
    }
   } else {
    $277 = 0;
   }
   $276 = (($277) + ($sum_fr$0151))|0;
   $278 = (($gr$4152) + 1)|0;
   $exitcond265 = ($278|0)==($1|0);
   if ($exitcond265) {
    $sum_fr$0$lcssa = $276;
    break;
   } else {
    $gr$4152 = $278;$sum_fr$0151 = $276;
   }
  }
 } else {
  $sum_fr$0$lcssa = 0;
 }
 $279 = ($sum_fr$0$lcssa|0)>($max_nbits_fr$1$lcssa|0);
 do {
  if ($279) {
   $281 = $f2;
   $282 = $281;
   HEAP32[$282>>2] = 0;
   $283 = (($281) + 4)|0;
   $284 = $283;
   HEAP32[$284>>2] = 0;
   if ($12) {
    $gr$5125 = 0;$s3$0126 = 0.0;
    while(1) {
     $287 = (($max_nbits_gr) + ($gr$5125<<2)|0);
     $288 = HEAP32[$287>>2]|0;
     $289 = ($288|0)>(0);
     if ($289) {
      $290 = (+($288|0));
      $291 = (+Math_sqrt((+$290)));
      $292 = $291;
      $293 = (($f2) + ($gr$5125<<2)|0);
      HEAPF32[$293>>2] = $292;
      $294 = $s3$0126 + $292;
      $s3$1 = $294;
     } else {
      $295 = (($f2) + ($gr$5125<<2)|0);
      HEAPF32[$295>>2] = 0.0;
      $s3$1 = $s3$0126;
     }
     $296 = (($gr$5125) + 1)|0;
     $exitcond257 = ($296|0)==($1|0);
     if ($exitcond257) {
      break;
     } else {
      $gr$5125 = $296;$s3$0126 = $s3$1;
     }
    }
    if ($12) {
     $285 = $s3$1 > 0.0;
     $286 = (+($max_nbits_fr$1$lcssa|0));
     $gr$6122 = 0;
     while(1) {
      if ($285) {
       $297 = (($f2) + ($gr$6122<<2)|0);
       $298 = +HEAPF32[$297>>2];
       $299 = $286 * $298;
       $300 = $299 / $s3$1;
       $301 = (~~(($300)));
       $302 = (($max_nbits_gr) + ($gr$6122<<2)|0);
       HEAP32[$302>>2] = $301;
      } else {
       $303 = (($max_nbits_gr) + ($gr$6122<<2)|0);
       HEAP32[$303>>2] = 0;
      }
      $304 = (($gr$6122) + 1)|0;
      $exitcond256 = ($304|0)==($1|0);
      if ($exitcond256) {
       break;
      } else {
       $gr$6122 = $304;
      }
     }
     $305 = ($1|0)>(1);
     if ($305) {
      $308 = HEAP32[$max_nbits_gr>>2]|0;
      $309 = HEAP32[$use_nbits_gr>>2]|0;
      $310 = (($309) + 125)|0;
      $311 = ($308|0)>($310|0);
      $312 = (($max_nbits_gr) + 4|0);
      $313 = HEAP32[$312>>2]|0;
      if ($311) {
       $314 = (($313) + ($308))|0;
       $$neg13 = (-125 - ($309))|0;
       $315 = (($$neg13) + ($314))|0;
       HEAP32[$312>>2] = $315;
       HEAP32[$max_nbits_gr>>2] = $310;
       $320 = $315;$323 = $310;
      } else {
       $320 = $313;$323 = $308;
      }
      $316 = (($use_nbits_gr) + 4|0);
      $317 = HEAP32[$316>>2]|0;
      $318 = (($317) + 125)|0;
      $319 = ($320|0)>($318|0);
      if ($319) {
       $321 = (($max_nbits_gr) + 4|0);
       $322 = (($323) + ($320))|0;
       $$neg15 = (-125 - ($317))|0;
       $324 = (($$neg15) + ($322))|0;
       HEAP32[$max_nbits_gr>>2] = $324;
       HEAP32[$321>>2] = $318;
      }
      if ($12) {
       $gr$7119 = 0;
      } else {
       $ok$4$lcssa = 0;$sum_fr$1$lcssa = 0;
       break;
      }
      while(1) {
       $325 = (($max_nbits_gr) + ($gr$7119<<2)|0);
       $326 = HEAP32[$325>>2]|0;
       $327 = ($326|0)>(7680);
       if ($327) {
        HEAP32[$325>>2] = 7680;
       }
       $328 = (($gr$7119) + 1)|0;
       $exitcond255 = ($328|0)==($1|0);
       if ($exitcond255) {
        break;
       } else {
        $gr$7119 = $328;
       }
      }
     }
     if ($12) {
      $306 = ($3|0)>(0);
      $307 = ($3|0)>(1);
      $gr$8114 = 0;
      while(1) {
       $329 = $f4;
       $330 = $329;
       HEAP32[$330>>2] = 0;
       $331 = (($329) + 4)|0;
       $332 = $331;
       HEAP32[$332>>2] = 0;
       if ($306) {
        $ch$8101 = 0;$s5$0102 = 0.0;
        while(1) {
         $333 = ((($max_nbits_ch) + ($gr$8114<<3)|0) + ($ch$8101<<2)|0);
         $334 = HEAP32[$333>>2]|0;
         $335 = ($334|0)>(0);
         if ($335) {
          $336 = (+($334|0));
          $337 = (+Math_sqrt((+$336)));
          $338 = $337;
          $339 = (($f4) + ($ch$8101<<2)|0);
          HEAPF32[$339>>2] = $338;
          $340 = $s5$0102 + $338;
          $s5$1 = $340;
         } else {
          $341 = (($f4) + ($ch$8101<<2)|0);
          HEAPF32[$341>>2] = 0.0;
          $s5$1 = $s5$0102;
         }
         $342 = (($ch$8101) + 1)|0;
         $exitcond251 = ($342|0)==($3|0);
         if ($exitcond251) {
          break;
         } else {
          $ch$8101 = $342;$s5$0102 = $s5$1;
         }
        }
        if ($306) {
         $343 = $s5$1 > 0.0;
         $344 = (($max_nbits_gr) + ($gr$8114<<2)|0);
         $ch$9106 = 0;
         while(1) {
          if ($343) {
           $345 = HEAP32[$344>>2]|0;
           $346 = (+($345|0));
           $347 = (($f4) + ($ch$9106<<2)|0);
           $348 = +HEAPF32[$347>>2];
           $349 = $346 * $348;
           $350 = $349 / $s5$1;
           $351 = (~~(($350)));
           $352 = ((($max_nbits_ch) + ($gr$8114<<3)|0) + ($ch$9106<<2)|0);
           HEAP32[$352>>2] = $351;
          } else {
           $353 = ((($max_nbits_ch) + ($gr$8114<<3)|0) + ($ch$9106<<2)|0);
           HEAP32[$353>>2] = 0;
          }
          $354 = (($ch$9106) + 1)|0;
          $exitcond252 = ($354|0)==($3|0);
          if ($exitcond252) {
           break;
          } else {
           $ch$9106 = $354;
          }
         }
        }
       }
       L191: do {
        if ($307) {
         $355 = (($max_nbits_ch) + ($gr$8114<<3)|0);
         $356 = HEAP32[$355>>2]|0;
         $357 = (($use_nbits_ch) + ($gr$8114<<3)|0);
         $358 = HEAP32[$357>>2]|0;
         $359 = (($358) + 32)|0;
         $360 = ($356|0)>($359|0);
         $361 = ((($max_nbits_ch) + ($gr$8114<<3)|0) + 4|0);
         $362 = HEAP32[$361>>2]|0;
         if ($360) {
          $363 = (($362) + ($356))|0;
          $$neg17 = (-32 - ($358))|0;
          $364 = (($$neg17) + ($363))|0;
          HEAP32[$361>>2] = $364;
          HEAP32[$355>>2] = $359;
          $369 = $364;$372 = $359;
         } else {
          $369 = $362;$372 = $356;
         }
         $365 = ((($use_nbits_ch) + ($gr$8114<<3)|0) + 4|0);
         $366 = HEAP32[$365>>2]|0;
         $367 = (($366) + 32)|0;
         $368 = ($369|0)>($367|0);
         if ($368) {
          $370 = ((($max_nbits_ch) + ($gr$8114<<3)|0) + 4|0);
          $371 = (($372) + ($369))|0;
          $$neg19 = (-32 - ($366))|0;
          $373 = (($$neg19) + ($371))|0;
          HEAP32[$355>>2] = $373;
          HEAP32[$370>>2] = $367;
          $653 = $373;
         } else {
          $653 = $372;
         }
         if ($306) {
          $375 = $653;$ch$10111 = 0;
          while(1) {
           $374 = ($375|0)>(4095);
           if ($374) {
            $376 = ((($max_nbits_ch) + ($gr$8114<<3)|0) + ($ch$10111<<2)|0);
            HEAP32[$376>>2] = 4095;
           }
           $377 = (($ch$10111) + 1)|0;
           $exitcond253 = ($377|0)==($3|0);
           if ($exitcond253) {
            break L191;
           }
           $$phi$trans$insert304 = ((($max_nbits_ch) + ($gr$8114<<3)|0) + ($377<<2)|0);
           $$pre305 = HEAP32[$$phi$trans$insert304>>2]|0;
           $375 = $$pre305;$ch$10111 = $377;
          }
         }
        }
       } while(0);
       $378 = (($gr$8114) + 1)|0;
       $exitcond254 = ($378|0)==($1|0);
       if ($exitcond254) {
        label = 91;
        break;
       } else {
        $gr$8114 = $378;
       }
      }
     } else {
      $ok$4$lcssa = 0;$sum_fr$1$lcssa = 0;
     }
    } else {
     $ok$4$lcssa = 0;$sum_fr$1$lcssa = 0;
    }
   } else {
    $ok$4$lcssa = 0;$sum_fr$1$lcssa = 0;
   }
  } else {
   label = 91;
  }
 } while(0);
 if ((label|0) == 91) {
  if ($12) {
   $280 = ($3|0)>(0);
   $gr$996 = 0;$ok$495 = 1;$sum_fr$194 = 0;
   while(1) {
    if ($280) {
     $ch$1187 = 0;$ok$586 = $ok$495;$sum_gr$088 = 0;
     while(1) {
      $379 = ((($max_nbits_ch) + ($gr$996<<3)|0) + ($ch$1187<<2)|0);
      $380 = HEAP32[$379>>2]|0;
      $381 = (($380) + ($sum_gr$088))|0;
      $382 = ($380|0)>(4095);
      $$ok$5 = $382 ? 0 : $ok$586;
      $383 = (($ch$1187) + 1)|0;
      $exitcond248 = ($383|0)==($3|0);
      if ($exitcond248) {
       $ok$5$lcssa = $$ok$5;$sum_gr$0$lcssa = $381;
       break;
      } else {
       $ch$1187 = $383;$ok$586 = $$ok$5;$sum_gr$088 = $381;
      }
     }
    } else {
     $ok$5$lcssa = $ok$495;$sum_gr$0$lcssa = 0;
    }
    $384 = (($sum_gr$0$lcssa) + ($sum_fr$194))|0;
    $385 = ($sum_gr$0$lcssa|0)>(7680);
    $$ok$55 = $385 ? 0 : $ok$5$lcssa;
    $386 = (($gr$996) + 1)|0;
    $exitcond250 = ($386|0)==($1|0);
    if ($exitcond250) {
     break;
    } else {
     $gr$996 = $386;$ok$495 = $$ok$55;$sum_fr$194 = $384;
    }
   }
   $phitmp = ($$ok$55|0)==(0);
   $ok$4$lcssa = $phitmp;$sum_fr$1$lcssa = $384;
  } else {
   $ok$4$lcssa = 0;$sum_fr$1$lcssa = 0;
  }
 }
 $387 = ($sum_fr$1$lcssa|0)>($max_nbits_fr$1$lcssa|0);
 $388 = $387 | $ok$4$lcssa;
 $brmerge$demorgan = $388 & $12;
 if ($brmerge$demorgan) {
  $389 = ($3|0)>(0);
  if ($389) {
   $390 = $3 << 2;
   $gr$1083$us = 0;
   while(1) {
    $scevgep292 = (($max_bits) + ($gr$1083$us<<3)|0);
    $scevgep290 = (($max_nbits_ch) + ($gr$1083$us<<3)|0);
    _memcpy(($scevgep290|0),($scevgep292|0),($390|0))|0;
    $391 = (($gr$1083$us) + 1)|0;
    $exitcond294 = ($391|0)==($1|0);
    if ($exitcond294) {
     label = 145;
     break;
    } else {
     $gr$1083$us = $391;
    }
   }
  } else {
   $654 = 0;
  }
 } else {
  label = 145;
 }
 if ((label|0) == 145) {
  $392 = ($3|0)>(0);
  if ($392) {
   $ch$1376 = 0;
   while(1) {
    $396 = ((($gfc) + ($ch$1376<<4)|0) + 21328|0);
    $397 = (($ch$1376) + 1)|0;
    $exitcond = ($397|0)==($3|0);
    ;HEAP32[$396+0>>2]=0|0;HEAP32[$396+4>>2]=0|0;HEAP32[$396+8>>2]=0|0;HEAP32[$396+12>>2]=0|0;
    if ($exitcond) {
     $654 = $392;
     break;
    } else {
     $ch$1376 = $397;
    }
   }
  } else {
   $654 = 0;
  }
 }
 L227: do {
  if ($12) {
   if ($654) {
    $gr$1173$us = 0;
    while(1) {
     $ch$1469$us = 0;
     while(1) {
      $394 = (((($gfc) + (($gr$1173$us*10504)|0)|0) + (($ch$1469$us*5252)|0)|0) + 5088|0);
      HEAP32[$394>>2] = 0;
      $395 = (($ch$1469$us) + 1)|0;
      $exitcond287 = ($395|0)==($3|0);
      if ($exitcond287) {
       break;
      } else {
       $ch$1469$us = $395;
      }
     }
     $393 = (($gr$1173$us) + 1)|0;
     $exitcond288 = ($393|0)==($1|0);
     if ($exitcond288) {
      break;
     } else {
      $gr$1173$us = $393;
     }
    }
    if (!($12)) {
     $use_nbits_fr$1$lcssa = 0;
     break;
    }
   }
   $398 = (($gfc) + 304|0);
   $399 = (($gfc) + 36|0);
   $gr$1263 = 0;$use_nbits_fr$165 = 0;
   L237: while(1) {
    $400 = (($use_nbits_gr) + ($gr$1263<<2)|0);
    HEAP32[$400>>2] = 0;
    if ($654) {
     $645 = 0;$ch$1550 = 0;
     while(1) {
      $401 = ((($use_nbits_ch) + ($gr$1263<<3)|0) + ($ch$1550<<2)|0);
      HEAP32[$401>>2] = 0;
      $402 = ((($max_bits) + ($gr$1263<<3)|0) + ($ch$1550<<2)|0);
      $403 = HEAP32[$402>>2]|0;
      $404 = ($403|0)>(0);
      L242: do {
       if ($404) {
        $405 = ((($sfwork_) + (($gr$1263*312)|0)|0) + (($ch$1550*156)|0)|0);
        $406 = (((($that_) + (($gr$1263*72)|0)|0) + (($ch$1550*36)|0)|0) + 16|0);
        $407 = HEAP32[$406>>2]|0;
        $408 = (($407) + 4780|0);
        $409 = HEAP32[$408>>2]|0;
        $i$02$i = 0;$j$01$i = 39;
        while(1) {
         $410 = (((($sfwork_) + (($gr$1263*312)|0)|0) + (($ch$1550*156)|0)|0) + ($i$02$i<<2)|0);
         $411 = HEAP32[$410>>2]|0;
         $412 = ($411|0)<($409|0);
         $413 = $412 ? $411 : $409;
         HEAP32[$410>>2] = $413;
         $414 = (($j$01$i) + -1)|0;
         $415 = (($i$02$i) + 1)|0;
         $416 = ($414|0)==(0);
         if ($416) {
          break;
         } else {
          $i$02$i = $415;$j$01$i = $414;
         }
        }
        $417 = ((($that_) + (($gr$1263*72)|0)|0) + (($ch$1550*36)|0)|0);
        $418 = ((($max_nbits_ch) + ($gr$1263<<3)|0) + ($ch$1550<<2)|0);
        $419 = HEAP32[$418>>2]|0;
        $i$01$i$i = 0;$j$02$i$i = 39;$m$03$i$i = 0;
        while(1) {
         $420 = (((($sfwork_) + (($gr$1263*312)|0)|0) + (($ch$1550*156)|0)|0) + ($i$01$i$i<<2)|0);
         $421 = HEAP32[$420>>2]|0;
         $422 = (255 - ($421))|0;
         $423 = ($m$03$i$i|0)<($422|0);
         $$m$0$i$i = $423 ? $422 : $m$03$i$i;
         $424 = (($j$02$i$i) + -1)|0;
         $425 = (($i$01$i$i) + 1)|0;
         $426 = ($424|0)==(0);
         if ($426) {
          break;
         } else {
          $i$01$i$i = $425;$j$02$i$i = $424;$m$03$i$i = $$m$0$i$i;
         }
        }
        $427 = ((($vbrsfmin_) + (($gr$1263*312)|0)|0) + (($ch$1550*156)|0)|0);
        $428 = HEAP32[$408>>2]|0;
        $429 = ($$m$0$i$i|0)>(0);
        $430 = (((($that_) + (($gr$1263*72)|0)|0) + (($ch$1550*36)|0)|0) + 12|0);
        if ($429) {
         $445 = $407;$bi$0$in$i$us = $$m$0$i$i;$bi_ok$0$i$us = -1;$bo$0$i$us = $$m$0$i$i;$bu$0$i$us = 0;
         while(1) {
          $bi$0$i$us = (($bi$0$in$i$us|0) / 2)&-1;
          $i$03$i$i$us = 0;$j$01$i$i$us = 39;$sfmax$02$i$i$us = 0;
          while(1) {
           $431 = (((($sfwork_) + (($gr$1263*312)|0)|0) + (($ch$1550*156)|0)|0) + ($i$03$i$i$us<<2)|0);
           $432 = HEAP32[$431>>2]|0;
           $433 = (($428) - ($432))|0;
           $434 = Math_imul($433, $bi$0$i$us)|0;
           $435 = (($434|0) / ($$m$0$i$i|0))&-1;
           $436 = (($435) + ($432))|0;
           $437 = ($436|0)<(0);
           if ($437) {
            $x$0$i$i$us = 0;
           } else {
            $438 = ($436|0)>(255);
            $$$i$i$us = $438 ? 255 : $436;
            $x$0$i$i$us = $$$i$i$us;
           }
           $439 = (($wrk$i) + ($i$03$i$i$us<<2)|0);
           HEAP32[$439>>2] = $x$0$i$i$us;
           $440 = ($sfmax$02$i$i$us|0)<($x$0$i$i$us|0);
           $x$0$sfmax$0$i$i$us = $440 ? $x$0$i$i$us : $sfmax$02$i$i$us;
           $441 = (($j$01$i$i$us) + -1)|0;
           $442 = (($i$03$i$i$us) + 1)|0;
           $443 = ($441|0)==(0);
           if ($443) {
            break;
           } else {
            $i$03$i$i$us = $442;$j$01$i$i$us = $441;$sfmax$02$i$i$us = $x$0$sfmax$0$i$i$us;
           }
          }
          $444 = (($445) + 4764|0);
          $446 = +HEAPF32[$444>>2];
          $447 = HEAP32[$417>>2]|0;
          FUNCTION_TABLE_viiii[$447 & 7]($417,$wrk$i,$427,$x$0$sfmax$0$i$i$us);
          $448 = HEAP32[$430>>2]|0;
          $449 = HEAP32[$406>>2]|0;
          $450 = (_scale_bitcount($448,$449)|0);
          $451 = ($450|0)==(0);
          if (!($451)) {
           label = 170;
           break L237;
          }
          $452 = (_quantizeAndCountBits($417)|0);
          $453 = HEAP32[$406>>2]|0;
          $454 = (($453) + 4844|0);
          $455 = HEAP32[$454>>2]|0;
          $456 = (($455) + ($452))|0;
          $457 = (($453) + 4764|0);
          HEAPF32[$457>>2] = $446;
          $458 = ($456|0)>($419|0);
          $459 = (($bi$0$i$us) + -1)|0;
          $460 = (($bi$0$i$us) + 1)|0;
          $bo$1$i$us = $458 ? $bo$0$i$us : $459;
          $bu$1$i$us = $458 ? $460 : $bu$0$i$us;
          $bi_ok$1$i$us = $458 ? $bi_ok$0$i$us : $bi$0$i$us;
          $461 = ($bu$1$i$us|0)>($bo$1$i$us|0);
          $462 = (($bu$1$i$us) + ($bo$1$i$us))|0;
          if ($461) {
           $$lcssa = $453;$$lcssa22 = $446;$$lcssa23 = $457;$bi$0$i$lcssa21 = $bi$0$i$us;$bi_ok$1$i$lcssa = $bi_ok$1$i$us;
           break;
          } else {
           $445 = $453;$bi$0$in$i$us = $462;$bi_ok$0$i$us = $bi_ok$1$i$us;$bo$0$i$us = $bo$1$i$us;$bu$0$i$us = $bu$1$i$us;
          }
         }
        } else {
         $470 = $407;$bi$0$in$i = $$m$0$i$i;$bi_ok$0$i = -1;$bo$0$i = $$m$0$i$i;$bu$0$i = 0;
         while(1) {
          $bi$0$i = (($bi$0$in$i|0) / 2)&-1;
          _memcpy(($wrk$i|0),($405|0),156)|0;
          $i$18$i$i = 0;$j$16$i$i = 39;$sfmax$27$i$i = 0;
          while(1) {
           $463 = (((($sfwork_) + (($gr$1263*312)|0)|0) + (($ch$1550*156)|0)|0) + ($i$18$i$i<<2)|0);
           $464 = HEAP32[$463>>2]|0;
           $465 = ($sfmax$27$i$i|0)<($464|0);
           $$sfmax$2$i$i = $465 ? $464 : $sfmax$27$i$i;
           $466 = (($j$16$i$i) + -1)|0;
           $467 = (($i$18$i$i) + 1)|0;
           $468 = ($466|0)==(0);
           if ($468) {
            break;
           } else {
            $i$18$i$i = $467;$j$16$i$i = $466;$sfmax$27$i$i = $$sfmax$2$i$i;
           }
          }
          $469 = (($470) + 4764|0);
          $471 = +HEAPF32[$469>>2];
          $472 = HEAP32[$417>>2]|0;
          FUNCTION_TABLE_viiii[$472 & 7]($417,$wrk$i,$427,$$sfmax$2$i$i);
          $473 = HEAP32[$430>>2]|0;
          $474 = HEAP32[$406>>2]|0;
          $475 = (_scale_bitcount($473,$474)|0);
          $476 = ($475|0)==(0);
          if (!($476)) {
           label = 170;
           break L237;
          }
          $478 = (_quantizeAndCountBits($417)|0);
          $479 = HEAP32[$406>>2]|0;
          $480 = (($479) + 4844|0);
          $481 = HEAP32[$480>>2]|0;
          $482 = (($481) + ($478))|0;
          $483 = (($479) + 4764|0);
          HEAPF32[$483>>2] = $471;
          $484 = ($482|0)>($419|0);
          $485 = (($bi$0$i) + -1)|0;
          $486 = (($bi$0$i) + 1)|0;
          $bo$1$i = $484 ? $bo$0$i : $485;
          $bu$1$i = $484 ? $486 : $bu$0$i;
          $bi_ok$1$i = $484 ? $bi_ok$0$i : $bi$0$i;
          $487 = ($bu$1$i|0)>($bo$1$i|0);
          $488 = (($bu$1$i) + ($bo$1$i))|0;
          if ($487) {
           $$lcssa = $479;$$lcssa22 = $471;$$lcssa23 = $483;$bi$0$i$lcssa21 = $bi$0$i;$bi_ok$1$i$lcssa = $bi_ok$1$i;
           break;
          } else {
           $470 = $479;$bi$0$in$i = $488;$bi_ok$0$i = $bi_ok$1$i;$bo$0$i = $bo$1$i;$bu$0$i = $bu$1$i;
          }
         }
        }
        $489 = ($bi_ok$1$i$lcssa|0)>(-1);
        if ($489) {
         $490 = ($bi$0$i$lcssa21|0)==($bi_ok$1$i$lcssa|0);
         if ($490) {
          break;
         }
         if ($429) {
          $i$03$i2$i = 0;$j$01$i4$i = 39;$sfmax$02$i3$i = 0;
          while(1) {
           $491 = (((($sfwork_) + (($gr$1263*312)|0)|0) + (($ch$1550*156)|0)|0) + ($i$03$i2$i<<2)|0);
           $492 = HEAP32[$491>>2]|0;
           $493 = (($428) - ($492))|0;
           $494 = Math_imul($493, $bi_ok$1$i$lcssa)|0;
           $495 = (($494|0) / ($$m$0$i$i|0))&-1;
           $496 = (($495) + ($492))|0;
           $497 = ($496|0)<(0);
           if ($497) {
            $x$0$i7$i = 0;
           } else {
            $498 = ($496|0)>(255);
            $$$i6$i = $498 ? 255 : $496;
            $x$0$i7$i = $$$i6$i;
           }
           $499 = (($wrk$i) + ($i$03$i2$i<<2)|0);
           HEAP32[$499>>2] = $x$0$i7$i;
           $500 = ($sfmax$02$i3$i|0)<($x$0$i7$i|0);
           $x$0$sfmax$0$i8$i = $500 ? $x$0$i7$i : $sfmax$02$i3$i;
           $501 = (($j$01$i4$i) + -1)|0;
           $502 = (($i$03$i2$i) + 1)|0;
           $503 = ($501|0)==(0);
           if ($503) {
            $518 = $$lcssa22;$sfmax$4$i14$i = $x$0$sfmax$0$i8$i;
            break;
           } else {
            $i$03$i2$i = $502;$j$01$i4$i = $501;$sfmax$02$i3$i = $x$0$sfmax$0$i8$i;
           }
          }
         } else {
          _memcpy(($wrk$i|0),($405|0),156)|0;
          $i$18$i9$i = 0;$j$16$i11$i = 39;$sfmax$27$i10$i = 0;
          while(1) {
           $504 = (((($sfwork_) + (($gr$1263*312)|0)|0) + (($ch$1550*156)|0)|0) + ($i$18$i9$i<<2)|0);
           $505 = HEAP32[$504>>2]|0;
           $506 = ($sfmax$27$i10$i|0)<($505|0);
           $$sfmax$2$i12$i = $506 ? $505 : $sfmax$27$i10$i;
           $507 = (($j$16$i11$i) + -1)|0;
           $508 = (($i$18$i9$i) + 1)|0;
           $509 = ($507|0)==(0);
           if ($509) {
            break;
           } else {
            $i$18$i9$i = $508;$j$16$i11$i = $507;$sfmax$27$i10$i = $$sfmax$2$i12$i;
           }
          }
          $$pre$i = +HEAPF32[$$lcssa23>>2];
          $518 = $$pre$i;$sfmax$4$i14$i = $$sfmax$2$i12$i;
         }
         $510 = HEAP32[$417>>2]|0;
         FUNCTION_TABLE_viiii[$510 & 7]($417,$wrk$i,$427,$sfmax$4$i14$i);
         $511 = HEAP32[$430>>2]|0;
         $512 = HEAP32[$406>>2]|0;
         $513 = (_scale_bitcount($511,$512)|0);
         $514 = ($513|0)==(0);
         if (!($514)) {
          label = 182;
          break L237;
         }
         (_quantizeAndCountBits($417)|0);
         $516 = HEAP32[$406>>2]|0;
         $517 = (($516) + 4764|0);
         HEAPF32[$517>>2] = $518;
         break;
        }
        $519 = (($428) + 255)|0;
        $533 = $$lcssa;$655 = $$lcssa22;$bi2$0$in$i = $519;$bi_ok3$0$i = -1;$bo5$0$i = 255;$bu4$0$i = $428;
        while(1) {
         $bi2$0$i = (($bi2$0$in$i|0) / 2)&-1;
         do {
          if ($429) {
           $520 = ($bi2$0$in$i|0)<(-1);
           $521 = ($bi2$0$i|0)>(255);
           $$$i22$i = $521 ? 255 : $bi2$0$i;
           if ($520) {
            _memset(($wrk$i|0),0,156)|0;
            $546 = $655;$sfmax$4$i30$i = 0;
            break;
           } else {
            $i$03$i18$i = 0;$j$01$i20$i = 39;$sfmax$02$i19$i = 0;
            while(1) {
             $522 = (($wrk$i) + ($i$03$i18$i<<2)|0);
             HEAP32[$522>>2] = $$$i22$i;
             $523 = ($sfmax$02$i19$i|0)<($$$i22$i|0);
             $x$0$sfmax$0$i24$i = $523 ? $$$i22$i : $sfmax$02$i19$i;
             $524 = (($j$01$i20$i) + -1)|0;
             $525 = (($i$03$i18$i) + 1)|0;
             $526 = ($524|0)==(0);
             if ($526) {
              $546 = $655;$sfmax$4$i30$i = $x$0$sfmax$0$i24$i;
              break;
             } else {
              $i$03$i18$i = $525;$j$01$i20$i = $524;$sfmax$02$i19$i = $x$0$sfmax$0$i24$i;
             }
            }
           }
          } else {
           _memcpy(($wrk$i|0),($405|0),156)|0;
           $i$18$i25$i = 0;$j$16$i27$i = 39;$sfmax$27$i26$i = 0;
           while(1) {
            $527 = (((($sfwork_) + (($gr$1263*312)|0)|0) + (($ch$1550*156)|0)|0) + ($i$18$i25$i<<2)|0);
            $528 = HEAP32[$527>>2]|0;
            $529 = ($sfmax$27$i26$i|0)<($528|0);
            $$sfmax$2$i28$i = $529 ? $528 : $sfmax$27$i26$i;
            $530 = (($j$16$i27$i) + -1)|0;
            $531 = (($i$18$i25$i) + 1)|0;
            $532 = ($530|0)==(0);
            if ($532) {
             break;
            } else {
             $i$18$i25$i = $531;$j$16$i27$i = $530;$sfmax$27$i26$i = $$sfmax$2$i28$i;
            }
           }
           $$phi$trans$insert$i = (($533) + 4764|0);
           $$pre83$i = +HEAPF32[$$phi$trans$insert$i>>2];
           $546 = $$pre83$i;$sfmax$4$i30$i = $$sfmax$2$i28$i;
          }
         } while(0);
         $534 = HEAP32[$417>>2]|0;
         FUNCTION_TABLE_viiii[$534 & 7]($417,$wrk$i,$427,$sfmax$4$i30$i);
         $535 = HEAP32[$430>>2]|0;
         $536 = HEAP32[$406>>2]|0;
         $537 = (_scale_bitcount($535,$536)|0);
         $538 = ($537|0)==(0);
         if (!($538)) {
          label = 193;
          break L237;
         }
         $540 = (_quantizeAndCountBits($417)|0);
         $541 = HEAP32[$406>>2]|0;
         $542 = (($541) + 4844|0);
         $543 = HEAP32[$542>>2]|0;
         $544 = (($543) + ($540))|0;
         $545 = (($541) + 4764|0);
         HEAPF32[$545>>2] = $546;
         $547 = ($544|0)>($419|0);
         $548 = (($bi2$0$i) + -1)|0;
         $549 = (($bi2$0$i) + 1)|0;
         $bi_ok3$1$i = $547 ? $bi_ok3$0$i : $bi2$0$i;
         $bu4$1$i = $547 ? $549 : $bu4$0$i;
         $bo5$1$i = $547 ? $bo5$0$i : $548;
         $550 = ($bu4$1$i|0)>($bo5$1$i|0);
         $551 = (($bu4$1$i) + ($bo5$1$i))|0;
         if ($550) {
          break;
         } else {
          $533 = $541;$655 = $546;$bi2$0$in$i = $551;$bi_ok3$0$i = $bi_ok3$1$i;$bo5$0$i = $bo5$1$i;$bu4$0$i = $bu4$1$i;
         }
        }
        $552 = ($bi_ok3$1$i|0)>(-1);
        if ($552) {
         $553 = ($bi2$0$i|0)==($bi_ok3$1$i|0);
         if ($553) {
          break;
         }
         do {
          if ($429) {
           $554 = ($bi_ok3$1$i|0)<(0);
           $555 = ($bi_ok3$1$i|0)>(255);
           $$$i38$i = $555 ? 255 : $bi_ok3$1$i;
           if ($554) {
            _memset(($wrk$i|0),0,156)|0;
            $575 = $546;$sfmax$4$i46$i = 0;
            break;
           } else {
            $i$03$i34$i = 0;$j$01$i36$i = 39;$sfmax$02$i35$i = 0;
            while(1) {
             $556 = (($wrk$i) + ($i$03$i34$i<<2)|0);
             HEAP32[$556>>2] = $$$i38$i;
             $557 = ($sfmax$02$i35$i|0)<($$$i38$i|0);
             $x$0$sfmax$0$i40$i = $557 ? $$$i38$i : $sfmax$02$i35$i;
             $558 = (($j$01$i36$i) + -1)|0;
             $559 = (($i$03$i34$i) + 1)|0;
             $560 = ($558|0)==(0);
             if ($560) {
              $575 = $546;$sfmax$4$i46$i = $x$0$sfmax$0$i40$i;
              break;
             } else {
              $i$03$i34$i = $559;$j$01$i36$i = $558;$sfmax$02$i35$i = $x$0$sfmax$0$i40$i;
             }
            }
           }
          } else {
           _memcpy(($wrk$i|0),($405|0),156)|0;
           $i$18$i41$i = 0;$j$16$i43$i = 39;$sfmax$27$i42$i = 0;
           while(1) {
            $561 = (((($sfwork_) + (($gr$1263*312)|0)|0) + (($ch$1550*156)|0)|0) + ($i$18$i41$i<<2)|0);
            $562 = HEAP32[$561>>2]|0;
            $563 = ($sfmax$27$i42$i|0)<($562|0);
            $$sfmax$2$i44$i = $563 ? $562 : $sfmax$27$i42$i;
            $564 = (($j$16$i43$i) + -1)|0;
            $565 = (($i$18$i41$i) + 1)|0;
            $566 = ($564|0)==(0);
            if ($566) {
             break;
            } else {
             $i$18$i41$i = $565;$j$16$i43$i = $564;$sfmax$27$i42$i = $$sfmax$2$i44$i;
            }
           }
           $$pre84$i = +HEAPF32[$545>>2];
           $575 = $$pre84$i;$sfmax$4$i46$i = $$sfmax$2$i44$i;
          }
         } while(0);
         $567 = HEAP32[$417>>2]|0;
         FUNCTION_TABLE_viiii[$567 & 7]($417,$wrk$i,$427,$sfmax$4$i46$i);
         $568 = HEAP32[$430>>2]|0;
         $569 = HEAP32[$406>>2]|0;
         $570 = (_scale_bitcount($568,$569)|0);
         $571 = ($570|0)==(0);
         if (!($571)) {
          label = 205;
          break L237;
         }
         (_quantizeAndCountBits($417)|0);
         $573 = HEAP32[$406>>2]|0;
         $574 = (($573) + 4764|0);
         HEAPF32[$574>>2] = $575;
         break;
        }
        $576 = (($541) + 4780|0);
        $577 = HEAP32[$576>>2]|0;
        $578 = ($577|0)>(512);
        if ($578) {
         $616 = $541;$curr$0$lcssa$i$i = $577;$gain_ok$0$lcssa$i$i = 1024;
        } else {
         $656 = $541;$gain_ok$0$ph25$i$i = 1024;$l$0$ph26$i$i = $577;$r$0$ph27$i$i = 512;
         while(1) {
          $583 = $656;$gain_ok$018$i$i = $gain_ok$0$ph25$i$i;$r$019$i$i = $r$0$ph27$i$i;
          while(1) {
           $579 = (($r$019$i$i) + ($l$0$ph26$i$i))|0;
           $580 = $579 >> 1;
           $581 = (($580) - ($577))|0;
           $582 = (($583) + 4764|0);
           $584 = +HEAPF32[$582>>2];
           $i$02$i$i$i = 0;$vbrmax$01$i$i$i = 0;
           while(1) {
            $585 = (($wrk$i) + ($i$02$i$i$i<<2)|0);
            $586 = HEAP32[$585>>2]|0;
            $587 = (($586) + ($581))|0;
            $588 = (((($vbrsfmin_) + (($gr$1263*312)|0)|0) + (($ch$1550*156)|0)|0) + ($i$02$i$i$i<<2)|0);
            $589 = HEAP32[$588>>2]|0;
            $590 = ($587|0)<($589|0);
            $$$i$i$i = $590 ? $589 : $587;
            $591 = ($$$i$i$i|0)>(255);
            $gain$1$i$i$i = $591 ? 255 : $$$i$i$i;
            $592 = ($vbrmax$01$i$i$i|0)<($gain$1$i$i$i|0);
            $gain$1$vbrmax$0$i$i$i = $592 ? $gain$1$i$i$i : $vbrmax$01$i$i$i;
            $593 = (($sftemp$i$i$i) + ($i$02$i$i$i<<2)|0);
            HEAP32[$593>>2] = $gain$1$i$i$i;
            $594 = (($i$02$i$i$i) + 1)|0;
            $exitcond$i$i$i = ($594|0)==(39);
            if ($exitcond$i$i$i) {
             break;
            } else {
             $i$02$i$i$i = $594;$vbrmax$01$i$i$i = $gain$1$vbrmax$0$i$i$i;
            }
           }
           $595 = HEAP32[$417>>2]|0;
           FUNCTION_TABLE_viiii[$595 & 7]($417,$sftemp$i$i$i,$427,$gain$1$vbrmax$0$i$i$i);
           $596 = HEAP32[$430>>2]|0;
           $597 = HEAP32[$406>>2]|0;
           $598 = (_scale_bitcount($596,$597)|0);
           $599 = ($598|0)==(0);
           if (!($599)) {
            label = 212;
            break L237;
           }
           $601 = (_quantizeAndCountBits($417)|0);
           $602 = HEAP32[$406>>2]|0;
           $603 = (($602) + 4764|0);
           HEAPF32[$603>>2] = $584;
           $604 = ($601|0)==(0);
           if (!($604)) {
            $605 = HEAP32[$542>>2]|0;
            $606 = (($605) + ($601))|0;
            $607 = ($606|0)<($419|0);
            if (!($607)) {
             break;
            }
           }
           $608 = (($580) + -1)|0;
           $609 = ($l$0$ph26$i$i|0)>($608|0);
           if ($609) {
            break L242;
           } else {
            $583 = $602;$gain_ok$018$i$i = $580;$r$019$i$i = $608;
           }
          }
          $610 = (($580) + 1)|0;
          $611 = ($gain_ok$018$i$i|0)==(1024);
          $$gain_ok$0$i$i = $611 ? $580 : $gain_ok$018$i$i;
          $612 = ($580|0)<($r$019$i$i|0);
          if ($612) {
           $656 = $602;$gain_ok$0$ph25$i$i = $$gain_ok$0$i$i;$l$0$ph26$i$i = $610;$r$0$ph27$i$i = $r$019$i$i;
          } else {
           $616 = $602;$curr$0$lcssa$i$i = $580;$gain_ok$0$lcssa$i$i = $$gain_ok$0$i$i;
           break;
          }
         }
        }
        $613 = ($gain_ok$0$lcssa$i$i|0)==($curr$0$lcssa$i$i|0);
        if (!($613)) {
         $614 = (($gain_ok$0$lcssa$i$i) - ($577))|0;
         $615 = (($616) + 4764|0);
         $617 = +HEAPF32[$615>>2];
         $i$02$i2$i$i = 0;$vbrmax$01$i3$i$i = 0;
         while(1) {
          $618 = (($wrk$i) + ($i$02$i2$i$i<<2)|0);
          $619 = HEAP32[$618>>2]|0;
          $620 = (($619) + ($614))|0;
          $621 = (((($vbrsfmin_) + (($gr$1263*312)|0)|0) + (($ch$1550*156)|0)|0) + ($i$02$i2$i$i<<2)|0);
          $622 = HEAP32[$621>>2]|0;
          $623 = ($620|0)<($622|0);
          $$$i4$i$i = $623 ? $622 : $620;
          $624 = ($$$i4$i$i|0)>(255);
          $gain$1$i5$i$i = $624 ? 255 : $$$i4$i$i;
          $625 = ($vbrmax$01$i3$i$i|0)<($gain$1$i5$i$i|0);
          $gain$1$vbrmax$0$i6$i$i = $625 ? $gain$1$i5$i$i : $vbrmax$01$i3$i$i;
          $626 = (($sftemp$i$i$i) + ($i$02$i2$i$i<<2)|0);
          HEAP32[$626>>2] = $gain$1$i5$i$i;
          $627 = (($i$02$i2$i$i) + 1)|0;
          $exitcond$i7$i$i = ($627|0)==(39);
          if ($exitcond$i7$i$i) {
           break;
          } else {
           $i$02$i2$i$i = $627;$vbrmax$01$i3$i$i = $gain$1$vbrmax$0$i6$i$i;
          }
         }
         $628 = HEAP32[$417>>2]|0;
         FUNCTION_TABLE_viiii[$628 & 7]($417,$sftemp$i$i$i,$427,$gain$1$vbrmax$0$i6$i$i);
         $629 = HEAP32[$430>>2]|0;
         $630 = HEAP32[$406>>2]|0;
         $631 = (_scale_bitcount($629,$630)|0);
         $632 = ($631|0)==(0);
         if (!($632)) {
          label = 221;
          break L237;
         }
         (_quantizeAndCountBits($417)|0);
         $634 = HEAP32[$406>>2]|0;
         $635 = (($634) + 4764|0);
         HEAPF32[$635>>2] = $617;
        }
       }
      } while(0);
      _best_scalefac_store($gfc,$gr$1263,$ch$1550,$398);
      $636 = HEAP32[$399>>2]|0;
      $637 = ($636|0)==(1);
      if ($637) {
       $638 = (((($gfc) + (($gr$1263*10504)|0)|0) + (($ch$1550*5252)|0)|0) + 304|0);
       _best_huffman_divide($gfc,$638);
      }
      $639 = (((($gfc) + (($gr$1263*10504)|0)|0) + (($ch$1550*5252)|0)|0) + 5072|0);
      $640 = HEAP32[$639>>2]|0;
      $641 = (((($gfc) + (($gr$1263*10504)|0)|0) + (($ch$1550*5252)|0)|0) + 5148|0);
      $642 = HEAP32[$641>>2]|0;
      $643 = (($642) + ($640))|0;
      HEAP32[$401>>2] = $643;
      $644 = (($645) + ($643))|0;
      HEAP32[$400>>2] = $644;
      $646 = (($ch$1550) + 1)|0;
      $647 = ($646|0)<($3|0);
      if ($647) {
       $645 = $644;$ch$1550 = $646;
      } else {
       $649 = $644;
       break;
      }
     }
    } else {
     $649 = 0;
    }
    $648 = (($649) + ($use_nbits_fr$165))|0;
    $650 = (($gr$1263) + 1)|0;
    $651 = ($650|0)<($1|0);
    if ($651) {
     $gr$1263 = $650;$use_nbits_fr$165 = $648;
    } else {
     $use_nbits_fr$1$lcssa = $648;
     break L227;
    }
   }
   if ((label|0) == 170) {
    $477 = HEAP32[$430>>2]|0;
    _lame_errorf($477,144648,$vararg_buffer13);
    _exit(-1);
    // unreachable;
   }
   else if ((label|0) == 182) {
    $515 = HEAP32[$430>>2]|0;
    _lame_errorf($515,144648,$vararg_buffer13);
    _exit(-1);
    // unreachable;
   }
   else if ((label|0) == 193) {
    $539 = HEAP32[$430>>2]|0;
    _lame_errorf($539,144648,$vararg_buffer13);
    _exit(-1);
    // unreachable;
   }
   else if ((label|0) == 205) {
    $572 = HEAP32[$430>>2]|0;
    _lame_errorf($572,144648,$vararg_buffer13);
    _exit(-1);
    // unreachable;
   }
   else if ((label|0) == 212) {
    $600 = HEAP32[$430>>2]|0;
    _lame_errorf($600,144648,$vararg_buffer13);
    _exit(-1);
    // unreachable;
   }
   else if ((label|0) == 221) {
    $633 = HEAP32[$430>>2]|0;
    _lame_errorf($633,144648,$vararg_buffer13);
    _exit(-1);
    // unreachable;
   }
  } else {
   $use_nbits_fr$1$lcssa = 0;
  }
 } while(0);
 $652 = ($use_nbits_fr$1$lcssa|0)>($max_nbits_fr$1$lcssa|0);
 if ($652) {
  HEAP32[$vararg_buffer13>>2] = $max_nbits_fr$1$lcssa;
  $vararg_ptr15 = (($vararg_buffer13) + 4|0);
  HEAP32[$vararg_ptr15>>2] = $use_nbits_fr$1$lcssa;
  _lame_errorf($gfc,144560,$vararg_buffer13);
  _exit(-1);
  // unreachable;
 } else {
  $$0 = $use_nbits_fr$1$lcssa;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _guess_scalefac_x34($xr,$xr34,$l3_xmin,$bw,$sf_min) {
 $xr = $xr|0;
 $xr34 = $xr34|0;
 $l3_xmin = +$l3_xmin;
 $bw = $bw|0;
 $sf_min = $sf_min|0;
 var $$ = 0, $0 = 0.0, $1 = 0.0, $10 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+($bw|0));
 $1 = $l3_xmin / $0;
 $2 = (+_log10f((+$1)));
 $3 = $2 * 5.79914236068725585938;
 $4 = $3 + -0.5;
 $5 = (~~(($4)));
 $6 = (($5) + 210)|0;
 $7 = $sf_min&255;
 $8 = ($6|0)<($7|0);
 if ($8) {
  STACKTOP = sp;return ($sf_min|0);
 } else {
  $9 = ($6|0)>(254);
  $10 = $6&255;
  $$ = $9 ? -1 : $10;
  STACKTOP = sp;return ($$|0);
 }
 return 0|0;
}
function _find_scalefac_x34($xr,$xr34,$l3_xmin,$bw,$sf_min) {
 $xr = $xr|0;
 $xr34 = $xr34|0;
 $l3_xmin = +$l3_xmin;
 $bw = $bw|0;
 $sf_min = $sf_min|0;
 var $$phi$trans$insert$i = 0, $$phi$trans$insert3$i = 0, $$phi$trans$insert5$i = 0, $$pre$i = 0.0, $$pre4$i = 0.0, $$pre6$i = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $cond$i = 0, $delsf$01 = 0, $did_it = 0, $i$05 = 0, $phitmp = 0, $seen_good_one$04 = 0, $seen_good_one$1 = 0, $sf$0$sf_ok$0 = 0, $sf$07 = 0, $sf$1 = 0, $sf$1$in = 0, $sf$3 = 0, $sf_ok$06 = 0, $sf_ok$1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2048|0;
 $did_it = sp;
 _memset(($did_it|0),0,2048)|0;
 $delsf$01 = 64;$i$05 = 0;$seen_good_one$04 = 0;$sf$07 = -128;$sf_ok$06 = -1;
 while(1) {
  $0 = $sf$07&255;
  $1 = ($sf$07&255)>($sf_min&255);
  L3: do {
   if ($1) {
    $4 = (($did_it) + ($0<<3)|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = ($5|0)==(0);
    if ($6) {
     HEAP32[$4>>2] = 1;
     $7 = (+_calc_sfb_noise_x34($xr,$xr34,$bw,$sf$07));
     $8 = ((($did_it) + ($0<<3)|0) + 4|0);
     HEAPF32[$8>>2] = $7;
     $10 = $7;
    } else {
     $$phi$trans$insert$i = ((($did_it) + ($0<<3)|0) + 4|0);
     $$pre$i = +HEAPF32[$$phi$trans$insert$i>>2];
     $10 = $$pre$i;
    }
    $9 = $10 > $l3_xmin;
    do {
     if (!($9)) {
      $cond$i = ($sf$07<<24>>24)==(-1);
      if ($cond$i) {
       label = 14;
      } else {
       $11 = (($0) + 1)|0;
       $12 = $11 & 255;
       $13 = (($did_it) + ($12<<3)|0);
       $14 = HEAP32[$13>>2]|0;
       $15 = ($14|0)==(0);
       if ($15) {
        $16 = $11&255;
        HEAP32[$13>>2] = 1;
        $17 = (+_calc_sfb_noise_x34($xr,$xr34,$bw,$16));
        $18 = ((($did_it) + ($12<<3)|0) + 4|0);
        HEAPF32[$18>>2] = $17;
        $20 = $17;
       } else {
        $$phi$trans$insert5$i = ((($did_it) + ($12<<3)|0) + 4|0);
        $$pre6$i = +HEAPF32[$$phi$trans$insert5$i>>2];
        $20 = $$pre6$i;
       }
       $19 = $20 > $l3_xmin;
       if ($19) {
        break;
       }
       $21 = ($sf$07<<24>>24)==(0);
       if (!($21)) {
        label = 14;
       }
      }
      if ((label|0) == 14) {
       label = 0;
       $22 = (($0) + 255)|0;
       $23 = $22 & 255;
       $24 = (($did_it) + ($23<<3)|0);
       $25 = HEAP32[$24>>2]|0;
       $26 = ($25|0)==(0);
       if ($26) {
        $27 = $22&255;
        HEAP32[$24>>2] = 1;
        $28 = (+_calc_sfb_noise_x34($xr,$xr34,$bw,$27));
        $29 = ((($did_it) + ($23<<3)|0) + 4|0);
        HEAPF32[$29>>2] = $28;
        $31 = $28;
       } else {
        $$phi$trans$insert3$i = ((($did_it) + ($23<<3)|0) + 4|0);
        $$pre4$i = +HEAPF32[$$phi$trans$insert3$i>>2];
        $31 = $$pre4$i;
       }
       $30 = $31 > $l3_xmin;
       if ($30) {
        break;
       }
      }
      $34 = (($0) + ($delsf$01))|0;
      $seen_good_one$1 = 1;$sf$1$in = $34;$sf_ok$1 = $sf$07;
      break L3;
     }
    } while(0);
    $32 = $delsf$01 & 255;
    $33 = (($0) - ($32))|0;
    $seen_good_one$1 = $seen_good_one$04;$sf$1$in = $33;$sf_ok$1 = $sf_ok$06;
   } else {
    $2 = $delsf$01 & 255;
    $3 = (($0) + ($2))|0;
    $seen_good_one$1 = $seen_good_one$04;$sf$1$in = $3;$sf_ok$1 = $sf_ok$06;
   }
  } while(0);
  $sf$1 = $sf$1$in&255;
  $35 = (($i$05) + 1)<<24>>24;
  $phitmp = $delsf$01 >> 1;
  $36 = ($35&255)<(8);
  if ($36) {
   $delsf$01 = $phitmp;$i$05 = $35;$seen_good_one$04 = $seen_good_one$1;$sf$07 = $sf$1;$sf_ok$06 = $sf_ok$1;
  } else {
   break;
  }
 }
 $37 = ($seen_good_one$1<<24>>24)==(0);
 $sf$0$sf_ok$0 = $37 ? $sf$1 : $sf_ok$1;
 $38 = ($sf$0$sf_ok$0&255)>($sf_min&255);
 $sf$3 = $38 ? $sf$0$sf_ok$0 : $sf_min;
 STACKTOP = sp;return ($sf$3|0);
}
function _short_block_constrain($that,$vbrsf,$vbrsfmin,$vbrmax) {
 $that = $that|0;
 $vbrsf = $vbrsf|0;
 $vbrsfmin = $vbrsfmin|0;
 $vbrmax = $vbrmax|0;
 var $$ = 0, $$$i = 0, $$delta$0 = 0, $$maxover1$0 = 0, $$maxsf1$0$i = 0, $$maxsf2$0$i = 0, $$min_sbg$0$i = 0, $$neg1 = 0, $$pr$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $delta$0$lcssa = 0, $delta$05 = 0, $exitcond = 0, $exitcond$i = 0, $exitcond11 = 0, $i$016$i = 0, $maxover0$0$lcssa = 0;
 var $maxover0$07 = 0, $maxover0$1 = 0, $maxover1$0$lcssa = 0, $maxover1$06 = 0, $maxsf1$0$lcssa$i = 0, $maxsf1$05$i = 0, $maxsf2$0$lcssa$i = 0, $maxsf2$010$i = 0, $min_sbg$015$i = 0, $minsf$0$lcssa$i = 0, $minsf$04$i = 0, $minsf$1$i = 0, $minsf$2$lcssa$i = 0, $minsf$29$i = 0, $minsf$3$i = 0, $mover$0 = 0, $mover$0$delta$0 = 0, $sf_temp = 0, $sfb$0$lcssa$i = 0, $sfb$06$i = 0;
 var $sfb$08 = 0, $sfb$111$i = 0, $sfb$14 = 0, $sfb$22$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0;
 $sf_temp = sp;
 $0 = (($that) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($that) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($that) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($1) + 4864|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(0);
 if ($8) {
  $delta$05 = 0;$maxover0$07 = 0;$maxover1$06 = 0;$sfb$08 = 0;
  while(1) {
   $9 = (($vbrsf) + ($sfb$08<<2)|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($vbrmax) - ($10))|0;
   $12 = ($delta$05|0)<($11|0);
   $$delta$0 = $12 ? $11 : $delta$05;
   $13 = (144760 + ($sfb$08)|0);
   $14 = HEAP8[$13>>0]|0;
   $15 = $14&255;
   $16 = $15 << 1;
   $$neg1 = (($11) + -56)|0;
   $17 = (($$neg1) - ($16))|0;
   $18 = $15 << 2;
   $19 = (($$neg1) - ($18))|0;
   $20 = ($maxover0$07|0)<($17|0);
   $maxover0$1 = $20 ? $17 : $maxover0$07;
   $21 = ($maxover1$06|0)<($19|0);
   $$maxover1$0 = $21 ? $19 : $maxover1$06;
   $22 = (($sfb$08) + 1)|0;
   $exitcond11 = ($22|0)==($7|0);
   if ($exitcond11) {
    $delta$0$lcssa = $$delta$0;$maxover0$0$lcssa = $maxover0$1;$maxover1$0$lcssa = $$maxover1$0;
    break;
   } else {
    $delta$05 = $$delta$0;$maxover0$07 = $maxover0$1;$maxover1$06 = $$maxover1$0;$sfb$08 = $22;
   }
  }
 } else {
  $delta$0$lcssa = 0;$maxover0$0$lcssa = 0;$maxover1$0$lcssa = 0;
 }
 $23 = (($3) + 28|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(2);
 if ($25) {
  $26 = ($maxover0$0$lcssa|0)<($maxover1$0$lcssa|0);
  $27 = $26 ? $maxover0$0$lcssa : $maxover1$0$lcssa;
  $mover$0 = $27;
 } else {
  $mover$0 = $maxover0$0$lcssa;
 }
 $28 = ($delta$0$lcssa|0)>($mover$0|0);
 $mover$0$delta$0 = $28 ? $mover$0 : $delta$0$lcssa;
 $29 = (($vbrmax) - ($mover$0$delta$0))|0;
 $30 = ($maxover0$0$lcssa|0)==($mover$0|0);
 if ($30) {
  $31 = (($1) + 4836|0);
  HEAP32[$31>>2] = 0;
 } else {
  $32 = ($maxover1$0$lcssa|0)==($mover$0|0);
  if ($32) {
   $33 = (($1) + 4836|0);
   HEAP32[$33>>2] = 1;
  }
 }
 $34 = ($29|0)<($5|0);
 $$ = $34 ? $5 : $29;
 $35 = (($1) + 4780|0);
 HEAP32[$35>>2] = $$;
 $36 = ($$|0)<(0);
 if ($36) {
  HEAP32[$35>>2] = 0;
 } else {
  $37 = ($$|0)>(255);
  if ($37) {
   HEAP32[$35>>2] = 255;
  }
 }
 $sfb$14 = 0;
 while(1) {
  $38 = (($vbrsf) + ($sfb$14<<2)|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (($39) - ($$))|0;
  $41 = (($sf_temp) + ($sfb$14<<2)|0);
  HEAP32[$41>>2] = $40;
  $42 = (($sfb$14) + 1)|0;
  $exitcond = ($42|0)==(39);
  if ($exitcond) {
   break;
  } else {
   $sfb$14 = $42;
  }
 }
 $43 = (($1) + 4836|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ($44|0)==(0);
 $46 = $45 ? 1 : 2;
 $47 = ($7>>>0)<(18);
 $$$i = $47 ? $7 : 18;
 $48 = 15 << $46;
 $49 = 7 << $46;
 $i$016$i = 0;$min_sbg$015$i = 7;
 while(1) {
  $50 = ($i$016$i>>>0)<($$$i>>>0);
  if ($50) {
   $maxsf1$05$i = 0;$minsf$04$i = 1000;$sfb$06$i = $i$016$i;
   while(1) {
    $51 = (($sf_temp) + ($sfb$06$i<<2)|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = (0 - ($52))|0;
    $54 = ($maxsf1$05$i|0)<($53|0);
    $$maxsf1$0$i = $54 ? $53 : $maxsf1$05$i;
    $55 = ($minsf$04$i|0)>($53|0);
    $minsf$1$i = $55 ? $53 : $minsf$04$i;
    $56 = (($sfb$06$i) + 3)|0;
    $57 = ($56>>>0)<($$$i>>>0);
    if ($57) {
     $maxsf1$05$i = $$maxsf1$0$i;$minsf$04$i = $minsf$1$i;$sfb$06$i = $56;
    } else {
     $maxsf1$0$lcssa$i = $$maxsf1$0$i;$minsf$0$lcssa$i = $minsf$1$i;$sfb$0$lcssa$i = $56;
     break;
    }
   }
  } else {
   $maxsf1$0$lcssa$i = 0;$minsf$0$lcssa$i = 1000;$sfb$0$lcssa$i = $i$016$i;
  }
  $58 = ($sfb$0$lcssa$i>>>0)<(39);
  if ($58) {
   $maxsf2$010$i = 0;$minsf$29$i = $minsf$0$lcssa$i;$sfb$111$i = $sfb$0$lcssa$i;
   while(1) {
    $59 = (($sf_temp) + ($sfb$111$i<<2)|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = (0 - ($60))|0;
    $62 = ($maxsf2$010$i|0)<($61|0);
    $$maxsf2$0$i = $62 ? $61 : $maxsf2$010$i;
    $63 = ($minsf$29$i|0)>($61|0);
    $minsf$3$i = $63 ? $61 : $minsf$29$i;
    $64 = (($sfb$111$i) + 3)|0;
    $65 = ($64>>>0)<(39);
    if ($65) {
     $maxsf2$010$i = $$maxsf2$0$i;$minsf$29$i = $minsf$3$i;$sfb$111$i = $64;
    } else {
     $maxsf2$0$lcssa$i = $$maxsf2$0$i;$minsf$2$lcssa$i = $minsf$3$i;
     break;
    }
   }
  } else {
   $maxsf2$0$lcssa$i = 0;$minsf$2$lcssa$i = $minsf$0$lcssa$i;
  }
  $66 = (($maxsf1$0$lcssa$i) - ($48))|0;
  $67 = (($maxsf2$0$lcssa$i) - ($49))|0;
  $68 = ($66|0)>($67|0);
  $69 = $68 ? $66 : $67;
  $70 = ($minsf$2$lcssa$i|0)>(0);
  if ($70) {
   $71 = $minsf$2$lcssa$i >> 3;
   $72 = ((($1) + ($i$016$i<<2)|0) + 4808|0);
   HEAP32[$72>>2] = $71;
   $79 = $71;
  } else {
   $73 = ((($1) + ($i$016$i<<2)|0) + 4808|0);
   HEAP32[$73>>2] = 0;
   $79 = 0;
  }
  $74 = ($69|0)>(0);
  $75 = ((($1) + ($i$016$i<<2)|0) + 4808|0);
  if ($74) {
   $76 = (($69) + 7)|0;
   $77 = $76 >> 3;
   $78 = ($79|0)>($77|0);
   $80 = $78 ? $79 : $77;
   HEAP32[$75>>2] = $80;
   $$pr$i = $80;
  } else {
   $$pr$i = $79;
  }
  $81 = ($$pr$i|0)>(0);
  if ($81) {
   $82 = ((($that) + ($i$016$i<<2)|0) + 24|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = HEAP32[$35>>2]|0;
   $85 = $$pr$i << 3;
   $86 = (($84) - ($85))|0;
   $87 = ($83|0)>($86|0);
   if ($87) {
    $88 = (($84) - ($83))|0;
    $89 = $88 >> 3;
    HEAP32[$75>>2] = $89;
    $91 = $89;
   } else {
    $91 = $$pr$i;
   }
   $90 = ($91|0)>(7);
   if ($90) {
    HEAP32[$75>>2] = 7;
    $93 = 7;
   } else {
    $93 = $91;
   }
  } else {
   $93 = $$pr$i;
  }
  $92 = ($min_sbg$015$i|0)>($93|0);
  $$min_sbg$0$i = $92 ? $93 : $min_sbg$015$i;
  $94 = (($i$016$i) + 1)|0;
  $exitcond$i = ($94|0)==(3);
  if ($exitcond$i) {
   break;
  } else {
   $i$016$i = $94;$min_sbg$015$i = $$min_sbg$0$i;
  }
 }
 $95 = (($1) + 4808|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = $96 << 3;
 $98 = (($1) + 4812|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = $99 << 3;
 $101 = (($1) + 4816|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = $102 << 3;
 $sfb$22$i = 0;
 while(1) {
  $104 = (($sf_temp) + ($sfb$22$i<<2)|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = (($105) + ($97))|0;
  HEAP32[$104>>2] = $106;
  $107 = (($sfb$22$i) + 1)|0;
  $108 = (($sf_temp) + ($107<<2)|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = (($109) + ($100))|0;
  HEAP32[$108>>2] = $110;
  $111 = (($sfb$22$i) + 2)|0;
  $112 = (($sf_temp) + ($111<<2)|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = (($113) + ($103))|0;
  HEAP32[$112>>2] = $114;
  $115 = (($sfb$22$i) + 3)|0;
  $116 = ($115>>>0)<(39);
  if ($116) {
   $sfb$22$i = $115;
  } else {
   break;
  }
 }
 $117 = ($$min_sbg$0$i|0)>(0);
 if (!($117)) {
  _set_scalefacs($1,$vbrsfmin,$sf_temp,144760);
  STACKTOP = sp;return;
 }
 $118 = (($96) - ($$min_sbg$0$i))|0;
 HEAP32[$95>>2] = $118;
 $119 = (($99) - ($$min_sbg$0$i))|0;
 HEAP32[$98>>2] = $119;
 $120 = (($102) - ($$min_sbg$0$i))|0;
 HEAP32[$101>>2] = $120;
 $121 = $$min_sbg$0$i << 3;
 $122 = HEAP32[$35>>2]|0;
 $123 = (($122) - ($121))|0;
 HEAP32[$35>>2] = $123;
 _set_scalefacs($1,$vbrsfmin,$sf_temp,144760);
 STACKTOP = sp;return;
}
function _long_block_constrain($that,$vbrsf,$vbrsfmin,$vbrmax) {
 $that = $that|0;
 $vbrsf = $vbrsf|0;
 $vbrsfmin = $vbrsfmin|0;
 $vbrmax = $vbrmax|0;
 var $$ = 0, $$1 = 0, $$2 = 0, $$delta$0 = 0, $$maxover1$0 = 0, $$maxover1p$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $delta$0$lcssa41 = 0, $delta$019 = 0, $delta$2 = 0, $exitcond = 0, $exitcond33 = 0, $max_rangep$0 = 0, $maxover0$0$lcssa35 = 0, $maxover0$023 = 0, $maxover0$1 = 0, $maxover0p$021 = 0, $maxover0p$1 = 0, $maxover1$0$lcssa37 = 0, $maxover1$0$maxover0$0 = 0, $maxover1$022 = 0, $maxover1p$020 = 0, $maxover1p$2$maxover0$0$maxover0p$0 = 0, $sf_temp = 0, $sfb$024 = 0, $sfb$112 = 0;
 var $sfb$210 = 0, $sfb$39 = 0, $vm0p$03 = 0, $vm1p$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0;
 $sf_temp = sp;
 $0 = (($that) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($that) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($that) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($1) + 4864|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($3) + 76|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(2);
 $11 = $10 ? 144712 : 144736;
 $12 = ($7|0)>(0);
 L1: do {
  if ($12) {
   $delta$019 = 0;$maxover0$023 = 0;$maxover0p$021 = 0;$maxover1$022 = 0;$maxover1p$020 = 0;$sfb$024 = 0;
   while(1) {
    $13 = (($vbrsf) + ($sfb$024<<2)|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (($vbrmax) - ($14))|0;
    $16 = ($delta$019|0)<($15|0);
    $$delta$0 = $16 ? $15 : $delta$019;
    $17 = (144712 + ($sfb$024)|0);
    $18 = HEAP8[$17>>0]|0;
    $19 = $18&255;
    $20 = $19 << 1;
    $21 = (($15) - ($20))|0;
    $22 = $19 << 2;
    $23 = (($15) - ($22))|0;
    $24 = (($11) + ($sfb$024)|0);
    $25 = HEAP8[$24>>0]|0;
    $26 = $25&255;
    $27 = (64904 + ($sfb$024<<2)|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($26) + ($28))|0;
    $30 = $29 << 1;
    $31 = (($15) - ($30))|0;
    $32 = $29 << 2;
    $33 = (($15) - ($32))|0;
    $34 = ($maxover0$023|0)<($21|0);
    $maxover0$1 = $34 ? $21 : $maxover0$023;
    $35 = ($maxover1$022|0)<($23|0);
    $$maxover1$0 = $35 ? $23 : $maxover1$022;
    $36 = ($maxover0p$021|0)<($31|0);
    $maxover0p$1 = $36 ? $31 : $maxover0p$021;
    $37 = ($maxover1p$020|0)<($33|0);
    $$maxover1p$0 = $37 ? $33 : $maxover1p$020;
    $38 = (($sfb$024) + 1)|0;
    $exitcond33 = ($38|0)==($7|0);
    if ($exitcond33) {
     break;
    } else {
     $delta$019 = $$delta$0;$maxover0$023 = $maxover0$1;$maxover0p$021 = $maxover0p$1;$maxover1$022 = $$maxover1$0;$maxover1p$020 = $$maxover1p$0;$sfb$024 = $38;
    }
   }
   $39 = (($vbrmax) - ($maxover0p$1))|0;
   $40 = ($39|0)<($5|0);
   $$ = $40 ? $5 : $39;
   if ($12) {
    $sfb$112 = 0;
    while(1) {
     $43 = (($vbrsfmin) + ($sfb$112<<2)|0);
     $44 = HEAP32[$43>>2]|0;
     $45 = (($$) - ($44))|0;
     $46 = (64904 + ($sfb$112<<2)|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = $47 << 1;
     $49 = (($45) - ($48))|0;
     $50 = ($49|0)<(1);
     $42 = (($sfb$112) + 1)|0;
     if ($50) {
      $delta$0$lcssa41 = $$delta$0;$maxover0$0$lcssa35 = $maxover0$1;$maxover1$0$lcssa37 = $$maxover1$0;$vm0p$03 = $maxover0$1;$vm1p$1 = $$maxover1$0;
      break L1;
     }
     $41 = ($42|0)<($7|0);
     if ($41) {
      $sfb$112 = $42;
     } else {
      break;
     }
    }
    $51 = (($vbrmax) - ($$maxover1p$0))|0;
    $52 = ($51|0)<($5|0);
    $$1 = $52 ? $5 : $51;
    if ($12) {
     $sfb$210 = 0;
     while(1) {
      $55 = (($vbrsfmin) + ($sfb$210<<2)|0);
      $56 = HEAP32[$55>>2]|0;
      $57 = (($$1) - ($56))|0;
      $58 = (64904 + ($sfb$210<<2)|0);
      $59 = HEAP32[$58>>2]|0;
      $60 = $59 << 2;
      $61 = (($57) - ($60))|0;
      $62 = ($61|0)<(1);
      $54 = (($sfb$210) + 1)|0;
      if ($62) {
       $delta$0$lcssa41 = $$delta$0;$maxover0$0$lcssa35 = $maxover0$1;$maxover1$0$lcssa37 = $$maxover1$0;$vm0p$03 = $maxover0p$1;$vm1p$1 = $$maxover1$0;
       break L1;
      }
      $53 = ($54|0)<($7|0);
      if ($53) {
       $sfb$210 = $54;
      } else {
       $delta$0$lcssa41 = $$delta$0;$maxover0$0$lcssa35 = $maxover0$1;$maxover1$0$lcssa37 = $$maxover1$0;$vm0p$03 = $maxover0p$1;$vm1p$1 = $$maxover1p$0;
       break;
      }
     }
    } else {
     $delta$0$lcssa41 = $$delta$0;$maxover0$0$lcssa35 = $maxover0$1;$maxover1$0$lcssa37 = $$maxover1$0;$vm0p$03 = $maxover0p$1;$vm1p$1 = $$maxover1p$0;
    }
   } else {
    $delta$0$lcssa41 = $$delta$0;$maxover0$0$lcssa35 = $maxover0$1;$maxover1$0$lcssa37 = $$maxover1$0;$vm0p$03 = $maxover0p$1;$vm1p$1 = $$maxover1p$0;
   }
  } else {
   $delta$0$lcssa41 = 0;$maxover0$0$lcssa35 = 0;$maxover1$0$lcssa37 = 0;$vm0p$03 = 0;$vm1p$1 = 0;
  }
 } while(0);
 $63 = (($3) + 28|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = ($64|0)==(2);
 $maxover1p$2$maxover0$0$maxover0p$0 = $65 ? $vm1p$1 : $vm0p$03;
 $maxover1$0$maxover0$0 = $65 ? $maxover1$0$lcssa37 : $maxover0$0$lcssa35;
 $66 = ($maxover0$0$lcssa35|0)<($vm0p$03|0);
 $67 = $66 ? $maxover0$0$lcssa35 : $vm0p$03;
 $68 = ($67|0)<($maxover1$0$maxover0$0|0);
 $69 = $68 ? $67 : $maxover1$0$maxover0$0;
 $70 = ($69|0)<($maxover1p$2$maxover0$0$maxover0p$0|0);
 $71 = $70 ? $69 : $maxover1p$2$maxover0$0$maxover0p$0;
 $72 = ($delta$0$lcssa41|0)>($71|0);
 $delta$2 = $72 ? $71 : $delta$0$lcssa41;
 $73 = (($vbrmax) - ($delta$2))|0;
 $74 = ($73|0)<($5|0);
 $$2 = $74 ? $5 : $73;
 $75 = ($maxover0$0$lcssa35|0)==($71|0);
 do {
  if ($75) {
   $76 = (($1) + 4836|0);
   HEAP32[$76>>2] = 0;
   $77 = (($1) + 4832|0);
   HEAP32[$77>>2] = 0;
   $max_rangep$0 = 144712;
  } else {
   $78 = ($vm0p$03|0)==($71|0);
   if ($78) {
    $79 = (($1) + 4836|0);
    HEAP32[$79>>2] = 0;
    $80 = (($1) + 4832|0);
    HEAP32[$80>>2] = 1;
    $max_rangep$0 = $11;
    break;
   }
   $81 = ($maxover1$0$maxover0$0|0)==($71|0);
   if ($81) {
    $82 = (($1) + 4836|0);
    HEAP32[$82>>2] = 1;
    $83 = (($1) + 4832|0);
    HEAP32[$83>>2] = 0;
    $max_rangep$0 = 144712;
    break;
   }
   $84 = ($maxover1p$2$maxover0$0$maxover0p$0|0)==($71|0);
   if ($84) {
    $85 = (($1) + 4836|0);
    HEAP32[$85>>2] = 1;
    $86 = (($1) + 4832|0);
    HEAP32[$86>>2] = 1;
    $max_rangep$0 = $11;
   } else {
    $max_rangep$0 = $11;
   }
  }
 } while(0);
 $87 = (($1) + 4780|0);
 HEAP32[$87>>2] = $$2;
 $88 = ($$2|0)<(0);
 if ($88) {
  HEAP32[$87>>2] = 0;
 } else {
  $89 = ($$2|0)>(255);
  if ($89) {
   HEAP32[$87>>2] = 255;
  }
 }
 $sfb$39 = 0;
 while(1) {
  $90 = (($vbrsf) + ($sfb$39<<2)|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = (($91) - ($$2))|0;
  $93 = (($sf_temp) + ($sfb$39<<2)|0);
  HEAP32[$93>>2] = $92;
  $94 = (($sfb$39) + 1)|0;
  $exitcond = ($94|0)==(39);
  if ($exitcond) {
   break;
  } else {
   $sfb$39 = $94;
  }
 }
 _set_scalefacs($1,$vbrsfmin,$sf_temp,$max_rangep$0);
 STACKTOP = sp;return;
}
function _quantizeAndCountBits($that) {
 $that = $that|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0;
 var $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0.0;
 var $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0, $147 = 0.0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0.0;
 var $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0;
 var $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0;
 var $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $i$06$i = 0, $j$010$i = 0, $l3$0$be$i = 0, $l3$011$i = 0, $l3$1$lcssa$i = 0, $l3$15$i = 0, $phitmp$i = 0.0, $scevgep$i = 0, $scevgep14$i = 0, $sfb$09$i = 0;
 var $sum = 0, $that$idx = 0, $that$idx$val = 0, $that$idx1 = 0, $that$idx1$val = 0, $umax$i = 0, $xr34_orig$0$be$i = 0, $xr34_orig$012$i = 0, $xr34_orig$1$lcssa$i = 0, $xr34_orig$17$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $that$idx = (($that) + 8|0);
 $that$idx$val = HEAP32[$that$idx>>2]|0;
 $that$idx1 = (($that) + 16|0);
 $that$idx1$val = HEAP32[$that$idx1>>2]|0;
 $0 = (($that$idx1$val) + 4836|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 $3 = $2 ? 2 : 4;
 $4 = (($that$idx1$val) + 2304|0);
 $5 = (($that$idx1$val) + 5208|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($that$idx1$val) + 4832|0);
 $8 = (($that$idx1$val) + 4780|0);
 $9 = (-2 - ($6))|0;
 $j$010$i = 0;$l3$011$i = $4;$sfb$09$i = 0;$xr34_orig$012$i = $that$idx$val;
 while(1) {
  $10 = ((($that$idx1$val) + ($sfb$09$i<<2)|0) + 4608|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = HEAP32[$7>>2]|0;
  $13 = ($12|0)==(0);
  if ($13) {
   $17 = 0;
  } else {
   $14 = (64904 + ($sfb$09$i<<2)|0);
   $15 = HEAP32[$14>>2]|0;
   $17 = $15;
  }
  $16 = (($17) + ($11))|0;
  $18 = Math_imul($16, $3)|0;
  $19 = ((($that$idx1$val) + ($sfb$09$i<<2)|0) + 5028|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($that$idx1$val) + ($20<<2)|0) + 4808|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $22 << 3;
  $24 = HEAP32[$8>>2]|0;
  $sum = (($23) + ($18))|0;
  $25 = (($24) - ($sum))|0;
  $26 = $25 & 255;
  $27 = (132496 + ($26<<2)|0);
  $28 = +HEAPF32[$27>>2];
  $29 = ((($that$idx1$val) + ($sfb$09$i<<2)|0) + 4872|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($6) - ($j$010$i))|0;
  $32 = (($31) + 1)|0;
  $33 = (($30) + ($j$010$i))|0;
  $34 = (($sfb$09$i) + 1)|0;
  $35 = ($30>>>0)<=($32>>>0);
  $36 = $35 ? $30 : $32;
  $37 = $36 & 3;
  $38 = $36 >>> 2;
  $39 = ($38|0)==(0);
  if ($39) {
   $l3$1$lcssa$i = $l3$011$i;$xr34_orig$1$lcssa$i = $xr34_orig$012$i;
  } else {
   $40 = $30 ^ -1;
   $41 = (($j$010$i) + ($9))|0;
   $42 = ($41>>>0)<($40>>>0);
   $umax$i = $42 ? $40 : $41;
   $43 = $umax$i & -4;
   $44 = $43 ^ -4;
   $i$06$i = $38;$l3$15$i = $l3$011$i;$xr34_orig$17$i = $xr34_orig$012$i;
   while(1) {
    $45 = (($i$06$i) + -1)|0;
    $46 = +HEAPF32[$xr34_orig$17$i>>2];
    $47 = $28 * $46;
    $48 = $47;
    $49 = (($xr34_orig$17$i) + 4|0);
    $50 = +HEAPF32[$49>>2];
    $51 = $28 * $50;
    $52 = $51;
    $53 = (($xr34_orig$17$i) + 8|0);
    $54 = +HEAPF32[$53>>2];
    $55 = $28 * $54;
    $56 = $55;
    $57 = (($xr34_orig$17$i) + 12|0);
    $58 = +HEAPF32[$57>>2];
    $59 = $28 * $58;
    $60 = $59;
    $61 = $48 + 8388608.0;
    $62 = $61;
    $63 = (HEAPF32[tempDoublePtr>>2]=$62,HEAP32[tempDoublePtr>>2]|0);
    $64 = $52 + 8388608.0;
    $65 = $64;
    $66 = (HEAPF32[tempDoublePtr>>2]=$65,HEAP32[tempDoublePtr>>2]|0);
    $67 = $56 + 8388608.0;
    $68 = $67;
    $69 = (HEAPF32[tempDoublePtr>>2]=$68,HEAP32[tempDoublePtr>>2]|0);
    $70 = $60 + 8388608.0;
    $71 = $70;
    $72 = (HEAPF32[tempDoublePtr>>2]=$71,HEAP32[tempDoublePtr>>2]|0);
    $73 = (($63) + -1258291200)|0;
    $74 = (99664 + ($73<<2)|0);
    $75 = +HEAPF32[$74>>2];
    $76 = $75;
    $77 = $61 + $76;
    $78 = $77;
    $79 = (HEAPF32[tempDoublePtr>>2]=$78,HEAP32[tempDoublePtr>>2]|0);
    $80 = (($66) + -1258291200)|0;
    $81 = (99664 + ($80<<2)|0);
    $82 = +HEAPF32[$81>>2];
    $83 = $82;
    $84 = $64 + $83;
    $85 = $84;
    $86 = (HEAPF32[tempDoublePtr>>2]=$85,HEAP32[tempDoublePtr>>2]|0);
    $87 = (($69) + -1258291200)|0;
    $88 = (99664 + ($87<<2)|0);
    $89 = +HEAPF32[$88>>2];
    $90 = $89;
    $91 = $67 + $90;
    $92 = $91;
    $93 = (HEAPF32[tempDoublePtr>>2]=$92,HEAP32[tempDoublePtr>>2]|0);
    $94 = (($72) + -1258291200)|0;
    $95 = (99664 + ($94<<2)|0);
    $96 = +HEAPF32[$95>>2];
    $97 = $96;
    $98 = $70 + $97;
    $99 = $98;
    $100 = (HEAPF32[tempDoublePtr>>2]=$99,HEAP32[tempDoublePtr>>2]|0);
    $101 = (($79) + -1258291200)|0;
    HEAP32[$l3$15$i>>2] = $101;
    $102 = (($86) + -1258291200)|0;
    $103 = (($l3$15$i) + 4|0);
    HEAP32[$103>>2] = $102;
    $104 = (($93) + -1258291200)|0;
    $105 = (($l3$15$i) + 8|0);
    HEAP32[$105>>2] = $104;
    $106 = (($100) + -1258291200)|0;
    $107 = (($l3$15$i) + 12|0);
    HEAP32[$107>>2] = $106;
    $108 = (($l3$15$i) + 16|0);
    $109 = (($xr34_orig$17$i) + 16|0);
    $110 = ($45|0)==(0);
    if ($110) {
     break;
    } else {
     $i$06$i = $45;$l3$15$i = $108;$xr34_orig$17$i = $109;
    }
   }
   $scevgep$i = (($xr34_orig$012$i) + ($44<<2)|0);
   $scevgep14$i = (($l3$011$i) + ($44<<2)|0);
   $l3$1$lcssa$i = $scevgep14$i;$xr34_orig$1$lcssa$i = $scevgep$i;
  }
  if ((($37|0) == 3)) {
   $111 = (($xr34_orig$1$lcssa$i) + 8|0);
   $112 = +HEAPF32[$111>>2];
   $113 = $28 * $112;
   $114 = $113;
   $167 = $114;
   label = 10;
  } else if ((($37|0) == 0)) {
   $l3$0$be$i = $l3$1$lcssa$i;$xr34_orig$0$be$i = $xr34_orig$1$lcssa$i;
  } else if ((($37|0) == 2)) {
   $167 = 0.0;
   label = 10;
  } else if ((($37|0) == 1)) {
   $168 = 0.0;$169 = 0.0;
   label = 11;
  } else {
   $123 = 8388608.0;$126 = 0.0;$130 = 0.0;
   label = 12;
  }
  if ((label|0) == 10) {
   label = 0;
   $115 = (($xr34_orig$1$lcssa$i) + 4|0);
   $116 = +HEAPF32[$115>>2];
   $117 = $28 * $116;
   $118 = $117;
   $168 = $167;$169 = $118;
   label = 11;
  }
  if ((label|0) == 11) {
   label = 0;
   $119 = +HEAPF32[$xr34_orig$1$lcssa$i>>2];
   $120 = $28 * $119;
   $121 = $120;
   $phitmp$i = $121 + 8388608.0;
   $123 = $phitmp$i;$126 = $169;$130 = $168;
   label = 12;
  }
  if ((label|0) == 12) {
   label = 0;
   $122 = $123;
   $124 = (HEAPF32[tempDoublePtr>>2]=$122,HEAP32[tempDoublePtr>>2]|0);
   $125 = $126 + 8388608.0;
   $127 = $125;
   $128 = (HEAPF32[tempDoublePtr>>2]=$127,HEAP32[tempDoublePtr>>2]|0);
   $129 = $130 + 8388608.0;
   $131 = (($124) + -1258291200)|0;
   $132 = (99664 + ($131<<2)|0);
   $133 = +HEAPF32[$132>>2];
   $134 = $133;
   $135 = $123 + $134;
   $136 = $135;
   $137 = (HEAPF32[tempDoublePtr>>2]=$136,HEAP32[tempDoublePtr>>2]|0);
   $138 = (($128) + -1258291200)|0;
   $139 = (99664 + ($138<<2)|0);
   $140 = +HEAPF32[$139>>2];
   $141 = $140;
   $142 = $125 + $141;
   $143 = $142;
   $144 = (HEAPF32[tempDoublePtr>>2]=$143,HEAP32[tempDoublePtr>>2]|0);
   $145 = (($137) + -1258291200)|0;
   $146 = (($144) + -1258291200)|0;
   if ((($37|0) == 2)) {
    label = 14;
   } else if ((($37|0) == 3)) {
    $147 = $129;
    $148 = (HEAPF32[tempDoublePtr>>2]=$147,HEAP32[tempDoublePtr>>2]|0);
    $149 = (($148) + -1258291200)|0;
    $150 = (99664 + ($149<<2)|0);
    $151 = +HEAPF32[$150>>2];
    $152 = $151;
    $153 = $129 + $152;
    $154 = $153;
    $155 = (HEAPF32[tempDoublePtr>>2]=$154,HEAP32[tempDoublePtr>>2]|0);
    $156 = (($155) + -1258291200)|0;
    $157 = (($l3$1$lcssa$i) + 8|0);
    HEAP32[$157>>2] = $156;
    label = 14;
   } else if ((($37|0) == 1)) {
    label = 15;
   }
   if ((label|0) == 14) {
    label = 0;
    $158 = (($l3$1$lcssa$i) + 4|0);
    HEAP32[$158>>2] = $146;
    label = 15;
   }
   if ((label|0) == 15) {
    label = 0;
    HEAP32[$l3$1$lcssa$i>>2] = $145;
   }
   $159 = (($l3$1$lcssa$i) + ($37<<2)|0);
   $160 = (($xr34_orig$1$lcssa$i) + ($37<<2)|0);
   $l3$0$be$i = $159;$xr34_orig$0$be$i = $160;
  }
  $161 = ($33>>>0)>($6>>>0);
  if ($161) {
   break;
  } else {
   $j$010$i = $33;$l3$011$i = $l3$0$be$i;$sfb$09$i = $34;$xr34_orig$012$i = $xr34_orig$0$be$i;
  }
 }
 $162 = (($that) + 12|0);
 $163 = HEAP32[$162>>2]|0;
 $164 = (_noquant_count_bits($163,$that$idx1$val,0)|0);
 $165 = HEAP32[$that$idx1>>2]|0;
 $166 = (($165) + 4768|0);
 HEAP32[$166>>2] = $164;
 STACKTOP = sp;return ($164|0);
}
function _set_scalefacs($cod_info,$vbrsfmin,$sf,$max_range) {
 $cod_info = $cod_info|0;
 $vbrsfmin = $vbrsfmin|0;
 $sf = $sf|0;
 $max_range = $max_range|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond13 = 0, $or$cond = 0;
 var $or$cond15 = 0, $scevgep = 0, $sfb$010 = 0, $sfb$1$lcssa14 = 0, $sfb$17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($cod_info) + 4836|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 $3 = $2 ? 2 : 4;
 $4 = $2 ? 1 : 2;
 $5 = (($cod_info) + 4860|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($cod_info) + 4832|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0);
 $10 = ($6|0)>(11);
 $or$cond15 = $9 & $10;
 if ($or$cond15) {
  $sfb$010 = 11;
  while(1) {
   $14 = (64904 + ($sfb$010<<2)|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = Math_imul($15, $3)|0;
   $17 = (($sf) + ($sfb$010<<2)|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (($18) + ($16))|0;
   HEAP32[$17>>2] = $19;
   $20 = (($sfb$010) + 1)|0;
   $exitcond13 = ($20|0)==($6|0);
   if ($exitcond13) {
    break;
   } else {
    $sfb$010 = $20;
   }
  }
 }
 $11 = ($6|0)>(0);
 if ($11) {
  $12 = (($cod_info) + 4780|0);
  $13 = (($3) + -1)|0;
  $sfb$17 = 0;
  while(1) {
   $25 = HEAP32[$12>>2]|0;
   $26 = ((($cod_info) + ($sfb$17<<2)|0) + 5028|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ((($cod_info) + ($27<<2)|0) + 4808|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = $29 << 3;
   $31 = (($25) - ($30))|0;
   if ($9) {
    $32 = (64904 + ($sfb$17<<2)|0);
    $33 = HEAP32[$32>>2]|0;
    $38 = $33;
   } else {
    $38 = 0;
   }
   $34 = (($sf) + ($sfb$17<<2)|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)<(0);
   if ($36) {
    $37 = Math_imul($38, $3)|0;
    $39 = (($31) - ($37))|0;
    $40 = (($vbrsfmin) + ($sfb$17<<2)|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = (($39) - ($41))|0;
    $43 = (($13) - ($35))|0;
    $44 = $43 >> $4;
    $45 = ((($cod_info) + ($sfb$17<<2)|0) + 4608|0);
    HEAP32[$45>>2] = $44;
    $46 = (($max_range) + ($sfb$17)|0);
    $47 = HEAP8[$46>>0]|0;
    $48 = $47&255;
    $49 = ($44|0)>($48|0);
    $$ = $49 ? $48 : $44;
    HEAP32[$45>>2] = $$;
    $50 = ($$|0)>(0);
    $51 = $$ << $4;
    $52 = ($51|0)>($42|0);
    $or$cond = $50 & $52;
    if ($or$cond) {
     $53 = $42 >> $4;
     HEAP32[$45>>2] = $53;
    }
   } else {
    $54 = ((($cod_info) + ($sfb$17<<2)|0) + 4608|0);
    HEAP32[$54>>2] = 0;
   }
   $55 = (($sfb$17) + 1)|0;
   $exitcond = ($55|0)==($6|0);
   if ($exitcond) {
    break;
   } else {
    $sfb$17 = $55;
   }
  }
  $21 = ($6|0)<(39);
  if ($21) {
   $sfb$1$lcssa14 = $6;
  } else {
   STACKTOP = sp;return;
  }
 } else {
  $sfb$1$lcssa14 = 0;
 }
 $22 = (($sfb$1$lcssa14) + 1152)|0;
 $scevgep = (($cod_info) + ($22<<2)|0);
 $23 = $sfb$1$lcssa14 << 2;
 $24 = (156 - ($23))|0;
 _memset(($scevgep|0),0,($24|0))|0;
 STACKTOP = sp;return;
}
function _calc_sfb_noise_x34($xr,$xr34,$bw,$sf) {
 $xr = $xr|0;
 $xr34 = $xr34|0;
 $bw = $bw|0;
 $sf = $sf|0;
 var $$0$lcssa = 0, $$01$lcssa = 0, $$012 = 0, $$05 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0, $128 = 0.0, $129 = 0.0, $13 = 0.0;
 var $130 = 0.0, $131 = 0, $132 = 0.0, $133 = 0.0, $134 = 0, $135 = 0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0.0, $150 = 0.0, $151 = 0, $152 = 0, $153 = 0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0.0, $160 = 0, $161 = 0.0, $162 = 0.0, $163 = 0, $164 = 0.0, $165 = 0.0, $166 = 0.0;
 var $167 = 0.0, $168 = 0, $169 = 0.0, $17 = 0.0, $170 = 0.0, $171 = 0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0;
 var $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0.0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0;
 var $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0;
 var $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0;
 var $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0.0, $95 = 0.0;
 var $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $i$04 = 0, $phitmp = 0.0, $scevgep = 0, $scevgep10 = 0, $xfsf$0$lcssa = 0.0, $xfsf$03 = 0.0, $xfsf$1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $sf&255;
 $1 = (($0) + 116)|0;
 $2 = (133528 + ($1<<2)|0);
 $3 = +HEAPF32[$2>>2];
 $4 = (132496 + ($0<<2)|0);
 $5 = +HEAPF32[$4>>2];
 $6 = $bw >>> 2;
 $7 = $bw & 3;
 $8 = ($6|0)==(0);
 if ($8) {
  $$0$lcssa = $xr;$$01$lcssa = $xr34;$xfsf$0$lcssa = 0.0;
 } else {
  $9 = $6 << 2;
  $scevgep = (($xr34) + ($9<<2)|0);
  $$012 = $xr34;$$05 = $xr;$i$04 = $6;$xfsf$03 = 0.0;
  while(1) {
   $10 = (($i$04) + -1)|0;
   $11 = +HEAPF32[$$012>>2];
   $12 = $5 * $11;
   $13 = $12;
   $14 = (($$012) + 4|0);
   $15 = +HEAPF32[$14>>2];
   $16 = $5 * $15;
   $17 = $16;
   $18 = (($$012) + 8|0);
   $19 = +HEAPF32[$18>>2];
   $20 = $5 * $19;
   $21 = $20;
   $22 = (($$012) + 12|0);
   $23 = +HEAPF32[$22>>2];
   $24 = $5 * $23;
   $25 = $24;
   $26 = $13 + 8388608.0;
   $27 = $26;
   $28 = (HEAPF32[tempDoublePtr>>2]=$27,HEAP32[tempDoublePtr>>2]|0);
   $29 = $17 + 8388608.0;
   $30 = $29;
   $31 = (HEAPF32[tempDoublePtr>>2]=$30,HEAP32[tempDoublePtr>>2]|0);
   $32 = $21 + 8388608.0;
   $33 = $32;
   $34 = (HEAPF32[tempDoublePtr>>2]=$33,HEAP32[tempDoublePtr>>2]|0);
   $35 = $25 + 8388608.0;
   $36 = $35;
   $37 = (HEAPF32[tempDoublePtr>>2]=$36,HEAP32[tempDoublePtr>>2]|0);
   $38 = (($28) + -1258291200)|0;
   $39 = (99664 + ($38<<2)|0);
   $40 = +HEAPF32[$39>>2];
   $41 = $40;
   $42 = $26 + $41;
   $43 = $42;
   $44 = (HEAPF32[tempDoublePtr>>2]=$43,HEAP32[tempDoublePtr>>2]|0);
   $45 = (($31) + -1258291200)|0;
   $46 = (99664 + ($45<<2)|0);
   $47 = +HEAPF32[$46>>2];
   $48 = $47;
   $49 = $29 + $48;
   $50 = $49;
   $51 = (HEAPF32[tempDoublePtr>>2]=$50,HEAP32[tempDoublePtr>>2]|0);
   $52 = (($34) + -1258291200)|0;
   $53 = (99664 + ($52<<2)|0);
   $54 = +HEAPF32[$53>>2];
   $55 = $54;
   $56 = $32 + $55;
   $57 = $56;
   $58 = (HEAPF32[tempDoublePtr>>2]=$57,HEAP32[tempDoublePtr>>2]|0);
   $59 = (($37) + -1258291200)|0;
   $60 = (99664 + ($59<<2)|0);
   $61 = +HEAPF32[$60>>2];
   $62 = $61;
   $63 = $35 + $62;
   $64 = $63;
   $65 = (HEAPF32[tempDoublePtr>>2]=$64,HEAP32[tempDoublePtr>>2]|0);
   $66 = (($44) + -1258291200)|0;
   $67 = (($51) + -1258291200)|0;
   $68 = (($58) + -1258291200)|0;
   $69 = (($65) + -1258291200)|0;
   $70 = +HEAPF32[$$05>>2];
   $71 = (+Math_abs((+$70)));
   $72 = (66832 + ($66<<2)|0);
   $73 = +HEAPF32[$72>>2];
   $74 = $3 * $73;
   $75 = $71 - $74;
   $76 = $75;
   $77 = (($$05) + 4|0);
   $78 = +HEAPF32[$77>>2];
   $79 = (+Math_abs((+$78)));
   $80 = (66832 + ($67<<2)|0);
   $81 = +HEAPF32[$80>>2];
   $82 = $3 * $81;
   $83 = $79 - $82;
   $84 = $83;
   $85 = (($$05) + 8|0);
   $86 = +HEAPF32[$85>>2];
   $87 = (+Math_abs((+$86)));
   $88 = (66832 + ($68<<2)|0);
   $89 = +HEAPF32[$88>>2];
   $90 = $3 * $89;
   $91 = $87 - $90;
   $92 = $91;
   $93 = (($$05) + 12|0);
   $94 = +HEAPF32[$93>>2];
   $95 = (+Math_abs((+$94)));
   $96 = (66832 + ($69<<2)|0);
   $97 = +HEAPF32[$96>>2];
   $98 = $3 * $97;
   $99 = $95 - $98;
   $100 = $99;
   $101 = $76 * $76;
   $102 = $84 * $84;
   $103 = $101 + $102;
   $104 = $92 * $92;
   $105 = $100 * $100;
   $106 = $104 + $105;
   $107 = $103 + $106;
   $108 = $xfsf$03;
   $109 = $108 + $107;
   $110 = $109;
   $111 = (($$05) + 16|0);
   $112 = (($$012) + 16|0);
   $113 = ($10|0)==(0);
   if ($113) {
    break;
   } else {
    $$012 = $112;$$05 = $111;$i$04 = $10;$xfsf$03 = $110;
   }
  }
  $scevgep10 = (($xr) + ($9<<2)|0);
  $$0$lcssa = $scevgep10;$$01$lcssa = $scevgep;$xfsf$0$lcssa = $110;
 }
 if ((($7|0) == 1)) {
  $195 = 0.0;$196 = 0.0;
  label = 8;
 } else if ((($7|0) == 3)) {
  $114 = (($$01$lcssa) + 8|0);
  $115 = +HEAPF32[$114>>2];
  $116 = $5 * $115;
  $117 = $116;
  $194 = $117;
  label = 7;
 } else if ((($7|0) == 0)) {
  $xfsf$1 = $xfsf$0$lcssa;
  STACKTOP = sp;return (+$xfsf$1);
 } else if ((($7|0) == 2)) {
  $194 = 0.0;
  label = 7;
 } else {
  $126 = 8388608.0;$129 = 0.0;$133 = 0.0;
 }
 if ((label|0) == 7) {
  $118 = (($$01$lcssa) + 4|0);
  $119 = +HEAPF32[$118>>2];
  $120 = $5 * $119;
  $121 = $120;
  $195 = $194;$196 = $121;
  label = 8;
 }
 if ((label|0) == 8) {
  $122 = +HEAPF32[$$01$lcssa>>2];
  $123 = $5 * $122;
  $124 = $123;
  $phitmp = $124 + 8388608.0;
  $126 = $phitmp;$129 = $196;$133 = $195;
 }
 $125 = $126;
 $127 = (HEAPF32[tempDoublePtr>>2]=$125,HEAP32[tempDoublePtr>>2]|0);
 $128 = $129 + 8388608.0;
 $130 = $128;
 $131 = (HEAPF32[tempDoublePtr>>2]=$130,HEAP32[tempDoublePtr>>2]|0);
 $132 = $133 + 8388608.0;
 $134 = (($127) + -1258291200)|0;
 $135 = (99664 + ($134<<2)|0);
 $136 = +HEAPF32[$135>>2];
 $137 = $136;
 $138 = $126 + $137;
 $139 = $138;
 $140 = (HEAPF32[tempDoublePtr>>2]=$139,HEAP32[tempDoublePtr>>2]|0);
 $141 = (($131) + -1258291200)|0;
 $142 = (99664 + ($141<<2)|0);
 $143 = +HEAPF32[$142>>2];
 $144 = $143;
 $145 = $128 + $144;
 $146 = $145;
 $147 = (HEAPF32[tempDoublePtr>>2]=$146,HEAP32[tempDoublePtr>>2]|0);
 $148 = (($140) + -1258291200)|0;
 $149 = (($147) + -1258291200)|0;
 if ((($7|0) == 3)) {
  $150 = $132;
  $151 = (HEAPF32[tempDoublePtr>>2]=$150,HEAP32[tempDoublePtr>>2]|0);
  $152 = (($151) + -1258291200)|0;
  $153 = (99664 + ($152<<2)|0);
  $154 = +HEAPF32[$153>>2];
  $155 = $154;
  $156 = $132 + $155;
  $157 = $156;
  $158 = (HEAPF32[tempDoublePtr>>2]=$157,HEAP32[tempDoublePtr>>2]|0);
  $159 = (($158) + -1258291200)|0;
  $160 = (($$0$lcssa) + 8|0);
  $161 = +HEAPF32[$160>>2];
  $162 = (+Math_abs((+$161)));
  $163 = (66832 + ($159<<2)|0);
  $164 = +HEAPF32[$163>>2];
  $165 = $3 * $164;
  $166 = $162 - $165;
  $167 = $166;
  $197 = $167;
  label = 11;
 } else if ((($7|0) == 1)) {
  $198 = 0.0;$199 = 0.0;
  label = 12;
 } else if ((($7|0) == 2)) {
  $197 = 0.0;
  label = 11;
 } else {
  $184 = 0.0;$186 = 0.0;$189 = 0.0;
 }
 if ((label|0) == 11) {
  $168 = (($$0$lcssa) + 4|0);
  $169 = +HEAPF32[$168>>2];
  $170 = (+Math_abs((+$169)));
  $171 = (66832 + ($149<<2)|0);
  $172 = +HEAPF32[$171>>2];
  $173 = $3 * $172;
  $174 = $170 - $173;
  $175 = $174;
  $198 = $197;$199 = $175;
  label = 12;
 }
 if ((label|0) == 12) {
  $176 = +HEAPF32[$$0$lcssa>>2];
  $177 = (+Math_abs((+$176)));
  $178 = (66832 + ($148<<2)|0);
  $179 = +HEAPF32[$178>>2];
  $180 = $3 * $179;
  $181 = $177 - $180;
  $182 = $181;
  $184 = $182;$186 = $199;$189 = $198;
 }
 $183 = $184 * $184;
 $185 = $186 * $186;
 $187 = $185 + $183;
 $188 = $189 * $189;
 $190 = $188 + $187;
 $191 = $xfsf$0$lcssa;
 $192 = $191 + $190;
 $193 = $192;
 $xfsf$1 = $193;
 STACKTOP = sp;return (+$xfsf$1);
}
function _AddVbrFrame($gfc) {
 $gfc = $gfc|0;
 var $$pre$i = 0, $$pre2$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($gfc) + 84744|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($gfc) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((141224 + ($3<<6)|0) + ($1<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($gfc) + 85784|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 1)|0;
 HEAP32[$6>>2] = $8;
 $9 = (($gfc) + 85760|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + ($5))|0;
 HEAP32[$9>>2] = $11;
 $12 = (($gfc) + 85764|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + 1)|0;
 HEAP32[$12>>2] = $14;
 $15 = (($gfc) + 85768|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($14|0)<($16|0);
 if ($17) {
  STACKTOP = sp;return;
 }
 $18 = (($gfc) + 85772|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($gfc) + 85776|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($19|0)<($21|0);
 if ($22) {
  $23 = (($gfc) + 85780|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) + ($19<<2)|0);
  HEAP32[$25>>2] = $11;
  $26 = HEAP32[$18>>2]|0;
  $27 = (($26) + 1)|0;
  HEAP32[$18>>2] = $27;
  HEAP32[$12>>2] = 0;
  $$pre$i = HEAP32[$20>>2]|0;
  $29 = $27;$30 = $$pre$i;
 } else {
  $29 = $19;$30 = $21;
 }
 $28 = ($29|0)==($30|0);
 if (!($28)) {
  STACKTOP = sp;return;
 }
 $31 = ($30|0)>(1);
 if ($31) {
  $32 = (($gfc) + 85780|0);
  $33 = HEAP32[$32>>2]|0;
  $i$01$i = 1;
  while(1) {
   $34 = (($33) + ($i$01$i<<2)|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (($i$01$i|0) / 2)&-1;
   $37 = (($33) + ($36<<2)|0);
   HEAP32[$37>>2] = $35;
   $38 = (($i$01$i) + 2)|0;
   $39 = HEAP32[$20>>2]|0;
   $40 = ($38|0)<($39|0);
   if ($40) {
    $i$01$i = $38;
   } else {
    break;
   }
  }
  $$pre2$i = HEAP32[$18>>2]|0;
  $44 = $$pre2$i;
 } else {
  $44 = $30;
 }
 $41 = HEAP32[$15>>2]|0;
 $42 = $41 << 1;
 HEAP32[$15>>2] = $42;
 $43 = (($44|0) / 2)&-1;
 HEAP32[$18>>2] = $43;
 STACKTOP = sp;return;
}
function _GetVbrTag($pTagData,$buf) {
 $pTagData = $pTagData|0;
 $buf = $buf|0;
 var $$ = 0, $$$i = 0, $$0 = 0, $$04 = 0, $$1 = 0, $$2 = 0, $$3 = 0, $$4 = 0, $$mask = 0, $$mask5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $enc_padding$0 = 0, $exitcond = 0, $i$06 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pTagData) + 8|0);
 HEAP32[$0>>2] = 0;
 $1 = (($buf) + 1|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 $4 = $3 & 6;
 $5 = ($4|0)==(2);
 if (!($5)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = $3 >>> 3;
 $7 = $6 & 1;
 $8 = (($buf) + 2|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $10 >>> 2;
 $12 = $11 & 3;
 $13 = (($buf) + 3|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $10 >>> 4;
 $16 = ((141224 + ($7<<6)|0) + ($15<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $$mask = $3 & 240;
 $18 = ($$mask|0)==(224);
 if ($18) {
  $19 = ((141416 + ($12<<2)|0) + 32|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($pTagData) + 4|0);
  HEAP32[$21>>2] = $20;
 } else {
  $22 = ((141416 + ($7<<4)|0) + ($12<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($pTagData) + 4|0);
  HEAP32[$24>>2] = $23;
 }
 $25 = ($7|0)==(0);
 $$mask5 = $14 & -64;
 $26 = ($$mask5<<24>>24)!=(-64);
 do {
  if ($25) {
   if ($26) {
    $29 = (($buf) + 21|0);
    $$04 = $29;
    break;
   } else {
    $30 = (($buf) + 13|0);
    $$04 = $30;
    break;
   }
  } else {
   if ($26) {
    $27 = (($buf) + 36|0);
    $$04 = $27;
    break;
   } else {
    $28 = (($buf) + 21|0);
    $$04 = $28;
    break;
   }
  }
 } while(0);
 $31 = HEAP8[$$04>>0]|0;
 $32 = ($31<<24>>24)==(88);
 if ($32) {
  $33 = (($$04) + 1|0);
  $34 = HEAP8[$33>>0]|0;
  $35 = ($34<<24>>24)==(105);
  if ($35) {
   $36 = (($$04) + 2|0);
   $37 = HEAP8[$36>>0]|0;
   $38 = ($37<<24>>24)==(110);
   if ($38) {
    $39 = (($$04) + 3|0);
    $40 = HEAP8[$39>>0]|0;
    $41 = ($40<<24>>24)==(103);
    $170 = $41;
    label = 16;
   } else {
    $170 = 0;
    label = 16;
   }
  } else {
   $52 = 0;$53 = 0;
  }
 } else {
  $170 = 0;
  label = 16;
 }
 if ((label|0) == 16) {
  $42 = ($31<<24>>24)==(73);
  if ($42) {
   $43 = (($$04) + 1|0);
   $44 = HEAP8[$43>>0]|0;
   $45 = ($44<<24>>24)==(110);
   if ($45) {
    $46 = (($$04) + 2|0);
    $47 = HEAP8[$46>>0]|0;
    $48 = ($47<<24>>24)==(102);
    if ($48) {
     $49 = (($$04) + 3|0);
     $50 = HEAP8[$49>>0]|0;
     $51 = ($50<<24>>24)==(111);
     $52 = $170;$53 = $51;
    } else {
     $52 = $170;$53 = 0;
    }
   } else {
    $52 = $170;$53 = 0;
   }
  } else {
   $52 = $170;$53 = 0;
  }
 }
 $$$i = $52 | $53;
 if (!($$$i)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $54 = (($$04) + 4|0);
 HEAP32[$pTagData>>2] = $7;
 $55 = HEAP8[$54>>0]|0;
 $56 = $55&255;
 $57 = $56 << 8;
 $58 = (($$04) + 5|0);
 $59 = HEAP8[$58>>0]|0;
 $60 = $59&255;
 $61 = $57 | $60;
 $62 = $61 << 8;
 $63 = (($$04) + 6|0);
 $64 = HEAP8[$63>>0]|0;
 $65 = $64&255;
 $66 = $62 | $65;
 $67 = $66 << 8;
 $68 = (($$04) + 7|0);
 $69 = HEAP8[$68>>0]|0;
 $70 = $69&255;
 $71 = $67 | $70;
 HEAP32[$0>>2] = $71;
 $72 = (($$04) + 8|0);
 $73 = $70 & 1;
 $74 = ($73|0)==(0);
 if ($74) {
  $$1 = $72;
 } else {
  $75 = HEAP8[$72>>0]|0;
  $76 = $75&255;
  $77 = $76 << 8;
  $78 = (($$04) + 9|0);
  $79 = HEAP8[$78>>0]|0;
  $80 = $79&255;
  $81 = $77 | $80;
  $82 = $81 << 8;
  $83 = (($$04) + 10|0);
  $84 = HEAP8[$83>>0]|0;
  $85 = $84&255;
  $86 = $82 | $85;
  $87 = $86 << 8;
  $88 = (($$04) + 11|0);
  $89 = HEAP8[$88>>0]|0;
  $90 = $89&255;
  $91 = $87 | $90;
  $92 = (($pTagData) + 12|0);
  HEAP32[$92>>2] = $91;
  $93 = (($$04) + 12|0);
  $$1 = $93;
 }
 $94 = $70 & 2;
 $95 = ($94|0)==(0);
 if ($95) {
  $$2 = $$1;
 } else {
  $96 = HEAP8[$$1>>0]|0;
  $97 = $96&255;
  $98 = $97 << 8;
  $99 = (($$1) + 1|0);
  $100 = HEAP8[$99>>0]|0;
  $101 = $100&255;
  $102 = $98 | $101;
  $103 = $102 << 8;
  $104 = (($$1) + 2|0);
  $105 = HEAP8[$104>>0]|0;
  $106 = $105&255;
  $107 = $103 | $106;
  $108 = $107 << 8;
  $109 = (($$1) + 3|0);
  $110 = HEAP8[$109>>0]|0;
  $111 = $110&255;
  $112 = $108 | $111;
  $113 = (($pTagData) + 16|0);
  HEAP32[$113>>2] = $112;
  $114 = (($$1) + 4|0);
  $$2 = $114;
 }
 $115 = $70 & 4;
 $116 = ($115|0)==(0);
 if ($116) {
  $$3 = $$2;
 } else {
  $i$06 = 0;
  while(1) {
   $117 = (($$2) + ($i$06)|0);
   $118 = HEAP8[$117>>0]|0;
   $119 = ((($pTagData) + ($i$06)|0) + 24|0);
   HEAP8[$119>>0] = $118;
   $120 = (($i$06) + 1)|0;
   $exitcond = ($120|0)==(100);
   if ($exitcond) {
    break;
   } else {
    $i$06 = $120;
   }
  }
  $121 = (($$2) + 100|0);
  $$3 = $121;
 }
 $122 = (($pTagData) + 20|0);
 HEAP32[$122>>2] = -1;
 $123 = $70 & 8;
 $124 = ($123|0)==(0);
 if ($124) {
  $$4 = $$3;
 } else {
  $125 = HEAP8[$$3>>0]|0;
  $126 = $125&255;
  $127 = $126 << 8;
  $128 = (($$3) + 1|0);
  $129 = HEAP8[$128>>0]|0;
  $130 = $129&255;
  $131 = $127 | $130;
  $132 = $131 << 8;
  $133 = (($$3) + 2|0);
  $134 = HEAP8[$133>>0]|0;
  $135 = $134&255;
  $136 = $132 | $135;
  $137 = $136 << 8;
  $138 = (($$3) + 3|0);
  $139 = HEAP8[$138>>0]|0;
  $140 = $139&255;
  $141 = $137 | $140;
  HEAP32[$122>>2] = $141;
  $142 = (($$3) + 4|0);
  $$4 = $142;
 }
 $143 = (0 - ($7))|0;
 $144 = $143 & 72000;
 $145 = (($144) + 72000)|0;
 $146 = Math_imul($17, $145)|0;
 $147 = (($pTagData) + 4|0);
 $148 = HEAP32[$147>>2]|0;
 $149 = (($146|0) / ($148|0))&-1;
 $150 = (($pTagData) + 124|0);
 HEAP32[$150>>2] = $149;
 $151 = (($$4) + 21|0);
 $152 = HEAP8[$151>>0]|0;
 $153 = $152&255;
 $154 = $153 << 4;
 $155 = (($$4) + 22|0);
 $156 = HEAP8[$155>>0]|0;
 $157 = $156&255;
 $158 = $157 >>> 4;
 $159 = $158 | $154;
 $160 = $157 << 8;
 $161 = $160 & 3840;
 $162 = (($$4) + 23|0);
 $163 = HEAP8[$162>>0]|0;
 $164 = $163&255;
 $165 = $161 | $164;
 $166 = ($159>>>0)>(3000);
 $$ = $166 ? -1 : $159;
 $167 = ($165>>>0)>(3000);
 $enc_padding$0 = $167 ? -1 : $165;
 $168 = (($pTagData) + 128|0);
 HEAP32[$168>>2] = $$;
 $169 = (($pTagData) + 132|0);
 HEAP32[$169>>2] = $enc_padding$0;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _InitVbrTag($gfp) {
 $gfp = $gfp|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$02 = 0, $kbps_header$0 = 0, $kbps_header$1 = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2880|0;
 $vararg_buffer = sp;
 $0 = (($gfp) + 288|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(1);
 if ($4) {
  $kbps_header$0 = 128;
 } else {
  $5 = (($1) + 64|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)<(16000);
  $$ = $7 ? 32 : 64;
  $kbps_header$0 = $$;
 }
 $8 = (($1) + 104|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if ($10) {
  $11 = (($1) + 120|0);
  $12 = HEAP32[$11>>2]|0;
  $kbps_header$1 = $12;
 } else {
  $kbps_header$1 = $kbps_header$0;
 }
 $13 = ($3*72000)|0;
 $14 = (($13) + 72000)|0;
 $15 = Math_imul($14, $kbps_header$1)|0;
 $16 = (($1) + 64|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($15|0) / ($17|0))&-1;
 $19 = (($1) + 24|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + 156)|0;
 $22 = (($1) + 85792|0);
 HEAP32[$22>>2] = $18;
 $23 = ($18|0)<($21|0);
 $24 = ($18|0)>(2880);
 $or$cond = $23 | $24;
 if ($or$cond) {
  $25 = (($1) + 156|0);
  HEAP32[$25>>2] = 0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $26 = (($1) + 85784|0);
 HEAP32[$26>>2] = 0;
 $27 = (($1) + 85788|0);
 HEAP32[$27>>2] = 0;
 $28 = (($1) + 85760|0);
 HEAP32[$28>>2] = 0;
 $29 = (($1) + 85764|0);
 HEAP32[$29>>2] = 0;
 $30 = (($1) + 85768|0);
 HEAP32[$30>>2] = 1;
 $31 = (($1) + 85772|0);
 HEAP32[$31>>2] = 0;
 $32 = (($1) + 85780|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)==(0|0);
 do {
  if ($34) {
   $35 = (_malloc(1600)|0);
   HEAP32[$32>>2] = $35;
   $36 = ($35|0)==(0|0);
   $37 = (($1) + 85776|0);
   if (!($36)) {
    HEAP32[$37>>2] = 400;
    break;
   }
   HEAP32[$37>>2] = 0;
   _lame_errorf($1,144800,$vararg_buffer);
   $38 = (($1) + 156|0);
   HEAP32[$38>>2] = 0;
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 _memset(($vararg_buffer|0),0,2880)|0;
 _setLameTagFrameHeader($1,$vararg_buffer);
 $39 = HEAP32[$22>>2]|0;
 $40 = ($39|0)==(0);
 if ($40) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $i$02 = 0;
 }
 while(1) {
  $41 = (($vararg_buffer) + ($i$02)|0);
  $42 = HEAP8[$41>>0]|0;
  _add_dummy_byte($1,$42,1);
  $43 = (($i$02) + 1)|0;
  $exitcond = ($43|0)==($39|0);
  if ($exitcond) {
   $$0 = 0;
   break;
  } else {
   $i$02 = $43;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _setLameTagFrameHeader($gfc,$buffer) {
 $gfc = $gfc|0;
 $buffer = $buffer|0;
 var $$ = 0, $$masked = 0, $$masked1 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bbyte$0 = 0;
 var $bitrate$0 = 0, $bitrate$1 = 0, $not$ = 0, $sext = 0, $sext2 = 0, $storemerge = 0, $storemerge$in = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$buffer>>0] = -1;
 $0 = (($buffer) + 1|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = $2 << 3;
 $4 = $3 | 7;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = $4 << 1;
 $7 = (($gfc) + 64|0);
 $8 = HEAP32[$7>>2]|0;
 $not$ = ($8|0)>(15999);
 $9 = $not$&1;
 $10 = $6 | $9;
 $11 = $10&255;
 HEAP8[$0>>0] = $11;
 $12 = $10 << 1;
 $13 = (($gfc) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 & 1;
 $$masked = $12 & 62;
 $16 = $$masked | $15;
 $17 = $16 << 2;
 $18 = $17 | 1;
 $19 = $18&255;
 HEAP8[$0>>0] = $19;
 $20 = $18 << 1;
 $21 = (($gfc) + 160|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==(0);
 $24 = $23&1;
 $25 = $20 | $24;
 $26 = $25&255;
 HEAP8[$0>>0] = $26;
 $27 = (($buffer) + 2|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = $28&255;
 $30 = $29 << 4;
 $31 = (($gfc) + 84744|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $32 & 15;
 $34 = $30 | $33;
 $35 = $34&255;
 HEAP8[$27>>0] = $35;
 $36 = $34 << 2;
 $37 = (($gfc) + 20|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = $38 & 3;
 $$masked1 = $36 & 124;
 $40 = $$masked1 | $39;
 $41 = $40 << 1;
 $42 = $41&255;
 HEAP8[$27>>0] = $42;
 $43 = $40 << 2;
 $44 = (($gfc) + 172|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $45 & 1;
 $47 = $43 | $46;
 $48 = $47&255;
 HEAP8[$27>>0] = $48;
 $49 = (($buffer) + 3|0);
 $50 = HEAP8[$49>>0]|0;
 $51 = $50&255;
 $52 = $51 << 2;
 $53 = (($gfc) + 180|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = $54 & 3;
 $56 = $52 | $55;
 $57 = $56&255;
 HEAP8[$49>>0] = $57;
 $58 = $56 << 2;
 $59 = (($gfc) + 84756|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = $60 & 3;
 $62 = $58 | $61;
 $63 = $62&255;
 HEAP8[$49>>0] = $63;
 $64 = $62 << 1;
 $65 = (($gfc) + 164|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = $66 & 1;
 $68 = $64 | $67;
 $69 = $68&255;
 HEAP8[$49>>0] = $69;
 $70 = $68 << 1;
 $71 = (($gfc) + 168|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = $72 & 1;
 $74 = $70 | $73;
 $75 = $74&255;
 HEAP8[$49>>0] = $75;
 $76 = $74 << 2;
 $77 = (($gfc) + 176|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = $78 & 3;
 $80 = $76 | $79;
 $81 = $80&255;
 HEAP8[$49>>0] = $81;
 HEAP8[$buffer>>0] = -1;
 $82 = HEAP32[$13>>2]|0;
 $83 = ($82|0)==(1);
 if ($83) {
  $bitrate$0 = 128;
 } else {
  $84 = HEAP32[$7>>2]|0;
  $85 = ($84|0)<(16000);
  $$ = $85 ? 32 : 64;
  $bitrate$0 = $$;
 }
 $86 = (($gfc) + 104|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = ($87|0)==(0);
 if ($88) {
  $89 = (($gfc) + 120|0);
  $90 = HEAP32[$89>>2]|0;
  $bitrate$1 = $90;
 } else {
  $bitrate$1 = $bitrate$0;
 }
 $91 = (($gfc) + 152|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = ($92|0)==(0);
 if ($93) {
  $94 = HEAP32[$7>>2]|0;
  $95 = (_BitrateIndex($bitrate$1,$82,$94)|0);
  $96 = $95 << 4;
  $97 = $96&255;
  $$pre = HEAP32[$13>>2]|0;
  $99 = $$pre;$bbyte$0 = $97;
 } else {
  $99 = $82;$bbyte$0 = 0;
 }
 $98 = ($99|0)==(1);
 $sext2 = $25 << 24;
 $sext = $sext2 >> 24;
 $100 = $sext & -15;
 if ($98) {
  $101 = $100 | 10;
  $102 = $101&255;
  HEAP8[$0>>0] = $102;
  $103 = HEAP8[$27>>0]|0;
  $104 = $103&255;
  $105 = $104 & 13;
  $106 = $bbyte$0 << 24 >> 24;
  $107 = $105 | $106;
  $storemerge$in = $107;
  $storemerge = $storemerge$in&255;
  HEAP8[$27>>0] = $storemerge;
  STACKTOP = sp;return;
 } else {
  $108 = $100 | 2;
  $109 = $108&255;
  HEAP8[$0>>0] = $109;
  $110 = HEAP8[$27>>0]|0;
  $111 = $110&255;
  $112 = $111 & 13;
  $113 = $bbyte$0&255;
  $114 = $112 | $113;
  $storemerge$in = $114;
  $storemerge = $storemerge$in&255;
  HEAP8[$27>>0] = $storemerge;
  STACKTOP = sp;return;
 }
}
function _UpdateMusicCRC($crc,$buffer,$size) {
 $crc = $crc|0;
 $buffer = $buffer|0;
 $size = $size|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($size|0)>(0);
 if (!($0)) {
  STACKTOP = sp;return;
 }
 $$pre = HEAP16[$crc>>1]|0;
 $5 = $$pre;$i$01 = 0;
 while(1) {
  $1 = (($buffer) + ($i$01)|0);
  $2 = HEAP8[$1>>0]|0;
  $3 = $2&255;
  $4 = $5&65535;
  $6 = $5 ^ $3;
  $7 = $4 >>> 8;
  $8 = $6&65535;
  $9 = $8 & 255;
  $10 = (144856 + ($9<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $7 ^ $11;
  $13 = $12&65535;
  HEAP16[$crc>>1] = $13;
  $14 = (($i$01) + 1)|0;
  $exitcond = ($14|0)==($size|0);
  if ($exitcond) {
   break;
  } else {
   $5 = $13;$i$01 = $14;
  }
 }
 STACKTOP = sp;return;
}
function _lame_get_lametag_frame($gfp,$buffer,$size) {
 $gfp = $gfp|0;
 $buffer = $buffer|0;
 $size = $size|0;
 var $$ = 0, $$$$i = 0, $$$i = 0, $$$i1 = 0, $$0 = 0, $$08$i = 0, $$1$i = 0, $$2$i = 0, $$3$i = 0, $$4$i = 0, $$5$i = 0, $$off$i = 0, $$sum = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0;
 var $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum20 = 0, $$sum21 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum32 = 0, $$sum33 = 0, $$sum34 = 0, $$sum35 = 0;
 var $$sum36 = 0, $$sum37 = 0, $$sum38 = 0, $$sum39 = 0, $$sum4 = 0, $$sum40 = 0, $$sum41 = 0, $$sum42 = 0, $$sum43 = 0, $$sum5 = 0, $$sum6 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0.0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0.0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0.0, $320 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bNoGapMore$0$i = 0, $bNoGapPrevious$1$i = 0, $bNonOptimal$0$i = 0, $brmerge$i = 0, $btToc = 0;
 var $crc$0$lcssa = 0, $crc$045 = 0, $exitcond = 0, $exitcond$i = 0, $exitcond$i2 = 0, $exitcond52 = 0, $floorf$i = 0.0, $i$01$i = 0, $i$049 = 0, $i$07$i = 0, $i1$046 = 0, $ispos$i = 0, $nABRBitrate$0$i = 0, $nABRBitrate$0$in$ph$i = 0, $nABRBitrate$010$i = 0, $nABRBitrate$011$i = 0, $nABRBitrate$012$i = 0, $nPeakSignalAmplitude$0$i = 0, $nRadioReplayGain$0$i = 0, $nSourceFreq$0$i = 0;
 var $nStereoMode$0$i = 0, $nStreamIndex$1 = 0, $nVBR$0$i = 0, $neg$i = 0, $or$cond$i = 0, $phitmp$i = 0, $phitmp6$i = 0, $switch$i = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $btToc = sp;
 $0 = ($gfp|0)==(0|0);
 if ($0) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = (($gfp) + 288|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = HEAP32[$2>>2]|0;
 $5 = ($4|0)==(-487877);
 if (!($5)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = (($2) + 156|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0);
 if ($8) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = (($2) + 85772|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)<(1);
 if ($11) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = (($2) + 85792|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13>>>0)>($size>>>0);
 if ($14) {
  $$0 = $13;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = ($buffer|0)==(0|0);
 if ($15) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 _memset(($buffer|0),0,($13|0))|0;
 _setLameTagFrameHeader($2,$buffer);
 dest=$btToc+0|0; stop=dest+100|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $16 = (($2) + 152|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0);
 if ($18) {
  $24 = HEAP32[$9>>2]|0;
  $25 = ($24|0)<(1);
  if (!($25)) {
   $26 = (($2) + 85780|0);
   $27 = (($2) + 85760|0);
   $28 = HEAP32[$26>>2]|0;
   $29 = HEAP32[$27>>2]|0;
   $30 = (+($29|0));
   $31 = $30;
   $i$01$i = 1;
   while(1) {
    $32 = (+($i$01$i|0));
    $33 = $32 * 0.00999999977648258209228;
    $34 = (+($24|0));
    $35 = $34 * $33;
    $floorf$i = (+Math_floor((+$35)));
    $36 = (~~(($floorf$i)));
    $37 = (($24) + -1)|0;
    $38 = ($36|0)>($37|0);
    $$$i = $38 ? $37 : $36;
    $39 = (($28) + ($$$i<<2)|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (+($40|0));
    $42 = $41;
    $43 = $42 * 256.0;
    $44 = $43 / $31;
    $45 = (~~(($44)));
    $46 = ($45|0)>(255);
    $47 = $45&255;
    $48 = $46 ? -1 : $47;
    $49 = (($btToc) + ($i$01$i)|0);
    HEAP8[$49>>0] = $48;
    $50 = (($i$01$i) + 1)|0;
    $exitcond$i = ($50|0)==(100);
    if ($exitcond$i) {
     break;
    } else {
     $i$01$i = $50;
    }
   }
  }
 } else {
  $i$049 = 1;
  while(1) {
   $19 = ($i$049*255)|0;
   $20 = (($19|0) / 100)&-1;
   $21 = $20&255;
   $22 = (($btToc) + ($i$049)|0);
   HEAP8[$22>>0] = $21;
   $23 = (($i$049) + 1)|0;
   $exitcond52 = ($23|0)==(100);
   if ($exitcond52) {
    break;
   } else {
    $i$049 = $23;
   }
  }
 }
 $51 = (($2) + 24|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (($2) + 160|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = ($54|0)==(0);
 $56 = (($52) + -2)|0;
 $$ = $55 ? $52 : $56;
 $57 = (($2) + 104|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = ($58|0)==(0);
 $60 = (($$) + 1)|0;
 $61 = (($buffer) + ($$)|0);
 if ($59) {
  HEAP8[$61>>0] = 73;
  $62 = (($$) + 2)|0;
  $63 = (($buffer) + ($60)|0);
  HEAP8[$63>>0] = 110;
  $64 = (($$) + 3)|0;
  $65 = (($buffer) + ($62)|0);
  HEAP8[$65>>0] = 102;
  $66 = (($buffer) + ($64)|0);
  HEAP8[$66>>0] = 111;
 } else {
  HEAP8[$61>>0] = 88;
  $67 = (($$) + 2)|0;
  $68 = (($buffer) + ($60)|0);
  HEAP8[$68>>0] = 105;
  $69 = (($$) + 3)|0;
  $70 = (($buffer) + ($67)|0);
  HEAP8[$70>>0] = 110;
  $71 = (($buffer) + ($69)|0);
  HEAP8[$71>>0] = 103;
 }
 $nStreamIndex$1 = (($$) + 4)|0;
 $72 = (($buffer) + ($nStreamIndex$1)|0);
 HEAP8[$72>>0] = 0;
 $$sum = (($$) + 5)|0;
 $73 = (($buffer) + ($$sum)|0);
 HEAP8[$73>>0] = 0;
 $$sum3 = (($$) + 6)|0;
 $74 = (($buffer) + ($$sum3)|0);
 HEAP8[$74>>0] = 0;
 $$sum4 = (($$) + 7)|0;
 $75 = (($buffer) + ($$sum4)|0);
 HEAP8[$75>>0] = 15;
 $76 = (($$) + 8)|0;
 $77 = (($buffer) + ($76)|0);
 $78 = (($2) + 85784|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = $79 >>> 24;
 $81 = $80&255;
 HEAP8[$77>>0] = $81;
 $82 = $79 >>> 16;
 $83 = $82&255;
 $$sum5 = (($$) + 9)|0;
 $84 = (($buffer) + ($$sum5)|0);
 HEAP8[$84>>0] = $83;
 $85 = $79 >>> 8;
 $86 = $85&255;
 $$sum6 = (($$) + 10)|0;
 $87 = (($buffer) + ($$sum6)|0);
 HEAP8[$87>>0] = $86;
 $88 = $79&255;
 $$sum7 = (($$) + 11)|0;
 $89 = (($buffer) + ($$sum7)|0);
 HEAP8[$89>>0] = $88;
 $90 = (($$) + 12)|0;
 $91 = (($2) + 85788|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = HEAP32[$12>>2]|0;
 $94 = (($93) + ($92))|0;
 $95 = (($buffer) + ($90)|0);
 $96 = $94 >>> 24;
 $97 = $96&255;
 HEAP8[$95>>0] = $97;
 $98 = $94 >>> 16;
 $99 = $98&255;
 $$sum8 = (($$) + 13)|0;
 $100 = (($buffer) + ($$sum8)|0);
 HEAP8[$100>>0] = $99;
 $101 = $94 >>> 8;
 $102 = $101&255;
 $$sum9 = (($$) + 14)|0;
 $103 = (($buffer) + ($$sum9)|0);
 HEAP8[$103>>0] = $102;
 $104 = $94&255;
 $$sum10 = (($$) + 15)|0;
 $105 = (($buffer) + ($$sum10)|0);
 HEAP8[$105>>0] = $104;
 $106 = (($$) + 16)|0;
 $107 = (($buffer) + ($106)|0);
 dest=$107+0|0; src=$btToc+0|0; stop=dest+100|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $108 = (($$) + 116)|0;
 $109 = HEAP32[$53>>2]|0;
 $110 = ($109|0)==(0);
 if (!($110)) {
  _CRC_writeheader($2,$buffer);
 }
 $111 = ($108|0)==(0);
 if ($111) {
  $crc$0$lcssa = 0;
 } else {
  $crc$045 = 0;$i1$046 = 0;
  while(1) {
   $112 = (($buffer) + ($i1$046)|0);
   $113 = HEAP8[$112>>0]|0;
   $114 = $113&255;
   $115 = $crc$045&65535;
   $116 = $114 ^ $crc$045;
   $117 = $115 >>> 8;
   $118 = $116&65535;
   $119 = $118 & 255;
   $120 = (144856 + ($119<<2)|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = $121 ^ $117;
   $123 = $122&65535;
   $124 = (($i1$046) + 1)|0;
   $exitcond = ($124|0)==($108|0);
   if ($exitcond) {
    $crc$0$lcssa = $123;
    break;
   } else {
    $crc$045 = $123;$i1$046 = $124;
   }
  }
 }
 $125 = (($buffer) + ($108)|0);
 $126 = HEAP32[$1>>2]|0;
 $127 = (($126) + 84760|0);
 $128 = HEAP32[$127>>2]|0;
 $129 = (($126) + 84764|0);
 $130 = HEAP32[$129>>2]|0;
 $131 = (($gfp) + 164|0);
 $132 = HEAP32[$131>>2]|0;
 $133 = Math_imul($132, -10)|0;
 $134 = (($133) + 100)|0;
 $135 = (($gfp) + 44|0);
 $136 = HEAP32[$135>>2]|0;
 $137 = (($134) - ($136))|0;
 $138 = (_get_lame_tag_encoder_short_version()|0);
 $139 = (($126) + 52|0);
 $140 = HEAP32[$139>>2]|0;
 $141 = (+($140|0));
 $142 = $141 * 0.0100000000000000002082;
 $143 = $142 + 0.5;
 $144 = $143 > 255.0;
 if ($144) {
  $250 = -1;
 } else {
  $phitmp$i = (~~(($143))&255);
  $250 = $phitmp$i;
 }
 $145 = (($126) + 28|0);
 $146 = HEAP32[$145>>2]|0;
 $147 = (($126) + 96|0);
 $148 = HEAP32[$147>>2]|0;
 $149 = ($148|0)!=(0);
 $150 = (($gfp) + 72|0);
 $151 = HEAP32[$150>>2]|0;
 $152 = (($gfp) + 76|0);
 $153 = HEAP32[$152>>2]|0;
 $154 = (($126) + 208|0);
 $155 = HEAP32[$154>>2]|0;
 $156 = (($126) + 104|0);
 $157 = HEAP32[$156>>2]|0;
 if ((($157|0) == 0)) {
  $159 = (($126) + 120|0);
  $nABRBitrate$0$in$ph$i = $159;
  label = 25;
 } else if ((($157|0) == 3)) {
  $158 = (($126) + 108|0);
  $nABRBitrate$0$in$ph$i = $158;
  label = 25;
 } else {
  $160 = (($126) + 112|0);
  $161 = HEAP32[$160>>2]|0;
  $162 = (($126) + 16|0);
  $163 = HEAP32[$162>>2]|0;
  $164 = ((141224 + ($163<<6)|0) + ($161<<2)|0);
  $nABRBitrate$0$i = HEAP32[$164>>2]|0;
  $165 = ($157>>>0)<(7);
  if ($165) {
   $nABRBitrate$012$i = $nABRBitrate$0$i;
   label = 27;
  } else {
   $nABRBitrate$011$i = $nABRBitrate$0$i;$nVBR$0$i = 0;
  }
 }
 if ((label|0) == 25) {
  $nABRBitrate$010$i = HEAP32[$nABRBitrate$0$in$ph$i>>2]|0;
  $nABRBitrate$012$i = $nABRBitrate$010$i;
  label = 27;
 }
 if ((label|0) == 27) {
  $166 = (144848 + ($157)|0);
  $167 = HEAP8[$166>>0]|0;
  $nABRBitrate$011$i = $nABRBitrate$012$i;$nVBR$0$i = $167;
 }
 $168 = (($126) + 128|0);
 $169 = HEAP32[$168>>2]|0;
 $170 = ($169|0)==(0);
 do {
  if ($170) {
   $nRadioReplayGain$0$i = 0;
  } else {
   $171 = (($126) + 85688|0);
   $172 = HEAP32[$171>>2]|0;
   $173 = ($172|0)>(510);
   $$$i1 = $173 ? 510 : $172;
   $174 = ($$$i1|0)<(-510);
   $$$$i = $174 ? -510 : $$$i1;
   $175 = ($$$$i|0)>(-1);
   if ($175) {
    $176 = $$$$i | 11264;
    $nRadioReplayGain$0$i = $176;
    break;
   } else {
    $177 = (0 - ($$$$i))|0;
    $178 = $177 | 11776;
    $nRadioReplayGain$0$i = $178;
    break;
   }
  }
 } while(0);
 $179 = (($126) + 132|0);
 $180 = HEAP32[$179>>2]|0;
 $181 = ($180|0)==(0);
 if ($181) {
  $nPeakSignalAmplitude$0$i = 0;
 } else {
  $182 = (($126) + 85684|0);
  $183 = +HEAPF32[$182>>2];
  $184 = $183;
  $185 = $184 * 256.007812738425855059;
  $186 = $185 + 0.5;
  $187 = (~~(($186)));
  $ispos$i = ($187|0)>(-1);
  $neg$i = (0 - ($187))|0;
  $188 = $ispos$i ? $187 : $neg$i;
  $nPeakSignalAmplitude$0$i = $188;
 }
 $189 = ($151|0)==(-1);
 if ($189) {
  $bNoGapMore$0$i = 0;$bNoGapPrevious$1$i = 0;
 } else {
  $190 = ($153|0)>(0);
  $$1$i = $190&1;
  $191 = (($151) + -1)|0;
  $192 = ($153|0)<($191|0);
  $$5$i = $192 ? 64 : 0;
  $phitmp6$i = $$1$i << 7;
  $bNoGapMore$0$i = $$5$i;$bNoGapPrevious$1$i = $phitmp6$i;
 }
 $193 = $155 & 255;
 $194 = (($155) + 16)|0;
 $195 = $149&1;
 $196 = $195 << 5;
 $197 = (($194) + ($196))|0;
 $198 = (($197) + ($bNoGapMore$0$i))|0;
 $199 = (($198) + ($bNoGapPrevious$1$i))|0;
 $200 = $199&255;
 $201 = ($137|0)<(0);
 $$2$i = $201 ? 0 : $137;
 $202 = (($126) + 180|0);
 $203 = HEAP32[$202>>2]|0;
 if ((($203|0) == 0)) {
  $nStereoMode$0$i = 4;
 } else if ((($203|0) == 2)) {
  $nStereoMode$0$i = 8;
 } else if ((($203|0) == 1)) {
  $204 = (($126) + 80|0);
  $205 = HEAP32[$204>>2]|0;
  $206 = ($205|0)==(0);
  $$3$i = $206 ? 12 : 16;
  $nStereoMode$0$i = $$3$i;
 } else if ((($203|0) == 3)) {
  $nStereoMode$0$i = 0;
 } else {
  $nStereoMode$0$i = 28;
 }
 $207 = (($126) + 60|0);
 $208 = HEAP32[$207>>2]|0;
 $209 = ($208|0)<(32001);
 if ($209) {
  $nSourceFreq$0$i = 0;
 } else {
  $210 = ($208|0)==(48000);
  if ($210) {
   $nSourceFreq$0$i = 128;
  } else {
   $211 = ($208|0)>(48000);
   $$4$i = $211 ? 192 : 64;
   $nSourceFreq$0$i = $$4$i;
  }
 }
 $212 = (($126) + 184|0);
 $213 = HEAP32[$212>>2]|0;
 $$off$i = (($213) + -2)|0;
 $switch$i = ($$off$i>>>0)<(2);
 do {
  if ($switch$i) {
   label = 51;
  } else {
   $214 = ($140|0)==(-1);
   if ($214) {
    $215 = (($126) + 56|0);
    $216 = HEAP32[$215>>2]|0;
    $217 = ($216|0)==(-1);
    if ($217) {
     label = 51;
     break;
    }
   }
   $218 = (($126) + 144|0);
   $219 = HEAP32[$218>>2]|0;
   $220 = ($219|0)==(0);
   if (!($220)) {
    $221 = (($126) + 120|0);
    $222 = HEAP32[$221>>2]|0;
    $223 = ($222|0)<(320);
    if ($223) {
     label = 51;
     break;
    }
   }
   $224 = (($126) + 220|0);
   $225 = HEAP32[$224>>2]|0;
   $226 = ($225|0)==(0);
   if (!($226)) {
    label = 51;
    break;
   }
   $227 = (($126) + 212|0);
   $228 = HEAP32[$227>>2]|0;
   $229 = ($228|0)!=(0);
   $230 = ($193|0)==(0);
   $or$cond$i = $229 | $230;
   $brmerge$i = $or$cond$i | $209;
   if ($brmerge$i) {
    label = 51;
   } else {
    $bNonOptimal$0$i = 0;
   }
  }
 } while(0);
 if ((label|0) == 51) {
  $bNonOptimal$0$i = 32;
 }
 $231 = (($nStereoMode$0$i) + ($146))|0;
 $232 = (($231) + ($nSourceFreq$0$i))|0;
 $233 = (($232) + ($bNonOptimal$0$i))|0;
 $234 = $233&255;
 $235 = (($126) + 85752|0);
 $236 = HEAP16[$235>>1]|0;
 $237 = $$2$i >>> 24;
 $238 = $237&255;
 HEAP8[$125>>0] = $238;
 $239 = $$2$i >>> 16;
 $240 = $239&255;
 $$sum11 = (($$) + 117)|0;
 $241 = (($buffer) + ($$sum11)|0);
 HEAP8[$241>>0] = $240;
 $242 = $$2$i >>> 8;
 $243 = $242&255;
 $$sum12 = (($$) + 118)|0;
 $244 = (($buffer) + ($$sum12)|0);
 HEAP8[$244>>0] = $243;
 $245 = $$2$i&255;
 $$sum13 = (($$) + 119)|0;
 $246 = (($buffer) + ($$sum13)|0);
 HEAP8[$246>>0] = $245;
 $$sum14 = (($$) + 120)|0;
 $247 = (($buffer) + ($$sum14)|0);
 (_strncpy(($247|0),($138|0),9)|0);
 $$sum15 = (($$) + 129)|0;
 $248 = (($buffer) + ($$sum15)|0);
 HEAP8[$248>>0] = $nVBR$0$i;
 $$sum16 = (($$) + 130)|0;
 $249 = (($buffer) + ($$sum16)|0);
 HEAP8[$249>>0] = $250;
 $$sum17 = (($$) + 131)|0;
 $251 = (($buffer) + ($$sum17)|0);
 $252 = $nPeakSignalAmplitude$0$i >>> 24;
 $253 = $252&255;
 HEAP8[$251>>0] = $253;
 $254 = $nPeakSignalAmplitude$0$i >>> 16;
 $255 = $254&255;
 $$sum18 = (($$) + 132)|0;
 $256 = (($buffer) + ($$sum18)|0);
 HEAP8[$256>>0] = $255;
 $257 = $nPeakSignalAmplitude$0$i >>> 8;
 $258 = $257&255;
 $$sum19 = (($$) + 133)|0;
 $259 = (($buffer) + ($$sum19)|0);
 HEAP8[$259>>0] = $258;
 $260 = $nPeakSignalAmplitude$0$i&255;
 $$sum20 = (($$) + 134)|0;
 $261 = (($buffer) + ($$sum20)|0);
 HEAP8[$261>>0] = $260;
 $$sum21 = (($$) + 135)|0;
 $262 = (($buffer) + ($$sum21)|0);
 $263 = $nRadioReplayGain$0$i >>> 8;
 $264 = $263&255;
 HEAP8[$262>>0] = $264;
 $265 = $nRadioReplayGain$0$i&255;
 $$sum22 = (($$) + 136)|0;
 $266 = (($buffer) + ($$sum22)|0);
 HEAP8[$266>>0] = $265;
 $$sum23 = (($$) + 137)|0;
 $267 = (($buffer) + ($$sum23)|0);
 HEAP8[$267>>0] = 0;
 $$sum24 = (($$) + 138)|0;
 $268 = (($buffer) + ($$sum24)|0);
 HEAP8[$268>>0] = 0;
 $$sum25 = (($$) + 139)|0;
 $269 = (($buffer) + ($$sum25)|0);
 HEAP8[$269>>0] = $200;
 $270 = ($nABRBitrate$011$i|0)>(254);
 if ($270) {
  $$sum43 = (($$) + 140)|0;
  $271 = (($buffer) + ($$sum43)|0);
  HEAP8[$271>>0] = -1;
 } else {
  $272 = $nABRBitrate$011$i&255;
  $$sum26 = (($$) + 140)|0;
  $273 = (($buffer) + ($$sum26)|0);
  HEAP8[$273>>0] = $272;
 }
 $274 = $128 >>> 4;
 $275 = $274&255;
 $$sum27 = (($$) + 141)|0;
 $276 = (($buffer) + ($$sum27)|0);
 HEAP8[$276>>0] = $275;
 $277 = $128 << 4;
 $278 = $130 >>> 8;
 $279 = (($278) + ($277))|0;
 $280 = $279&255;
 $$sum28 = (($$) + 142)|0;
 $281 = (($buffer) + ($$sum28)|0);
 HEAP8[$281>>0] = $280;
 $282 = $130&255;
 $$sum29 = (($$) + 143)|0;
 $283 = (($buffer) + ($$sum29)|0);
 HEAP8[$283>>0] = $282;
 $$sum30 = (($$) + 144)|0;
 $284 = (($buffer) + ($$sum30)|0);
 HEAP8[$284>>0] = $234;
 $$sum31 = (($$) + 145)|0;
 $285 = (($buffer) + ($$sum31)|0);
 HEAP8[$285>>0] = 0;
 $$sum32 = (($$) + 146)|0;
 $286 = (($buffer) + ($$sum32)|0);
 $287 = (($126) + 100|0);
 $288 = HEAP32[$287>>2]|0;
 $289 = $288 >>> 8;
 $290 = $289&255;
 HEAP8[$286>>0] = $290;
 $291 = $288&255;
 $$sum33 = (($$) + 147)|0;
 $292 = (($buffer) + ($$sum33)|0);
 HEAP8[$292>>0] = $291;
 $$sum34 = (($$) + 148)|0;
 $293 = (($buffer) + ($$sum34)|0);
 HEAP8[$293>>0] = $97;
 $$sum35 = (($$) + 149)|0;
 $294 = (($buffer) + ($$sum35)|0);
 HEAP8[$294>>0] = $99;
 $$sum36 = (($$) + 150)|0;
 $295 = (($buffer) + ($$sum36)|0);
 HEAP8[$295>>0] = $102;
 $$sum37 = (($$) + 151)|0;
 $296 = (($buffer) + ($$sum37)|0);
 HEAP8[$296>>0] = $104;
 $$sum38 = (($$) + 152)|0;
 $297 = (($buffer) + ($$sum38)|0);
 $298 = ($236&65535) >>> 8;
 $299 = $298&255;
 HEAP8[$297>>0] = $299;
 $300 = $236&255;
 $$sum39 = (($$) + 153)|0;
 $301 = (($buffer) + ($$sum39)|0);
 HEAP8[$301>>0] = $300;
 $$08$i = $crc$0$lcssa;$i$07$i = 0;
 while(1) {
  $$sum40 = (($i$07$i) + ($108))|0;
  $302 = (($buffer) + ($$sum40)|0);
  $303 = HEAP8[$302>>0]|0;
  $304 = $303&255;
  $305 = $$08$i&65535;
  $306 = $304 ^ $$08$i;
  $307 = $305 >>> 8;
  $308 = $306&65535;
  $309 = $308 & 255;
  $310 = (144856 + ($309<<2)|0);
  $311 = HEAP32[$310>>2]|0;
  $312 = $311 ^ $307;
  $313 = $312&65535;
  $314 = (($i$07$i) + 1)|0;
  $exitcond$i2 = ($314|0)==(38);
  if ($exitcond$i2) {
   break;
  } else {
   $$08$i = $313;$i$07$i = $314;
  }
 }
 $$sum41 = (($$) + 154)|0;
 $315 = (($buffer) + ($$sum41)|0);
 $316 = ($313&65535) >>> 8;
 $317 = $316&255;
 HEAP8[$315>>0] = $317;
 $318 = $312&255;
 $$sum42 = (($$) + 155)|0;
 $319 = (($buffer) + ($$sum42)|0);
 HEAP8[$319>>0] = $318;
 $320 = HEAP32[$12>>2]|0;
 $$0 = $320;
 STACKTOP = sp;return ($$0|0);
}
function _PutVbrTag($gfp,$fpStream) {
 $gfp = $gfp|0;
 $fpStream = $fpStream|0;
 var $$ = 0, $$0 = 0, $$0$i2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $buffer = 0, $id3v2Header$i = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2896|0;
 $id3v2Header$i = sp + 2880|0;
 $buffer = sp;
 $0 = (($gfp) + 288|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 85772|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(1);
 if ($4) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 (_fseek(($fpStream|0),0,2)|0);
 $5 = (_ftell(($fpStream|0))|0);
 $6 = ($5|0)==(0);
 if ($6) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = (_fseek(($fpStream|0),0,0)|0);
 $8 = ($7|0)==(0);
 if (!($8)) {
  $$0 = -2;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = (_fread(($id3v2Header$i|0),1,10,($fpStream|0))|0);
 $10 = ($9|0)==(10);
 if (!($10)) {
  $$0 = -3;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = (_strncmp($id3v2Header$i,144840,3)|0);
 $12 = ($11|0)==(0);
 if ($12) {
  $13 = (($id3v2Header$i) + 6|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&255;
  $16 = $15 << 21;
  $17 = $16 & 266338304;
  $18 = (($id3v2Header$i) + 7|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&255;
  $21 = $20 << 14;
  $22 = $21 & 2080768;
  $23 = $22 | $17;
  $24 = (($id3v2Header$i) + 8|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25&255;
  $27 = $26 << 7;
  $28 = $27 & 16256;
  $29 = $23 | $28;
  $30 = (($id3v2Header$i) + 9|0);
  $31 = HEAP8[$30>>0]|0;
  $32 = $31&255;
  $33 = $32 & 127;
  $34 = $29 | $33;
  $35 = (($34) + 10)|0;
  $$0$i2 = $35;
 } else {
  $$0$i2 = 0;
 }
 (_fseek(($fpStream|0),($$0$i2|0),0)|0);
 $36 = (_lame_get_lametag_frame($gfp,$buffer,2880)|0);
 $37 = ($36>>>0)>(2880);
 if ($37) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $38 = ($36|0)==(0);
 if ($38) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $39 = (_fwrite(($buffer|0),($36|0),1,($fpStream|0))|0);
 $not$ = ($39|0)!=(1);
 $$ = $not$ << 31 >> 31;
 $$0 = $$;
 STACKTOP = sp;return ($$0|0);
}
function _get_lame_version() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return (145880|0);
}
function _get_lame_short_version() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return (145880|0);
}
function _get_lame_very_short_version() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return (145888|0);
}
function _get_lame_tag_encoder_short_version() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return (145904|0);
}
function _get_psy_version() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return (145920|0);
}
function _get_lame_url() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return (145928|0);
}
function _get_lame_version_numerical($lvp) {
 $lvp = $lvp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$lvp>>2] = 3;
 $0 = (($lvp) + 4|0);
 HEAP32[$0>>2] = 99;
 $1 = (($lvp) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = (($lvp) + 12|0);
 HEAP32[$2>>2] = 0;
 $3 = (($lvp) + 16|0);
 HEAP32[$3>>2] = 1;
 $4 = (($lvp) + 20|0);
 HEAP32[$4>>2] = 0;
 $5 = (($lvp) + 24|0);
 HEAP32[$5>>2] = 0;
 $6 = (($lvp) + 28|0);
 HEAP32[$6>>2] = 0;
 $7 = (($lvp) + 32|0);
 HEAP32[$7>>2] = 145952;
 STACKTOP = sp;return;
}
function _get_lame_os_bitness() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return (145960|0);
}
function _strlwr($str) {
 $str = $str|0;
 var $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$str>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  STACKTOP = sp;return ($str|0);
 } else {
  $$01 = $str;$3 = $0;
 }
 while(1) {
  $2 = $3 << 24 >> 24;
  $4 = (_tolower($2)|0);
  $5 = $4&255;
  HEAP8[$$01>>0] = $5;
  $6 = (($$01) + 1|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = ($7<<24>>24)==(0);
  if ($8) {
   break;
  } else {
   $$01 = $6;$3 = $7;
  }
 }
 STACKTOP = sp;return ($str|0);
}
function _strtoull_l($s,$p,$base,$loc) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 $loc = $loc|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtoull($s,$p,$base)|0);
 $1 = tempRet0;
 tempRet0 = $1;
 STACKTOP = sp;return ($0|0);
}
function _strtoll_l($s,$p,$base,$loc) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 $loc = $loc|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtoll($s,$p,$base)|0);
 $1 = tempRet0;
 tempRet0 = $1;
 STACKTOP = sp;return ($0|0);
}
function _strtoul_l($s,$p,$base,$loc) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 $loc = $loc|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtoul($s,$p,$base)|0);
 STACKTOP = sp;return ($0|0);
}
function _strtol_l($s,$p,$base,$loc) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 $loc = $loc|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtol($s,$p,$base)|0);
 STACKTOP = sp;return ($0|0);
}
function _strupr($str) {
 $str = $str|0;
 var $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$str>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  STACKTOP = sp;return ($str|0);
 } else {
  $$01 = $str;$3 = $0;
 }
 while(1) {
  $2 = $3 << 24 >> 24;
  $4 = (_toupper($2)|0);
  $5 = $4&255;
  HEAP8[$$01>>0] = $5;
  $6 = (($$01) + 1|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = ($7<<24>>24)==(0);
  if ($8) {
   break;
  } else {
   $$01 = $6;$3 = $7;
  }
 }
 STACKTOP = sp;return ($str|0);
}
function _isalnum($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $isdigit = 0, $isdigittmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isalpha($c)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $isdigittmp = (($c) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  $3 = $isdigit;
 } else {
  $3 = 1;
 }
 $2 = $3&1;
 STACKTOP = sp;return ($2|0);
}
function _isalpha($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c | 32;
 $1 = (($0) + -97)|0;
 $2 = ($1>>>0)<(26);
 $3 = $2&1;
 STACKTOP = sp;return ($3|0);
}
function _isascii($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c>>>0)<(128);
 $1 = $0&1;
 STACKTOP = sp;return ($1|0);
}
function _isblank($c) {
 $c = $c|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(32);
 $1 = ($c|0)==(9);
 $$ = $0 | $1;
 $2 = $$&1;
 STACKTOP = sp;return ($2|0);
}
function _iscntrl($c) {
 $c = $c|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c>>>0)<(32);
 $1 = ($c|0)==(127);
 $$ = $0 | $1;
 $2 = $$&1;
 STACKTOP = sp;return ($2|0);
}
function _isgraph($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -33)|0;
 $1 = ($0>>>0)<(94);
 $2 = $1&1;
 STACKTOP = sp;return ($2|0);
}
function _islower($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -97)|0;
 $1 = ($0>>>0)<(26);
 $2 = $1&1;
 STACKTOP = sp;return ($2|0);
}
function _isprint($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -32)|0;
 $1 = ($0>>>0)<(95);
 $2 = $1&1;
 STACKTOP = sp;return ($2|0);
}
function _ispunct($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isgraph($c)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $5 = 0;
 } else {
  $2 = (_isalnum($c)|0);
  $3 = ($2|0)==(0);
  $5 = $3;
 }
 $4 = $5&1;
 STACKTOP = sp;return ($4|0);
}
function _iswalnum($wc) {
 $wc = $wc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_iswdigit($wc)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = (_iswalpha($wc)|0);
  $3 = ($2|0)!=(0);
  $5 = $3;
 } else {
  $5 = 1;
 }
 $4 = $5&1;
 STACKTOP = sp;return ($4|0);
}
function _iswalpha($wc) {
 $wc = $wc|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($wc>>>0)<(131072);
 if ($0) {
  $1 = $wc >>> 8;
  $2 = (145968 + ($1)|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = $3&255;
  $5 = $4 << 5;
  $6 = $wc >>> 3;
  $7 = $6 & 31;
  $8 = $5 | $7;
  $9 = (145968 + ($8)|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&255;
  $12 = $wc & 7;
  $13 = $11 >>> $12;
  $14 = $13 & 1;
  $$0 = $14;
  STACKTOP = sp;return ($$0|0);
 } else {
  $15 = ($wc>>>0)<(196606);
  $$ = $15&1;
  $$0 = $$;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _iswblank($wc) {
 $wc = $wc|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isblank($wc)|0);
 STACKTOP = sp;return ($0|0);
}
function _iswcntrl($wc) {
 $wc = $wc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($wc>>>0)<(32);
 $1 = (($wc) + -127)|0;
 $2 = ($1>>>0)<(33);
 $or$cond = $0 | $2;
 $3 = (($wc) + -8232)|0;
 $4 = ($3>>>0)<(2);
 $or$cond3 = $or$cond | $4;
 if ($or$cond3) {
  $8 = 1;
  $7 = $8&1;
  STACKTOP = sp;return ($7|0);
 }
 $5 = (($wc) + -65529)|0;
 $6 = ($5>>>0)<(3);
 $8 = $6;
 $7 = $8&1;
 STACKTOP = sp;return ($7|0);
}
function _iswctype($wc,$type) {
 $wc = $wc|0;
 $type = $type|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 do {
  switch ($type|0) {
  case 9:  {
   $8 = (_iswpunct($wc)|0);
   $$0 = $8;
   break;
  }
  case 11:  {
   $10 = (_iswupper($wc)|0);
   $$0 = $10;
   break;
  }
  case 10:  {
   $9 = (_iswspace($wc)|0);
   $$0 = $9;
   break;
  }
  case 3:  {
   $2 = (_iswblank($wc)|0);
   $$0 = $2;
   break;
  }
  case 5:  {
   $4 = (_iswdigit($wc)|0);
   $$0 = $4;
   break;
  }
  case 1:  {
   $0 = (_iswalnum($wc)|0);
   $$0 = $0;
   break;
  }
  case 12:  {
   $11 = (_iswxdigit($wc)|0);
   $$0 = $11;
   break;
  }
  case 6:  {
   $5 = (_iswgraph($wc)|0);
   $$0 = $5;
   break;
  }
  case 2:  {
   $1 = (_iswalpha($wc)|0);
   $$0 = $1;
   break;
  }
  case 8:  {
   $7 = (_iswprint($wc)|0);
   $$0 = $7;
   break;
  }
  case 4:  {
   $3 = (_iswcntrl($wc)|0);
   $$0 = $3;
   break;
  }
  case 7:  {
   $6 = (_iswlower($wc)|0);
   $$0 = $6;
   break;
  }
  default: {
   $$0 = 0;
  }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _wctype($s) {
 $s = $s|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $i$01 = 0, $p$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$s>>0]|0;
 $2 = 97;$i$01 = 1;$p$02 = 148944;
 while(1) {
  $1 = ($0<<24>>24)==($2<<24>>24);
  if ($1) {
   $3 = (_strcmp($s,$p$02)|0);
   $4 = ($3|0)==(0);
   if ($4) {
    $$0 = $i$01;
    label = 5;
    break;
   }
  }
  $5 = (($i$01) + 1)|0;
  $6 = (($p$02) + 6|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = ($7<<24>>24)==(0);
  if ($8) {
   $$0 = 0;
   label = 5;
   break;
  } else {
   $2 = $7;$i$01 = $5;$p$02 = $6;
  }
 }
 if ((label|0) == 5) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _iswdigit($wc) {
 $wc = $wc|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($wc) + -48)|0;
 $1 = ($0>>>0)<(10);
 $2 = $1&1;
 STACKTOP = sp;return ($2|0);
}
function _iswgraph($wc) {
 $wc = $wc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_iswspace($wc)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = (_iswprint($wc)|0);
  $3 = ($2|0)!=(0);
  $5 = $3;
 } else {
  $5 = 0;
 }
 $4 = $5&1;
 STACKTOP = sp;return ($4|0);
}
function _iswlower($wc) {
 $wc = $wc|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_towupper($wc)|0);
 $1 = ($wc|0)==(223);
 $not$ = ($0|0)!=($wc|0);
 $$ = $1 | $not$;
 $2 = $$&1;
 STACKTOP = sp;return ($2|0);
}
function _iswprint($wc) {
 $wc = $wc|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($wc>>>0)<(255);
 if ($0) {
  $1 = (($wc) + 1)|0;
  $2 = $1 & 127;
  $3 = ($2>>>0)>(32);
  $4 = $3&1;
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = ($wc>>>0)<(8232);
 $6 = (($wc) + -8234)|0;
 $7 = ($6>>>0)<(47062);
 $or$cond = $5 | $7;
 $8 = (($wc) + -57344)|0;
 $9 = ($8>>>0)<(8185);
 $or$cond3 = $or$cond | $9;
 if ($or$cond3) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $10 = (($wc) + -65532)|0;
  $11 = ($10>>>0)>(1048579);
  $12 = $wc & 65534;
  $13 = ($12|0)==(65534);
  $or$cond5 = $11 | $13;
  $14 = $or$cond5&1;
  $$ = $14 ^ 1;
  STACKTOP = sp;return ($$|0);
 }
 return 0|0;
}
function _iswpunct($wc) {
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($wc>>>0)<(131072);
 if (!($0)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = $wc >>> 8;
 $2 = (149024 + ($1)|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = $4 << 5;
 $6 = $wc >>> 3;
 $7 = $6 & 31;
 $8 = $5 | $7;
 $9 = (149024 + ($8)|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = $wc & 7;
 $13 = $11 >>> $12;
 $14 = $13 & 1;
 $$0 = $14;
 STACKTOP = sp;return ($$0|0);
}
function _iswspace($wc) {
 $wc = $wc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($wc|0)==(0);
 if ($0) {
  $4 = 0;
 } else {
  $1 = (_wcschr(152192,$wc)|0);
  $2 = ($1|0)!=(0|0);
  $4 = $2;
 }
 $3 = $4&1;
 STACKTOP = sp;return ($3|0);
}
function _iswupper($wc) {
 $wc = $wc|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_towlower($wc)|0);
 $1 = ($0|0)!=($wc|0);
 $2 = $1&1;
 STACKTOP = sp;return ($2|0);
}
function _iswxdigit($wc) {
 $wc = $wc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($wc) + -48)|0;
 $1 = ($0>>>0)<(10);
 if ($1) {
  $6 = 1;
 } else {
  $2 = $wc | 32;
  $3 = (($2) + -97)|0;
  $4 = ($3>>>0)<(6);
  $6 = $4;
 }
 $5 = $6&1;
 STACKTOP = sp;return ($5|0);
}
function _toascii($c) {
 $c = $c|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 127;
 STACKTOP = sp;return ($0|0);
}
function _toupper($c) {
 $c = $c|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_islower($c)|0);
 $1 = ($0|0)==(0);
 $2 = $c & 95;
 $$0 = $1 ? $c : $2;
 STACKTOP = sp;return ($$0|0);
}
function _towupper($wc) {
 $wc = $wc|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___towcase($wc,0)|0);
 STACKTOP = sp;return ($0|0);
}
function ___towcase($wc,$lower) {
 $wc = $wc|0;
 $lower = $lower|0;
 var $$0 = 0, $$neg16 = 0, $$neg19 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $i$024 = 0, $i$121 = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $lower << 1;
 $1 = (($0) + -1)|0;
 $2 = (($lower) + -1)|0;
 $3 = (_iswalpha($wc)|0);
 $4 = ($3|0)==(0);
 $5 = (($wc) + -1536)|0;
 $6 = ($5>>>0)<(2560);
 $or$cond9 = $4 | $6;
 $7 = (($wc) + -11776)|0;
 $8 = ($7>>>0)<(30784);
 $or$cond11 = $or$cond9 | $8;
 $9 = (($wc) + -43008)|0;
 $10 = ($9>>>0)<(22272);
 $or$cond13 = $or$cond11 | $10;
 if ($or$cond13) {
  $$0 = $wc;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = ($lower|0)==(0);
 if ($11) {
  $16 = (($wc) + -11520)|0;
  $17 = ($16>>>0)<(38);
  if ($17) {
   $18 = (($wc) + -7264)|0;
   $$0 = $18;
   STACKTOP = sp;return ($$0|0);
  } else {
   $i$024 = 0;
  }
 } else {
  $12 = (($wc) + -4256)|0;
  $13 = ($12>>>0)<(46);
  if ($13) {
   $14 = ($wc|0)>(4293);
   if ($14) {
    if (!((($wc|0) == 4295) | (($wc|0) == 4301))) {
     $$0 = $wc;
     STACKTOP = sp;return ($$0|0);
    }
   }
   $15 = (($wc) + 7264)|0;
   $$0 = $15;
   STACKTOP = sp;return ($$0|0);
  } else {
   $i$024 = 0;
  }
 }
 while(1) {
  $25 = ((152280 + ($i$024<<2)|0) + 3|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = (152280 + ($i$024<<2)|0);
  $28 = HEAP16[$27>>1]|0;
  $29 = $28&65535;
  $30 = ((152280 + ($i$024<<2)|0) + 2|0);
  $31 = HEAP8[$30>>0]|0;
  $32 = $31 << 24 >> 24;
  $33 = $32 & $2;
  $$neg16 = (($wc) - ($29))|0;
  $34 = (($$neg16) - ($33))|0;
  $35 = $26&255;
  $36 = ($34>>>0)<($35>>>0);
  $20 = (($i$024) + 1)|0;
  if ($36) {
   label = 12;
   break;
  }
  $19 = ($20|0)==(61);
  if ($19) {
   break;
  } else {
   $i$024 = $20;
  }
 }
 if ((label|0) == 12) {
  $37 = ($31<<24>>24)==(1);
  if ($37) {
   $38 = (($lower) + ($wc))|0;
   $39 = $$neg16 & 1;
   $40 = (($38) - ($39))|0;
   $$0 = $40;
   STACKTOP = sp;return ($$0|0);
  } else {
   $41 = Math_imul($32, $1)|0;
   $42 = (($41) + ($wc))|0;
   $$0 = $42;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $21 = (1 - ($lower))|0;
 $22 = (152528 + ($21<<1)|0);
 $23 = HEAP16[$22>>1]|0;
 $24 = ($23<<16>>16)==(0);
 L26: do {
  if (!($24)) {
   $48 = $23;$i$121 = 0;
   while(1) {
    $47 = $48&65535;
    $49 = ($47|0)==($wc|0);
    $44 = (($i$121) + 1)|0;
    if ($49) {
     break;
    }
    $43 = ((152528 + ($44<<2)|0) + ($21<<1)|0);
    $45 = HEAP16[$43>>1]|0;
    $46 = ($45<<16>>16)==(0);
    if ($46) {
     break L26;
    } else {
     $48 = $45;$i$121 = $44;
    }
   }
   $50 = ((152528 + ($i$121<<2)|0) + ($lower<<1)|0);
   $51 = HEAP16[$50>>1]|0;
   $52 = $51&65535;
   $$0 = $52;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $53 = ($lower*40)|0;
 $$neg19 = (($wc) + -66600)|0;
 $54 = (($$neg19) + ($53))|0;
 $55 = ($54>>>0)<(40);
 if (!($55)) {
  $$0 = $wc;
  STACKTOP = sp;return ($$0|0);
 }
 $56 = (($wc) + -40)|0;
 $57 = ($lower*80)|0;
 $58 = (($56) + ($57))|0;
 $$0 = $58;
 STACKTOP = sp;return ($$0|0);
}
function _towlower($wc) {
 $wc = $wc|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___towcase($wc,1)|0);
 STACKTOP = sp;return ($0|0);
}
function _wcswidth($wcs,$n) {
 $wcs = $wcs|0;
 $n = $n|0;
 var $$023 = 0, $$in = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k$05 = 0, $k$1 = 0, $l$0$lcssa = 0, $l$04 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 L1: do {
  if ($0) {
   $k$1 = 0;$l$0$lcssa = 0;
  } else {
   $$023 = $wcs;$$in = $n;$k$05 = 0;$l$04 = 0;
   while(1) {
    $1 = (($$in) + -1)|0;
    $2 = HEAP32[$$023>>2]|0;
    $3 = ($2|0)==(0);
    if ($3) {
     $k$1 = $k$05;$l$0$lcssa = $l$04;
     break L1;
    }
    $4 = (_wcwidth($2)|0);
    $5 = ($4|0)>(-1);
    if (!($5)) {
     $k$1 = $4;$l$0$lcssa = $l$04;
     break L1;
    }
    $6 = (($4) + ($l$04))|0;
    $7 = (($$023) + 4|0);
    $8 = ($1|0)==(0);
    if ($8) {
     $k$1 = $4;$l$0$lcssa = $6;
     break;
    } else {
     $$023 = $7;$$in = $1;$k$05 = $4;$l$04 = $6;
    }
   }
  }
 } while(0);
 $9 = ($k$1|0)<(0);
 $10 = $9 ? $k$1 : $l$0$lcssa;
 STACKTOP = sp;return ($10|0);
}
function _wctrans($class) {
 $class = $class|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strcmp($class,153024)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = (1);
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (_strcmp($class,153032)|0);
 $3 = ($2|0)==(0);
 $$ = $3 ? (2) : 0;
 $$0 = $$;
 STACKTOP = sp;return ($$0|0);
}
function _towctrans($wc,$trans) {
 $wc = $wc|0;
 $trans = $trans|0;
 var $$0 = 0, $0 = 0, $1 = 0, $magicptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $magicptr = $trans;
 if ((($magicptr|0) == 2)) {
  $1 = (_towlower($wc)|0);
  $$0 = $1;
 } else if ((($magicptr|0) == 1)) {
  $0 = (_towupper($wc)|0);
  $$0 = $0;
 } else {
  $$0 = $wc;
 }
 STACKTOP = sp;return ($$0|0);
}
function _wcwidth($wc) {
 $wc = $wc|0;
 var $$ = 0, $$0 = 0, $$4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($wc>>>0)<(255);
 if ($0) {
  $1 = (($wc) + 1)|0;
  $2 = $1 & 127;
  $3 = ($2>>>0)>(32);
  if ($3) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  $4 = ($wc|0)!=(0);
  $5 = $4 << 31 >> 31;
  $$0 = $5;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = $wc & -65538;
 $7 = ($6>>>0)<(65534);
 if ($7) {
  $8 = $wc >> 8;
  $9 = (153040 + ($8)|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&255;
  $12 = $11 << 5;
  $13 = $wc >>> 3;
  $14 = $13 & 31;
  $15 = $12 | $14;
  $16 = (153040 + ($15)|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = $wc & 7;
  $20 = 1 << $19;
  $21 = $18 & $20;
  $22 = ($21|0)==(0);
  if (!($22)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $23 = (154960 + ($8)|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24&255;
  $26 = $25 << 5;
  $27 = $26 | $14;
  $28 = (154960 + ($27)|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = $29&255;
  $31 = $30 & $20;
  $32 = ($31|0)==(0);
  $$ = $32 ? 1 : 2;
  $$0 = $$;
  STACKTOP = sp;return ($$0|0);
 }
 $33 = $wc & 65534;
 $34 = ($33|0)==(65534);
 if ($34) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $35 = (($wc) + -131072)|0;
 $36 = ($35>>>0)<(131072);
 if ($36) {
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 } else {
  $37 = ($wc|0)==(917505);
  $38 = (($wc) + -917536)|0;
  $39 = ($38>>>0)<(95);
  $or$cond = $37 | $39;
  $40 = (($wc) + -917760)|0;
  $41 = ($40|0)<(239);
  $or$cond3 = $or$cond | $41;
  $42 = $or$cond3&1;
  $$4 = $42 ^ 1;
  STACKTOP = sp;return ($$4|0);
 }
 return 0|0;
}
function _vwarn($fmt,$ap) {
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP32[_stderr>>2]|0;
 $1 = HEAP32[___progname>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 (_fprintf(($0|0),(156016|0),($vararg_buffer|0))|0);
 $2 = ($fmt|0)==(0|0);
 if ($2) {
  _perror((0|0));
  STACKTOP = sp;return;
 }
 (_vfprintf(($0|0),($fmt|0),($ap|0))|0);
 (_fwrite((156024|0),2,1,($0|0))|0);
 _perror((0|0));
 STACKTOP = sp;return;
}
function _vwarnx($fmt,$ap) {
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP32[_stderr>>2]|0;
 $1 = HEAP32[___progname>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 (_fprintf(($0|0),(156016|0),($vararg_buffer|0))|0);
 $2 = ($fmt|0)==(0|0);
 if ($2) {
  (_putc(10,($0|0))|0);
  STACKTOP = sp;return;
 }
 (_vfprintf(($0|0),($fmt|0),($ap|0))|0);
 (_putc(10,($0|0))|0);
 STACKTOP = sp;return;
}
function _verr($status,$fmt,$ap) {
 $status = $status|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP32[_stderr>>2]|0;
 $1 = HEAP32[___progname>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 (_fprintf(($0|0),(156016|0),($vararg_buffer|0))|0);
 $2 = ($fmt|0)==(0|0);
 if ($2) {
  _perror((0|0));
  _exit(($status|0));
  // unreachable;
 }
 (_vfprintf(($0|0),($fmt|0),($ap|0))|0);
 (_fwrite((156024|0),2,1,($0|0))|0);
 _perror((0|0));
 _exit(($status|0));
 // unreachable;
}
function _verrx($status,$fmt,$ap) {
 $status = $status|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP32[_stderr>>2]|0;
 $1 = HEAP32[___progname>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 (_fprintf(($0|0),(156016|0),($vararg_buffer|0))|0);
 $2 = ($fmt|0)==(0|0);
 if (!($2)) {
  (_vfprintf(($0|0),($fmt|0),($ap|0))|0);
 }
 (_putc(10,($0|0))|0);
 _exit(($status|0));
 // unreachable;
}
function _warn($fmt,$varargs) {
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $ap = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $ap = sp + 8|0;
 HEAP32[$ap>>2] = $varargs;
 $0 = HEAP32[_stderr>>2]|0;
 $1 = HEAP32[___progname>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 (_fprintf(($0|0),(156016|0),($vararg_buffer|0))|0);
 $2 = ($fmt|0)==(0|0);
 if ($2) {
  _perror((0|0));
  STACKTOP = sp;return;
 }
 (_vfprintf(($0|0),($fmt|0),($ap|0))|0);
 (_fwrite((156024|0),2,1,($0|0))|0);
 _perror((0|0));
 STACKTOP = sp;return;
}
function _warnx($fmt,$varargs) {
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $ap = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $ap = sp + 8|0;
 HEAP32[$ap>>2] = $varargs;
 $0 = HEAP32[_stderr>>2]|0;
 $1 = HEAP32[___progname>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 (_fprintf(($0|0),(156016|0),($vararg_buffer|0))|0);
 $2 = ($fmt|0)==(0|0);
 if ($2) {
  (_putc(10,($0|0))|0);
  STACKTOP = sp;return;
 }
 (_vfprintf(($0|0),($fmt|0),($ap|0))|0);
 (_putc(10,($0|0))|0);
 STACKTOP = sp;return;
}
function _err($status,$fmt,$varargs) {
 $status = $status|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 _verr($status,$fmt,$ap);
 // unreachable;
}
function _errx($status,$fmt,$varargs) {
 $status = $status|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 _verrx($status,$fmt,$ap);
 // unreachable;
}
function _iconv_open($to,$from) {
 $to = $to|0;
 $from = $from|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_find_charmap($to)|0);
 $1 = ($0|0)==(-1);
 if (!($1)) {
  $2 = (_find_charmap($from)|0);
  $3 = ($2|0)==(-1);
  if (!($3)) {
   $4 = (156032 + ($0)|0);
   $5 = HEAP8[$4>>0]|0;
   $6 = ($5&255)>(207);
   if (!($6)) {
    $8 = $2 << 16;
    $9 = $8 | $0;
    $10 = $9;
    $$0 = $10;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 $7 = (___errno_location()|0);
 HEAP32[$7>>2] = 22;
 $$0 = (-1);
 STACKTOP = sp;return ($$0|0);
}
function _find_charmap($name) {
 $name = $name|0;
 var $$0 = 0, $$0$lcssa$i$ph = 0, $$010$i = 0, $$019$i = 0, $$1$lcssa$i = 0, $$16$i = 0, $$ph4 = 0, $$pre = 0, $$sum = 0, $$sum$us = 0, $$sum1 = 0, $$sum1$us = 0, $$sum2 = 0, $$sum2$us = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $or$cond$i = 0, $phitmp = 0, $s$0$be = 0, $s$0$be$us = 0, $s$06 = 0, $s$06$us = 0, $s$1$lcssa = 0, $s$13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$name>>0]|0;
 $1 = ($0<<24>>24)==(0);
 L1: do {
  if ($1) {
   $s$06$us = 156032;
   while(1) {
    $2 = HEAP8[$s$06$us>>0]|0;
    $3 = ($2<<24>>24)==(0);
    if ($3) {
     $s$1$lcssa = $s$06$us;
     break L1;
    }
    $4 = (_strlen(($s$06$us|0))|0);
    $5 = (($4) + 1)|0;
    $6 = (($s$06$us) + ($5)|0);
    $7 = HEAP8[$6>>0]|0;
    $8 = ($7<<24>>24)==(0);
    do {
     if ($8) {
      $$sum$us = (($4) + 2)|0;
      $9 = (($s$06$us) + ($$sum$us)|0);
      $10 = HEAP8[$9>>0]|0;
      $11 = ($10&255)>(128);
      if ($11) {
       $$sum2$us = (($4) + 3)|0;
       $18 = (($s$06$us) + ($$sum2$us)|0);
       $s$0$be$us = $18;
       break;
      } else {
       $12 = $10&255;
       $13 = (128 - ($12))|0;
       $14 = $13 >>> 2;
       $15 = ($14*5)|0;
       $16 = (($4) + 3)|0;
       $$sum1$us = (($16) + ($15))|0;
       $17 = (($s$06$us) + ($$sum1$us)|0);
       $s$0$be$us = $17;
       break;
      }
     } else {
      $s$0$be$us = $6;
     }
    } while(0);
    $19 = HEAP8[$s$0$be$us>>0]|0;
    $20 = ($19<<24>>24)==(0);
    if ($20) {
     $$0 = -1;
     break;
    } else {
     $s$06$us = $s$0$be$us;
    }
   }
   STACKTOP = sp;return ($$0|0);
  } else {
   $s$06 = 156032;
   while(1) {
    $$010$i = $s$06;$$019$i = $name;$24 = $0;
    while(1) {
     $21 = HEAP8[$$010$i>>0]|0;
     $22 = ($21<<24>>24)==(0);
     if ($22) {
      $$0$lcssa$i$ph = $$010$i;$$ph4 = $24;
      label = 16;
      break;
     }
     $23 = ($24<<24>>24)==(0);
     L17: do {
      if ($23) {
       $$1$lcssa$i = $$019$i;$37 = 0;
      } else {
       $25 = $24&255;
       $$16$i = $$019$i;$31 = $25;$72 = $24;
       while(1) {
        $30 = $31 | 32;
        $32 = (($30) + -97)|0;
        $33 = ($32>>>0)>(26);
        $34 = (($31) + -48)|0;
        $35 = ($34>>>0)>(10);
        $or$cond$i = $33 & $35;
        $27 = (($$16$i) + 1|0);
        if (!($or$cond$i)) {
         $$1$lcssa$i = $$16$i;$37 = $72;
         break L17;
        }
        $26 = HEAP8[$27>>0]|0;
        $28 = $26&255;
        $29 = ($26<<24>>24)==(0);
        if ($29) {
         $$1$lcssa$i = $27;$37 = 0;
         break;
        } else {
         $$16$i = $27;$31 = $28;$72 = $26;
        }
       }
      }
     } while(0);
     $36 = $37&255;
     $38 = $36 | 32;
     $39 = $21&255;
     $40 = ($38|0)==($39|0);
     if (!($40)) {
      break;
     }
     $41 = (($$1$lcssa$i) + 1|0);
     $42 = (($$010$i) + 1|0);
     $43 = HEAP8[$41>>0]|0;
     $44 = ($43<<24>>24)==(0);
     if ($44) {
      $$0$lcssa$i$ph = $42;$$ph4 = 0;
      label = 16;
      break;
     } else {
      $$010$i = $42;$$019$i = $41;$24 = $43;
     }
    }
    if ((label|0) == 16) {
     label = 0;
     $45 = HEAP8[$$0$lcssa$i$ph>>0]|0;
     $46 = ($$ph4<<24>>24)==($45<<24>>24);
     if ($46) {
      break;
     }
    }
    $55 = (_strlen(($s$06|0))|0);
    $56 = (($55) + 1)|0;
    $57 = (($s$06) + ($56)|0);
    $58 = HEAP8[$57>>0]|0;
    $59 = ($58<<24>>24)==(0);
    do {
     if ($59) {
      $$sum = (($55) + 2)|0;
      $60 = (($s$06) + ($$sum)|0);
      $61 = HEAP8[$60>>0]|0;
      $62 = ($61&255)>(128);
      if ($62) {
       $$sum2 = (($55) + 3)|0;
       $63 = (($s$06) + ($$sum2)|0);
       $s$0$be = $63;
       break;
      } else {
       $66 = $61&255;
       $67 = (128 - ($66))|0;
       $68 = $67 >>> 2;
       $69 = ($68*5)|0;
       $70 = (($55) + 3)|0;
       $$sum1 = (($70) + ($69))|0;
       $71 = (($s$06) + ($$sum1)|0);
       $s$0$be = $71;
       break;
      }
     } else {
      $s$0$be = $57;
     }
    } while(0);
    $64 = HEAP8[$s$0$be>>0]|0;
    $65 = ($64<<24>>24)==(0);
    if ($65) {
     $$0 = -1;
     label = 25;
     break;
    } else {
     $s$06 = $s$0$be;
    }
   }
   if ((label|0) == 25) {
    STACKTOP = sp;return ($$0|0);
   }
   $$pre = HEAP8[$s$06>>0]|0;
   $phitmp = ($$pre<<24>>24)==(0);
   if ($phitmp) {
    $s$1$lcssa = $s$06;
   } else {
    $s$13 = $s$06;
    while(1) {
     $47 = (_strlen(($s$13|0))|0);
     $48 = (($47) + 1)|0;
     $49 = (($s$13) + ($48)|0);
     $50 = HEAP8[$49>>0]|0;
     $51 = ($50<<24>>24)==(0);
     if ($51) {
      $s$1$lcssa = $49;
      break;
     } else {
      $s$13 = $49;
     }
    }
   }
  }
 } while(0);
 $52 = (($s$1$lcssa) + 1|0);
 $53 = $52;
 $54 = (($53) - (156032))|0;
 $$0 = $54;
 STACKTOP = sp;return ($$0|0);
}
function _iconv_close($cd) {
 $cd = $cd|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function _iconv($cd0,$in,$inb,$out,$outb) {
 $cd0 = $cd0|0;
 $in = $in|0;
 $inb = $inb|0;
 $out = $out|0;
 $outb = $outb|0;
 var $$ = 0, $$0 = 0, $$13 = 0, $$14 = 0, $$18 = 0, $$21 = 0, $$c$8 = 0, $$lobit = 0, $$mask = 0, $$pn = 0, $$sum = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum2425 = 0, $$sum2627 = 0, $$sum2930 = 0, $$sum3132 = 0, $$sum6 = 0, $$sum9 = 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $brmerge73 = 0, $c$0 = 0, $c$1 = 0, $c$10 = 0, $c$1152 = 0, $c$2 = 0, $c$347 = 0, $c$4 = 0;
 var $c$5 = 0, $c$638 = 0, $c$8 = 0, $c$9 = 0, $d$1 = 0, $d$248 = 0, $d$5 = 0, $d$639 = 0, $err$0 = 0, $err$0$ph = 0, $exitcond = 0, $exitcond61 = 0, $exitcond62 = 0, $exitcond63 = 0, $i$045 = 0, $i1$037 = 0, $j$042 = 0, $j2$034 = 0, $k$044 = 0, $k$1$ = 0;
 var $k$141 = 0, $k$3 = 0, $k$436 = 0, $k$5$ = 0, $k$533 = 0, $k$7 = 0, $l$0 = 0, $l$2 = 0, $l$3 = 0, $not$ = 0, $not$28 = 0, $or$cond = 0, $or$cond15 = 0, $or$cond16 = 0, $or$cond17 = 0, $or$cond20 = 0, $or$cond22 = 0, $or$cond23 = 0, $or$cond3 = 0, $st = 0;
 var $tmp = 0, $wc = 0, $x$058 = 0, $x$1 = 0, $x$2 = 0, $x$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $st = sp;
 $wc = sp + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $tmp = sp + 20|0;
 $2 = $cd0;
 $3 = $2 & 65535;
 $4 = $2 >>> 16;
 $$sum = (($4) + 1)|0;
 $$sum6 = (($3) + 1)|0;
 $5 = $st;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = (($5) + 4)|0;
 $8 = $7;
 HEAP32[$8>>2] = 0;
 $9 = (156032 + ($4)|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = (156032 + ($3)|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = ($in|0)==(0|0);
 if ($13) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $14 = HEAP32[$in>>2]|0;
 $15 = ($14|0)==(0|0);
 if ($15) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $16 = HEAP32[$inb>>2]|0;
 $17 = ($16|0)==(0);
 if ($17) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $18 = $10&255;
 $19 = (($18) + 128)|0;
 $20 = (($4) + 2)|0;
 $21 = $18 & 3;
 $22 = $21 ^ 1;
 $23 = $21 ^ 2;
 $24 = $21 ^ 3;
 $25 = $18 & 1;
 $26 = $25 ^ 1;
 $27 = (($18) + -196)|0;
 $28 = ($27>>>0)<(2);
 $$sum2930 = $25 | 2;
 $$sum3132 = $26 | 2;
 $29 = ($10<<24>>24)==(-38);
 $30 = ($10<<24>>24)==(-40);
 $31 = $12&255;
 $32 = (($31) + -192)|0;
 $33 = ($32>>>0)>(8);
 $34 = $3;
 $35 = (234080 + ($32)|0);
 $36 = (($31) + 128)|0;
 $37 = (128 - ($31))|0;
 $38 = ($12<<24>>24)==(-128);
 $39 = (($3) + 2)|0;
 $40 = $31 & 1;
 $41 = $40 ^ 1;
 $$sum2425 = $40 | 2;
 $$sum2627 = $41 | 2;
 $42 = $31 & 3;
 $43 = $42 ^ 1;
 $44 = $42 ^ 2;
 $45 = $42 ^ 3;
 $46 = (($18) + -192)|0;
 $47 = ($46>>>0)<(7);
 $49 = $14;$52 = $16;$x$058 = 0;
 L10: while(1) {
  $48 = HEAP8[$49>>0]|0;
  $50 = $48&255;
  $51 = ($48<<24>>24)<(0);
  $brmerge = $51 | $47;
  L12: do {
   if ($brmerge) {
    do {
     switch ($18|0) {
     case 218:  {
      $147 = ($48&255)<(161);
      if ($147) {
       $err$0$ph = 84;
       label = 115;
       break L10;
      }
      break;
     }
     case 216: case 217:  {
      break;
     }
     case 198:  {
      $55 = ($52>>>0)<(4);
      if ($55) {
       $err$0 = 22;
       break L10;
      }
      $56 = HEAP32[$49>>2]|0;
      $c$0 = $56;
      label = 14;
      break;
     }
     case 232:  {
      $242 = ($52>>>0)<(2);
      if ($242) {
       $err$0 = 22;
       break L10;
      }
      $243 = (($49) + 1|0);
      $244 = HEAP8[$243>>0]|0;
      $245 = $244&255;
      $246 = (($50) + -161)|0;
      $247 = (($245) + -161)|0;
      $248 = ($246>>>0)>(92);
      $249 = ($247>>>0)>(93);
      $or$cond22 = $248 | $249;
      if (!($or$cond22)) {
       $279 = ((262072 + (($246*188)|0)|0) + ($247<<1)|0);
       $280 = HEAP16[$279>>1]|0;
       $281 = $280&65535;
       $282 = ($280<<16>>16)==(0);
       if ($282) {
        $err$0$ph = 84;
        label = 115;
        break L10;
       } else {
        $c$8 = $281;$l$2 = 2;
        label = 90;
        break L12;
       }
      }
      $250 = (($50) + -129)|0;
      $251 = ($250>>>0)>(92);
      if ($251) {
       $err$0$ph = 84;
       label = 115;
       break L10;
      }
      $252 = ($250>>>0)>(68);
      $253 = ($244&255)>(82);
      $or$cond23 = $252 & $253;
      if ($or$cond23) {
       $err$0$ph = 84;
       label = 115;
       break L10;
      }
      $254 = (($245) + -65)|0;
      $255 = ($254>>>0)<(26);
      do {
       if ($255) {
        $d$5 = $254;
       } else {
        $256 = (($245) + -97)|0;
        $257 = ($256>>>0)<(26);
        if ($257) {
         $258 = (($245) + -71)|0;
         $d$5 = $258;
         break;
        }
        $259 = (($245) + -129)|0;
        $260 = ($259>>>0)<(126);
        if (!($260)) {
         $err$0$ph = 84;
         label = 115;
         break L10;
        }
        $261 = (($245) + -77)|0;
        $d$5 = $261;
       }
      } while(0);
      $262 = ($250>>>0)<(32);
      if ($262) {
       $263 = ($250*178)|0;
       $$pn = $263;
      } else {
       $264 = ($246*84)|0;
       $265 = (($264) + 5696)|0;
       $$pn = $265;
      }
      $c$5 = (($d$5) + 44032)|0;
      $266 = (($c$5) + ($$pn))|0;
      $267 = ($266>>>0)<(44032);
      if ($267) {
       $c$8 = $266;$l$2 = 2;
       label = 90;
       break L12;
      } else {
       $c$638 = $266;$d$639 = 44032;
      }
      while(1) {
       $268 = (($c$638) - ($d$639))|0;
       $i1$037 = 0;$k$436 = 0;
       while(1) {
        $j2$034 = 0;$k$533 = $k$436;
        while(1) {
         $269 = ((262072 + (($i1$037*188)|0)|0) + ($j2$034<<1)|0);
         $270 = HEAP16[$269>>1]|0;
         $271 = $270&65535;
         $272 = (($271) - ($d$639))|0;
         $not$ = ($272>>>0)<=($268>>>0);
         $273 = $not$&1;
         $k$5$ = (($273) + ($k$533))|0;
         $274 = (($j2$034) + 1)|0;
         $exitcond = ($274|0)==(94);
         if ($exitcond) {
          break;
         } else {
          $j2$034 = $274;$k$533 = $k$5$;
         }
        }
        $275 = (($i1$037) + 1)|0;
        $exitcond61 = ($275|0)==(93);
        if ($exitcond61) {
         break;
        } else {
         $i1$037 = $275;$k$436 = $k$5$;
        }
       }
       $276 = (($c$638) + 1)|0;
       $277 = (($k$5$) + ($c$638))|0;
       $278 = ($276>>>0)>($277>>>0);
       if ($278) {
        $c$8 = $277;$l$2 = 2;
        label = 90;
        break L12;
       } else {
        $c$638 = $277;$d$639 = $276;
       }
      }
      break;
     }
     case 208:  {
      $131 = ($52>>>0)<(2);
      if ($131) {
       $err$0 = 22;
       break L10;
      }
      $132 = (($49) + 1|0);
      $133 = HEAP8[$132>>0]|0;
      $134 = $133&255;
      $135 = ($48<<24>>24)==(-114);
      if ($135) {
       $136 = (($134) + -161)|0;
       $137 = ($136>>>0)>(62);
       if ($137) {
        $err$0$ph = 84;
        label = 115;
        break L10;
       }
       $138 = (($134) + 65216)|0;
       $c$8 = $138;$l$2 = 2;
       label = 90;
       break L12;
      } else {
       $139 = (($50) + -161)|0;
       $140 = (($134) + -161)|0;
       $141 = ($139>>>0)>(83);
       $142 = ($140>>>0)>(93);
       $or$cond15 = $141 | $142;
       if ($or$cond15) {
        $err$0$ph = 84;
        label = 115;
        break L10;
       }
       $143 = ((160064 + (($139*188)|0)|0) + ($140<<1)|0);
       $144 = HEAP16[$143>>1]|0;
       $145 = $144&65535;
       $146 = ($144<<16>>16)==(0);
       if ($146) {
        $err$0$ph = 84;
        label = 115;
        break L10;
       } else {
        $c$8 = $145;$l$2 = 2;
        label = 90;
        break L12;
       }
      }
      break;
     }
     case 200:  {
      $53 = (_mbrtowc($wc,$49,$52,$st)|0);
      if ((($53|0) == 0)) {
       $l$0 = 1;
      } else if ((($53|0) == -1)) {
       $err$0$ph = 84;
       label = 115;
       break L10;
      } else if ((($53|0) == -2)) {
       $err$0 = 22;
       break L10;
      } else {
       $l$0 = $53;
      }
      $54 = HEAP32[$wc>>2]|0;
      $c$8 = $54;$l$2 = $l$0;
      label = 90;
      break L12;
      break;
     }
     case 209:  {
      $106 = (($50) + -161)|0;
      $107 = ($106>>>0)<(63);
      if ($107) {
       $108 = (($50) + 65216)|0;
       $c$8 = $108;$l$2 = 1;
       label = 90;
       break L12;
      }
      $109 = ($52>>>0)<(2);
      if ($109) {
       $err$0 = 22;
       break L10;
      }
      $110 = (($49) + 1|0);
      $111 = HEAP8[$110>>0]|0;
      $112 = $111&255;
      $113 = (($50) + -129)|0;
      $114 = ($113>>>0)<(31);
      if ($114) {
       $c$1 = $113;
      } else {
       $115 = (($50) + -224)|0;
       $116 = ($115>>>0)<(16);
       if (!($116)) {
        $err$0$ph = 84;
        label = 115;
        break L10;
       }
       $117 = (($50) + -193)|0;
       $c$1 = $117;
      }
      $118 = $c$1 << 1;
      $119 = (($112) + -64)|0;
      $120 = ($119>>>0)<(95);
      if ($120) {
       $121 = ($111<<24>>24)==(127);
       if ($121) {
        $err$0$ph = 84;
        label = 115;
        break L10;
       }
       $$lobit = ($111<<24>>24) >> 7;
       $122 = $$lobit << 24 >> 24;
       $123 = (($119) + ($122))|0;
       $c$2 = $118;$d$1 = $123;
      } else {
       $124 = (($112) + -159)|0;
       $125 = ($124>>>0)<(94);
       $126 = $125&1;
       $$13 = $118 | $126;
       $$14 = $125 ? $124 : $112;
       $c$2 = $$13;$d$1 = $$14;
      }
      $127 = ((160064 + (($c$2*188)|0)|0) + ($d$1<<1)|0);
      $128 = HEAP16[$127>>1]|0;
      $129 = $128&65535;
      $130 = ($128<<16>>16)==(0);
      if ($130) {
       $err$0$ph = 84;
       label = 115;
       break L10;
      } else {
       $c$8 = $129;$l$2 = 2;
       label = 90;
       break L12;
      }
      break;
     }
     case 195: case 192:  {
      $57 = ($52>>>0)<(4);
      if ($57) {
       $err$0 = 22;
       break L10;
      }
      $58 = (($49) + ($21)|0);
      $59 = HEAP8[$58>>0]|0;
      $60 = $59&255;
      $61 = $60 << 24;
      $62 = (($49) + ($22)|0);
      $63 = HEAP8[$62>>0]|0;
      $64 = $63&255;
      $65 = $64 << 16;
      $66 = $65 | $61;
      $67 = (($49) + ($23)|0);
      $68 = HEAP8[$67>>0]|0;
      $69 = $68&255;
      $70 = $69 << 8;
      $71 = $66 | $70;
      $72 = (($49) + ($24)|0);
      $73 = HEAP8[$72>>0]|0;
      $74 = $73&255;
      $75 = $71 | $74;
      $c$0 = $75;
      label = 14;
      break;
     }
     case 224:  {
      $194 = ($52>>>0)<(2);
      if ($194) {
       $err$0 = 22;
       break L10;
      }
      $195 = (($49) + 1|0);
      $196 = HEAP8[$195>>0]|0;
      $197 = $196&255;
      $198 = (($197) + -64)|0;
      $199 = ($198>>>0)>(190);
      $200 = (($197) + -127)|0;
      $201 = ($200>>>0)<(34);
      $or$cond20 = $199 | $201;
      if ($or$cond20) {
       $err$0$ph = 84;
       label = 115;
       break L10;
      }
      $202 = ($198>>>0)>(62);
      $203 = (($197) + -98)|0;
      $$21 = $202 ? $203 : $198;
      $204 = (($50) + -161)|0;
      $205 = ($204>>>0)>(88);
      if (!($205)) {
       $235 = ((234120 + (($204*314)|0)|0) + ($$21<<1)|0);
       $236 = HEAP16[$235>>1]|0;
       $237 = $236&65535;
       $238 = ($204|0)==(39);
       if ($238) {
        if ((($$21|0) == 66) | (($$21|0) == 58) | (($$21|0) == 60)) {
         $240 = 131072;
        } else {
         $240 = 0;
        }
       } else {
        $240 = 0;
       }
       $239 = $240 | $237;
       $241 = ($239|0)==(0);
       if ($241) {
        $err$0$ph = 84;
        label = 115;
        break L10;
       } else {
        $c$8 = $239;$l$2 = 2;
        label = 90;
        break L12;
       }
      }
      $206 = (($50) + -135)|0;
      $207 = ($206>>>0)>(119);
      if ($207) {
       $err$0$ph = 84;
       label = 115;
       break L10;
      }
      $208 = ($48&255)<(161);
      $209 = (($50) + -224)|0;
      $c$4 = $208 ? $206 : $209;
      $210 = ($c$4*157)|0;
      $211 = (($$21) + ($210))|0;
      $212 = $211 >>> 4;
      $213 = (($212) + 4867)|0;
      $214 = (223736 + ($213<<1)|0);
      $215 = HEAP16[$214>>1]|0;
      $216 = $215&65535;
      $217 = $211 & 15;
      $218 = $216 >>> $217;
      $219 = (($218|0) % 2)&-1;
      $220 = $219 << 17;
      $221 = (223736 + ($211<<1)|0);
      $222 = HEAP16[$221>>1]|0;
      $223 = $222&65535;
      $224 = $223 | $220;
      $$mask = $224 & -65792;
      $225 = ($$mask|0)==(56320);
      if (!($225)) {
       $234 = ($224|0)==(0);
       if ($234) {
        $err$0$ph = 84;
        label = 115;
        break L10;
       } else {
        $c$8 = $224;$l$2 = 2;
        label = 90;
        break L12;
       }
      }
      if ($33) {
       $k$3 = 2;
      } else {
       $226 = HEAP8[$35>>0]|0;
       $227 = $226 << 24 >> 24;
       $k$3 = $227;
      }
      $228 = HEAP32[$outb>>2]|0;
      $229 = ($k$3>>>0)>($228>>>0);
      if ($229) {
       $err$0$ph = 7;
       label = 115;
       break L10;
      }
      $230 = $223 & 255;
      $231 = (234096 + ($230)|0);
      HEAP32[$0>>2] = $231;
      HEAP32[$1>>2] = 4;
      $232 = (_iconv($34,$0,$1,$out,$outb)|0);
      $233 = (($232) + ($x$058))|0;
      $l$3 = 2;$x$3 = $233;
      break L12;
      break;
     }
     case 193: case 194: case 197: case 196:  {
      $79 = ($52>>>0)<(2);
      if ($79) {
       $err$0 = 22;
       break L10;
      }
      $80 = (($49) + ($25)|0);
      $81 = HEAP8[$80>>0]|0;
      $82 = $81&255;
      $83 = $82 << 8;
      $84 = (($49) + ($26)|0);
      $85 = HEAP8[$84>>0]|0;
      $86 = $85&255;
      $87 = $83 | $86;
      $88 = (($87) + -56320)|0;
      $89 = ($88>>>0)<(1024);
      if ($89) {
       $err$0$ph = 84;
       label = 115;
       break L10;
      }
      $90 = (($87) + -55296)|0;
      $91 = ($90>>>0)<(1024);
      if (!($91)) {
       $c$8 = $87;$l$2 = 2;
       label = 90;
       break L12;
      }
      if ($28) {
       $err$0$ph = 84;
       label = 115;
       break L10;
      }
      $92 = ($52>>>0)<(4);
      if ($92) {
       $err$0 = 22;
       break L10;
      }
      $93 = (($49) + ($$sum2930)|0);
      $94 = HEAP8[$93>>0]|0;
      $95 = $94&255;
      $96 = $95 << 8;
      $97 = (($49) + ($$sum3132)|0);
      $98 = HEAP8[$97>>0]|0;
      $99 = $98&255;
      $100 = $96 | $99;
      $101 = (($100) + -56320)|0;
      $102 = ($101>>>0)>(1023);
      if ($102) {
       $err$0$ph = 84;
       label = 115;
       break L10;
      }
      $103 = $87 << 10;
      $104 = (($103) + -56557568)|0;
      $105 = (($104) + ($101))|0;
      $c$8 = $105;$l$2 = 4;
      label = 90;
      break L12;
      break;
     }
     case 199:  {
      $err$0$ph = 84;
      label = 115;
      break L10;
      break;
     }
     default: {
      $283 = ($50>>>0)<($19>>>0);
      if ($283) {
       $c$8 = $50;$l$2 = 1;
       label = 90;
       break L12;
      }
      $284 = (($50) - ($19))|0;
      $285 = ($284*5)|0;
      $286 = $285 >>> 2;
      $$sum11 = (($286) + ($$sum))|0;
      $287 = (156032 + ($$sum11)|0);
      $288 = HEAP8[$287>>0]|0;
      $289 = $288&255;
      $290 = $284 << 1;
      $291 = $290 & 6;
      $292 = $289 >>> $291;
      $$sum12 = (($20) + ($286))|0;
      $293 = (156032 + ($$sum12)|0);
      $294 = HEAP8[$293>>0]|0;
      $295 = $294&255;
      $296 = (8 - ($291))|0;
      $297 = $295 << $296;
      $298 = $297 & 1023;
      $299 = $298 | $292;
      $300 = (279560 + ($299<<1)|0);
      $301 = HEAP16[$300>>1]|0;
      $302 = $301&65535;
      $303 = ($299|0)==(0);
      $$ = $303 ? $50 : $302;
      $304 = ($$|0)==(1);
      if ($304) {
       $err$0$ph = 84;
       label = 115;
       break L10;
      } else {
       $c$8 = $$;$l$2 = 1;
       label = 90;
       break L12;
      }
     }
     }
    } while(0);
    if ((label|0) == 14) {
     label = 0;
     $76 = (($c$0) + -55296)|0;
     $77 = ($76>>>0)<(2048);
     $78 = ($c$0>>>0)>(1114111);
     $or$cond = $77 | $78;
     if ($or$cond) {
      $err$0$ph = 84;
      label = 115;
      break L10;
     } else {
      $c$8 = $c$0;$l$2 = 4;
      label = 90;
      break;
     }
    }
    $148 = (($50) + -129)|0;
    $149 = ($148>>>0)>(125);
    if ($149) {
     $err$0$ph = 84;
     label = 115;
     break L10;
    }
    $150 = ($52>>>0)<(2);
    if ($150) {
     $err$0 = 22;
     break L10;
    }
    $151 = (($49) + 1|0);
    $152 = HEAP8[$151>>0]|0;
    $153 = $152&255;
    $154 = ($152&255)<(161);
    $or$cond16 = $154 & $29;
    if ($or$cond16) {
     $err$0$ph = 84;
     label = 115;
     break L10;
    }
    $155 = (($153) + -64)|0;
    $156 = ($155>>>0)>(190);
    $157 = ($152<<24>>24)==(127);
    $or$cond3 = $156 | $157;
    if (!($or$cond3)) {
     $189 = ($155>>>0)>(63);
     $190 = (($153) + -65)|0;
     $$18 = $189 ? $190 : $155;
     $191 = ((175856 + (($148*380)|0)|0) + ($$18<<1)|0);
     $192 = HEAP16[$191>>1]|0;
     $193 = $192&65535;
     $c$8 = $193;$l$2 = 2;
     label = 90;
     break;
    }
    $158 = (($153) + -48)|0;
    $159 = ($158>>>0)<(10);
    $or$cond17 = $159 & $30;
    if (!($or$cond17)) {
     $err$0$ph = 84;
     label = 115;
     break L10;
    }
    $160 = ($52>>>0)<(4);
    if ($160) {
     $err$0 = 22;
     break L10;
    }
    $161 = (($49) + 2|0);
    $162 = HEAP8[$161>>0]|0;
    $163 = $162&255;
    $164 = (($163) + -129)|0;
    $165 = ($164>>>0)>(126);
    if ($165) {
     $err$0$ph = 84;
     label = 115;
     break L10;
    }
    $166 = (($49) + 3|0);
    $167 = HEAP8[$166>>0]|0;
    $168 = $167&255;
    $169 = (($168) + -48)|0;
    $170 = ($169>>>0)>(9);
    if ($170) {
     $err$0$ph = 84;
     label = 115;
     break L10;
    }
    $171 = ($148*10)|0;
    $172 = (($153) + ($171))|0;
    $173 = ($172*1260)|0;
    $174 = ($164*10)|0;
    $175 = (($173) + -60352)|0;
    $176 = (($175) + ($174))|0;
    $177 = (($176) + ($169))|0;
    $c$347 = $177;$d$248 = 0;
    while(1) {
     $178 = (($c$347) - ($d$248))|0;
     $i$045 = 0;$k$044 = 0;
     while(1) {
      $j$042 = 0;$k$141 = $k$044;
      while(1) {
       $179 = ((175856 + (($i$045*380)|0)|0) + ($j$042<<1)|0);
       $180 = HEAP16[$179>>1]|0;
       $181 = $180&65535;
       $182 = (($181) - ($d$248))|0;
       $not$28 = ($182>>>0)<=($178>>>0);
       $183 = $not$28&1;
       $k$1$ = (($183) + ($k$141))|0;
       $184 = (($j$042) + 1)|0;
       $exitcond62 = ($184|0)==(190);
       if ($exitcond62) {
        break;
       } else {
        $j$042 = $184;$k$141 = $k$1$;
       }
      }
      $185 = (($i$045) + 1)|0;
      $exitcond63 = ($185|0)==(126);
      if ($exitcond63) {
       break;
      } else {
       $i$045 = $185;$k$044 = $k$1$;
      }
     }
     $186 = (($c$347) + 1)|0;
     $187 = (($k$1$) + ($c$347))|0;
     $188 = ($186>>>0)>($187>>>0);
     if ($188) {
      $c$8 = $187;$l$2 = 4;
      label = 90;
      break;
     } else {
      $c$347 = $187;$d$248 = $186;
     }
    }
   } else {
    $c$8 = $50;$l$2 = 1;
    label = 90;
   }
  } while(0);
  L119: do {
   if ((label|0) == 90) {
    label = 0;
    switch ($31|0) {
    case 199:  {
     $323 = ($c$8>>>0)>(127);
     if ($323) {
      $x$1 = $x$058;
      label = 99;
     } else {
      $c$9 = $c$8;$x$2 = $x$058;
     }
     break;
    }
    case 198:  {
     $305 = HEAP32[$outb>>2]|0;
     $306 = ($305>>>0)<(4);
     if ($306) {
      $err$0$ph = 7;
      label = 115;
      break L10;
     }
     $307 = HEAP32[$out>>2]|0;
     HEAP32[$307>>2] = $c$8;
     $308 = (($307) + 4|0);
     HEAP32[$out>>2] = $308;
     $309 = HEAP32[$outb>>2]|0;
     $310 = (($309) + -4)|0;
     HEAP32[$outb>>2] = $310;
     $l$3 = $l$2;$x$3 = $x$058;
     break L119;
     break;
    }
    case 200:  {
     $311 = HEAP32[$outb>>2]|0;
     $312 = ($311>>>0)<(4);
     if ($312) {
      $313 = (_wctomb($tmp,$c$8)|0);
      $314 = HEAP32[$outb>>2]|0;
      $315 = ($314>>>0)<($313>>>0);
      if ($315) {
       $err$0$ph = 7;
       label = 115;
       break L10;
      }
      $316 = HEAP32[$out>>2]|0;
      _memcpy(($316|0),($tmp|0),($313|0))|0;
      $320 = $316;$k$7 = $313;
     } else {
      $317 = HEAP32[$out>>2]|0;
      $318 = (_wctomb($317,$c$8)|0);
      $320 = $317;$k$7 = $318;
     }
     $319 = (($320) + ($k$7)|0);
     HEAP32[$out>>2] = $319;
     $321 = HEAP32[$outb>>2]|0;
     $322 = (($321) - ($k$7))|0;
     HEAP32[$outb>>2] = $322;
     $l$3 = $l$2;$x$3 = $x$058;
     break L119;
     break;
    }
    case 195: case 192:  {
     $389 = HEAP32[$outb>>2]|0;
     $390 = ($389>>>0)<(4);
     if ($390) {
      $err$0$ph = 7;
      label = 115;
      break L10;
     }
     $391 = HEAP32[$out>>2]|0;
     $392 = $c$8 >>> 24;
     $393 = $392&255;
     $394 = (($391) + ($42)|0);
     HEAP8[$394>>0] = $393;
     $395 = $c$8 >>> 16;
     $396 = $395&255;
     $397 = (($391) + ($43)|0);
     HEAP8[$397>>0] = $396;
     $398 = $c$8 >>> 8;
     $399 = $398&255;
     $400 = (($391) + ($44)|0);
     HEAP8[$400>>0] = $399;
     $401 = $c$8&255;
     $402 = (($391) + ($45)|0);
     HEAP8[$402>>0] = $401;
     $403 = (($391) + 4|0);
     HEAP32[$out>>2] = $403;
     $404 = HEAP32[$outb>>2]|0;
     $405 = (($404) + -4)|0;
     HEAP32[$outb>>2] = $405;
     $l$3 = $l$2;$x$3 = $x$058;
     break L119;
     break;
    }
    case 193: case 194: case 197: case 196:  {
     $355 = ($c$8>>>0)<(65536);
     $brmerge73 = $355 | $28;
     if ($brmerge73) {
      $356 = ($c$8>>>0)>(65535);
      $$c$8 = $356 ? 65533 : $c$8;
      $357 = HEAP32[$outb>>2]|0;
      $358 = ($357>>>0)<(2);
      if ($358) {
       $err$0$ph = 7;
       label = 115;
       break L10;
      }
      $359 = HEAP32[$out>>2]|0;
      $360 = $$c$8 >>> 8;
      $361 = $360&255;
      $362 = (($359) + ($40)|0);
      HEAP8[$362>>0] = $361;
      $363 = $$c$8&255;
      $364 = (($359) + ($41)|0);
      HEAP8[$364>>0] = $363;
      $365 = (($359) + 2|0);
      HEAP32[$out>>2] = $365;
      $366 = HEAP32[$outb>>2]|0;
      $367 = (($366) + -2)|0;
      HEAP32[$outb>>2] = $367;
      $l$3 = $l$2;$x$3 = $x$058;
      break L119;
     } else {
      $368 = HEAP32[$outb>>2]|0;
      $369 = ($368>>>0)<(4);
      if ($369) {
       $err$0$ph = 7;
       label = 115;
       break L10;
      }
      $370 = (($c$8) + -65536)|0;
      $371 = HEAP32[$out>>2]|0;
      $372 = $370 >>> 10;
      $373 = $370 >>> 18;
      $374 = $373 | 216;
      $375 = $374&255;
      $376 = (($371) + ($40)|0);
      HEAP8[$376>>0] = $375;
      $377 = $372&255;
      $378 = (($371) + ($41)|0);
      HEAP8[$378>>0] = $377;
      $379 = $370 >>> 8;
      $380 = $379 & 3;
      $381 = $380 | 220;
      $382 = $381&255;
      $383 = (($371) + ($$sum2425)|0);
      HEAP8[$383>>0] = $382;
      $384 = $370&255;
      $385 = (($371) + ($$sum2627)|0);
      HEAP8[$385>>0] = $384;
      $386 = (($371) + 4|0);
      HEAP32[$out>>2] = $386;
      $387 = HEAP32[$outb>>2]|0;
      $388 = (($387) + -4)|0;
      HEAP32[$outb>>2] = $388;
      $l$3 = $l$2;$x$3 = $x$058;
      break L119;
     }
     break;
    }
    default: {
     $c$9 = $c$8;$x$2 = $x$058;
    }
    }
    L139: while(1) {
     if ((label|0) == 99) {
      label = 0;
      $324 = (($x$1) + 1)|0;
      $c$9 = 42;$x$2 = $324;
     }
     $325 = HEAP32[$outb>>2]|0;
     $326 = ($325|0)==(0);
     if ($326) {
      $err$0$ph = 7;
      label = 115;
      break L10;
     }
     $327 = ($c$9>>>0)<($36>>>0);
     if ($327) {
      $c$10 = $c$9;
      break;
     }
     if ($38) {
      $x$1 = $x$2;
      label = 99;
      continue;
     } else {
      $c$1152 = 0;
     }
     while(1) {
      $335 = ($c$1152*5)|0;
      $336 = $335 >>> 2;
      $$sum9 = (($336) + ($$sum6))|0;
      $337 = (156032 + ($$sum9)|0);
      $338 = HEAP8[$337>>0]|0;
      $339 = $338&255;
      $340 = $c$1152 << 1;
      $341 = $340 & 6;
      $342 = $339 >>> $341;
      $$sum10 = (($39) + ($336))|0;
      $343 = (156032 + ($$sum10)|0);
      $344 = HEAP8[$343>>0]|0;
      $345 = $344&255;
      $346 = (8 - ($341))|0;
      $347 = $345 << $346;
      $348 = $347 & 1023;
      $349 = $348 | $342;
      $350 = (279560 + ($349<<1)|0);
      $351 = HEAP16[$350>>1]|0;
      $352 = $351&65535;
      $353 = ($c$9|0)==($352|0);
      $334 = (($c$1152) + 1)|0;
      if ($353) {
       label = 106;
       break L139;
      }
      $333 = ($334>>>0)<($37>>>0);
      if ($333) {
       $c$1152 = $334;
      } else {
       $x$1 = $x$2;
       label = 99;
       continue L139;
      }
     }
    }
    if ((label|0) == 106) {
     label = 0;
     $354 = (($c$1152) + 128)|0;
     $c$10 = $354;
    }
    $328 = $c$10&255;
    $329 = HEAP32[$out>>2]|0;
    $330 = (($329) + 1|0);
    HEAP32[$out>>2] = $330;
    HEAP8[$329>>0] = $328;
    $331 = HEAP32[$outb>>2]|0;
    $332 = (($331) + -1)|0;
    HEAP32[$outb>>2] = $332;
    $l$3 = $l$2;$x$3 = $x$2;
   }
  } while(0);
  $406 = HEAP32[$in>>2]|0;
  $407 = (($406) + ($l$3)|0);
  HEAP32[$in>>2] = $407;
  $408 = (($52) - ($l$3))|0;
  HEAP32[$inb>>2] = $408;
  $409 = ($52|0)==($l$3|0);
  if ($409) {
   $$0 = $x$3;
   label = 117;
   break;
  } else {
   $49 = $407;$52 = $408;$x$058 = $x$3;
  }
 }
 if ((label|0) == 115) {
  $err$0 = $err$0$ph;
 }
 else if ((label|0) == 117) {
  STACKTOP = sp;return ($$0|0);
 }
 $410 = (___errno_location()|0);
 HEAP32[$410>>2] = $err$0;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _isalnum_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isalnum($c)|0);
 STACKTOP = sp;return ($0|0);
}
function _isalpha_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isalpha($c)|0);
 STACKTOP = sp;return ($0|0);
}
function _isblank_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isblank($c)|0);
 STACKTOP = sp;return ($0|0);
}
function _iscntrl_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_iscntrl($c)|0);
 STACKTOP = sp;return ($0|0);
}
function _isdigit_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, $isdigit = 0, $isdigittmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isdigittmp = (($c) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 $0 = $isdigit&1;
 STACKTOP = sp;return ($0|0);
}
function _isgraph_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isgraph($c)|0);
 STACKTOP = sp;return ($0|0);
}
function _islower_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_islower($c)|0);
 STACKTOP = sp;return ($0|0);
}
function _isprint_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isprint($c)|0);
 STACKTOP = sp;return ($0|0);
}
function _ispunct_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ispunct($c)|0);
 STACKTOP = sp;return ($0|0);
}
function _isspace_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isspace($c)|0);
 STACKTOP = sp;return ($0|0);
}
function _isupper_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isupper($c)|0);
 STACKTOP = sp;return ($0|0);
}
function _isxdigit_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isxdigit($c)|0);
 STACKTOP = sp;return ($0|0);
}
function _iswalnum_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_iswalnum($c)|0);
 STACKTOP = sp;return ($0|0);
}
function _iswalpha_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_iswalpha($c)|0);
 STACKTOP = sp;return ($0|0);
}
function _iswblank_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_iswblank($c)|0);
 STACKTOP = sp;return ($0|0);
}
function _iswcntrl_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_iswcntrl($c)|0);
 STACKTOP = sp;return ($0|0);
}
function _iswctype_l($c,$t,$l) {
 $c = $c|0;
 $t = $t|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_iswctype($c,$t)|0);
 STACKTOP = sp;return ($0|0);
}
function _iswdigit_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_iswdigit($c)|0);
 STACKTOP = sp;return ($0|0);
}
function _iswgraph_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_iswgraph($c)|0);
 STACKTOP = sp;return ($0|0);
}
function _iswlower_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_iswlower($c)|0);
 STACKTOP = sp;return ($0|0);
}
function _iswprint_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_iswprint($c)|0);
 STACKTOP = sp;return ($0|0);
}
function _iswpunct_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_iswpunct($c)|0);
 STACKTOP = sp;return ($0|0);
}
function _iswspace_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_iswspace($c)|0);
 STACKTOP = sp;return ($0|0);
}
function _iswupper_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_iswupper($c)|0);
 STACKTOP = sp;return ($0|0);
}
function _iswxdigit_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_iswxdigit($c)|0);
 STACKTOP = sp;return ($0|0);
}
function ___strcoll_l($l,$r,$loc) {
 $l = $l|0;
 $r = $r|0;
 $loc = $loc|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strcmp($l,$r)|0);
 STACKTOP = sp;return ($0|0);
}
function _strcoll($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strcmp($l,$r)|0);
 STACKTOP = sp;return ($0|0);
}
function _strcasecmp_l($l,$r,$loc) {
 $l = $l|0;
 $r = $r|0;
 $loc = $loc|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strcasecmp($l,$r)|0);
 STACKTOP = sp;return ($0|0);
}
function _strfmon_l($s,$n,$loc,$fmt,$varargs) {
 $s = $s|0;
 $n = $n|0;
 $loc = $loc|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vstrfmon_l($s,$n,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _vstrfmon_l($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$0 = 0, $$01$be = 0, $$01$lcssa = 0, $$0134 = 0, $$02$be = 0, $$0233 = 0, $$03$be = 0, $$0332 = 0, $$1 = 0, $$1$pn = 0, $$2 = 0, $$3 = 0, $$4$lcssa = 0, $$47 = 0, $$5 = 0, $$513 = 0, $$517 = 0, $$6 = 0, $$7 = 0, $$723 = 0;
 var $$727 = 0, $$8 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arglist_current = 0, $arglist_next = 0, $fw$0$lcssa = 0, $fw$08 = 0;
 var $isdigit = 0, $isdigit2 = 0, $isdigit225 = 0, $isdigit4 = 0, $isdigit415 = 0, $isdigit6 = 0, $isdigittmp = 0, $isdigittmp1 = 0, $isdigittmp124 = 0, $isdigittmp3 = 0, $isdigittmp314 = 0, $isdigittmp5 = 0, $left$0 = 0, $left$1 = 0, $lp$016 = 0, $lp$1 = 0, $or$cond = 0, $rp$026 = 0, $rp$1 = 0, $vararg_buffer = 0;
 var $vararg_ptr1 = 0, $vararg_ptr2 = 0, $w$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ($n|0)==(0);
 L1: do {
  if ($0) {
   $$01$lcssa = $s;
  } else {
   $$0134 = $s;$$0233 = $n;$$0332 = $fmt;
   while(1) {
    $1 = HEAP8[$$0332>>0]|0;
    if ((($1<<24>>24) == 37)) {
     $6 = (($$0332) + 1|0);
     $7 = HEAP8[$6>>0]|0;
     $8 = ($7<<24>>24)==(37);
     if ($8) {
      $$1 = $6;$3 = 37;
      label = 3;
     } else {
      $$2 = $6;$10 = $7;$left$0 = 0;
      L6: while(1) {
       $9 = $10 << 24 >> 24;
       switch ($9|0) {
       case 61:  {
        $11 = (($$2) + 1|0);
        $$3 = $11;$left$1 = $left$0;
        break;
       }
       case 45:  {
        $$3 = $$2;$left$1 = 1;
        break;
       }
       case 33: case 43: case 40: case 94:  {
        $$3 = $$2;$left$1 = $left$0;
        break;
       }
       default: {
        break L6;
       }
       }
       $12 = (($$3) + 1|0);
       $$pre = HEAP8[$12>>0]|0;
       $$2 = $12;$10 = $$pre;$left$0 = $left$1;
      }
      $isdigittmp5 = (($9) + -48)|0;
      $isdigit6 = ($isdigittmp5>>>0)<(10);
      if ($isdigit6) {
       $$47 = $$2;$16 = $9;$fw$08 = 0;
       while(1) {
        $13 = ($fw$08*10)|0;
        $14 = (($13) + -48)|0;
        $15 = (($14) + ($16))|0;
        $17 = (($$47) + 1|0);
        $18 = HEAP8[$17>>0]|0;
        $19 = $18 << 24 >> 24;
        $isdigittmp = (($19) + -48)|0;
        $isdigit = ($isdigittmp>>>0)<(10);
        if ($isdigit) {
         $$47 = $17;$16 = $19;$fw$08 = $15;
        } else {
         $$4$lcssa = $17;$21 = $18;$fw$0$lcssa = $15;
         break;
        }
       }
      } else {
       $$4$lcssa = $$2;$21 = $10;$fw$0$lcssa = 0;
      }
      $20 = ($21<<24>>24)==(35);
      if ($20) {
       $$513 = (($$4$lcssa) + 1|0);
       $22 = HEAP8[$$513>>0]|0;
       $23 = $22 << 24 >> 24;
       $isdigittmp314 = (($23) + -48)|0;
       $isdigit415 = ($isdigittmp314>>>0)<(10);
       if ($isdigit415) {
        $$517 = $$513;$27 = $23;$lp$016 = 0;
        while(1) {
         $24 = ($lp$016*10)|0;
         $25 = (($24) + -48)|0;
         $26 = (($25) + ($27))|0;
         $$5 = (($$517) + 1|0);
         $28 = HEAP8[$$5>>0]|0;
         $29 = $28 << 24 >> 24;
         $isdigittmp3 = (($29) + -48)|0;
         $isdigit4 = ($isdigittmp3>>>0)<(10);
         if ($isdigit4) {
          $$517 = $$5;$27 = $29;$lp$016 = $26;
         } else {
          $$6 = $$5;$31 = $28;$lp$1 = $26;
          break;
         }
        }
       } else {
        $$6 = $$513;$31 = $22;$lp$1 = 0;
       }
      } else {
       $$6 = $$4$lcssa;$31 = $21;$lp$1 = 0;
      }
      $30 = ($31<<24>>24)==(46);
      if ($30) {
       $$723 = (($$6) + 1|0);
       $32 = HEAP8[$$723>>0]|0;
       $33 = $32 << 24 >> 24;
       $isdigittmp124 = (($33) + -48)|0;
       $isdigit225 = ($isdigittmp124>>>0)<(10);
       if ($isdigit225) {
        $$727 = $$723;$37 = $33;$rp$026 = 0;
        while(1) {
         $34 = ($rp$026*10)|0;
         $35 = (($34) + -48)|0;
         $36 = (($35) + ($37))|0;
         $$7 = (($$727) + 1|0);
         $38 = HEAP8[$$7>>0]|0;
         $39 = $38 << 24 >> 24;
         $isdigittmp1 = (($39) + -48)|0;
         $isdigit2 = ($isdigittmp1>>>0)<(10);
         if ($isdigit2) {
          $$727 = $$7;$37 = $39;$rp$026 = $36;
         } else {
          $$8 = $$7;$rp$1 = $36;
          break;
         }
        }
       } else {
        $$8 = $$723;$rp$1 = 0;
       }
      } else {
       $$8 = $$6;$rp$1 = 2;
      }
      $40 = (($lp$1) + 1)|0;
      $41 = (($40) + ($rp$1))|0;
      $42 = ($left$0|0)==(0);
      $43 = ($fw$0$lcssa|0)>($41|0);
      $or$cond = $42 & $43;
      $w$0 = $or$cond ? $fw$0$lcssa : $41;
      $arglist_current = HEAP32[$ap>>2]|0;
      HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current+4>>2];$44 = +HEAPF64[tempDoublePtr>>3];
      $arglist_next = (($arglist_current) + 8|0);
      HEAP32[$ap>>2] = $arglist_next;
      HEAP32[$vararg_buffer>>2] = $w$0;
      $vararg_ptr1 = (($vararg_buffer) + 4|0);
      HEAP32[$vararg_ptr1>>2] = $rp$1;
      $vararg_ptr2 = (($vararg_buffer) + 8|0);
      HEAPF64[tempDoublePtr>>3]=$44;HEAP32[$vararg_ptr2>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr2+4>>2]=HEAP32[tempDoublePtr+4>>2];
      $45 = (_snprintf($$0134,$$0233,280808,$vararg_buffer)|0);
      $46 = ($45>>>0)<($$0233>>>0);
      if (!($46)) {
       break;
      }
      $48 = (($$0134) + ($45)|0);
      $49 = (($$0233) - ($45))|0;
      $$01$be = $48;$$02$be = $49;$$1$pn = $$8;
     }
    } else if ((($1<<24>>24) == 0)) {
     $$01$lcssa = $$0134;
     break L1;
    } else {
     $$1 = $$0332;$3 = $1;
     label = 3;
    }
    if ((label|0) == 3) {
     label = 0;
     $2 = (($$0134) + 1|0);
     HEAP8[$$0134>>0] = $3;
     $4 = (($$0233) + -1)|0;
     $$01$be = $2;$$02$be = $4;$$1$pn = $$1;
    }
    $$03$be = (($$1$pn) + 1|0);
    $5 = ($$02$be|0)==(0);
    if ($5) {
     $$01$lcssa = $$01$be;
     break L1;
    } else {
     $$0134 = $$01$be;$$0233 = $$02$be;$$0332 = $$03$be;
    }
   }
   $47 = (___errno_location()|0);
   HEAP32[$47>>2] = 7;
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $50 = $$01$lcssa;
 $51 = $s;
 $52 = (($50) - ($51))|0;
 $$0 = $52;
 STACKTOP = sp;return ($$0|0);
}
function _strfmon($s,$n,$fmt,$varargs) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vstrfmon_l($s,$n,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _strncasecmp_l($l,$r,$n,$loc) {
 $l = $l|0;
 $r = $r|0;
 $n = $n|0;
 $loc = $loc|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strncasecmp($l,$r,$n)|0);
 STACKTOP = sp;return ($0|0);
}
function ___strxfrm_l($dest,$src,$n,$loc) {
 $dest = $dest|0;
 $src = $src|0;
 $n = $n|0;
 $loc = $loc|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($src|0))|0);
 $1 = ($0>>>0)<($n>>>0);
 if ($1) {
  (_strcpy(($dest|0),($src|0))|0);
 }
 STACKTOP = sp;return ($0|0);
}
function _strxfrm($dest,$src,$n) {
 $dest = $dest|0;
 $src = $src|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($src|0))|0);
 $1 = ($0>>>0)<($n>>>0);
 if ($1) {
  (_strcpy(($dest|0),($src|0))|0);
 }
 STACKTOP = sp;return ($0|0);
}
function _tolower_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_tolower($c)|0);
 STACKTOP = sp;return ($0|0);
}
function _toupper_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_toupper($c)|0);
 STACKTOP = sp;return ($0|0);
}
function _towctrans_l($c,$t,$l) {
 $c = $c|0;
 $t = $t|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_towctrans($c,$t)|0);
 STACKTOP = sp;return ($0|0);
}
function _towlower_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_towlower($c)|0);
 STACKTOP = sp;return ($0|0);
}
function _towupper_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_towupper($c)|0);
 STACKTOP = sp;return ($0|0);
}
function ___wcscoll_l($l,$r,$locale) {
 $l = $l|0;
 $r = $r|0;
 $locale = $locale|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcscmp($l,$r)|0);
 STACKTOP = sp;return ($0|0);
}
function _wcscoll($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcscmp($l,$r)|0);
 STACKTOP = sp;return ($0|0);
}
function _wcscoll_l($l,$r,$locale) {
 $l = $l|0;
 $r = $r|0;
 $locale = $locale|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcscoll($l,$r)|0);
 STACKTOP = sp;return ($0|0);
}
function ___wcsxfrm_l($dest,$src,$n,$loc) {
 $dest = $dest|0;
 $src = $src|0;
 $n = $n|0;
 $loc = $loc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcslen($src)|0);
 $1 = ($0>>>0)<($n>>>0);
 if ($1) {
  $2 = (($0) + 1)|0;
  (_wmemcpy($dest,$src,$2)|0);
 } else {
  $3 = ($n|0)==(0);
  if (!($3)) {
   $4 = (($n) + -1)|0;
   (_wmemcpy($dest,$src,$4)|0);
   $5 = (($dest) + ($4<<2)|0);
   HEAP32[$5>>2] = 0;
  }
 }
 STACKTOP = sp;return ($0|0);
}
function _wcsxfrm($dest,$src,$n) {
 $dest = $dest|0;
 $src = $src|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcslen($src)|0);
 $1 = ($0>>>0)<($n>>>0);
 if ($1) {
  $2 = (($0) + 1)|0;
  (_wmemcpy($dest,$src,$2)|0);
 } else {
  $3 = ($n|0)==(0);
  if (!($3)) {
   $4 = (($n) + -1)|0;
   (_wmemcpy($dest,$src,$4)|0);
   $5 = (($dest) + ($4<<2)|0);
   HEAP32[$5>>2] = 0;
  }
 }
 STACKTOP = sp;return ($0|0);
}
function _wcsxfrm_l($dest,$src,$n,$locale) {
 $dest = $dest|0;
 $src = $src|0;
 $n = $n|0;
 $locale = $locale|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcsxfrm($dest,$src,$n)|0);
 STACKTOP = sp;return ($0|0);
}
function _wctrans_l($s,$l) {
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wctrans($s)|0);
 STACKTOP = sp;return ($0|0);
}
function _wctype_l($s,$l) {
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wctype($s)|0);
 STACKTOP = sp;return ($0|0);
}
function ___cos($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0;
 var $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $x * $x;
 $1 = $0 * $0;
 $2 = $0 * 2.48015872894767294178E-5;
 $3 = $2 + -0.00138888888888741095749;
 $4 = $0 * $3;
 $5 = $4 + 0.0416666666666666019037;
 $6 = $0 * $5;
 $7 = $1 * $1;
 $8 = $0 * -1.13596475577881948265E-11;
 $9 = $8 + 2.0875723212981748279E-9;
 $10 = $0 * $9;
 $11 = $10 + -2.75573143513906633035E-7;
 $12 = $7 * $11;
 $13 = $6 + $12;
 $14 = $0 * 0.5;
 $15 = 1.0 - $14;
 $16 = 1.0 - $15;
 $17 = $16 - $14;
 $18 = $0 * $13;
 $19 = $x * $y;
 $20 = $18 - $19;
 $21 = $17 + $20;
 $22 = $15 + $21;
 STACKTOP = sp;return (+$22);
}
function ___cosdf($x) {
 $x = +$x;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $x * $x;
 $1 = $0 * $0;
 $2 = $0 * 2.43904487962774090654E-5;
 $3 = $2 + -0.00138867637746099294692;
 $4 = $0 * -0.49999999725103100312;
 $5 = $4 + 1.0;
 $6 = $1 * 0.0416666233237390631894;
 $7 = $5 + $6;
 $8 = $0 * $1;
 $9 = $8 * $3;
 $10 = $7 + $9;
 $11 = $10;
 STACKTOP = sp;return (+$11);
}
function ___sin($x,$y,$iy) {
 $x = +$x;
 $y = +$y;
 $iy = $iy|0;
 var $$0 = 0.0, $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $3 = 0.0;
 var $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $x * $x;
 $1 = $0 * $0;
 $2 = $0 * 2.75573137070700676789E-6;
 $3 = $2 + -1.98412698298579493134E-4;
 $4 = $0 * $3;
 $5 = $4 + 0.00833333333332248946124;
 $6 = $0 * $1;
 $7 = $0 * 1.58969099521155010221E-10;
 $8 = $7 + -2.50507602534068634195E-8;
 $9 = $6 * $8;
 $10 = $9 + $5;
 $11 = $0 * $x;
 $12 = ($iy|0)==(0);
 if ($12) {
  $13 = $0 * $10;
  $14 = $13 + -0.166666666666666324348;
  $15 = $11 * $14;
  $16 = $15 + $x;
  $$0 = $16;
  STACKTOP = sp;return (+$$0);
 } else {
  $17 = $y * 0.5;
  $18 = $11 * $10;
  $19 = $17 - $18;
  $20 = $0 * $19;
  $21 = $20 - $y;
  $22 = $11 * -0.166666666666666324348;
  $23 = $21 - $22;
  $24 = $x - $23;
  $$0 = $24;
  STACKTOP = sp;return (+$$0);
 }
 return +0;
}
function ___sindf($x) {
 $x = +$x;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $x * $x;
 $1 = $0 * $0;
 $2 = $0 * 2.7183114939898219064E-6;
 $3 = $2 + -1.98393348360966317347E-4;
 $4 = $0 * $x;
 $5 = $0 * 0.0083333293858894631756;
 $6 = $5 + -0.166666666416265235595;
 $7 = $4 * $6;
 $8 = $7 + $x;
 $9 = $4 * $1;
 $10 = $9 * $3;
 $11 = $10 + $8;
 $12 = $11;
 STACKTOP = sp;return (+$12);
}
function _ilogb($x) {
 $x = +$x;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__x = 0, $__x1 = 0, $e$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__x = sp + 4|0;
 $__x1 = sp;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 if ((($4|0) == 0)) {
  $5 = (_bitshift64Shl(($0|0),($1|0),12)|0);
  $6 = tempRet0;
  $7 = ($5|0)==(0);
  $8 = ($6|0)==(0);
  $9 = $7 & $8;
  if ($9) {
   HEAPF32[$__x>>2] = nan;
   $$0 = -2147483648;
   STACKTOP = sp;return ($$0|0);
  }
  $10 = ($6|0)>(-1);
  $11 = ($6|0)==(-1);
  $12 = ($5>>>0)>(4294967295);
  $13 = $11 & $12;
  $14 = $10 | $13;
  if ($14) {
   $16 = $5;$17 = $6;$e$02 = -1023;
  } else {
   $$0 = -1023;
   STACKTOP = sp;return ($$0|0);
  }
  while(1) {
   $15 = (($e$02) + -1)|0;
   $18 = (_bitshift64Shl(($16|0),($17|0),1)|0);
   $19 = tempRet0;
   $20 = ($19|0)>(-1);
   $21 = ($19|0)==(-1);
   $22 = ($18>>>0)>(4294967295);
   $23 = $21 & $22;
   $24 = $20 | $23;
   if ($24) {
    $16 = $18;$17 = $19;$e$02 = $15;
   } else {
    $$0 = $15;
    break;
   }
  }
  STACKTOP = sp;return ($$0|0);
 } else if ((($4|0) == 2047)) {
  HEAPF32[$__x1>>2] = nan;
  $25 = $1 & 1048575;
  $26 = ($0|0)!=(0);
  $27 = ($25|0)!=(0);
  $28 = $26 | $27;
  $29 = $28 ? -2147483648 : 2147483647;
  $$0 = $29;
  STACKTOP = sp;return ($$0|0);
 } else {
  $30 = (($4) + -1023)|0;
  $$0 = $30;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _ilogbf($x) {
 $x = +$x;
 var $$0 = 0, $$mask = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__x = 0, $__x1 = 0, $e$02 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__x = sp + 4|0;
 $__x1 = sp;
 $0 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
 $1 = $0 >>> 23;
 $2 = $1 & 255;
 do {
  if ((($2|0) == 0)) {
   $3 = $0 << 9;
   $4 = ($3|0)==(0);
   if ($4) {
    HEAPF32[$__x>>2] = nan;
    $$0 = -2147483648;
    break;
   }
   $5 = ($3|0)>(-1);
   if ($5) {
    $e$02 = -127;$i$01 = $3;
    while(1) {
     $6 = (($e$02) + -1)|0;
     $7 = $i$01 << 1;
     $8 = ($7|0)>(-1);
     if ($8) {
      $e$02 = $6;$i$01 = $7;
     } else {
      $$0 = $6;
      break;
     }
    }
   } else {
    $$0 = -127;
   }
  } else if ((($2|0) == 255)) {
   HEAPF32[$__x1>>2] = nan;
   $$mask = $0 & 8388607;
   $9 = ($$mask|0)!=(0);
   $10 = $9 ? -2147483648 : 2147483647;
   $$0 = $10;
  } else {
   $11 = (($2) + -127)|0;
   $$0 = $11;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _ilogbl($x) {
 $x = +$x;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ilogb($x)|0);
 STACKTOP = sp;return ($0|0);
}
function _j0($x) {
 $x = +$x;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0;
 var $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = $1 & 2147483647;
 $3 = ($2>>>0)>(2146435071);
 if ($3) {
  $4 = $x * $x;
  $5 = 1.0 / $4;
  $$0 = $5;
  STACKTOP = sp;return (+$$0);
 }
 $6 = (+Math_abs((+$x)));
 $7 = ($2>>>0)>(1073741823);
 if ($7) {
  $8 = (+_common($2,$6,0));
  $$0 = $8;
  STACKTOP = sp;return (+$$0);
 }
 $9 = ($2>>>0)>(1059061759);
 if ($9) {
  $10 = $6 * $6;
  $11 = $10 * -4.61832688532103189199E-9;
  $12 = $11 + 1.8295404953270066567E-6;
  $13 = $10 * $12;
  $14 = $13 + -1.89979294238854721751E-4;
  $15 = $10 * $14;
  $16 = $15 + 0.0156249999999999947958;
  $17 = $10 * $16;
  $18 = $10 * 1.16614003333790000205E-9;
  $19 = $18 + 5.13546550207318111446E-7;
  $20 = $10 * $19;
  $21 = $20 + 1.1692678466333745026E-4;
  $22 = $10 * $21;
  $23 = $22 + 0.0156191029464890010492;
  $24 = $10 * $23;
  $25 = $24 + 1.0;
  $26 = $6 * 0.5;
  $27 = $26 + 1.0;
  $28 = 1.0 - $26;
  $29 = $27 * $28;
  $30 = $17 / $25;
  $31 = $10 * $30;
  $32 = $29 + $31;
  $$0 = $32;
  STACKTOP = sp;return (+$$0);
 }
 $33 = ($2>>>0)>(939524095);
 if ($33) {
  $34 = $6 * 0.25;
  $35 = $6 * $34;
  $$01 = $35;
 } else {
  $$01 = $6;
 }
 $36 = 1.0 - $$01;
 $$0 = $36;
 STACKTOP = sp;return (+$$0);
}
function _common($ix,$x,$y0) {
 $ix = $ix|0;
 $x = +$x;
 $y0 = $y0|0;
 var $$$i = 0, $$$i1 = 0, $$1$i = 0, $$1$i2 = 0, $0 = 0.0, $1 = 0.0, $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0;
 var $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0.0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0;
 var $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0;
 var $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0.0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0.0, $76 = 0;
 var $77 = 0.0, $78 = 0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0, $92 = 0.0, $93 = 0, $94 = 0.0;
 var $95 = 0, $96 = 0.0, $97 = 0, $98 = 0.0, $99 = 0, $c$0 = 0.0, $cc$0 = 0.0, $cc$1 = 0.0, $p$0$i = 0, $p$0$i4 = 0, $q$0$i = 0, $q$0$i3 = 0, $ss$0 = 0.0, $ss$1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+Math_sin((+$x)));
 $1 = (+Math_cos((+$x)));
 $2 = ($y0|0)!=(0);
 if ($2) {
  $3 = -$1;
  $c$0 = $3;
 } else {
  $c$0 = $1;
 }
 $4 = $0 + $c$0;
 $5 = ($ix>>>0)<(2145386496);
 if (!($5)) {
  $cc$1 = $4;
  $118 = $cc$1 * 0.56418958354775627928;
  $119 = (+Math_sqrt((+$x)));
  $120 = $118 / $119;
  STACKTOP = sp;return (+$120);
 }
 $6 = $0 - $c$0;
 $7 = $x * 2.0;
 $8 = (+Math_cos((+$7)));
 $9 = -$8;
 $10 = $0 * $c$0;
 $11 = $10 < 0.0;
 if ($11) {
  $12 = $9 / $6;
  $cc$0 = $12;$ss$0 = $6;
 } else {
  $13 = $9 / $4;
  $cc$0 = $4;$ss$0 = $13;
 }
 $14 = ($ix>>>0)<(1207959552);
 if (!($14)) {
  $cc$1 = $cc$0;
  $118 = $cc$1 * 0.56418958354775627928;
  $119 = (+Math_sqrt((+$x)));
  $120 = $118 / $119;
  STACKTOP = sp;return (+$120);
 }
 if ($2) {
  $15 = -$ss$0;
  $ss$1 = $15;
 } else {
  $ss$1 = $ss$0;
 }
 HEAPF64[tempDoublePtr>>3] = $x;$16 = HEAP32[tempDoublePtr>>2]|0;
 $17 = HEAP32[tempDoublePtr+4>>2]|0;
 $18 = $17 & 2147483647;
 $19 = ($18>>>0)>(1075838975);
 if ($19) {
  $p$0$i = 281200;$q$0$i = 281248;
 } else {
  $20 = ($18>>>0)>(1074933386);
  if ($20) {
   $p$0$i = 281288;$q$0$i = 281336;
  } else {
   $21 = ($18>>>0)>(1074191212);
   $$$i = $21 ? 281424 : 281512;
   $$1$i = $21 ? 281376 : 281464;
   $p$0$i = $$1$i;$q$0$i = $$$i;
  }
 }
 $22 = $x * $x;
 $23 = 1.0 / $22;
 $24 = +HEAPF64[$p$0$i>>3];
 $25 = (($p$0$i) + 8|0);
 $26 = +HEAPF64[$25>>3];
 $27 = (($p$0$i) + 16|0);
 $28 = +HEAPF64[$27>>3];
 $29 = (($p$0$i) + 24|0);
 $30 = +HEAPF64[$29>>3];
 $31 = (($p$0$i) + 32|0);
 $32 = +HEAPF64[$31>>3];
 $33 = (($p$0$i) + 40|0);
 $34 = +HEAPF64[$33>>3];
 $35 = $23 * $34;
 $36 = $32 + $35;
 $37 = $23 * $36;
 $38 = $30 + $37;
 $39 = $23 * $38;
 $40 = $28 + $39;
 $41 = $23 * $40;
 $42 = $26 + $41;
 $43 = $23 * $42;
 $44 = $24 + $43;
 $45 = +HEAPF64[$q$0$i>>3];
 $46 = (($q$0$i) + 8|0);
 $47 = +HEAPF64[$46>>3];
 $48 = (($q$0$i) + 16|0);
 $49 = +HEAPF64[$48>>3];
 $50 = (($q$0$i) + 24|0);
 $51 = +HEAPF64[$50>>3];
 $52 = (($q$0$i) + 32|0);
 $53 = +HEAPF64[$52>>3];
 $54 = $23 * $53;
 $55 = $51 + $54;
 $56 = $23 * $55;
 $57 = $49 + $56;
 $58 = $23 * $57;
 $59 = $47 + $58;
 $60 = $23 * $59;
 $61 = $45 + $60;
 $62 = $23 * $61;
 $63 = $62 + 1.0;
 $64 = $44 / $63;
 $65 = $64 + 1.0;
 $66 = $cc$0 * $65;
 if ($19) {
  $p$0$i4 = 280816;$q$0$i3 = 280864;
 } else {
  $67 = ($18>>>0)>(1074933386);
  if ($67) {
   $p$0$i4 = 280912;$q$0$i3 = 280960;
  } else {
   $68 = ($18>>>0)>(1074191212);
   $$$i1 = $68 ? 281056 : 281152;
   $$1$i2 = $68 ? 281008 : 281104;
   $p$0$i4 = $$1$i2;$q$0$i3 = $$$i1;
  }
 }
 $69 = +HEAPF64[$p$0$i4>>3];
 $70 = (($p$0$i4) + 8|0);
 $71 = +HEAPF64[$70>>3];
 $72 = (($p$0$i4) + 16|0);
 $73 = +HEAPF64[$72>>3];
 $74 = (($p$0$i4) + 24|0);
 $75 = +HEAPF64[$74>>3];
 $76 = (($p$0$i4) + 32|0);
 $77 = +HEAPF64[$76>>3];
 $78 = (($p$0$i4) + 40|0);
 $79 = +HEAPF64[$78>>3];
 $80 = $23 * $79;
 $81 = $77 + $80;
 $82 = $23 * $81;
 $83 = $75 + $82;
 $84 = $23 * $83;
 $85 = $73 + $84;
 $86 = $23 * $85;
 $87 = $71 + $86;
 $88 = $23 * $87;
 $89 = $69 + $88;
 $90 = +HEAPF64[$q$0$i3>>3];
 $91 = (($q$0$i3) + 8|0);
 $92 = +HEAPF64[$91>>3];
 $93 = (($q$0$i3) + 16|0);
 $94 = +HEAPF64[$93>>3];
 $95 = (($q$0$i3) + 24|0);
 $96 = +HEAPF64[$95>>3];
 $97 = (($q$0$i3) + 32|0);
 $98 = +HEAPF64[$97>>3];
 $99 = (($q$0$i3) + 40|0);
 $100 = +HEAPF64[$99>>3];
 $101 = $23 * $100;
 $102 = $98 + $101;
 $103 = $23 * $102;
 $104 = $96 + $103;
 $105 = $23 * $104;
 $106 = $94 + $105;
 $107 = $23 * $106;
 $108 = $92 + $107;
 $109 = $23 * $108;
 $110 = $90 + $109;
 $111 = $23 * $110;
 $112 = $111 + 1.0;
 $113 = $89 / $112;
 $114 = $113 + -0.125;
 $115 = $114 / $x;
 $116 = $ss$1 * $115;
 $117 = $66 - $116;
 $cc$1 = $117;
 $118 = $cc$1 * 0.56418958354775627928;
 $119 = (+Math_sqrt((+$x)));
 $120 = $118 / $119;
 STACKTOP = sp;return (+$120);
}
function _y0($x) {
 $x = +$x;
 var $$0 = 0.0, $$0$i = 0.0, $$01$i = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0;
 var $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0.0;
 var $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0;
 var $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Shl(($1|0),0,1)|0);
 $3 = tempRet0;
 $4 = $2 | $0;
 $3 | $1;
 $5 = ($4|0)==(0);
 if ($5) {
  $$0 = -inf;
  STACKTOP = sp;return (+$$0);
 }
 $6 = ($1|0)<(0);
 if ($6) {
  $$0 = nan;
  STACKTOP = sp;return (+$$0);
 }
 $7 = ($1>>>0)>(2146435071);
 if ($7) {
  $8 = 1.0 / $x;
  $$0 = $8;
  STACKTOP = sp;return (+$$0);
 }
 $9 = ($1>>>0)>(1073741823);
 if ($9) {
  $10 = (+_common($1,$x,1));
  $$0 = $10;
  STACKTOP = sp;return (+$$0);
 }
 $11 = ($1>>>0)>(1044381695);
 if (!($11)) {
  $72 = (+Math_log((+$x)));
  $73 = $72 * 0.636619772367581382433;
  $74 = $73 + -0.0738042951086872317523;
  $$0 = $74;
  STACKTOP = sp;return (+$$0);
 }
 $12 = $x * $x;
 $13 = $12 * -3.98205194132103398453E-11;
 $14 = $13 + 1.95590137035022920206E-8;
 $15 = $12 * $14;
 $16 = $15 + -3.81407053724364161125E-6;
 $17 = $12 * $16;
 $18 = $17 + 3.47453432093683650238E-4;
 $19 = $12 * $18;
 $20 = $19 + -0.0138185671945596898896;
 $21 = $12 * $20;
 $22 = $21 + 0.176666452509181115538;
 $23 = $12 * $22;
 $24 = $23 + -0.0738042951086872317523;
 $25 = $12 * 4.41110311332675467403E-10;
 $26 = $25 + 2.59150851840457805467E-7;
 $27 = $12 * $26;
 $28 = $27 + 7.60068627350353253702E-5;
 $29 = $12 * $28;
 $30 = $29 + 0.0127304834834123699328;
 $31 = $12 * $30;
 $32 = $31 + 1.0;
 $33 = $24 / $32;
 $34 = $1 & 2147483647;
 $35 = ($34>>>0)>(2146435071);
 do {
  if ($35) {
   $36 = 1.0 / $12;
   $$0$i = $36;
  } else {
   $37 = (+Math_abs((+$x)));
   $38 = ($34>>>0)>(1073741823);
   if ($38) {
    $39 = (+_common($34,$37,0));
    $$0$i = $39;
    break;
   }
   $40 = ($34>>>0)>(1059061759);
   if ($40) {
    $41 = $37 * $37;
    $42 = $41 * -4.61832688532103189199E-9;
    $43 = $42 + 1.8295404953270066567E-6;
    $44 = $41 * $43;
    $45 = $44 + -1.89979294238854721751E-4;
    $46 = $41 * $45;
    $47 = $46 + 0.0156249999999999947958;
    $48 = $41 * $47;
    $49 = $41 * 1.16614003333790000205E-9;
    $50 = $49 + 5.13546550207318111446E-7;
    $51 = $41 * $50;
    $52 = $51 + 1.1692678466333745026E-4;
    $53 = $41 * $52;
    $54 = $53 + 0.0156191029464890010492;
    $55 = $41 * $54;
    $56 = $55 + 1.0;
    $57 = $37 * 0.5;
    $58 = $57 + 1.0;
    $59 = 1.0 - $57;
    $60 = $58 * $59;
    $61 = $48 / $56;
    $62 = $41 * $61;
    $63 = $60 + $62;
    $$0$i = $63;
    break;
   }
   $64 = ($34>>>0)>(939524095);
   if ($64) {
    $65 = $37 * 0.25;
    $66 = $37 * $65;
    $$01$i = $66;
   } else {
    $$01$i = $37;
   }
   $67 = 1.0 - $$01$i;
   $$0$i = $67;
  }
 } while(0);
 $68 = (+Math_log((+$x)));
 $69 = $$0$i * $68;
 $70 = $69 * 0.636619772367581382433;
 $71 = $33 + $70;
 $$0 = $71;
 STACKTOP = sp;return (+$$0);
}
function _j0f($x) {
 $x = +$x;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0;
 var $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
 $1 = $0 & 2147483647;
 $2 = ($1>>>0)>(2139095039);
 if ($2) {
  $3 = $x * $x;
  $4 = 1.0 / $3;
  $$0 = $4;
  STACKTOP = sp;return (+$$0);
 }
 $5 = (+Math_abs((+$x)));
 $6 = ($1>>>0)>(1073741823);
 if ($6) {
  $7 = (+_common56($1,$5,0));
  $$0 = $7;
  STACKTOP = sp;return (+$$0);
 }
 $8 = ($1>>>0)>(973078527);
 if ($8) {
  $9 = $5 * $5;
  $10 = $9 * -4.61832705411779897986E-9;
  $11 = $10 + 1.82954045158112421632E-6;
  $12 = $9 * $11;
  $13 = $12 + -1.8997929873876273632E-4;
  $14 = $9 * $13;
  $15 = $14 + 0.015625;
  $16 = $9 * $15;
  $17 = $9 * 1.16614007339421732468E-9;
  $18 = $17 + 5.13546524416597094387E-7;
  $19 = $9 * $18;
  $20 = $19 + 1.16926785267423838377E-4;
  $21 = $9 * $20;
  $22 = $21 + 0.01561910286545753479;
  $23 = $9 * $22;
  $24 = $23 + 1.0;
  $25 = $5 * 0.5;
  $26 = $25 + 1.0;
  $27 = 1.0 - $25;
  $28 = $26 * $27;
  $29 = $16 / $24;
  $30 = $9 * $29;
  $31 = $28 + $30;
  $$0 = $31;
  STACKTOP = sp;return (+$$0);
 }
 $32 = ($1>>>0)>(562036735);
 if ($32) {
  $33 = $5 * 0.25;
  $34 = $5 * $33;
  $$01 = $34;
 } else {
  $$01 = $5;
 }
 $35 = 1.0 - $$01;
 $$0 = $35;
 STACKTOP = sp;return (+$$0);
}
function _common56($ix,$x,$y0) {
 $ix = $ix|0;
 $x = +$x;
 $y0 = $y0|0;
 var $$$i = 0, $$$i1 = 0, $$1$i = 0, $$1$i2 = 0, $0 = 0.0, $1 = 0.0, $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0;
 var $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0;
 var $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0.0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0;
 var $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0;
 var $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0.0, $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0.0, $77 = 0;
 var $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0, $91 = 0.0, $92 = 0, $93 = 0.0, $94 = 0, $95 = 0.0;
 var $96 = 0, $97 = 0.0, $98 = 0, $99 = 0.0, $c$0 = 0.0, $cc$0 = 0.0, $cc$1 = 0.0, $p$0$i = 0, $p$0$i4 = 0, $q$0$i = 0, $q$0$i3 = 0, $ss$0 = 0.0, $ss$1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+Math_sin((+$x)));
 $1 = (+Math_cos((+$x)));
 $2 = ($y0|0)!=(0);
 if ($2) {
  $3 = -$1;
  $c$0 = $3;
 } else {
  $c$0 = $1;
 }
 $4 = $0 + $c$0;
 $5 = ($ix>>>0)<(2130706432);
 if (!($5)) {
  $cc$1 = $4;
  $117 = $cc$1 * 0.564189612865447998047;
  $118 = (+Math_sqrt((+$x)));
  $119 = $117 / $118;
  STACKTOP = sp;return (+$119);
 }
 $6 = $0 - $c$0;
 $7 = $x * 2.0;
 $8 = (+Math_cos((+$7)));
 $9 = -$8;
 $10 = $0 * $c$0;
 $11 = $10 < 0.0;
 if ($11) {
  $12 = $9 / $6;
  $cc$0 = $12;$ss$0 = $6;
 } else {
  $13 = $9 / $4;
  $cc$0 = $4;$ss$0 = $13;
 }
 $14 = ($ix>>>0)<(1484783616);
 if (!($14)) {
  $cc$1 = $cc$0;
  $117 = $cc$1 * 0.564189612865447998047;
  $118 = (+Math_sqrt((+$x)));
  $119 = $117 / $118;
  STACKTOP = sp;return (+$119);
 }
 if ($2) {
  $15 = -$ss$0;
  $ss$1 = $15;
 } else {
  $ss$1 = $ss$0;
 }
 $16 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
 $17 = $16 & 2147483647;
 $18 = ($17>>>0)>(1090519039);
 if ($18) {
  $p$0$i = 281744;$q$0$i = 281768;
 } else {
  $19 = ($17>>>0)>(1089936471);
  if ($19) {
   $p$0$i = 281792;$q$0$i = 281816;
  } else {
   $20 = ($17>>>0)>(1077336935);
   $$$i = $20 ? 281864 : 281912;
   $$1$i = $20 ? 281840 : 281888;
   $p$0$i = $$1$i;$q$0$i = $$$i;
  }
 }
 $21 = $x * $x;
 $22 = 1.0 / $21;
 $23 = +HEAPF32[$p$0$i>>2];
 $24 = (($p$0$i) + 4|0);
 $25 = +HEAPF32[$24>>2];
 $26 = (($p$0$i) + 8|0);
 $27 = +HEAPF32[$26>>2];
 $28 = (($p$0$i) + 12|0);
 $29 = +HEAPF32[$28>>2];
 $30 = (($p$0$i) + 16|0);
 $31 = +HEAPF32[$30>>2];
 $32 = (($p$0$i) + 20|0);
 $33 = +HEAPF32[$32>>2];
 $34 = $22 * $33;
 $35 = $31 + $34;
 $36 = $22 * $35;
 $37 = $29 + $36;
 $38 = $22 * $37;
 $39 = $27 + $38;
 $40 = $22 * $39;
 $41 = $25 + $40;
 $42 = $22 * $41;
 $43 = $23 + $42;
 $44 = +HEAPF32[$q$0$i>>2];
 $45 = (($q$0$i) + 4|0);
 $46 = +HEAPF32[$45>>2];
 $47 = (($q$0$i) + 8|0);
 $48 = +HEAPF32[$47>>2];
 $49 = (($q$0$i) + 12|0);
 $50 = +HEAPF32[$49>>2];
 $51 = (($q$0$i) + 16|0);
 $52 = +HEAPF32[$51>>2];
 $53 = $22 * $52;
 $54 = $50 + $53;
 $55 = $22 * $54;
 $56 = $48 + $55;
 $57 = $22 * $56;
 $58 = $46 + $57;
 $59 = $22 * $58;
 $60 = $44 + $59;
 $61 = $22 * $60;
 $62 = $61 + 1.0;
 $63 = $43 / $62;
 $64 = $63 + 1.0;
 $65 = $cc$0 * $64;
 if ($18) {
  $p$0$i4 = 281552;$q$0$i3 = 281576;
 } else {
  $66 = ($17>>>0)>(1089936471);
  if ($66) {
   $p$0$i4 = 281600;$q$0$i3 = 281624;
  } else {
   $67 = ($17>>>0)>(1077336935);
   $$$i1 = $67 ? 281672 : 281720;
   $$1$i2 = $67 ? 281648 : 281696;
   $p$0$i4 = $$1$i2;$q$0$i3 = $$$i1;
  }
 }
 $68 = +HEAPF32[$p$0$i4>>2];
 $69 = (($p$0$i4) + 4|0);
 $70 = +HEAPF32[$69>>2];
 $71 = (($p$0$i4) + 8|0);
 $72 = +HEAPF32[$71>>2];
 $73 = (($p$0$i4) + 12|0);
 $74 = +HEAPF32[$73>>2];
 $75 = (($p$0$i4) + 16|0);
 $76 = +HEAPF32[$75>>2];
 $77 = (($p$0$i4) + 20|0);
 $78 = +HEAPF32[$77>>2];
 $79 = $22 * $78;
 $80 = $76 + $79;
 $81 = $22 * $80;
 $82 = $74 + $81;
 $83 = $22 * $82;
 $84 = $72 + $83;
 $85 = $22 * $84;
 $86 = $70 + $85;
 $87 = $22 * $86;
 $88 = $68 + $87;
 $89 = +HEAPF32[$q$0$i3>>2];
 $90 = (($q$0$i3) + 4|0);
 $91 = +HEAPF32[$90>>2];
 $92 = (($q$0$i3) + 8|0);
 $93 = +HEAPF32[$92>>2];
 $94 = (($q$0$i3) + 12|0);
 $95 = +HEAPF32[$94>>2];
 $96 = (($q$0$i3) + 16|0);
 $97 = +HEAPF32[$96>>2];
 $98 = (($q$0$i3) + 20|0);
 $99 = +HEAPF32[$98>>2];
 $100 = $22 * $99;
 $101 = $97 + $100;
 $102 = $22 * $101;
 $103 = $95 + $102;
 $104 = $22 * $103;
 $105 = $93 + $104;
 $106 = $22 * $105;
 $107 = $91 + $106;
 $108 = $22 * $107;
 $109 = $89 + $108;
 $110 = $22 * $109;
 $111 = $110 + 1.0;
 $112 = $88 / $111;
 $113 = $112 + -0.125;
 $114 = $113 / $x;
 $115 = $ss$1 * $114;
 $116 = $65 - $115;
 $cc$1 = $116;
 $117 = $cc$1 * 0.564189612865447998047;
 $118 = (+Math_sqrt((+$x)));
 $119 = $117 / $118;
 STACKTOP = sp;return (+$119);
}
function _y0f($x) {
 $x = +$x;
 var $$0 = 0.0, $$0$i = 0.0, $$01$i = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0;
 var $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0;
 var $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0;
 var $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
 $1 = $0 & 2147483647;
 $2 = ($1|0)==(0);
 if ($2) {
  $$0 = -inf;
  STACKTOP = sp;return (+$$0);
 }
 $3 = ($0|0)<(0);
 if ($3) {
  $$0 = nan;
  STACKTOP = sp;return (+$$0);
 }
 $4 = ($0>>>0)>(2139095039);
 if ($4) {
  $5 = 1.0 / $x;
  $$0 = $5;
  STACKTOP = sp;return (+$$0);
 }
 $6 = ($0>>>0)>(1073741823);
 if ($6) {
  $7 = (+_common56($0,$x,1));
  $$0 = $7;
  STACKTOP = sp;return (+$$0);
 }
 $8 = ($0>>>0)>(956301311);
 if (!($8)) {
  $68 = (+Math_log((+$x)));
  $69 = $68 * 0.636619746685028076171;
  $70 = $69 + -0.0738042965531349182129;
  $$0 = $70;
  STACKTOP = sp;return (+$$0);
 }
 $9 = $x * $x;
 $10 = $9 * -3.98205184104494236408E-11;
 $11 = $10 + 1.95590139639989502029E-8;
 $12 = $9 * $11;
 $13 = $12 + -3.81407062377547845244E-6;
 $14 = $9 * $13;
 $15 = $14 + 3.4745343145914375782E-4;
 $16 = $9 * $15;
 $17 = $16 + -0.013818567618727684021;
 $18 = $9 * $17;
 $19 = $18 + 0.17666645348072052002;
 $20 = $9 * $19;
 $21 = $20 + -0.0738042965531349182129;
 $22 = $9 * 4.41110314941539627398E-10;
 $23 = $22 + 2.59150851888989564031E-7;
 $24 = $9 * $23;
 $25 = $24 + 7.60068651288747787476E-5;
 $26 = $9 * $25;
 $27 = $26 + 0.0127304838970303535461;
 $28 = $9 * $27;
 $29 = $28 + 1.0;
 $30 = $21 / $29;
 $31 = ($1>>>0)>(2139095039);
 do {
  if ($31) {
   $32 = 1.0 / $9;
   $$0$i = $32;
  } else {
   $33 = (+Math_abs((+$x)));
   $34 = ($1>>>0)>(1073741823);
   if ($34) {
    $35 = (+_common56($1,$33,0));
    $$0$i = $35;
    break;
   }
   $36 = ($1>>>0)>(973078527);
   if ($36) {
    $37 = $33 * $33;
    $38 = $37 * -4.61832705411779897986E-9;
    $39 = $38 + 1.82954045158112421632E-6;
    $40 = $37 * $39;
    $41 = $40 + -1.8997929873876273632E-4;
    $42 = $37 * $41;
    $43 = $42 + 0.015625;
    $44 = $37 * $43;
    $45 = $37 * 1.16614007339421732468E-9;
    $46 = $45 + 5.13546524416597094387E-7;
    $47 = $37 * $46;
    $48 = $47 + 1.16926785267423838377E-4;
    $49 = $37 * $48;
    $50 = $49 + 0.01561910286545753479;
    $51 = $37 * $50;
    $52 = $51 + 1.0;
    $53 = $33 * 0.5;
    $54 = $53 + 1.0;
    $55 = 1.0 - $53;
    $56 = $54 * $55;
    $57 = $44 / $52;
    $58 = $37 * $57;
    $59 = $56 + $58;
    $$0$i = $59;
    break;
   }
   $60 = ($1>>>0)>(562036735);
   if ($60) {
    $61 = $33 * 0.25;
    $62 = $33 * $61;
    $$01$i = $62;
   } else {
    $$01$i = $33;
   }
   $63 = 1.0 - $$01$i;
   $$0$i = $63;
  }
 } while(0);
 $64 = (+Math_log((+$x)));
 $65 = $$0$i * $64;
 $66 = $65 * 0.636619746685028076171;
 $67 = $30 + $66;
 $$0 = $67;
 STACKTOP = sp;return (+$$0);
}
function _j1($x) {
 $x = +$x;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0;
 var $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, $z$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),63)|0);
 $3 = tempRet0;
 $4 = $1 & 2147483647;
 $5 = ($4>>>0)>(2146435071);
 if ($5) {
  $6 = $x * $x;
  $7 = 1.0 / $6;
  $$0 = $7;
  STACKTOP = sp;return (+$$0);
 }
 $8 = ($4>>>0)>(1073741823);
 if ($8) {
  $9 = (+Math_abs((+$x)));
  $10 = (+_common57($4,$9,0,$2));
  $$0 = $10;
  STACKTOP = sp;return (+$$0);
 }
 $11 = ($4>>>0)>(939524095);
 if ($11) {
  $12 = $x * $x;
  $13 = $12 * 4.96727999609584448412E-8;
  $14 = $13 + -1.5995563108403559752E-5;
  $15 = $12 * $14;
  $16 = $15 + 0.00140705666955189706048;
  $17 = $12 * $16;
  $18 = $17 + -0.0625;
  $19 = $12 * $18;
  $20 = $12 * 1.23542274426137913908E-11;
  $21 = $20 + 5.04636257076217042715E-9;
  $22 = $12 * $21;
  $23 = $22 + 1.17718464042623683263E-6;
  $24 = $12 * $23;
  $25 = $24 + 1.8594678558863091556E-4;
  $26 = $12 * $25;
  $27 = $26 + 0.0191537599538363460805;
  $28 = $12 * $27;
  $29 = $28 + 1.0;
  $30 = $19 / $29;
  $z$0 = $30;
 } else {
  $z$0 = $x;
 }
 $31 = $z$0 + 0.5;
 $32 = $31 * $x;
 $$0 = $32;
 STACKTOP = sp;return (+$$0);
}
function _common57($ix,$x,$y1,$sign) {
 $ix = $ix|0;
 $x = +$x;
 $y1 = $y1|0;
 $sign = $sign|0;
 var $$$i = 0, $$$i1 = 0, $$1$i = 0, $$1$i2 = 0, $0 = 0.0, $1 = 0, $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0;
 var $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0;
 var $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0.0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0;
 var $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0;
 var $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0.0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0.0, $74 = 0;
 var $75 = 0.0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0, $92 = 0.0;
 var $93 = 0, $94 = 0.0, $95 = 0, $96 = 0.0, $97 = 0, $98 = 0.0, $99 = 0, $cc$0 = 0.0, $cc$1 = 0.0, $cc$2 = 0.0, $p$0$i = 0, $p$0$i4 = 0, $q$0$i = 0, $q$0$i3 = 0, $s$0 = 0.0, $ss$0 = 0.0, $ss$1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+Math_sin((+$x)));
 $1 = ($y1|0)!=(0);
 if ($1) {
  $2 = -$0;
  $s$0 = $2;
 } else {
  $s$0 = $0;
 }
 $3 = (+Math_cos((+$x)));
 $4 = $s$0 - $3;
 $5 = ($ix>>>0)<(2145386496);
 if ($5) {
  $6 = -$s$0;
  $7 = $6 - $3;
  $8 = $x * 2.0;
  $9 = (+Math_cos((+$8)));
  $10 = $s$0 * $3;
  $11 = $10 > 0.0;
  if ($11) {
   $12 = $9 / $7;
   $cc$0 = $12;$ss$0 = $7;
  } else {
   $13 = $9 / $4;
   $cc$0 = $4;$ss$0 = $13;
  }
  $14 = ($ix>>>0)<(1207959552);
  if ($14) {
   if ($1) {
    $15 = -$ss$0;
    $ss$1 = $15;
   } else {
    $ss$1 = $ss$0;
   }
   HEAPF64[tempDoublePtr>>3] = $x;$16 = HEAP32[tempDoublePtr>>2]|0;
   $17 = HEAP32[tempDoublePtr+4>>2]|0;
   $18 = $17 & 2147483647;
   $19 = ($18>>>0)>(1075838975);
   if ($19) {
    $p$0$i = 282320;$q$0$i = 282368;
   } else {
    $20 = ($18>>>0)>(1074933386);
    if ($20) {
     $p$0$i = 282408;$q$0$i = 282456;
    } else {
     $21 = ($18>>>0)>(1074191212);
     $$$i = $21 ? 282544 : 282632;
     $$1$i = $21 ? 282496 : 282584;
     $p$0$i = $$1$i;$q$0$i = $$$i;
    }
   }
   $22 = $x * $x;
   $23 = 1.0 / $22;
   $24 = +HEAPF64[$p$0$i>>3];
   $25 = (($p$0$i) + 8|0);
   $26 = +HEAPF64[$25>>3];
   $27 = (($p$0$i) + 16|0);
   $28 = +HEAPF64[$27>>3];
   $29 = (($p$0$i) + 24|0);
   $30 = +HEAPF64[$29>>3];
   $31 = (($p$0$i) + 32|0);
   $32 = +HEAPF64[$31>>3];
   $33 = (($p$0$i) + 40|0);
   $34 = +HEAPF64[$33>>3];
   $35 = $23 * $34;
   $36 = $32 + $35;
   $37 = $23 * $36;
   $38 = $30 + $37;
   $39 = $23 * $38;
   $40 = $28 + $39;
   $41 = $23 * $40;
   $42 = $26 + $41;
   $43 = $23 * $42;
   $44 = $24 + $43;
   $45 = +HEAPF64[$q$0$i>>3];
   $46 = (($q$0$i) + 8|0);
   $47 = +HEAPF64[$46>>3];
   $48 = (($q$0$i) + 16|0);
   $49 = +HEAPF64[$48>>3];
   $50 = (($q$0$i) + 24|0);
   $51 = +HEAPF64[$50>>3];
   $52 = (($q$0$i) + 32|0);
   $53 = +HEAPF64[$52>>3];
   $54 = $23 * $53;
   $55 = $51 + $54;
   $56 = $23 * $55;
   $57 = $49 + $56;
   $58 = $23 * $57;
   $59 = $47 + $58;
   $60 = $23 * $59;
   $61 = $45 + $60;
   $62 = $23 * $61;
   $63 = $62 + 1.0;
   $64 = $44 / $63;
   $65 = $64 + 1.0;
   $66 = $cc$0 * $65;
   if ($19) {
    $p$0$i4 = 281936;$q$0$i3 = 281984;
   } else {
    $67 = ($18>>>0)>(1074933386);
    if ($67) {
     $p$0$i4 = 282032;$q$0$i3 = 282080;
    } else {
     $68 = ($18>>>0)>(1074191212);
     $$$i1 = $68 ? 282176 : 282272;
     $$1$i2 = $68 ? 282128 : 282224;
     $p$0$i4 = $$1$i2;$q$0$i3 = $$$i1;
    }
   }
   $69 = +HEAPF64[$p$0$i4>>3];
   $70 = (($p$0$i4) + 8|0);
   $71 = +HEAPF64[$70>>3];
   $72 = (($p$0$i4) + 16|0);
   $73 = +HEAPF64[$72>>3];
   $74 = (($p$0$i4) + 24|0);
   $75 = +HEAPF64[$74>>3];
   $76 = (($p$0$i4) + 32|0);
   $77 = +HEAPF64[$76>>3];
   $78 = (($p$0$i4) + 40|0);
   $79 = +HEAPF64[$78>>3];
   $80 = $23 * $79;
   $81 = $77 + $80;
   $82 = $23 * $81;
   $83 = $75 + $82;
   $84 = $23 * $83;
   $85 = $73 + $84;
   $86 = $23 * $85;
   $87 = $71 + $86;
   $88 = $23 * $87;
   $89 = $69 + $88;
   $90 = +HEAPF64[$q$0$i3>>3];
   $91 = (($q$0$i3) + 8|0);
   $92 = +HEAPF64[$91>>3];
   $93 = (($q$0$i3) + 16|0);
   $94 = +HEAPF64[$93>>3];
   $95 = (($q$0$i3) + 24|0);
   $96 = +HEAPF64[$95>>3];
   $97 = (($q$0$i3) + 32|0);
   $98 = +HEAPF64[$97>>3];
   $99 = (($q$0$i3) + 40|0);
   $100 = +HEAPF64[$99>>3];
   $101 = $23 * $100;
   $102 = $98 + $101;
   $103 = $23 * $102;
   $104 = $96 + $103;
   $105 = $23 * $104;
   $106 = $94 + $105;
   $107 = $23 * $106;
   $108 = $92 + $107;
   $109 = $23 * $108;
   $110 = $90 + $109;
   $111 = $23 * $110;
   $112 = $111 + 1.0;
   $113 = $89 / $112;
   $114 = $113 + 0.375;
   $115 = $114 / $x;
   $116 = $ss$1 * $115;
   $117 = $66 - $116;
   $cc$1 = $117;
  } else {
   $cc$1 = $cc$0;
  }
 } else {
  $cc$1 = $4;
 }
 $118 = ($sign|0)==(0);
 if ($118) {
  $cc$2 = $cc$1;
  $120 = $cc$2 * 0.56418958354775627928;
  $121 = (+Math_sqrt((+$x)));
  $122 = $120 / $121;
  STACKTOP = sp;return (+$122);
 }
 $119 = -$cc$1;
 $cc$2 = $119;
 $120 = $cc$2 * 0.56418958354775627928;
 $121 = (+Math_sqrt((+$x)));
 $122 = $120 / $121;
 STACKTOP = sp;return (+$122);
}
function _y1($x) {
 $x = +$x;
 var $$0 = 0.0, $$0$i = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0;
 var $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0;
 var $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0;
 var $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, $z$0$i = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Shl(($1|0),0,1)|0);
 $3 = tempRet0;
 $4 = $2 | $0;
 $3 | $1;
 $5 = ($4|0)==(0);
 if ($5) {
  $$0 = -inf;
  STACKTOP = sp;return (+$$0);
 }
 $6 = ($1|0)<(0);
 if ($6) {
  $$0 = nan;
  STACKTOP = sp;return (+$$0);
 }
 $7 = ($1>>>0)>(2146435071);
 if ($7) {
  $8 = 1.0 / $x;
  $$0 = $8;
  STACKTOP = sp;return (+$$0);
 }
 $9 = ($1>>>0)>(1073741823);
 if ($9) {
  $10 = (+_common57($1,$x,1,0));
  $$0 = $10;
  STACKTOP = sp;return (+$$0);
 }
 $11 = ($1>>>0)<(1016070144);
 if ($11) {
  $12 = -0.636619772367581382433 / $x;
  $$0 = $12;
  STACKTOP = sp;return (+$$0);
 }
 $13 = $x * $x;
 $14 = $13 * -9.19099158039878874504E-8;
 $15 = $14 + 2.35252600561610495928E-5;
 $16 = $13 * $15;
 $17 = $16 + -0.00191256895875763547298;
 $18 = $13 * $17;
 $19 = $18 + 0.0504438716639811282616;
 $20 = $13 * $19;
 $21 = $20 + -0.196057090646238940668;
 $22 = $13 * 1.66559246207992079114E-11;
 $23 = $22 + 6.22741452364621501295E-9;
 $24 = $13 * $23;
 $25 = $24 + 1.35608801097516229404E-6;
 $26 = $13 * $25;
 $27 = $26 + 2.02552581025135171496E-4;
 $28 = $13 * $27;
 $29 = $28 + 0.0199167318236649903973;
 $30 = $13 * $29;
 $31 = $30 + 1.0;
 $32 = $21 / $31;
 $33 = $32 * $x;
 $34 = (_bitshift64Lshr(($0|0),($1|0),63)|0);
 $35 = tempRet0;
 $36 = $1 & 2147483647;
 $37 = ($36>>>0)>(2146435071);
 do {
  if ($37) {
   $38 = 1.0 / $13;
   $$0$i = $38;
  } else {
   $39 = ($36>>>0)>(1073741823);
   if ($39) {
    $40 = (+Math_abs((+$x)));
    $41 = (+_common57($36,$40,0,$34));
    $$0$i = $41;
    break;
   }
   $42 = ($36>>>0)>(939524095);
   if ($42) {
    $43 = $13 * 4.96727999609584448412E-8;
    $44 = $43 + -1.5995563108403559752E-5;
    $45 = $13 * $44;
    $46 = $45 + 0.00140705666955189706048;
    $47 = $13 * $46;
    $48 = $47 + -0.0625;
    $49 = $13 * $48;
    $50 = $13 * 1.23542274426137913908E-11;
    $51 = $50 + 5.04636257076217042715E-9;
    $52 = $13 * $51;
    $53 = $52 + 1.17718464042623683263E-6;
    $54 = $13 * $53;
    $55 = $54 + 1.8594678558863091556E-4;
    $56 = $13 * $55;
    $57 = $56 + 0.0191537599538363460805;
    $58 = $13 * $57;
    $59 = $58 + 1.0;
    $60 = $49 / $59;
    $z$0$i = $60;
   } else {
    $z$0$i = $x;
   }
   $61 = $z$0$i + 0.5;
   $62 = $61 * $x;
   $$0$i = $62;
  }
 } while(0);
 $63 = (+Math_log((+$x)));
 $64 = $$0$i * $63;
 $65 = 1.0 / $x;
 $66 = $64 - $65;
 $67 = $66 * 0.636619772367581382433;
 $68 = $33 + $67;
 $$0 = $68;
 STACKTOP = sp;return (+$$0);
}
function _j1f($x) {
 $x = +$x;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0;
 var $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, $z$0 = 0.0, $z$0$in = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
 $1 = $0 >>> 31;
 $2 = $0 & 2147483647;
 $3 = ($2>>>0)>(2139095039);
 if ($3) {
  $4 = $x * $x;
  $5 = 1.0 / $4;
  $$0 = $5;
  STACKTOP = sp;return (+$$0);
 }
 $6 = ($2>>>0)>(1073741823);
 if ($6) {
  $7 = (+Math_abs((+$x)));
  $8 = (+_common70($2,$7,0,$1));
  $$0 = $8;
  STACKTOP = sp;return (+$$0);
 }
 $9 = ($2>>>0)>(838860799);
 if ($9) {
  $10 = $x * $x;
  $11 = $10 * 4.96727992072010238189E-8;
  $12 = $11 + -1.59955634444486349821E-5;
  $13 = $10 * $12;
  $14 = $13 + 0.00140705669764429330826;
  $15 = $10 * $14;
  $16 = $15 + -0.0625;
  $17 = $10 * $16;
  $18 = $10 * 1.23542270163978784581E-11;
  $19 = $18 + 5.04636243903178183245E-9;
  $20 = $10 * $19;
  $21 = $20 + 1.17718468573002610356E-6;
  $22 = $10 * $21;
  $23 = $22 + 1.85946788405999541283E-4;
  $24 = $10 * $23;
  $25 = $24 + 0.0191537607461214065552;
  $26 = $10 * $25;
  $27 = $26 + 1.0;
  $28 = $17 / $27;
  $z$0$in = $28;
 } else {
  $z$0$in = $x;
 }
 $z$0 = $z$0$in + 0.5;
 $29 = $z$0 * $x;
 $$0 = $29;
 STACKTOP = sp;return (+$$0);
}
function _common70($ix,$x,$y1,$sign) {
 $ix = $ix|0;
 $x = +$x;
 $y1 = $y1|0;
 $sign = $sign|0;
 var $$$i = 0, $$1$i = 0, $0 = 0.0, $1 = 0.0, $10 = 0.0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0;
 var $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0;
 var $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0.0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0.0;
 var $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0.0, $50 = 0, $51 = 0.0, $52 = 0;
 var $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0.0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0.0, $80 = 0.0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0;
 var $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0.0, $96 = 0, $97 = 0.0, $98 = 0, $99 = 0.0, $cc$0 = 0.0, $cc$1 = 0.0, $cc$2 = 0.0, $p$0$i = 0, $p$0$i2 = 0, $q$0$i = 0, $q$0$i1 = 0, $s$0 = 0.0, $ss$0 = 0.0;
 var $ss$1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+Math_sin((+$x)));
 $1 = $0;
 $2 = ($y1|0)!=(0);
 if ($2) {
  $3 = -$1;
  $s$0 = $3;
 } else {
  $s$0 = $1;
 }
 $4 = (+Math_cos((+$x)));
 $5 = $4;
 $6 = $s$0 - $5;
 $7 = ($ix>>>0)<(2130706432);
 if ($7) {
  $8 = -$s$0;
  $9 = $8 - $5;
  $10 = $x * 2.0;
  $11 = (+Math_cos((+$10)));
  $12 = $11;
  $13 = $s$0 * $5;
  $14 = $13 > 0.0;
  if ($14) {
   $15 = $12 / $9;
   $cc$0 = $15;$ss$0 = $9;
  } else {
   $16 = $12 / $6;
   $cc$0 = $6;$ss$0 = $16;
  }
  $17 = ($ix>>>0)<(1484783616);
  if ($17) {
   if ($2) {
    $18 = -$ss$0;
    $ss$1 = $18;
   } else {
    $ss$1 = $ss$0;
   }
   $19 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
   $20 = $19 & 2147483647;
   $21 = ($20>>>0)>(1090519039);
   if ($21) {
    $p$0$i = 282768;$q$0$i = 282792;
   } else {
    $22 = ($20>>>0)>(1089936471);
    if ($22) {
     $p$0$i = 282816;$q$0$i = 282840;
    } else {
     $23 = ($20>>>0)>(1077336935);
     $$$i = $23 ? 282888 : 282936;
     $$1$i = $23 ? 282864 : 282912;
     $p$0$i = $$1$i;$q$0$i = $$$i;
    }
   }
   $24 = $x * $x;
   $25 = 1.0 / $24;
   $26 = +HEAPF32[$p$0$i>>2];
   $27 = (($p$0$i) + 4|0);
   $28 = +HEAPF32[$27>>2];
   $29 = (($p$0$i) + 8|0);
   $30 = +HEAPF32[$29>>2];
   $31 = (($p$0$i) + 12|0);
   $32 = +HEAPF32[$31>>2];
   $33 = (($p$0$i) + 16|0);
   $34 = +HEAPF32[$33>>2];
   $35 = (($p$0$i) + 20|0);
   $36 = +HEAPF32[$35>>2];
   $37 = $25 * $36;
   $38 = $34 + $37;
   $39 = $25 * $38;
   $40 = $32 + $39;
   $41 = $25 * $40;
   $42 = $30 + $41;
   $43 = $25 * $42;
   $44 = $28 + $43;
   $45 = $25 * $44;
   $46 = $26 + $45;
   $47 = +HEAPF32[$q$0$i>>2];
   $48 = (($q$0$i) + 4|0);
   $49 = +HEAPF32[$48>>2];
   $50 = (($q$0$i) + 8|0);
   $51 = +HEAPF32[$50>>2];
   $52 = (($q$0$i) + 12|0);
   $53 = +HEAPF32[$52>>2];
   $54 = (($q$0$i) + 16|0);
   $55 = +HEAPF32[$54>>2];
   $56 = $25 * $55;
   $57 = $53 + $56;
   $58 = $25 * $57;
   $59 = $51 + $58;
   $60 = $25 * $59;
   $61 = $49 + $60;
   $62 = $25 * $61;
   $63 = $47 + $62;
   $64 = $25 * $63;
   $65 = $64 + 1.0;
   $66 = $46 / $65;
   $67 = $66 + 1.0;
   $68 = $67;
   $69 = $cc$0 * $68;
   $70 = $19 & 2145386496;
   $71 = ($70>>>0)>(1075838975);
   $q$0$i1 = $71 ? 282696 : 282744;
   $p$0$i2 = $71 ? 282672 : 282720;
   $72 = +HEAPF32[$p$0$i2>>2];
   $73 = (($p$0$i2) + 4|0);
   $74 = +HEAPF32[$73>>2];
   $75 = (($p$0$i2) + 8|0);
   $76 = +HEAPF32[$75>>2];
   $77 = (($p$0$i2) + 12|0);
   $78 = +HEAPF32[$77>>2];
   $79 = (($p$0$i2) + 16|0);
   $80 = +HEAPF32[$79>>2];
   $81 = (($p$0$i2) + 20|0);
   $82 = +HEAPF32[$81>>2];
   $83 = $25 * $82;
   $84 = $80 + $83;
   $85 = $25 * $84;
   $86 = $78 + $85;
   $87 = $25 * $86;
   $88 = $76 + $87;
   $89 = $25 * $88;
   $90 = $74 + $89;
   $91 = $25 * $90;
   $92 = $72 + $91;
   $93 = +HEAPF32[$q$0$i1>>2];
   $94 = (($q$0$i1) + 4|0);
   $95 = +HEAPF32[$94>>2];
   $96 = (($q$0$i1) + 8|0);
   $97 = +HEAPF32[$96>>2];
   $98 = (($q$0$i1) + 12|0);
   $99 = +HEAPF32[$98>>2];
   $100 = (($q$0$i1) + 16|0);
   $101 = +HEAPF32[$100>>2];
   $102 = (($q$0$i1) + 20|0);
   $103 = +HEAPF32[$102>>2];
   $104 = $25 * $103;
   $105 = $101 + $104;
   $106 = $25 * $105;
   $107 = $99 + $106;
   $108 = $25 * $107;
   $109 = $97 + $108;
   $110 = $25 * $109;
   $111 = $95 + $110;
   $112 = $25 * $111;
   $113 = $93 + $112;
   $114 = $25 * $113;
   $115 = $114 + 1.0;
   $116 = $92 / $115;
   $117 = $116 + 0.375;
   $118 = $117 / $x;
   $119 = $118;
   $120 = $ss$1 * $119;
   $121 = $69 - $120;
   $cc$1 = $121;
  } else {
   $cc$1 = $cc$0;
  }
 } else {
  $cc$1 = $6;
 }
 $122 = ($sign|0)==(0);
 if ($122) {
  $cc$2 = $cc$1;
  $124 = $cc$2 * 0.564189612865447998047;
  $125 = (+Math_sqrt((+$x)));
  $126 = $125;
  $127 = $124 / $126;
  $128 = $127;
  STACKTOP = sp;return (+$128);
 }
 $123 = -$cc$1;
 $cc$2 = $123;
 $124 = $cc$2 * 0.564189612865447998047;
 $125 = (+Math_sqrt((+$x)));
 $126 = $125;
 $127 = $124 / $126;
 $128 = $127;
 STACKTOP = sp;return (+$128);
}
function _y1f($x) {
 $x = +$x;
 var $$0 = 0.0, $$0$i = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0;
 var $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0;
 var $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0;
 var $61 = 0.0, $62 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, $z$0$i = 0.0, $z$0$in$i = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
 $1 = $0 & 2147483647;
 $2 = ($1|0)==(0);
 if ($2) {
  $$0 = -inf;
  STACKTOP = sp;return (+$$0);
 }
 $3 = ($0|0)<(0);
 if ($3) {
  $$0 = nan;
  STACKTOP = sp;return (+$$0);
 }
 $4 = ($0>>>0)>(2139095039);
 if ($4) {
  $5 = 1.0 / $x;
  $$0 = $5;
  STACKTOP = sp;return (+$$0);
 }
 $6 = ($0>>>0)>(1073741823);
 if ($6) {
  $7 = (+_common70($0,$x,1,0));
  $$0 = $7;
  STACKTOP = sp;return (+$$0);
 }
 $8 = ($0>>>0)<(838860800);
 if ($8) {
  $9 = -0.636619746685028076171 / $x;
  $$0 = $9;
  STACKTOP = sp;return (+$$0);
 }
 $10 = $x * $x;
 $11 = $10 * -9.19099178986471088137E-8;
 $12 = $11 + 2.35252591664902865887E-5;
 $13 = $10 * $12;
 $14 = $13 + -0.00191256892867386341095;
 $15 = $10 * $14;
 $16 = $15 + 0.0504438728094100952148;
 $17 = $10 * $16;
 $18 = $17 + -0.196057096123695373535;
 $19 = $10 * 1.66559249031861256185E-11;
 $20 = $19 + 6.22741458400355440972E-9;
 $21 = $10 * $20;
 $22 = $21 + 1.35608797791064716876E-6;
 $23 = $10 * $22;
 $24 = $23 + 2.0255257550161331892E-4;
 $25 = $10 * $24;
 $26 = $25 + 0.0199167318642139434814;
 $27 = $10 * $26;
 $28 = $27 + 1.0;
 $29 = $18 / $28;
 $30 = $29 * $x;
 $31 = $0 >>> 31;
 $32 = ($1>>>0)>(2139095039);
 do {
  if ($32) {
   $33 = 1.0 / $10;
   $$0$i = $33;
  } else {
   $34 = ($1>>>0)>(1073741823);
   if ($34) {
    $35 = (+Math_abs((+$x)));
    $36 = (+_common70($1,$35,0,$31));
    $$0$i = $36;
    break;
   }
   $37 = ($1>>>0)>(838860799);
   if ($37) {
    $38 = $10 * 4.96727992072010238189E-8;
    $39 = $38 + -1.59955634444486349821E-5;
    $40 = $10 * $39;
    $41 = $40 + 0.00140705669764429330826;
    $42 = $10 * $41;
    $43 = $42 + -0.0625;
    $44 = $10 * $43;
    $45 = $10 * 1.23542270163978784581E-11;
    $46 = $45 + 5.04636243903178183245E-9;
    $47 = $10 * $46;
    $48 = $47 + 1.17718468573002610356E-6;
    $49 = $10 * $48;
    $50 = $49 + 1.85946788405999541283E-4;
    $51 = $10 * $50;
    $52 = $51 + 0.0191537607461214065552;
    $53 = $10 * $52;
    $54 = $53 + 1.0;
    $55 = $44 / $54;
    $z$0$in$i = $55;
   } else {
    $z$0$in$i = $x;
   }
   $z$0$i = $z$0$in$i + 0.5;
   $56 = $z$0$i * $x;
   $$0$i = $56;
  }
 } while(0);
 $57 = (+Math_log((+$x)));
 $58 = $$0$i * $57;
 $59 = 1.0 / $x;
 $60 = $58 - $59;
 $61 = $60 * 0.636619746685028076171;
 $62 = $30 + $61;
 $$0 = $62;
 STACKTOP = sp;return (+$$0);
}
function _jn($n,$x) {
 $n = $n|0;
 $x = +$x;
 var $$0 = 0.0, $$02 = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0.0;
 var $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0, $118 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0;
 var $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0;
 var $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0;
 var $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0.0;
 var $99 = 0.0, $a$04 = 0.0, $a$04$phi = 0.0, $a$1$lcssa = 0.0, $a$17 = 0.0, $a$214 = 0.0, $a$214$phi = 0.0, $a$322 = 0.0, $a$4 = 0.0, $a$5 = 0.0, $b$05 = 0.0, $b$1$lcssa = 0.0, $b$18 = 0.0, $b$215 = 0.0, $b$323 = 0.0, $b$4 = 0.0, $b$5 = 0.0, $b$6 = 0.0, $exitcond = 0, $exitcond44 = 0;
 var $i$03 = 0, $i$16 = 0, $i$230 = 0, $i$313 = 0, $i$421 = 0, $k$038 = 0, $nm1$0 = 0, $or$cond = 0, $q0$035 = 0.0, $q0$035$phi = 0.0, $q1$036 = 0.0, $sign$0 = 0, $t$0$lcssa = 0.0, $t$031 = 0.0, $t$124 = 0.0, $t$2 = 0.0, $t$3 = 0.0, $temp$0 = 0.0, $z$037 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),63)|0);
 $3 = tempRet0;
 $4 = $1 & 2147483647;
 $5 = (0 - ($0))|0;
 $6 = $0 | $5;
 $7 = $6 >>> 31;
 $8 = $4 | $7;
 $9 = ($8>>>0)>(2146435072);
 if ($9) {
  $$0 = $x;
  STACKTOP = sp;return (+$$0);
 }
 $10 = ($n|0)==(0);
 if ($10) {
  $11 = (+_j0($x));
  $$0 = $11;
  STACKTOP = sp;return (+$$0);
 }
 $12 = ($n|0)<(0);
 if ($12) {
  $13 = $n ^ -1;
  $14 = -$x;
  $15 = $2 ^ 1;
  $$02 = $14;$nm1$0 = $13;$sign$0 = $15;
 } else {
  $16 = (($n) + -1)|0;
  $$02 = $x;$nm1$0 = $16;$sign$0 = $2;
 }
 $17 = ($nm1$0|0)==(0);
 if ($17) {
  $18 = (+_j1($$02));
  $$0 = $18;
  STACKTOP = sp;return (+$$0);
 }
 $19 = $sign$0 & $n;
 $20 = (+Math_abs((+$$02)));
 $21 = $4 | $0;
 $22 = ($21|0)==(0);
 $23 = ($4|0)==(2146435072);
 $or$cond = $22 | $23;
 L16: do {
  if ($or$cond) {
   $b$6 = 0.0;
  } else {
   $24 = (+($nm1$0|0));
   $25 = $24 < $20;
   if ($25) {
    $26 = ($4>>>0)>(1389363199);
    if (!($26)) {
     $44 = (+_j0($20));
     $45 = (+_j1($20));
     $46 = ($nm1$0|0)>(0);
     if ($46) {
      $a$04 = $44;$b$05 = $45;$i$03 = 0;
     } else {
      $b$6 = $45;
      break;
     }
     while(1) {
      $47 = (($i$03) + 1)|0;
      $48 = (+($47|0));
      $49 = $48 * 2.0;
      $50 = $49 / $20;
      $51 = $b$05 * $50;
      $52 = $51 - $a$04;
      $exitcond = ($47|0)==($nm1$0|0);
      if ($exitcond) {
       $b$6 = $52;
       break L16;
      } else {
       $a$04$phi = $b$05;$b$05 = $52;$i$03 = $47;$a$04 = $a$04$phi;
      }
     }
    }
    $27 = $nm1$0 & 3;
    if ((($27|0) == 1)) {
     $31 = (+Math_cos((+$20)));
     $32 = -$31;
     $33 = (+Math_sin((+$20)));
     $34 = $32 - $33;
     $temp$0 = $34;
    } else if ((($27|0) == 2)) {
     $35 = (+Math_cos((+$20)));
     $36 = (+Math_sin((+$20)));
     $37 = $35 - $36;
     $temp$0 = $37;
    } else if ((($27|0) == 0)) {
     $28 = (+Math_cos((+$20)));
     $29 = (+Math_sin((+$20)));
     $30 = $29 - $28;
     $temp$0 = $30;
    } else {
     $38 = (+Math_cos((+$20)));
     $39 = (+Math_sin((+$20)));
     $40 = $38 + $39;
     $temp$0 = $40;
    }
    $41 = $temp$0 * 0.56418958354775627928;
    $42 = (+Math_sqrt((+$20)));
    $43 = $41 / $42;
    $b$6 = $43;
    break;
   }
   $53 = ($4>>>0)<(1041235968);
   if ($53) {
    $54 = ($nm1$0|0)>(32);
    if ($54) {
     $b$6 = 0.0;
     break;
    }
    $55 = $20 * 0.5;
    $56 = (($nm1$0) + 1)|0;
    $57 = ($56|0)<(2);
    if ($57) {
     $a$1$lcssa = 1.0;$b$1$lcssa = $55;
    } else {
     $a$17 = 1.0;$b$18 = $55;$i$16 = 2;
     while(1) {
      $58 = (+($i$16|0));
      $59 = $a$17 * $58;
      $60 = $55 * $b$18;
      $61 = (($i$16) + 1)|0;
      $62 = (($nm1$0) + 1)|0;
      $exitcond44 = ($i$16|0)==($62|0);
      if ($exitcond44) {
       $a$1$lcssa = $59;$b$1$lcssa = $60;
       break;
      } else {
       $a$17 = $59;$b$18 = $60;$i$16 = $61;
      }
     }
    }
    $63 = $b$1$lcssa / $a$1$lcssa;
    $b$6 = $63;
    break;
   }
   $64 = $24 + 1.0;
   $65 = $64 * 2.0;
   $66 = $65 / $20;
   $67 = 2.0 / $20;
   $68 = $66 + $67;
   $69 = $66 * $68;
   $70 = $69 + -1.0;
   $71 = $70 < 1.0E+9;
   if ($71) {
    $k$038 = 1;$q0$035 = $66;$q1$036 = $70;$z$037 = $68;
    while(1) {
     $73 = (($k$038) + 1)|0;
     $74 = $67 + $z$037;
     $75 = $q1$036 * $74;
     $76 = $75 - $q0$035;
     $77 = $76 < 1.0E+9;
     if ($77) {
      $q0$035$phi = $q1$036;$k$038 = $73;$q1$036 = $76;$z$037 = $74;$q0$035 = $q0$035$phi;
     } else {
      break;
     }
    }
    $72 = ($k$038|0)>(-2);
    if ($72) {
     $i$230 = $73;$t$031 = 0.0;
     label = 28;
    } else {
     $t$0$lcssa = 0.0;
    }
   } else {
    $i$230 = 1;$t$031 = 0.0;
    label = 28;
   }
   if ((label|0) == 28) {
    while(1) {
     label = 0;
     $78 = (+($i$230|0));
     $79 = $64 + $78;
     $80 = $79 * 2.0;
     $81 = $80 / $20;
     $82 = $81 - $t$031;
     $83 = 1.0 / $82;
     $84 = (($i$230) + -1)|0;
     $85 = ($i$230|0)>(0);
     if ($85) {
      $i$230 = $84;$t$031 = $83;
      label = 28;
     } else {
      $t$0$lcssa = $83;
      break;
     }
    }
   }
   $86 = (+Math_abs((+$66)));
   $87 = (+Math_log((+$86)));
   $88 = $64 * $87;
   $89 = $88 < 709.782712893383973096;
   $90 = ($nm1$0|0)>(0);
   if ($89) {
    if ($90) {
     $a$214 = $t$0$lcssa;$b$215 = 1.0;$i$313 = $nm1$0;
     while(1) {
      $91 = (+($i$313|0));
      $92 = $91 * 2.0;
      $93 = $b$215 * $92;
      $94 = $93 / $20;
      $95 = $94 - $a$214;
      $96 = (($i$313) + -1)|0;
      $97 = ($96|0)>(0);
      if ($97) {
       $a$214$phi = $b$215;$b$215 = $95;$i$313 = $96;$a$214 = $a$214$phi;
      } else {
       $a$5 = $b$215;$b$5 = $95;$t$3 = $t$0$lcssa;
       break;
      }
     }
    } else {
     $a$5 = $t$0$lcssa;$b$5 = 1.0;$t$3 = $t$0$lcssa;
    }
   } else {
    if ($90) {
     $a$322 = $t$0$lcssa;$b$323 = 1.0;$i$421 = $nm1$0;$t$124 = $t$0$lcssa;
     while(1) {
      $98 = (+($i$421|0));
      $99 = $98 * 2.0;
      $100 = $b$323 * $99;
      $101 = $100 / $20;
      $102 = $101 - $a$322;
      $103 = $102 > 3.27339060789614187001E+150;
      if ($103) {
       $104 = $b$323 / $102;
       $105 = $t$124 / $102;
       $a$4 = $104;$b$4 = 1.0;$t$2 = $105;
      } else {
       $a$4 = $b$323;$b$4 = $102;$t$2 = $t$124;
      }
      $106 = (($i$421) + -1)|0;
      $107 = ($106|0)>(0);
      if ($107) {
       $a$322 = $a$4;$b$323 = $b$4;$i$421 = $106;$t$124 = $t$2;
      } else {
       $a$5 = $a$4;$b$5 = $b$4;$t$3 = $t$2;
       break;
      }
     }
    } else {
     $a$5 = $t$0$lcssa;$b$5 = 1.0;$t$3 = $t$0$lcssa;
    }
   }
   $108 = (+_j0($20));
   $109 = (+_j1($20));
   $110 = (+Math_abs((+$108)));
   $111 = (+Math_abs((+$109)));
   $112 = !($110 >= $111);
   if ($112) {
    $115 = $t$3 * $109;
    $116 = $115 / $a$5;
    $b$6 = $116;
    break;
   } else {
    $113 = $t$3 * $108;
    $114 = $113 / $b$5;
    $b$6 = $114;
    break;
   }
  }
 } while(0);
 $117 = ($19|0)==(0);
 if ($117) {
  $$0 = $b$6;
  STACKTOP = sp;return (+$$0);
 }
 $118 = -$b$6;
 $$0 = $118;
 STACKTOP = sp;return (+$$0);
}
function _yn($n,$x) {
 $n = $n|0;
 $x = +$x;
 var $$0 = 0.0, $$sink1$in5 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0;
 var $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0.0, $7 = 0, $8 = 0, $9 = 0, $a$07 = 0.0, $a$07$phi = 0.0, $b$1 = 0.0, $i$06 = 0, $nm1$0 = 0, $or$cond = 0, $or$cond4 = 0, $sign$0 = 0, $temp$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = $1 & 2147483647;
 $3 = (0 - ($0))|0;
 $4 = $0 | $3;
 $5 = $4 >>> 31;
 $6 = $2 | $5;
 $7 = ($6>>>0)>(2146435072);
 if ($7) {
  $$0 = $x;
  STACKTOP = sp;return (+$$0);
 }
 $8 = ($1|0)<(0);
 if ($8) {
  $9 = $2 | $0;
  $10 = ($9|0)==(0);
  if (!($10)) {
   $$0 = nan;
   STACKTOP = sp;return (+$$0);
  }
 }
 $11 = ($2|0)==(2146435072);
 if ($11) {
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $12 = ($n|0)==(0);
 if ($12) {
  $13 = (+_y0($x));
  $$0 = $13;
  STACKTOP = sp;return (+$$0);
 }
 $14 = ($n|0)<(0);
 if ($14) {
  $15 = $n ^ -1;
  $16 = $n & 1;
  $nm1$0 = $15;$sign$0 = $16;
 } else {
  $17 = (($n) + -1)|0;
  $nm1$0 = $17;$sign$0 = 0;
 }
 $18 = ($nm1$0|0)==(0);
 if ($18) {
  $19 = ($sign$0|0)==(0);
  $20 = (+_y1($x));
  if ($19) {
   $$0 = $20;
   STACKTOP = sp;return (+$$0);
  }
  $21 = -$20;
  $$0 = $21;
  STACKTOP = sp;return (+$$0);
 }
 $22 = ($2>>>0)>(1389363199);
 if ($22) {
  $23 = $nm1$0 & 3;
  if ((($23|0) == 0)) {
   $24 = (+Math_sin((+$x)));
   $25 = -$24;
   $26 = (+Math_cos((+$x)));
   $27 = $25 - $26;
   $temp$0 = $27;
  } else if ((($23|0) == 2)) {
   $31 = (+Math_sin((+$x)));
   $32 = (+Math_cos((+$x)));
   $33 = $31 + $32;
   $temp$0 = $33;
  } else if ((($23|0) == 1)) {
   $28 = (+Math_sin((+$x)));
   $29 = (+Math_cos((+$x)));
   $30 = $29 - $28;
   $temp$0 = $30;
  } else {
   $34 = (+Math_sin((+$x)));
   $35 = (+Math_cos((+$x)));
   $36 = $34 - $35;
   $temp$0 = $36;
  }
  $37 = $temp$0 * 0.56418958354775627928;
  $38 = (+Math_sqrt((+$x)));
  $39 = $37 / $38;
  $b$1 = $39;
 } else {
  $40 = (+_y0($x));
  $41 = (+_y1($x));
  HEAPF64[tempDoublePtr>>3] = $41;$42 = HEAP32[tempDoublePtr>>2]|0;
  $43 = HEAP32[tempDoublePtr+4>>2]|0;
  $44 = ($nm1$0|0)<(1);
  $45 = (0)==(0);
  $46 = ($43|0)==(-1048576);
  $47 = $45 & $46;
  $or$cond4 = $44 | $47;
  if ($or$cond4) {
   $b$1 = $41;
  } else {
   $$sink1$in5 = $41;$a$07 = $40;$i$06 = 0;
   while(1) {
    $48 = (($i$06) + 1)|0;
    $49 = (+($48|0));
    $50 = $49 * 2.0;
    $51 = $50 / $x;
    $52 = $$sink1$in5 * $51;
    $53 = $52 - $a$07;
    HEAPF64[tempDoublePtr>>3] = $53;$54 = HEAP32[tempDoublePtr>>2]|0;
    $55 = HEAP32[tempDoublePtr+4>>2]|0;
    $56 = ($48|0)>=($nm1$0|0);
    $57 = (0)==(0);
    $58 = ($55|0)==(-1048576);
    $59 = $57 & $58;
    $or$cond = $56 | $59;
    if ($or$cond) {
     $b$1 = $53;
     break;
    } else {
     $a$07$phi = $$sink1$in5;$$sink1$in5 = $53;$i$06 = $48;$a$07 = $a$07$phi;
    }
   }
  }
 }
 $60 = ($sign$0|0)==(0);
 if ($60) {
  $$0 = $b$1;
  STACKTOP = sp;return (+$$0);
 }
 $61 = -$b$1;
 $$0 = $61;
 STACKTOP = sp;return (+$$0);
}
function _jnf($n,$x) {
 $n = $n|0;
 $x = +$x;
 var $$0 = 0.0, $$02 = 0.0, $$op = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0;
 var $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0;
 var $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0;
 var $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0.0, $78 = 0.0;
 var $79 = 0, $8 = 0.0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0.0, $a$04 = 0.0, $a$04$phi = 0.0, $a$1$lcssa = 0.0, $a$17 = 0.0, $a$214 = 0.0;
 var $a$214$phi = 0.0, $a$322 = 0.0, $a$4 = 0.0, $a$5 = 0.0, $b$05 = 0.0, $b$1$lcssa = 0.0, $b$18 = 0.0, $b$215 = 0.0, $b$323 = 0.0, $b$4 = 0.0, $b$5 = 0.0, $b$6 = 0.0, $exitcond = 0, $exitcond44 = 0, $i$03 = 0, $i$16 = 0, $i$230 = 0, $i$313 = 0, $i$421 = 0, $k$038 = 0;
 var $nm1$0 = 0, $nm1$0$op = 0, $not$ = 0, $q0$035 = 0.0, $q0$035$phi = 0.0, $q1$036 = 0.0, $sign$0 = 0, $t$0$lcssa = 0.0, $t$031 = 0.0, $t$124 = 0.0, $t$2 = 0.0, $t$3 = 0.0, $z$037 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
 $1 = $0 >>> 31;
 $2 = $0 & 2147483647;
 $3 = ($2>>>0)>(2139095040);
 if ($3) {
  $$0 = $x;
  STACKTOP = sp;return (+$$0);
 }
 $4 = ($n|0)==(0);
 if ($4) {
  $5 = (+_j0f($x));
  $$0 = $5;
  STACKTOP = sp;return (+$$0);
 }
 $6 = ($n|0)<(0);
 if ($6) {
  $7 = $n ^ -1;
  $8 = -$x;
  $9 = $1 ^ 1;
  $$02 = $8;$nm1$0 = $7;$sign$0 = $9;
 } else {
  $10 = (($n) + -1)|0;
  $$02 = $x;$nm1$0 = $10;$sign$0 = $1;
 }
 $11 = ($nm1$0|0)==(0);
 if ($11) {
  $12 = (+_j1f($$02));
  $$0 = $12;
  STACKTOP = sp;return (+$$0);
 }
 $13 = $sign$0 & $n;
 $14 = (+Math_abs((+$$02)));
 L16: do {
  if ((($2|0) == 0) | (($2|0) == 2139095040)) {
   $b$6 = 0.0;
  } else {
   $15 = (+($nm1$0|0));
   $16 = $15 < $14;
   if ($16) {
    $17 = (+_j0f($14));
    $18 = (+_j1f($14));
    $19 = ($nm1$0|0)>(0);
    if ($19) {
     $a$04 = $17;$b$05 = $18;$i$03 = 0;
    } else {
     $b$6 = $18;
     break;
    }
    while(1) {
     $20 = (($i$03) + 1)|0;
     $21 = (+($20|0));
     $22 = $21 * 2.0;
     $23 = $22 / $14;
     $24 = $b$05 * $23;
     $25 = $24 - $a$04;
     $exitcond = ($20|0)==($nm1$0|0);
     if ($exitcond) {
      $b$6 = $25;
      break L16;
     } else {
      $a$04$phi = $b$05;$b$05 = $25;$i$03 = $20;$a$04 = $a$04$phi;
     }
    }
   }
   $26 = ($2>>>0)<(897581056);
   if ($26) {
    $27 = $14 * 0.5;
    $nm1$0$op = (($nm1$0) + 1)|0;
    $28 = ($nm1$0$op|0)<(2);
    $not$ = ($nm1$0|0)<(9);
    $29 = $28 & $not$;
    if ($29) {
     $a$1$lcssa = 1.0;$b$1$lcssa = $27;
    } else {
     $30 = ($nm1$0|0)<(8);
     $$op = (($nm1$0) + 2)|0;
     $31 = $30 ? $$op : 10;
     $a$17 = 1.0;$b$18 = $27;$i$16 = 2;
     while(1) {
      $32 = (+($i$16|0));
      $33 = $a$17 * $32;
      $34 = $27 * $b$18;
      $35 = (($i$16) + 1)|0;
      $exitcond44 = ($35|0)==($31|0);
      if ($exitcond44) {
       $a$1$lcssa = $33;$b$1$lcssa = $34;
       break;
      } else {
       $a$17 = $33;$b$18 = $34;$i$16 = $35;
      }
     }
    }
    $36 = $b$1$lcssa / $a$1$lcssa;
    $b$6 = $36;
    break;
   }
   $37 = $15 + 1.0;
   $38 = $37 * 2.0;
   $39 = $38 / $14;
   $40 = 2.0 / $14;
   $41 = $39 + $40;
   $42 = $39 * $41;
   $43 = $42 + -1.0;
   $44 = $43 < 1.0E+4;
   if ($44) {
    $k$038 = 1;$q0$035 = $39;$q1$036 = $43;$z$037 = $41;
    while(1) {
     $46 = (($k$038) + 1)|0;
     $47 = $40 + $z$037;
     $48 = $q1$036 * $47;
     $49 = $48 - $q0$035;
     $50 = $49 < 1.0E+4;
     if ($50) {
      $q0$035$phi = $q1$036;$k$038 = $46;$q1$036 = $49;$z$037 = $47;$q0$035 = $q0$035$phi;
     } else {
      break;
     }
    }
    $45 = ($k$038|0)>(-2);
    if ($45) {
     $i$230 = $46;$t$031 = 0.0;
     label = 21;
    } else {
     $t$0$lcssa = 0.0;
    }
   } else {
    $i$230 = 1;$t$031 = 0.0;
    label = 21;
   }
   if ((label|0) == 21) {
    while(1) {
     label = 0;
     $51 = (+($i$230|0));
     $52 = $37 + $51;
     $53 = $52 * 2.0;
     $54 = $53 / $14;
     $55 = $54 - $t$031;
     $56 = 1.0 / $55;
     $57 = (($i$230) + -1)|0;
     $58 = ($i$230|0)>(0);
     if ($58) {
      $i$230 = $57;$t$031 = $56;
      label = 21;
     } else {
      $t$0$lcssa = $56;
      break;
     }
    }
   }
   $59 = (+Math_abs((+$39)));
   $60 = (+Math_log((+$59)));
   $61 = $37 * $60;
   $62 = $61 < 88.7216796875;
   $63 = ($nm1$0|0)>(0);
   if ($62) {
    if ($63) {
     $a$214 = $t$0$lcssa;$b$215 = 1.0;$i$313 = $nm1$0;
     while(1) {
      $64 = (+($i$313|0));
      $65 = $64 * 2.0;
      $66 = $65 * $b$215;
      $67 = $66 / $14;
      $68 = $67 - $a$214;
      $69 = (($i$313) + -1)|0;
      $70 = ($69|0)>(0);
      if ($70) {
       $a$214$phi = $b$215;$b$215 = $68;$i$313 = $69;$a$214 = $a$214$phi;
      } else {
       $a$5 = $b$215;$b$5 = $68;$t$3 = $t$0$lcssa;
       break;
      }
     }
    } else {
     $a$5 = $t$0$lcssa;$b$5 = 1.0;$t$3 = $t$0$lcssa;
    }
   } else {
    if ($63) {
     $a$322 = $t$0$lcssa;$b$323 = 1.0;$i$421 = $nm1$0;$t$124 = $t$0$lcssa;
     while(1) {
      $71 = (+($i$421|0));
      $72 = $71 * 2.0;
      $73 = $72 * $b$323;
      $74 = $73 / $14;
      $75 = $74 - $a$322;
      $76 = $75 > 1152921504606846976.0;
      if ($76) {
       $77 = $b$323 / $75;
       $78 = $t$124 / $75;
       $a$4 = $77;$b$4 = 1.0;$t$2 = $78;
      } else {
       $a$4 = $b$323;$b$4 = $75;$t$2 = $t$124;
      }
      $79 = (($i$421) + -1)|0;
      $80 = ($79|0)>(0);
      if ($80) {
       $a$322 = $a$4;$b$323 = $b$4;$i$421 = $79;$t$124 = $t$2;
      } else {
       $a$5 = $a$4;$b$5 = $b$4;$t$3 = $t$2;
       break;
      }
     }
    } else {
     $a$5 = $t$0$lcssa;$b$5 = 1.0;$t$3 = $t$0$lcssa;
    }
   }
   $81 = (+_j0f($14));
   $82 = (+_j1f($14));
   $83 = (+Math_abs((+$81)));
   $84 = (+Math_abs((+$82)));
   $85 = !($83 >= $84);
   if ($85) {
    $88 = $t$3 * $82;
    $89 = $88 / $a$5;
    $b$6 = $89;
    break;
   } else {
    $86 = $t$3 * $81;
    $87 = $86 / $b$5;
    $b$6 = $87;
    break;
   }
  }
 } while(0);
 $90 = ($13|0)==(0);
 if ($90) {
  $$0 = $b$6;
  STACKTOP = sp;return (+$$0);
 }
 $91 = -$b$6;
 $$0 = $91;
 STACKTOP = sp;return (+$$0);
}
function _ynf($n,$x) {
 $n = $n|0;
 $x = +$x;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0;
 var $26 = 0, $27 = 0, $28 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $a$02 = 0.0, $a$02$phi = 0.0, $b$0$lcssa = 0.0, $b$03 = 0.0, $i$01 = 0, $ib$0 = 0, $nm1$0 = 0, $or$cond = 0, $sign$0 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
 $1 = $0 & 2147483647;
 $2 = ($1>>>0)>(2139095040);
 do {
  if ($2) {
   $$0 = $x;
  } else {
   $3 = ($0|0)>(-1);
   $4 = ($1|0)==(0);
   $or$cond = $3 | $4;
   if ($or$cond) {
    $5 = ($1|0)==(2139095040);
    if ($5) {
     $$0 = 0.0;
    } else {
     $6 = ($n|0)==(0);
     if ($6) {
      $7 = (+_y0f($x));
      $$0 = $7;
      break;
     }
     $8 = ($n|0)<(0);
     if ($8) {
      $9 = $n ^ -1;
      $10 = $n & 1;
      $nm1$0 = $9;$sign$0 = $10;
     } else {
      $11 = (($n) + -1)|0;
      $nm1$0 = $11;$sign$0 = 0;
     }
     $12 = ($nm1$0|0)==(0);
     if ($12) {
      $13 = ($sign$0|0)==(0);
      $14 = (+_y1f($x));
      if ($13) {
       $$0 = $14;
       break;
      }
      $15 = -$14;
      $$0 = $15;
      break;
     }
     $16 = (+_y0f($x));
     $17 = (+_y1f($x));
     $18 = ($nm1$0|0)>(0);
     L16: do {
      if ($18) {
       $a$02 = $16;$b$03 = $17;$i$01 = 0;
       while(1) {
        $ib$0 = (HEAPF32[tempDoublePtr>>2]=$b$03,HEAP32[tempDoublePtr>>2]|0);
        $19 = ($ib$0|0)==(-8388608);
        if ($19) {
         $b$0$lcssa = $b$03;
         break L16;
        }
        $20 = (($i$01) + 1)|0;
        $21 = (+($20|0));
        $22 = $21 * 2.0;
        $23 = $22 / $x;
        $24 = $b$03 * $23;
        $25 = $24 - $a$02;
        $26 = ($20|0)<($nm1$0|0);
        if ($26) {
         $a$02$phi = $b$03;$b$03 = $25;$i$01 = $20;$a$02 = $a$02$phi;
        } else {
         $b$0$lcssa = $25;
         break;
        }
       }
      } else {
       $b$0$lcssa = $17;
      }
     } while(0);
     $27 = ($sign$0|0)==(0);
     if ($27) {
      $$0 = $b$0$lcssa;
     } else {
      $28 = -$b$0$lcssa;
      $$0 = $28;
     }
    }
   } else {
    $$0 = nan;
   }
  }
 } while(0);
 STACKTOP = sp;return (+$$0);
}
function _ldexp($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_scalbn($x,$n));
 STACKTOP = sp;return (+$0);
}
function _ldexpf($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_scalbnf($x,$n));
 STACKTOP = sp;return (+$0);
}
function _ldexpl($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_scalbnl($x,$n));
 STACKTOP = sp;return (+$0);
}
function _logb($x) {
 $x = +$x;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = $1 & 2146435072;
 $3 = ($2>>>0)<(2146435072);
 $4 = ($2|0)==(2146435072);
 $5 = (0)<(0);
 $6 = $4 & $5;
 $7 = $3 | $6;
 if (!($7)) {
  $8 = $x * $x;
  $$0 = $8;
  STACKTOP = sp;return (+$$0);
 }
 $9 = $x == 0.0;
 if ($9) {
  $10 = $x * $x;
  $11 = -1.0 / $10;
  $$0 = $11;
  STACKTOP = sp;return (+$$0);
 } else {
  $12 = (_ilogb($x)|0);
  $13 = (+($12|0));
  $$0 = $13;
  STACKTOP = sp;return (+$$0);
 }
 return +0;
}
function _logbf($x) {
 $x = +$x;
 var $$0 = 0.0, $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
 $1 = $0 & 2139095040;
 $2 = ($1>>>0)<(2139095040);
 do {
  if ($2) {
   $4 = $x == 0.0;
   if ($4) {
    $5 = $x * $x;
    $6 = -1.0 / $5;
    $$0 = $6;
    break;
   } else {
    $7 = (_ilogbf($x)|0);
    $8 = (+($7|0));
    $$0 = $8;
    break;
   }
  } else {
   $3 = $x * $x;
   $$0 = $3;
  }
 } while(0);
 STACKTOP = sp;return (+$$0);
}
function _logbl($x) {
 $x = +$x;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = $1 & 2146435072;
 $3 = ($2>>>0)<(2146435072);
 $4 = ($2|0)==(2146435072);
 $5 = (0)<(0);
 $6 = $4 & $5;
 $7 = $3 | $6;
 if (!($7)) {
  $8 = $x * $x;
  $$0 = $8;
  STACKTOP = sp;return (+$$0);
 }
 $9 = $x == 0.0;
 if ($9) {
  $10 = $x * $x;
  $11 = -1.0 / $10;
  $$0 = $11;
  STACKTOP = sp;return (+$$0);
 } else {
  $12 = (_ilogbl($x)|0);
  $13 = (+($12|0));
  $$0 = $13;
  STACKTOP = sp;return (+$$0);
 }
 return +0;
}
function _lgamma($x) {
 $x = +$x;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+___lgamma_r($x,282960));
 STACKTOP = sp;return (+$0);
}
function ___lgamma_r($x,$signgamp) {
 $x = +$x;
 $signgamp = $signgamp|0;
 var $$0 = 0.0, $$0$i = 0.0, $$02 = 0.0, $$1 = 0.0, $$pn = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0;
 var $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0;
 var $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0, $136 = 0, $137 = 0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0;
 var $148 = 0.0, $149 = 0.0, $15 = 0.0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0;
 var $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0;
 var $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0.0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $2 = 0, $20 = 0.0, $200 = 0.0;
 var $201 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0;
 var $39 = 0, $4 = 0.0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0;
 var $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0;
 var $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0;
 var $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $nadj$0 = 0.0, $r$0 = 0.0, $r$0$ph = 0.0, $r$0$ph7 = 0.0, $r$1 = 0.0, $t$0 = 0.0, $y$0 = 0.0, $y$0$ph = 0.0, $y$0$ph6 = 0.0, $z$0 = 0.0, $z$1 = 0.0, $z$2 = 0.0, $z$3 = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAP32[$signgamp>>2] = 1;
 $2 = $1 & 2147483647;
 $3 = ($2>>>0)>(2146435071);
 if ($3) {
  $4 = $x * $x;
  $$0 = $4;
  STACKTOP = sp;return (+$$0);
 }
 $5 = ($2>>>0)<(999292928);
 $6 = ($1|0)<(0);
 if ($5) {
  if ($6) {
   $7 = -$x;
   HEAP32[$signgamp>>2] = -1;
   $$02 = $7;
  } else {
   $$02 = $x;
  }
  $8 = (+Math_log((+$$02)));
  $9 = -$8;
  $$0 = $9;
  STACKTOP = sp;return (+$$0);
 }
 if ($6) {
  $10 = -$x;
  $11 = $x * -0.5;
  $12 = (+Math_floor((+$11)));
  $13 = $11 - $12;
  $14 = $13 * 2.0;
  $15 = $14 * 4.0;
  $16 = (~~(($15)));
  $17 = (($16) + 1)|0;
  $18 = (($17|0) / 2)&-1;
  $19 = (+($18|0));
  $20 = $19 * 0.5;
  $21 = $20;
  $22 = $14 - $21;
  $23 = $22 * 3.141592653589793116;
  if ((($18|0) == 2)) {
   $26 = -$23;
   $27 = (+___sin($26,0.0,0));
   $$0$i = $27;
  } else if ((($18|0) == 1)) {
   $25 = (+___cos($23,0.0));
   $$0$i = $25;
  } else if ((($18|0) == 3)) {
   $28 = (+___cos($23,0.0));
   $29 = -$28;
   $$0$i = $29;
  } else {
   $24 = (+___sin($23,0.0,0));
   $$0$i = $24;
  }
  $30 = $$0$i == 0.0;
  if ($30) {
   $31 = $x - $x;
   $32 = 1.0 / $31;
   $$0 = $32;
   STACKTOP = sp;return (+$$0);
  }
  $33 = $$0$i > 0.0;
  if ($33) {
   HEAP32[$signgamp>>2] = -1;
   $t$0 = $$0$i;
  } else {
   $34 = -$$0$i;
   $t$0 = $34;
  }
  $35 = $t$0 * $10;
  $36 = 3.141592653589793116 / $35;
  $37 = (+Math_log((+$36)));
  $$1 = $10;$nadj$0 = $37;
 } else {
  $$1 = $x;$nadj$0 = 0.0;
 }
 if ((($2|0) == 1072693248) | (($2|0) == 1073741824)) {
  $38 = ($0|0)==(0);
  if ($38) {
   $r$1 = 0.0;
  } else {
   label = 21;
  }
 } else {
  label = 21;
 }
 L31: do {
  if ((label|0) == 21) {
   $39 = ($2>>>0)<(1073741824);
   if (!($39)) {
    $136 = ($2>>>0)<(1075838976);
    if (!($136)) {
     $179 = ($2>>>0)<(1133510656);
     $180 = (+Math_log((+$$1)));
     if ($179) {
      $181 = 1.0 / $$1;
      $182 = $181 * $181;
      $183 = $182 * -0.00163092934096575273989;
      $184 = $183 + 8.36339918996282139125E-4;
      $185 = $182 * $184;
      $186 = $185 + -5.95187557450339963135E-4;
      $187 = $182 * $186;
      $188 = $187 + 7.936505586430195585E-4;
      $189 = $182 * $188;
      $190 = $189 + -0.0027777777772877553647;
      $191 = $182 * $190;
      $192 = $191 + 0.0833333333333329678849;
      $193 = $181 * $192;
      $194 = $193 + 0.418938533204672725052;
      $195 = $$1 + -0.5;
      $196 = $180 + -1.0;
      $197 = $195 * $196;
      $198 = $197 + $194;
      $r$1 = $198;
      break;
     } else {
      $199 = $180 + -1.0;
      $200 = $$1 * $199;
      $r$1 = $200;
      break;
     }
    }
    $137 = (~~(($$1)));
    $138 = (+($137|0));
    $139 = $$1 - $138;
    $140 = $139 * 3.19475326584100867617E-5;
    $141 = $140 + 0.00184028451407337715652;
    $142 = $139 * $141;
    $143 = $142 + 0.026642270303363860956;
    $144 = $139 * $143;
    $145 = $144 + 0.146350472652464452805;
    $146 = $139 * $145;
    $147 = $146 + 0.325778796408930981787;
    $148 = $139 * $147;
    $149 = $148 + 0.214982415960608852501;
    $150 = $139 * $149;
    $151 = $150 + -0.0772156649015328655494;
    $152 = $139 * $151;
    $153 = $139 * 7.32668430744625636189E-6;
    $154 = $153 + 7.77942496381893596434E-4;
    $155 = $139 * $154;
    $156 = $155 + 0.0186459191715652901344;
    $157 = $139 * $156;
    $158 = $157 + 0.171933865632803078993;
    $159 = $139 * $158;
    $160 = $159 + 0.721935547567138069525;
    $161 = $139 * $160;
    $162 = $161 + 1.39200533467621045958;
    $163 = $139 * $162;
    $164 = $163 + 1.0;
    $165 = $139 * 0.5;
    $166 = $152 / $164;
    $167 = $165 + $166;
    switch ($137|0) {
    case 5:  {
     $z$1 = 1.0;
     label = 37;
     break;
    }
    case 6:  {
     $z$0 = 1.0;
     label = 36;
     break;
    }
    case 7:  {
     $168 = $139 + 6.0;
     $z$0 = $168;
     label = 36;
     break;
    }
    case 4:  {
     $z$2 = 1.0;
     label = 38;
     break;
    }
    case 3:  {
     $z$3 = 1.0;
     break;
    }
    default: {
     $r$1 = $167;
     break L31;
    }
    }
    if ((label|0) == 36) {
     $169 = $139 + 5.0;
     $170 = $169 * $z$0;
     $z$1 = $170;
     label = 37;
    }
    if ((label|0) == 37) {
     $171 = $139 + 4.0;
     $172 = $171 * $z$1;
     $z$2 = $172;
     label = 38;
    }
    if ((label|0) == 38) {
     $173 = $139 + 3.0;
     $174 = $173 * $z$2;
     $z$3 = $174;
    }
    $175 = $139 + 2.0;
    $176 = $175 * $z$3;
    $177 = (+Math_log((+$176)));
    $178 = $167 + $177;
    $r$1 = $178;
    break;
   }
   $40 = ($2>>>0)<(1072483533);
   do {
    if ($40) {
     $41 = (+Math_log((+$$1)));
     $42 = -$41;
     $43 = ($2>>>0)>(1072130371);
     if ($43) {
      $$pn = 1.0;$r$0$ph = $42;
      label = 30;
     } else {
      $44 = ($2>>>0)>(1070442080);
      if ($44) {
       $45 = $$1 + -0.461632144968362245763;
       $r$0$ph7 = $42;$y$0$ph6 = $45;
       label = 31;
      } else {
       $r$0 = $42;$y$0 = $$1;
       label = 32;
      }
     }
    } else {
     $46 = ($2>>>0)>(1073460418);
     if ($46) {
      $$pn = 2.0;$r$0$ph = 0.0;
      label = 30;
     } else {
      $47 = ($2>>>0)>(1072936131);
      if ($47) {
       $48 = $$1 + -1.46163214496836224576;
       $r$0$ph7 = 0.0;$y$0$ph6 = $48;
       label = 31;
       break;
      } else {
       $49 = $$1 + -1.0;
       $r$0 = 0.0;$y$0 = $49;
       label = 32;
       break;
      }
     }
    }
   } while(0);
   if ((label|0) == 30) {
    $y$0$ph = $$pn - $$1;
    $50 = $y$0$ph * $y$0$ph;
    $51 = $50 * 2.52144565451257326939E-5;
    $52 = $51 + 2.20862790713908385557E-4;
    $53 = $50 * $52;
    $54 = $53 + 0.00119270763183362067845;
    $55 = $50 * $54;
    $56 = $55 + 0.00738555086081402883957;
    $57 = $50 * $56;
    $58 = $57 + 0.0673523010531292681823;
    $59 = $50 * $58;
    $60 = $59 + 0.0772156649015328655494;
    $61 = $50 * 4.4864094961891516015E-5;
    $62 = $61 + 1.08011567247583939954E-4;
    $63 = $50 * $62;
    $64 = $63 + 5.10069792153511336608E-4;
    $65 = $50 * $64;
    $66 = $65 + 0.00289051383673415629091;
    $67 = $50 * $66;
    $68 = $67 + 0.0205808084325167332806;
    $69 = $50 * $68;
    $70 = $69 + 0.322467033424113591611;
    $71 = $50 * $70;
    $72 = $y$0$ph * $60;
    $73 = $72 + $71;
    $74 = $y$0$ph * 0.5;
    $75 = $73 - $74;
    $76 = $r$0$ph + $75;
    $r$1 = $76;
    break;
   }
   else if ((label|0) == 31) {
    $77 = $y$0$ph6 * $y$0$ph6;
    $78 = $y$0$ph6 * $77;
    $79 = $78 * 3.15632070903625950361E-4;
    $80 = $79 + -0.00140346469989232843813;
    $81 = $78 * $80;
    $82 = $81 + 0.00610053870246291332635;
    $83 = $78 * $82;
    $84 = $83 + -0.0327885410759859649565;
    $85 = $78 * $84;
    $86 = $85 + 0.483836122723810047042;
    $87 = $78 * -3.12754168375120860518E-4;
    $88 = $87 + 8.81081882437654011382E-4;
    $89 = $78 * $88;
    $90 = $89 + -0.0036845201678113825676;
    $91 = $78 * $90;
    $92 = $91 + 0.0179706750811820387126;
    $93 = $78 * $92;
    $94 = $93 + -0.147587722994593911752;
    $95 = $78 * 3.35529192635519073543E-4;
    $96 = $95 + -5.38595305356740546715E-4;
    $97 = $78 * $96;
    $98 = $97 + 0.0022596478090061247225;
    $99 = $78 * $98;
    $100 = $99 + -0.010314224129834143745;
    $101 = $78 * $100;
    $102 = $101 + 0.0646249402391333854778;
    $103 = $77 * $86;
    $104 = $y$0$ph6 * $102;
    $105 = $94 + $104;
    $106 = $78 * $105;
    $107 = -3.63867699703950536541E-18 - $106;
    $108 = $103 - $107;
    $109 = $108 + -0.121486290535849611461;
    $110 = $r$0$ph7 + $109;
    $r$1 = $110;
    break;
   }
   else if ((label|0) == 32) {
    $111 = $y$0 * 0.0133810918536787660377;
    $112 = $111 + 0.228963728064692451092;
    $113 = $y$0 * $112;
    $114 = $113 + 0.977717527963372745603;
    $115 = $y$0 * $114;
    $116 = $115 + 1.45492250137234768737;
    $117 = $y$0 * $116;
    $118 = $117 + 0.632827064025093366517;
    $119 = $y$0 * $118;
    $120 = $119 + -0.0772156649015328655494;
    $121 = $y$0 * $120;
    $122 = $y$0 * 0.0032170924228242391181;
    $123 = $122 + 0.104222645593369134254;
    $124 = $y$0 * $123;
    $125 = $124 + 0.769285150456672783825;
    $126 = $y$0 * $125;
    $127 = $126 + 2.12848976379893395361;
    $128 = $y$0 * $127;
    $129 = $128 + 2.45597793713041134822;
    $130 = $y$0 * $129;
    $131 = $130 + 1.0;
    $132 = $y$0 * -0.5;
    $133 = $121 / $131;
    $134 = $132 + $133;
    $135 = $r$0 + $134;
    $r$1 = $135;
    break;
   }
  }
 } while(0);
 if (!($6)) {
  $$0 = $r$1;
  STACKTOP = sp;return (+$$0);
 }
 $201 = $nadj$0 - $r$1;
 $$0 = $201;
 STACKTOP = sp;return (+$$0);
}
function _lgammaf($x) {
 $x = +$x;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+___lgammaf_r($x,282960));
 STACKTOP = sp;return (+$0);
}
function ___lgammaf_r($x,$signgamp) {
 $x = +$x;
 $signgamp = $signgamp|0;
 var $$0 = 0.0, $$0$i = 0.0, $$02 = 0.0, $$1 = 0.0, $$pn = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0;
 var $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0;
 var $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0, $135 = 0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0;
 var $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0;
 var $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0, $178 = 0.0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0;
 var $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0.0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0;
 var $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0;
 var $40 = 0.0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0;
 var $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0;
 var $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0;
 var $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $nadj$0 = 0.0, $r$0 = 0.0, $r$0$ph = 0.0, $r$0$ph7 = 0.0, $r$1 = 0.0, $t$0 = 0.0, $y$0 = 0.0, $y$0$ph = 0.0, $y$0$ph6 = 0.0, $z$0 = 0.0, $z$1 = 0.0, $z$2 = 0.0, $z$3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
 HEAP32[$signgamp>>2] = 1;
 $1 = $0 & 2147483647;
 $2 = ($1>>>0)>(2139095039);
 if ($2) {
  $3 = $x * $x;
  $$0 = $3;
  STACKTOP = sp;return (+$$0);
 }
 $4 = ($1>>>0)<(889192448);
 $5 = ($0|0)<(0);
 if ($4) {
  if ($5) {
   HEAP32[$signgamp>>2] = -1;
   $6 = -$x;
   $$02 = $6;
  } else {
   $$02 = $x;
  }
  $7 = (+Math_log((+$$02)));
  $8 = -$7;
  $$0 = $8;
  STACKTOP = sp;return (+$$0);
 }
 if ($5) {
  $9 = -$x;
  $10 = $x * -0.5;
  $11 = (+Math_floor((+$10)));
  $12 = $10 - $11;
  $13 = $12 * 2.0;
  $14 = $13 * 4.0;
  $15 = (~~(($14)));
  $16 = (($15) + 1)|0;
  $17 = (($16|0) / 2)&-1;
  $18 = (+($17|0));
  $19 = $18 * 0.5;
  $20 = $13 - $19;
  $21 = $20;
  $22 = $21 * 3.141592653589793116;
  if ((($17|0) == 3)) {
   $27 = (+___cosdf($22));
   $28 = -$27;
   $$0$i = $28;
  } else if ((($17|0) == 1)) {
   $24 = (+___cosdf($22));
   $$0$i = $24;
  } else if ((($17|0) == 2)) {
   $25 = -$22;
   $26 = (+___sindf($25));
   $$0$i = $26;
  } else {
   $23 = (+___sindf($22));
   $$0$i = $23;
  }
  $29 = $$0$i == 0.0;
  if ($29) {
   $30 = $x - $x;
   $31 = 1.0 / $30;
   $$0 = $31;
   STACKTOP = sp;return (+$$0);
  }
  $32 = $$0$i > 0.0;
  if ($32) {
   HEAP32[$signgamp>>2] = -1;
   $t$0 = $$0$i;
  } else {
   $33 = -$$0$i;
   $t$0 = $33;
  }
  $34 = $t$0 * $9;
  $35 = 3.14159274101257324219 / $34;
  $36 = (+Math_log((+$35)));
  $$1 = $9;$nadj$0 = $36;
 } else {
  $$1 = $x;$nadj$0 = 0.0;
 }
 L29: do {
  if ((($1|0) == 1065353216) | (($1|0) == 1073741824)) {
   $r$1 = 0.0;
  } else {
   $37 = ($1>>>0)<(1073741824);
   if (!($37)) {
    $134 = ($1>>>0)<(1090519040);
    if (!($134)) {
     $177 = ($1>>>0)<(1551892480);
     $178 = (+Math_log((+$$1)));
     if ($177) {
      $179 = 1.0 / $$1;
      $180 = $179 * $179;
      $181 = $180 * -0.00163092929869890213013;
      $182 = $181 + 8.36339895613491535186E-4;
      $183 = $180 * $182;
      $184 = $183 + -5.95187535509467124939E-4;
      $185 = $180 * $184;
      $186 = $185 + 7.93650571722537279129E-4;
      $187 = $180 * $186;
      $188 = $187 + -0.00277777784503996372223;
      $189 = $180 * $188;
      $190 = $189 + 0.0833333358168601989746;
      $191 = $179 * $190;
      $192 = $191 + 0.418938547372817993164;
      $193 = $$1 + -0.5;
      $194 = $178 + -1.0;
      $195 = $193 * $194;
      $196 = $195 + $192;
      $r$1 = $196;
      break;
     } else {
      $197 = $178 + -1.0;
      $198 = $$1 * $197;
      $r$1 = $198;
      break;
     }
    }
    $135 = (~~(($$1)));
    $136 = (+($135|0));
    $137 = $$1 - $136;
    $138 = $137 * 3.19475329888518899679E-5;
    $139 = $138 + 0.00184028455987572669983;
    $140 = $137 * $139;
    $141 = $140 + 0.0266422703862190246582;
    $142 = $137 * $141;
    $143 = $142 + 0.146350473165512084961;
    $144 = $137 * $143;
    $145 = $144 + 0.325778782367706298828;
    $146 = $137 * $145;
    $147 = $146 + 0.214982420206069946289;
    $148 = $137 * $147;
    $149 = $148 + -0.0772156640887260437012;
    $150 = $137 * $149;
    $151 = $137 * 7.32668422642746008932E-6;
    $152 = $151 + 7.77942477725446224212E-4;
    $153 = $137 * $152;
    $154 = $153 + 0.0186459198594093322754;
    $155 = $137 * $154;
    $156 = $155 + 0.171933859586715698242;
    $157 = $137 * $156;
    $158 = $157 + 0.721935570240020751953;
    $159 = $137 * $158;
    $160 = $159 + 1.39200532436370849609;
    $161 = $137 * $160;
    $162 = $161 + 1.0;
    $163 = $137 * 0.5;
    $164 = $150 / $162;
    $165 = $163 + $164;
    switch ($135|0) {
    case 3:  {
     $z$3 = 1.0;
     break;
    }
    case 4:  {
     $z$2 = 1.0;
     label = 37;
     break;
    }
    case 7:  {
     $166 = $137 + 6.0;
     $z$0 = $166;
     label = 35;
     break;
    }
    case 6:  {
     $z$0 = 1.0;
     label = 35;
     break;
    }
    case 5:  {
     $z$1 = 1.0;
     label = 36;
     break;
    }
    default: {
     $r$1 = $165;
     break L29;
    }
    }
    if ((label|0) == 35) {
     $167 = $137 + 5.0;
     $168 = $167 * $z$0;
     $z$1 = $168;
     label = 36;
    }
    if ((label|0) == 36) {
     $169 = $137 + 4.0;
     $170 = $169 * $z$1;
     $z$2 = $170;
     label = 37;
    }
    if ((label|0) == 37) {
     $171 = $137 + 3.0;
     $172 = $171 * $z$2;
     $z$3 = $172;
    }
    $173 = $137 + 2.0;
    $174 = $173 * $z$3;
    $175 = (+Math_log((+$174)));
    $176 = $165 + $175;
    $r$1 = $176;
    break;
   }
   $38 = ($1>>>0)<(1063675495);
   do {
    if ($38) {
     $39 = (+Math_log((+$$1)));
     $40 = -$39;
     $41 = ($1>>>0)>(1060850207);
     if ($41) {
      $$pn = 1.0;$r$0$ph = $40;
      label = 29;
     } else {
      $42 = ($1>>>0)>(1047343879);
      if ($42) {
       $43 = $$1 + -0.461632132530212402344;
       $r$0$ph7 = $40;$y$0$ph6 = $43;
       label = 30;
      } else {
       $r$0 = $40;$y$0 = $$1;
       label = 31;
      }
     }
    } else {
     $44 = ($1>>>0)>(1071490583);
     if ($44) {
      $$pn = 2.0;$r$0$ph = 0.0;
      label = 29;
     } else {
      $45 = ($1>>>0)>(1067296287);
      if ($45) {
       $46 = $$1 + -1.46163213253021240234;
       $r$0$ph7 = 0.0;$y$0$ph6 = $46;
       label = 30;
       break;
      } else {
       $47 = $$1 + -1.0;
       $r$0 = 0.0;$y$0 = $47;
       label = 31;
       break;
      }
     }
    }
   } while(0);
   if ((label|0) == 29) {
    $y$0$ph = $$pn - $$1;
    $48 = $y$0$ph * $y$0$ph;
    $49 = $48 * 2.52144564001355320215E-5;
    $50 = $49 + 2.20862784772180020809E-4;
    $51 = $48 * $50;
    $52 = $51 + 0.00119270768482238054276;
    $53 = $48 * $52;
    $54 = $53 + 0.00738555099815130233765;
    $55 = $48 * $54;
    $56 = $55 + 0.0673523023724555969238;
    $57 = $48 * $56;
    $58 = $57 + 0.0772156640887260437012;
    $59 = $48 * 4.48640967078972607851E-5;
    $60 = $59 + 1.08011568954680114985E-4;
    $61 = $48 * $60;
    $62 = $61 + 5.10069774463772773743E-4;
    $63 = $48 * $62;
    $64 = $63 + 0.00289051374420523643494;
    $65 = $48 * $64;
    $66 = $65 + 0.0205808077007532119751;
    $67 = $48 * $66;
    $68 = $67 + 0.322467029094696044922;
    $69 = $48 * $68;
    $70 = $y$0$ph * $58;
    $71 = $70 + $69;
    $72 = $y$0$ph * 0.5;
    $73 = $71 - $72;
    $74 = $r$0$ph + $73;
    $r$1 = $74;
    break;
   }
   else if ((label|0) == 30) {
    $75 = $y$0$ph6 * $y$0$ph6;
    $76 = $y$0$ph6 * $75;
    $77 = $76 * 3.15632059937343001366E-4;
    $78 = $77 + -0.00140346470288932323456;
    $79 = $76 * $78;
    $80 = $79 + 0.00610053865239024162292;
    $81 = $76 * $80;
    $82 = $81 + -0.0327885411679744720459;
    $83 = $76 * $82;
    $84 = $83 + 0.483836114406585693359;
    $85 = $76 * -3.12754156766459345818E-4;
    $86 = $85 + 8.81081854458898305893E-4;
    $87 = $76 * $86;
    $88 = $87 + -0.00368452025577425956726;
    $89 = $76 * $88;
    $90 = $89 + 0.0179706756025552749634;
    $91 = $76 * $90;
    $92 = $91 + -0.147587716579437255859;
    $93 = $76 * 3.35529184667393565178E-4;
    $94 = $93 + -5.38595311809331178665E-4;
    $95 = $76 * $94;
    $96 = $95 + 0.0022596477065235376358;
    $97 = $76 * $96;
    $98 = $97 + -0.0103142242878675460815;
    $99 = $76 * $98;
    $100 = $99 + 0.0646249428391456604004;
    $101 = $75 * $84;
    $102 = $y$0$ph6 * $100;
    $103 = $92 + $102;
    $104 = $76 * $103;
    $105 = 6.69710065182016478502E-9 - $104;
    $106 = $101 - $105;
    $107 = $106 + -0.121486283838748931885;
    $108 = $r$0$ph7 + $107;
    $r$1 = $108;
    break;
   }
   else if ((label|0) == 31) {
    $109 = $y$0 * 0.013381091877818107605;
    $110 = $109 + 0.228963732719421386719;
    $111 = $y$0 * $110;
    $112 = $111 + 0.977717518806457519531;
    $113 = $y$0 * $112;
    $114 = $113 + 1.45492255687713623047;
    $115 = $y$0 * $114;
    $116 = $115 + 0.632827043533325195313;
    $117 = $y$0 * $116;
    $118 = $117 + -0.0772156640887260437012;
    $119 = $y$0 * $118;
    $120 = $y$0 * 0.00321709248237311840057;
    $121 = $120 + 0.10422264784574508667;
    $122 = $y$0 * $121;
    $123 = $122 + 0.769285142421722412109;
    $124 = $y$0 * $123;
    $125 = $124 + 2.12848973274230957031;
    $126 = $y$0 * $125;
    $127 = $126 + 2.45597791671752929688;
    $128 = $y$0 * $127;
    $129 = $128 + 1.0;
    $130 = $y$0 * -0.5;
    $131 = $119 / $129;
    $132 = $130 + $131;
    $133 = $r$0 + $132;
    $r$1 = $133;
    break;
   }
  }
 } while(0);
 if (!($5)) {
  $$0 = $r$1;
  STACKTOP = sp;return (+$$0);
 }
 $199 = $nadj$0 - $r$1;
 $$0 = $199;
 STACKTOP = sp;return (+$$0);
}
function ___lgammal_r($x,$sg) {
 $x = +$x;
 $sg = $sg|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+___lgamma_r($x,$sg));
 STACKTOP = sp;return (+$0);
}
function _lgammal($x) {
 $x = +$x;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+___lgamma_r($x,282960));
 STACKTOP = sp;return (+$0);
}
function _scalbnf($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0;
 var $9 = 0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)>(127);
 if ($0) {
  $1 = $x * 1.70141183460469231732E+38;
  $2 = (($n) + -127)|0;
  $3 = ($2|0)>(127);
  if ($3) {
   $4 = $1 * 1.70141183460469231732E+38;
   $5 = (($n) + -254)|0;
   $6 = ($5|0)>(127);
   $$ = $6 ? 127 : $5;
   $$0 = $$;$y$0 = $4;
  } else {
   $$0 = $2;$y$0 = $1;
  }
 } else {
  $7 = ($n|0)<(-126);
  if ($7) {
   $8 = $x * 1.17549435082228750797E-38;
   $9 = (($n) + 126)|0;
   $10 = ($9|0)<(-126);
   if ($10) {
    $11 = $8 * 1.17549435082228750797E-38;
    $12 = (($n) + 252)|0;
    $13 = ($12|0)<(-126);
    $$1 = $13 ? -126 : $12;
    $$0 = $$1;$y$0 = $11;
   } else {
    $$0 = $9;$y$0 = $8;
   }
  } else {
   $$0 = $n;$y$0 = $x;
  }
 }
 $14 = $$0 << 23;
 $15 = (($14) + 1065353216)|0;
 $16 = (HEAP32[tempDoublePtr>>2]=$15,+HEAPF32[tempDoublePtr>>2]);
 $17 = $y$0 * $16;
 STACKTOP = sp;return (+$17);
}
function _tgamma($x) {
 $x = +$x;
 var $$ = 0.0, $$0 = 0.0, $$0$i = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0;
 var $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0;
 var $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0.0, $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0;
 var $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0;
 var $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0;
 var $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $__x = 0, $den$2$i = 0.0, $dy$0 = 0.0;
 var $dy$1 = 0.0, $num$2$i = 0.0, $r$0 = 0.0, $z$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__x = sp;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = $1 & 2147483647;
 $3 = (_bitshift64Lshr(($0|0),($1|0),63)|0);
 $4 = tempRet0;
 $5 = ($2>>>0)>(2146435071);
 if ($5) {
  $6 = $x + inf;
  $$0 = $6;
  STACKTOP = sp;return (+$$0);
 }
 $7 = ($2>>>0)<(1016070144);
 if ($7) {
  $8 = 1.0 / $x;
  $$0 = $8;
  STACKTOP = sp;return (+$$0);
 }
 $9 = (+Math_floor((+$x)));
 $10 = $9 == $x;
 if ($10) {
  $11 = ($3|0)==(0);
  if (!($11)) {
   $$0 = nan;
   STACKTOP = sp;return (+$$0);
  }
  $12 = !($x <= 23.0);
  if (!($12)) {
   $13 = (~~(($x)));
   $14 = (($13) + -1)|0;
   $15 = (282968 + ($14<<3)|0);
   $16 = +HEAPF64[$15>>3];
   $$0 = $16;
   STACKTOP = sp;return (+$$0);
  }
 }
 $17 = ($2>>>0)>(1080492031);
 $18 = ($3|0)!=(0);
 if ($17) {
  if ($18) {
   $19 = 1.17549435082228750797E-38 / $x;
   $20 = $19;
   HEAPF32[$__x>>2] = $20;
   $21 = $9 * 0.5;
   $22 = $x * 0.5;
   $23 = (+Math_floor((+$22)));
   $24 = $21 == $23;
   $$ = $24 ? 0.0 : -0.0;
   $$0 = $$;
   STACKTOP = sp;return (+$$0);
  } else {
   $25 = $x * 8.98846567431157953864E+307;
   $$0 = $25;
   STACKTOP = sp;return (+$$0);
  }
 }
 if ($18) {
  $26 = -$x;
  $28 = $26;
 } else {
  $28 = $x;
 }
 $27 = $28 + 5.52468004077672958374;
 $29 = $28 > 5.52468004077672958374;
 if ($29) {
  $30 = $27 - $28;
  $31 = $30 + -5.52468004077672958374;
  $dy$0 = $31;
 } else {
  $32 = $27 + -5.52468004077672958374;
  $33 = $32 - $28;
  $dy$0 = $33;
 }
 $34 = $28 + -0.5;
 $35 = $28 < 8.0;
 if ($35) {
  $87 = $28 * 0.0;
  $88 = $87 + 2.50662827463100024161;
  $89 = $87 + 1.0;
  $90 = $28 * $88;
  $91 = $90 + 210.824277751579359119;
  $92 = $28 * $89;
  $93 = $92 + 66.0;
  $94 = $28 * $91;
  $95 = $94 + 8071.67200236581629724;
  $96 = $28 * $93;
  $97 = $96 + 1925.0;
  $98 = $28 * $95;
  $99 = $98 + 186056.26539522348321;
  $100 = $28 * $97;
  $101 = $100 + 32670.0;
  $102 = $28 * $99;
  $103 = $102 + 2876370.62893537245691;
  $104 = $28 * $101;
  $105 = $104 + 357423.0;
  $106 = $28 * $103;
  $107 = $106 + 31426415.5854001939297;
  $108 = $28 * $105;
  $109 = $108 + 2637558.0;
  $110 = $28 * $107;
  $111 = $110 + 248874557.862054169178;
  $112 = $28 * $109;
  $113 = $112 + 13339535.0;
  $114 = $28 * $111;
  $115 = $114 + 1439720407.31172156334;
  $116 = $28 * $113;
  $117 = $116 + 45995730.0;
  $118 = $28 * $115;
  $119 = $118 + 6039542586.35202789307;
  $120 = $28 * $117;
  $121 = $120 + 105258076.0;
  $122 = $28 * $119;
  $123 = $122 + 17921034426.0372085571;
  $124 = $28 * $121;
  $125 = $124 + 150917976.0;
  $126 = $28 * $123;
  $127 = $126 + 35711959237.3556671143;
  $128 = $28 * $125;
  $129 = $128 + 120543840.0;
  $130 = $28 * $127;
  $131 = $130 + 42919803642.6491012573;
  $132 = $28 * $129;
  $133 = $132 + 39916800.0;
  $134 = $28 * $131;
  $135 = $134 + 23531376880.4107589722;
  $136 = $28 * $133;
  $137 = $136 + 0.0;
  $den$2$i = $137;$num$2$i = $135;
 } else {
  $36 = 0.0 / $28;
  $37 = $36 + 23531376880.4107589722;
  $38 = $36 + 0.0;
  $39 = $37 / $28;
  $40 = $39 + 42919803642.6491012573;
  $41 = $38 / $28;
  $42 = $41 + 39916800.0;
  $43 = $40 / $28;
  $44 = $43 + 35711959237.3556671143;
  $45 = $42 / $28;
  $46 = $45 + 120543840.0;
  $47 = $44 / $28;
  $48 = $47 + 17921034426.0372085571;
  $49 = $46 / $28;
  $50 = $49 + 150917976.0;
  $51 = $48 / $28;
  $52 = $51 + 6039542586.35202789307;
  $53 = $50 / $28;
  $54 = $53 + 105258076.0;
  $55 = $52 / $28;
  $56 = $55 + 1439720407.31172156334;
  $57 = $54 / $28;
  $58 = $57 + 45995730.0;
  $59 = $56 / $28;
  $60 = $59 + 248874557.862054169178;
  $61 = $58 / $28;
  $62 = $61 + 13339535.0;
  $63 = $60 / $28;
  $64 = $63 + 31426415.5854001939297;
  $65 = $62 / $28;
  $66 = $65 + 2637558.0;
  $67 = $64 / $28;
  $68 = $67 + 2876370.62893537245691;
  $69 = $66 / $28;
  $70 = $69 + 357423.0;
  $71 = $68 / $28;
  $72 = $71 + 186056.26539522348321;
  $73 = $70 / $28;
  $74 = $73 + 32670.0;
  $75 = $72 / $28;
  $76 = $75 + 8071.67200236581629724;
  $77 = $74 / $28;
  $78 = $77 + 1925.0;
  $79 = $76 / $28;
  $80 = $79 + 210.824277751579359119;
  $81 = $78 / $28;
  $82 = $81 + 66.0;
  $83 = $80 / $28;
  $84 = $83 + 2.50662827463100024161;
  $85 = $82 / $28;
  $86 = $85 + 1.0;
  $den$2$i = $86;$num$2$i = $84;
 }
 $138 = $num$2$i / $den$2$i;
 $139 = -$27;
 $140 = (+Math_exp((+$139)));
 $141 = $138 * $140;
 $142 = $x < 0.0;
 if ($142) {
  $143 = $28 * 0.5;
  $144 = (+Math_floor((+$143)));
  $145 = $143 - $144;
  $146 = $145 * 2.0;
  $147 = $146 * 4.0;
  $148 = (~~(($147)));
  $149 = (($148) + 1)|0;
  $150 = (($149|0) / 2)&-1;
  $151 = (+($150|0));
  $152 = $151 * 0.5;
  $153 = $146 - $152;
  $154 = $153 * 3.141592653589793116;
  if ((($150|0) == 3)) {
   $159 = (+___cos($154,0.0));
   $160 = -$159;
   $$0$i = $160;
  } else if ((($150|0) == 1)) {
   $156 = (+___cos($154,0.0));
   $$0$i = $156;
  } else if ((($150|0) == 2)) {
   $157 = -$154;
   $158 = (+___sin($157,0.0,0));
   $$0$i = $158;
  } else {
   $155 = (+___sin($154,0.0,0));
   $$0$i = $155;
  }
  $161 = $28 * $$0$i;
  $162 = $141 * $161;
  $163 = -3.141592653589793116 / $162;
  $164 = -$dy$0;
  $165 = -$34;
  $dy$1 = $164;$r$0 = $163;$z$0 = $165;
 } else {
  $dy$1 = $dy$0;$r$0 = $141;$z$0 = $34;
 }
 $166 = $dy$1 * 6.02468004077672958374;
 $167 = $166 * $r$0;
 $168 = $167 / $27;
 $169 = $r$0 + $168;
 $170 = $z$0 * 0.5;
 $171 = (+Math_pow((+$27),(+$170)));
 $172 = $169 * $171;
 $173 = $171 * $172;
 $$0 = $173;
 STACKTOP = sp;return (+$$0);
}
function _tgammaf($x) {
 $x = +$x;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $x;
 $1 = (+_tgamma($0));
 $2 = $1;
 STACKTOP = sp;return (+$2);
}
function _tgammal($x) {
 $x = +$x;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_tgamma($x));
 STACKTOP = sp;return (+$0);
}
function _ffs($i) {
 $i = $i|0;
 var $$02$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $nTrailingZeros$03$i = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($i|0)==(0);
 if ($0) {
  $7 = 0;
 } else {
  $1 = $i & 1;
  $2 = ($1|0)==(0);
  if ($2) {
   $$02$i = $i;$nTrailingZeros$03$i = 0;
   while(1) {
    $3 = (($nTrailingZeros$03$i) + 1)|0;
    $4 = $$02$i >>> 1;
    $5 = $4 & 1;
    $6 = ($5|0)==(0);
    if ($6) {
     $$02$i = $4;$nTrailingZeros$03$i = $3;
    } else {
     break;
    }
   }
   $phitmp = (($nTrailingZeros$03$i) + 2)|0;
   $7 = $phitmp;
  } else {
   $7 = 1;
  }
 }
 STACKTOP = sp;return ($7|0);
}
function _getopt($argc,$argv,$optstring) {
 $argc = $argc|0;
 $argv = $argv|0;
 $optstring = $optstring|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $c = 0, $d = 0, $i$0$lcssa = 0, $i$04 = 0, $k$0 = 0, $or$cond = 0;
 var $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $c = sp + 4|0;
 $d = sp;
 $0 = HEAP32[283152>>2]|0;
 $1 = ($0|0)==(0);
 $2 = HEAP32[283168>>2]|0;
 $3 = ($2|0)!=(0);
 $or$cond = $1 | $3;
 if ($or$cond) {
  HEAP32[283168>>2] = 0;
  HEAP32[283176>>2] = 0;
  HEAP32[283152>>2] = 1;
  $5 = 1;
 } else {
  $5 = $0;
 }
 $4 = ($5|0)<($argc|0);
 if (!($4)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = (($argv) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = HEAP8[$7>>0]|0;
 $10 = ($9<<24>>24)==(45);
 if (!($10)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = (($7) + 1|0);
 $12 = HEAP8[$11>>0]|0;
 if ((($12<<24>>24) == 45)) {
  label = 7;
 } else if ((($12<<24>>24) == 0)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 if ((label|0) == 7) {
  $13 = (($7) + 2|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = ($14<<24>>24)==(0);
  if ($15) {
   $16 = (($5) + 1)|0;
   HEAP32[283152>>2] = $16;
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $17 = HEAP32[283176>>2]|0;
 $18 = ($17|0)==(0);
 if ($18) {
  HEAP32[283176>>2] = 1;
  $20 = 1;
 } else {
  $20 = $17;
 }
 $19 = (($7) + ($20)|0);
 $21 = (_mbtowc($c,$19,4)|0);
 $22 = ($21|0)<(0);
 if ($22) {
  HEAP32[$c>>2] = 65533;
  $28 = 65533;$k$0 = 1;
 } else {
  $$pre = HEAP32[$c>>2]|0;
  $28 = $$pre;$k$0 = $21;
 }
 $23 = HEAP32[283152>>2]|0;
 $24 = (($argv) + ($23<<2)|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = HEAP32[283176>>2]|0;
 $27 = (($25) + ($26)|0);
 HEAP32[283184>>2] = $28;
 $29 = (($26) + ($k$0))|0;
 HEAP32[283176>>2] = $29;
 $30 = (($25) + ($29)|0);
 $31 = HEAP8[$30>>0]|0;
 $32 = ($31<<24>>24)==(0);
 if ($32) {
  $33 = (($23) + 1)|0;
  HEAP32[283152>>2] = $33;
  HEAP32[283176>>2] = 0;
 }
 $34 = (_mbtowc($d,$optstring,4)|0);
 $35 = ($34|0)==(0);
 L30: do {
  if ($35) {
   $i$0$lcssa = 0;
  } else {
   $40 = $34;$i$04 = 0;
   while(1) {
    $36 = HEAP32[$d>>2]|0;
    $37 = HEAP32[$c>>2]|0;
    $38 = ($36|0)==($37|0);
    if ($38) {
     $i$0$lcssa = $i$04;
     break L30;
    }
    $39 = ($40|0)<(1);
    $41 = $39 ? 1 : $40;
    $42 = (($41) + ($i$04))|0;
    $43 = (($optstring) + ($42)|0);
    $44 = (_mbtowc($d,$43,4)|0);
    $45 = ($44|0)==(0);
    if ($45) {
     $i$0$lcssa = $42;
     break;
    } else {
     $40 = $44;$i$04 = $42;
    }
   }
  }
 } while(0);
 $46 = HEAP32[$d>>2]|0;
 $47 = HEAP32[$c>>2]|0;
 $48 = ($46|0)==($47|0);
 if (!($48)) {
  $49 = HEAP8[$optstring>>0]|0;
  $50 = ($49<<24>>24)!=(58);
  $51 = HEAP32[283160>>2]|0;
  $52 = ($51|0)!=(0);
  $or$cond3 = $50 & $52;
  if (!($or$cond3)) {
   $$0 = 63;
   STACKTOP = sp;return ($$0|0);
  }
  $53 = HEAP32[$argv>>2]|0;
  $54 = (_strlen(($53|0))|0);
  (_write(2,($53|0),($54|0))|0);
  (_write(2,(283192|0),18)|0);
  (_write(2,($27|0),($k$0|0))|0);
  (_write(2,(283216|0),1)|0);
  $$0 = 63;
  STACKTOP = sp;return ($$0|0);
 }
 $55 = (($i$0$lcssa) + 1)|0;
 $56 = (($optstring) + ($55)|0);
 $57 = HEAP8[$56>>0]|0;
 $58 = ($57<<24>>24)==(58);
 if (!($58)) {
  $$0 = $46;
  STACKTOP = sp;return ($$0|0);
 }
 $59 = HEAP32[283152>>2]|0;
 $60 = ($59|0)<($argc|0);
 if ($60) {
  $67 = (($59) + 1)|0;
  HEAP32[283152>>2] = $67;
  $68 = (($argv) + ($59<<2)|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = HEAP32[283176>>2]|0;
  $71 = (($69) + ($70)|0);
  HEAP32[283256>>2] = $71;
  HEAP32[283176>>2] = 0;
  $$0 = $46;
  STACKTOP = sp;return ($$0|0);
 }
 $61 = HEAP8[$optstring>>0]|0;
 $62 = ($61<<24>>24)==(58);
 if ($62) {
  $$0 = 58;
  STACKTOP = sp;return ($$0|0);
 }
 $63 = HEAP32[283160>>2]|0;
 $64 = ($63|0)==(0);
 if ($64) {
  $$0 = 63;
  STACKTOP = sp;return ($$0|0);
 }
 $65 = HEAP32[$argv>>2]|0;
 $66 = (_strlen(($65|0))|0);
 (_write(2,($65|0),($66|0))|0);
 (_write(2,(283224|0),31)|0);
 (_write(2,($27|0),($k$0|0))|0);
 (_write(2,(283216|0),1)|0);
 $$0 = 63;
 STACKTOP = sp;return ($$0|0);
}
function _getopt_long($argc,$argv,$optstring,$longopts,$idx) {
 $argc = $argc|0;
 $argv = $argv|0;
 $optstring = $optstring|0;
 $longopts = $longopts|0;
 $idx = $idx|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___getopt_long($argc,$argv,$optstring,$longopts,$idx,0)|0);
 STACKTOP = sp;return ($0|0);
}
function ___getopt_long($argc,$argv,$optstring,$longopts,$idx,$longonly) {
 $argc = $argc|0;
 $argv = $argv|0;
 $optstring = $optstring|0;
 $longopts = $longopts|0;
 $idx = $idx|0;
 $longonly = $longonly|0;
 var $$ = 0, $$0 = 0, $$phi$trans$insert = 0, $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $i$018 = 0, $name$05 = 0, $opt$04 = 0, $opt$06 = 0, $or$cond = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[283152>>2]|0;
 $1 = ($0|0)==(0);
 $2 = HEAP32[283168>>2]|0;
 $3 = ($2|0)!=(0);
 $or$cond = $1 | $3;
 if ($or$cond) {
  HEAP32[283168>>2] = 0;
  HEAP32[283176>>2] = 0;
  HEAP32[283152>>2] = 1;
  $5 = 1;
 } else {
  $5 = $0;
 }
 $4 = ($5|0)<($argc|0);
 if (!($4)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = (($argv) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = HEAP8[$7>>0]|0;
 $10 = ($9<<24>>24)==(45);
 if (!($10)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = ($longonly|0)==(0);
 $$phi$trans$insert = (($7) + 1|0);
 $$pre = HEAP8[$$phi$trans$insert>>0]|0;
 if ($11) {
  $phitmp = ($$pre<<24>>24)==(45);
  if ($phitmp) {
   $13 = (($7) + 2|0);
   $14 = HEAP8[$13>>0]|0;
   $15 = ($14<<24>>24)==(0);
   if (!($15)) {
    $20 = 45;
    label = 10;
   }
  }
 } else {
  $12 = ($$pre<<24>>24)==(0);
  if (!($12)) {
   $20 = $$pre;
   label = 10;
  }
 }
 if ((label|0) == 10) {
  $16 = HEAP32[$longopts>>2]|0;
  $17 = ($16|0)==(0|0);
  $18 = (($7) + 1|0);
  $19 = ($20<<24>>24)==(45);
  L19: do {
   if (!($17)) {
    $23 = $16;$i$018 = 0;
    while(1) {
     $21 = (($7) + 2|0);
     $$ = $19 ? $21 : $18;
     $22 = HEAP8[$23>>0]|0;
     $24 = ($22<<24>>24)==(0);
     L22: do {
      if ($24) {
       $opt$04 = $$;
       label = 15;
      } else {
       $$pr = $22;$name$05 = $23;$opt$06 = $$;
       while(1) {
        $25 = HEAP8[$opt$06>>0]|0;
        $26 = ($$pr<<24>>24)==($25<<24>>24);
        if (!($26)) {
         break;
        }
        $27 = (($name$05) + 1|0);
        $28 = (($opt$06) + 1|0);
        $29 = HEAP8[$27>>0]|0;
        $30 = ($29<<24>>24)==(0);
        if ($30) {
         $opt$04 = $28;
         label = 15;
         break L22;
        } else {
         $$pr = $29;$name$05 = $27;$opt$06 = $28;
        }
       }
       $31 = ($$pr<<24>>24)==(0);
       if ($31) {
        $opt$04 = $opt$06;
        label = 15;
       }
      }
     } while(0);
     if ((label|0) == 15) {
      label = 0;
      $32 = HEAP8[$opt$04>>0]|0;
      if ((($32<<24>>24) == 61) | (($32<<24>>24) == 0)) {
       $33 = ($32<<24>>24)==(61);
       $34 = ((($longopts) + ($i$018<<4)|0) + 4|0);
       $35 = HEAP32[$34>>2]|0;
       if (!($33)) {
        label = 19;
        break;
       }
       $36 = ($35|0)==(0);
       if (!($36)) {
        label = 18;
        break;
       }
      }
     }
     $51 = (($i$018) + 1)|0;
     $52 = (($longopts) + ($51<<4)|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($53|0)==(0|0);
     if ($54) {
      break L19;
     } else {
      $23 = $53;$i$018 = $51;
     }
    }
    do {
     if ((label|0) == 18) {
      $37 = (($opt$04) + 1|0);
      HEAP32[283256>>2] = $37;
      $44 = $5;
     }
     else if ((label|0) == 19) {
      $38 = ($35|0)==(1);
      if (!($38)) {
       HEAP32[283256>>2] = 0;
       $44 = $5;
       break;
      }
      $39 = (($5) + 1)|0;
      HEAP32[283152>>2] = $39;
      $40 = (($argv) + ($39<<2)|0);
      $41 = HEAP32[$40>>2]|0;
      HEAP32[283256>>2] = $41;
      $42 = ($41|0)==(0|0);
      if ($42) {
       $$0 = 58;
       STACKTOP = sp;return ($$0|0);
      } else {
       $44 = $39;
      }
     }
    } while(0);
    $43 = (($44) + 1)|0;
    HEAP32[283152>>2] = $43;
    $45 = ($idx|0)==(0|0);
    if (!($45)) {
     HEAP32[$idx>>2] = $i$018;
    }
    $46 = ((($longopts) + ($i$018<<4)|0) + 8|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = ($47|0)==(0|0);
    $49 = ((($longopts) + ($i$018<<4)|0) + 12|0);
    $50 = HEAP32[$49>>2]|0;
    if ($48) {
     $$0 = $50;
     STACKTOP = sp;return ($$0|0);
    }
    HEAP32[$47>>2] = $50;
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  } while(0);
  if ($19) {
   $55 = (($5) + 1)|0;
   HEAP32[283152>>2] = $55;
   $$0 = 63;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $56 = (_getopt($argc,$argv,$optstring)|0);
 $$0 = $56;
 STACKTOP = sp;return ($$0|0);
}
function _getopt_long_only($argc,$argv,$optstring,$longopts,$idx) {
 $argc = $argc|0;
 $argv = $argv|0;
 $optstring = $optstring|0;
 $longopts = $longopts|0;
 $idx = $idx|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___getopt_long($argc,$argv,$optstring,$longopts,$idx,1)|0);
 STACKTOP = sp;return ($0|0);
}
function _btowc($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c>>>0)<(128);
 $1 = $0 ? $c : -1;
 STACKTOP = sp;return ($1|0);
}
function _mblen($s,$n) {
 $s = $s|0;
 $n = $n|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_mbtowc(0,$s,$n)|0);
 STACKTOP = sp;return ($0|0);
}
function _mbrlen($s,$n,$st) {
 $s = $s|0;
 $n = $n|0;
 $st = $st|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($st|0)!=(0|0);
 $1 = $0 ? $st : 283472;
 $2 = (_mbrtowc(0,$s,$n,$1)|0);
 STACKTOP = sp;return ($2|0);
}
function _mbrtowc($wc,$src,$n,$st) {
 $wc = $wc|0;
 $src = $src|0;
 $n = $n|0;
 $st = $st|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$0 = 0, $c$1 = 0, $c$2 = 0, $s$0 = 0, $s$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $wc;
 $1 = ($st|0)==(0|0);
 $$01 = $1 ? 283480 : $st;
 $2 = HEAP32[$$01>>2]|0;
 $3 = ($src|0)==(0|0);
 L1: do {
  if ($3) {
   $4 = ($2|0)==(0);
   if ($4) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $5 = ($wc|0)==(0|0);
   if ($5) {
    HEAP32[$0>>2] = $0;
    $11 = $0;
   } else {
    $11 = $wc;
   }
   $6 = ($n|0)==(0);
   if ($6) {
    $$0 = -2;
    STACKTOP = sp;return ($$0|0);
   }
   $7 = ($2|0)==(0);
   do {
    if ($7) {
     $8 = HEAP8[$src>>0]|0;
     $9 = $8&255;
     $10 = ($8<<24>>24)>(-1);
     if ($10) {
      HEAP32[$11>>2] = $9;
      $12 = ($8<<24>>24)!=(0);
      $13 = $12&1;
      $$0 = $13;
      STACKTOP = sp;return ($$0|0);
     } else {
      $14 = (($9) + -194)|0;
      $15 = ($14>>>0)>(50);
      if ($15) {
       break L1;
      }
      $16 = (($src) + 1|0);
      $17 = (283264 + ($14<<2)|0);
      $18 = HEAP32[$17>>2]|0;
      $19 = (($n) + -1)|0;
      $$02 = $19;$c$0 = $18;$s$0 = $16;
      break;
     }
    } else {
     $$02 = $n;$c$0 = $2;$s$0 = $src;
    }
   } while(0);
   $20 = ($$02|0)==(0);
   L19: do {
    if ($20) {
     $c$2 = $c$0;
    } else {
     $21 = HEAP8[$s$0>>0]|0;
     $22 = $21&255;
     $23 = $22 >>> 3;
     $24 = (($23) + -16)|0;
     $25 = $c$0 >> 26;
     $26 = (($23) + ($25))|0;
     $27 = $24 | $26;
     $28 = ($27>>>0)>(7);
     if ($28) {
      break L1;
     } else {
      $$1 = $$02;$32 = $21;$c$1 = $c$0;$s$1 = $s$0;
     }
     while(1) {
      $29 = $c$1 << 6;
      $30 = (($s$1) + 1|0);
      $31 = $32&255;
      $33 = (($31) + -128)|0;
      $34 = $33 | $29;
      $35 = (($$1) + -1)|0;
      $36 = ($34|0)<(0);
      if (!($36)) {
       break;
      }
      $38 = ($35|0)==(0);
      if ($38) {
       $c$2 = $34;
       break L19;
      }
      $39 = HEAP8[$30>>0]|0;
      $40 = $39&255;
      $41 = (($40) + -128)|0;
      $42 = ($41>>>0)>(63);
      if ($42) {
       break L1;
      } else {
       $$1 = $35;$32 = $39;$c$1 = $34;$s$1 = $30;
      }
     }
     HEAP32[$$01>>2] = 0;
     HEAP32[$11>>2] = $34;
     $37 = (($n) - ($35))|0;
     $$0 = $37;
     STACKTOP = sp;return ($$0|0);
    }
   } while(0);
   HEAP32[$$01>>2] = $c$2;
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 HEAP32[$$01>>2] = 0;
 $43 = (___errno_location()|0);
 HEAP32[$43>>2] = 84;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _mbsinit($st) {
 $st = $st|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($st|0)==(0|0);
 if ($0) {
  $4 = 1;
 } else {
  $1 = HEAP32[$st>>2]|0;
  $2 = ($1|0)==(0);
  $4 = $2;
 }
 $3 = $4&1;
 STACKTOP = sp;return ($3|0);
}
function _mbsnrtowcs($wcs,$src,$n,$wn,$st) {
 $wcs = $wcs|0;
 $src = $src|0;
 $n = $n|0;
 $wn = $wn|0;
 $st = $st|0;
 var $$026 = 0, $$04$ = 0, $$0423 = 0, $$1 = 0, $$15 = 0, $$214 = 0, $$26 = 0, $$311 = 0, $$pr$pre = 0, $$pr41 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cnt$024 = 0, $cnt$1 = 0, $cnt$212 = 0, $cnt$3 = 0, $or$cond = 0, $or$cond22 = 0, $or$cond7 = 0, $or$cond8 = 0, $or$cond810 = 0, $s = 0, $wbuf = 0, $wcs$ = 0, $wn$ = 0, $ws$018 = 0, $ws$025 = 0, $ws$1 = 0;
 var $ws$213 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040|0;
 $wbuf = sp + 8|0;
 $s = sp;
 $0 = HEAP32[$src>>2]|0;
 HEAP32[$s>>2] = $0;
 $1 = ($wcs|0)!=(0|0);
 $wn$ = $1 ? $wn : 256;
 $wcs$ = $1 ? $wcs : $wbuf;
 $2 = ($0|0)==(0|0);
 $3 = ($wn$|0)==(0);
 $or$cond22 = $2 | $3;
 L1: do {
  if ($or$cond22) {
   $$1 = $n;$$26 = $wn$;$18 = $0;$cnt$1 = 0;$ws$018 = $wcs$;
  } else {
   $$026 = $n;$$0423 = $wn$;$$pr41 = $0;$cnt$024 = 0;$ws$025 = $wcs$;
   while(1) {
    $4 = $$026 >>> 2;
    $5 = ($4>>>0)>=($$0423>>>0);
    $6 = ($$026>>>0)>(131);
    $or$cond7 = $5 | $6;
    if (!($or$cond7)) {
     $$1 = $$026;$$26 = $$0423;$18 = $$pr41;$cnt$1 = $cnt$024;$ws$018 = $ws$025;
     break L1;
    }
    $$04$ = $5 ? $$0423 : $4;
    $7 = (($$026) - ($$04$))|0;
    $8 = (_mbsrtowcs($ws$025,$s,$$04$,$st)|0);
    $9 = ($8|0)==(-1);
    if ($9) {
     break;
    }
    $10 = ($ws$025|0)==($wbuf|0);
    if ($10) {
     $$15 = $$0423;$ws$1 = $wbuf;
    } else {
     $11 = (($ws$025) + ($8<<2)|0);
     $12 = (($$0423) - ($8))|0;
     $$15 = $12;$ws$1 = $11;
    }
    $13 = (($8) + ($cnt$024))|0;
    $14 = HEAP32[$s>>2]|0;
    $15 = ($14|0)==(0|0);
    $16 = ($$15|0)==(0);
    $or$cond = $15 | $16;
    if ($or$cond) {
     $$1 = $7;$$26 = $$15;$18 = $14;$cnt$1 = $13;$ws$018 = $ws$1;
     break L1;
    } else {
     $$026 = $7;$$0423 = $$15;$$pr41 = $14;$cnt$024 = $13;$ws$025 = $ws$1;
    }
   }
   $$pr$pre = HEAP32[$s>>2]|0;
   $$1 = $7;$$26 = 0;$18 = $$pr$pre;$cnt$1 = -1;$ws$018 = $ws$025;
  }
 } while(0);
 $17 = ($18|0)==(0|0);
 L11: do {
  if ($17) {
   $cnt$3 = $cnt$1;
  } else {
   $19 = ($$26|0)==(0);
   $20 = ($$1|0)==(0);
   $or$cond810 = $19 | $20;
   if ($or$cond810) {
    $cnt$3 = $cnt$1;
   } else {
    $$214 = $$1;$$311 = $$26;$21 = $18;$cnt$212 = $cnt$1;$ws$213 = $ws$018;
    while(1) {
     $22 = (_mbrtowc($ws$213,$21,$$214,$st)|0);
     $23 = (($22) + 2)|0;
     $24 = ($23>>>0)<(3);
     if ($24) {
      break;
     }
     $25 = HEAP32[$s>>2]|0;
     $26 = (($25) + ($22)|0);
     HEAP32[$s>>2] = $26;
     $27 = (($$214) - ($22))|0;
     $28 = (($ws$213) + 4|0);
     $29 = (($$311) + -1)|0;
     $30 = (($cnt$212) + 1)|0;
     $31 = ($29|0)==(0);
     $32 = ($$214|0)==($22|0);
     $or$cond8 = $31 | $32;
     if ($or$cond8) {
      $cnt$3 = $30;
      break L11;
     } else {
      $$214 = $27;$$311 = $29;$21 = $26;$cnt$212 = $30;$ws$213 = $28;
     }
    }
    if ((($22|0) == -1)) {
     $cnt$3 = -1;
     break;
    } else if ((($22|0) == 0)) {
     HEAP32[$s>>2] = 0;
     $cnt$3 = $cnt$212;
     break;
    } else {
     HEAP32[$st>>2] = 0;
     $cnt$3 = $cnt$212;
     break;
    }
   }
  }
 } while(0);
 if (!($1)) {
  STACKTOP = sp;return ($cnt$3|0);
 }
 $33 = HEAP32[$s>>2]|0;
 HEAP32[$src>>2] = $33;
 STACKTOP = sp;return ($cnt$3|0);
}
function _mbsrtowcs($ws,$src,$wn,$st) {
 $ws = $ws|0;
 $src = $src|0;
 $wn = $wn|0;
 $st = $st|0;
 var $$0 = 0, $$01$ph = 0, $$0123 = 0, $$02 = 0, $$113 = 0, $$13$lcssa = 0, $$137 = 0, $$2 = 0, $$24 = 0, $$3 = 0, $$35 = 0, $$4 = 0, $$443 = 0, $$444 = 0, $$46$ph = 0, $$4622 = 0, $$512 = 0, $$6 = 0, $$7 = 0, $$8 = 0;
 var $$842 = 0, $$in = 0, $$pre$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$2 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $or$cond = 0, $s$0 = 0, $s$1$lcssa = 0, $s$10 = 0;
 var $s$1045 = 0, $s$1046 = 0, $s$18 = 0, $s$2 = 0, $s$3 = 0, $s$4 = 0, $s$5$lcssa = 0, $s$5$ph = 0, $s$524 = 0, $s$614 = 0, $s$7 = 0, $s$8 = 0, $s$9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$src>>2]|0;
 $1 = ($st|0)==(0|0);
 if ($1) {
  label = 5;
 } else {
  $2 = HEAP32[$st>>2]|0;
  $3 = ($2|0)==(0);
  if ($3) {
   label = 5;
  } else {
   $4 = ($ws|0)==(0|0);
   if ($4) {
    $$35 = $wn;$c$2 = $2;$s$3 = $0;
    label = 16;
   } else {
    HEAP32[$st>>2] = 0;
    $$3 = $ws;$$7 = $wn;$c$4 = $2;$s$8 = $0;
    label = 37;
   }
  }
 }
 if ((label|0) == 5) {
  $5 = ($ws|0)==(0|0);
  if ($5) {
   $$02 = $wn;$s$0 = $0;
   label = 7;
  } else {
   $$01$ph = $ws;$$46$ph = $wn;$s$5$ph = $0;
   label = 6;
  }
 }
 L7: while(1) {
  if ((label|0) == 6) {
   label = 0;
   $6 = ($$46$ph|0)==(0);
   if ($6) {
    $s$5$lcssa = $s$5$ph;
    label = 26;
    break;
   } else {
    $$0123 = $$01$ph;$$4622 = $$46$ph;$s$524 = $s$5$ph;
   }
   while(1) {
    $65 = HEAP8[$s$524>>0]|0;
    $66 = $65&255;
    $67 = (($66) + -1)|0;
    $68 = ($67>>>0)<(127);
    do {
     if ($68) {
      $69 = $s$524;
      $70 = $69 & 3;
      $71 = ($70|0)==(0);
      $72 = ($$4622>>>0)>(4);
      $or$cond = $71 & $72;
      if ($or$cond) {
       $$113 = $$0123;$$512 = $$4622;$s$614 = $s$524;
       while(1) {
        $73 = HEAP32[$s$614>>2]|0;
        $74 = (($73) + -16843009)|0;
        $75 = $74 | $73;
        $76 = $75 & -2139062144;
        $77 = ($76|0)==(0);
        if (!($77)) {
         label = 31;
         break;
        }
        $78 = (($s$614) + 1|0);
        $79 = $73 & 255;
        $80 = (($$113) + 4|0);
        HEAP32[$$113>>2] = $79;
        $81 = (($s$614) + 2|0);
        $82 = HEAP8[$78>>0]|0;
        $83 = $82&255;
        $84 = (($$113) + 8|0);
        HEAP32[$80>>2] = $83;
        $85 = (($s$614) + 3|0);
        $86 = HEAP8[$81>>0]|0;
        $87 = $86&255;
        $88 = (($$113) + 12|0);
        HEAP32[$84>>2] = $87;
        $89 = (($s$614) + 4|0);
        $90 = HEAP8[$85>>0]|0;
        $91 = $90&255;
        $92 = (($$113) + 16|0);
        HEAP32[$88>>2] = $91;
        $93 = (($$512) + -4)|0;
        $94 = ($93>>>0)>(4);
        if ($94) {
         $$113 = $92;$$512 = $93;$s$614 = $89;
        } else {
         label = 32;
         break;
        }
       }
       if ((label|0) == 31) {
        label = 0;
        $95 = $73&255;
        $$2 = $$113;$$6 = $$512;$97 = $95;$s$7 = $s$614;
        break;
       }
       else if ((label|0) == 32) {
        label = 0;
        $$pre$pre = HEAP8[$89>>0]|0;
        $$2 = $92;$$6 = $93;$97 = $$pre$pre;$s$7 = $89;
        break;
       }
      } else {
       $$2 = $$0123;$$6 = $$4622;$97 = $65;$s$7 = $s$524;
      }
     } else {
      $$2 = $$0123;$$6 = $$4622;$97 = $65;$s$7 = $s$524;
     }
    } while(0);
    $96 = $97&255;
    $98 = (($96) + -1)|0;
    $99 = ($98>>>0)<(127);
    if (!($99)) {
     break;
    }
    $100 = (($s$7) + 1|0);
    $101 = (($$2) + 4|0);
    HEAP32[$$2>>2] = $96;
    $102 = (($$6) + -1)|0;
    $103 = ($102|0)==(0);
    if ($103) {
     $s$5$lcssa = $100;
     label = 26;
     break L7;
    } else {
     $$0123 = $101;$$4622 = $102;$s$524 = $100;
    }
   }
   $104 = (($96) + -194)|0;
   $105 = ($104>>>0)>(50);
   if ($105) {
    $$444 = $$2;$$842 = $$6;$s$1046 = $s$7;
    label = 48;
    break;
   }
   $106 = (($s$7) + 1|0);
   $107 = (283264 + ($104<<2)|0);
   $108 = HEAP32[$107>>2]|0;
   $$3 = $$2;$$7 = $$6;$c$4 = $108;$s$8 = $106;
   label = 37;
   continue;
  }
  else if ((label|0) == 7) {
   label = 0;
   $7 = HEAP8[$s$0>>0]|0;
   $8 = $7&255;
   $9 = (($8) + -1)|0;
   $10 = ($9>>>0)<(127);
   if ($10) {
    $11 = $s$0;
    $12 = $11 & 3;
    $13 = ($12|0)==(0);
    if ($13) {
     $14 = HEAP32[$s$0>>2]|0;
     $15 = (($14) + -16843009)|0;
     $16 = $15 | $14;
     $17 = $16 & -2139062144;
     $18 = ($17|0)==(0);
     if ($18) {
      $$137 = $$02;$s$18 = $s$0;
      while(1) {
       $19 = (($s$18) + 4|0);
       $20 = (($$137) + -4)|0;
       $21 = HEAP32[$19>>2]|0;
       $22 = (($21) + -16843009)|0;
       $23 = $22 | $21;
       $24 = $23 & -2139062144;
       $25 = ($24|0)==(0);
       if ($25) {
        $$137 = $20;$s$18 = $19;
       } else {
        $$13$lcssa = $20;$$in = $21;$s$1$lcssa = $19;
        break;
       }
      }
     } else {
      $$13$lcssa = $$02;$$in = $14;$s$1$lcssa = $s$0;
     }
     $26 = $$in&255;
     $$24 = $$13$lcssa;$28 = $26;$s$2 = $s$1$lcssa;
    } else {
     $$24 = $$02;$28 = $7;$s$2 = $s$0;
    }
   } else {
    $$24 = $$02;$28 = $7;$s$2 = $s$0;
   }
   $27 = $28&255;
   $29 = (($27) + -1)|0;
   $30 = ($29>>>0)<(127);
   if ($30) {
    $31 = (($s$2) + 1|0);
    $32 = (($$24) + -1)|0;
    $$02 = $32;$s$0 = $31;
    label = 7;
    continue;
   }
   $33 = (($27) + -194)|0;
   $34 = ($33>>>0)>(50);
   if ($34) {
    $$444 = $ws;$$842 = $$24;$s$1046 = $s$2;
    label = 48;
    break;
   }
   $35 = (($s$2) + 1|0);
   $36 = (283264 + ($33<<2)|0);
   $37 = HEAP32[$36>>2]|0;
   $$35 = $$24;$c$2 = $37;$s$3 = $35;
   label = 16;
   continue;
  }
  else if ((label|0) == 16) {
   label = 0;
   $38 = HEAP8[$s$3>>0]|0;
   $39 = $38&255;
   $40 = $39 >>> 3;
   $41 = (($40) + -16)|0;
   $42 = $c$2 >> 26;
   $43 = (($40) + ($42))|0;
   $44 = $41 | $43;
   $45 = ($44>>>0)>(7);
   if ($45) {
    label = 17;
    break;
   }
   $47 = (($s$3) + 1|0);
   $48 = $c$2 & 33554432;
   $49 = ($48|0)==(0);
   if ($49) {
    $s$4 = $47;
   } else {
    $50 = HEAP8[$47>>0]|0;
    $51 = $50&255;
    $52 = (($51) + -128)|0;
    $53 = ($52>>>0)>(63);
    if ($53) {
     label = 20;
     break;
    }
    $55 = (($s$3) + 2|0);
    $56 = $c$2 & 524288;
    $57 = ($56|0)==(0);
    if ($57) {
     $s$4 = $55;
    } else {
     $58 = HEAP8[$55>>0]|0;
     $59 = $58&255;
     $60 = (($59) + -128)|0;
     $61 = ($60>>>0)>(63);
     if ($61) {
      label = 23;
      break;
     }
     $63 = (($s$3) + 3|0);
     $s$4 = $63;
    }
   }
   $64 = (($$35) + -1)|0;
   $$02 = $64;$s$0 = $s$4;
   label = 7;
   continue;
  }
  else if ((label|0) == 37) {
   label = 0;
   $109 = HEAP8[$s$8>>0]|0;
   $110 = $109&255;
   $111 = $110 >>> 3;
   $112 = (($111) + -16)|0;
   $113 = $c$4 >> 26;
   $114 = (($111) + ($113))|0;
   $115 = $112 | $114;
   $116 = ($115>>>0)>(7);
   if ($116) {
    label = 38;
    break;
   }
   $118 = $c$4 << 6;
   $119 = (($s$8) + 1|0);
   $120 = (($110) + -128)|0;
   $121 = $120 | $118;
   $122 = ($121|0)<(0);
   if ($122) {
    $123 = HEAP8[$119>>0]|0;
    $124 = $123&255;
    $125 = (($124) + -128)|0;
    $126 = ($125>>>0)>(63);
    if ($126) {
     label = 41;
     break;
    }
    $128 = $121 << 6;
    $129 = (($s$8) + 2|0);
    $130 = $125 | $128;
    $131 = ($130|0)<(0);
    if ($131) {
     $132 = HEAP8[$129>>0]|0;
     $133 = $132&255;
     $134 = (($133) + -128)|0;
     $135 = ($134>>>0)>(63);
     if ($135) {
      label = 44;
      break;
     }
     $137 = $130 << 6;
     $138 = (($s$8) + 3|0);
     $139 = $134 | $137;
     $c$5 = $139;$s$9 = $138;
    } else {
     $c$5 = $130;$s$9 = $129;
    }
   } else {
    $c$5 = $121;$s$9 = $119;
   }
   $140 = (($$3) + 4|0);
   HEAP32[$$3>>2] = $c$5;
   $141 = (($$7) + -1)|0;
   $$01$ph = $140;$$46$ph = $141;$s$5$ph = $s$9;
   label = 6;
   continue;
  }
 }
 if ((label|0) == 17) {
  $46 = (($s$3) + -1|0);
  $$4 = $ws;$$8 = $$35;$c$6 = $c$2;$s$10 = $46;
  label = 47;
 }
 else if ((label|0) == 20) {
  $54 = (($s$3) + -1|0);
  $$4 = $ws;$$8 = $$35;$c$6 = $c$2;$s$10 = $54;
  label = 47;
 }
 else if ((label|0) == 23) {
  $62 = (($s$3) + -1|0);
  $$4 = $ws;$$8 = $$35;$c$6 = $c$2;$s$10 = $62;
  label = 47;
 }
 else if ((label|0) == 26) {
  HEAP32[$src>>2] = $s$5$lcssa;
  $$0 = $wn;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 38) {
  $117 = (($s$8) + -1|0);
  $$4 = $$3;$$8 = $$7;$c$6 = $c$4;$s$10 = $117;
  label = 47;
 }
 else if ((label|0) == 41) {
  $127 = (($s$8) + -1|0);
  $$4 = $$3;$$8 = $$7;$c$6 = $121;$s$10 = $127;
  label = 47;
 }
 else if ((label|0) == 44) {
  $136 = (($s$8) + -1|0);
  $$4 = $$3;$$8 = $$7;$c$6 = $130;$s$10 = $136;
  label = 47;
 }
 if ((label|0) == 47) {
  $142 = ($c$6|0)==(0);
  if ($142) {
   $$444 = $$4;$$842 = $$8;$s$1046 = $s$10;
   label = 48;
  } else {
   $$443 = $$4;$s$1045 = $s$10;
  }
 }
 if ((label|0) == 48) {
  $143 = HEAP8[$s$1046>>0]|0;
  $144 = ($143<<24>>24)==(0);
  if ($144) {
   $145 = ($$444|0)==(0|0);
   if (!($145)) {
    HEAP32[$$444>>2] = 0;
    HEAP32[$src>>2] = 0;
   }
   $146 = (($wn) - ($$842))|0;
   $$0 = $146;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$443 = $$444;$s$1045 = $s$1046;
  }
 }
 $147 = (___errno_location()|0);
 HEAP32[$147>>2] = 84;
 $148 = ($$443|0)==(0|0);
 if ($148) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$src>>2] = $s$1045;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _mbstowcs($ws,$s,$wn) {
 $ws = $ws|0;
 $s = $s|0;
 $wn = $wn|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $s;
 $1 = (_mbsrtowcs($ws,$0,$wn,0)|0);
 STACKTOP = sp;return ($1|0);
}
function _mbtowc($wc,$src,$n) {
 $wc = $wc|0;
 $src = $src|0;
 $n = $n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $wc;
 $1 = ($src|0)==(0|0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = ($n|0)==(0);
 do {
  if (!($2)) {
   $3 = ($wc|0)==(0|0);
   if ($3) {
    HEAP32[$0>>2] = $0;
    $7 = $0;
   } else {
    $7 = $wc;
   }
   $4 = HEAP8[$src>>0]|0;
   $5 = $4&255;
   $6 = ($4<<24>>24)>(-1);
   if ($6) {
    HEAP32[$7>>2] = $5;
    $8 = ($4<<24>>24)!=(0);
    $9 = $8&1;
    $$0 = $9;
    STACKTOP = sp;return ($$0|0);
   }
   $10 = (($5) + -194)|0;
   $11 = ($10>>>0)>(50);
   if (!($11)) {
    $12 = (($src) + 1|0);
    $13 = (283264 + ($10<<2)|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($n>>>0)<(4);
    if ($15) {
     $16 = ($n*6)|0;
     $17 = (($16) + -6)|0;
     $18 = -2147483648 >>> $17;
     $19 = $14 & $18;
     $20 = ($19|0)==(0);
     if (!($20)) {
      break;
     }
    }
    $21 = HEAP8[$12>>0]|0;
    $22 = $21&255;
    $23 = $22 >>> 3;
    $24 = (($23) + -16)|0;
    $25 = $14 >> 26;
    $26 = (($23) + ($25))|0;
    $27 = $24 | $26;
    $28 = ($27>>>0)>(7);
    if (!($28)) {
     $29 = $14 << 6;
     $30 = (($22) + -128)|0;
     $31 = $30 | $29;
     $32 = ($31|0)<(0);
     if (!($32)) {
      HEAP32[$7>>2] = $31;
      $$0 = 2;
      STACKTOP = sp;return ($$0|0);
     }
     $33 = (($src) + 2|0);
     $34 = HEAP8[$33>>0]|0;
     $35 = $34&255;
     $36 = (($35) + -128)|0;
     $37 = ($36>>>0)>(63);
     if (!($37)) {
      $38 = $31 << 6;
      $39 = $36 | $38;
      $40 = ($39|0)<(0);
      if (!($40)) {
       HEAP32[$7>>2] = $39;
       $$0 = 3;
       STACKTOP = sp;return ($$0|0);
      }
      $41 = (($src) + 3|0);
      $42 = HEAP8[$41>>0]|0;
      $43 = $42&255;
      $44 = (($43) + -128)|0;
      $45 = ($44>>>0)>(63);
      if (!($45)) {
       $46 = $39 << 6;
       $47 = $44 | $46;
       HEAP32[$7>>2] = $47;
       $$0 = 4;
       STACKTOP = sp;return ($$0|0);
      }
     }
    }
   }
  }
 } while(0);
 $48 = (___errno_location()|0);
 HEAP32[$48>>2] = 84;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _wcsnrtombs($dst,$wcs,$wn,$n,$st) {
 $dst = $dst|0;
 $wcs = $wcs|0;
 $wn = $wn|0;
 $n = $n|0;
 $st = $st|0;
 var $$026 = 0, $$04$$0 = 0, $$0423 = 0, $$1 = 0, $$15 = 0, $$214 = 0, $$26 = 0, $$311 = 0, $$pr$pre = 0, $$pr41 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $cnt$024 = 0, $cnt$1 = 0, $cnt$212 = 0, $cnt$3 = 0, $dst$ = 0, $n$ = 0, $or$cond = 0, $or$cond22 = 0, $or$cond7 = 0, $or$cond8 = 0, $or$cond810 = 0, $s$018 = 0, $s$025 = 0, $s$1 = 0;
 var $s$213 = 0, $ws = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0;
 $buf = sp + 8|0;
 $ws = sp;
 $0 = HEAP32[$wcs>>2]|0;
 HEAP32[$ws>>2] = $0;
 $1 = ($dst|0)!=(0|0);
 $n$ = $1 ? $n : 256;
 $dst$ = $1 ? $dst : $buf;
 $2 = ($0|0)==(0|0);
 $3 = ($n$|0)==(0);
 $or$cond22 = $2 | $3;
 L1: do {
  if ($or$cond22) {
   $$1 = $wn;$$26 = $n$;$17 = $0;$cnt$1 = 0;$s$018 = $dst$;
  } else {
   $$026 = $wn;$$0423 = $n$;$$pr41 = $0;$cnt$024 = 0;$s$025 = $dst$;
   while(1) {
    $4 = ($$026>>>0)>=($$0423>>>0);
    $5 = ($$026>>>0)>(32);
    $or$cond7 = $4 | $5;
    if (!($or$cond7)) {
     $$1 = $$026;$$26 = $$0423;$17 = $$pr41;$cnt$1 = $cnt$024;$s$018 = $s$025;
     break L1;
    }
    $$04$$0 = $4 ? $$0423 : $$026;
    $6 = (($$026) - ($$04$$0))|0;
    $7 = (_wcsrtombs($s$025,$ws,$$04$$0,0)|0);
    $8 = ($7|0)==(-1);
    if ($8) {
     break;
    }
    $9 = ($s$025|0)==($buf|0);
    if ($9) {
     $$15 = $$0423;$s$1 = $buf;
    } else {
     $10 = (($s$025) + ($7)|0);
     $11 = (($$0423) - ($7))|0;
     $$15 = $11;$s$1 = $10;
    }
    $12 = (($7) + ($cnt$024))|0;
    $13 = HEAP32[$ws>>2]|0;
    $14 = ($13|0)==(0|0);
    $15 = ($$15|0)==(0);
    $or$cond = $14 | $15;
    if ($or$cond) {
     $$1 = $6;$$26 = $$15;$17 = $13;$cnt$1 = $12;$s$018 = $s$1;
     break L1;
    } else {
     $$026 = $6;$$0423 = $$15;$$pr41 = $13;$cnt$024 = $12;$s$025 = $s$1;
    }
   }
   $$pr$pre = HEAP32[$ws>>2]|0;
   $$1 = $6;$$26 = 0;$17 = $$pr$pre;$cnt$1 = -1;$s$018 = $s$025;
  }
 } while(0);
 $16 = ($17|0)==(0|0);
 L11: do {
  if ($16) {
   $cnt$3 = $cnt$1;
  } else {
   $18 = ($$26|0)==(0);
   $19 = ($$1|0)==(0);
   $or$cond810 = $18 | $19;
   if ($or$cond810) {
    $cnt$3 = $cnt$1;
   } else {
    $$214 = $$1;$$311 = $$26;$21 = $17;$cnt$212 = $cnt$1;$s$213 = $s$018;
    while(1) {
     $20 = HEAP32[$21>>2]|0;
     $22 = (_wcrtomb($s$213,$20,0)|0);
     $23 = (($22) + 1)|0;
     $24 = ($23>>>0)<(2);
     if ($24) {
      break;
     }
     $26 = HEAP32[$ws>>2]|0;
     $27 = (($26) + 4|0);
     HEAP32[$ws>>2] = $27;
     $28 = (($$214) + -1)|0;
     $29 = (($s$213) + ($22)|0);
     $30 = (($$311) - ($22))|0;
     $31 = (($cnt$212) + 1)|0;
     $32 = ($$311|0)==($22|0);
     $33 = ($28|0)==(0);
     $or$cond8 = $32 | $33;
     if ($or$cond8) {
      $cnt$3 = $31;
      break L11;
     } else {
      $$214 = $28;$$311 = $30;$21 = $27;$cnt$212 = $31;$s$213 = $29;
     }
    }
    $25 = ($22|0)==(0);
    if ($25) {
     HEAP32[$ws>>2] = 0;
     $cnt$3 = $cnt$212;
    } else {
     $cnt$3 = -1;
    }
   }
  }
 } while(0);
 if (!($1)) {
  STACKTOP = sp;return ($cnt$3|0);
 }
 $34 = HEAP32[$ws>>2]|0;
 HEAP32[$wcs>>2] = $34;
 STACKTOP = sp;return ($cnt$3|0);
}
function _wcsrtombs($s,$ws,$n,$st) {
 $s = $s|0;
 $ws = $ws|0;
 $n = $n|0;
 $st = $st|0;
 var $$0 = 0, $$01$lcssa = 0, $$0125 = 0, $$026 = 0, $$1 = 0, $$13 = 0, $$215 = 0, $$24$lcssa = 0, $$2424 = 0, $$3 = 0, $$35 = 0, $$414 = 0, $$5 = 0, $$pn = 0, $$pre = 0, $$pre39 = 0, $$pre40 = 0, $$pre41 = 0, $0 = 0, $1 = 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $ws2$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $buf = sp;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $2 = HEAP32[$ws>>2]|0;
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==(0);
  if ($4) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$026 = 0;$6 = $3;$ws2$07 = $2;
  }
  while(1) {
   $5 = ($6>>>0)>(127);
   if ($5) {
    $7 = (_wcrtomb($buf,$6,0)|0);
    $8 = ($7|0)==(-1);
    if ($8) {
     $$0 = -1;
     label = 26;
     break;
    } else {
     $$pn = $7;
    }
   } else {
    $$pn = 1;
   }
   $$13 = (($$pn) + ($$026))|0;
   $9 = (($ws2$07) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(0);
   if ($11) {
    $$0 = $$13;
    label = 26;
    break;
   } else {
    $$026 = $$13;$6 = $10;$ws2$07 = $9;
   }
  }
  if ((label|0) == 26) {
   STACKTOP = sp;return ($$0|0);
  }
 }
 $1 = ($n>>>0)>(3);
 L14: do {
  if ($1) {
   $$pre40 = HEAP32[$ws>>2]|0;
   $$0125 = $s;$$2424 = $n;$14 = $$pre40;
   while(1) {
    $13 = HEAP32[$14>>2]|0;
    $15 = (($13) + -1)|0;
    $16 = ($15>>>0)>(126);
    if ($16) {
     $17 = ($13|0)==(0);
     if ($17) {
      break;
     }
     $19 = (_wcrtomb($$0125,$13,0)|0);
     $20 = ($19|0)==(-1);
     if ($20) {
      $$0 = -1;
      label = 26;
      break;
     }
     $21 = (($$0125) + ($19)|0);
     $22 = (($$2424) - ($19))|0;
     $$1 = $21;$$35 = $22;$27 = $14;
    } else {
     $23 = $13&255;
     $24 = (($$0125) + 1|0);
     HEAP8[$$0125>>0] = $23;
     $25 = (($$2424) + -1)|0;
     $$pre41 = HEAP32[$ws>>2]|0;
     $$1 = $24;$$35 = $25;$27 = $$pre41;
    }
    $26 = (($27) + 4|0);
    HEAP32[$ws>>2] = $26;
    $28 = ($$35>>>0)>(3);
    if ($28) {
     $$0125 = $$1;$$2424 = $$35;$14 = $26;
    } else {
     $$01$lcssa = $$1;$$24$lcssa = $$35;
     break L14;
    }
   }
   if ((label|0) == 26) {
    STACKTOP = sp;return ($$0|0);
   }
   HEAP8[$$0125>>0] = 0;
   HEAP32[$ws>>2] = 0;
   $18 = (($n) - ($$2424))|0;
   $$0 = $18;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$01$lcssa = $s;$$24$lcssa = $n;
  }
 } while(0);
 $12 = ($$24$lcssa|0)==(0);
 if ($12) {
  $$0 = $n;
  STACKTOP = sp;return ($$0|0);
 }
 $$pre = HEAP32[$ws>>2]|0;
 $$215 = $$01$lcssa;$$414 = $$24$lcssa;$30 = $$pre;
 while(1) {
  $29 = HEAP32[$30>>2]|0;
  $31 = (($29) + -1)|0;
  $32 = ($31>>>0)>(126);
  if ($32) {
   $33 = ($29|0)==(0);
   if ($33) {
    label = 19;
    break;
   }
   $35 = (_wcrtomb($buf,$29,0)|0);
   $36 = ($35|0)==(-1);
   if ($36) {
    $$0 = -1;
    label = 26;
    break;
   }
   $37 = ($35>>>0)>($$414>>>0);
   if ($37) {
    label = 22;
    break;
   }
   $39 = HEAP32[$30>>2]|0;
   (_wcrtomb($$215,$39,0)|0);
   $40 = (($$215) + ($35)|0);
   $41 = (($$414) - ($35))|0;
   $$3 = $40;$$5 = $41;$46 = $30;
  } else {
   $42 = $29&255;
   $43 = (($$215) + 1|0);
   HEAP8[$$215>>0] = $42;
   $44 = (($$414) + -1)|0;
   $$pre39 = HEAP32[$ws>>2]|0;
   $$3 = $43;$$5 = $44;$46 = $$pre39;
  }
  $45 = (($46) + 4|0);
  HEAP32[$ws>>2] = $45;
  $47 = ($$5|0)==(0);
  if ($47) {
   $$0 = $n;
   label = 26;
   break;
  } else {
   $$215 = $$3;$$414 = $$5;$30 = $45;
  }
 }
 if ((label|0) == 19) {
  HEAP8[$$215>>0] = 0;
  HEAP32[$ws>>2] = 0;
  $34 = (($n) - ($$414))|0;
  $$0 = $34;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 22) {
  $38 = (($n) - ($$414))|0;
  $$0 = $38;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 26) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _wcstombs($s,$ws,$n) {
 $s = $s|0;
 $ws = $ws|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $ws;
 $1 = (_wcsrtombs($s,$0,$n,0)|0);
 STACKTOP = sp;return ($1|0);
}
function _wctob($c) {
 $c = $c|0;
 var $0 = 0, $c$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c>>>0)<(128);
 $c$ = $0 ? $c : -1;
 STACKTOP = sp;return ($c$|0);
}
function _fnmatch($pat,$str,$flags) {
 $pat = $pat|0;
 $str = $str|0;
 $flags = $flags|0;
 var $$0 = 0, $$02 = 0, $$03 = 0, $$mux = 0, $$not = 0, $$not4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $brmerge = 0, $inc = 0, $or$cond = 0;
 var $or$cond9 = 0, $p$0 = 0, $s$0 = 0, $s$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $inc = sp;
 $0 = $flags & 1;
 $1 = ($0|0)==(0);
 $2 = $flags & 8;
 $3 = ($2|0)==(0);
 if ($1) {
  L3: do {
   if (!($3)) {
    $23 = $str;
    $s$1 = $str;
    while(1) {
     $24 = HEAP8[$s$1>>0]|0;
     if ((($24<<24>>24) == 0)) {
      break L3;
     } else if ((($24<<24>>24) == 47)) {
      $25 = $s$1;
      $26 = (($25) - ($23))|0;
      $27 = (_fnmatch_internal($pat,-1,$str,$26,$flags)|0);
      $28 = ($27|0)==(0);
      if ($28) {
       $$0 = 0;
       break;
      }
     }
     $29 = (($s$1) + 1|0);
     $s$1 = $29;
    }
    STACKTOP = sp;return ($$0|0);
   }
  } while(0);
  $30 = (_fnmatch_internal($pat,-1,$str,-1,$flags)|0);
  $$0 = $30;
  STACKTOP = sp;return ($$0|0);
 } else {
  $$02 = $pat;$$03 = $str;
 }
 while(1) {
  $s$0 = $$03;
  while(1) {
   $4 = HEAP8[$s$0>>0]|0;
   if ((($4<<24>>24) == 47) | (($4<<24>>24) == 0)) {
    $p$0 = $$02;
    break;
   }
   $5 = (($s$0) + 1|0);
   $s$0 = $5;
  }
  while(1) {
   $6 = (_pat_next($p$0,-1,$inc,$flags)|0);
   $$not = ($6|0)==(0);
   if ((($6|0) == 0) | (($6|0) == 47)) {
    break;
   }
   $7 = HEAP32[$inc>>2]|0;
   $8 = (($p$0) + ($7)|0);
   $p$0 = $8;
  }
  $9 = HEAP8[$s$0>>0]|0;
  $10 = $9 << 24 >> 24;
  $11 = ($6|0)!=($10|0);
  $12 = ($9<<24>>24)==(0);
  $or$cond = $12 | $3;
  $or$cond9 = $11 & $or$cond;
  if ($or$cond9) {
   $$0 = 1;
   label = 16;
   break;
  }
  $13 = $p$0;
  $14 = $$02;
  $15 = (($13) - ($14))|0;
  $16 = $s$0;
  $17 = $$03;
  $18 = (($16) - ($17))|0;
  $19 = (_fnmatch_internal($$02,$15,$$03,$18,$flags)|0);
  $$not4 = ($19|0)!=(0);
  $brmerge = $$not4 | $$not;
  $$mux = $$not4&1;
  if ($brmerge) {
   $$0 = $$mux;
   label = 16;
   break;
  }
  $20 = (($s$0) + 1|0);
  $21 = HEAP32[$inc>>2]|0;
  $22 = (($p$0) + ($21)|0);
  $$02 = $22;$$03 = $20;
 }
 if ((label|0) == 16) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _pat_next($pat,$m,$step,$flags) {
 $pat = $pat|0;
 $m = $m|0;
 $step = $step|0;
 $flags = $flags|0;
 var $$ = 0, $$0 = 0, $$02 = 0, $$3 = 0, $$k$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, $esc$0 = 0, $k$0 = 0, $k$1$ph = 0, $k$18 = 0, $k$2$lcssa = 0, $k$2$ph = 0, $k$26 = 0, $k$3 = 0, $k$4 = 0, $not$ = 0, $or$cond = 0, $wc = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $wc = sp;
 $0 = ($m|0)==(0);
 if (!($0)) {
  $1 = HEAP8[$pat>>0]|0;
  $2 = ($1<<24>>24)==(0);
  if (!($2)) {
   HEAP32[$step>>2] = 1;
   $3 = HEAP8[$pat>>0]|0;
   if ((($3<<24>>24) == 91)) {
    label = 9;
   } else if ((($3<<24>>24) == 92)) {
    label = 5;
   } else if ((($3<<24>>24) == 42)) {
    $$0 = -5;
    STACKTOP = sp;return ($$0|0);
   } else if ((($3<<24>>24) == 63)) {
    label = 32;
   } else {
    $$02 = $pat;$54 = $3;$esc$0 = 0;
    label = 33;
   }
   do {
    if ((label|0) == 5) {
     $4 = (($pat) + 1|0);
     $5 = HEAP8[$4>>0]|0;
     $6 = ($5<<24>>24)==(0);
     if ($6) {
      $60 = 92;
     } else {
      $7 = $flags & 2;
      $8 = ($7|0)==(0);
      if ($8) {
       HEAP32[$step>>2] = 2;
       $$pre = HEAP8[$4>>0]|0;
       $$02 = $4;$54 = $$pre;$esc$0 = 1;
       label = 33;
       break;
      }
      if ((($3<<24>>24) == 42)) {
       $$0 = -5;
      } else if ((($3<<24>>24) == 91)) {
       label = 9;
       break;
      } else if ((($3<<24>>24) == 63)) {
       label = 32;
       break;
      } else {
       $$02 = $pat;$54 = $3;$esc$0 = 0;
       label = 33;
       break;
      }
      STACKTOP = sp;return ($$0|0);
     }
    }
   } while(0);
   if ((label|0) == 9) {
    $9 = ($m>>>0)>(1);
    if ($9) {
     $10 = (($pat) + 1|0);
     $11 = HEAP8[$10>>0]|0;
     if ((($11<<24>>24) == 33) | (($11<<24>>24) == 94)) {
      $k$0 = 2;
     } else {
      $k$0 = 1;
     }
    } else {
     $k$0 = 1;
    }
    $12 = ($k$0>>>0)<($m>>>0);
    if ($12) {
     $13 = (($pat) + ($k$0)|0);
     $14 = HEAP8[$13>>0]|0;
     $15 = ($14<<24>>24)==(93);
     $16 = $15&1;
     $$k$0 = (($16) + ($k$0))|0;
     $k$1$ph = $$k$0;
    } else {
     $k$1$ph = $k$0;
    }
    $17 = ($k$1$ph>>>0)<($m>>>0);
    L22: do {
     if ($17) {
      $k$18 = $k$1$ph;
      while(1) {
       $18 = (($pat) + ($k$18)|0);
       $19 = HEAP8[$18>>0]|0;
       if ((($19<<24>>24) == 93) | (($19<<24>>24) == 0)) {
        $k$4 = $k$18;
        label = 28;
        break L22;
       }
       $20 = (($k$18) + 1)|0;
       $21 = ($20>>>0)<($m>>>0);
       if ($21) {
        $22 = (($pat) + ($20)|0);
        $23 = HEAP8[$22>>0]|0;
        $24 = ($23<<24>>24)!=(0);
        $25 = ($19<<24>>24)==(91);
        $or$cond = $24 & $25;
        if ($or$cond) {
         if ((($23<<24>>24) == 61) | (($23<<24>>24) == 46) | (($23<<24>>24) == 58)) {
          $26 = (($k$18) + 2)|0;
          $27 = ($26>>>0)<($m>>>0);
          if ($27) {
           $28 = (($pat) + ($26)|0);
           $29 = HEAP8[$28>>0]|0;
           $30 = ($29<<24>>24)==(0);
           $31 = (($k$18) + 3)|0;
           $$ = $30 ? $26 : $31;
           $k$2$ph = $$;
          } else {
           $k$2$ph = $26;
          }
          $32 = ($k$2$ph>>>0)<($m>>>0);
          L33: do {
           if ($32) {
            $k$26 = $k$2$ph;
            while(1) {
             $35 = (($pat) + ($k$26)|0);
             $36 = HEAP8[$35>>0]|0;
             $37 = ($36<<24>>24)==(0);
             if ($37) {
              $k$2$lcssa = $k$26;
              break L33;
             }
             $38 = (($k$26) + -1)|0;
             $39 = (($pat) + ($38)|0);
             $40 = HEAP8[$39>>0]|0;
             $41 = ($36<<24>>24)!=(93);
             $not$ = ($40<<24>>24)!=($23<<24>>24);
             $$3 = $41 | $not$;
             $34 = (($k$26) + 1)|0;
             if (!($$3)) {
              $k$2$lcssa = $k$26;
              break L33;
             }
             $33 = ($34>>>0)<($m>>>0);
             if ($33) {
              $k$26 = $34;
             } else {
              $k$2$lcssa = $34;
              break;
             }
            }
           } else {
            $k$2$lcssa = $k$2$ph;
           }
          } while(0);
          $42 = ($k$2$lcssa|0)==($m|0);
          if ($42) {
           break L22;
          }
          $43 = (($pat) + ($k$2$lcssa)|0);
          $44 = HEAP8[$43>>0]|0;
          $45 = ($44<<24>>24)==(0);
          if ($45) {
           $k$4 = $k$2$lcssa;
           label = 28;
           break L22;
          } else {
           $k$3 = $k$2$lcssa;
          }
         } else {
          $k$3 = $k$18;
         }
        } else {
         $k$3 = $k$18;
        }
       } else {
        $k$3 = $k$18;
       }
       $46 = (($k$3) + 1)|0;
       $47 = ($46>>>0)<($m>>>0);
       if ($47) {
        $k$18 = $46;
       } else {
        $k$4 = $46;
        label = 28;
        break;
       }
      }
     } else {
      $k$4 = $k$1$ph;
      label = 28;
     }
    } while(0);
    if ((label|0) == 28) {
     $48 = ($k$4|0)==($m|0);
     if (!($48)) {
      $49 = (($pat) + ($k$4)|0);
      $50 = HEAP8[$49>>0]|0;
      $51 = ($50<<24>>24)==(0);
      if (!($51)) {
       $52 = (($k$4) + 1)|0;
       HEAP32[$step>>2] = $52;
       $$0 = -3;
       STACKTOP = sp;return ($$0|0);
      }
     }
    }
    HEAP32[$step>>2] = 1;
    $$0 = 91;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 32) {
    $$0 = -4;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 33) {
    $53 = ($54<<24>>24)<(0);
    if ($53) {
     $55 = (_mbtowc($wc,$$02,$m)|0);
     $56 = ($55|0)<(0);
     if ($56) {
      HEAP32[$step>>2] = 0;
      $$0 = -2;
      STACKTOP = sp;return ($$0|0);
     } else {
      $57 = (($55) + ($esc$0))|0;
      HEAP32[$step>>2] = $57;
      $58 = HEAP32[$wc>>2]|0;
      $$0 = $58;
      STACKTOP = sp;return ($$0|0);
     }
    } else {
     $60 = $54;
    }
   }
   $59 = $60 << 24 >> 24;
   $$0 = $59;
   STACKTOP = sp;return ($$0|0);
  }
 }
 HEAP32[$step>>2] = 0;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _fnmatch_internal($pat,$m,$str,$n,$flags) {
 $pat = $pat|0;
 $m = $m|0;
 $str = $str|0;
 $n = $n|0;
 $flags = $flags|0;
 var $$0 = 0, $$0$i = 0, $$0$i12 = 0, $$0$i15$us = 0, $$0$i1525$us = 0, $$0$i18$us = 0, $$0$i21$us = 0, $$02 = 0, $$03 = 0, $$04 = 0, $$07 = 0, $$15$ph$ph94 = 0, $$15$ph92$us = 0, $$3$us = 0, $$339$us = 0, $$340$us = 0, $$lcssa = 0, $$lcssa50 = 0, $$lcssa59 = 0, $$phi$trans$insert = 0;
 var $$pn = 0, $$pn$in = 0, $$pn96 = 0, $$pn96$in = 0, $$pn98 = 0, $$pre = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $not$ = 0, $or$cond = 0, $or$cond10 = 0, $or$cond60 = 0, $p$069 = 0, $p$152 = 0, $p$152$phi = 0, $p$235$us = 0, $p$235$us$phi = 0, $pinc = 0, $ptail$0$lcssa = 0, $ptail$070 = 0, $ptail$1 = 0;
 var $s$0$lcssa = 0, $s$061 = 0, $s$1 = 0, $s$2 = 0, $s$4$lcssa = 0, $s$436$us = 0, $tailcnt$0$lcssa = 0, $tailcnt$071 = 0, $tailcnt$1 = 0, $tailcnt$262 = 0, $wc$i = 0, $wc$i11 = 0, $wc$i14 = 0, $wc$i17 = 0, $wc$i20 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $wc$i20 = sp + 20|0;
 $wc$i17 = sp + 16|0;
 $wc$i14 = sp + 12|0;
 $wc$i11 = sp + 8|0;
 $wc$i = sp + 4|0;
 $pinc = sp;
 $0 = $flags & 4;
 $1 = ($0|0)==(0);
 if (!($1)) {
  $2 = HEAP8[$str>>0]|0;
  $3 = ($2<<24>>24)==(46);
  if ($3) {
   $4 = HEAP8[$pat>>0]|0;
   $5 = ($4<<24>>24)==(46);
   if (!($5)) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 $$02 = $pat;$$03 = $n;$$04 = $str;$$07 = $m;
 while(1) {
  $6 = (_pat_next($$02,$$07,$pinc,$flags)|0);
  if ((($6|0) == -5)) {
   label = 6;
   break;
  } else if ((($6|0) == -2)) {
   $$0 = 1;
   label = 71;
   break;
  }
  $13 = ($$03|0)==(0);
  if ($13) {
   label = 14;
   break;
  }
  $14 = HEAP8[$$04>>0]|0;
  $15 = ($14<<24>>24)<(0);
  if ($15) {
   $16 = (_mbtowc($wc$i,$$04,$$03)|0);
   $17 = ($16|0)<(0);
   if ($17) {
    label = 14;
    break;
   }
   $18 = HEAP32[$wc$i>>2]|0;
   $$0$i = $18;$23 = $16;
  } else {
   $19 = $14 << 24 >> 24;
   $$0$i = $19;$23 = 1;
  }
  $20 = ($$0$i|0)<(1);
  if ($20) {
   label = 14;
   break;
  }
  $22 = (($$04) + ($23)|0);
  $24 = (($$03) - ($23))|0;
  if ((($6|0) == -3)) {
   $25 = (_match_bracket($$02,$$0$i)|0);
   $26 = ($25|0)==(0);
   if ($26) {
    $$0 = 1;
    label = 71;
    break;
   }
  } else if (!((($6|0) == -4))) {
   $27 = ($$0$i|0)==($6|0);
   if (!($27)) {
    $$0 = 1;
    label = 71;
    break;
   }
  }
  $28 = HEAP32[$pinc>>2]|0;
  $29 = (($$02) + ($28)|0);
  $30 = (($$07) - ($28))|0;
  $$02 = $29;$$03 = $24;$$04 = $22;$$07 = $30;
 }
 if ((label|0) == 6) {
  $7 = (($$02) + 1|0);
  $8 = (($$07) + -1)|0;
  $9 = (_strnlen($7,$8)|0);
  $$sum = (($9) + 1)|0;
  $10 = (($$02) + ($$sum)|0);
  $11 = ($$sum|0)>(1);
  L23: do {
   if ($11) {
    $12 = $10;
    $p$069 = $7;$ptail$070 = $7;$tailcnt$071 = 0;
    while(1) {
     $31 = $p$069;
     $32 = (($12) - ($31))|0;
     $33 = (_pat_next($p$069,$32,$pinc,$flags)|0);
     if ((($33|0) == -2)) {
      $$0 = 1;
      break;
     } else if ((($33|0) == -5)) {
      $34 = (($p$069) + 1|0);
      $ptail$1 = $34;$tailcnt$1 = 0;
     } else {
      $35 = (($tailcnt$071) + 1)|0;
      $ptail$1 = $ptail$070;$tailcnt$1 = $35;
     }
     $36 = HEAP32[$pinc>>2]|0;
     $37 = (($p$069) + ($36)|0);
     $38 = ($37>>>0)<($10>>>0);
     if ($38) {
      $p$069 = $37;$ptail$070 = $ptail$1;$tailcnt$071 = $tailcnt$1;
     } else {
      $ptail$0$lcssa = $ptail$1;$tailcnt$0$lcssa = $tailcnt$1;
      break L23;
     }
    }
    STACKTOP = sp;return ($$0|0);
   } else {
    $ptail$0$lcssa = $7;$tailcnt$0$lcssa = 0;
   }
  } while(0);
  $39 = (_strnlen($$04,$$03)|0);
  $40 = (($$04) + ($39)|0);
  $41 = ($39>>>0)<($tailcnt$0$lcssa>>>0);
  if ($41) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  $42 = ($39|0)<(1);
  $43 = ($tailcnt$0$lcssa|0)==(0);
  $or$cond60 = $42 | $43;
  if ($or$cond60) {
   $$lcssa59 = $43;$s$0$lcssa = $40;
  } else {
   $s$061 = $40;$tailcnt$262 = $tailcnt$0$lcssa;
   while(1) {
    $44 = (($s$061) + -1|0);
    $45 = HEAP8[$44>>0]|0;
    $46 = ($45<<24>>24)>(-1);
    L39: do {
     if ($46) {
      $s$2 = $44;
     } else {
      $49 = $45;$s$1 = $s$061;
      while(1) {
       $47 = (($s$1) + -1|0);
       $48 = $49&255;
       $50 = (($48) + -128)|0;
       $51 = ($50>>>0)<(64);
       $52 = ($47>>>0)>($$04>>>0);
       $or$cond10 = $51 & $52;
       if (!($or$cond10)) {
        $s$2 = $47;
        break L39;
       }
       $$phi$trans$insert = (($s$1) + -2|0);
       $$pre = HEAP8[$$phi$trans$insert>>0]|0;
       $49 = $$pre;$s$1 = $47;
      }
     }
    } while(0);
    $53 = (($tailcnt$262) + -1)|0;
    $54 = ($s$2>>>0)<=($$04>>>0);
    $55 = ($53|0)==(0);
    $or$cond = $54 | $55;
    if ($or$cond) {
     $$lcssa59 = $55;$s$0$lcssa = $s$2;
     break;
    } else {
     $s$061 = $s$2;$tailcnt$262 = $53;
    }
   }
  }
  if (!($$lcssa59)) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  $56 = $10;
  $57 = $ptail$0$lcssa;
  $58 = (($56) - ($57))|0;
  $59 = (_pat_next($ptail$0$lcssa,$58,$pinc,$flags)|0);
  $60 = HEAP32[$pinc>>2]|0;
  $61 = $40;
  $62 = ($40|0)==($s$0$lcssa|0);
  L48: do {
   if ($62) {
    $$lcssa50 = $59;
   } else {
    $63 = (($ptail$0$lcssa) + ($60)|0);
    $$pn$in = $s$0$lcssa;$80 = $59;$82 = $63;$p$152 = $ptail$0$lcssa;
    while(1) {
     $64 = HEAP8[$$pn$in>>0]|0;
     $65 = ($64<<24>>24)<(0);
     if ($65) {
      $$pn = $$pn$in;
      $66 = (($61) - ($$pn))|0;
      $67 = (_mbtowc($wc$i11,$$pn$in,$66)|0);
      $68 = ($67|0)<(0);
      if ($68) {
       $$lcssa50 = $80;
       break L48;
      }
      $69 = HEAP32[$wc$i11>>2]|0;
      $$0$i12 = $69;$76 = $67;
     } else {
      $70 = $64 << 24 >> 24;
      $$0$i12 = $70;$76 = 1;
     }
     $71 = ($$0$i12|0)<(1);
     if ($71) {
      $$lcssa50 = $80;
      break L48;
     }
     $75 = (($$pn$in) + ($76)|0);
     if ((($80|0) == -3)) {
      $77 = (_match_bracket($p$152,$$0$i12)|0);
      $78 = ($77|0)==(0);
      if ($78) {
       $$0 = 1;
       label = 71;
       break;
      }
     } else if (!((($80|0) == -4))) {
      $79 = ($$0$i12|0)==($80|0);
      if (!($79)) {
       $$0 = 1;
       label = 71;
       break;
      }
     }
     $81 = $82;
     $83 = (($56) - ($81))|0;
     $84 = (_pat_next($82,$83,$pinc,$flags)|0);
     $85 = HEAP32[$pinc>>2]|0;
     $86 = (($82) + ($85)|0);
     $87 = ($40|0)==($75|0);
     if ($87) {
      $$lcssa50 = $84;
      break L48;
     } else {
      $p$152$phi = $82;$$pn$in = $75;$80 = $84;$82 = $86;$p$152 = $p$152$phi;
     }
    }
    if ((label|0) == 71) {
     STACKTOP = sp;return ($$0|0);
    }
   }
  } while(0);
  $72 = ($$lcssa50|0)==(0);
  if (!($72)) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  $73 = ($7>>>0)<($ptail$0$lcssa>>>0);
  $74 = $s$0$lcssa;
  if (!($73)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $$15$ph$ph94 = $$04;$$pn96$in = $7;
  L72: while(1) {
   $$pn96 = $$pn96$in;
   $89 = (($57) - ($$pn96))|0;
   $$15$ph92$us = $$15$ph$ph94;
   L74: while(1) {
    $133 = (_pat_next($$pn96$in,$89,$pinc,$flags)|0);
    $134 = HEAP32[$pinc>>2]|0;
    $135 = (($$pn96$in) + ($134)|0);
    $136 = ($133|0)==(-5);
    if ($136) {
     $$lcssa = $135;$s$4$lcssa = $$15$ph92$us;
     break;
    } else {
     $103 = $133;$127 = $135;$p$235$us = $$pn96$in;$s$436$us = $$15$ph92$us;
    }
    while(1) {
     $90 = $s$436$us;
     $91 = (($74) - ($90))|0;
     $92 = ($s$0$lcssa|0)==($s$436$us|0);
     if ($92) {
      $$0 = 1;
      label = 71;
      break L72;
     }
     $93 = HEAP8[$s$436$us>>0]|0;
     $94 = ($93<<24>>24)<(0);
     if ($94) {
      $96 = (_mbtowc($wc$i14,$s$436$us,$91)|0);
      $97 = ($96|0)<(0);
      if ($97) {
       $$0$i1525$us = -1;$125 = 1;
      } else {
       $98 = HEAP32[$wc$i14>>2]|0;
       $$0$i15$us = $98;$139 = $96;
       label = 51;
      }
     } else {
      $95 = $93 << 24 >> 24;
      $$0$i15$us = $95;$139 = 1;
      label = 51;
     }
     if ((label|0) == 51) {
      label = 0;
      $99 = ($$0$i15$us|0)==(0);
      if ($99) {
       $$0 = 1;
       label = 71;
       break L72;
      } else {
       $$0$i1525$us = $$0$i15$us;$125 = $139;
      }
     }
     if ((($103|0) == -3)) {
      $100 = (_match_bracket($p$235$us,$$0$i1525$us)|0);
      $101 = ($100|0)==(0);
      if ($101) {
       break;
      }
     } else if (!((($103|0) == -4))) {
      $102 = ($$0$i1525$us|0)==($103|0);
      if (!($102)) {
       break;
      }
     }
     $124 = (($s$436$us) + ($125)|0);
     $126 = $127;
     $128 = (($57) - ($126))|0;
     $129 = (_pat_next($127,$128,$pinc,$flags)|0);
     $130 = HEAP32[$pinc>>2]|0;
     $131 = (($127) + ($130)|0);
     $132 = ($129|0)==(-5);
     if ($132) {
      $$lcssa = $131;$s$4$lcssa = $124;
      break L74;
     } else {
      $p$235$us$phi = $127;$103 = $129;$127 = $131;$s$436$us = $124;$p$235$us = $p$235$us$phi;
     }
    }
    $104 = $$15$ph92$us;
    $105 = (($74) - ($104))|0;
    $106 = ($s$0$lcssa|0)==($$15$ph92$us|0);
    do {
     if (!($106)) {
      $107 = HEAP8[$$15$ph92$us>>0]|0;
      $108 = ($107<<24>>24)<(0);
      if ($108) {
       $110 = (_mbtowc($wc$i17,$$15$ph92$us,$105)|0);
       $111 = ($110|0)<(0);
       if ($111) {
        break;
       }
       $112 = HEAP32[$wc$i17>>2]|0;
       $$0$i18$us = $112;$115 = $110;
      } else {
       $109 = $107 << 24 >> 24;
       $$0$i18$us = $109;$115 = 1;
      }
      $113 = ($$0$i18$us|0)>(0);
      if ($113) {
       $114 = (($$15$ph92$us) + ($115)|0);
       $$15$ph92$us = $114;
       continue L74;
      }
     }
    } while(0);
    $$339$us = (($$15$ph92$us) + 1|0);
    $137 = ($s$0$lcssa|0)==($$339$us|0);
    if ($137) {
     $$15$ph92$us = $s$0$lcssa;
     continue;
    } else {
     $$340$us = $$339$us;
    }
    while(1) {
     $116 = HEAP8[$$340$us>>0]|0;
     $117 = ($116<<24>>24)<(0);
     if ($117) {
      $$pn98 = $$340$us;
      $119 = (($74) - ($$pn98))|0;
      $120 = (_mbtowc($wc$i20,$$340$us,$119)|0);
      $121 = ($120|0)<(0);
      if (!($121)) {
       $122 = HEAP32[$wc$i20>>2]|0;
       $$0$i21$us = $122;
       label = 66;
      }
     } else {
      $118 = $116 << 24 >> 24;
      $$0$i21$us = $118;
      label = 66;
     }
     if ((label|0) == 66) {
      label = 0;
      $123 = ($$0$i21$us|0)<(0);
      if (!($123)) {
       $$15$ph92$us = $$340$us;
       continue L74;
      }
     }
     $$3$us = (($$340$us) + 1|0);
     $138 = ($s$0$lcssa|0)==($$3$us|0);
     if ($138) {
      $$15$ph92$us = $s$0$lcssa;
      continue L74;
     } else {
      $$340$us = $$3$us;
     }
    }
   }
   $88 = ($$lcssa>>>0)<($ptail$0$lcssa>>>0);
   if ($88) {
    $$15$ph$ph94 = $s$4$lcssa;$$pn96$in = $$lcssa;
   } else {
    $$0 = 0;
    label = 71;
    break;
   }
  }
  if ((label|0) == 71) {
   STACKTOP = sp;return ($$0|0);
  }
 }
 else if ((label|0) == 14) {
  $not$ = ($6|0)!=(0);
  $21 = $not$&1;
  $$0 = $21;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 71) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _match_bracket($p,$k) {
 $p = $p|0;
 $k = $k|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$2 = 0, $$3 = 0, $$4 = 0, $$5 = 0, $$pre = 0, $$pre2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $inv$0 = 0, $wc = 0, $wc2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $wc = sp + 4|0;
 $wc2 = sp;
 $buf = sp + 8|0;
 $0 = (($p) + 1|0);
 $1 = HEAP8[$0>>0]|0;
 if ((($1<<24>>24) == 33) | (($1<<24>>24) == 94)) {
  $2 = (($p) + 2|0);
  $$pre = HEAP8[$2>>0]|0;
  $$01 = $2;$58 = $$pre;$inv$0 = 1;
 } else {
  $$01 = $0;$58 = $1;$inv$0 = 0;
 }
 do {
  if ((($58<<24>>24) == 45)) {
   $6 = ($k|0)==(45);
   if (!($6)) {
    $8 = (($$01) + 1|0);
    $$1 = $8;
    break;
   }
   $7 = $inv$0 ^ 1;
   $$0 = $7;
   STACKTOP = sp;return ($$0|0);
  } else if ((($58<<24>>24) == 93)) {
   $3 = ($k|0)==(93);
   if (!($3)) {
    $5 = (($$01) + 1|0);
    $$1 = $5;
    break;
   }
   $4 = $inv$0 ^ 1;
   $$0 = $4;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$1 = $$01;
  }
 } while(0);
 $9 = (($$1) + -1|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10 << 24 >> 24;
 HEAP32[$wc>>2] = $11;
 $$2 = $$1;
 while(1) {
  $12 = HEAP8[$$2>>0]|0;
  if ((($12<<24>>24) == 93)) {
   $$0 = $inv$0;
   label = 34;
   break;
  } else if ((($12<<24>>24) == 91)) {
   $27 = (($$2) + 1|0);
   $28 = HEAP8[$27>>0]|0;
   if ((($28<<24>>24) == 61) | (($28<<24>>24) == 46) | (($28<<24>>24) == 58)) {
    $29 = (($$2) + 3|0);
    $$3 = $29;
    while(1) {
     $30 = (($$3) + -1|0);
     $31 = HEAP8[$30>>0]|0;
     $32 = ($31<<24>>24)==($28<<24>>24);
     if ($32) {
      $33 = HEAP8[$$3>>0]|0;
      $34 = ($33<<24>>24)==(93);
      if ($34) {
       break;
      }
     }
     $35 = (($$3) + 1|0);
     $$3 = $35;
    }
    $36 = (($$2) + 2|0);
    $37 = ($28<<24>>24)==(58);
    if ($37) {
     $38 = $30;
     $39 = $36;
     $40 = (($38) - ($39))|0;
     $41 = ($40|0)<(16);
     if ($41) {
      _memcpy(($buf|0),($36|0),($40|0))|0;
      $42 = (($buf) + ($40)|0);
      HEAP8[$42>>0] = 0;
      $43 = (_wctype($buf)|0);
      $44 = (_iswctype($k,$43)|0);
      $45 = ($44|0)==(0);
      if ($45) {
       $$5 = $$3;
      } else {
       label = 26;
       break;
      }
     } else {
      $$5 = $$3;
     }
    } else {
     $$5 = $$3;
    }
   } else {
    $49 = 91;
    label = 28;
   }
  } else if ((($12<<24>>24) == 45)) {
   $13 = (($$2) + 1|0);
   $14 = HEAP8[$13>>0]|0;
   $15 = ($14<<24>>24)==(93);
   if ($15) {
    $49 = 45;
    label = 28;
   } else {
    $16 = (_mbtowc($wc2,$13,4)|0);
    $17 = ($16|0)<(0);
    if ($17) {
     $$0 = 0;
     label = 34;
     break;
    }
    $18 = HEAP32[$wc>>2]|0;
    $19 = HEAP32[$wc2>>2]|0;
    $20 = ($18|0)>($19|0);
    if (!($20)) {
     $21 = (($k) - ($18))|0;
     $22 = (($19) - ($18))|0;
     $23 = ($21>>>0)>($22>>>0);
     if (!($23)) {
      label = 16;
      break;
     }
    }
    $25 = (($16) + -1)|0;
    $26 = (($$2) + ($25)|0);
    $$5 = $26;
   }
  } else {
   $47 = ($12<<24>>24)>(-1);
   if ($47) {
    $49 = $12;
    label = 28;
   } else {
    $50 = (_mbtowc($wc,$$2,4)|0);
    $51 = ($50|0)<(0);
    if ($51) {
     $$0 = 0;
     label = 34;
     break;
    }
    $52 = (($50) + -1)|0;
    $53 = (($$2) + ($52)|0);
    $$pre2 = HEAP32[$wc>>2]|0;
    $$4 = $53;$55 = $$pre2;
    label = 31;
   }
  }
  if ((label|0) == 28) {
   label = 0;
   $48 = $49&255;
   HEAP32[$wc>>2] = $48;
   $$4 = $$2;$55 = $48;
   label = 31;
  }
  if ((label|0) == 31) {
   label = 0;
   $54 = ($55|0)==($k|0);
   if ($54) {
    label = 32;
    break;
   } else {
    $$5 = $$4;
   }
  }
  $57 = (($$5) + 1|0);
  $$2 = $57;
 }
 if ((label|0) == 16) {
  $24 = $inv$0 ^ 1;
  $$0 = $24;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 26) {
  $46 = $inv$0 ^ 1;
  $$0 = $46;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 32) {
  $56 = $inv$0 ^ 1;
  $$0 = $56;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 34) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _glob($pat,$flags,$errfunc,$g) {
 $pat = $pat|0;
 $flags = $flags|0;
 $errfunc = $errfunc|0;
 $g = $g|0;
 var $$0 = 0, $$pre = 0, $$pre$phi36Z2D = 0, $$pre$phiZ2D = 0, $$pre32 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $cnt$016 = 0, $cnt$1 = 0, $d$0 = 0, $error$010 = 0;
 var $exitcond = 0, $head = 0, $i$1$lcssa = 0, $i$112 = 0, $ignore_err$errfunc = 0, $match$01$i = 0, $match$01$i4 = 0, $match$01$i7 = 0, $offs$0 = 0, $p$0 = 0, $p$1 = 0, $tail = 0, $tmpcast$idx$val = 0, $tmpcast$idx2$val = 0, $tmpcast$idx3$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $head = sp;
 $tail = sp + 8|0;
 $0 = 283488;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $head;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 HEAP32[$tail>>2] = $head;
 $10 = $flags & 8;
 $11 = ($10|0)==(0);
 $12 = $2;
 if ($11) {
  $26 = 0;
 } else {
  $13 = (($g) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $26 = $14;
 }
 $15 = HEAP8[$pat>>0]|0;
 $16 = ($15<<24>>24)==(47);
 L4: do {
  if ($16) {
   $18 = 47;$p$0 = $pat;
   while(1) {
    $17 = ($18<<24>>24)==(47);
    $19 = (($p$0) + 1|0);
    if (!($17)) {
     $90 = $18;$d$0 = 283496;$p$1 = $p$0;
     break L4;
    }
    $$pre32 = HEAP8[$19>>0]|0;
    $18 = $$pre32;$p$0 = $19;
   }
  } else {
   $90 = $15;$d$0 = 283504;$p$1 = $pat;
  }
 } while(0);
 $20 = (_strlen(($p$1|0))|0);
 $21 = ($20>>>0)>(4096);
 if ($21) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $22 = ($errfunc|0)==(0|0);
 $ignore_err$errfunc = $22 ? 2 : $errfunc;
 $23 = $flags & 32;
 $24 = ($23|0)!=(0);
 if ($24) {
  $29 = $90;
 } else {
  $25 = (($g) + 8|0);
  HEAP32[$25>>2] = $26;
  HEAP32[$g>>2] = 0;
  $27 = (($g) + 4|0);
  HEAP32[$27>>2] = 0;
  $$pre = HEAP8[$p$1>>0]|0;
  $29 = $$pre;
 }
 $28 = ($29<<24>>24)==(0);
 if ($28) {
  $$pre$phi36Z2D = $head;$35 = $12;$error$010 = 0;
 } else {
  $30 = (_match_in_dir($d$0,$p$1,$flags,$ignore_err$errfunc,$tail)|0);
  $31 = ($30|0)==(1);
  $tmpcast$idx3$val = HEAP32[$head>>2]|0;
  if ($31) {
   $32 = ($tmpcast$idx3$val|0)==(0|0);
   if ($32) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   } else {
    $match$01$i = $tmpcast$idx3$val;
   }
   while(1) {
    $33 = HEAP32[$match$01$i>>2]|0;
    _free($match$01$i);
    $34 = ($33|0)==(0|0);
    if ($34) {
     $$0 = 1;
     break;
    } else {
     $match$01$i = $33;
    }
   }
   STACKTOP = sp;return ($$0|0);
  } else {
   $$pre$phi36Z2D = $head;$35 = $tmpcast$idx3$val;$error$010 = $30;
  }
 }
 HEAP32[$tail>>2] = $35;
 $36 = ($35|0)==(0|0);
 if ($36) {
  label = 17;
 } else {
  $38 = $35;$cnt$016 = 0;
  while(1) {
   $37 = HEAP32[$38>>2]|0;
   $39 = (($cnt$016) + 1)|0;
   $40 = ($37|0)==(0|0);
   if ($40) {
    break;
   } else {
    $38 = $37;$cnt$016 = $39;
   }
  }
  HEAP32[$tail>>2] = 0;
  $41 = ($39|0)==(0);
  if ($41) {
   label = 17;
  } else {
   $cnt$1 = $39;
  }
 }
 do {
  if ((label|0) == 17) {
   $42 = $flags & 16;
   $43 = ($42|0)==(0);
   if ($43) {
    $$0 = 3;
    STACKTOP = sp;return ($$0|0);
   }
   HEAP32[$tail>>2] = $head;
   $44 = (_strlen(($pat|0))|0);
   $45 = (($44) + 9)|0;
   $46 = (_malloc($45)|0);
   $47 = ($46|0)==(0|0);
   if ($47) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   } else {
    HEAP32[$head>>2] = $46;
    HEAP32[$46>>2] = 0;
    $48 = (($46) + 4|0);
    (_strcpy(($48|0),($pat|0))|0);
    HEAP32[$tail>>2] = $46;
    $cnt$1 = 1;
    break;
   }
  }
 } while(0);
 do {
  if ($24) {
   $49 = (($g) + 4|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = HEAP32[$g>>2]|0;
   $52 = (($cnt$1) + ($26))|0;
   $53 = (($52) + ($51))|0;
   $54 = $53 << 2;
   $55 = (($54) + 4)|0;
   $56 = (_realloc($50,$55)|0);
   $57 = ($56|0)==(0|0);
   if (!($57)) {
    HEAP32[$49>>2] = $56;
    $61 = (($51) + ($26))|0;
    $79 = $56;$offs$0 = $61;
    break;
   }
   $tmpcast$idx2$val = HEAP32[$$pre$phi36Z2D>>2]|0;
   $58 = ($tmpcast$idx2$val|0)==(0|0);
   if ($58) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   } else {
    $match$01$i4 = $tmpcast$idx2$val;
   }
   while(1) {
    $59 = HEAP32[$match$01$i4>>2]|0;
    _free($match$01$i4);
    $60 = ($59|0)==(0|0);
    if ($60) {
     $$0 = 1;
     break;
    } else {
     $match$01$i4 = $59;
    }
   }
   STACKTOP = sp;return ($$0|0);
  } else {
   $62 = (($cnt$1) + ($26))|0;
   $63 = $62 << 2;
   $64 = (($63) + 4)|0;
   $65 = (_malloc($64)|0);
   $66 = (($g) + 4|0);
   HEAP32[$66>>2] = $65;
   $67 = ($65|0)==(0|0);
   if (!($67)) {
    $68 = ($26|0)==(0);
    if ($68) {
     $79 = $65;$offs$0 = 0;
     break;
    }
    $69 = $26 << 2;
    _memset(($65|0),0,($69|0))|0;
    $79 = $65;$offs$0 = $26;
    break;
   }
   $tmpcast$idx$val = HEAP32[$$pre$phi36Z2D>>2]|0;
   $70 = ($tmpcast$idx$val|0)==(0|0);
   if ($70) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   } else {
    $match$01$i7 = $tmpcast$idx$val;
   }
   while(1) {
    $71 = HEAP32[$match$01$i7>>2]|0;
    _free($match$01$i7);
    $72 = ($71|0)==(0|0);
    if ($72) {
     $$0 = 1;
     break;
    } else {
     $match$01$i7 = $71;
    }
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $73 = HEAP32[$$pre$phi36Z2D>>2]|0;
 HEAP32[$tail>>2] = $73;
 $74 = ($cnt$1|0)==(0);
 if ($74) {
  $i$1$lcssa = 0;
 } else {
  $76 = $73;$i$112 = 0;
  while(1) {
   $75 = (($76) + 4|0);
   $77 = (($i$112) + ($offs$0))|0;
   $78 = (($79) + ($77<<2)|0);
   HEAP32[$78>>2] = $75;
   $80 = HEAP32[$76>>2]|0;
   $81 = (($i$112) + 1)|0;
   $exitcond = ($81|0)==($cnt$1|0);
   if ($exitcond) {
    break;
   } else {
    $76 = $80;$i$112 = $81;
   }
  }
  HEAP32[$tail>>2] = $80;
  $i$1$lcssa = $cnt$1;
 }
 $82 = (($i$1$lcssa) + ($offs$0))|0;
 $83 = (($79) + ($82<<2)|0);
 HEAP32[$83>>2] = 0;
 $84 = HEAP32[$g>>2]|0;
 $85 = (($84) + ($cnt$1))|0;
 HEAP32[$g>>2] = $85;
 $86 = $flags & 4;
 $87 = ($86|0)==(0);
 if (!($87)) {
  $$0 = $error$010;
  STACKTOP = sp;return ($$0|0);
 }
 $$pre$phiZ2D = (($g) + 4|0);
 $88 = HEAP32[$$pre$phiZ2D>>2]|0;
 $89 = (($88) + ($offs$0<<2)|0);
 _qsort($89,$cnt$1,4,3);
 $$0 = $error$010;
 STACKTOP = sp;return ($$0|0);
}
function _ignore_err($path,$err) {
 $path = $path|0;
 $err = $err|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function _match_in_dir($d,$p,$flags,$errfunc,$tail) {
 $d = $d|0;
 $p = $p|0;
 $flags = $flags|0;
 $errfunc = $errfunc|0;
 $tail = $tail|0;
 var $$ = 0, $$0$i = 0, $$0$i12 = 0, $$012$i = 0, $$012$us$i = 0, $$04 = 0, $$2 = 0, $$3 = 0, $$lcssa = 0, $$lcssa24 = 0, $$sum = 0, $$sum$i = 0, $$sum$i10 = 0, $$sum$i15 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bracket$03$i = 0, $bracket$03$us$i = 0;
 var $bracket$1$i = 0, $bracket$1$us$i = 0, $de = 0, $de_buf = 0, $endptr$i = 0, $endptr$i11 = 0, $endptr$i16 = 0, $l$0 = 0, $mark$0 = 0, $name$0 = 0, $or$cond = 0, $or$cond30 = 0, $p2$0 = 0, $p2$1 = 0, $st = 0, $strlen$i = 0, $strlen$i14 = 0, $strlen$i9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0;
 $de_buf = sp + 80|0;
 $de = sp + 76|0;
 $st = sp;
 $0 = (_strlen(($p|0))|0);
 $1 = (($0) + 1)|0;
 $2 = STACKTOP; STACKTOP = STACKTOP + ((((1*$1)|0)+15)&-16)|0;;
 $3 = (_strlen(($d|0))|0);
 $4 = $flags & 64;
 $5 = $4 >>> 5;
 $6 = $flags >>> 5;
 $7 = $6 & 4;
 $8 = $7 | $5;
 $9 = $8 ^ 4;
 $10 = (_strchr($p,47)|0);
 $11 = ($10|0)==(0|0);
 if ($11) {
  $$04 = $p;$p2$1 = 0;
 } else {
  (_strcpy(($2|0),($p|0))|0);
  $12 = $10;
  $13 = $p;
  $14 = (($12) - ($13))|0;
  $15 = (($2) + ($14)|0);
  HEAP8[$15>>0] = 0;
  $p2$0 = $10;
  while(1) {
   $16 = HEAP8[$p2$0>>0]|0;
   $17 = ($16<<24>>24)==(47);
   $18 = (($p2$0) + 1|0);
   if ($17) {
    $p2$0 = $18;
   } else {
    $$04 = $2;$p2$1 = $p2$0;
    break;
   }
  }
 }
 $19 = HEAP8[$$04>>0]|0;
 $20 = ($19<<24>>24)==(0);
 L6: do {
  if ($20) {
   $$0$i = 1;
  } else {
   $21 = ($4|0)==(0);
   if ($21) {
    $$012$i = $$04;$29 = $19;$bracket$03$i = 0;
    while(1) {
     $28 = $29 << 24 >> 24;
     switch ($28|0) {
     case 93:  {
      $30 = ($bracket$03$i|0)==(0);
      if ($30) {
       $bracket$1$i = 0;
      } else {
       $$0$i = 0;
       break L6;
      }
      break;
     }
     case 42: case 63: case 92:  {
      $$0$i = 0;
      break L6;
      break;
     }
     case 91:  {
      $bracket$1$i = 1;
      break;
     }
     default: {
      $bracket$1$i = $bracket$03$i;
     }
     }
     $31 = (($$012$i) + 1|0);
     $32 = HEAP8[$31>>0]|0;
     $33 = ($32<<24>>24)==(0);
     if ($33) {
      $$0$i = 1;
      break L6;
     } else {
      $$012$i = $31;$29 = $32;$bracket$03$i = $bracket$1$i;
     }
    }
   } else {
    $$012$us$i = $$04;$23 = $19;$bracket$03$us$i = 0;
    while(1) {
     $22 = $23 << 24 >> 24;
     if ((($22|0) == 93)) {
      $24 = ($bracket$03$us$i|0)==(0);
      if ($24) {
       $bracket$1$us$i = 0;
      } else {
       $$0$i = 0;
       break L6;
      }
     } else if ((($22|0) == 91)) {
      $bracket$1$us$i = 1;
     } else if ((($22|0) == 42) | (($22|0) == 63)) {
      $$0$i = 0;
      break L6;
     } else {
      $bracket$1$us$i = $bracket$03$us$i;
     }
     $25 = (($$012$us$i) + 1|0);
     $26 = HEAP8[$25>>0]|0;
     $27 = ($26<<24>>24)==(0);
     if ($27) {
      $$0$i = 1;
      break;
     } else {
      $$012$us$i = $25;$23 = $26;$bracket$03$us$i = $bracket$1$us$i;
     }
    }
   }
  }
 } while(0);
 $34 = HEAP8[$d>>0]|0;
 $35 = ($34<<24>>24)==(47);
 if ($35) {
  $36 = (($d) + 1|0);
  $37 = HEAP8[$36>>0]|0;
  $38 = ($37<<24>>24)==(0);
  $$ = $38 ? 0 : $3;
  $l$0 = $$;
 } else {
  $l$0 = $3;
 }
 $39 = ($34<<24>>24)!=(0);
 $40 = $39 ? $d : 283512;
 $41 = (_opendir(($40|0))|0);
 $42 = (___errno_location()|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ($41|0)==(0|0);
 if ($44) {
  if ((($43|0) == 20)) {
   $$3 = 0;
   STACKTOP = sp;return ($$3|0);
  } else if ((($43|0) == 13)) {
   label = 18;
  }
  if ((label|0) == 18) {
   $45 = HEAP8[$$04>>0]|0;
   $46 = ($45<<24>>24)==(0);
   if ($46) {
    $47 = (_stat(($d|0),($st|0))|0);
    $48 = ($47|0)==(0);
    if ($48) {
     $49 = (($st) + 12|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = $50 & 61440;
     $52 = ($51|0)==(16384);
     if ($52) {
      $53 = (($l$0) + 9)|0;
      $54 = (_malloc($53)|0);
      $55 = ($54|0)==(0|0);
      if ($55) {
       $$3 = 1;
       STACKTOP = sp;return ($$3|0);
      }
      $56 = HEAP32[$tail>>2]|0;
      HEAP32[$56>>2] = $54;
      HEAP32[$54>>2] = 0;
      $57 = (($54) + 4|0);
      (_strcpy(($57|0),($d|0))|0);
      $58 = ($l$0|0)==(0);
      if (!($58)) {
       $strlen$i = (_strlen(($57|0))|0);
       $$sum$i = (($strlen$i) + 4)|0;
       $endptr$i = (($54) + ($$sum$i)|0);
       HEAP8[$endptr$i>>0]=47&255;HEAP8[$endptr$i+1>>0]=47>>8;
      }
      HEAP32[$tail>>2] = $54;
      $$3 = 0;
      STACKTOP = sp;return ($$3|0);
     }
    }
   }
  }
  $59 = (FUNCTION_TABLE_iii[$errfunc & 7]($d,$43)|0);
  $60 = ($59|0)==(0);
  if (!($60)) {
   $$3 = 2;
   STACKTOP = sp;return ($$3|0);
  }
  $61 = $flags << 1;
  $62 = $61 & 2;
  $$3 = $62;
  STACKTOP = sp;return ($$3|0);
 }
 $63 = HEAP8[$$04>>0]|0;
 $64 = ($63<<24>>24)==(0);
 if ($64) {
  $76 = (($l$0) + 9)|0;
  $77 = (_malloc($76)|0);
  $78 = ($77|0)==(0|0);
  if ($78) {
   $$0$i12 = 1;
  } else {
   $79 = HEAP32[$tail>>2]|0;
   HEAP32[$79>>2] = $77;
   HEAP32[$77>>2] = 0;
   $80 = (($77) + 4|0);
   (_strcpy(($80|0),($d|0))|0);
   $81 = ($l$0|0)==(0);
   if (!($81)) {
    $strlen$i9 = (_strlen(($80|0))|0);
    $$sum$i10 = (($strlen$i9) + 4)|0;
    $endptr$i11 = (($77) + ($$sum$i10)|0);
    HEAP8[$endptr$i11>>0]=47&255;HEAP8[$endptr$i11+1>>0]=47>>8;
   }
   HEAP32[$tail>>2] = $77;
   $$0$i12 = 0;
  }
  (_closedir(($41|0))|0);
  $$3 = $$0$i12;
  STACKTOP = sp;return ($$3|0);
 }
 $65 = (_readdir_r(($41|0),($de_buf|0),($de|0))|0);
 $66 = ($65|0)==(0);
 $67 = HEAP32[$de>>2]|0;
 $68 = ($67|0)!=(0|0);
 $or$cond30 = $66 & $68;
 L57: do {
  if ($or$cond30) {
   $69 = (($l$0) + 2)|0;
   $70 = ($$0$i|0)==(0);
   $71 = ($p2$1|0)!=(0|0);
   $72 = $flags & 2;
   $73 = ($72|0)==(0);
   $74 = (($l$0) + 10)|0;
   $75 = (($st) + 12|0);
   $$sum = (($l$0) + 1)|0;
   $83 = $67;
   L59: while(1) {
    $82 = (($83) + 8|0);
    $84 = HEAP16[$82>>1]|0;
    $85 = $84&65535;
    $86 = (($69) + ($85))|0;
    $87 = (_llvm_stacksave()|0);
    $88 = STACKTOP; STACKTOP = STACKTOP + ((((1*$86)|0)+15)&-16)|0;;
    $89 = HEAP32[$de>>2]|0;
    $90 = (($89) + 11|0);
    if ($70) {
     $91 = (_fnmatch($$04,$90,$9)|0);
     $92 = ($91|0)==(0);
     if ($92) {
      label = 38;
     }
    } else {
     $93 = (_strcmp($$04,$90)|0);
     $94 = ($93|0)==(0);
     if ($94) {
      label = 38;
     }
    }
    do {
     if ((label|0) == 38) {
      label = 0;
      if ($71) {
       $95 = HEAP32[$de>>2]|0;
       $96 = (($95) + 10|0);
       $97 = HEAP8[$96>>0]|0;
       $98 = ($97<<24>>24)==(0);
       if (!($98)) {
        $99 = $97&255;
        $100 = $99 << 12;
        $101 = $100 & 61440;
        if (!((($101|0) == 40960) | (($101|0) == 16384))) {
         break;
        }
       }
      }
      $102 = HEAP8[$d>>0]|0;
      $103 = ($102<<24>>24)==(0);
      if ($103) {
       $108 = HEAP32[$de>>2]|0;
       $109 = (($108) + 11|0);
       $name$0 = $109;
      } else {
       _memcpy(($88|0),($d|0),($l$0|0))|0;
       $104 = (($88) + ($l$0)|0);
       HEAP8[$104>>0] = 47;
       $105 = (($88) + ($$sum)|0);
       $106 = HEAP32[$de>>2]|0;
       $107 = (($106) + 11|0);
       (_strcpy(($105|0),($107|0))|0);
       $name$0 = $88;
      }
      if ($71) {
       $110 = (_match_in_dir($name$0,$p2$1,$flags,$errfunc,$tail)|0);
       $111 = ($110|0)==(0);
       if ($111) {
        break;
       } else {
        label = 46;
        break L59;
       }
      }
      do {
       if ($73) {
        $mark$0 = 0;
       } else {
        $112 = HEAP32[$de>>2]|0;
        $113 = (($112) + 10|0);
        $114 = HEAP8[$113>>0]|0;
        $115 = ($114<<24>>24)==(0);
        if (!($115)) {
         $116 = $114&255;
         $117 = $116 << 12;
         $118 = $117 & 61440;
         $119 = ($118|0)==(40960);
         if (!($119)) {
          $120 = ($118|0)==(16384);
          $121 = $120&1;
          $mark$0 = $121;
          break;
         }
        }
        (_stat(($name$0|0),($st|0))|0);
        $122 = HEAP32[$75>>2]|0;
        $123 = $122 & 61440;
        $124 = ($123|0)==(16384);
        $125 = $124&1;
        $mark$0 = $125;
       }
      } while(0);
      $126 = HEAP32[$de>>2]|0;
      $127 = (($126) + 8|0);
      $128 = HEAP16[$127>>1]|0;
      $129 = $128&65535;
      $130 = (($74) + ($129))|0;
      $131 = (_malloc($130)|0);
      $132 = ($131|0)==(0|0);
      if ($132) {
       label = 56;
       break L59;
      }
      $133 = HEAP32[$tail>>2]|0;
      HEAP32[$133>>2] = $131;
      HEAP32[$131>>2] = 0;
      $134 = (($131) + 4|0);
      (_strcpy(($134|0),($name$0|0))|0);
      $135 = ($mark$0|0)==(0);
      if (!($135)) {
       $strlen$i14 = (_strlen(($134|0))|0);
       $$sum$i15 = (($strlen$i14) + 4)|0;
       $endptr$i16 = (($131) + ($$sum$i15)|0);
       HEAP8[$endptr$i16>>0]=47&255;HEAP8[$endptr$i16+1>>0]=47>>8;
      }
      HEAP32[$tail>>2] = $131;
     }
    } while(0);
    _llvm_stackrestore(($87|0));
    $136 = (_readdir_r(($41|0),($de_buf|0),($de|0))|0);
    $137 = ($136|0)==(0);
    $138 = HEAP32[$de>>2]|0;
    $139 = ($138|0)!=(0|0);
    $or$cond = $137 & $139;
    if ($or$cond) {
     $83 = $138;
    } else {
     $$lcssa = $136;$$lcssa24 = $137;
     break L57;
    }
   }
   if ((label|0) == 46) {
    (_closedir(($41|0))|0);
    $$2 = $110;
   }
   else if ((label|0) == 56) {
    (_closedir(($41|0))|0);
    $$2 = 1;
   }
   _llvm_stackrestore(($87|0));
   $$3 = $$2;
   STACKTOP = sp;return ($$3|0);
  } else {
   $$lcssa = $65;$$lcssa24 = $66;
  }
 } while(0);
 (_closedir(($41|0))|0);
 if (!($$lcssa24)) {
  $140 = (FUNCTION_TABLE_iii[$errfunc & 7]($d,$$lcssa)|0);
  $141 = ($140|0)==(0);
  if (!($141)) {
   $$3 = 2;
   STACKTOP = sp;return ($$3|0);
  }
  $142 = $flags & 1;
  $143 = ($142|0)==(0);
  if (!($143)) {
   $$3 = 2;
   STACKTOP = sp;return ($$3|0);
  }
 }
 $$3 = 0;
 STACKTOP = sp;return ($$3|0);
}
function _sort($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$a>>2]|0;
 $1 = HEAP32[$b>>2]|0;
 $2 = (_strcmp($0,$1)|0);
 STACKTOP = sp;return ($2|0);
}
function _globfree($g) {
 $g = $g|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$g>>2]|0;
 $1 = ($0|0)==(0);
 if ($1) {
  $$pre = (($g) + 4|0);
  $$pre$phiZ2D = $$pre;
 } else {
  $2 = (($g) + 8|0);
  $3 = (($g) + 4|0);
  $i$01 = 0;
  while(1) {
   $4 = HEAP32[$2>>2]|0;
   $5 = (($4) + ($i$01))|0;
   $6 = HEAP32[$3>>2]|0;
   $7 = (($6) + ($5<<2)|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = (($8) + -4|0);
   _free($9);
   $10 = (($i$01) + 1)|0;
   $11 = HEAP32[$g>>2]|0;
   $12 = ($10>>>0)<($11>>>0);
   if ($12) {
    $i$01 = $10;
   } else {
    $$pre$phiZ2D = $3;
    break;
   }
  }
 }
 $13 = HEAP32[$$pre$phiZ2D>>2]|0;
 _free($13);
 HEAP32[$g>>2] = 0;
 HEAP32[$$pre$phiZ2D>>2] = 0;
 STACKTOP = sp;return;
}
function _regcomp($preg,$regex,$cflags) {
 $preg = $preg|0;
 $regex = $regex|0;
 $cflags = $cflags|0;
 var $$$i = 0, $$0 = 0, $$0$i1 = 0, $$be = 0, $$lcssa52 = 0, $$lobit = 0, $$lobit$not = 0, $$op = 0, $$pre = 0, $$pre$i = 0, $$pre$phi45$iZ2D = 0, $$pre$pre$i = 0, $$pre43$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0;
 var $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0;
 var $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0;
 var $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0;
 var $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0;
 var $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0;
 var $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0;
 var $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0;
 var $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0;
 var $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0;
 var $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0;
 var $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0;
 var $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0;
 var $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0;
 var $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0;
 var $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0;
 var $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0;
 var $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0;
 var $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0;
 var $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add$0$lcssa = 0, $add$028 = 0, $assertions$i = 0, $copy$i = 0, $copy3$i = 0;
 var $counts$0 = 0, $errcode$0 = 0, $i$127 = 0, $i$2$lcssa = 0, $i$221 = 0, $i$3$lcssa = 0, $i$319 = 0, $iter_depth$041$i$be = 0, $iter_depth$041$i82 = 0, $j$0 = 0, $j$0$i57 = 0, $j$124$i = 0, $num_tags$i = 0, $offs$0 = 0, $or$cond1$i = 0, $p$022 = 0, $parse_ctx = 0, $phitmp = 0, $phitmp124 = 0, $pos_add_save$0$i$lcssa = 0;
 var $pos_add_save$2$i = 0, $pos_add_total$042$i$be = 0, $pos_add_total$042$i$lcssa = 0, $pos_add_total$042$i81 = 0, $seq1$0$i$lcssa = 0, $seq1$0$i56 = 0, $seq1$1$i = 0, $seq1$2$i = 0, $seq1$211$i = 0, $seq2$i = 0, $stack$idx$val$i = 0, $stack$idx$val$i7 = 0, $stack$idx$val$i80 = 0, $stack$idx$val$i83 = 0, $stack$idx$val21$i = 0, $stack$idx1$val$i = 0, $stack$idx2$i = 0, $stack$idx2$val$i = 0, $status$0$be$i = 0, $status$0$lcssa$i = 0;
 var $tag_directions$0 = 0, $tag_directions$1 = 0, $tnfa$0 = 0, $value$c$i$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $num_tags$i = sp + 60|0;
 $assertions$i = sp + 56|0;
 $seq2$i = sp + 52|0;
 $copy$i = sp + 48|0;
 $copy3$i = sp + 44|0;
 $parse_ctx = sp;
 $0 = (_malloc(20)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 12;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (_malloc(2048)|0);
 $3 = (($0) + 16|0);
 HEAP32[$3>>2] = $2;
 $4 = ($2|0)==(0|0);
 if ($4) {
  _free($0);
  $$0 = 12;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$0>>2] = 512;
 $5 = (($0) + 4|0);
 HEAP32[$5>>2] = 10240;
 $6 = (($0) + 8|0);
 HEAP32[$6>>2] = 128;
 $7 = (($0) + 12|0);
 HEAP32[$7>>2] = 0;
 $8 = (___tre_mem_new_impl(0,0)|0);
 $9 = ($8|0)==(0|0);
 if ($9) {
  $10 = (($0) + 16|0);
  $11 = HEAP32[$10>>2]|0;
  _free($11);
  _free($0);
  $$0 = 12;
  STACKTOP = sp;return ($$0|0);
 }
 dest=$parse_ctx+0|0; stop=dest+44|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$parse_ctx>>2] = $8;
 $12 = (($parse_ctx) + 4|0);
 HEAP32[$12>>2] = $0;
 $13 = (($parse_ctx) + 12|0);
 HEAP32[$13>>2] = $regex;
 $14 = (($parse_ctx) + 36|0);
 HEAP32[$14>>2] = $cflags;
 $15 = (($parse_ctx) + 28|0);
 HEAP32[$15>>2] = -1;
 $16 = (_tre_parse($parse_ctx)|0);
 $17 = ($16|0)==(0);
 L12: do {
  if ($17) {
   $18 = (($parse_ctx) + 20|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (($19) + -1)|0;
   HEAP32[$preg>>2] = $20;
   $21 = (($parse_ctx) + 8|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = HEAP32[$15>>2]|0;
   $24 = ($23|0)>(-1);
   if ($24) {
    $25 = (($parse_ctx) + 32|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = ($26|0)==(0);
    if (!($27)) {
     $counts$0 = 0;$errcode$0 = 2;$offs$0 = 0;$tnfa$0 = 0;
     break;
    }
   }
   $28 = ($23|0)>($20|0);
   if ($28) {
    $counts$0 = 0;$errcode$0 = 6;$offs$0 = 0;$tnfa$0 = 0;
   } else {
    $29 = (_calloc(1,68)|0);
    $30 = ($29|0)==(0|0);
    if ($30) {
     $counts$0 = 0;$errcode$0 = 12;$offs$0 = 0;$tnfa$0 = $29;
    } else {
     $$lobit = $23 >>> 31;
     $$lobit$not = $$lobit ^ 1;
     $31 = (($29) + 60|0);
     HEAP32[$31>>2] = $$lobit$not;
     $32 = (($parse_ctx) + 32|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = (($29) + 64|0);
     HEAP32[$34>>2] = $33;
     $35 = (($29) + 28|0);
     HEAP32[$35>>2] = $19;
     $36 = ($$lobit|0)==(1);
     if ($36) {
      $37 = $cflags & 8;
      $38 = ($37|0)==(0);
      if ($38) {
       label = 13;
      } else {
       $tag_directions$1 = 0;
      }
     } else {
      label = 13;
     }
     if ((label|0) == 13) {
      $39 = (_tre_add_tags(0,$0,$22,$29)|0);
      $40 = ($39|0)==(0);
      if (!($40)) {
       $counts$0 = 0;$errcode$0 = $39;$offs$0 = 0;$tnfa$0 = $29;
       break;
      }
      $41 = (($29) + 40|0);
      $42 = HEAP32[$41>>2]|0;
      $43 = ($42|0)>(0);
      if ($43) {
       $44 = $42 << 2;
       $45 = (($44) + 4)|0;
       $46 = (_malloc($45)|0);
       $47 = ($46|0)==(0|0);
       if ($47) {
        $counts$0 = 0;$errcode$0 = 12;$offs$0 = 0;$tnfa$0 = $29;
        break;
       }
       $48 = (($29) + 32|0);
       HEAP32[$48>>2] = $46;
       _memset(($46|0),-1,($45|0))|0;
       $tag_directions$0 = $46;
      } else {
       $tag_directions$0 = 0;
      }
      $49 = $42 << 1;
      $50 = $49 | 1;
      $51 = (_calloc($50,4)|0);
      $52 = (($29) + 36|0);
      HEAP32[$52>>2] = $51;
      $53 = ($51|0)==(0|0);
      if ($53) {
       $counts$0 = 0;$errcode$0 = 12;$offs$0 = 0;$tnfa$0 = $29;
       break;
      }
      $54 = HEAP32[$18>>2]|0;
      $55 = (_calloc($54,12)|0);
      $56 = ($55|0)==(0|0);
      if ($56) {
       $counts$0 = 0;$errcode$0 = 12;$offs$0 = 0;$tnfa$0 = $29;
       break;
      }
      $57 = (($29) + 16|0);
      HEAP32[$57>>2] = $55;
      $58 = (_tre_add_tags($8,$0,$22,$29)|0);
      $59 = ($58|0)==(0);
      if ($59) {
       $tag_directions$1 = $tag_directions$0;
      } else {
       $counts$0 = 0;$errcode$0 = $58;$offs$0 = 0;$tnfa$0 = $29;
       break;
      }
     }
     $60 = (($parse_ctx) + 24|0);
     $stack$idx2$i = (($0) + 12|0);
     $stack$idx2$val$i = HEAP32[$stack$idx2$i>>2]|0;
     HEAP32[$num_tags$i>>2] = 0;
     HEAP32[$assertions$i>>2] = 0;
     $61 = (_tre_stack_push($0,$22)|0);
     $62 = ($61|0)==(0);
     L31: do {
      if ($62) {
       $63 = (_tre_stack_push($0,0)|0);
       $64 = ($63|0)==(0);
       if ($64) {
        $65 = (($0) + 16|0);
        $stack$idx$val$i80 = HEAP32[$stack$idx2$i>>2]|0;
        $66 = ($stack$idx$val$i80|0)>($stack$idx2$val$i|0);
        L34: do {
         if ($66) {
          $85 = 0;$iter_depth$041$i82 = 0;$pos_add_total$042$i81 = 0;$stack$idx$val$i83 = $stack$idx$val$i80;
          L35: while(1) {
           $67 = (($stack$idx$val$i83) + -1)|0;
           HEAP32[$stack$idx2$i>>2] = $67;
           $68 = HEAP32[$65>>2]|0;
           $69 = (($68) + ($67<<2)|0);
           $70 = HEAP32[$69>>2]|0;
           $71 = (($stack$idx$val$i83) + -2)|0;
           HEAP32[$stack$idx2$i>>2] = $71;
           $72 = (($68) + ($71<<2)|0);
           $73 = HEAP32[$72>>2]|0;
           do {
            if ((($70|0) == 1)) {
             $132 = (($73) + 4|0);
             $133 = HEAP32[$132>>2]|0;
             $134 = (($stack$idx$val$i83) + -3)|0;
             HEAP32[$stack$idx2$i>>2] = $134;
             $135 = (($68) + ($134<<2)|0);
             $136 = HEAP32[$135>>2]|0;
             HEAP32[$num_tags$i>>2] = $136;
             $137 = (($133) + 4|0);
             $138 = HEAP32[$137>>2]|0;
             $139 = ($138|0)>(1);
             if ($139) {
              HEAP32[$seq2$i>>2] = 0;
              $148 = $133;
              label = 51;
             } else {
              $140 = (($133) + 8|0);
              $141 = HEAP32[$140>>2]|0;
              $142 = ($141|0)>(1);
              if ($142) {
               HEAP32[$seq2$i>>2] = 0;
               $143 = ($138|0)>(0);
               if ($143) {
                $148 = $133;
                label = 51;
               } else {
                $$lcssa52 = $138;$176 = $133;$pos_add_save$0$i$lcssa = $136;$seq1$0$i$lcssa = 0;
                label = 60;
               }
              } else {
               $270 = $136;
              }
             }
             L43: do {
              if ((label|0) == 51) {
               label = 0;
               $145 = $138;$641 = $136;$j$0$i57 = 1;$seq1$0$i56 = 0;
               while(1) {
                $144 = ($j$0$i57|0)<($145|0);
                $146 = $144 ? 1 : 2;
                $147 = HEAP32[$148>>2]|0;
                $149 = (_tre_copy_ast($8,$0,$147,$146,$num_tags$i,$tag_directions$1,$copy$i,$assertions$i)|0);
                $150 = ($149|0)==(0);
                if (!($150)) {
                 $$0$i1 = $149;
                 break L31;
                }
                $151 = ($seq1$0$i56|0)==(0|0);
                $152 = HEAP32[$copy$i>>2]|0;
                if ($151) {
                 $seq1$1$i = $152;
                } else {
                 $153 = (___tre_mem_alloc_impl($8,0,0,1,32)|0);
                 $154 = ($153|0)==(0|0);
                 if ($154) {
                  $$0$i1 = 12;
                  break L31;
                 }
                 $155 = (___tre_mem_alloc_impl($8,0,0,1,8)|0);
                 $156 = (($153) + 4|0);
                 HEAP32[$156>>2] = $155;
                 $157 = ($155|0)==(0|0);
                 if ($157) {
                  $$0$i1 = 12;
                  break L31;
                 }
                 HEAP32[$153>>2] = 1;
                 $158 = (($153) + 8|0);
                 HEAP32[$158>>2] = -1;
                 $159 = (($153) + 12|0);
                 HEAP32[$159>>2] = -1;
                 HEAP32[$155>>2] = $seq1$0$i56;
                 $160 = HEAP32[$156>>2]|0;
                 $161 = (($160) + 4|0);
                 HEAP32[$161>>2] = $152;
                 $162 = (($seq1$0$i56) + 16|0);
                 $163 = HEAP32[$162>>2]|0;
                 $164 = (($152) + 16|0);
                 $165 = HEAP32[$164>>2]|0;
                 $166 = (($165) + ($163))|0;
                 $167 = (($153) + 16|0);
                 HEAP32[$167>>2] = $166;
                 $seq1$1$i = $153;
                }
                $168 = ($seq1$1$i|0)==(0|0);
                if ($168) {
                 $$0$i1 = 12;
                 break L31;
                }
                $$pre$i = HEAP32[$137>>2]|0;
                $169 = ($j$0$i57|0)<($$pre$i|0);
                if (!($169)) {
                 $$lcssa52 = $$pre$i;$176 = $148;$pos_add_save$0$i$lcssa = $641;$seq1$0$i$lcssa = $seq1$1$i;
                 label = 60;
                 break L43;
                }
                $$pre = HEAP32[$num_tags$i>>2]|0;
                $phitmp124 = (($j$0$i57) + 1)|0;
                $145 = $$pre$i;$641 = $$pre;$j$0$i57 = $phitmp124;$seq1$0$i56 = $seq1$1$i;
               }
              }
             } while(0);
             if ((label|0) == 60) {
              label = 0;
              $170 = (($133) + 8|0);
              $171 = HEAP32[$170>>2]|0;
              $172 = ($171|0)==(-1);
              do {
               if ($172) {
                $174 = HEAP32[$num_tags$i>>2]|0;
                $175 = HEAP32[$176>>2]|0;
                $177 = (_tre_copy_ast($8,$0,$175,0,$num_tags$i,0,$seq2$i,$assertions$i)|0);
                $178 = ($177|0)==(0);
                if (!($178)) {
                 $$0$i1 = $177;
                 break L31;
                }
                $179 = HEAP32[$seq2$i>>2]|0;
                $180 = (___tre_mem_alloc_impl($8,0,0,1,32)|0);
                $181 = ($180|0)==(0|0);
                if ($181) {
                 label = 65;
                 break L35;
                }
                $182 = (___tre_mem_alloc_impl($8,0,0,1,16)|0);
                $183 = (($180) + 4|0);
                HEAP32[$183>>2] = $182;
                $184 = ($182|0)==(0|0);
                if ($184) {
                 label = 65;
                 break L35;
                }
                HEAP32[$180>>2] = 2;
                $185 = (($180) + 8|0);
                HEAP32[$185>>2] = -1;
                $186 = (($180) + 12|0);
                HEAP32[$186>>2] = -1;
                HEAP32[$182>>2] = $179;
                $187 = (($182) + 4|0);
                HEAP32[$187>>2] = 0;
                $188 = (($182) + 8|0);
                HEAP32[$188>>2] = -1;
                $189 = (($182) + 12|0);
                $190 = HEAP8[$189>>0]|0;
                $191 = $190 & -2;
                HEAP8[$189>>0] = $191;
                $192 = (($179) + 16|0);
                $193 = HEAP32[$192>>2]|0;
                $194 = (($180) + 16|0);
                HEAP32[$194>>2] = $193;
                HEAP32[$seq2$i>>2] = $180;
                $248 = $180;$pos_add_save$2$i = $174;
               } else {
                $173 = ($$lcssa52|0)<($171|0);
                if ($173) {
                 $218 = 0;$j$124$i = $$lcssa52;
                } else {
                 $248 = 0;$pos_add_save$2$i = $pos_add_save$0$i$lcssa;
                 break;
                }
                while(1) {
                 $213 = HEAP32[$num_tags$i>>2]|0;
                 $214 = HEAP32[$176>>2]|0;
                 $215 = (_tre_copy_ast($8,$0,$214,0,$num_tags$i,0,$copy3$i,$assertions$i)|0);
                 $216 = ($215|0)==(0);
                 if (!($216)) {
                  $$0$i1 = $215;
                  break L31;
                 }
                 $217 = ($218|0)==(0|0);
                 $219 = HEAP32[$copy3$i>>2]|0;
                 if ($217) {
                  $203 = $219;
                 } else {
                  $220 = (___tre_mem_alloc_impl($8,0,0,1,32)|0);
                  $221 = ($220|0)==(0|0);
                  if ($221) {
                   label = 73;
                   break L35;
                  }
                  $222 = (___tre_mem_alloc_impl($8,0,0,1,8)|0);
                  $223 = (($220) + 4|0);
                  HEAP32[$223>>2] = $222;
                  $224 = ($222|0)==(0|0);
                  if ($224) {
                   label = 73;
                   break L35;
                  }
                  HEAP32[$220>>2] = 1;
                  $225 = (($220) + 8|0);
                  HEAP32[$225>>2] = -1;
                  $226 = (($220) + 12|0);
                  HEAP32[$226>>2] = -1;
                  HEAP32[$222>>2] = $219;
                  $227 = HEAP32[$223>>2]|0;
                  $228 = (($227) + 4|0);
                  HEAP32[$228>>2] = $218;
                  $229 = (($219) + 16|0);
                  $230 = HEAP32[$229>>2]|0;
                  $231 = (($218) + 16|0);
                  $232 = HEAP32[$231>>2]|0;
                  $233 = (($232) + ($230))|0;
                  $234 = (($220) + 16|0);
                  HEAP32[$234>>2] = $233;
                  $203 = $220;
                 }
                 HEAP32[$seq2$i>>2] = $203;
                 $235 = ($203|0)==(0|0);
                 if ($235) {
                  $$0$i1 = 12;
                  break L31;
                 }
                 $198 = (___tre_mem_alloc_impl($8,0,0,1,32)|0);
                 $236 = ($198|0)==(0|0);
                 if ($236) {
                  $$0$i1 = 12;
                  break L31;
                 }
                 $237 = (___tre_mem_alloc_impl($8,0,0,1,20)|0);
                 $238 = (($198) + 4|0);
                 HEAP32[$238>>2] = $237;
                 $239 = ($237|0)==(0|0);
                 if ($239) {
                  $$0$i1 = 12;
                  break L31;
                 }
                 HEAP32[$198>>2] = 0;
                 $240 = (($198) + 8|0);
                 HEAP32[$240>>2] = -1;
                 $241 = (($198) + 12|0);
                 HEAP32[$241>>2] = -1;
                 HEAP32[$237>>2] = -1;
                 $242 = (($237) + 4|0);
                 HEAP32[$242>>2] = -1;
                 $243 = (($237) + 8|0);
                 HEAP32[$243>>2] = -1;
                 $195 = (___tre_mem_alloc_impl($8,0,0,1,32)|0);
                 $244 = ($195|0)==(0|0);
                 if ($244) {
                  label = 79;
                  break L35;
                 }
                 $199 = (___tre_mem_alloc_impl($8,0,0,1,8)|0);
                 $201 = (($195) + 4|0);
                 HEAP32[$201>>2] = $199;
                 $245 = ($199|0)==(0|0);
                 if ($245) {
                  label = 79;
                  break L35;
                 }
                 HEAP32[$195>>2] = 3;
                 $196 = (($195) + 8|0);
                 HEAP32[$196>>2] = -1;
                 $197 = (($195) + 12|0);
                 HEAP32[$197>>2] = -1;
                 HEAP32[$199>>2] = $198;
                 $200 = HEAP32[$201>>2]|0;
                 $202 = (($200) + 4|0);
                 HEAP32[$202>>2] = $203;
                 $204 = (($198) + 16|0);
                 $205 = HEAP32[$204>>2]|0;
                 $206 = (($203) + 16|0);
                 $207 = HEAP32[$206>>2]|0;
                 $208 = (($207) + ($205))|0;
                 $209 = (($195) + 16|0);
                 HEAP32[$209>>2] = $208;
                 HEAP32[$seq2$i>>2] = $195;
                 $210 = (($j$124$i) + 1)|0;
                 $211 = HEAP32[$170>>2]|0;
                 $212 = ($210|0)<($211|0);
                 if ($212) {
                  $218 = $195;$j$124$i = $210;
                 } else {
                  $248 = $195;$pos_add_save$2$i = $213;
                  break;
                 }
                }
               }
              } while(0);
              HEAP32[$num_tags$i>>2] = $pos_add_save$2$i;
              $246 = ($seq1$0$i$lcssa|0)==(0|0);
              do {
               if ($246) {
                $seq1$2$i = $248;
                label = 85;
               } else {
                $247 = ($248|0)==(0|0);
                if ($247) {
                 $seq1$211$i = $seq1$0$i$lcssa;
                 break;
                }
                $249 = (___tre_mem_alloc_impl($8,0,0,1,32)|0);
                $250 = ($249|0)==(0|0);
                if ($250) {
                 $$0$i1 = 12;
                 break L31;
                }
                $251 = (___tre_mem_alloc_impl($8,0,0,1,8)|0);
                $252 = (($249) + 4|0);
                HEAP32[$252>>2] = $251;
                $253 = ($251|0)==(0|0);
                if ($253) {
                 $$0$i1 = 12;
                 break L31;
                }
                HEAP32[$249>>2] = 1;
                $254 = (($249) + 8|0);
                HEAP32[$254>>2] = -1;
                $255 = (($249) + 12|0);
                HEAP32[$255>>2] = -1;
                HEAP32[$251>>2] = $seq1$0$i$lcssa;
                $256 = HEAP32[$252>>2]|0;
                $257 = (($256) + 4|0);
                HEAP32[$257>>2] = $248;
                $258 = (($seq1$0$i$lcssa) + 16|0);
                $259 = HEAP32[$258>>2]|0;
                $260 = (($248) + 16|0);
                $261 = HEAP32[$260>>2]|0;
                $262 = (($261) + ($259))|0;
                $263 = (($249) + 16|0);
                HEAP32[$263>>2] = $262;
                $seq1$2$i = $249;
                label = 85;
               }
              } while(0);
              if ((label|0) == 85) {
               label = 0;
               $264 = ($seq1$2$i|0)==(0|0);
               if ($264) {
                $$0$i1 = 12;
                break L31;
               } else {
                $seq1$211$i = $seq1$2$i;
               }
              }
              $265 = (($seq1$211$i) + 4|0);
              $266 = HEAP32[$265>>2]|0;
              HEAP32[$132>>2] = $266;
              $267 = HEAP32[$seq1$211$i>>2]|0;
              HEAP32[$73>>2] = $267;
              $270 = $pos_add_save$2$i;
             }
             $268 = (($iter_depth$041$i82) + -1)|0;
             $269 = (($270) - ($136))|0;
             $271 = (($269) + ($pos_add_total$042$i81))|0;
             $272 = ($268|0)==(0);
             if ($272) {
              HEAP32[$num_tags$i>>2] = $271;
              $$be = $271;$iter_depth$041$i$be = 0;$pos_add_total$042$i$be = $271;
             } else {
              $$be = $270;$iter_depth$041$i$be = $268;$pos_add_total$042$i$be = $271;
             }
            } else if ((($70|0) == 0)) {
             $76 = HEAP32[$73>>2]|0;
             if ((($76|0) == 2)) {
              $112 = (($73) + 4|0);
              $113 = HEAP32[$112>>2]|0;
              $value$c$i$i = $85;
              $114 = (_tre_stack_push($0,$value$c$i$i)|0);
              $115 = ($114|0)==(0);
              if (!($115)) {
               $pos_add_total$042$i$lcssa = $pos_add_total$042$i81;$status$0$lcssa$i = $114;
               break L34;
              }
              $116 = (_tre_stack_push($0,$73)|0);
              $117 = ($116|0)==(0);
              if (!($117)) {
               $pos_add_total$042$i$lcssa = $pos_add_total$042$i81;$status$0$lcssa$i = $116;
               break L34;
              }
              $118 = (_tre_stack_push($0,(1))|0);
              $119 = ($118|0)==(0);
              if (!($119)) {
               $pos_add_total$042$i$lcssa = $pos_add_total$042$i81;$status$0$lcssa$i = $118;
               break L34;
              }
              $120 = HEAP32[$113>>2]|0;
              $121 = (_tre_stack_push($0,$120)|0);
              $122 = ($121|0)==(0);
              if (!($122)) {
               $pos_add_total$042$i$lcssa = $pos_add_total$042$i81;$status$0$lcssa$i = $121;
               break L34;
              }
              $123 = (_tre_stack_push($0,0)|0);
              $124 = ($123|0)==(0);
              if (!($124)) {
               $pos_add_total$042$i$lcssa = $pos_add_total$042$i81;$status$0$lcssa$i = $123;
               break L34;
              }
              $125 = (($113) + 4|0);
              $126 = HEAP32[$125>>2]|0;
              $127 = ($126|0)>(1);
              if ($127) {
               label = 45;
              } else {
               $128 = (($113) + 8|0);
               $129 = HEAP32[$128>>2]|0;
               $130 = ($129|0)>(1);
               if ($130) {
                label = 45;
               } else {
                $640 = $85;
               }
              }
              if ((label|0) == 45) {
               label = 0;
               HEAP32[$num_tags$i>>2] = 0;
               $640 = 0;
              }
              $131 = (($iter_depth$041$i82) + 1)|0;
              $$be = $640;$iter_depth$041$i$be = $131;$pos_add_total$042$i$be = $pos_add_total$042$i81;
              break;
             } else if ((($76|0) == 1)) {
              $100 = (($73) + 4|0);
              $101 = HEAP32[$100>>2]|0;
              $102 = (($101) + 4|0);
              $103 = HEAP32[$102>>2]|0;
              $104 = (_tre_stack_push($0,$103)|0);
              $105 = ($104|0)==(0);
              if (!($105)) {
               $pos_add_total$042$i$lcssa = $pos_add_total$042$i81;$status$0$lcssa$i = $104;
               break L34;
              }
              $106 = (_tre_stack_push($0,0)|0);
              $107 = ($106|0)==(0);
              if (!($107)) {
               $pos_add_total$042$i$lcssa = $pos_add_total$042$i81;$status$0$lcssa$i = $106;
               break L34;
              }
              $108 = HEAP32[$101>>2]|0;
              $109 = (_tre_stack_push($0,$108)|0);
              $110 = ($109|0)==(0);
              if (!($110)) {
               $pos_add_total$042$i$lcssa = $pos_add_total$042$i81;$status$0$lcssa$i = $109;
               break L34;
              }
              $111 = (_tre_stack_push($0,0)|0);
              $status$0$be$i = $111;
             } else if ((($76|0) == 3)) {
              $88 = (($73) + 4|0);
              $89 = HEAP32[$88>>2]|0;
              $90 = (($89) + 4|0);
              $91 = HEAP32[$90>>2]|0;
              $92 = (_tre_stack_push($0,$91)|0);
              $93 = ($92|0)==(0);
              if (!($93)) {
               $pos_add_total$042$i$lcssa = $pos_add_total$042$i81;$status$0$lcssa$i = $92;
               break L34;
              }
              $94 = (_tre_stack_push($0,0)|0);
              $95 = ($94|0)==(0);
              if (!($95)) {
               $pos_add_total$042$i$lcssa = $pos_add_total$042$i81;$status$0$lcssa$i = $94;
               break L34;
              }
              $96 = HEAP32[$89>>2]|0;
              $97 = (_tre_stack_push($0,$96)|0);
              $98 = ($97|0)==(0);
              if (!($98)) {
               $pos_add_total$042$i$lcssa = $pos_add_total$042$i81;$status$0$lcssa$i = $97;
               break L34;
              }
              $99 = (_tre_stack_push($0,0)|0);
              $status$0$be$i = $99;
             } else if ((($76|0) == 0)) {
              $77 = (($73) + 4|0);
              $78 = HEAP32[$77>>2]|0;
              $79 = HEAP32[$78>>2]|0;
              $80 = ($79|0)>(-1);
              $81 = ($79|0)==(-4);
              $or$cond1$i = $80 | $81;
              if (!($or$cond1$i)) {
               $$be = $85;$iter_depth$041$i$be = $iter_depth$041$i82;$pos_add_total$042$i$be = $pos_add_total$042$i81;
               break;
              }
              $82 = (($78) + 8|0);
              $83 = HEAP32[$82>>2]|0;
              $84 = (($83) + ($85))|0;
              HEAP32[$82>>2] = $84;
              $86 = HEAP32[$assertions$i>>2]|0;
              $87 = ($84|0)>($86|0);
              if (!($87)) {
               $$be = $85;$iter_depth$041$i$be = $iter_depth$041$i82;$pos_add_total$042$i$be = $pos_add_total$042$i81;
               break;
              }
              HEAP32[$assertions$i>>2] = $84;
              $$be = $85;$iter_depth$041$i$be = $iter_depth$041$i82;$pos_add_total$042$i$be = $pos_add_total$042$i81;
              break;
             } else {
              $$be = $85;$iter_depth$041$i$be = $iter_depth$041$i82;$pos_add_total$042$i$be = $pos_add_total$042$i81;
              break;
             }
             $75 = ($status$0$be$i|0)==(0);
             if ($75) {
              $$be = $85;$iter_depth$041$i$be = $iter_depth$041$i82;$pos_add_total$042$i$be = $pos_add_total$042$i81;
             } else {
              $pos_add_total$042$i$lcssa = $pos_add_total$042$i81;$status$0$lcssa$i = $status$0$be$i;
              break L34;
             }
            } else {
             $$be = $85;$iter_depth$041$i$be = $iter_depth$041$i82;$pos_add_total$042$i$be = $pos_add_total$042$i81;
            }
           } while(0);
           $stack$idx$val$i = HEAP32[$stack$idx2$i>>2]|0;
           $74 = ($stack$idx$val$i|0)>($stack$idx2$val$i|0);
           if ($74) {
            $85 = $$be;$iter_depth$041$i82 = $iter_depth$041$i$be;$pos_add_total$042$i81 = $pos_add_total$042$i$be;$stack$idx$val$i83 = $stack$idx$val$i;
           } else {
            $pos_add_total$042$i$lcssa = $pos_add_total$042$i$be;$status$0$lcssa$i = 0;
            break L34;
           }
          }
          if ((label|0) == 65) {
           HEAP32[$seq2$i>>2] = 0;
           $$0$i1 = 12;
           break L31;
          }
          else if ((label|0) == 73) {
           HEAP32[$seq2$i>>2] = 0;
           $$0$i1 = 12;
           break L31;
          }
          else if ((label|0) == 79) {
           HEAP32[$seq2$i>>2] = 0;
           $$0$i1 = 12;
           break L31;
          }
         } else {
          $pos_add_total$042$i$lcssa = 0;$status$0$lcssa$i = 0;
         }
        } while(0);
        $273 = HEAP32[$60>>2]|0;
        $274 = (($273) + ($pos_add_total$042$i$lcssa))|0;
        $275 = HEAP32[$assertions$i>>2]|0;
        $276 = ($275|0)>($274|0);
        $$$i = $276 ? $275 : $274;
        HEAP32[$60>>2] = $$$i;
        $$0$i1 = $status$0$lcssa$i;
       } else {
        $$0$i1 = $63;
       }
      } else {
       $$0$i1 = $61;
      }
     } while(0);
     $277 = ($$0$i1|0)==(0);
     if ($277) {
      $278 = HEAP32[$60>>2]|0;
      $279 = (($278) + 1)|0;
      HEAP32[$60>>2] = $279;
      $280 = (___tre_mem_alloc_impl($8,0,0,1,32)|0);
      $281 = ($280|0)==(0|0);
      if ($281) {
       $counts$0 = 0;$errcode$0 = 12;$offs$0 = 0;$tnfa$0 = $29;
      } else {
       $282 = (___tre_mem_alloc_impl($8,0,0,1,20)|0);
       $283 = (($280) + 4|0);
       HEAP32[$283>>2] = $282;
       $284 = ($282|0)==(0|0);
       if ($284) {
        $counts$0 = 0;$errcode$0 = 12;$offs$0 = 0;$tnfa$0 = $29;
       } else {
        HEAP32[$280>>2] = 0;
        $285 = (($280) + 8|0);
        HEAP32[$285>>2] = -1;
        $286 = (($280) + 12|0);
        HEAP32[$286>>2] = -1;
        HEAP32[$282>>2] = 0;
        $287 = (($282) + 4|0);
        HEAP32[$287>>2] = 0;
        $288 = (($282) + 8|0);
        HEAP32[$288>>2] = $278;
        $289 = (___tre_mem_alloc_impl($8,0,0,1,32)|0);
        $290 = ($289|0)==(0|0);
        if ($290) {
         $counts$0 = 0;$errcode$0 = 12;$offs$0 = 0;$tnfa$0 = $29;
        } else {
         $291 = (___tre_mem_alloc_impl($8,0,0,1,8)|0);
         $292 = (($289) + 4|0);
         HEAP32[$292>>2] = $291;
         $293 = ($291|0)==(0|0);
         if ($293) {
          $counts$0 = 0;$errcode$0 = 12;$offs$0 = 0;$tnfa$0 = $29;
         } else {
          HEAP32[$289>>2] = 1;
          $294 = (($289) + 8|0);
          HEAP32[$294>>2] = -1;
          $295 = (($289) + 12|0);
          HEAP32[$295>>2] = -1;
          HEAP32[$291>>2] = $22;
          $296 = HEAP32[$292>>2]|0;
          $297 = (($296) + 4|0);
          HEAP32[$297>>2] = $280;
          $298 = (($22) + 16|0);
          $299 = HEAP32[$298>>2]|0;
          $300 = (($280) + 16|0);
          $301 = HEAP32[$300>>2]|0;
          $302 = (($301) + ($299))|0;
          $303 = (($289) + 16|0);
          HEAP32[$303>>2] = $302;
          $stack$idx1$val$i = HEAP32[$stack$idx2$i>>2]|0;
          $304 = (_tre_stack_push($0,$289)|0);
          $305 = ($304|0)==(0);
          if ($305) {
           $306 = (_tre_stack_push($0,0)|0);
           $307 = ($306|0)==(0);
           if ($307) {
            $stack$idx$val21$i = HEAP32[$stack$idx2$i>>2]|0;
            $308 = ($stack$idx$val21$i|0)>($stack$idx1$val$i|0);
            L126: do {
             if ($308) {
              $309 = (($0) + 16|0);
              $311 = $stack$idx$val21$i;
              L128: while(1) {
               $310 = (($311) + -1)|0;
               HEAP32[$stack$idx2$i>>2] = $310;
               $312 = HEAP32[$309>>2]|0;
               $313 = (($312) + ($310<<2)|0);
               $314 = HEAP32[$313>>2]|0;
               $315 = (($311) + -2)|0;
               HEAP32[$stack$idx2$i>>2] = $315;
               $316 = (($312) + ($315<<2)|0);
               $317 = HEAP32[$316>>2]|0;
               do {
                if ((($314|0) == 2)) {
                 $488 = (($317) + 4|0);
                 $489 = HEAP32[$488>>2]|0;
                 $490 = HEAP32[$489>>2]|0;
                 $491 = (($490) + 8|0);
                 $492 = HEAP32[$491>>2]|0;
                 $493 = ($492|0)==(0);
                 if ($493) {
                  $500 = 0;
                 } else {
                  $494 = (($489) + 4|0);
                  $495 = HEAP32[$494>>2]|0;
                  $496 = (($495) + 8|0);
                  $497 = HEAP32[$496>>2]|0;
                  $498 = ($497|0)!=(0);
                  $500 = $498;
                 }
                 $499 = $500&1;
                 $501 = (($317) + 8|0);
                 HEAP32[$501>>2] = $499;
                 $502 = HEAP32[$491>>2]|0;
                 $503 = ($502|0)==(0);
                 if ($503) {
                  $526 = (($490) + 24|0);
                  $527 = HEAP32[$526>>2]|0;
                  $528 = (($317) + 24|0);
                  HEAP32[$528>>2] = $527;
                  $$pre43$i = (($489) + 4|0);
                  $$pre$phi45$iZ2D = $$pre43$i;
                 } else {
                  $504 = (_tre_match_empty($0,$490,0,0,$num_tags$i)|0);
                  $505 = ($504|0)==(0);
                  if (!($505)) {
                   $counts$0 = 0;$errcode$0 = $504;$offs$0 = 0;$tnfa$0 = $29;
                   break L12;
                  }
                  $506 = HEAP32[$num_tags$i>>2]|0;
                  $507 = $506 << 2;
                  $508 = (($507) + 4)|0;
                  $509 = (_malloc($508)|0);
                  $510 = ($509|0)==(0|0);
                  if ($510) {
                   $counts$0 = 0;$errcode$0 = 12;$offs$0 = 0;$tnfa$0 = $29;
                   break L12;
                  }
                  HEAP32[$509>>2] = -1;
                  HEAP32[$assertions$i>>2] = 0;
                  $511 = HEAP32[$489>>2]|0;
                  $512 = (_tre_match_empty($0,$511,$509,$assertions$i,0)|0);
                  $513 = ($512|0)==(0);
                  if (!($513)) {
                   label = 150;
                   break L128;
                  }
                  $514 = (($489) + 4|0);
                  $515 = HEAP32[$514>>2]|0;
                  $516 = (($515) + 24|0);
                  $517 = HEAP32[$516>>2]|0;
                  $518 = HEAP32[$489>>2]|0;
                  $519 = (($518) + 24|0);
                  $520 = HEAP32[$519>>2]|0;
                  $521 = HEAP32[$assertions$i>>2]|0;
                  $522 = (_tre_set_union($8,$517,$520,$509,$521)|0);
                  $523 = (($317) + 24|0);
                  HEAP32[$523>>2] = $522;
                  _free($509);
                  $524 = HEAP32[$523>>2]|0;
                  $525 = ($524|0)==(0|0);
                  if ($525) {
                   $counts$0 = 0;$errcode$0 = 12;$offs$0 = 0;$tnfa$0 = $29;
                   break L12;
                  } else {
                   $$pre$phi45$iZ2D = $514;
                  }
                 }
                 $529 = HEAP32[$$pre$phi45$iZ2D>>2]|0;
                 $530 = (($529) + 8|0);
                 $531 = HEAP32[$530>>2]|0;
                 $532 = ($531|0)==(0);
                 if ($532) {
                  $554 = (($529) + 28|0);
                  $555 = HEAP32[$554>>2]|0;
                  $556 = (($317) + 28|0);
                  HEAP32[$556>>2] = $555;
                  break;
                 }
                 $533 = (_tre_match_empty($0,$529,0,0,$num_tags$i)|0);
                 $534 = ($533|0)==(0);
                 if (!($534)) {
                  $counts$0 = 0;$errcode$0 = $533;$offs$0 = 0;$tnfa$0 = $29;
                  break L12;
                 }
                 $535 = HEAP32[$num_tags$i>>2]|0;
                 $536 = $535 << 2;
                 $537 = (($536) + 4)|0;
                 $538 = (_malloc($537)|0);
                 $539 = ($538|0)==(0|0);
                 if ($539) {
                  $counts$0 = 0;$errcode$0 = 12;$offs$0 = 0;$tnfa$0 = $29;
                  break L12;
                 }
                 HEAP32[$538>>2] = -1;
                 HEAP32[$assertions$i>>2] = 0;
                 $540 = HEAP32[$$pre$phi45$iZ2D>>2]|0;
                 $541 = (_tre_match_empty($0,$540,$538,$assertions$i,0)|0);
                 $542 = ($541|0)==(0);
                 if (!($542)) {
                  label = 157;
                  break L128;
                 }
                 $543 = HEAP32[$489>>2]|0;
                 $544 = (($543) + 28|0);
                 $545 = HEAP32[$544>>2]|0;
                 $546 = HEAP32[$$pre$phi45$iZ2D>>2]|0;
                 $547 = (($546) + 28|0);
                 $548 = HEAP32[$547>>2]|0;
                 $549 = HEAP32[$assertions$i>>2]|0;
                 $550 = (_tre_set_union($8,$545,$548,$538,$549)|0);
                 $551 = (($317) + 28|0);
                 HEAP32[$551>>2] = $550;
                 _free($538);
                 $552 = HEAP32[$551>>2]|0;
                 $553 = ($552|0)==(0|0);
                 if ($553) {
                  $counts$0 = 0;$errcode$0 = 12;$offs$0 = 0;$tnfa$0 = $29;
                  break L12;
                 }
                } else if ((($314|0) == 3)) {
                 $471 = (($317) + 4|0);
                 $472 = HEAP32[$471>>2]|0;
                 $473 = (($472) + 4|0);
                 $474 = HEAP32[$473>>2]|0;
                 $475 = ($474|0)==(0);
                 $$pre$pre$i = HEAP32[$472>>2]|0;
                 do {
                  if ($475) {
                   label = 141;
                  } else {
                   $476 = (($$pre$pre$i) + 8|0);
                   $477 = HEAP32[$476>>2]|0;
                   $478 = ($477|0)==(0);
                   if (!($478)) {
                    label = 141;
                    break;
                   }
                   $480 = (($317) + 8|0);
                   HEAP32[$480>>2] = 0;
                  }
                 } while(0);
                 if ((label|0) == 141) {
                  label = 0;
                  $479 = (($317) + 8|0);
                  HEAP32[$479>>2] = 1;
                 }
                 $481 = (($$pre$pre$i) + 24|0);
                 $482 = HEAP32[$481>>2]|0;
                 $483 = (($317) + 24|0);
                 HEAP32[$483>>2] = $482;
                 $484 = HEAP32[$472>>2]|0;
                 $485 = (($484) + 28|0);
                 $486 = HEAP32[$485>>2]|0;
                 $487 = (($317) + 28|0);
                 HEAP32[$487>>2] = $486;
                } else if ((($314|0) == 0)) {
                 $319 = HEAP32[$317>>2]|0;
                 if ((($319|0) == 1)) {
                  $412 = (_tre_stack_push($0,$317)|0);
                  $413 = ($412|0)==(0);
                  if (!($413)) {
                   $counts$0 = 0;$errcode$0 = $412;$offs$0 = 0;$tnfa$0 = $29;
                   break L12;
                  }
                  $414 = (_tre_stack_push($0,(2))|0);
                  $415 = ($414|0)==(0);
                  if (!($415)) {
                   $counts$0 = 0;$errcode$0 = $414;$offs$0 = 0;$tnfa$0 = $29;
                   break L12;
                  }
                  $416 = (($317) + 4|0);
                  $417 = HEAP32[$416>>2]|0;
                  $418 = (($417) + 4|0);
                  $419 = HEAP32[$418>>2]|0;
                  $420 = (_tre_stack_push($0,$419)|0);
                  $421 = ($420|0)==(0);
                  if (!($421)) {
                   $counts$0 = 0;$errcode$0 = $420;$offs$0 = 0;$tnfa$0 = $29;
                   break L12;
                  }
                  $422 = (_tre_stack_push($0,0)|0);
                  $423 = ($422|0)==(0);
                  if (!($423)) {
                   $counts$0 = 0;$errcode$0 = $422;$offs$0 = 0;$tnfa$0 = $29;
                   break L12;
                  }
                  $424 = HEAP32[$416>>2]|0;
                  $425 = HEAP32[$424>>2]|0;
                  $426 = (_tre_stack_push($0,$425)|0);
                  $427 = ($426|0)==(0);
                  if (!($427)) {
                   $counts$0 = 0;$errcode$0 = $426;$offs$0 = 0;$tnfa$0 = $29;
                   break L12;
                  }
                  $428 = (_tre_stack_push($0,0)|0);
                  $429 = ($428|0)==(0);
                  if ($429) {
                   break;
                  } else {
                   $counts$0 = 0;$errcode$0 = $428;$offs$0 = 0;$tnfa$0 = $29;
                   break L12;
                  }
                 } else if ((($319|0) == 2)) {
                  $430 = (_tre_stack_push($0,$317)|0);
                  $431 = ($430|0)==(0);
                  if (!($431)) {
                   $counts$0 = 0;$errcode$0 = $430;$offs$0 = 0;$tnfa$0 = $29;
                   break L12;
                  }
                  $432 = (_tre_stack_push($0,(3))|0);
                  $433 = ($432|0)==(0);
                  if (!($433)) {
                   $counts$0 = 0;$errcode$0 = $432;$offs$0 = 0;$tnfa$0 = $29;
                   break L12;
                  }
                  $434 = (($317) + 4|0);
                  $435 = HEAP32[$434>>2]|0;
                  $436 = HEAP32[$435>>2]|0;
                  $437 = (_tre_stack_push($0,$436)|0);
                  $438 = ($437|0)==(0);
                  if (!($438)) {
                   $counts$0 = 0;$errcode$0 = $437;$offs$0 = 0;$tnfa$0 = $29;
                   break L12;
                  }
                  $439 = (_tre_stack_push($0,0)|0);
                  $440 = ($439|0)==(0);
                  if ($440) {
                   break;
                  } else {
                   $counts$0 = 0;$errcode$0 = $439;$offs$0 = 0;$tnfa$0 = $29;
                   break L12;
                  }
                 } else if ((($319|0) == 3)) {
                  $394 = (_tre_stack_push($0,$317)|0);
                  $395 = ($394|0)==(0);
                  if (!($395)) {
                   $counts$0 = 0;$errcode$0 = $394;$offs$0 = 0;$tnfa$0 = $29;
                   break L12;
                  }
                  $396 = (_tre_stack_push($0,(1))|0);
                  $397 = ($396|0)==(0);
                  if (!($397)) {
                   $counts$0 = 0;$errcode$0 = $396;$offs$0 = 0;$tnfa$0 = $29;
                   break L12;
                  }
                  $398 = (($317) + 4|0);
                  $399 = HEAP32[$398>>2]|0;
                  $400 = (($399) + 4|0);
                  $401 = HEAP32[$400>>2]|0;
                  $402 = (_tre_stack_push($0,$401)|0);
                  $403 = ($402|0)==(0);
                  if (!($403)) {
                   $counts$0 = 0;$errcode$0 = $402;$offs$0 = 0;$tnfa$0 = $29;
                   break L12;
                  }
                  $404 = (_tre_stack_push($0,0)|0);
                  $405 = ($404|0)==(0);
                  if (!($405)) {
                   $counts$0 = 0;$errcode$0 = $404;$offs$0 = 0;$tnfa$0 = $29;
                   break L12;
                  }
                  $406 = HEAP32[$398>>2]|0;
                  $407 = HEAP32[$406>>2]|0;
                  $408 = (_tre_stack_push($0,$407)|0);
                  $409 = ($408|0)==(0);
                  if (!($409)) {
                   $counts$0 = 0;$errcode$0 = $408;$offs$0 = 0;$tnfa$0 = $29;
                   break L12;
                  }
                  $410 = (_tre_stack_push($0,0)|0);
                  $411 = ($410|0)==(0);
                  if ($411) {
                   break;
                  } else {
                   $counts$0 = 0;$errcode$0 = $410;$offs$0 = 0;$tnfa$0 = $29;
                   break L12;
                  }
                 } else if ((($319|0) == 0)) {
                  $320 = (($317) + 4|0);
                  $321 = HEAP32[$320>>2]|0;
                  $322 = HEAP32[$321>>2]|0;
                  $323 = ($322|0)==(-4);
                  if ($323) {
                   $324 = (($317) + 8|0);
                   HEAP32[$324>>2] = 0;
                   $325 = (($321) + 8|0);
                   $326 = HEAP32[$325>>2]|0;
                   $327 = (___tre_mem_alloc_impl($8,0,0,1,64)|0);
                   $328 = ($327|0)==(0|0);
                   if ($328) {
                    label = 104;
                    break L128;
                   }
                   HEAP32[$327>>2] = $326;
                   $330 = (($327) + 4|0);
                   HEAP32[$330>>2] = 0;
                   $331 = (($327) + 8|0);
                   HEAP32[$331>>2] = 1114111;
                   $332 = (($327) + 20|0);
                   HEAP32[$332>>2] = 0;
                   $333 = (($327) + 24|0);
                   HEAP32[$333>>2] = 0;
                   $334 = (($327) + 28|0);
                   $335 = (($317) + 24|0);
                   ;HEAP32[$334+0>>2]=4294967295|0;HEAP32[$334+4>>2]=4294967295|0;HEAP32[$334+8>>2]=4294967295|0;HEAP32[$334+12>>2]=4294967295|0;
                   HEAP32[$335>>2] = $327;
                   $336 = HEAP32[$325>>2]|0;
                   $337 = (($321) + 4|0);
                   $338 = HEAP32[$337>>2]|0;
                   $339 = (___tre_mem_alloc_impl($8,0,0,1,64)|0);
                   $340 = ($339|0)==(0|0);
                   if ($340) {
                    label = 106;
                    break L128;
                   }
                   HEAP32[$339>>2] = $336;
                   $342 = (($339) + 4|0);
                   HEAP32[$342>>2] = 0;
                   $343 = (($339) + 8|0);
                   HEAP32[$343>>2] = 1114111;
                   $344 = (($339) + 20|0);
                   HEAP32[$344>>2] = 0;
                   $345 = (($339) + 24|0);
                   HEAP32[$345>>2] = 0;
                   $346 = (($339) + 28|0);
                   HEAP32[$346>>2] = $338;
                   $347 = (($339) + 32|0);
                   HEAP32[$347>>2] = -1;
                   $348 = (($339) + 36|0);
                   HEAP32[$348>>2] = -1;
                   $349 = (($339) + 40|0);
                   HEAP32[$349>>2] = -1;
                   $350 = (($317) + 28|0);
                   HEAP32[$350>>2] = $339;
                   break;
                  }
                  $351 = ($322|0)<(0);
                  $352 = (($317) + 8|0);
                  if ($351) {
                   HEAP32[$352>>2] = 1;
                   $353 = (___tre_mem_alloc_impl($8,0,0,1,32)|0);
                   $354 = ($353|0)==(0|0);
                   if ($354) {
                    label = 110;
                    break L128;
                   }
                   HEAP32[$353>>2] = -1;
                   $356 = (($353) + 4|0);
                   HEAP32[$356>>2] = -1;
                   $357 = (($353) + 8|0);
                   HEAP32[$357>>2] = -1;
                   $358 = (($317) + 24|0);
                   HEAP32[$358>>2] = $353;
                   $359 = (___tre_mem_alloc_impl($8,0,0,1,32)|0);
                   $360 = ($359|0)==(0|0);
                   if ($360) {
                    label = 112;
                    break L128;
                   }
                   HEAP32[$359>>2] = -1;
                   $362 = (($359) + 4|0);
                   HEAP32[$362>>2] = -1;
                   $363 = (($359) + 8|0);
                   HEAP32[$363>>2] = -1;
                   $364 = (($317) + 28|0);
                   HEAP32[$364>>2] = $359;
                   break;
                  } else {
                   HEAP32[$352>>2] = 0;
                   $365 = (($321) + 8|0);
                   $366 = HEAP32[$365>>2]|0;
                   $367 = (($321) + 4|0);
                   $368 = HEAP32[$367>>2]|0;
                   $369 = (___tre_mem_alloc_impl($8,0,0,1,64)|0);
                   $370 = ($369|0)==(0|0);
                   if ($370) {
                    label = 115;
                    break L128;
                   }
                   HEAP32[$369>>2] = $366;
                   $372 = (($369) + 4|0);
                   HEAP32[$372>>2] = $322;
                   $373 = (($369) + 8|0);
                   HEAP32[$373>>2] = $368;
                   $374 = (($369) + 20|0);
                   HEAP32[$374>>2] = 0;
                   $375 = (($369) + 24|0);
                   HEAP32[$375>>2] = 0;
                   $376 = (($369) + 28|0);
                   $377 = (($317) + 24|0);
                   ;HEAP32[$376+0>>2]=4294967295|0;HEAP32[$376+4>>2]=4294967295|0;HEAP32[$376+8>>2]=4294967295|0;HEAP32[$376+12>>2]=4294967295|0;
                   HEAP32[$377>>2] = $369;
                   $378 = HEAP32[$365>>2]|0;
                   $379 = HEAP32[$321>>2]|0;
                   $380 = HEAP32[$367>>2]|0;
                   $381 = (($321) + 12|0);
                   $382 = HEAP32[$381>>2]|0;
                   $383 = (($321) + 16|0);
                   $384 = HEAP32[$383>>2]|0;
                   $385 = (___tre_mem_alloc_impl($8,0,0,1,64)|0);
                   $386 = ($385|0)==(0|0);
                   if ($386) {
                    label = 117;
                    break L128;
                   }
                   HEAP32[$385>>2] = $378;
                   $388 = (($385) + 4|0);
                   HEAP32[$388>>2] = $379;
                   $389 = (($385) + 8|0);
                   HEAP32[$389>>2] = $380;
                   $390 = (($385) + 20|0);
                   HEAP32[$390>>2] = $382;
                   $391 = (($385) + 24|0);
                   HEAP32[$391>>2] = $384;
                   $392 = (($385) + 28|0);
                   $393 = (($317) + 28|0);
                   ;HEAP32[$392+0>>2]=4294967295|0;HEAP32[$392+4>>2]=4294967295|0;HEAP32[$392+8>>2]=4294967295|0;HEAP32[$392+12>>2]=4294967295|0;
                   HEAP32[$393>>2] = $385;
                   break;
                  }
                 } else {
                  break;
                 }
                } else if ((($314|0) == 1)) {
                 $441 = (($317) + 4|0);
                 $442 = HEAP32[$441>>2]|0;
                 $443 = HEAP32[$442>>2]|0;
                 $444 = (($443) + 8|0);
                 $445 = HEAP32[$444>>2]|0;
                 $446 = ($445|0)==(0);
                 $447 = (($442) + 4|0);
                 $448 = HEAP32[$447>>2]|0;
                 if ($446) {
                  $449 = (($448) + 8|0);
                  $450 = HEAP32[$449>>2]|0;
                  $451 = ($450|0)!=(0);
                  $453 = $451;
                 } else {
                  $453 = 1;
                 }
                 $452 = $453&1;
                 $454 = (($317) + 8|0);
                 HEAP32[$454>>2] = $452;
                 $455 = (($443) + 24|0);
                 $456 = HEAP32[$455>>2]|0;
                 $457 = (($448) + 24|0);
                 $458 = HEAP32[$457>>2]|0;
                 $459 = (_tre_set_union($8,$456,$458,0,0)|0);
                 $460 = (($317) + 24|0);
                 HEAP32[$460>>2] = $459;
                 $461 = ($459|0)==(0|0);
                 if ($461) {
                  $counts$0 = 0;$errcode$0 = 12;$offs$0 = 0;$tnfa$0 = $29;
                  break L12;
                 }
                 $462 = HEAP32[$442>>2]|0;
                 $463 = (($462) + 28|0);
                 $464 = HEAP32[$463>>2]|0;
                 $465 = HEAP32[$447>>2]|0;
                 $466 = (($465) + 28|0);
                 $467 = HEAP32[$466>>2]|0;
                 $468 = (_tre_set_union($8,$464,$467,0,0)|0);
                 $469 = (($317) + 28|0);
                 HEAP32[$469>>2] = $468;
                 $470 = ($468|0)==(0|0);
                 if ($470) {
                  $counts$0 = 0;$errcode$0 = 12;$offs$0 = 0;$tnfa$0 = $29;
                  break L12;
                 }
                }
               } while(0);
               $stack$idx$val$i7 = HEAP32[$stack$idx2$i>>2]|0;
               $318 = ($stack$idx$val$i7|0)>($stack$idx1$val$i|0);
               if ($318) {
                $311 = $stack$idx$val$i7;
               } else {
                break L126;
               }
              }
              if ((label|0) == 104) {
               $329 = (($317) + 24|0);
               HEAP32[$329>>2] = 0;
               $counts$0 = 0;$errcode$0 = 12;$offs$0 = 0;$tnfa$0 = $29;
               break L12;
              }
              else if ((label|0) == 106) {
               $341 = (($317) + 28|0);
               HEAP32[$341>>2] = 0;
               $counts$0 = 0;$errcode$0 = 12;$offs$0 = 0;$tnfa$0 = $29;
               break L12;
              }
              else if ((label|0) == 110) {
               $355 = (($317) + 24|0);
               HEAP32[$355>>2] = 0;
               $counts$0 = 0;$errcode$0 = 12;$offs$0 = 0;$tnfa$0 = $29;
               break L12;
              }
              else if ((label|0) == 112) {
               $361 = (($317) + 28|0);
               HEAP32[$361>>2] = 0;
               $counts$0 = 0;$errcode$0 = 12;$offs$0 = 0;$tnfa$0 = $29;
               break L12;
              }
              else if ((label|0) == 115) {
               $371 = (($317) + 24|0);
               HEAP32[$371>>2] = 0;
               $counts$0 = 0;$errcode$0 = 12;$offs$0 = 0;$tnfa$0 = $29;
               break L12;
              }
              else if ((label|0) == 117) {
               $387 = (($317) + 28|0);
               HEAP32[$387>>2] = 0;
               $counts$0 = 0;$errcode$0 = 12;$offs$0 = 0;$tnfa$0 = $29;
               break L12;
              }
              else if ((label|0) == 150) {
               _free($509);
               $counts$0 = 0;$errcode$0 = $512;$offs$0 = 0;$tnfa$0 = $29;
               break L12;
              }
              else if ((label|0) == 157) {
               _free($538);
               $counts$0 = 0;$errcode$0 = $541;$offs$0 = 0;$tnfa$0 = $29;
               break L12;
              }
             }
            } while(0);
            $557 = HEAP32[$60>>2]|0;
            $558 = $557 << 2;
            $559 = (_malloc($558)|0);
            $560 = ($559|0)==(0|0);
            if ($560) {
             $counts$0 = $559;$errcode$0 = 12;$offs$0 = 0;$tnfa$0 = $29;
            } else {
             $561 = (_malloc($558)|0);
             $562 = ($561|0)==(0|0);
             if ($562) {
              $counts$0 = $559;$errcode$0 = 12;$offs$0 = $561;$tnfa$0 = $29;
             } else {
              $563 = ($557|0)>(0);
              if ($563) {
               $564 = ($557|0)>(1);
               $$op = $557 << 2;
               $565 = $564 ? $$op : 4;
               _memset(($559|0),0,($565|0))|0;
              }
              (_tre_ast_to_tnfa($289,0,$559,0)|0);
              $566 = HEAP32[$60>>2]|0;
              $567 = ($566|0)>(0);
              if ($567) {
               $add$028 = 0;$i$127 = 0;
               while(1) {
                $568 = (($561) + ($i$127<<2)|0);
                HEAP32[$568>>2] = $add$028;
                $569 = (($559) + ($i$127<<2)|0);
                $570 = HEAP32[$569>>2]|0;
                $571 = (($add$028) + 1)|0;
                $572 = (($571) + ($570))|0;
                HEAP32[$569>>2] = 0;
                $573 = (($i$127) + 1)|0;
                $574 = ($573|0)<($566|0);
                if ($574) {
                 $add$028 = $572;$i$127 = $573;
                } else {
                 $add$0$lcssa = $572;
                 break;
                }
               }
              } else {
               $add$0$lcssa = 0;
              }
              $575 = (($add$0$lcssa) + 1)|0;
              $576 = (_calloc($575,32)|0);
              $577 = ($576|0)==(0|0);
              if ($577) {
               $counts$0 = $559;$errcode$0 = 12;$offs$0 = $561;$tnfa$0 = $29;
               break;
              }
              HEAP32[$29>>2] = $576;
              $578 = (($29) + 4|0);
              HEAP32[$578>>2] = $add$0$lcssa;
              $579 = (_tre_ast_to_tnfa($289,$576,$559,$561)|0);
              $580 = ($579|0)==(0);
              if (!($580)) {
               $counts$0 = $559;$errcode$0 = $579;$offs$0 = $561;$tnfa$0 = $29;
               break;
              }
              $581 = (($29) + 20|0);
              HEAP32[$581>>2] = 0;
              $582 = (($289) + 24|0);
              $583 = HEAP32[$582>>2]|0;
              $584 = HEAP32[$583>>2]|0;
              $585 = ($584|0)>(-1);
              if ($585) {
               $i$221 = 1;$p$022 = $583;
               while(1) {
                $586 = (($p$022) + 32|0);
                $phitmp = (($i$221) + 1)|0;
                $587 = HEAP32[$586>>2]|0;
                $588 = ($587|0)>(-1);
                if ($588) {
                 $i$221 = $phitmp;$p$022 = $586;
                } else {
                 $i$2$lcssa = $phitmp;
                 break;
                }
               }
              } else {
               $i$2$lcssa = 1;
              }
              $589 = (_calloc($i$2$lcssa,32)|0);
              $590 = ($589|0)==(0|0);
              if ($590) {
               $counts$0 = $559;$errcode$0 = 12;$offs$0 = $561;$tnfa$0 = $29;
               break;
              }
              $591 = (($29) + 8|0);
              HEAP32[$591>>2] = $589;
              $592 = HEAP32[$582>>2]|0;
              $593 = HEAP32[$592>>2]|0;
              $594 = ($593|0)>(-1);
              if ($594) {
               $596 = $593;$603 = $592;$i$319 = 0;
               while(1) {
                $595 = (($561) + ($596<<2)|0);
                $597 = HEAP32[$595>>2]|0;
                $598 = (($576) + ($597<<5)|0);
                $599 = ((($589) + ($i$319<<5)|0) + 8|0);
                HEAP32[$599>>2] = $598;
                $600 = ((($589) + ($i$319<<5)|0) + 12|0);
                HEAP32[$600>>2] = $596;
                $601 = ((($589) + ($i$319<<5)|0) + 16|0);
                HEAP32[$601>>2] = 0;
                $602 = (($603) + 12|0);
                $604 = HEAP32[$602>>2]|0;
                $605 = ($604|0)==(0|0);
                if (!($605)) {
                 $j$0 = 0;
                 while(1) {
                  $606 = (($604) + ($j$0<<2)|0);
                  $607 = HEAP32[$606>>2]|0;
                  $608 = ($607|0)>(-1);
                  $609 = (($j$0) + 1)|0;
                  if ($608) {
                   $j$0 = $609;
                  } else {
                   break;
                  }
                 }
                 $610 = $609 << 2;
                 $611 = (_malloc($610)|0);
                 HEAP32[$601>>2] = $611;
                 $612 = ($611|0)==(0|0);
                 if ($612) {
                  $counts$0 = $559;$errcode$0 = 12;$offs$0 = $561;$tnfa$0 = $29;
                  break L12;
                 }
                 $613 = HEAP32[$602>>2]|0;
                 _memcpy(($611|0),($613|0),($610|0))|0;
                }
                $614 = (($603) + 16|0);
                $615 = HEAP32[$614>>2]|0;
                $616 = ((($589) + ($i$319<<5)|0) + 20|0);
                HEAP32[$616>>2] = $615;
                $617 = (($i$319) + 1)|0;
                $618 = (($603) + 32|0);
                $619 = HEAP32[$618>>2]|0;
                $620 = ($619|0)>(-1);
                if ($620) {
                 $596 = $619;$603 = $618;$i$319 = $617;
                } else {
                 $i$3$lcssa = $617;
                 break;
                }
               }
              } else {
               $i$3$lcssa = 0;
              }
              $621 = ((($589) + ($i$3$lcssa<<5)|0) + 8|0);
              HEAP32[$621>>2] = 0;
              HEAP32[$578>>2] = $add$0$lcssa;
              $622 = (($289) + 28|0);
              $623 = HEAP32[$622>>2]|0;
              $624 = HEAP32[$623>>2]|0;
              $625 = (($561) + ($624<<2)|0);
              $626 = HEAP32[$625>>2]|0;
              $627 = (($576) + ($626<<5)|0);
              $628 = (($29) + 12|0);
              HEAP32[$628>>2] = $627;
              $629 = HEAP32[$60>>2]|0;
              $630 = (($29) + 52|0);
              HEAP32[$630>>2] = $629;
              $631 = (($29) + 56|0);
              HEAP32[$631>>2] = $cflags;
              ___tre_mem_destroy($8);
              $632 = (($0) + 16|0);
              $633 = HEAP32[$632>>2]|0;
              _free($633);
              _free($0);
              _free($559);
              _free($561);
              $634 = (($preg) + 4|0);
              HEAP32[$634>>2] = $29;
              $$0 = 0;
              STACKTOP = sp;return ($$0|0);
             }
            }
           } else {
            $counts$0 = 0;$errcode$0 = $306;$offs$0 = 0;$tnfa$0 = $29;
           }
          } else {
           $counts$0 = 0;$errcode$0 = $304;$offs$0 = 0;$tnfa$0 = $29;
          }
         }
        }
       }
      }
     } else {
      $counts$0 = 0;$errcode$0 = $$0$i1;$offs$0 = 0;$tnfa$0 = $29;
     }
    }
   }
  } else {
   $counts$0 = 0;$errcode$0 = $16;$offs$0 = 0;$tnfa$0 = 0;
  }
 } while(0);
 ___tre_mem_destroy($8);
 $635 = (($0) + 16|0);
 $636 = HEAP32[$635>>2]|0;
 _free($636);
 _free($0);
 $637 = ($counts$0|0)==(0|0);
 if (!($637)) {
  _free($counts$0);
 }
 $638 = ($offs$0|0)==(0|0);
 if (!($638)) {
  _free($offs$0);
 }
 $639 = (($preg) + 4|0);
 HEAP32[$639>>2] = $tnfa$0;
 _regfree($preg);
 $$0 = $errcode$0;
 STACKTOP = sp;return ($$0|0);
}
function _tre_parse($ctx) {
 $ctx = $ctx|0;
 var $$ = 0, $$$i$i = 0, $$0$i$i = 0, $$0$i$us$i = 0, $$0$i14$i$i = 0, $$0$i14$sink$i$i = 0, $$0$i19$i$i = 0, $$0$i26 = 0, $$0$i28 = 0, $$0$i3$i = 0, $$0$i30 = 0, $$0$i32 = 0, $$0$i34 = 0, $$0$i36 = 0, $$0$i40 = 0, $$12 = 0, $$2 = 0, $$6$i$i = 0, $$idx$val = 0, $$idx$val134 = 0;
 var $$idx13 = 0, $$idx13$val = 0, $$in = 0, $$lcssa$i = 0, $$lcssa131 = 0, $$mux = 0, $$not = 0, $$not$i = 0, $$not$i$i = 0, $$not1$i = 0, $$off$i = 0, $$ph$i = 0, $$ph33$i = 0, $$ph34$i = 0, $$ph35$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre107$i = 0, $$pre108$i = 0;
 var $$status$0$i = 0, $$status$0$us$i = 0, $$status$1$i$i = 0, $$status$3$i = 0, $$sum$i$i = 0, $$sum5$i$i = 0, $$val = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0;
 var $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0;
 var $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0;
 var $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0;
 var $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0;
 var $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0;
 var $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0;
 var $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0;
 var $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0;
 var $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0;
 var $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0;
 var $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0;
 var $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0;
 var $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0;
 var $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0;
 var $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0;
 var $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0;
 var $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0;
 var $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0;
 var $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0;
 var $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0;
 var $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0;
 var $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0;
 var $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0;
 var $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0;
 var $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0;
 var $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0;
 var $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0;
 var $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0;
 var $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0;
 var $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0;
 var $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0;
 var $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0;
 var $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0;
 var $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0;
 var $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $brmerge$i = 0, $brmerge$i$i = 0, $brmerge$not$i$i = 0, $ccurr$0$lcssa$i$i = 0, $ccurr$034$i$i = 0, $ccurr$1$lcssa$i$i = 0, $ccurr$138$i$i = 0, $class$1$i$i = 0, $clen$0 = 0, $clen$0$i$i = 0, $clen$1$i$i = 0, $curr_max$0$$us$i = 0, $curr_max$026$us$i = 0, $curr_max$19$us$i = 0;
 var $curr_min$0$lcssa$i = 0, $curr_min$027$us$i = 0, $curr_min$110$us$i = 0, $depth$0$be = 0, $depth$0$be$ph = 0, $depth$0$lcssa = 0, $depth$0138 = 0, $endptr$0$i$i = 0, $i$0$lcssa = 0, $i$01$i = 0, $i$077 = 0, $j$025$i = 0, $j$025$us$i = 0, $max$0$i = 0, $max$0$i$i = 0, $max$019$i = 0, $max$1$i = 0, $min$0$i = 0, $min$0$i$i = 0, $min$1$i = 0;
 var $min$1$i$i = 0, $min$1$i$ph$i = 0, $min$2$i$i = 0, $min$2$lcssa$i$i = 0, $min$233$i$i = 0, $min$235$i$i = 0, $min$3$lcssa$i$i = 0, $min$337$i$i = 0, $min$4$i$i = 0, $neg_classes$i = 0, $negate$0$i = 0, $node$0$lcssa$i = 0, $node$028$i = 0, $node$028$us$i = 0, $node$1$i = 0, $node$1$us$i = 0, $node$2$i = 0, $node$2$i64 = 0, $node$2$i68$be = 0, $node$2$i68$lcssa = 0;
 var $node$2$i68136 = 0, $node$2$i69 = 0, $node$2$i70 = 0, $node$2$i71$in = 0, $not$32$i$i = 0, $notrhs = 0, $num$0$op$i$i = 0, $num$0$op$i7$i = 0, $num$0$op$op$i$i = 0, $num$0$op$op$i8$i = 0, $num$01$i$i = 0, $num$01$i6$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i22 = 0, $or$cond$us$i = 0, $or$cond135 = 0, $or$cond5 = 0, $or$cond6 = 0;
 var $or$cond7 = 0, $or$cond7$i$i = 0, $or$cond8 = 0, $or$cond8$i$i = 0, $or$cond9$i$i = 0, $r$0$lcssa$i1014$i = 0, $r$0$lcssa$i101416$i = 0, $r$0$lcssa$i1015$i = 0, $r$02$i$i = 0, $r$02$i5$i = 0, $re$1$i$i = 0, $re$3$i$i = 0, $re$4$i$ph$i = 0, $rep_max$0 = 0, $status$0$be = 0, $status$0$be$ph = 0, $status$0$lcssa = 0, $status$0$lcssa$i = 0, $status$1 = 0, $status$1$$i$i = 0;
 var $status$10$i$ph$i = 0, $status$2$i = 0, $status$2$i$i = 0, $status$2$us$i = 0, $status$4$i$i = 0, $status$5$i = 0, $status$5$i$i = 0, $status$6$i$i = 0, $storemerge = 0, $storemerge$i = 0, $storemerge33$in$i = 0, $storemerge4$lcssa = 0, $tmp = 0, $tmp4 = 0, $tmp_str$i$i = 0, $value$c$i = 0, $value$c$i20 = 0, $wc = 0, $wc$i$i = 0, dest = 0;
 var label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0;
 $wc$i$i = sp + 264|0;
 $tmp_str$i$i = sp + 352|0;
 $neg_classes$i = sp + 8|0;
 $wc = sp;
 $tmp = sp + 344|0;
 $tmp4 = sp + 312|0;
 $0 = (($ctx) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $$idx13 = (($1) + 12|0);
 $$idx13$val = HEAP32[$$idx13>>2]|0;
 $2 = (($ctx) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = (($ctx) + 20|0);
  $6 = HEAP32[$5>>2]|0;
  $value$c$i = $6;
  (_tre_stack_push($1,$value$c$i)|0);
  (_tre_stack_push($1,(2))|0);
  $7 = HEAP32[$5>>2]|0;
  $8 = (($7) + 1)|0;
  HEAP32[$5>>2] = $8;
 }
 $9 = (_tre_stack_push($1,0)|0);
 $10 = (($ctx) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($ctx) + 16|0);
 HEAP32[$12>>2] = $11;
 $$idx$val134 = HEAP32[$$idx13>>2]|0;
 $13 = ($$idx$val134|0)>($$idx13$val|0);
 $14 = ($9|0)==(0);
 $or$cond135 = $13 & $14;
 L4: do {
  if ($or$cond135) {
   $15 = (($1) + 16|0);
   $16 = (($ctx) + 36|0);
   $17 = (($ctx) + 24|0);
   $18 = (($ctx) + 20|0);
   $19 = (($ctx) + 28|0);
   $20 = (($tmp) + 1|0);
   $21 = (($wc$i$i) + 12|0);
   $22 = (($wc$i$i) + 40|0);
   $23 = (($wc$i$i) + 24|0);
   $24 = (($wc$i$i) + 8|0);
   $26 = $$idx$val134;$depth$0138 = 0;$node$2$i68136 = 0;
   L6: while(1) {
    $25 = (($26) + -1)|0;
    HEAP32[$$idx13>>2] = $25;
    $27 = HEAP32[$15>>2]|0;
    $28 = (($27) + ($25<<2)|0);
    $29 = HEAP32[$28>>2]|0;
    L8: do {
     switch ($29|0) {
     case 3:  {
      $39 = (_tre_stack_push($1,(5))|0);
      $40 = ($39|0)==(0);
      if (!($40)) {
       $depth$0$be$ph = $depth$0138;$status$0$be$ph = $39;
       label = 6;
       break L6;
      }
      $41 = (_tre_stack_push($1,(4))|0);
      $depth$0$be = $depth$0138;$node$2$i68$be = $node$2$i68136;$status$0$be = $41;
      break;
     }
     case 1:  {
      $237 = HEAP32[$10>>2]|0;
      $238 = HEAP8[$237>>0]|0;
      $239 = $238 << 24 >> 24;
      L12: do {
       switch ($239|0) {
       case 40:  {
        $240 = HEAP32[$16>>2]|0;
        $241 = $240 & 1;
        $242 = ($241|0)==(0);
        if (!($242)) {
         $245 = $237;
         label = 74;
        }
        break;
       }
       case 63: case 43: case 123: case 124: case 42:  {
        label = 264;
        break;
       }
       case 0:  {
        label = 265;
        break;
       }
       case 36:  {
        $779 = HEAP32[$16>>2]|0;
        $780 = $779 & 1;
        $781 = ($780|0)==(0);
        if ($781) {
         $782 = (($237) + 1|0);
         $783 = HEAP8[$782>>0]|0;
         $784 = ($783<<24>>24)==(0);
         if (!($784)) {
          break L12;
         }
        }
        $785 = HEAP32[$ctx>>2]|0;
        $786 = (___tre_mem_alloc_impl($785,0,0,1,32)|0);
        $787 = ($786|0)==(0|0);
        if ($787) {
         $$2 = 12;
         label = 294;
         break L6;
        }
        $788 = (___tre_mem_alloc_impl($785,0,0,1,20)|0);
        $789 = (($786) + 4|0);
        HEAP32[$789>>2] = $788;
        $790 = ($788|0)==(0|0);
        if ($790) {
         $$2 = 12;
         label = 294;
         break L6;
        }
        HEAP32[$786>>2] = 0;
        $791 = (($786) + 8|0);
        HEAP32[$791>>2] = -1;
        $792 = (($786) + 12|0);
        HEAP32[$792>>2] = -1;
        HEAP32[$788>>2] = -2;
        $793 = (($788) + 4|0);
        HEAP32[$793>>2] = 2;
        $794 = (($788) + 8|0);
        HEAP32[$794>>2] = -1;
        $795 = HEAP32[$10>>2]|0;
        $796 = (($795) + 1|0);
        HEAP32[$10>>2] = $796;
        $depth$0$be = $depth$0138;$node$2$i68$be = $786;$status$0$be = 0;
        break L8;
        break;
       }
       case 41:  {
        $797 = ($depth$0138|0)==(0);
        if (!($797)) {
         label = 264;
        }
        break;
       }
       case 92:  {
        $532 = HEAP32[$16>>2]|0;
        $533 = $532 & 1;
        $534 = ($533|0)==(0);
        $535 = (($237) + 1|0);
        $536 = HEAP8[$535>>0]|0;
        do {
         if ($534) {
          $537 = ($536<<24>>24)==(40);
          if ($537) {
           HEAP32[$10>>2] = $535;
           $245 = $535;
           label = 74;
           break L12;
          } else {
           $538 = (($237) + 1|0);
           $539 = HEAP8[$538>>0]|0;
           $540 = ($539<<24>>24)==(41);
           if ($540) {
            label = 265;
            break L12;
           } else {
            $$val = $539;
            break;
           }
          }
         } else {
          $$val = $536;
         }
        } while(0);
        $541 = (($237) + 1|0);
        $542 = ($$val<<24>>24)==(0);
        if ($542) {
         $$2 = 5;
         label = 294;
         break L6;
        } else {
         $937 = ((283520 + 4|0));$i$01$i = 0;
        }
        while(1) {
         $546 = (283520 + ($i$01$i<<3)|0);
         $547 = HEAP8[$546>>0]|0;
         $548 = ($547<<24>>24)==($$val<<24>>24);
         $544 = (($i$01$i) + 1)|0;
         if ($548) {
          $$lcssa$i = $937;
          break;
         }
         $543 = ((283520 + ($544<<3)|0) + 4|0);
         $545 = ($544|0)==(12);
         if ($545) {
          $$lcssa$i = $543;
          break;
         } else {
          $937 = $543;$i$01$i = $544;
         }
        }
        $549 = HEAP32[$$lcssa$i>>2]|0;
        $550 = ($549|0)==(0|0);
        if (!($550)) {
         dest=$wc$i$i+0|0; src=$ctx+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
         HEAP32[$21>>2] = $549;
         HEAP32[$22>>2] = 1;
         $551 = (_tre_parse($wc$i$i)|0);
         $552 = ($551|0)==(0);
         if (!($552)) {
          $$2 = $551;
          label = 294;
          break L6;
         }
         $553 = HEAP32[$10>>2]|0;
         $554 = (($553) + 2|0);
         HEAP32[$10>>2] = $554;
         $555 = HEAP32[$23>>2]|0;
         HEAP32[$17>>2] = $555;
         $556 = HEAP32[$24>>2]|0;
         $depth$0$be = $depth$0138;$node$2$i68$be = $556;$status$0$be = 0;
         break L8;
        }
        if ($542) {
         $$2 = 5;
         label = 294;
         break L6;
        }
        HEAP32[$10>>2] = $541;
        $557 = HEAP8[$541>>0]|0;
        $558 = $557 << 24 >> 24;
        L37: do {
         switch ($558|0) {
         case 66:  {
          $571 = HEAP32[$ctx>>2]|0;
          $572 = (___tre_mem_alloc_impl($571,0,0,1,32)|0);
          $573 = ($572|0)==(0|0);
          if ($573) {
           $$0$i28 = 0;
          } else {
           $574 = (___tre_mem_alloc_impl($571,0,0,1,20)|0);
           $575 = (($572) + 4|0);
           HEAP32[$575>>2] = $574;
           $576 = ($574|0)==(0|0);
           if ($576) {
            $$0$i28 = 0;
           } else {
            HEAP32[$572>>2] = 0;
            $577 = (($572) + 8|0);
            HEAP32[$577>>2] = -1;
            $578 = (($572) + 12|0);
            HEAP32[$578>>2] = -1;
            HEAP32[$574>>2] = -2;
            $579 = (($574) + 4|0);
            HEAP32[$579>>2] = 128;
            $580 = (($574) + 8|0);
            HEAP32[$580>>2] = -1;
            $$0$i28 = $572;
           }
          }
          $581 = HEAP32[$10>>2]|0;
          $582 = (($581) + 1|0);
          HEAP32[$10>>2] = $582;
          $node$2$i69 = $$0$i28;
          break;
         }
         case 60:  {
          $583 = HEAP32[$ctx>>2]|0;
          $584 = (___tre_mem_alloc_impl($583,0,0,1,32)|0);
          $585 = ($584|0)==(0|0);
          if ($585) {
           $$0$i30 = 0;
          } else {
           $586 = (___tre_mem_alloc_impl($583,0,0,1,20)|0);
           $587 = (($584) + 4|0);
           HEAP32[$587>>2] = $586;
           $588 = ($586|0)==(0|0);
           if ($588) {
            $$0$i30 = 0;
           } else {
            HEAP32[$584>>2] = 0;
            $589 = (($584) + 8|0);
            HEAP32[$589>>2] = -1;
            $590 = (($584) + 12|0);
            HEAP32[$590>>2] = -1;
            HEAP32[$586>>2] = -2;
            $591 = (($586) + 4|0);
            HEAP32[$591>>2] = 16;
            $592 = (($586) + 8|0);
            HEAP32[$592>>2] = -1;
            $$0$i30 = $584;
           }
          }
          $593 = HEAP32[$10>>2]|0;
          $594 = (($593) + 1|0);
          HEAP32[$10>>2] = $594;
          $node$2$i69 = $$0$i30;
          break;
         }
         case 62:  {
          $595 = HEAP32[$ctx>>2]|0;
          $596 = (___tre_mem_alloc_impl($595,0,0,1,32)|0);
          $597 = ($596|0)==(0|0);
          if ($597) {
           $$0$i32 = 0;
          } else {
           $598 = (___tre_mem_alloc_impl($595,0,0,1,20)|0);
           $599 = (($596) + 4|0);
           HEAP32[$599>>2] = $598;
           $600 = ($598|0)==(0|0);
           if ($600) {
            $$0$i32 = 0;
           } else {
            HEAP32[$596>>2] = 0;
            $601 = (($596) + 8|0);
            HEAP32[$601>>2] = -1;
            $602 = (($596) + 12|0);
            HEAP32[$602>>2] = -1;
            HEAP32[$598>>2] = -2;
            $603 = (($598) + 4|0);
            HEAP32[$603>>2] = 32;
            $604 = (($598) + 8|0);
            HEAP32[$604>>2] = -1;
            $$0$i32 = $596;
           }
          }
          $605 = HEAP32[$10>>2]|0;
          $606 = (($605) + 1|0);
          HEAP32[$10>>2] = $606;
          $node$2$i69 = $$0$i32;
          break;
         }
         case 120:  {
          $607 = (($237) + 2|0);
          HEAP32[$10>>2] = $607;
          $608 = HEAP8[$607>>0]|0;
          $609 = ($608<<24>>24)==(123);
          if ($609) {
           $637 = (($237) + 3|0);
           HEAP32[$10>>2] = $637;
           $$in = $637;$i$077 = 0;
           while(1) {
            $638 = HEAP8[$$in>>0]|0;
            if ((($638<<24>>24) == 0) | (($638<<24>>24) == 125)) {
             $i$0$lcssa = $i$077;$storemerge4$lcssa = $$in;
             break;
            }
            $639 = $638 << 24 >> 24;
            $640 = (_iswxdigit($639)|0);
            $641 = ($640|0)==(0);
            if ($641) {
             $$2 = 9;
             label = 294;
             break L6;
            }
            $642 = HEAP32[$10>>2]|0;
            $643 = HEAP8[$642>>0]|0;
            $644 = (($tmp4) + ($i$077)|0);
            HEAP8[$644>>0] = $643;
            $645 = (($i$077) + 1)|0;
            $646 = (($642) + 1|0);
            HEAP32[$10>>2] = $646;
            $notrhs = ($645>>>0)>(31);
            if ($notrhs) {
             $i$0$lcssa = $645;$storemerge4$lcssa = $646;
             break;
            } else {
             $$in = $646;$i$077 = $645;
            }
           }
           $647 = (($storemerge4$lcssa) + 1|0);
           HEAP32[$10>>2] = $647;
           $648 = (($tmp4) + ($i$0$lcssa)|0);
           HEAP8[$648>>0] = 0;
           $649 = (_strtol($tmp4,0,16)|0);
           $650 = HEAP32[$ctx>>2]|0;
           $651 = HEAP32[$17>>2]|0;
           $652 = (___tre_mem_alloc_impl($650,0,0,1,32)|0);
           $653 = ($652|0)==(0|0);
           if ($653) {
            $$0$i36 = 0;
           } else {
            $654 = (___tre_mem_alloc_impl($650,0,0,1,20)|0);
            $655 = (($652) + 4|0);
            HEAP32[$655>>2] = $654;
            $656 = ($654|0)==(0|0);
            if ($656) {
             $$0$i36 = 0;
            } else {
             HEAP32[$652>>2] = 0;
             $657 = (($652) + 8|0);
             HEAP32[$657>>2] = -1;
             $658 = (($652) + 12|0);
             HEAP32[$658>>2] = -1;
             HEAP32[$654>>2] = $649;
             $659 = (($654) + 4|0);
             HEAP32[$659>>2] = $649;
             $660 = (($654) + 8|0);
             HEAP32[$660>>2] = $651;
             $$0$i36 = $652;
            }
           }
           $661 = HEAP32[$17>>2]|0;
           $662 = (($661) + 1)|0;
           HEAP32[$17>>2] = $662;
           $node$2$i69 = $$0$i36;
           break L37;
          } else {
           ;HEAP8[$tmp+0>>0]=0|0;HEAP8[$tmp+1>>0]=0|0;HEAP8[$tmp+2>>0]=0|0;
           $610 = $608 << 24 >> 24;
           $611 = (_iswxdigit($610)|0);
           $612 = ($611|0)==(0);
           $$pre = HEAP32[$10>>2]|0;
           if ($612) {
            $616 = $$pre;
           } else {
            $613 = HEAP8[$$pre>>0]|0;
            HEAP8[$tmp>>0] = $613;
            $614 = (($$pre) + 1|0);
            HEAP32[$10>>2] = $614;
            $616 = $614;
           }
           $615 = HEAP8[$616>>0]|0;
           $617 = $615 << 24 >> 24;
           $618 = (_iswxdigit($617)|0);
           $619 = ($618|0)==(0);
           if (!($619)) {
            $620 = HEAP32[$10>>2]|0;
            $621 = HEAP8[$620>>0]|0;
            HEAP8[$20>>0] = $621;
            $622 = (($620) + 1|0);
            HEAP32[$10>>2] = $622;
           }
           $623 = (_strtol($tmp,0,16)|0);
           $624 = HEAP32[$ctx>>2]|0;
           $625 = HEAP32[$17>>2]|0;
           $626 = (___tre_mem_alloc_impl($624,0,0,1,32)|0);
           $627 = ($626|0)==(0|0);
           if ($627) {
            $$0$i34 = 0;
           } else {
            $628 = (___tre_mem_alloc_impl($624,0,0,1,20)|0);
            $629 = (($626) + 4|0);
            HEAP32[$629>>2] = $628;
            $630 = ($628|0)==(0|0);
            if ($630) {
             $$0$i34 = 0;
            } else {
             HEAP32[$626>>2] = 0;
             $631 = (($626) + 8|0);
             HEAP32[$631>>2] = -1;
             $632 = (($626) + 12|0);
             HEAP32[$632>>2] = -1;
             HEAP32[$628>>2] = $623;
             $633 = (($628) + 4|0);
             HEAP32[$633>>2] = $623;
             $634 = (($628) + 8|0);
             HEAP32[$634>>2] = $625;
             $$0$i34 = $626;
            }
           }
           $635 = HEAP32[$17>>2]|0;
           $636 = (($635) + 1)|0;
           HEAP32[$17>>2] = $636;
           $node$2$i69 = $$0$i34;
           break L37;
          }
          break;
         }
         case 98:  {
          $559 = HEAP32[$ctx>>2]|0;
          $560 = (___tre_mem_alloc_impl($559,0,0,1,32)|0);
          $561 = ($560|0)==(0|0);
          if ($561) {
           $$0$i26 = 0;
          } else {
           $562 = (___tre_mem_alloc_impl($559,0,0,1,20)|0);
           $563 = (($560) + 4|0);
           HEAP32[$563>>2] = $562;
           $564 = ($562|0)==(0|0);
           if ($564) {
            $$0$i26 = 0;
           } else {
            HEAP32[$560>>2] = 0;
            $565 = (($560) + 8|0);
            HEAP32[$565>>2] = -1;
            $566 = (($560) + 12|0);
            HEAP32[$566>>2] = -1;
            HEAP32[$562>>2] = -2;
            $567 = (($562) + 4|0);
            HEAP32[$567>>2] = 64;
            $568 = (($562) + 8|0);
            HEAP32[$568>>2] = -1;
            $$0$i26 = $560;
           }
          }
          $569 = HEAP32[$10>>2]|0;
          $570 = (($569) + 1|0);
          HEAP32[$10>>2] = $570;
          $node$2$i69 = $$0$i26;
          break;
         }
         default: {
          $663 = (_iswdigit($558)|0);
          $664 = ($663|0)==(0);
          if (!($664)) {
           $665 = HEAP32[$10>>2]|0;
           $666 = HEAP8[$665>>0]|0;
           $667 = $666 << 24 >> 24;
           $668 = (($667) + -48)|0;
           $669 = HEAP32[$ctx>>2]|0;
           $670 = HEAP32[$17>>2]|0;
           $671 = (___tre_mem_alloc_impl($669,0,0,1,32)|0);
           $672 = ($671|0)==(0|0);
           if ($672) {
            $$2 = 12;
            label = 294;
            break L6;
           }
           $673 = (___tre_mem_alloc_impl($669,0,0,1,20)|0);
           $674 = (($671) + 4|0);
           HEAP32[$674>>2] = $673;
           $675 = ($673|0)==(0|0);
           if ($675) {
            $$2 = 12;
            label = 294;
            break L6;
           }
           HEAP32[$671>>2] = 0;
           $676 = (($671) + 8|0);
           HEAP32[$676>>2] = -1;
           $677 = (($671) + 12|0);
           HEAP32[$677>>2] = -1;
           HEAP32[$673>>2] = -4;
           $678 = (($673) + 4|0);
           HEAP32[$678>>2] = $668;
           $679 = (($673) + 8|0);
           HEAP32[$679>>2] = $670;
           $680 = HEAP32[$17>>2]|0;
           $681 = (($680) + 1)|0;
           HEAP32[$17>>2] = $681;
           $682 = HEAP32[$19>>2]|0;
           $683 = ($668|0)<($682|0);
           $$12 = $683 ? $682 : $668;
           HEAP32[$19>>2] = $$12;
           $684 = HEAP32[$10>>2]|0;
           $685 = (($684) + 1|0);
           HEAP32[$10>>2] = $685;
           $depth$0$be = $depth$0138;$node$2$i68$be = $671;$status$0$be = 0;
           break L8;
          }
          $686 = HEAP32[$ctx>>2]|0;
          $687 = HEAP32[$10>>2]|0;
          $688 = HEAP8[$687>>0]|0;
          $689 = $688 << 24 >> 24;
          $690 = HEAP32[$17>>2]|0;
          $691 = (___tre_mem_alloc_impl($686,0,0,1,32)|0);
          $692 = ($691|0)==(0|0);
          if ($692) {
           $$0$i40 = 0;
          } else {
           $693 = (___tre_mem_alloc_impl($686,0,0,1,20)|0);
           $694 = (($691) + 4|0);
           HEAP32[$694>>2] = $693;
           $695 = ($693|0)==(0|0);
           if ($695) {
            $$0$i40 = 0;
           } else {
            HEAP32[$691>>2] = 0;
            $696 = (($691) + 8|0);
            HEAP32[$696>>2] = -1;
            $697 = (($691) + 12|0);
            HEAP32[$697>>2] = -1;
            HEAP32[$693>>2] = $689;
            $698 = (($693) + 4|0);
            HEAP32[$698>>2] = $689;
            $699 = (($693) + 8|0);
            HEAP32[$699>>2] = $690;
            $$0$i40 = $691;
           }
          }
          $700 = HEAP32[$17>>2]|0;
          $701 = (($700) + 1)|0;
          HEAP32[$17>>2] = $701;
          $702 = HEAP32[$10>>2]|0;
          $703 = (($702) + 1|0);
          HEAP32[$10>>2] = $703;
          $node$2$i69 = $$0$i40;
         }
         }
        } while(0);
        $704 = ($node$2$i69|0)==(0|0);
        if ($704) {
         $$2 = 12;
         label = 294;
         break L6;
        } else {
         $depth$0$be = $depth$0138;$node$2$i68$be = $node$2$i69;$status$0$be = 0;
         break L8;
        }
        break;
       }
       case 94:  {
        $760 = HEAP32[$16>>2]|0;
        $761 = $760 & 1;
        $762 = ($761|0)==(0);
        if ($762) {
         $763 = HEAP32[$12>>2]|0;
         $764 = ($237|0)==($763|0);
         if (!($764)) {
          break L12;
         }
         $765 = (_tre_stack_push($1,(5))|0);
         $766 = ($765|0)==(0);
         if (!($766)) {
          $depth$0$be$ph = $depth$0138;$status$0$be$ph = $765;
          label = 6;
          break L6;
         }
        }
        $767 = HEAP32[$ctx>>2]|0;
        $768 = (___tre_mem_alloc_impl($767,0,0,1,32)|0);
        $769 = ($768|0)==(0|0);
        if ($769) {
         $$2 = 12;
         label = 294;
         break L6;
        }
        $770 = (___tre_mem_alloc_impl($767,0,0,1,20)|0);
        $771 = (($768) + 4|0);
        HEAP32[$771>>2] = $770;
        $772 = ($770|0)==(0|0);
        if ($772) {
         $$2 = 12;
         label = 294;
         break L6;
        }
        HEAP32[$768>>2] = 0;
        $773 = (($768) + 8|0);
        HEAP32[$773>>2] = -1;
        $774 = (($768) + 12|0);
        HEAP32[$774>>2] = -1;
        HEAP32[$770>>2] = -2;
        $775 = (($770) + 4|0);
        HEAP32[$775>>2] = 1;
        $776 = (($770) + 8|0);
        HEAP32[$776>>2] = -1;
        $777 = HEAP32[$10>>2]|0;
        $778 = (($777) + 1|0);
        HEAP32[$10>>2] = $778;
        $depth$0$be = $depth$0138;$node$2$i68$be = $768;$status$0$be = 0;
        break L8;
        break;
       }
       case 46:  {
        $705 = HEAP32[$16>>2]|0;
        $706 = $705 & 4;
        $707 = ($706|0)==(0);
        $708 = HEAP32[$ctx>>2]|0;
        $709 = HEAP32[$17>>2]|0;
        $710 = (___tre_mem_alloc_impl($708,0,0,1,32)|0);
        $711 = ($710|0)==(0|0);
        if ($707) {
         if ($711) {
          $$2 = 12;
          label = 294;
          break L6;
         }
         $749 = (___tre_mem_alloc_impl($708,0,0,1,20)|0);
         $750 = (($710) + 4|0);
         HEAP32[$750>>2] = $749;
         $751 = ($749|0)==(0|0);
         if ($751) {
          $$2 = 12;
          label = 294;
          break L6;
         }
         HEAP32[$710>>2] = 0;
         $752 = (($710) + 8|0);
         HEAP32[$752>>2] = -1;
         $753 = (($710) + 12|0);
         HEAP32[$753>>2] = -1;
         HEAP32[$749>>2] = 0;
         $754 = (($749) + 4|0);
         HEAP32[$754>>2] = 1114111;
         $755 = (($749) + 8|0);
         HEAP32[$755>>2] = $709;
         $756 = HEAP32[$17>>2]|0;
         $757 = (($756) + 1)|0;
         $node$2$i70 = $710;$storemerge = $757;
        } else {
         if ($711) {
          $$2 = 12;
          label = 294;
          break L6;
         }
         $712 = (___tre_mem_alloc_impl($708,0,0,1,20)|0);
         $713 = (($710) + 4|0);
         HEAP32[$713>>2] = $712;
         $714 = ($712|0)==(0|0);
         if ($714) {
          $$2 = 12;
          label = 294;
          break L6;
         }
         HEAP32[$710>>2] = 0;
         $715 = (($710) + 8|0);
         HEAP32[$715>>2] = -1;
         $716 = (($710) + 12|0);
         HEAP32[$716>>2] = -1;
         HEAP32[$712>>2] = 0;
         $717 = (($712) + 4|0);
         HEAP32[$717>>2] = 9;
         $718 = (($712) + 8|0);
         HEAP32[$718>>2] = $709;
         $719 = HEAP32[$ctx>>2]|0;
         $720 = HEAP32[$17>>2]|0;
         $721 = (($720) + 1)|0;
         $722 = (___tre_mem_alloc_impl($719,0,0,1,32)|0);
         $723 = ($722|0)==(0|0);
         if ($723) {
          $$2 = 12;
          label = 294;
          break L6;
         }
         $724 = (___tre_mem_alloc_impl($719,0,0,1,20)|0);
         $725 = (($722) + 4|0);
         HEAP32[$725>>2] = $724;
         $726 = ($724|0)==(0|0);
         if ($726) {
          $$2 = 12;
          label = 294;
          break L6;
         }
         HEAP32[$722>>2] = 0;
         $727 = (($722) + 8|0);
         HEAP32[$727>>2] = -1;
         $728 = (($722) + 12|0);
         HEAP32[$728>>2] = -1;
         HEAP32[$724>>2] = 11;
         $729 = (($724) + 4|0);
         HEAP32[$729>>2] = 1114111;
         $730 = (($724) + 8|0);
         HEAP32[$730>>2] = $721;
         $731 = HEAP32[$ctx>>2]|0;
         $732 = (___tre_mem_alloc_impl($731,0,0,1,32)|0);
         $733 = ($732|0)==(0|0);
         if ($733) {
          $$2 = 12;
          label = 294;
          break L6;
         }
         $734 = (___tre_mem_alloc_impl($731,0,0,1,8)|0);
         $735 = (($732) + 4|0);
         HEAP32[$735>>2] = $734;
         $736 = ($734|0)==(0|0);
         if ($736) {
          $$2 = 12;
          label = 294;
          break L6;
         }
         HEAP32[$732>>2] = 3;
         $737 = (($732) + 8|0);
         HEAP32[$737>>2] = -1;
         $738 = (($732) + 12|0);
         HEAP32[$738>>2] = -1;
         HEAP32[$734>>2] = $710;
         $739 = HEAP32[$735>>2]|0;
         $740 = (($739) + 4|0);
         HEAP32[$740>>2] = $722;
         $741 = (($710) + 16|0);
         $742 = HEAP32[$741>>2]|0;
         $743 = (($722) + 16|0);
         $744 = HEAP32[$743>>2]|0;
         $745 = (($744) + ($742))|0;
         $746 = (($732) + 16|0);
         HEAP32[$746>>2] = $745;
         $747 = HEAP32[$17>>2]|0;
         $748 = (($747) + 2)|0;
         $node$2$i70 = $732;$storemerge = $748;
        }
        HEAP32[$17>>2] = $storemerge;
        $758 = HEAP32[$10>>2]|0;
        $759 = (($758) + 1|0);
        HEAP32[$10>>2] = $759;
        $depth$0$be = $depth$0138;$node$2$i68$be = $node$2$i70;$status$0$be = 0;
        break L8;
        break;
       }
       case 91:  {
        $255 = (($237) + 1|0);
        HEAP32[$10>>2] = $255;
        $256 = (_malloc(128)|0);
        $257 = ($256|0)==(0|0);
        if ($257) {
         $$2 = 12;
         label = 294;
         break L6;
        }
        $258 = HEAP8[$255>>0]|0;
        $259 = ($258<<24>>24)==(94);
        if ($259) {
         $260 = (($237) + 2|0);
         HEAP32[$10>>2] = $260;
         $927 = $260;$negate$0$i = 1;
        } else {
         $927 = $255;$negate$0$i = 0;
        }
        $261 = ($negate$0$i|0)==(0);
        $307 = 0;$312 = 0;$313 = 32;$317 = $256;$re$1$i$i = $927;
        L117: while(1) {
         $262 = HEAP8[$re$1$i$i>>0]|0;
         if ((($262<<24>>24) == 0)) {
          $$ph$i = $317;$re$4$i$ph$i = $re$1$i$i;$status$10$i$ph$i = 7;
          label = 140;
          break;
         } else if ((($262<<24>>24) == 93)) {
          $263 = HEAP32[$10>>2]|0;
          $264 = ($re$1$i$i>>>0)>($263>>>0);
          if ($264) {
           label = 85;
           break;
          }
         }
         $267 = (_mbtowc($wc$i$i,$re$1$i$i,-1)|0);
         $268 = ($267|0)<(0);
         if ($268) {
          HEAP32[$wc$i$i>>2] = -1;
          $clen$0$i$i = 1;
         } else {
          $clen$0$i$i = $267;
         }
         $269 = (($re$1$i$i) + ($clen$0$i$i)|0);
         $270 = HEAP8[$269>>0]|0;
         $271 = ($270<<24>>24)==(45);
         if ($271) {
          $$sum$i$i = (($clen$0$i$i) + 1)|0;
          $272 = (($re$1$i$i) + ($$sum$i$i)|0);
          $273 = HEAP8[$272>>0]|0;
          $274 = ($273<<24>>24)==(93);
          if ($274) {
           label = 94;
          } else {
           $275 = HEAP32[$wc$i$i>>2]|0;
           $276 = (_mbtowc($wc$i$i,$272,-1)|0);
           $277 = ($276|0)<(0);
           if ($277) {
            HEAP32[$wc$i$i>>2] = -1;
            $280 = -1;$clen$1$i$i = 1;
           } else {
            $$pre$i$i = HEAP32[$wc$i$i>>2]|0;
            $280 = $$pre$i$i;$clen$1$i$i = $276;
           }
           $$sum5$i$i = (($clen$1$i$i) + ($$sum$i$i))|0;
           $278 = (($re$1$i$i) + ($$sum5$i$i)|0);
           $279 = ($275>>>0)>($280>>>0);
           $$status$1$i$i = $279 ? 11 : 0;
           $class$1$i$i = 0;$max$0$i$i = $280;$min$0$i$i = $275;$re$3$i$i = $278;$status$5$i$i = $$status$1$i$i;
          }
         } else {
          label = 94;
         }
         L132: do {
          if ((label|0) == 94) {
           label = 0;
           $281 = HEAP8[$re$1$i$i>>0]|0;
           do {
            if ((($281<<24>>24) == 91)) {
             $282 = (($re$1$i$i) + 1|0);
             $283 = HEAP8[$282>>0]|0;
             if ((($283<<24>>24) == 61) | (($283<<24>>24) == 46)) {
              $$ph$i = $317;$re$4$i$ph$i = $re$1$i$i;$status$10$i$ph$i = 3;
              label = 140;
              break L117;
             } else if (!((($283<<24>>24) == 58))) {
              $status$4$i$i = 0;
              break;
             }
             $284 = (($re$1$i$i) + 2|0);
             $endptr$0$i$i = $284;
             while(1) {
              $285 = HEAP8[$endptr$0$i$i>>0]|0;
              $286 = ($285<<24>>24)==(0);
              $287 = ($285<<24>>24)!=(58);
              $not$32$i$i = $286 ^ 1;
              $$$i$i = $287 & $not$32$i$i;
              $288 = (($endptr$0$i$i) + 1|0);
              if ($$$i$i) {
               $endptr$0$i$i = $288;
              } else {
               break;
              }
             }
             if ($286) {
              $$ph$i = $317;$re$4$i$ph$i = $re$1$i$i;$status$10$i$ph$i = 4;
              label = 140;
              break L117;
             }
             $289 = $endptr$0$i$i;
             $290 = $re$1$i$i;
             $291 = (($289) - ($290))|0;
             $292 = (($291) + -2)|0;
             $293 = ($292|0)>(63);
             $$6$i$i = $293 ? 63 : $292;
             (_strncpy(($tmp_str$i$i|0),($284|0),($$6$i$i|0))|0);
             $294 = (($tmp_str$i$i) + ($$6$i$i)|0);
             HEAP8[$294>>0] = 0;
             $295 = (_wctype($tmp_str$i$i)|0);
             $296 = ($295|0)==(0);
             $status$2$i$i = $296 ? 4 : 0;
             $297 = (($endptr$0$i$i) + 2|0);
             $class$1$i$i = $295;$max$0$i$i = 1114111;$min$0$i$i = 0;$re$3$i$i = $297;$status$5$i$i = $status$2$i$i;
             break L132;
            } else if ((($281<<24>>24) == 45)) {
             $298 = (($re$1$i$i) + 1|0);
             $299 = HEAP8[$298>>0]|0;
             $300 = ($299<<24>>24)==(93);
             if ($300) {
              $status$4$i$i = 0;
             } else {
              $301 = HEAP32[$10>>2]|0;
              $302 = ($301|0)==($re$1$i$i|0);
              $status$1$$i$i = $302 ? 0 : 11;
              $status$4$i$i = $status$1$$i$i;
             }
            } else {
             $status$4$i$i = 0;
            }
           } while(0);
           $303 = HEAP32[$wc$i$i>>2]|0;
           $class$1$i$i = 0;$max$0$i$i = $303;$min$0$i$i = $303;$re$3$i$i = $269;$status$5$i$i = $status$4$i$i;
          }
         } while(0);
         $304 = ($status$5$i$i|0)==(0);
         if (!($304)) {
          $$ph$i = $317;$re$4$i$ph$i = $re$3$i$i;$status$10$i$ph$i = $status$5$i$i;
          label = 140;
          break;
         }
         $305 = ($class$1$i$i|0)!=(0);
         $$not$i$i = $305 ^ 1;
         $or$cond$i$i = $261 | $$not$i$i;
         if ($or$cond$i$i) {
          $310 = HEAP32[$ctx>>2]|0;
          $311 = ($312|0)<($313|0);
          if ($311) {
           $326 = $317;$932 = $313;
          } else {
           $314 = ($313|0)>(1024);
           if ($314) {
            $$ph$i = $317;$re$4$i$ph$i = $re$3$i$i;$status$10$i$ph$i = 12;
            label = 140;
            break;
           }
           $315 = $313 << 1;
           $316 = $313 << 3;
           $318 = (_realloc($317,$316)|0);
           $319 = ($318|0)==(0|0);
           if ($319) {
            $$ph$i = $317;$re$4$i$ph$i = $re$3$i$i;$status$10$i$ph$i = 12;
            label = 140;
            break;
           } else {
            $326 = $318;$932 = $315;
           }
          }
          $320 = (___tre_mem_alloc_impl($310,0,0,1,32)|0);
          $321 = ($320|0)==(0|0);
          if ($321) {
           label = 112;
           break;
          }
          $322 = (___tre_mem_alloc_impl($310,0,0,1,20)|0);
          $323 = (($320) + 4|0);
          HEAP32[$323>>2] = $322;
          $324 = ($322|0)==(0|0);
          if ($324) {
           label = 112;
           break;
          }
          HEAP32[$320>>2] = 0;
          $327 = (($320) + 8|0);
          HEAP32[$327>>2] = -1;
          $328 = (($320) + 12|0);
          HEAP32[$328>>2] = -1;
          HEAP32[$322>>2] = $min$0$i$i;
          $329 = (($322) + 4|0);
          HEAP32[$329>>2] = $max$0$i$i;
          $330 = (($322) + 8|0);
          HEAP32[$330>>2] = -1;
          $331 = (($326) + ($312<<2)|0);
          HEAP32[$331>>2] = $320;
          $332 = (($312) + 1)|0;
          $333 = HEAP32[$323>>2]|0;
          $334 = (($333) + 12|0);
          HEAP32[$334>>2] = $class$1$i$i;
          $928 = $326;$929 = $307;$930 = $332;$931 = $932;$status$6$i$i = 0;
         } else {
          $306 = ($307|0)>(63);
          if ($306) {
           $928 = $317;$929 = $307;$930 = $312;$931 = $313;$status$6$i$i = 12;
          } else {
           $308 = (($307) + 1)|0;
           $309 = (($neg_classes$i) + ($307<<2)|0);
           HEAP32[$309>>2] = $class$1$i$i;
           $928 = $317;$929 = $308;$930 = $312;$931 = $313;$status$6$i$i = 0;
          }
         }
         $335 = HEAP32[$16>>2]|0;
         $336 = $335 & 2;
         $337 = ($336|0)==(0);
         $brmerge$i$i = $337 | $305;
         $brmerge$not$i$i = $brmerge$i$i ^ 1;
         $338 = ($status$6$i$i|0)==(0);
         $or$cond7$i$i = $338 & $brmerge$not$i$i;
         if ($or$cond7$i$i) {
          $$ph33$i = $928;$$ph34$i = $930;$$ph35$i = $931;$min$1$i$ph$i = $min$0$i$i;
         } else {
          if ($338) {
           $307 = $929;$312 = $930;$313 = $931;$317 = $928;$re$1$i$i = $re$3$i$i;
           continue;
          } else {
           $$ph$i = $928;$re$4$i$ph$i = $re$3$i$i;$status$10$i$ph$i = $status$6$i$i;
           label = 140;
           break;
          }
         }
         while(1) {
          $min$1$i$i = $min$1$i$ph$i;
          while(1) {
           $339 = ($min$1$i$i>>>0)>($max$0$i$i>>>0);
           if ($339) {
            $307 = $929;$312 = $$ph34$i;$313 = $$ph35$i;$317 = $$ph33$i;$re$1$i$i = $re$3$i$i;
            continue L117;
           }
           $340 = (_iswlower($min$1$i$i)|0);
           $341 = ($340|0)==(0);
           if (!($341)) {
            label = 118;
            break;
           }
           $370 = (_iswupper($min$1$i$i)|0);
           $371 = ($370|0)==(0);
           $372 = (($min$1$i$i) + 1)|0;
           if ($371) {
            $min$1$i$i = $372;
           } else {
            label = 129;
            break;
           }
          }
          if ((label|0) == 118) {
           label = 0;
           $342 = (_towupper($min$1$i$i)|0);
           $min$233$i$i = (($min$1$i$i) + 1)|0;
           $343 = (_iswlower($min$233$i$i)|0);
           $344 = ($343|0)==(0);
           L181: do {
            if ($344) {
             $ccurr$0$lcssa$i$i = $342;$min$2$lcssa$i$i = $min$233$i$i;
            } else {
             $ccurr$034$i$i = $342;$min$235$i$i = $min$233$i$i;
             while(1) {
              $345 = (_towupper($min$235$i$i)|0);
              $346 = (($ccurr$034$i$i) + 1)|0;
              $347 = ($345|0)!=($346|0);
              $348 = ($min$235$i$i>>>0)>($max$0$i$i>>>0);
              $or$cond8$i$i = $347 | $348;
              if ($or$cond8$i$i) {
               $ccurr$0$lcssa$i$i = $ccurr$034$i$i;$min$2$lcssa$i$i = $min$235$i$i;
               break L181;
              }
              $349 = (_towupper($min$235$i$i)|0);
              $min$2$i$i = (($min$235$i$i) + 1)|0;
              $350 = (_iswlower($min$2$i$i)|0);
              $351 = ($350|0)==(0);
              if ($351) {
               $ccurr$0$lcssa$i$i = $349;$min$2$lcssa$i$i = $min$2$i$i;
               break;
              } else {
               $ccurr$034$i$i = $349;$min$235$i$i = $min$2$i$i;
              }
             }
            }
           } while(0);
           $352 = HEAP32[$ctx>>2]|0;
           $353 = ($$ph34$i|0)<($$ph35$i|0);
           if ($353) {
            $369 = $$ph33$i;$933 = $$ph35$i;
           } else {
            $354 = ($$ph35$i|0)>(1024);
            if ($354) {
             $$ph$i = $$ph33$i;$re$4$i$ph$i = $re$3$i$i;$status$10$i$ph$i = 12;
             label = 140;
             break L117;
            }
            $355 = $$ph35$i << 1;
            $356 = $$ph35$i << 3;
            $357 = (_realloc($$ph33$i,$356)|0);
            $358 = ($357|0)==(0|0);
            if ($358) {
             $$ph$i = $$ph33$i;$re$4$i$ph$i = $re$3$i$i;$status$10$i$ph$i = 12;
             label = 140;
             break L117;
            } else {
             $369 = $357;$933 = $355;
            }
           }
           $359 = (___tre_mem_alloc_impl($352,0,0,1,32)|0);
           $360 = ($359|0)==(0|0);
           do {
            if ($360) {
             $$0$i14$i$i = 0;
            } else {
             $361 = (___tre_mem_alloc_impl($352,0,0,1,20)|0);
             $362 = (($359) + 4|0);
             HEAP32[$362>>2] = $361;
             $363 = ($361|0)==(0|0);
             if ($363) {
              $$0$i14$i$i = 0;
              break;
             }
             HEAP32[$359>>2] = 0;
             $364 = (($359) + 8|0);
             HEAP32[$364>>2] = -1;
             $365 = (($359) + 12|0);
             HEAP32[$365>>2] = -1;
             HEAP32[$361>>2] = $342;
             $366 = (($361) + 4|0);
             HEAP32[$366>>2] = $ccurr$0$lcssa$i$i;
             $367 = (($361) + 8|0);
             HEAP32[$367>>2] = -1;
             $$0$i14$i$i = $359;
            }
           } while(0);
           $368 = (($369) + ($$ph34$i<<2)|0);
           HEAP32[$368>>2] = $$0$i14$i$i;
           $$0$i14$sink$i$i = $$0$i14$i$i;$934 = $369;$935 = $933;$min$4$i$i = $min$2$lcssa$i$i;
          }
          else if ((label|0) == 129) {
           label = 0;
           $373 = (_towlower($min$1$i$i)|0);
           $374 = (_iswupper($372)|0);
           $375 = ($374|0)==(0);
           L167: do {
            if ($375) {
             $ccurr$1$lcssa$i$i = $373;$min$3$lcssa$i$i = $372;
            } else {
             $ccurr$138$i$i = $373;$min$337$i$i = $372;
             while(1) {
              $376 = (_towlower($min$337$i$i)|0);
              $377 = (($ccurr$138$i$i) + 1)|0;
              $378 = ($376|0)!=($377|0);
              $379 = ($min$337$i$i>>>0)>($max$0$i$i>>>0);
              $or$cond9$i$i = $378 | $379;
              if ($or$cond9$i$i) {
               $ccurr$1$lcssa$i$i = $ccurr$138$i$i;$min$3$lcssa$i$i = $min$337$i$i;
               break L167;
              }
              $380 = (($min$337$i$i) + 1)|0;
              $381 = (_towlower($min$337$i$i)|0);
              $382 = (_iswupper($380)|0);
              $383 = ($382|0)==(0);
              if ($383) {
               $ccurr$1$lcssa$i$i = $381;$min$3$lcssa$i$i = $380;
               break;
              } else {
               $ccurr$138$i$i = $381;$min$337$i$i = $380;
              }
             }
            }
           } while(0);
           $384 = HEAP32[$ctx>>2]|0;
           $385 = ($$ph34$i|0)<($$ph35$i|0);
           if ($385) {
            $401 = $$ph33$i;$936 = $$ph35$i;
           } else {
            $386 = ($$ph35$i|0)>(1024);
            if ($386) {
             $$ph$i = $$ph33$i;$re$4$i$ph$i = $re$3$i$i;$status$10$i$ph$i = 12;
             label = 140;
             break L117;
            }
            $387 = $$ph35$i << 1;
            $388 = $$ph35$i << 3;
            $389 = (_realloc($$ph33$i,$388)|0);
            $390 = ($389|0)==(0|0);
            if ($390) {
             $$ph$i = $$ph33$i;$re$4$i$ph$i = $re$3$i$i;$status$10$i$ph$i = 12;
             label = 140;
             break L117;
            } else {
             $401 = $389;$936 = $387;
            }
           }
           $391 = (___tre_mem_alloc_impl($384,0,0,1,32)|0);
           $392 = ($391|0)==(0|0);
           do {
            if ($392) {
             $$0$i19$i$i = 0;
            } else {
             $393 = (___tre_mem_alloc_impl($384,0,0,1,20)|0);
             $394 = (($391) + 4|0);
             HEAP32[$394>>2] = $393;
             $395 = ($393|0)==(0|0);
             if ($395) {
              $$0$i19$i$i = 0;
              break;
             }
             HEAP32[$391>>2] = 0;
             $396 = (($391) + 8|0);
             HEAP32[$396>>2] = -1;
             $397 = (($391) + 12|0);
             HEAP32[$397>>2] = -1;
             HEAP32[$393>>2] = $373;
             $398 = (($393) + 4|0);
             HEAP32[$398>>2] = $ccurr$1$lcssa$i$i;
             $399 = (($393) + 8|0);
             HEAP32[$399>>2] = -1;
             $$0$i19$i$i = $391;
            }
           } while(0);
           $400 = (($401) + ($$ph34$i<<2)|0);
           HEAP32[$400>>2] = $$0$i19$i$i;
           $$0$i14$sink$i$i = $$0$i19$i$i;$934 = $401;$935 = $936;$min$4$i$i = $min$3$lcssa$i$i;
          }
          $402 = ($$0$i14$sink$i$i|0)==(0|0);
          $403 = (($$ph34$i) + 1)|0;
          if ($402) {
           label = 141;
           break L117;
          } else {
           $$ph33$i = $934;$$ph34$i = $403;$$ph35$i = $935;$min$1$i$ph$i = $min$4$i$i;
          }
         }
        }
        L195: do {
         if ((label|0) == 85) {
          label = 0;
          $265 = (($re$1$i$i) + 1|0);
          HEAP32[$10>>2] = $265;
          $266 = ($negate$0$i|0)!=(0);
          if ($266) {
           _qsort($317,$312,4,4);
          }
          $404 = ($312|0)>(0);
          L201: do {
           if ($404) {
            $405 = ($307|0)>(0);
            $406 = $307 << 2;
            $407 = (($406) + 4)|0;
            if ($266) {
             $curr_max$026$us$i = 0;$curr_min$027$us$i = 0;$j$025$us$i = 0;$node$028$us$i = 0;
            } else {
             $j$025$i = 0;$node$028$i = 0;
             while(1) {
              $454 = (($317) + ($j$025$i<<2)|0);
              $455 = HEAP32[$454>>2]|0;
              $456 = (($455) + 4|0);
              $457 = HEAP32[$456>>2]|0;
              $458 = ($457|0)==(0|0);
              do {
               if ($458) {
                $node$1$i = $node$028$i;$status$2$i = 0;
               } else {
                $459 = HEAP32[$17>>2]|0;
                $460 = (($457) + 8|0);
                HEAP32[$460>>2] = $459;
                if ($405) {
                 $461 = HEAP32[$ctx>>2]|0;
                 $462 = (___tre_mem_alloc_impl($461,0,0,0,$407)|0);
                 $463 = (($457) + 16|0);
                 HEAP32[$463>>2] = $462;
                 $464 = ($462|0)==(0|0);
                 if ($464) {
                  $528 = $317;$node$2$i = $node$028$i;$status$5$i = 12;
                  break L195;
                 }
                 _memcpy(($462|0),($neg_classes$i|0),($406|0))|0;
                 $$pre107$i = HEAP32[$463>>2]|0;
                 $465 = (($$pre107$i) + ($307<<2)|0);
                 HEAP32[$465>>2] = 0;
                } else {
                 $466 = (($457) + 16|0);
                 HEAP32[$466>>2] = 0;
                }
                $467 = ($node$028$i|0)==(0|0);
                if ($467) {
                 $468 = HEAP32[$454>>2]|0;
                 $node$1$i = $468;$status$2$i = 0;
                 break;
                }
                $469 = HEAP32[$ctx>>2]|0;
                $470 = HEAP32[$454>>2]|0;
                $471 = (___tre_mem_alloc_impl($469,0,0,1,32)|0);
                $472 = ($471|0)==(0|0);
                do {
                 if ($472) {
                  $$0$i$i = 0;
                 } else {
                  $473 = (___tre_mem_alloc_impl($469,0,0,1,8)|0);
                  $474 = (($471) + 4|0);
                  HEAP32[$474>>2] = $473;
                  $475 = ($473|0)==(0|0);
                  if ($475) {
                   $$0$i$i = 0;
                   break;
                  }
                  HEAP32[$471>>2] = 3;
                  $476 = (($471) + 8|0);
                  HEAP32[$476>>2] = -1;
                  $477 = (($471) + 12|0);
                  HEAP32[$477>>2] = -1;
                  HEAP32[$473>>2] = $node$028$i;
                  $478 = HEAP32[$474>>2]|0;
                  $479 = (($478) + 4|0);
                  HEAP32[$479>>2] = $470;
                  $480 = (($node$028$i) + 16|0);
                  $481 = HEAP32[$480>>2]|0;
                  $482 = (($470) + 16|0);
                  $483 = HEAP32[$482>>2]|0;
                  $484 = (($483) + ($481))|0;
                  $485 = (($471) + 16|0);
                  HEAP32[$485>>2] = $484;
                  $$0$i$i = $471;
                 }
                } while(0);
                $486 = ($$0$i$i|0)==(0|0);
                $$status$0$i = $486 ? 12 : 0;
                $node$1$i = $$0$i$i;$status$2$i = $$status$0$i;
               }
              } while(0);
              $487 = (($j$025$i) + 1)|0;
              $488 = ($487|0)<($312|0);
              $489 = ($status$2$i|0)==(0);
              $or$cond$i22 = $488 & $489;
              if ($or$cond$i22) {
               $j$025$i = $487;$node$028$i = $node$1$i;
              } else {
               $curr_min$0$lcssa$i = 0;$node$0$lcssa$i = $node$1$i;$status$0$lcssa$i = $status$2$i;
               break L201;
              }
             }
            }
            while(1) {
             $408 = (($317) + ($j$025$us$i<<2)|0);
             $409 = HEAP32[$408>>2]|0;
             $410 = (($409) + 4|0);
             $411 = HEAP32[$410>>2]|0;
             $412 = HEAP32[$411>>2]|0;
             $413 = (($411) + 4|0);
             $414 = HEAP32[$413>>2]|0;
             $415 = ($412|0)<($curr_max$026$us$i|0);
             do {
              if ($415) {
               $449 = (($414) + 1)|0;
               $450 = ($449|0)<($curr_max$026$us$i|0);
               $curr_max$0$$us$i = $450 ? $curr_max$026$us$i : $449;
               $curr_max$19$us$i = $curr_max$0$$us$i;$curr_min$110$us$i = $curr_min$027$us$i;$node$1$us$i = $node$028$us$i;$status$2$us$i = 0;
              } else {
               $416 = ($412|0)>($curr_min$027$us$i|0);
               if (!($416)) {
                $417 = (($414) + 1)|0;
                $curr_max$19$us$i = $417;$curr_min$110$us$i = $417;$node$1$us$i = $node$028$us$i;$status$2$us$i = 0;
                break;
               }
               $418 = (($412) + -1)|0;
               HEAP32[$411>>2] = $curr_min$027$us$i;
               HEAP32[$413>>2] = $418;
               $419 = (($414) + 1)|0;
               $420 = ($411|0)==(0|0);
               if ($420) {
                $curr_max$19$us$i = $419;$curr_min$110$us$i = $419;$node$1$us$i = $node$028$us$i;$status$2$us$i = 0;
               } else {
                $421 = HEAP32[$17>>2]|0;
                $422 = (($411) + 8|0);
                HEAP32[$422>>2] = $421;
                if ($405) {
                 $424 = HEAP32[$ctx>>2]|0;
                 $425 = (___tre_mem_alloc_impl($424,0,0,0,$407)|0);
                 $426 = (($411) + 16|0);
                 HEAP32[$426>>2] = $425;
                 $427 = ($425|0)==(0|0);
                 if ($427) {
                  $528 = $317;$node$2$i = $node$028$us$i;$status$5$i = 12;
                  break L195;
                 }
                 _memcpy(($425|0),($neg_classes$i|0),($406|0))|0;
                 $$pre$i = HEAP32[$426>>2]|0;
                 $428 = (($$pre$i) + ($307<<2)|0);
                 HEAP32[$428>>2] = 0;
                } else {
                 $423 = (($411) + 16|0);
                 HEAP32[$423>>2] = 0;
                }
                $429 = ($node$028$us$i|0)==(0|0);
                if ($429) {
                 $448 = HEAP32[$408>>2]|0;
                 $curr_max$19$us$i = $419;$curr_min$110$us$i = $419;$node$1$us$i = $448;$status$2$us$i = 0;
                 break;
                }
                $430 = HEAP32[$ctx>>2]|0;
                $431 = HEAP32[$408>>2]|0;
                $432 = (___tre_mem_alloc_impl($430,0,0,1,32)|0);
                $433 = ($432|0)==(0|0);
                do {
                 if ($433) {
                  $$0$i$us$i = 0;
                 } else {
                  $434 = (___tre_mem_alloc_impl($430,0,0,1,8)|0);
                  $435 = (($432) + 4|0);
                  HEAP32[$435>>2] = $434;
                  $436 = ($434|0)==(0|0);
                  if ($436) {
                   $$0$i$us$i = 0;
                   break;
                  }
                  HEAP32[$432>>2] = 3;
                  $437 = (($432) + 8|0);
                  HEAP32[$437>>2] = -1;
                  $438 = (($432) + 12|0);
                  HEAP32[$438>>2] = -1;
                  HEAP32[$434>>2] = $node$028$us$i;
                  $439 = HEAP32[$435>>2]|0;
                  $440 = (($439) + 4|0);
                  HEAP32[$440>>2] = $431;
                  $441 = (($node$028$us$i) + 16|0);
                  $442 = HEAP32[$441>>2]|0;
                  $443 = (($431) + 16|0);
                  $444 = HEAP32[$443>>2]|0;
                  $445 = (($444) + ($442))|0;
                  $446 = (($432) + 16|0);
                  HEAP32[$446>>2] = $445;
                  $$0$i$us$i = $432;
                 }
                } while(0);
                $447 = ($$0$i$us$i|0)==(0|0);
                $$status$0$us$i = $447 ? 12 : 0;
                $curr_max$19$us$i = $419;$curr_min$110$us$i = $419;$node$1$us$i = $$0$i$us$i;$status$2$us$i = $$status$0$us$i;
               }
              }
             } while(0);
             $451 = (($j$025$us$i) + 1)|0;
             $452 = ($451|0)<($312|0);
             $453 = ($status$2$us$i|0)==(0);
             $or$cond$us$i = $452 & $453;
             if ($or$cond$us$i) {
              $curr_max$026$us$i = $curr_max$19$us$i;$curr_min$027$us$i = $curr_min$110$us$i;$j$025$us$i = $451;$node$028$us$i = $node$1$us$i;
             } else {
              $curr_min$0$lcssa$i = $curr_min$110$us$i;$node$0$lcssa$i = $node$1$us$i;$status$0$lcssa$i = $status$2$us$i;
              break;
             }
            }
           } else {
            $curr_min$0$lcssa$i = 0;$node$0$lcssa$i = 0;$status$0$lcssa$i = 0;
           }
          } while(0);
          $$not$i = ($status$0$lcssa$i|0)!=(0);
          $$not1$i = $266 ^ 1;
          $brmerge$i = $$not$i | $$not1$i;
          if ($brmerge$i) {
           $528 = $317;$node$2$i = $node$0$lcssa$i;$status$5$i = $status$0$lcssa$i;
          } else {
           $490 = HEAP32[$ctx>>2]|0;
           $491 = HEAP32[$17>>2]|0;
           $492 = (___tre_mem_alloc_impl($490,0,0,1,32)|0);
           $493 = ($492|0)==(0|0);
           if ($493) {
            $528 = $317;$node$2$i = $node$0$lcssa$i;$status$5$i = 12;
           } else {
            $494 = (___tre_mem_alloc_impl($490,0,0,1,20)|0);
            $495 = (($492) + 4|0);
            HEAP32[$495>>2] = $494;
            $496 = ($494|0)==(0|0);
            if ($496) {
             $528 = $317;$node$2$i = $node$0$lcssa$i;$status$5$i = 12;
            } else {
             HEAP32[$492>>2] = 0;
             $497 = (($492) + 8|0);
             HEAP32[$497>>2] = -1;
             $498 = (($492) + 12|0);
             HEAP32[$498>>2] = -1;
             HEAP32[$494>>2] = $curr_min$0$lcssa$i;
             $499 = (($494) + 4|0);
             HEAP32[$499>>2] = 1114111;
             $500 = (($494) + 8|0);
             HEAP32[$500>>2] = $491;
             $501 = ($307|0)>(0);
             if ($501) {
              $502 = HEAP32[$ctx>>2]|0;
              $503 = $307 << 2;
              $504 = (($503) + 4)|0;
              $505 = (___tre_mem_alloc_impl($502,0,0,0,$504)|0);
              $506 = (($494) + 16|0);
              HEAP32[$506>>2] = $505;
              $507 = ($505|0)==(0|0);
              if ($507) {
               $528 = $317;$node$2$i = $node$0$lcssa$i;$status$5$i = 12;
               break;
              }
              _memcpy(($505|0),($neg_classes$i|0),($503|0))|0;
              $$pre108$i = HEAP32[$506>>2]|0;
              $508 = (($$pre108$i) + ($307<<2)|0);
              HEAP32[$508>>2] = 0;
             } else {
              $509 = (($494) + 16|0);
              HEAP32[$509>>2] = 0;
             }
             $510 = ($node$0$lcssa$i|0)==(0|0);
             if ($510) {
              $528 = $317;$node$2$i = $492;$status$5$i = 0;
             } else {
              $511 = HEAP32[$ctx>>2]|0;
              $512 = (___tre_mem_alloc_impl($511,0,0,1,32)|0);
              $513 = ($512|0)==(0|0);
              if ($513) {
               $$0$i3$i = 0;
              } else {
               $514 = (___tre_mem_alloc_impl($511,0,0,1,8)|0);
               $515 = (($512) + 4|0);
               HEAP32[$515>>2] = $514;
               $516 = ($514|0)==(0|0);
               if ($516) {
                $$0$i3$i = 0;
               } else {
                HEAP32[$512>>2] = 3;
                $517 = (($512) + 8|0);
                HEAP32[$517>>2] = -1;
                $518 = (($512) + 12|0);
                HEAP32[$518>>2] = -1;
                HEAP32[$514>>2] = $node$0$lcssa$i;
                $519 = HEAP32[$515>>2]|0;
                $520 = (($519) + 4|0);
                HEAP32[$520>>2] = $492;
                $521 = (($node$0$lcssa$i) + 16|0);
                $522 = HEAP32[$521>>2]|0;
                $523 = (($492) + 16|0);
                $524 = HEAP32[$523>>2]|0;
                $525 = (($524) + ($522))|0;
                $526 = (($512) + 16|0);
                HEAP32[$526>>2] = $525;
                $$0$i3$i = $512;
               }
              }
              $527 = ($$0$i3$i|0)==(0|0);
              $$status$3$i = $527 ? 12 : 0;
              $528 = $317;$node$2$i = $$0$i3$i;$status$5$i = $$status$3$i;
             }
            }
           }
          }
         }
         else if ((label|0) == 112) {
          label = 0;
          $325 = (($326) + ($312<<2)|0);
          HEAP32[$325>>2] = 0;
          $$ph$i = $326;$re$4$i$ph$i = $re$3$i$i;$status$10$i$ph$i = 12;
          label = 140;
         }
         else if ((label|0) == 141) {
          label = 0;
          HEAP32[$10>>2] = $re$3$i$i;
          $528 = $934;$node$2$i = 0;$status$5$i = 12;
         }
        } while(0);
        if ((label|0) == 140) {
         label = 0;
         HEAP32[$10>>2] = $re$4$i$ph$i;
         $528 = $$ph$i;$node$2$i = 0;$status$5$i = $status$10$i$ph$i;
        }
        _free($528);
        $529 = HEAP32[$17>>2]|0;
        $530 = (($529) + 1)|0;
        HEAP32[$17>>2] = $530;
        $531 = ($status$5$i|0)==(0);
        if ($531) {
         $depth$0$be = $depth$0138;$node$2$i68$be = $node$2$i;$status$0$be = 0;
         break L8;
        } else {
         $$2 = $status$5$i;
         label = 294;
         break L6;
        }
        break;
       }
       default: {
       }
       }
      } while(0);
      if ((label|0) == 74) {
       label = 0;
       $243 = (($depth$0138) + 1)|0;
       $244 = (($245) + 1|0);
       HEAP32[$10>>2] = $244;
       $246 = HEAP32[$18>>2]|0;
       $value$c$i20 = $246;
       $247 = (_tre_stack_push($1,$value$c$i20)|0);
       $248 = ($247|0)==(0);
       if (!($248)) {
        $depth$0$be$ph = $243;$status$0$be$ph = $247;
        label = 6;
        break L6;
       }
       $249 = (_tre_stack_push($1,(2))|0);
       $250 = ($249|0)==(0);
       if (!($250)) {
        $depth$0$be$ph = $243;$status$0$be$ph = $249;
        label = 6;
        break L6;
       }
       $251 = (_tre_stack_push($1,0)|0);
       $252 = ($251|0)==(0);
       if (!($252)) {
        $depth$0$be$ph = $243;$status$0$be$ph = $251;
        label = 6;
        break L6;
       }
       $253 = HEAP32[$18>>2]|0;
       $254 = (($253) + 1)|0;
       HEAP32[$18>>2] = $254;
       $depth$0$be = $243;$node$2$i68$be = $node$2$i68136;$status$0$be = 0;
       break L8;
      }
      else if ((label|0) == 264) {
       label = 0;
       $798 = HEAP32[$16>>2]|0;
       $799 = $798 & 1;
       $800 = ($799|0)==(0);
       if (!($800)) {
        label = 265;
       }
      }
      if ((label|0) == 265) {
       label = 0;
       $801 = HEAP32[$ctx>>2]|0;
       $802 = (___tre_mem_alloc_impl($801,0,0,1,32)|0);
       $803 = ($802|0)==(0|0);
       if ($803) {
        $$2 = 12;
        label = 294;
        break L6;
       }
       $804 = (___tre_mem_alloc_impl($801,0,0,1,20)|0);
       $805 = (($802) + 4|0);
       HEAP32[$805>>2] = $804;
       $806 = ($804|0)==(0|0);
       if ($806) {
        $$2 = 12;
        label = 294;
        break L6;
       }
       HEAP32[$802>>2] = 0;
       $807 = (($802) + 8|0);
       HEAP32[$807>>2] = -1;
       $808 = (($802) + 12|0);
       HEAP32[$808>>2] = -1;
       HEAP32[$804>>2] = -1;
       $809 = (($804) + 4|0);
       HEAP32[$809>>2] = -1;
       $810 = (($804) + 8|0);
       HEAP32[$810>>2] = -1;
       $depth$0$be = $depth$0138;$node$2$i68$be = $802;$status$0$be = 0;
       break L8;
      }
      $811 = (_mbtowc($wc,$237,-1)|0);
      $812 = ($811|0)<(0);
      if ($812) {
       HEAP32[$wc>>2] = -1;
       $clen$0 = 1;
      } else {
       $clen$0 = $811;
      }
      $813 = HEAP32[$16>>2]|0;
      $814 = $813 & 2;
      $815 = ($814|0)==(0);
      do {
       if ($815) {
        label = 280;
       } else {
        $816 = HEAP32[$wc>>2]|0;
        $817 = (_iswupper($816)|0);
        $818 = ($817|0)==(0);
        if ($818) {
         $819 = HEAP32[$wc>>2]|0;
         $820 = (_iswlower($819)|0);
         $821 = ($820|0)==(0);
         if ($821) {
          label = 280;
          break;
         }
        }
        $822 = HEAP32[$ctx>>2]|0;
        $823 = HEAP32[$wc>>2]|0;
        $824 = (_towupper($823)|0);
        $825 = HEAP32[$wc>>2]|0;
        $826 = (_towupper($825)|0);
        $827 = HEAP32[$17>>2]|0;
        $828 = (___tre_mem_alloc_impl($822,0,0,1,32)|0);
        $829 = ($828|0)==(0|0);
        if ($829) {
         $$2 = 12;
         label = 294;
         break L6;
        }
        $830 = (___tre_mem_alloc_impl($822,0,0,1,20)|0);
        $831 = (($828) + 4|0);
        HEAP32[$831>>2] = $830;
        $832 = ($830|0)==(0|0);
        if ($832) {
         $$2 = 12;
         label = 294;
         break L6;
        }
        HEAP32[$828>>2] = 0;
        $833 = (($828) + 8|0);
        HEAP32[$833>>2] = -1;
        $834 = (($828) + 12|0);
        HEAP32[$834>>2] = -1;
        HEAP32[$830>>2] = $824;
        $835 = (($830) + 4|0);
        HEAP32[$835>>2] = $826;
        $836 = (($830) + 8|0);
        HEAP32[$836>>2] = $827;
        $837 = HEAP32[$ctx>>2]|0;
        $838 = HEAP32[$wc>>2]|0;
        $839 = (_towlower($838)|0);
        $840 = HEAP32[$wc>>2]|0;
        $841 = (_towlower($840)|0);
        $842 = HEAP32[$17>>2]|0;
        $843 = (___tre_mem_alloc_impl($837,0,0,1,32)|0);
        $844 = ($843|0)==(0|0);
        if ($844) {
         $$2 = 12;
         label = 294;
         break L6;
        }
        $845 = (___tre_mem_alloc_impl($837,0,0,1,20)|0);
        $846 = (($843) + 4|0);
        HEAP32[$846>>2] = $845;
        $847 = ($845|0)==(0|0);
        if ($847) {
         $$2 = 12;
         label = 294;
         break L6;
        }
        HEAP32[$843>>2] = 0;
        $848 = (($843) + 8|0);
        HEAP32[$848>>2] = -1;
        $849 = (($843) + 12|0);
        HEAP32[$849>>2] = -1;
        HEAP32[$845>>2] = $839;
        $850 = (($845) + 4|0);
        HEAP32[$850>>2] = $841;
        $851 = (($845) + 8|0);
        HEAP32[$851>>2] = $842;
        $852 = HEAP32[$ctx>>2]|0;
        $853 = (___tre_mem_alloc_impl($852,0,0,1,32)|0);
        $854 = ($853|0)==(0|0);
        if ($854) {
         $$2 = 12;
         label = 294;
         break L6;
        }
        $855 = (___tre_mem_alloc_impl($852,0,0,1,8)|0);
        $856 = (($853) + 4|0);
        HEAP32[$856>>2] = $855;
        $857 = ($855|0)==(0|0);
        if ($857) {
         $$2 = 12;
         label = 294;
         break L6;
        }
        HEAP32[$853>>2] = 3;
        $858 = (($853) + 8|0);
        HEAP32[$858>>2] = -1;
        $859 = (($853) + 12|0);
        HEAP32[$859>>2] = -1;
        HEAP32[$855>>2] = $828;
        $860 = HEAP32[$856>>2]|0;
        $861 = (($860) + 4|0);
        HEAP32[$861>>2] = $843;
        $862 = (($828) + 16|0);
        $863 = HEAP32[$862>>2]|0;
        $864 = (($843) + 16|0);
        $865 = HEAP32[$864>>2]|0;
        $866 = (($865) + ($863))|0;
        $867 = (($853) + 16|0);
        HEAP32[$867>>2] = $866;
        $node$2$i71$in = $853;
       }
      } while(0);
      if ((label|0) == 280) {
       label = 0;
       $868 = HEAP32[$ctx>>2]|0;
       $869 = HEAP32[$wc>>2]|0;
       $870 = HEAP32[$17>>2]|0;
       $871 = (___tre_mem_alloc_impl($868,0,0,1,32)|0);
       $872 = ($871|0)==(0|0);
       if ($872) {
        $$2 = 12;
        label = 294;
        break L6;
       }
       $873 = (___tre_mem_alloc_impl($868,0,0,1,20)|0);
       $874 = (($871) + 4|0);
       HEAP32[$874>>2] = $873;
       $875 = ($873|0)==(0|0);
       if ($875) {
        $$2 = 12;
        label = 294;
        break L6;
       }
       HEAP32[$871>>2] = 0;
       $876 = (($871) + 8|0);
       HEAP32[$876>>2] = -1;
       $877 = (($871) + 12|0);
       HEAP32[$877>>2] = -1;
       HEAP32[$873>>2] = $869;
       $878 = (($873) + 4|0);
       HEAP32[$878>>2] = $869;
       $879 = (($873) + 8|0);
       HEAP32[$879>>2] = $870;
       $node$2$i71$in = $871;
      }
      $880 = HEAP32[$17>>2]|0;
      $881 = (($880) + 1)|0;
      HEAP32[$17>>2] = $881;
      $882 = HEAP32[$10>>2]|0;
      $883 = (($882) + ($clen$0)|0);
      HEAP32[$10>>2] = $883;
      $depth$0$be = $depth$0138;$node$2$i68$be = $node$2$i71$in;$status$0$be = 0;
      break;
     }
     case 5:  {
      $45 = HEAP32[$10>>2]|0;
      $46 = HEAP8[$45>>0]|0;
      $47 = ($46<<24>>24)==(0);
      if ($47) {
       $depth$0$be = $depth$0138;$node$2$i68$be = $node$2$i68136;$status$0$be = 0;
      } else {
       $48 = HEAP32[$16>>2]|0;
       $49 = $48 & 1;
       $50 = ($49|0)!=(0);
       $51 = ($46<<24>>24)==(124);
       $or$cond5 = $50 & $51;
       if ($or$cond5) {
        $depth$0$be = $depth$0138;$node$2$i68$be = $node$2$i68136;$status$0$be = 0;
       } else {
        $52 = ($46<<24>>24)==(41);
        $or$cond6 = $50 & $52;
        $53 = ($depth$0138|0)>(0);
        $or$cond7 = $or$cond6 & $53;
        do {
         if (!($or$cond7)) {
          $54 = ($49|0)==(0);
          $55 = ($46<<24>>24)==(92);
          $or$cond8 = $54 & $55;
          if ($or$cond8) {
           $56 = (($45) + 1|0);
           $57 = HEAP8[$56>>0]|0;
           $58 = ($57<<24>>24)==(41);
           if ($58) {
            break;
           }
          }
          $64 = (_tre_stack_push($1,(5))|0);
          $65 = ($64|0)==(0);
          if (!($65)) {
           $depth$0$be$ph = $depth$0138;$status$0$be$ph = $64;
           label = 6;
           break L6;
          }
          $66 = (_tre_stack_push($1,$node$2$i68136)|0);
          $67 = ($66|0)==(0);
          if (!($67)) {
           $depth$0$be$ph = $depth$0138;$status$0$be$ph = $66;
           label = 6;
           break L6;
          }
          $68 = (_tre_stack_push($1,(6))|0);
          $69 = ($68|0)==(0);
          if (!($69)) {
           $depth$0$be$ph = $depth$0138;$status$0$be$ph = $68;
           label = 6;
           break L6;
          }
          $70 = (_tre_stack_push($1,(4))|0);
          $depth$0$be = $depth$0138;$node$2$i68$be = $node$2$i68136;$status$0$be = $70;
          break L8;
         }
        } while(0);
        $59 = ($49|0)==(0);
        $60 = $49 | $depth$0138;
        $61 = ($60|0)==(0);
        $status$1 = $61 ? 8 : 0;
        $62 = (($depth$0138) + -1)|0;
        if ($59) {
         $63 = (($45) + 2|0);
         HEAP32[$10>>2] = $63;
         $depth$0$be = $62;$node$2$i68$be = $node$2$i68136;$status$0$be = $status$1;
        } else {
         $depth$0$be = $62;$node$2$i68$be = $node$2$i68136;$status$0$be = $status$1;
        }
       }
      }
      break;
     }
     case 8:  {
      $104 = (($26) + -2)|0;
      HEAP32[$$idx13>>2] = $104;
      $105 = (($27) + ($104<<2)|0);
      $106 = HEAP32[$105>>2]|0;
      $107 = HEAP32[$ctx>>2]|0;
      $108 = (___tre_mem_alloc_impl($107,0,0,1,32)|0);
      $109 = ($108|0)==(0|0);
      if ($109) {
       $$2 = 12;
       label = 294;
       break L6;
      }
      $110 = (___tre_mem_alloc_impl($107,0,0,1,8)|0);
      $111 = (($108) + 4|0);
      HEAP32[$111>>2] = $110;
      $112 = ($110|0)==(0|0);
      if ($112) {
       $$2 = 12;
       label = 294;
       break L6;
      }
      HEAP32[$108>>2] = 3;
      $113 = (($108) + 8|0);
      HEAP32[$113>>2] = -1;
      $114 = (($108) + 12|0);
      HEAP32[$114>>2] = -1;
      HEAP32[$110>>2] = $106;
      $115 = HEAP32[$111>>2]|0;
      $116 = (($115) + 4|0);
      HEAP32[$116>>2] = $node$2$i68136;
      $117 = (($106) + 16|0);
      $118 = HEAP32[$117>>2]|0;
      $119 = (($node$2$i68136) + 16|0);
      $120 = HEAP32[$119>>2]|0;
      $121 = (($120) + ($118))|0;
      $122 = (($108) + 16|0);
      HEAP32[$122>>2] = $121;
      $depth$0$be = $depth$0138;$node$2$i68$be = $108;$status$0$be = 0;
      break;
     }
     case 7:  {
      $90 = HEAP32[$10>>2]|0;
      $91 = HEAP8[$90>>0]|0;
      $92 = $91 << 24 >> 24;
      if ((($92|0) == 41)) {
       $103 = (($90) + 1|0);
       HEAP32[$10>>2] = $103;
       $depth$0$be = $depth$0138;$node$2$i68$be = $node$2$i68136;$status$0$be = 0;
       break L8;
      } else if (!((($92|0) == 124))) {
       $depth$0$be = $depth$0138;$node$2$i68$be = $node$2$i68136;$status$0$be = 0;
       break L8;
      }
      $93 = (_tre_stack_push($1,(7))|0);
      $94 = ($93|0)==(0);
      if (!($94)) {
       $depth$0$be$ph = $depth$0138;$status$0$be$ph = $93;
       label = 6;
       break L6;
      }
      $95 = (_tre_stack_push($1,$node$2$i68136)|0);
      $96 = ($95|0)==(0);
      if (!($96)) {
       $depth$0$be$ph = $depth$0138;$status$0$be$ph = $95;
       label = 6;
       break L6;
      }
      $97 = (_tre_stack_push($1,(8))|0);
      $98 = ($97|0)==(0);
      if (!($98)) {
       $depth$0$be$ph = $depth$0138;$status$0$be$ph = $97;
       label = 6;
       break L6;
      }
      $99 = (_tre_stack_push($1,(3))|0);
      $100 = ($99|0)==(0);
      if (!($100)) {
       $depth$0$be$ph = $depth$0138;$status$0$be$ph = $99;
       label = 6;
       break L6;
      }
      $101 = HEAP32[$10>>2]|0;
      $102 = (($101) + 1|0);
      HEAP32[$10>>2] = $102;
      $depth$0$be = $depth$0138;$node$2$i68$be = $node$2$i68136;$status$0$be = 0;
      break;
     }
     case 6:  {
      $71 = (($26) + -2)|0;
      HEAP32[$$idx13>>2] = $71;
      $72 = (($27) + ($71<<2)|0);
      $73 = HEAP32[$72>>2]|0;
      $74 = HEAP32[$ctx>>2]|0;
      $75 = (___tre_mem_alloc_impl($74,0,0,1,32)|0);
      $76 = ($75|0)==(0|0);
      if ($76) {
       $$2 = 12;
       label = 294;
       break L6;
      }
      $77 = (___tre_mem_alloc_impl($74,0,0,1,8)|0);
      $78 = (($75) + 4|0);
      HEAP32[$78>>2] = $77;
      $79 = ($77|0)==(0|0);
      if ($79) {
       $$2 = 12;
       label = 294;
       break L6;
      }
      HEAP32[$75>>2] = 1;
      $80 = (($75) + 8|0);
      HEAP32[$80>>2] = -1;
      $81 = (($75) + 12|0);
      HEAP32[$81>>2] = -1;
      HEAP32[$77>>2] = $73;
      $82 = HEAP32[$78>>2]|0;
      $83 = (($82) + 4|0);
      HEAP32[$83>>2] = $node$2$i68136;
      $84 = (($73) + 16|0);
      $85 = HEAP32[$84>>2]|0;
      $86 = (($node$2$i68136) + 16|0);
      $87 = HEAP32[$86>>2]|0;
      $88 = (($87) + ($85))|0;
      $89 = (($75) + 16|0);
      HEAP32[$89>>2] = $88;
      $depth$0$be = $depth$0138;$node$2$i68$be = $75;$status$0$be = 0;
      break;
     }
     case 2:  {
      $884 = (($26) + -2)|0;
      HEAP32[$$idx13>>2] = $884;
      $885 = (($27) + ($884<<2)|0);
      $886 = HEAP32[$885>>2]|0;
      $887 = (($node$2$i68136) + 12|0);
      $888 = HEAP32[$887>>2]|0;
      $889 = ($888|0)>(-1);
      if ($889) {
       $890 = HEAP32[$ctx>>2]|0;
       $891 = (___tre_mem_alloc_impl($890,0,0,1,32)|0);
       $892 = ($891|0)==(0|0);
       if ($892) {
        $$2 = 12;
        label = 294;
        break L6;
       }
       $893 = (___tre_mem_alloc_impl($890,0,0,1,20)|0);
       $894 = (($891) + 4|0);
       HEAP32[$894>>2] = $893;
       $895 = ($893|0)==(0|0);
       if ($895) {
        $$2 = 12;
        label = 294;
        break L6;
       }
       HEAP32[$891>>2] = 0;
       $896 = (($891) + 8|0);
       HEAP32[$896>>2] = -1;
       $897 = (($891) + 12|0);
       HEAP32[$897>>2] = -1;
       HEAP32[$893>>2] = -1;
       $898 = (($893) + 4|0);
       HEAP32[$898>>2] = -1;
       $899 = (($893) + 8|0);
       HEAP32[$899>>2] = -1;
       $900 = HEAP32[$ctx>>2]|0;
       $901 = (___tre_mem_alloc_impl($900,0,0,1,32)|0);
       $902 = ($901|0)==(0|0);
       if ($902) {
        $$2 = 12;
        label = 294;
        break L6;
       }
       $903 = (___tre_mem_alloc_impl($900,0,0,1,8)|0);
       $904 = (($901) + 4|0);
       HEAP32[$904>>2] = $903;
       $905 = ($903|0)==(0|0);
       if ($905) {
        $$2 = 12;
        label = 294;
        break L6;
       }
       HEAP32[$901>>2] = 1;
       $906 = (($901) + 8|0);
       HEAP32[$906>>2] = -1;
       $907 = (($901) + 12|0);
       HEAP32[$907>>2] = -1;
       HEAP32[$903>>2] = $891;
       $908 = HEAP32[$904>>2]|0;
       $909 = (($908) + 4|0);
       HEAP32[$909>>2] = $node$2$i68136;
       $910 = (($891) + 16|0);
       $911 = HEAP32[$910>>2]|0;
       $912 = (($node$2$i68136) + 16|0);
       $913 = HEAP32[$912>>2]|0;
       $914 = (($913) + ($911))|0;
       $915 = (($901) + 16|0);
       HEAP32[$915>>2] = $914;
       $916 = HEAP32[$912>>2]|0;
       HEAP32[$915>>2] = $916;
       $node$2$i64 = $901;
      } else {
       $node$2$i64 = $node$2$i68136;
      }
      $917 = (($node$2$i64) + 12|0);
      HEAP32[$917>>2] = $886;
      $918 = (($node$2$i64) + 16|0);
      $919 = HEAP32[$918>>2]|0;
      $920 = (($919) + 1)|0;
      HEAP32[$918>>2] = $920;
      $depth$0$be = $depth$0138;$node$2$i68$be = $node$2$i64;$status$0$be = 0;
      break;
     }
     case 10:  {
      $921 = (($26) + -2)|0;
      HEAP32[$$idx13>>2] = $921;
      $922 = (($27) + ($921<<2)|0);
      $923 = HEAP32[$922>>2]|0;
      HEAP32[$16>>2] = $923;
      $depth$0$be = $depth$0138;$node$2$i68$be = $node$2$i68136;$status$0$be = 0;
      break;
     }
     case 0:  {
      $33 = HEAP32[$16>>2]|0;
      $34 = $33 & 1;
      $35 = ($34|0)==(0);
      if (!($35)) {
       $36 = (_tre_stack_push($1,(7))|0);
       $37 = ($36|0)==(0);
       if (!($37)) {
        $depth$0$be$ph = $depth$0138;$status$0$be$ph = $36;
        label = 6;
        break L6;
       }
      }
      $38 = (_tre_stack_push($1,(3))|0);
      $depth$0$be = $depth$0138;$node$2$i68$be = $node$2$i68136;$status$0$be = $38;
      break;
     }
     case 4:  {
      $42 = (_tre_stack_push($1,(9))|0);
      $43 = ($42|0)==(0);
      if (!($43)) {
       $depth$0$be$ph = $depth$0138;$status$0$be$ph = $42;
       label = 6;
       break L6;
      }
      $44 = (_tre_stack_push($1,(1))|0);
      $depth$0$be = $depth$0138;$node$2$i68$be = $node$2$i68136;$status$0$be = $44;
      break;
     }
     case 9:  {
      $123 = HEAP32[$10>>2]|0;
      $124 = HEAP8[$123>>0]|0;
      $125 = $124 << 24 >> 24;
      switch ($125|0) {
      case 123:  {
       $155 = HEAP32[$16>>2]|0;
       $156 = $155 & 1;
       $157 = ($156|0)==(0);
       if ($157) {
        $depth$0$be = $depth$0138;$node$2$i68$be = $node$2$i68136;$status$0$be = 0;
        break L8;
       } else {
        $159 = $123;$197 = $155;
       }
       break;
      }
      case 63: case 43:  {
       $126 = HEAP32[$16>>2]|0;
       $127 = $126 & 1;
       $128 = ($127|0)==(0);
       if ($128) {
        $depth$0$be = $depth$0138;$node$2$i68$be = $node$2$i68136;$status$0$be = 0;
        break L8;
       } else {
        label = 41;
       }
       break;
      }
      case 92:  {
       $149 = HEAP32[$16>>2]|0;
       $150 = $149 & 1;
       $151 = ($150|0)==(0);
       if (!($151)) {
        $depth$0$be = $depth$0138;$node$2$i68$be = $node$2$i68136;$status$0$be = 0;
        break L8;
       }
       $152 = (($123) + 1|0);
       $153 = HEAP8[$152>>0]|0;
       $154 = ($153<<24>>24)==(123);
       if (!($154)) {
        $depth$0$be = $depth$0138;$node$2$i68$be = $node$2$i68136;$status$0$be = 0;
        break L8;
       }
       HEAP32[$10>>2] = $152;
       $159 = $152;$197 = $149;
       break;
      }
      case 42:  {
       label = 41;
       break;
      }
      default: {
       $depth$0$be = $depth$0138;$node$2$i68$be = $node$2$i68136;$status$0$be = 0;
       break L8;
      }
      }
      if ((label|0) == 41) {
       label = 0;
       $129 = ($124<<24>>24)==(43);
       $$ = $129&1;
       $130 = ($124<<24>>24)==(63);
       $rep_max$0 = $130 ? 1 : -1;
       $131 = (($123) + 1|0);
       HEAP32[$10>>2] = $131;
       $132 = HEAP32[$ctx>>2]|0;
       $133 = (___tre_mem_alloc_impl($132,0,0,1,32)|0);
       $134 = ($133|0)==(0|0);
       if ($134) {
        $$2 = 12;
        label = 294;
        break L6;
       }
       $135 = (___tre_mem_alloc_impl($132,0,0,1,16)|0);
       $136 = (($133) + 4|0);
       HEAP32[$136>>2] = $135;
       $137 = ($135|0)==(0|0);
       if ($137) {
        $$2 = 12;
        label = 294;
        break L6;
       }
       HEAP32[$133>>2] = 2;
       $138 = (($133) + 8|0);
       HEAP32[$138>>2] = -1;
       $139 = (($133) + 12|0);
       HEAP32[$139>>2] = -1;
       HEAP32[$135>>2] = $node$2$i68136;
       $140 = (($135) + 4|0);
       HEAP32[$140>>2] = $$;
       $141 = (($135) + 8|0);
       HEAP32[$141>>2] = $rep_max$0;
       $142 = (($135) + 12|0);
       $143 = HEAP8[$142>>0]|0;
       $144 = $143 & -2;
       HEAP8[$142>>0] = $144;
       $145 = (($node$2$i68136) + 16|0);
       $146 = HEAP32[$145>>2]|0;
       $147 = (($133) + 16|0);
       HEAP32[$147>>2] = $146;
       $148 = (_tre_stack_push($1,(9))|0);
       $depth$0$be = $depth$0138;$node$2$i68$be = $133;$status$0$be = $148;
       break L8;
      }
      $158 = (($159) + 1|0);
      HEAP32[$10>>2] = $158;
      $160 = HEAP8[$158>>0]|0;
      $$off$i = (($160) + -48)<<24>>24;
      $161 = ($$off$i&255)<(10);
      if ($161) {
       $162 = $160 << 24 >> 24;
       $163 = (($162) + -48)|0;
       $164 = ($163>>>0)<(10);
       if ($164) {
        $168 = $162;$num$01$i$i = -1;$r$02$i$i = $158;
       } else {
        $$2 = 10;
        label = 294;
        break L6;
       }
       while(1) {
        $165 = ($num$01$i$i|0)<(0);
        $num$0$op$i$i = ($num$01$i$i*10)|0;
        $num$0$op$op$i$i = (($num$0$op$i$i) + -48)|0;
        $166 = $165 ? -48 : $num$0$op$op$i$i;
        $167 = (($166) + ($168))|0;
        $169 = (($r$02$i$i) + 1|0);
        $170 = HEAP8[$169>>0]|0;
        $171 = $170 << 24 >> 24;
        $172 = (($171) + -48)|0;
        $173 = ($172>>>0)<(10);
        if ($173) {
         $168 = $171;$num$01$i$i = $167;$r$02$i$i = $169;
        } else {
         $175 = $170;$min$0$i = $167;$r$0$lcssa$i1015$i = $169;
         break;
        }
       }
      } else {
       $175 = $160;$min$0$i = -1;$r$0$lcssa$i1015$i = $158;
      }
      $174 = ($175<<24>>24)==(44);
      if ($174) {
       $176 = (($r$0$lcssa$i1015$i) + 1|0);
       $177 = HEAP8[$176>>0]|0;
       $178 = $177 << 24 >> 24;
       $179 = (($178) + -48)|0;
       $180 = ($179>>>0)<(10);
       if ($180) {
        $184 = $178;$num$01$i6$i = -1;$r$02$i5$i = $176;
        while(1) {
         $181 = ($num$01$i6$i|0)<(0);
         $num$0$op$i7$i = ($num$01$i6$i*10)|0;
         $num$0$op$op$i8$i = (($num$0$op$i7$i) + -48)|0;
         $182 = $181 ? -48 : $num$0$op$op$i8$i;
         $183 = (($182) + ($184))|0;
         $185 = (($r$02$i5$i) + 1|0);
         $186 = HEAP8[$185>>0]|0;
         $187 = $186 << 24 >> 24;
         $188 = (($187) + -48)|0;
         $189 = ($188>>>0)<(10);
         if ($189) {
          $184 = $187;$num$01$i6$i = $183;$r$02$i5$i = $185;
         } else {
          $926 = $186;$max$0$i = $183;$r$0$lcssa$i1014$i = $185;
          label = 54;
          break;
         }
        }
       } else {
        $194 = $177;$max$019$i = -1;$r$0$lcssa$i101416$i = $176;
       }
      } else {
       $926 = $175;$max$0$i = $min$0$i;$r$0$lcssa$i1014$i = $r$0$lcssa$i1015$i;
       label = 54;
      }
      if ((label|0) == 54) {
       label = 0;
       $190 = ($max$0$i|0)>(-1);
       if ($190) {
        $191 = ($min$0$i|0)>($max$0$i|0);
        $192 = ($max$0$i|0)>(255);
        $or$cond$i = $191 | $192;
        if ($or$cond$i) {
         $$2 = 10;
         label = 294;
         break L6;
        } else {
         $194 = $926;$max$019$i = $max$0$i;$r$0$lcssa$i101416$i = $r$0$lcssa$i1014$i;
        }
       } else {
        $194 = $926;$max$019$i = $max$0$i;$r$0$lcssa$i101416$i = $r$0$lcssa$i1014$i;
       }
      }
      $193 = ($194<<24>>24)==(0);
      if ($193) {
       $$2 = 9;
       label = 294;
       break L6;
      }
      $195 = ($r$0$lcssa$i101416$i|0)==($158|0);
      if ($195) {
       $$2 = 10;
       label = 294;
       break L6;
      }
      $196 = $197 & 1;
      $198 = ($196|0)==(0);
      if ($198) {
       $201 = ($194<<24>>24)==(92);
       if (!($201)) {
        $$2 = 10;
        label = 294;
        break L6;
       }
       $202 = (($r$0$lcssa$i101416$i) + 1|0);
       $203 = HEAP8[$202>>0]|0;
       $204 = ($203<<24>>24)==(125);
       if (!($204)) {
        $$2 = 10;
        label = 294;
        break L6;
       }
       $205 = (($r$0$lcssa$i101416$i) + 2|0);
       $storemerge$i = $205;
      } else {
       $199 = ($194<<24>>24)==(125);
       if (!($199)) {
        $$2 = 10;
        label = 294;
        break L6;
       }
       $200 = (($r$0$lcssa$i101416$i) + 1|0);
       $storemerge$i = $200;
      }
      $206 = $max$019$i | $min$0$i;
      $207 = ($206|0)==(0);
      if ($207) {
       $208 = HEAP32[$ctx>>2]|0;
       $209 = (___tre_mem_alloc_impl($208,0,0,1,32)|0);
       $210 = ($209|0)==(0|0);
       if ($210) {
        $$2 = 12;
        label = 294;
        break L6;
       }
       $211 = (___tre_mem_alloc_impl($208,0,0,1,20)|0);
       $212 = (($209) + 4|0);
       HEAP32[$212>>2] = $211;
       $213 = ($211|0)==(0|0);
       if ($213) {
        $$2 = 12;
        label = 294;
        break L6;
       }
       HEAP32[$209>>2] = 0;
       $214 = (($209) + 8|0);
       HEAP32[$214>>2] = -1;
       $215 = (($209) + 12|0);
       HEAP32[$215>>2] = -1;
       HEAP32[$211>>2] = -1;
       $216 = (($211) + 4|0);
       HEAP32[$216>>2] = -1;
       $217 = (($211) + 8|0);
       HEAP32[$217>>2] = -1;
       $storemerge33$in$i = $209;
      } else {
       $218 = $max$019$i & $min$0$i;
       $219 = ($218|0)<(0);
       $min$1$i = $219 ? 1 : $min$0$i;
       $max$1$i = $219 ? 1 : $max$019$i;
       $220 = HEAP32[$ctx>>2]|0;
       $221 = (___tre_mem_alloc_impl($220,0,0,1,32)|0);
       $222 = ($221|0)==(0|0);
       if ($222) {
        $$2 = 12;
        label = 294;
        break L6;
       }
       $223 = (___tre_mem_alloc_impl($220,0,0,1,16)|0);
       $224 = (($221) + 4|0);
       HEAP32[$224>>2] = $223;
       $225 = ($223|0)==(0|0);
       if ($225) {
        $$2 = 12;
        label = 294;
        break L6;
       }
       HEAP32[$221>>2] = 2;
       $226 = (($221) + 8|0);
       HEAP32[$226>>2] = -1;
       $227 = (($221) + 12|0);
       HEAP32[$227>>2] = -1;
       HEAP32[$223>>2] = $node$2$i68136;
       $228 = (($223) + 4|0);
       HEAP32[$228>>2] = $min$1$i;
       $229 = (($223) + 8|0);
       HEAP32[$229>>2] = $max$1$i;
       $230 = (($223) + 12|0);
       $231 = HEAP8[$230>>0]|0;
       $232 = $231 & -2;
       HEAP8[$230>>0] = $232;
       $233 = (($node$2$i68136) + 16|0);
       $234 = HEAP32[$233>>2]|0;
       $235 = (($221) + 16|0);
       HEAP32[$235>>2] = $234;
       $storemerge33$in$i = $221;
      }
      HEAP32[$10>>2] = $storemerge$i;
      $236 = (_tre_stack_push($1,(9))|0);
      $depth$0$be = $depth$0138;$node$2$i68$be = $storemerge33$in$i;$status$0$be = $236;
      break;
     }
     default: {
      $depth$0$be = $depth$0138;$node$2$i68$be = $node$2$i68136;$status$0$be = 0;
     }
     }
    } while(0);
    $$idx$val = HEAP32[$$idx13>>2]|0;
    $31 = ($$idx$val|0)>($$idx13$val|0);
    $32 = ($status$0$be|0)==(0);
    $or$cond = $31 & $32;
    if ($or$cond) {
     $26 = $$idx$val;$depth$0138 = $depth$0$be;$node$2$i68136 = $node$2$i68$be;
    } else {
     $$lcssa131 = $32;$depth$0$lcssa = $depth$0$be;$node$2$i68$lcssa = $node$2$i68$be;$status$0$lcssa = $status$0$be;
     break L4;
    }
   }
   if ((label|0) == 6) {
    $30 = ($status$0$be$ph|0)==(0);
    $$lcssa131 = $30;$depth$0$lcssa = $depth$0$be$ph;$node$2$i68$lcssa = $node$2$i68136;$status$0$lcssa = $status$0$be$ph;
    break;
   }
   else if ((label|0) == 294) {
    STACKTOP = sp;return ($$2|0);
   }
  } else {
   $$lcssa131 = $14;$depth$0$lcssa = 0;$node$2$i68$lcssa = 0;$status$0$lcssa = $9;
  }
 } while(0);
 $924 = ($depth$0$lcssa|0)>(0);
 $$not = $$lcssa131 ^ 1;
 $brmerge = $924 | $$not;
 $$mux = $924 ? 8 : $status$0$lcssa;
 if ($brmerge) {
  $$2 = $$mux;
  STACKTOP = sp;return ($$2|0);
 }
 $925 = (($ctx) + 8|0);
 HEAP32[$925>>2] = $node$2$i68$lcssa;
 $$2 = 0;
 STACKTOP = sp;return ($$2|0);
}
function _tre_add_tags($mem,$stack,$tree,$tnfa) {
 $mem = $mem|0;
 $stack = $stack|0;
 $tree = $tree|0;
 $tnfa = $tnfa|0;
 var $$ = 0, $$0 = 0, $$2 = 0, $$lcssa27 = 0, $$lobit = 0, $$lobit$not = 0, $$next_tag$0 = 0, $$pre = 0, $$pre$phi123Z2D = 0, $$pre121 = 0, $$tag$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0;
 var $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0;
 var $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0;
 var $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0;
 var $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0;
 var $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $direction$0$ = 0, $direction$0$be = 0, $direction$045 = 0, $direction$1 = 0, $i$0 = 0, $i$01$i = 0, $i$01$i17 = 0, $i$01$i6 = 0, $i$01$i9 = 0, $i1$0 = 0, $i1$1 = 0, $i12$0 = 0;
 var $i3$0 = 0, $i3$1 = 0, $i3$228 = 0, $i4$0 = 0, $i5$0 = 0, $i8$0 = 0, $i9$0 = 0, $left_tag$0 = 0, $minimal_tag$0$ = 0, $minimal_tag$0$be = 0, $minimal_tag$0$lcssa = 0, $minimal_tag$048 = 0, $minimal_tag$1 = 0, $minimal_tag$2 = 0, $minimal_tag$3 = 0, $minimal_tag$4 = 0, $minimal_tag$6 = 0, $minimal_tag$7 = 0, $minimal_tag$8 = 0, $minimal_tag$9 = 0;
 var $next_tag$0$be = 0, $next_tag$051 = 0, $next_tag$1 = 0, $next_tag$3 = 0, $next_tag$4 = 0, $num_minimals$0$be = 0, $num_minimals$0$lcssa = 0, $num_minimals$057 = 0, $num_minimals$1 = 0, $num_minimals$10 = 0, $num_minimals$2 = 0, $num_minimals$3 = 0, $num_minimals$4 = 0, $num_minimals$6 = 0, $num_minimals$7 = 0, $num_minimals$8 = 0, $num_minimals$9 = 0, $num_tags$0$be = 0, $num_tags$0$lcssa = 0, $num_tags$060 = 0;
 var $num_tags$2 = 0, $num_tags$3 = 0, $or$cond = 0, $or$cond1 = 0, $or$cond44 = 0, $phitmp = 0, $regset$0$be = 0, $regset$0$lcssa = 0, $regset$063 = 0, $regset$1 = 0, $reserved_tag$0 = 0, $right_tag$0 = 0, $stack$idx$val = 0, $stack$idx$val43 = 0, $stack$idx4 = 0, $stack$idx4$val = 0, $status$0$be = 0, $status$0$lcssa = 0, $status$2 = 0, $status$3 = 0;
 var $status$5 = 0, $status$6 = 0, $status$7 = 0, $status$8 = 0, $tag$0$be = 0, $tag$0$lcssa = 0, $tag$054 = 0, $tag$2 = 0, $tag$3 = 0, $value$c$i = 0, $value$c$i11 = 0, $value$c$i13 = 0, $value$c$i14 = 0, $value$c$i15 = 0, $value$c$i19 = 0, $value$c$i20 = 0, $value$c$i21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $stack$idx4 = (($stack) + 12|0);
 $stack$idx4$val = HEAP32[$stack$idx4>>2]|0;
 $0 = ($mem|0)==(0|0);
 $1 = ($tnfa|0)==(0|0);
 $$ = $0 | $1;
 if (!($$)) {
  $2 = (($tnfa) + 48|0);
  HEAP32[$2>>2] = 0;
  $3 = (($tnfa) + 36|0);
  $4 = HEAP32[$3>>2]|0;
  HEAP32[$4>>2] = -1;
 }
 $5 = (($tnfa) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 << 3;
 $8 = (($7) + 8)|0;
 $9 = (_malloc($8)|0);
 $10 = ($9|0)==(0|0);
 if ($10) {
  $$0 = 12;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$9>>2] = -1;
 $11 = $6 << 2;
 $12 = (($11) + 4)|0;
 $13 = (_malloc($12)|0);
 $14 = ($13|0)==(0|0);
 if ($14) {
  _free($9);
  $$0 = 12;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$13>>2] = -1;
 $i$0 = 0;
 while(1) {
  $15 = ($i$0>>>0)>($6>>>0);
  $16 = (($i$0) + 1)|0;
  if ($15) {
   break;
  } else {
   $i$0 = $16;
  }
 }
 (_tre_stack_push($stack,$tree)|0);
 $17 = (_tre_stack_push($stack,0)|0);
 $stack$idx$val43 = HEAP32[$stack$idx4>>2]|0;
 $18 = ($stack$idx$val43|0)>($stack$idx4$val|0);
 $19 = ($17|0)==(0);
 $or$cond44 = $18 & $19;
 L14: do {
  if ($or$cond44) {
   $20 = (($stack) + 16|0);
   $21 = (($tnfa) + 32|0);
   $22 = (($tnfa) + 16|0);
   $23 = (($tnfa) + 36|0);
   $25 = $stack$idx$val43;$direction$045 = 0;$minimal_tag$048 = -1;$next_tag$051 = 1;$num_minimals$057 = 0;$num_tags$060 = 0;$regset$063 = $9;$tag$054 = 0;
   while(1) {
    $24 = (($25) + -1)|0;
    HEAP32[$stack$idx4>>2] = $24;
    $26 = HEAP32[$20>>2]|0;
    $27 = (($26) + ($24<<2)|0);
    $28 = HEAP32[$27>>2]|0;
    L18: do {
     switch ($28|0) {
     case 3:  {
      $342 = (($25) + -2)|0;
      $343 = (($26) + ($342<<2)|0);
      $344 = HEAP32[$343>>2]|0;
      $345 = (($25) + -3)|0;
      $346 = (($26) + ($345<<2)|0);
      $347 = HEAP32[$346>>2]|0;
      $348 = (($25) + -4)|0;
      $349 = (($26) + ($348<<2)|0);
      $350 = HEAP32[$349>>2]|0;
      $351 = (($25) + -5)|0;
      HEAP32[$stack$idx4>>2] = $351;
      if ($$) {
       $352 = (($26) + ($351<<2)|0);
       $353 = HEAP32[$352>>2]|0;
       $354 = (($350) + 4|0);
       $355 = HEAP32[$354>>2]|0;
       $356 = HEAP32[$355>>2]|0;
       $357 = (($356) + 20|0);
       $358 = HEAP32[$357>>2]|0;
       $359 = (($355) + 4|0);
       $360 = HEAP32[$359>>2]|0;
       $361 = (($360) + 20|0);
       $362 = HEAP32[$361>>2]|0;
       $363 = (($350) + 16|0);
       $364 = HEAP32[$363>>2]|0;
       $365 = ($364|0)>(0);
       $366 = $365 ? 2 : 0;
       $367 = (($358) + ($353))|0;
       $368 = (($367) + ($362))|0;
       $369 = (($368) + ($366))|0;
       $370 = (($350) + 20|0);
       HEAP32[$370>>2] = $369;
       $$pre = HEAP32[$stack$idx4>>2]|0;
       $$pre$phi123Z2D = $363;$372 = $$pre;
      } else {
       $$pre121 = (($350) + 16|0);
       $$pre$phi123Z2D = $$pre121;$372 = $351;
      }
      $371 = (($372) + -1)|0;
      $373 = (($26) + ($371<<2)|0);
      $374 = HEAP32[$373>>2]|0;
      $375 = (($372) + -2)|0;
      HEAP32[$stack$idx4>>2] = $375;
      $376 = (($26) + ($375<<2)|0);
      $377 = HEAP32[$376>>2]|0;
      $378 = (($372) + -3)|0;
      HEAP32[$stack$idx4>>2] = $378;
      $379 = (($26) + ($378<<2)|0);
      $380 = HEAP32[$379>>2]|0;
      $381 = HEAP32[$$pre$phi123Z2D>>2]|0;
      $382 = ($381|0)>(0);
      if ($382) {
       if ($$) {
        $status$8 = 0;
       } else {
        (_tre_add_tag_right($mem,$344,$377)|0);
        $383 = HEAP32[$21>>2]|0;
        $384 = (($383) + ($377<<2)|0);
        HEAP32[$384>>2] = 1;
        $385 = (_tre_add_tag_right($mem,$347,$380)|0);
        $386 = HEAP32[$21>>2]|0;
        $387 = (($386) + ($380<<2)|0);
        HEAP32[$387>>2] = 1;
        $status$8 = $385;
       }
       $388 = (($num_tags$060) + 2)|0;
       $direction$0$be = 1;$minimal_tag$0$be = $minimal_tag$048;$next_tag$0$be = $next_tag$051;$num_minimals$0$be = $num_minimals$057;$num_tags$0$be = $388;$regset$0$be = $374;$status$0$be = $status$8;$tag$0$be = $tag$054;
      } else {
       $direction$0$be = 1;$minimal_tag$0$be = $minimal_tag$048;$next_tag$0$be = $next_tag$051;$num_minimals$0$be = $num_minimals$057;$num_tags$0$be = $num_tags$060;$regset$0$be = $374;$status$0$be = 0;$tag$0$be = $tag$054;
      }
      break;
     }
     case 4:  {
      $318 = (($25) + -2)|0;
      HEAP32[$stack$idx4>>2] = $318;
      $319 = (($26) + ($318<<2)|0);
      $320 = HEAP32[$319>>2]|0;
      $321 = (($25) + -3)|0;
      HEAP32[$stack$idx4>>2] = $321;
      $322 = (($26) + ($321<<2)|0);
      $323 = HEAP32[$322>>2]|0;
      $324 = ($320|0)>(-1);
      $$tag$0 = $324 ? $320 : $tag$054;
      $direction$0$be = $direction$045;$minimal_tag$0$be = $minimal_tag$048;$next_tag$0$be = $323;$num_minimals$0$be = $num_minimals$057;$num_tags$0$be = $num_tags$060;$regset$0$be = $regset$063;$status$0$be = 0;$tag$0$be = $$tag$0;
      break;
     }
     case 5:  {
      $325 = (($25) + -2)|0;
      HEAP32[$stack$idx4>>2] = $325;
      $326 = (($26) + ($325<<2)|0);
      $327 = HEAP32[$326>>2]|0;
      if ($$) {
       $328 = (($327) + 4|0);
       $329 = HEAP32[$328>>2]|0;
       $330 = HEAP32[$329>>2]|0;
       $331 = (($330) + 20|0);
       $332 = HEAP32[$331>>2]|0;
       $333 = (($329) + 4|0);
       $334 = HEAP32[$333>>2]|0;
       $335 = (($334) + 20|0);
       $336 = HEAP32[$335>>2]|0;
       $337 = (($336) + ($332))|0;
       $338 = (($327) + 20|0);
       HEAP32[$338>>2] = $337;
       $direction$0$be = $direction$045;$minimal_tag$0$be = $minimal_tag$048;$next_tag$0$be = $next_tag$051;$num_minimals$0$be = $num_minimals$057;$num_tags$0$be = $num_tags$060;$regset$0$be = $regset$063;$status$0$be = 0;$tag$0$be = $tag$054;
      } else {
       $direction$0$be = $direction$045;$minimal_tag$0$be = $minimal_tag$048;$next_tag$0$be = $next_tag$051;$num_minimals$0$be = $num_minimals$057;$num_tags$0$be = $num_tags$060;$regset$0$be = $regset$063;$status$0$be = 0;$tag$0$be = $tag$054;
      }
      break;
     }
     case 6:  {
      $31 = (($25) + -2)|0;
      HEAP32[$stack$idx4>>2] = $31;
      $32 = (($26) + ($31<<2)|0);
      $33 = HEAP32[$32>>2]|0;
      $i1$0 = 0;
      while(1) {
       $34 = (($regset$063) + ($i1$0<<2)|0);
       $35 = HEAP32[$34>>2]|0;
       $36 = ($35|0)>(-1);
       $37 = (($i1$0) + 1)|0;
       if ($36) {
        $i1$0 = $37;
       } else {
        break;
       }
      }
      $38 = $33 << 1;
      $39 = $38 | 1;
      HEAP32[$34>>2] = $39;
      $40 = (($regset$063) + ($37<<2)|0);
      HEAP32[$40>>2] = -1;
      $i1$1 = 0;
      while(1) {
       $41 = (($13) + ($i1$1<<2)|0);
       $42 = HEAP32[$41>>2]|0;
       $43 = ($42|0)>(-1);
       $44 = (($i1$1) + 1)|0;
       if ($43) {
        $i1$1 = $44;
       } else {
        break;
       }
      }
      $45 = (($i1$1) + -1)|0;
      $46 = (($13) + ($45<<2)|0);
      HEAP32[$46>>2] = -1;
      $direction$0$be = $direction$045;$minimal_tag$0$be = $minimal_tag$048;$next_tag$0$be = $next_tag$051;$num_minimals$0$be = $num_minimals$057;$num_tags$0$be = $num_tags$060;$regset$0$be = $regset$063;$status$0$be = 0;$tag$0$be = $tag$054;
      break;
     }
     case 2:  {
      $regset$1 = $regset$063;
      while(1) {
       $339 = HEAP32[$regset$1>>2]|0;
       $340 = ($339|0)>(-1);
       $341 = (($regset$1) + 4|0);
       if ($340) {
        $regset$1 = $341;
       } else {
        $direction$0$be = $direction$045;$minimal_tag$0$be = $minimal_tag$048;$next_tag$0$be = $next_tag$051;$num_minimals$0$be = $num_minimals$057;$num_tags$0$be = $num_tags$060;$regset$0$be = $regset$1;$status$0$be = 0;$tag$0$be = $tag$054;
        break;
       }
      }
      break;
     }
     case 0:  {
      $47 = (($25) + -2)|0;
      HEAP32[$stack$idx4>>2] = $47;
      $48 = (($26) + ($47<<2)|0);
      $49 = HEAP32[$48>>2]|0;
      $50 = (($49) + 12|0);
      $51 = HEAP32[$50>>2]|0;
      $52 = ($51|0)>(-1);
      if ($52) {
       $i3$0 = 0;
       while(1) {
        $53 = (($regset$063) + ($i3$0<<2)|0);
        $54 = HEAP32[$53>>2]|0;
        $55 = ($54|0)>(-1);
        $56 = (($i3$0) + 1)|0;
        if ($55) {
         $i3$0 = $56;
        } else {
         break;
        }
       }
       $57 = $51 << 1;
       HEAP32[$53>>2] = $57;
       $58 = (($regset$063) + ($56<<2)|0);
       HEAP32[$58>>2] = -1;
       if (!($$)) {
        $i3$1 = 0;
        while(1) {
         $59 = (($13) + ($i3$1<<2)|0);
         $60 = HEAP32[$59>>2]|0;
         $61 = ($60|0)>(-1);
         $62 = (($i3$1) + 1)|0;
         if ($61) {
          $i3$1 = $62;
         } else {
          break;
         }
        }
        $63 = HEAP32[$22>>2]|0;
        $64 = ((($63) + (($51*12)|0)|0) + 8|0);
        HEAP32[$64>>2] = 0;
        $65 = ($i3$1|0)>(0);
        if ($65) {
         $66 = $i3$1 << 2;
         $67 = (($66) + 4)|0;
         $68 = (_malloc($67)|0);
         $69 = ($68|0)==(0|0);
         if ($69) {
          $minimal_tag$0$lcssa = $minimal_tag$048;$num_minimals$0$lcssa = $num_minimals$057;$num_tags$0$lcssa = $num_tags$060;$regset$0$lcssa = $regset$063;$status$0$lcssa = 12;$tag$0$lcssa = $tag$054;
          break L14;
         }
         $70 = HEAP32[$22>>2]|0;
         $71 = ((($70) + (($51*12)|0)|0) + 8|0);
         HEAP32[$71>>2] = $68;
         $72 = HEAP32[$13>>2]|0;
         $73 = ($72|0)>(-1);
         if ($73) {
          $74 = $72;$75 = $68;$i3$228 = 0;
          while(1) {
           HEAP32[$75>>2] = $74;
           $76 = (($i3$228) + 1)|0;
           $77 = (($13) + ($76<<2)|0);
           $78 = HEAP32[$77>>2]|0;
           $79 = ($78|0)>(-1);
           $80 = (($68) + ($76<<2)|0);
           if ($79) {
            $74 = $78;$75 = $80;$i3$228 = $76;
           } else {
            $$lcssa27 = $80;
            break;
           }
          }
         } else {
          $$lcssa27 = $68;
         }
         HEAP32[$$lcssa27>>2] = -1;
        }
       }
       $81 = HEAP32[$50>>2]|0;
       $value$c$i = $81;
       $82 = (_tre_stack_push($stack,$value$c$i)|0);
       $83 = ($82|0)==(0);
       if (!($83)) {
        $minimal_tag$0$lcssa = $minimal_tag$048;$num_minimals$0$lcssa = $num_minimals$057;$num_tags$0$lcssa = $num_tags$060;$regset$0$lcssa = $regset$063;$status$0$lcssa = $82;$tag$0$lcssa = $tag$054;
        break L14;
       }
       $84 = (_tre_stack_push($stack,(6))|0);
       $85 = ($84|0)==(0);
       if (!($85)) {
        $minimal_tag$0$lcssa = $minimal_tag$048;$num_minimals$0$lcssa = $num_minimals$057;$num_tags$0$lcssa = $num_tags$060;$regset$0$lcssa = $regset$063;$status$0$lcssa = $84;$tag$0$lcssa = $tag$054;
        break L14;
       }
      }
      $86 = HEAP32[$49>>2]|0;
      do {
       if ((($86|0) == 0)) {
        $87 = (($49) + 4|0);
        $88 = HEAP32[$87>>2]|0;
        $89 = HEAP32[$88>>2]|0;
        $90 = ($89|0)>(-1);
        $91 = ($89|0)==(-4);
        $or$cond1 = $90 | $91;
        if ($or$cond1) {
         $92 = HEAP32[$regset$063>>2]|0;
         $93 = ($92|0)>(-1);
         if ($93) {
          if ($$) {
           $120 = (($49) + 20|0);
           HEAP32[$120>>2] = 1;
           $minimal_tag$2 = $minimal_tag$048;$num_minimals$2 = $num_minimals$057;$status$2 = 0;
          } else {
           $94 = (_tre_add_tag_left($mem,$49,$tag$054)|0);
           $95 = HEAP32[$21>>2]|0;
           $96 = (($95) + ($tag$054<<2)|0);
           HEAP32[$96>>2] = $direction$045;
           $97 = ($minimal_tag$048|0)>(-1);
           if ($97) {
            $98 = HEAP32[$23>>2]|0;
            $i4$0 = 0;
            while(1) {
             $99 = (($98) + ($i4$0<<2)|0);
             $100 = HEAP32[$99>>2]|0;
             $101 = ($100|0)>(-1);
             $102 = (($i4$0) + 1)|0;
             if ($101) {
              $i4$0 = $102;
             } else {
              break;
             }
            }
            HEAP32[$99>>2] = $tag$054;
            $103 = (($98) + ($102<<2)|0);
            HEAP32[$103>>2] = $minimal_tag$048;
            $104 = (($i4$0) + 2)|0;
            $105 = (($98) + ($104<<2)|0);
            HEAP32[$105>>2] = -1;
            $106 = (($num_minimals$057) + 1)|0;
            $minimal_tag$1 = -1;$num_minimals$1 = $106;
           } else {
            $minimal_tag$1 = $minimal_tag$048;$num_minimals$1 = $num_minimals$057;
           }
           $107 = HEAP32[$regset$063>>2]|0;
           $108 = ($107|0)>(-1);
           if ($108) {
            $109 = HEAP32[$22>>2]|0;
            $111 = $107;$i$01$i9 = 0;
            while(1) {
             $110 = (($111|0) / 2)&-1;
             $112 = $111 & 1;
             $113 = ($112|0)==(0);
             if ($113) {
              $114 = (($109) + (($110*12)|0)|0);
              HEAP32[$114>>2] = $tag$054;
             } else {
              $115 = ((($109) + (($110*12)|0)|0) + 4|0);
              HEAP32[$115>>2] = $tag$054;
             }
             $116 = (($i$01$i9) + 1)|0;
             $117 = (($regset$063) + ($116<<2)|0);
             $118 = HEAP32[$117>>2]|0;
             $119 = ($118|0)>(-1);
             if ($119) {
              $111 = $118;$i$01$i9 = $116;
             } else {
              break;
             }
            }
           }
           HEAP32[$regset$063>>2] = -1;
           $minimal_tag$2 = $minimal_tag$1;$num_minimals$2 = $num_minimals$1;$status$2 = $94;
          }
          HEAP32[$regset$063>>2] = -1;
          $121 = (($num_tags$060) + 1)|0;
          $122 = (($next_tag$051) + 1)|0;
          $direction$1 = $direction$045;$minimal_tag$9 = $minimal_tag$2;$next_tag$4 = $122;$num_minimals$9 = $num_minimals$2;$num_tags$3 = $121;$status$7 = $status$2;$tag$3 = $next_tag$051;
         } else {
          $direction$1 = $direction$045;$minimal_tag$9 = $minimal_tag$048;$next_tag$4 = $next_tag$051;$num_minimals$9 = $num_minimals$057;$num_tags$3 = $num_tags$060;$status$7 = 0;$tag$3 = $tag$054;
         }
        } else {
         $direction$1 = $direction$045;$minimal_tag$9 = $minimal_tag$048;$next_tag$4 = $next_tag$051;$num_minimals$9 = $num_minimals$057;$num_tags$3 = $num_tags$060;$status$7 = 0;$tag$3 = $tag$054;
        }
       } else if ((($86|0) == 3)) {
        $222 = (($49) + 4|0);
        $223 = HEAP32[$222>>2]|0;
        $224 = HEAP32[$223>>2]|0;
        $225 = (($223) + 4|0);
        $226 = HEAP32[$225>>2]|0;
        $227 = HEAP32[$regset$063>>2]|0;
        $228 = ($227|0)>(-1);
        $229 = (($next_tag$051) + 1)|0;
        $right_tag$0 = $228 ? $229 : $next_tag$051;
        $value$c$i19 = $right_tag$0;
        $230 = (_tre_stack_push($stack,$value$c$i19)|0);
        $231 = ($230|0)==(0);
        if ($231) {
         $left_tag$0 = $228 ? $next_tag$051 : $tag$054;
         $value$c$i20 = $left_tag$0;
         $232 = (_tre_stack_push($stack,$value$c$i20)|0);
         $233 = ($232|0)==(0);
         if ($233) {
          $234 = (_tre_stack_push($stack,$regset$063)|0);
          $235 = ($234|0)==(0);
          if ($235) {
           $236 = HEAP32[$regset$063>>2]|0;
           $$lobit = $236 >>> 31;
           $$lobit$not = $$lobit ^ 1;
           $value$c$i21 = $$lobit$not;
           $237 = (_tre_stack_push($stack,$value$c$i21)|0);
           $238 = ($237|0)==(0);
           if ($238) {
            $239 = (_tre_stack_push($stack,$49)|0);
            $240 = ($239|0)==(0);
            if ($240) {
             $241 = (_tre_stack_push($stack,$226)|0);
             $242 = ($241|0)==(0);
             if ($242) {
              $243 = (_tre_stack_push($stack,$224)|0);
              $244 = ($243|0)==(0);
              if ($244) {
               $245 = (_tre_stack_push($stack,(3))|0);
               $246 = ($245|0)==(0);
               if ($246) {
                $247 = (_tre_stack_push($stack,$226)|0);
                $248 = ($247|0)==(0);
                if ($248) {
                 $249 = (_tre_stack_push($stack,0)|0);
                 $250 = ($249|0)==(0);
                 if ($250) {
                  $251 = (_tre_stack_push($stack,(2))|0);
                  $252 = ($251|0)==(0);
                  if ($252) {
                   $253 = (_tre_stack_push($stack,$224)|0);
                   $254 = ($253|0)==(0);
                   if (!($254)) {
                    $direction$1 = $direction$045;$minimal_tag$9 = $minimal_tag$048;$next_tag$4 = $next_tag$051;$num_minimals$9 = $num_minimals$057;$num_tags$3 = $num_tags$060;$status$7 = $253;$tag$3 = $tag$054;
                    break;
                   }
                   $255 = (_tre_stack_push($stack,0)|0);
                   $256 = ($255|0)==(0);
                   if (!($256)) {
                    $direction$1 = $direction$045;$minimal_tag$9 = $minimal_tag$048;$next_tag$4 = $next_tag$051;$num_minimals$9 = $num_minimals$057;$num_tags$3 = $num_tags$060;$status$7 = $255;$tag$3 = $tag$054;
                    break;
                   }
                   $257 = HEAP32[$regset$063>>2]|0;
                   $258 = ($257|0)>(-1);
                   if ($258) {
                    if ($$) {
                     $minimal_tag$7 = $minimal_tag$048;$num_minimals$7 = $num_minimals$057;$status$5 = 0;
                    } else {
                     $259 = (_tre_add_tag_left($mem,$49,$tag$054)|0);
                     $260 = HEAP32[$21>>2]|0;
                     $261 = (($260) + ($tag$054<<2)|0);
                     HEAP32[$261>>2] = $direction$045;
                     $262 = ($minimal_tag$048|0)>(-1);
                     if ($262) {
                      $263 = HEAP32[$23>>2]|0;
                      $i8$0 = 0;
                      while(1) {
                       $264 = (($263) + ($i8$0<<2)|0);
                       $265 = HEAP32[$264>>2]|0;
                       $266 = ($265|0)>(-1);
                       $267 = (($i8$0) + 1)|0;
                       if ($266) {
                        $i8$0 = $267;
                       } else {
                        break;
                       }
                      }
                      HEAP32[$264>>2] = $tag$054;
                      $268 = (($263) + ($267<<2)|0);
                      HEAP32[$268>>2] = $minimal_tag$048;
                      $269 = (($i8$0) + 2)|0;
                      $270 = (($263) + ($269<<2)|0);
                      HEAP32[$270>>2] = -1;
                      $271 = (($num_minimals$057) + 1)|0;
                      $minimal_tag$6 = -1;$num_minimals$6 = $271;
                     } else {
                      $minimal_tag$6 = $minimal_tag$048;$num_minimals$6 = $num_minimals$057;
                     }
                     $272 = HEAP32[$regset$063>>2]|0;
                     $273 = ($272|0)>(-1);
                     if ($273) {
                      $274 = HEAP32[$22>>2]|0;
                      $276 = $272;$i$01$i6 = 0;
                      while(1) {
                       $275 = (($276|0) / 2)&-1;
                       $277 = $276 & 1;
                       $278 = ($277|0)==(0);
                       if ($278) {
                        $279 = (($274) + (($275*12)|0)|0);
                        HEAP32[$279>>2] = $tag$054;
                       } else {
                        $280 = ((($274) + (($275*12)|0)|0) + 4|0);
                        HEAP32[$280>>2] = $tag$054;
                       }
                       $281 = (($i$01$i6) + 1)|0;
                       $282 = (($regset$063) + ($281<<2)|0);
                       $283 = HEAP32[$282>>2]|0;
                       $284 = ($283|0)>(-1);
                       if ($284) {
                        $276 = $283;$i$01$i6 = $281;
                       } else {
                        break;
                       }
                      }
                     }
                     HEAP32[$regset$063>>2] = -1;
                     $minimal_tag$7 = $minimal_tag$6;$num_minimals$7 = $num_minimals$6;$status$5 = $259;
                    }
                    HEAP32[$regset$063>>2] = -1;
                    $285 = (($num_tags$060) + 1)|0;
                    $minimal_tag$8 = $minimal_tag$7;$next_tag$3 = $229;$num_minimals$8 = $num_minimals$7;$num_tags$2 = $285;$status$6 = $status$5;$tag$2 = $next_tag$051;
                   } else {
                    $minimal_tag$8 = $minimal_tag$048;$next_tag$3 = $next_tag$051;$num_minimals$8 = $num_minimals$057;$num_tags$2 = $num_tags$060;$status$6 = 0;$tag$2 = $tag$054;
                   }
                   $286 = (($49) + 16|0);
                   $287 = HEAP32[$286>>2]|0;
                   $288 = ($287|0)>(0);
                   if (!($288)) {
                    $direction$1 = $direction$045;$minimal_tag$9 = $minimal_tag$8;$next_tag$4 = $next_tag$3;$num_minimals$9 = $num_minimals$8;$num_tags$3 = $num_tags$2;$status$7 = $status$6;$tag$3 = $tag$2;
                    break;
                   }
                   $289 = (($next_tag$3) + 1)|0;
                   $290 = (($next_tag$3) + 2)|0;
                   $direction$1 = $direction$045;$minimal_tag$9 = $minimal_tag$8;$next_tag$4 = $290;$num_minimals$9 = $num_minimals$8;$num_tags$3 = $num_tags$2;$status$7 = $status$6;$tag$3 = $289;
                  } else {
                   $direction$1 = $direction$045;$minimal_tag$9 = $minimal_tag$048;$next_tag$4 = $next_tag$051;$num_minimals$9 = $num_minimals$057;$num_tags$3 = $num_tags$060;$status$7 = $251;$tag$3 = $tag$054;
                  }
                 } else {
                  $direction$1 = $direction$045;$minimal_tag$9 = $minimal_tag$048;$next_tag$4 = $next_tag$051;$num_minimals$9 = $num_minimals$057;$num_tags$3 = $num_tags$060;$status$7 = $249;$tag$3 = $tag$054;
                 }
                } else {
                 $direction$1 = $direction$045;$minimal_tag$9 = $minimal_tag$048;$next_tag$4 = $next_tag$051;$num_minimals$9 = $num_minimals$057;$num_tags$3 = $num_tags$060;$status$7 = $247;$tag$3 = $tag$054;
                }
               } else {
                $direction$1 = $direction$045;$minimal_tag$9 = $minimal_tag$048;$next_tag$4 = $next_tag$051;$num_minimals$9 = $num_minimals$057;$num_tags$3 = $num_tags$060;$status$7 = $245;$tag$3 = $tag$054;
               }
              } else {
               $direction$1 = $direction$045;$minimal_tag$9 = $minimal_tag$048;$next_tag$4 = $next_tag$051;$num_minimals$9 = $num_minimals$057;$num_tags$3 = $num_tags$060;$status$7 = $243;$tag$3 = $tag$054;
              }
             } else {
              $direction$1 = $direction$045;$minimal_tag$9 = $minimal_tag$048;$next_tag$4 = $next_tag$051;$num_minimals$9 = $num_minimals$057;$num_tags$3 = $num_tags$060;$status$7 = $241;$tag$3 = $tag$054;
             }
            } else {
             $direction$1 = $direction$045;$minimal_tag$9 = $minimal_tag$048;$next_tag$4 = $next_tag$051;$num_minimals$9 = $num_minimals$057;$num_tags$3 = $num_tags$060;$status$7 = $239;$tag$3 = $tag$054;
            }
           } else {
            $direction$1 = $direction$045;$minimal_tag$9 = $minimal_tag$048;$next_tag$4 = $next_tag$051;$num_minimals$9 = $num_minimals$057;$num_tags$3 = $num_tags$060;$status$7 = $237;$tag$3 = $tag$054;
           }
          } else {
           $direction$1 = $direction$045;$minimal_tag$9 = $minimal_tag$048;$next_tag$4 = $next_tag$051;$num_minimals$9 = $num_minimals$057;$num_tags$3 = $num_tags$060;$status$7 = $234;$tag$3 = $tag$054;
          }
         } else {
          $direction$1 = $direction$045;$minimal_tag$9 = $minimal_tag$048;$next_tag$4 = $next_tag$051;$num_minimals$9 = $num_minimals$057;$num_tags$3 = $num_tags$060;$status$7 = $232;$tag$3 = $tag$054;
         }
        } else {
         $direction$1 = $direction$045;$minimal_tag$9 = $minimal_tag$048;$next_tag$4 = $next_tag$051;$num_minimals$9 = $num_minimals$057;$num_tags$3 = $num_tags$060;$status$7 = $230;$tag$3 = $tag$054;
        }
       } else if ((($86|0) == 1)) {
        $123 = (($49) + 4|0);
        $124 = HEAP32[$123>>2]|0;
        $125 = HEAP32[$124>>2]|0;
        $126 = (($124) + 4|0);
        $127 = HEAP32[$126>>2]|0;
        $128 = (_tre_stack_push($stack,$49)|0);
        $129 = ($128|0)==(0);
        if ($129) {
         $130 = (_tre_stack_push($stack,(5))|0);
         $131 = ($130|0)==(0);
         if ($131) {
          $132 = (_tre_stack_push($stack,$127)|0);
          $133 = ($132|0)==(0);
          if ($133) {
           $134 = (_tre_stack_push($stack,0)|0);
           $135 = ($134|0)==(0);
           if ($135) {
            $136 = (($125) + 20|0);
            $137 = HEAP32[$136>>2]|0;
            $138 = (($137) + ($next_tag$051))|0;
            $value$c$i11 = $138;
            $139 = (_tre_stack_push($stack,$value$c$i11)|0);
            $140 = ($139|0)==(0);
            if ($140) {
             $141 = HEAP32[$136>>2]|0;
             $142 = ($141|0)>(0);
             if ($142) {
              $143 = (($127) + 20|0);
              $144 = HEAP32[$143>>2]|0;
              $145 = ($144|0)>(0);
              $146 = $145&1;
              $$next_tag$0 = (($146) + ($next_tag$051))|0;
              $147 = $next_tag$051;
              $phitmp = $145 ? $147 : (-1);
              $next_tag$1 = $$next_tag$0;$reserved_tag$0 = $phitmp;
             } else {
              $next_tag$1 = $next_tag$051;$reserved_tag$0 = (-1);
             }
             $148 = (_tre_stack_push($stack,$reserved_tag$0)|0);
             $149 = ($148|0)==(0);
             if ($149) {
              $150 = (_tre_stack_push($stack,(4))|0);
              $151 = ($150|0)==(0);
              if ($151) {
               $152 = (_tre_stack_push($stack,$125)|0);
               $153 = ($152|0)==(0);
               if ($153) {
                $154 = (_tre_stack_push($stack,0)|0);
                $direction$1 = $direction$045;$minimal_tag$9 = $minimal_tag$048;$next_tag$4 = $next_tag$1;$num_minimals$9 = $num_minimals$057;$num_tags$3 = $num_tags$060;$status$7 = $154;$tag$3 = $tag$054;
               } else {
                $direction$1 = $direction$045;$minimal_tag$9 = $minimal_tag$048;$next_tag$4 = $next_tag$1;$num_minimals$9 = $num_minimals$057;$num_tags$3 = $num_tags$060;$status$7 = $152;$tag$3 = $tag$054;
               }
              } else {
               $direction$1 = $direction$045;$minimal_tag$9 = $minimal_tag$048;$next_tag$4 = $next_tag$1;$num_minimals$9 = $num_minimals$057;$num_tags$3 = $num_tags$060;$status$7 = $150;$tag$3 = $tag$054;
              }
             } else {
              $direction$1 = $direction$045;$minimal_tag$9 = $minimal_tag$048;$next_tag$4 = $next_tag$1;$num_minimals$9 = $num_minimals$057;$num_tags$3 = $num_tags$060;$status$7 = $148;$tag$3 = $tag$054;
             }
            } else {
             $direction$1 = $direction$045;$minimal_tag$9 = $minimal_tag$048;$next_tag$4 = $next_tag$051;$num_minimals$9 = $num_minimals$057;$num_tags$3 = $num_tags$060;$status$7 = $139;$tag$3 = $tag$054;
            }
           } else {
            $direction$1 = $direction$045;$minimal_tag$9 = $minimal_tag$048;$next_tag$4 = $next_tag$051;$num_minimals$9 = $num_minimals$057;$num_tags$3 = $num_tags$060;$status$7 = $134;$tag$3 = $tag$054;
           }
          } else {
           $direction$1 = $direction$045;$minimal_tag$9 = $minimal_tag$048;$next_tag$4 = $next_tag$051;$num_minimals$9 = $num_minimals$057;$num_tags$3 = $num_tags$060;$status$7 = $132;$tag$3 = $tag$054;
          }
         } else {
          $direction$1 = $direction$045;$minimal_tag$9 = $minimal_tag$048;$next_tag$4 = $next_tag$051;$num_minimals$9 = $num_minimals$057;$num_tags$3 = $num_tags$060;$status$7 = $130;$tag$3 = $tag$054;
         }
        } else {
         $direction$1 = $direction$045;$minimal_tag$9 = $minimal_tag$048;$next_tag$4 = $next_tag$051;$num_minimals$9 = $num_minimals$057;$num_tags$3 = $num_tags$060;$status$7 = $128;$tag$3 = $tag$054;
        }
       } else if ((($86|0) == 2)) {
        $155 = (($49) + 4|0);
        $156 = HEAP32[$155>>2]|0;
        if ($$) {
         $157 = HEAP32[$regset$063>>2]|0;
         $158 = ($157|0)>(-1);
         if ($158) {
          $164 = 1;
         } else {
          $159 = (($156) + 12|0);
          $160 = HEAP8[$159>>0]|0;
          $161 = $160 & 1;
          $162 = ($161<<24>>24)!=(0);
          $164 = $162;
         }
         $163 = $164&1;
         $value$c$i13 = $163;
         $165 = (_tre_stack_push($stack,$value$c$i13)|0);
         $166 = ($165|0)==(0);
         if (!($166)) {
          $direction$1 = $direction$045;$minimal_tag$9 = $minimal_tag$048;$next_tag$4 = $next_tag$051;$num_minimals$9 = $num_minimals$057;$num_tags$3 = $num_tags$060;$status$7 = $165;$tag$3 = $tag$054;
          break;
         }
        } else {
         $value$c$i14 = $tag$054;
         $167 = (_tre_stack_push($stack,$value$c$i14)|0);
         $168 = ($167|0)==(0);
         if (!($168)) {
          $direction$1 = $direction$045;$minimal_tag$9 = $minimal_tag$048;$next_tag$4 = $next_tag$051;$num_minimals$9 = $num_minimals$057;$num_tags$3 = $num_tags$060;$status$7 = $167;$tag$3 = $tag$054;
          break;
         }
         $169 = (($156) + 12|0);
         $170 = HEAP8[$169>>0]|0;
         $171 = $170 & 1;
         $172 = $171&255;
         $value$c$i15 = $172;
         $173 = (_tre_stack_push($stack,$value$c$i15)|0);
         $174 = ($173|0)==(0);
         if (!($174)) {
          $direction$1 = $direction$045;$minimal_tag$9 = $minimal_tag$048;$next_tag$4 = $next_tag$051;$num_minimals$9 = $num_minimals$057;$num_tags$3 = $num_tags$060;$status$7 = $173;$tag$3 = $tag$054;
          break;
         }
        }
        $175 = (_tre_stack_push($stack,$49)|0);
        $176 = ($175|0)==(0);
        if ($176) {
         $177 = (_tre_stack_push($stack,(1))|0);
         $178 = ($177|0)==(0);
         if ($178) {
          $179 = HEAP32[$156>>2]|0;
          $180 = (_tre_stack_push($stack,$179)|0);
          $181 = ($180|0)==(0);
          if ($181) {
           $182 = (_tre_stack_push($stack,0)|0);
           $183 = ($182|0)==(0);
           if ($183) {
            $184 = HEAP32[$regset$063>>2]|0;
            $185 = ($184|0)>(-1);
            if (!($185)) {
             $186 = (($156) + 12|0);
             $187 = HEAP8[$186>>0]|0;
             $188 = $187 & 1;
             $189 = ($188<<24>>24)==(0);
             if ($189) {
              $direction$1 = 0;$minimal_tag$9 = $minimal_tag$048;$next_tag$4 = $next_tag$051;$num_minimals$9 = $num_minimals$057;$num_tags$3 = $num_tags$060;$status$7 = 0;$tag$3 = $tag$054;
              break;
             }
            }
            if ($$) {
             $minimal_tag$4 = $minimal_tag$048;$num_minimals$4 = $num_minimals$057;$status$3 = 0;
            } else {
             $190 = (_tre_add_tag_left($mem,$49,$tag$054)|0);
             $191 = (($156) + 12|0);
             $192 = HEAP8[$191>>0]|0;
             $193 = $192 & 1;
             $194 = ($193<<24>>24)==(0);
             $195 = HEAP32[$21>>2]|0;
             $196 = (($195) + ($tag$054<<2)|0);
             $direction$0$ = $194 ? $direction$045 : 1;
             HEAP32[$196>>2] = $direction$0$;
             $197 = ($minimal_tag$048|0)>(-1);
             if ($197) {
              $198 = HEAP32[$23>>2]|0;
              $i5$0 = 0;
              while(1) {
               $199 = (($198) + ($i5$0<<2)|0);
               $200 = HEAP32[$199>>2]|0;
               $201 = ($200|0)>(-1);
               $202 = (($i5$0) + 1)|0;
               if ($201) {
                $i5$0 = $202;
               } else {
                break;
               }
              }
              HEAP32[$199>>2] = $tag$054;
              $203 = (($198) + ($202<<2)|0);
              HEAP32[$203>>2] = $minimal_tag$048;
              $204 = (($i5$0) + 2)|0;
              $205 = (($198) + ($204<<2)|0);
              HEAP32[$205>>2] = -1;
              $206 = (($num_minimals$057) + 1)|0;
              $minimal_tag$3 = -1;$num_minimals$3 = $206;
             } else {
              $minimal_tag$3 = $minimal_tag$048;$num_minimals$3 = $num_minimals$057;
             }
             $207 = HEAP32[$regset$063>>2]|0;
             $208 = ($207|0)>(-1);
             if ($208) {
              $209 = HEAP32[$22>>2]|0;
              $211 = $207;$i$01$i17 = 0;
              while(1) {
               $210 = (($211|0) / 2)&-1;
               $212 = $211 & 1;
               $213 = ($212|0)==(0);
               if ($213) {
                $214 = (($209) + (($210*12)|0)|0);
                HEAP32[$214>>2] = $tag$054;
               } else {
                $215 = ((($209) + (($210*12)|0)|0) + 4|0);
                HEAP32[$215>>2] = $tag$054;
               }
               $216 = (($i$01$i17) + 1)|0;
               $217 = (($regset$063) + ($216<<2)|0);
               $218 = HEAP32[$217>>2]|0;
               $219 = ($218|0)>(-1);
               if ($219) {
                $211 = $218;$i$01$i17 = $216;
               } else {
                break;
               }
              }
             }
             HEAP32[$regset$063>>2] = -1;
             $minimal_tag$4 = $minimal_tag$3;$num_minimals$4 = $num_minimals$3;$status$3 = $190;
            }
            HEAP32[$regset$063>>2] = -1;
            $220 = (($num_tags$060) + 1)|0;
            $221 = (($next_tag$051) + 1)|0;
            $direction$1 = 0;$minimal_tag$9 = $minimal_tag$4;$next_tag$4 = $221;$num_minimals$9 = $num_minimals$4;$num_tags$3 = $220;$status$7 = $status$3;$tag$3 = $next_tag$051;
           } else {
            $direction$1 = $direction$045;$minimal_tag$9 = $minimal_tag$048;$next_tag$4 = $next_tag$051;$num_minimals$9 = $num_minimals$057;$num_tags$3 = $num_tags$060;$status$7 = $182;$tag$3 = $tag$054;
           }
          } else {
           $direction$1 = $direction$045;$minimal_tag$9 = $minimal_tag$048;$next_tag$4 = $next_tag$051;$num_minimals$9 = $num_minimals$057;$num_tags$3 = $num_tags$060;$status$7 = $180;$tag$3 = $tag$054;
          }
         } else {
          $direction$1 = $direction$045;$minimal_tag$9 = $minimal_tag$048;$next_tag$4 = $next_tag$051;$num_minimals$9 = $num_minimals$057;$num_tags$3 = $num_tags$060;$status$7 = $177;$tag$3 = $tag$054;
         }
        } else {
         $direction$1 = $direction$045;$minimal_tag$9 = $minimal_tag$048;$next_tag$4 = $next_tag$051;$num_minimals$9 = $num_minimals$057;$num_tags$3 = $num_tags$060;$status$7 = $175;$tag$3 = $tag$054;
        }
       } else {
        $direction$1 = $direction$045;$minimal_tag$9 = $minimal_tag$048;$next_tag$4 = $next_tag$051;$num_minimals$9 = $num_minimals$057;$num_tags$3 = $num_tags$060;$status$7 = 0;$tag$3 = $tag$054;
       }
      } while(0);
      $291 = HEAP32[$50>>2]|0;
      $292 = ($291|0)>(-1);
      if ($292) {
       $i9$0 = 0;
       while(1) {
        $293 = (($13) + ($i9$0<<2)|0);
        $294 = HEAP32[$293>>2]|0;
        $295 = ($294|0)>(-1);
        $296 = (($i9$0) + 1)|0;
        if ($295) {
         $i9$0 = $296;
        } else {
         break;
        }
       }
       HEAP32[$293>>2] = $291;
       $297 = (($13) + ($296<<2)|0);
       HEAP32[$297>>2] = -1;
       $direction$0$be = $direction$1;$minimal_tag$0$be = $minimal_tag$9;$next_tag$0$be = $next_tag$4;$num_minimals$0$be = $num_minimals$9;$num_tags$0$be = $num_tags$3;$regset$0$be = $regset$063;$status$0$be = $status$7;$tag$0$be = $tag$3;
      } else {
       $direction$0$be = $direction$1;$minimal_tag$0$be = $minimal_tag$9;$next_tag$0$be = $next_tag$4;$num_minimals$0$be = $num_minimals$9;$num_tags$0$be = $num_tags$3;$regset$0$be = $regset$063;$status$0$be = $status$7;$tag$0$be = $tag$3;
      }
      break;
     }
     case 1:  {
      $298 = (($25) + -2)|0;
      HEAP32[$stack$idx4>>2] = $298;
      $299 = (($26) + ($298<<2)|0);
      $300 = HEAP32[$299>>2]|0;
      if ($$) {
       $301 = (($300) + 4|0);
       $302 = HEAP32[$301>>2]|0;
       $303 = HEAP32[$302>>2]|0;
       $304 = (($303) + 20|0);
       $305 = HEAP32[$304>>2]|0;
       $306 = (($25) + -3)|0;
       HEAP32[$stack$idx4>>2] = $306;
       $307 = (($26) + ($306<<2)|0);
       $308 = HEAP32[$307>>2]|0;
       $309 = (($308) + ($305))|0;
       $310 = (($300) + 20|0);
       HEAP32[$310>>2] = $309;
       $direction$0$be = $direction$045;$minimal_tag$0$be = -1;$next_tag$0$be = $next_tag$051;$num_minimals$0$be = $num_minimals$057;$num_tags$0$be = $num_tags$060;$regset$0$be = $regset$063;$status$0$be = 0;$tag$0$be = $tag$054;
       break L18;
      } else {
       $311 = (($25) + -3)|0;
       HEAP32[$stack$idx4>>2] = $311;
       $312 = (($26) + ($311<<2)|0);
       $313 = HEAP32[$312>>2]|0;
       $314 = (($25) + -4)|0;
       HEAP32[$stack$idx4>>2] = $314;
       $315 = (($26) + ($314<<2)|0);
       $316 = HEAP32[$315>>2]|0;
       $317 = ($313|0)==(0);
       $minimal_tag$0$ = $317 ? $minimal_tag$048 : $316;
       $$2 = $317&1;
       $direction$0$be = $$2;$minimal_tag$0$be = $minimal_tag$0$;$next_tag$0$be = $next_tag$051;$num_minimals$0$be = $num_minimals$057;$num_tags$0$be = $num_tags$060;$regset$0$be = $regset$063;$status$0$be = 0;$tag$0$be = $tag$054;
       break L18;
      }
      break;
     }
     default: {
      $direction$0$be = $direction$045;$minimal_tag$0$be = $minimal_tag$048;$next_tag$0$be = $next_tag$051;$num_minimals$0$be = $num_minimals$057;$num_tags$0$be = $num_tags$060;$regset$0$be = $regset$063;$status$0$be = 0;$tag$0$be = $tag$054;
     }
     }
    } while(0);
    $stack$idx$val = HEAP32[$stack$idx4>>2]|0;
    $29 = ($stack$idx$val|0)>($stack$idx4$val|0);
    $30 = ($status$0$be|0)==(0);
    $or$cond = $29 & $30;
    if ($or$cond) {
     $25 = $stack$idx$val;$direction$045 = $direction$0$be;$minimal_tag$048 = $minimal_tag$0$be;$next_tag$051 = $next_tag$0$be;$num_minimals$057 = $num_minimals$0$be;$num_tags$060 = $num_tags$0$be;$regset$063 = $regset$0$be;$tag$054 = $tag$0$be;
    } else {
     $minimal_tag$0$lcssa = $minimal_tag$0$be;$num_minimals$0$lcssa = $num_minimals$0$be;$num_tags$0$lcssa = $num_tags$0$be;$regset$0$lcssa = $regset$0$be;$status$0$lcssa = $status$0$be;$tag$0$lcssa = $tag$0$be;
     break L14;
    }
   }
  } else {
   $minimal_tag$0$lcssa = -1;$num_minimals$0$lcssa = 0;$num_tags$0$lcssa = 0;$regset$0$lcssa = $9;$status$0$lcssa = $17;$tag$0$lcssa = 0;
  }
 } while(0);
 if ($$) {
  $num_minimals$10 = $num_minimals$0$lcssa;
 } else {
  $389 = HEAP32[$regset$0$lcssa>>2]|0;
  $390 = ($389|0)>(-1);
  if ($390) {
   $391 = (($tnfa) + 16|0);
   $392 = HEAP32[$391>>2]|0;
   $394 = $389;$i$01$i = 0;
   while(1) {
    $393 = (($394|0) / 2)&-1;
    $395 = $394 & 1;
    $396 = ($395|0)==(0);
    if ($396) {
     $397 = (($392) + (($393*12)|0)|0);
     HEAP32[$397>>2] = $tag$0$lcssa;
    } else {
     $398 = ((($392) + (($393*12)|0)|0) + 4|0);
     HEAP32[$398>>2] = $tag$0$lcssa;
    }
    $399 = (($i$01$i) + 1)|0;
    $400 = (($regset$0$lcssa) + ($399<<2)|0);
    $401 = HEAP32[$400>>2]|0;
    $402 = ($401|0)>(-1);
    if ($402) {
     $394 = $401;$i$01$i = $399;
    } else {
     break;
    }
   }
  }
  HEAP32[$regset$0$lcssa>>2] = -1;
  $403 = ($minimal_tag$0$lcssa|0)>(-1);
  if ($403) {
   $404 = (($tnfa) + 36|0);
   $405 = HEAP32[$404>>2]|0;
   $i12$0 = 0;
   while(1) {
    $406 = (($405) + ($i12$0<<2)|0);
    $407 = HEAP32[$406>>2]|0;
    $408 = ($407|0)>(-1);
    $409 = (($i12$0) + 1)|0;
    if ($408) {
     $i12$0 = $409;
    } else {
     break;
    }
   }
   HEAP32[$406>>2] = $tag$0$lcssa;
   $410 = (($405) + ($409<<2)|0);
   HEAP32[$410>>2] = $minimal_tag$0$lcssa;
   $411 = (($i12$0) + 2)|0;
   $412 = (($405) + ($411<<2)|0);
   HEAP32[$412>>2] = -1;
   $413 = (($num_minimals$0$lcssa) + 1)|0;
   $num_minimals$10 = $413;
  } else {
   $num_minimals$10 = $num_minimals$0$lcssa;
  }
 }
 $414 = (($tnfa) + 48|0);
 HEAP32[$414>>2] = $num_tags$0$lcssa;
 $415 = (($tnfa) + 40|0);
 HEAP32[$415>>2] = $num_tags$0$lcssa;
 $416 = (($tnfa) + 44|0);
 HEAP32[$416>>2] = $num_minimals$10;
 _free($9);
 _free($13);
 $$0 = $status$0$lcssa;
 STACKTOP = sp;return ($$0|0);
}
function _tre_ast_to_tnfa($node,$transitions,$counts,$offs) {
 $node = $node|0;
 $transitions = $transitions|0;
 $counts = $counts|0;
 $offs = $offs|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $node$tr = 0, $node$tr$be = 0, $node$tr$be$in = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $node$tr = $node;
 while(1) {
  $0 = HEAP32[$node$tr>>2]|0;
  if ((($0|0) == 1)) {
   $7 = (($node$tr) + 4|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = HEAP32[$8>>2]|0;
   $10 = (($9) + 28|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($8) + 4|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (($13) + 24|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = (_tre_make_trans($11,$15,$transitions,$counts,$offs)|0);
   $17 = ($16|0)==(0);
   if (!($17)) {
    $$0 = $16;
    label = 10;
    break;
   }
   $18 = HEAP32[$8>>2]|0;
   $19 = (_tre_ast_to_tnfa($18,$transitions,$counts,$offs)|0);
   $20 = ($19|0)==(0);
   if ($20) {
    $node$tr$be$in = $12;
   } else {
    $$0 = $19;
    label = 10;
    break;
   }
  } else if ((($0|0) == 2)) {
   $21 = (($node$tr) + 4|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = (($22) + 8|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)==(-1);
   if ($25) {
    $26 = HEAP32[$22>>2]|0;
    $27 = (($26) + 28|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($26) + 24|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = (_tre_make_trans($28,$30,$transitions,$counts,$offs)|0);
    $32 = ($31|0)==(0);
    if ($32) {
     $node$tr$be$in = $22;
    } else {
     $$0 = $31;
     label = 10;
     break;
    }
   } else {
    $node$tr$be$in = $22;
   }
  } else if ((($0|0) == 3)) {
   $1 = (($node$tr) + 4|0);
   $2 = HEAP32[$1>>2]|0;
   $3 = HEAP32[$2>>2]|0;
   $4 = (_tre_ast_to_tnfa($3,$transitions,$counts,$offs)|0);
   $5 = ($4|0)==(0);
   if (!($5)) {
    $$0 = $4;
    label = 10;
    break;
   }
   $6 = (($2) + 4|0);
   $node$tr$be$in = $6;
  } else {
   $$0 = 0;
   label = 10;
   break;
  }
  $node$tr$be = HEAP32[$node$tr$be$in>>2]|0;
  $node$tr = $node$tr$be;
 }
 if ((label|0) == 10) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _regfree($preg) {
 $preg = $preg|0;
 var $$lcssa = 0, $$lcssa7 = 0, $$pre = 0, $$pre15 = 0, $$pre16 = 0, $$pre17 = 0, $$pre18 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, $i$08 = 0, $i$11 = 0, $trans$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($preg) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = (($1) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 $6 = HEAP32[$1>>2]|0;
 if ($5) {
  $$lcssa7 = $6;
 } else {
  $8 = $6;$i$08 = 0;
  while(1) {
   $7 = ((($8) + ($i$08<<5)|0) + 8|0);
   $9 = HEAP32[$7>>2]|0;
   $10 = ($9|0)==(0|0);
   if ($10) {
    $58 = $8;
   } else {
    $11 = ((($8) + ($i$08<<5)|0) + 16|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(0|0);
    if ($13) {
     $15 = $8;
    } else {
     _free($12);
     $$pre18 = HEAP32[$1>>2]|0;
     $15 = $$pre18;
    }
    $14 = ((($15) + ($i$08<<5)|0) + 28|0);
    $16 = HEAP32[$14>>2]|0;
    $17 = ($16|0)==(0|0);
    if ($17) {
     $58 = $15;
    } else {
     _free($16);
     $$pre17 = HEAP32[$1>>2]|0;
     $58 = $$pre17;
    }
   }
   $18 = (($i$08) + 1)|0;
   $19 = HEAP32[$3>>2]|0;
   $20 = ($18>>>0)<($19>>>0);
   if ($20) {
    $8 = $58;$i$08 = $18;
   } else {
    $$lcssa7 = $58;
    break;
   }
  }
 }
 $21 = ($$lcssa7|0)==(0|0);
 if (!($21)) {
  _free($$lcssa7);
 }
 $22 = (($1) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(0|0);
 if (!($24)) {
  $25 = (($23) + 8|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ($26|0)==(0|0);
  if ($27) {
   $35 = $23;
  } else {
   $trans$03 = $23;
   while(1) {
    $28 = (($trans$03) + 16|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ($29|0)==(0|0);
    if (!($30)) {
     _free($29);
    }
    $31 = (($trans$03) + 32|0);
    $32 = (($trans$03) + 40|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = ($33|0)==(0|0);
    if ($34) {
     break;
    } else {
     $trans$03 = $31;
    }
   }
   $$pre16 = HEAP32[$22>>2]|0;
   $35 = $$pre16;
  }
  _free($35);
 }
 $36 = (($1) + 16|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($37|0)==(0|0);
 if (!($38)) {
  $39 = (($1) + 28|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($40|0)==(0);
  if ($41) {
   $$lcssa = $37;
  } else {
   $43 = $37;$59 = $40;$i$11 = 0;
   while(1) {
    $42 = ((($43) + (($i$11*12)|0)|0) + 8|0);
    $44 = HEAP32[$42>>2]|0;
    $45 = ($44|0)==(0|0);
    if ($45) {
     $48 = $59;$60 = $43;
    } else {
     _free($44);
     $$pre = HEAP32[$39>>2]|0;
     $$pre15 = HEAP32[$36>>2]|0;
     $48 = $$pre;$60 = $$pre15;
    }
    $46 = (($i$11) + 1)|0;
    $47 = ($46>>>0)<($48>>>0);
    if ($47) {
     $43 = $60;$59 = $48;$i$11 = $46;
    } else {
     $$lcssa = $60;
     break;
    }
   }
  }
  _free($$lcssa);
 }
 $49 = (($1) + 32|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ($50|0)==(0|0);
 if (!($51)) {
  _free($50);
 }
 $52 = (($1) + 20|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = ($53|0)==(0|0);
 if (!($54)) {
  _free($53);
 }
 $55 = (($1) + 36|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = ($56|0)==(0|0);
 if (!($57)) {
  _free($56);
 }
 _free($1);
 STACKTOP = sp;return;
}
function _tre_make_trans($p1,$p2,$transitions,$counts,$offs) {
 $p1 = $p1|0;
 $p2 = $p2|0;
 $transitions = $transitions|0;
 $counts = $counts|0;
 $offs = $offs|0;
 var $$0 = 0, $$02$ph45 = 0, $$0241 = 0, $$134 = 0, $$lcssa10 = 0, $$pre = 0, $$pre61 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$0 = 0, $i$111 = 0, $i$2 = 0, $i$3 = 0, $i$420 = 0, $i$5 = 0, $j$0 = 0, $j$1 = 0, $j$229 = 0, $k$025 = 0;
 var $l$031 = 0, $l$1 = 0, $l$2 = 0, $prev_p2_pos$0$ph46 = 0, $trans$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($transitions|0)==(0|0);
 $1 = HEAP32[$p1>>2]|0;
 $2 = ($1|0)>(-1);
 if ($0) {
  if (!($2)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $136 = $p1;$140 = $1;
  while(1) {
   $127 = HEAP32[$p2>>2]|0;
   $128 = ($127|0)>(-1);
   L8: do {
    if ($128) {
     $$134 = $p2;$130 = $140;
     while(1) {
      $129 = (($counts) + ($130<<2)|0);
      $131 = HEAP32[$129>>2]|0;
      $132 = (($131) + 1)|0;
      HEAP32[$129>>2] = $132;
      $133 = (($$134) + 32|0);
      $134 = HEAP32[$133>>2]|0;
      $135 = ($134|0)>(-1);
      if (!($135)) {
       break L8;
      }
      $$pre = HEAP32[$136>>2]|0;
      $$134 = $133;$130 = $$pre;
     }
    }
   } while(0);
   $137 = (($136) + 32|0);
   $138 = HEAP32[$137>>2]|0;
   $139 = ($138|0)>(-1);
   if ($139) {
    $136 = $137;$140 = $138;
   } else {
    $$0 = 0;
    break;
   }
  }
  STACKTOP = sp;return ($$0|0);
 }
 if (!($2)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = $p1;
 L18: while(1) {
  $3 = HEAP32[$p2>>2]|0;
  $4 = ($3|0)>(-1);
  L20: do {
   if ($4) {
    $5 = (($6) + 4|0);
    $7 = (($6) + 8|0);
    $8 = (($6) + 16|0);
    $9 = (($6) + 20|0);
    $10 = (($6) + 24|0);
    $11 = (($6) + 28|0);
    $12 = (($6) + 12|0);
    $$02$ph45 = $p2;$141 = $3;$142 = $p2;$prev_p2_pos$0$ph46 = -1;
    while(1) {
     $$0241 = $$02$ph45;$17 = $141;$31 = $142;
     while(1) {
      $16 = ($17|0)==($prev_p2_pos$0$ph46|0);
      $14 = (($$0241) + 32|0);
      if (!($16)) {
       break;
      }
      $13 = HEAP32[$14>>2]|0;
      $15 = ($13|0)>(-1);
      if ($15) {
       $$0241 = $14;$17 = $13;$31 = $14;
      } else {
       break L20;
      }
     }
     $18 = HEAP32[$6>>2]|0;
     $19 = (($offs) + ($18<<2)|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = (($transitions) + ($20<<5)|0);
     $trans$0 = $21;
     while(1) {
      $22 = (($trans$0) + 8|0);
      $23 = HEAP32[$22>>2]|0;
      $24 = ($23|0)==(0|0);
      $25 = (($trans$0) + 32|0);
      if ($24) {
       break;
      } else {
       $trans$0 = $25;
      }
     }
     $26 = (($trans$0) + 40|0);
     HEAP32[$26>>2] = 0;
     $27 = HEAP32[$5>>2]|0;
     HEAP32[$trans$0>>2] = $27;
     $28 = HEAP32[$7>>2]|0;
     $29 = (($trans$0) + 4|0);
     HEAP32[$29>>2] = $28;
     $30 = HEAP32[$31>>2]|0;
     $32 = (($offs) + ($30<<2)|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = (($transitions) + ($33<<5)|0);
     HEAP32[$22>>2] = $34;
     $35 = (($trans$0) + 12|0);
     HEAP32[$35>>2] = $30;
     $36 = HEAP32[$8>>2]|0;
     $37 = (($$0241) + 16|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = $38 | $36;
     $40 = HEAP32[$9>>2]|0;
     $41 = ($40|0)!=(0);
     $42 = $41 ? 4 : 0;
     $43 = $39 | $42;
     $44 = HEAP32[$10>>2]|0;
     $45 = ($44|0)!=(0|0);
     $46 = $45 ? 8 : 0;
     $47 = $43 | $46;
     $48 = (($trans$0) + 20|0);
     HEAP32[$48>>2] = $47;
     $49 = HEAP32[$11>>2]|0;
     $50 = ($49|0)>(-1);
     $51 = (($trans$0) + 24|0);
     if ($50) {
      HEAP32[$51>>2] = $49;
      $52 = $47 | 256;
      HEAP32[$48>>2] = $52;
     } else {
      HEAP32[$51>>2] = $40;
     }
     $53 = ($44|0)==(0|0);
     if ($53) {
      $72 = (($trans$0) + 28|0);
      HEAP32[$72>>2] = 0;
     } else {
      $i$0 = 0;
      while(1) {
       $54 = (($44) + ($i$0<<2)|0);
       $55 = HEAP32[$54>>2]|0;
       $56 = ($55|0)==(0);
       $57 = (($i$0) + 1)|0;
       if ($56) {
        break;
       } else {
        $i$0 = $57;
       }
      }
      $58 = $57 << 2;
      $59 = (_malloc($58)|0);
      $60 = (($trans$0) + 28|0);
      HEAP32[$60>>2] = $59;
      $61 = ($59|0)==(0|0);
      if ($61) {
       $$0 = 12;
       label = 49;
       break L18;
      }
      $62 = HEAP32[$10>>2]|0;
      $63 = HEAP32[$62>>2]|0;
      $64 = ($63|0)==(0);
      if ($64) {
       $$lcssa10 = $59;
      } else {
       $65 = $63;$66 = $59;$i$111 = 0;
       while(1) {
        HEAP32[$66>>2] = $65;
        $67 = (($i$111) + 1)|0;
        $68 = (($62) + ($67<<2)|0);
        $69 = HEAP32[$68>>2]|0;
        $70 = ($69|0)==(0);
        $71 = (($59) + ($67<<2)|0);
        if ($70) {
         $$lcssa10 = $71;
         break;
        } else {
         $65 = $69;$66 = $71;$i$111 = $67;
        }
       }
      }
      HEAP32[$$lcssa10>>2] = 0;
     }
     $73 = HEAP32[$12>>2]|0;
     $74 = ($73|0)==(0|0);
     if ($74) {
      $i$3 = 0;
     } else {
      $i$2 = 0;
      while(1) {
       $75 = (($73) + ($i$2<<2)|0);
       $76 = HEAP32[$75>>2]|0;
       $77 = ($76|0)>(-1);
       $78 = (($i$2) + 1)|0;
       if ($77) {
        $i$2 = $78;
       } else {
        $i$3 = $i$2;
        break;
       }
      }
     }
     $79 = (($$0241) + 12|0);
     $80 = HEAP32[$79>>2]|0;
     $81 = ($80|0)==(0|0);
     if ($81) {
      $j$1 = 0;
     } else {
      $j$0 = 0;
      while(1) {
       $82 = (($80) + ($j$0<<2)|0);
       $83 = HEAP32[$82>>2]|0;
       $84 = ($83|0)>(-1);
       $85 = (($j$0) + 1)|0;
       if ($84) {
        $j$0 = $85;
       } else {
        $j$1 = $j$0;
        break;
       }
      }
     }
     $86 = (($trans$0) + 16|0);
     $87 = HEAP32[$86>>2]|0;
     $88 = ($87|0)==(0|0);
     if (!($88)) {
      _free($87);
     }
     HEAP32[$86>>2] = 0;
     $89 = (($j$1) + ($i$3))|0;
     $90 = ($89|0)>(0);
     if ($90) {
      $91 = $89 << 2;
      $92 = (($91) + 4)|0;
      $93 = (_malloc($92)|0);
      HEAP32[$86>>2] = $93;
      $94 = ($93|0)==(0|0);
      if ($94) {
       $$0 = 12;
       label = 49;
       break L18;
      }
      $95 = HEAP32[$12>>2]|0;
      $96 = ($95|0)==(0|0);
      if ($96) {
       $i$5 = 0;
      } else {
       $97 = HEAP32[$95>>2]|0;
       $98 = ($97|0)>(-1);
       if ($98) {
        $100 = $97;$i$420 = 0;
        while(1) {
         $99 = (($93) + ($i$420<<2)|0);
         HEAP32[$99>>2] = $100;
         $101 = (($i$420) + 1)|0;
         $102 = (($95) + ($101<<2)|0);
         $103 = HEAP32[$102>>2]|0;
         $104 = ($103|0)>(-1);
         if ($104) {
          $100 = $103;$i$420 = $101;
         } else {
          $i$5 = $101;
          break;
         }
        }
       } else {
        $i$5 = 0;
       }
      }
      $105 = HEAP32[$79>>2]|0;
      $106 = ($105|0)==(0|0);
      if ($106) {
       $l$2 = $i$5;
      } else {
       $107 = HEAP32[$105>>2]|0;
       $108 = ($107|0)>(-1);
       if ($108) {
        $109 = ($i$5|0)>(0);
        $$pre61 = $107;$j$229 = 0;$l$031 = $i$5;
        while(1) {
         L70: do {
          if ($109) {
           $k$025 = 0;
           while(1) {
            $112 = (($93) + ($k$025<<2)|0);
            $113 = HEAP32[$112>>2]|0;
            $114 = ($113|0)==($$pre61|0);
            $111 = (($k$025) + 1)|0;
            if ($114) {
             $l$1 = $l$031;
             break L70;
            }
            $110 = ($111|0)<($i$5|0);
            if ($110) {
             $k$025 = $111;
            } else {
             label = 40;
             break;
            }
           }
          } else {
           label = 40;
          }
         } while(0);
         if ((label|0) == 40) {
          label = 0;
          $115 = (($l$031) + 1)|0;
          $116 = (($93) + ($l$031<<2)|0);
          HEAP32[$116>>2] = $$pre61;
          $l$1 = $115;
         }
         $117 = (($j$229) + 1)|0;
         $118 = (($105) + ($117<<2)|0);
         $119 = HEAP32[$118>>2]|0;
         $120 = ($119|0)>(-1);
         if ($120) {
          $$pre61 = $119;$j$229 = $117;$l$031 = $l$1;
         } else {
          $l$2 = $l$1;
          break;
         }
        }
       } else {
        $l$2 = $i$5;
       }
      }
      $121 = (($93) + ($l$2<<2)|0);
      HEAP32[$121>>2] = -1;
     }
     $122 = HEAP32[$14>>2]|0;
     $123 = ($122|0)>(-1);
     if ($123) {
      $$02$ph45 = $14;$141 = $122;$142 = $14;$prev_p2_pos$0$ph46 = $17;
     } else {
      break;
     }
    }
   }
  } while(0);
  $124 = (($6) + 32|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = ($125|0)>(-1);
  if ($126) {
   $6 = $124;
  } else {
   $$0 = 0;
   label = 49;
   break;
  }
 }
 if ((label|0) == 49) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _tre_set_union($mem,$set1,$set2,$tags,$assertions) {
 $mem = $mem|0;
 $set1 = $set1|0;
 $set2 = $set2|0;
 $tags = $tags|0;
 $assertions = $assertions|0;
 var $$0 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond42 = 0, $exitcond44 = 0, $i$0$lcssa = 0, $i$011 = 0, $i$1$lcssa = 0, $i$119 = 0, $i$2 = 0, $j$0$lcssa = 0, $j$016 = 0, $j$1$lcssa = 0, $j$13 = 0, $num_tags$0$lcssa = 0, $num_tags$032 = 0, $or$cond = 0;
 var $s1$0 = 0, $s1$1$lcssa = 0, $s1$126 = 0, $s2$0 = 0, $s2$16 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($tags|0)==(0|0);
 L1: do {
  if ($0) {
   $num_tags$0$lcssa = 0;
  } else {
   $num_tags$032 = 0;
   while(1) {
    $2 = (($tags) + ($num_tags$032<<2)|0);
    $3 = HEAP32[$2>>2]|0;
    $4 = ($3|0)>(-1);
    if (!($4)) {
     $num_tags$0$lcssa = $num_tags$032;
     break L1;
    }
    $1 = (($num_tags$032) + 1)|0;
    $num_tags$032 = $1;
   }
  }
 } while(0);
 $s1$0 = 0;
 while(1) {
  $5 = (($set1) + ($s1$0<<5)|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)>(-1);
  $8 = (($s1$0) + 1)|0;
  if ($7) {
   $s1$0 = $8;
  } else {
   $s2$0 = 0;
   break;
  }
 }
 while(1) {
  $9 = (($set2) + ($s2$0<<5)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)>(-1);
  $12 = (($s2$0) + 1)|0;
  if ($11) {
   $s2$0 = $12;
  } else {
   break;
  }
 }
 $13 = (($s2$0) + ($s1$0))|0;
 $14 = $13 << 5;
 $15 = (($14) + 32)|0;
 $16 = (___tre_mem_alloc_impl($mem,0,0,1,$15)|0);
 $17 = ($16|0)==(0|0);
 if ($17) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $18 = HEAP32[$set1>>2]|0;
 $19 = ($18|0)>(-1);
 L14: do {
  if ($19) {
   $20 = ($num_tags$0$lcssa|0)>(0);
   $25 = $18;$s1$126 = 0;
   while(1) {
    $24 = (($16) + ($s1$126<<5)|0);
    HEAP32[$24>>2] = $25;
    $26 = ((($set1) + ($s1$126<<5)|0) + 4|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ((($16) + ($s1$126<<5)|0) + 4|0);
    HEAP32[$28>>2] = $27;
    $29 = ((($set1) + ($s1$126<<5)|0) + 8|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = ((($16) + ($s1$126<<5)|0) + 8|0);
    HEAP32[$31>>2] = $30;
    $32 = ((($set1) + ($s1$126<<5)|0) + 16|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = $33 | $assertions;
    $35 = ((($16) + ($s1$126<<5)|0) + 16|0);
    HEAP32[$35>>2] = $34;
    $36 = ((($set1) + ($s1$126<<5)|0) + 20|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ((($16) + ($s1$126<<5)|0) + 20|0);
    HEAP32[$38>>2] = $37;
    $39 = ((($set1) + ($s1$126<<5)|0) + 24|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = ((($16) + ($s1$126<<5)|0) + 24|0);
    HEAP32[$41>>2] = $40;
    $42 = ((($set1) + ($s1$126<<5)|0) + 28|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = ((($16) + ($s1$126<<5)|0) + 28|0);
    HEAP32[$44>>2] = $43;
    $45 = ((($set1) + ($s1$126<<5)|0) + 12|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = ($46|0)==(0|0);
    $or$cond = $47 & $0;
    if ($or$cond) {
     $48 = ((($16) + ($s1$126<<5)|0) + 12|0);
     HEAP32[$48>>2] = 0;
    } else {
     L20: do {
      if ($47) {
       $i$0$lcssa = 0;
      } else {
       $i$011 = 0;
       while(1) {
        $49 = (($46) + ($i$011<<2)|0);
        $50 = HEAP32[$49>>2]|0;
        $51 = ($50|0)>(-1);
        if (!($51)) {
         $i$0$lcssa = $i$011;
         break L20;
        }
        $52 = (($i$011) + 1)|0;
        $i$011 = $52;
       }
      }
     } while(0);
     $53 = (($i$0$lcssa) + ($num_tags$0$lcssa))|0;
     $54 = $53 << 2;
     $55 = (($54) + 4)|0;
     $56 = (___tre_mem_alloc_impl($mem,0,0,0,$55)|0);
     $57 = ($56|0)==(0|0);
     if ($57) {
      $$0 = 0;
      break;
     }
     $58 = ($i$0$lcssa|0)>(0);
     if ($58) {
      $59 = HEAP32[$45>>2]|0;
      $j$016 = 0;
      while(1) {
       $60 = (($59) + ($j$016<<2)|0);
       $61 = HEAP32[$60>>2]|0;
       $62 = (($56) + ($j$016<<2)|0);
       HEAP32[$62>>2] = $61;
       $63 = (($j$016) + 1)|0;
       $exitcond42 = ($63|0)==($i$0$lcssa|0);
       if ($exitcond42) {
        $j$0$lcssa = $i$0$lcssa;
        break;
       } else {
        $j$016 = $63;
       }
      }
     } else {
      $j$0$lcssa = 0;
     }
     if ($20) {
      $i$119 = 0;
      while(1) {
       $64 = (($tags) + ($i$119<<2)|0);
       $65 = HEAP32[$64>>2]|0;
       $66 = (($i$119) + ($j$0$lcssa))|0;
       $67 = (($56) + ($66<<2)|0);
       HEAP32[$67>>2] = $65;
       $68 = (($i$119) + 1)|0;
       $exitcond44 = ($68|0)==($num_tags$0$lcssa|0);
       if ($exitcond44) {
        $i$1$lcssa = $num_tags$0$lcssa;
        break;
       } else {
        $i$119 = $68;
       }
      }
     } else {
      $i$1$lcssa = 0;
     }
     $69 = (($i$1$lcssa) + ($j$0$lcssa))|0;
     $70 = (($56) + ($69<<2)|0);
     HEAP32[$70>>2] = -1;
     $71 = ((($16) + ($s1$126<<5)|0) + 12|0);
     HEAP32[$71>>2] = $56;
    }
    $72 = (($s1$126) + 1)|0;
    $73 = (($set1) + ($72<<5)|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($74|0)>(-1);
    if ($75) {
     $25 = $74;$s1$126 = $72;
    } else {
     $s1$1$lcssa = $72;
     break L14;
    }
   }
   STACKTOP = sp;return ($$0|0);
  } else {
   $s1$1$lcssa = 0;
  }
 } while(0);
 $21 = HEAP32[$set2>>2]|0;
 $22 = ($21|0)>(-1);
 $23 = (($16) + ($s1$1$lcssa<<5)|0);
 L39: do {
  if ($22) {
   $76 = $21;$77 = $23;$81 = $s1$1$lcssa;$s2$16 = 0;
   while(1) {
    HEAP32[$77>>2] = $76;
    $78 = ((($set2) + ($s2$16<<5)|0) + 4|0);
    $79 = HEAP32[$78>>2]|0;
    $80 = ((($16) + ($81<<5)|0) + 4|0);
    HEAP32[$80>>2] = $79;
    $82 = ((($set2) + ($s2$16<<5)|0) + 8|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ((($16) + ($81<<5)|0) + 8|0);
    HEAP32[$84>>2] = $83;
    $85 = ((($set2) + ($s2$16<<5)|0) + 16|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = ((($16) + ($81<<5)|0) + 16|0);
    HEAP32[$87>>2] = $86;
    $88 = ((($set2) + ($s2$16<<5)|0) + 20|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = ((($16) + ($81<<5)|0) + 20|0);
    HEAP32[$90>>2] = $89;
    $91 = ((($set2) + ($s2$16<<5)|0) + 24|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ((($16) + ($81<<5)|0) + 24|0);
    HEAP32[$93>>2] = $92;
    $94 = ((($set2) + ($s2$16<<5)|0) + 28|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = ((($16) + ($81<<5)|0) + 28|0);
    HEAP32[$96>>2] = $95;
    $97 = ((($set2) + ($s2$16<<5)|0) + 12|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($98|0)==(0|0);
    if ($99) {
     $100 = ((($16) + ($81<<5)|0) + 12|0);
     HEAP32[$100>>2] = 0;
    } else {
     $i$2 = 0;
     while(1) {
      $101 = (($98) + ($i$2<<2)|0);
      $102 = HEAP32[$101>>2]|0;
      $103 = ($102|0)>(-1);
      $104 = (($i$2) + 1)|0;
      if ($103) {
       $i$2 = $104;
      } else {
       break;
      }
     }
     $105 = $i$2 << 2;
     $106 = (($105) + 4)|0;
     $107 = (___tre_mem_alloc_impl($mem,0,0,0,$106)|0);
     $108 = ($107|0)==(0|0);
     if ($108) {
      $$0 = 0;
      break;
     }
     $109 = ($i$2|0)>(0);
     if ($109) {
      $110 = HEAP32[$97>>2]|0;
      $j$13 = 0;
      while(1) {
       $111 = (($110) + ($j$13<<2)|0);
       $112 = HEAP32[$111>>2]|0;
       $113 = (($107) + ($j$13<<2)|0);
       HEAP32[$113>>2] = $112;
       $114 = (($j$13) + 1)|0;
       $exitcond = ($114|0)==($i$2|0);
       if ($exitcond) {
        $j$1$lcssa = $i$2;
        break;
       } else {
        $j$13 = $114;
       }
      }
     } else {
      $j$1$lcssa = 0;
     }
     $115 = (($107) + ($j$1$lcssa<<2)|0);
     HEAP32[$115>>2] = -1;
     $116 = ((($16) + ($81<<5)|0) + 12|0);
     HEAP32[$116>>2] = $107;
    }
    $117 = (($s2$16) + 1)|0;
    $118 = (($set2) + ($117<<5)|0);
    $119 = HEAP32[$118>>2]|0;
    $120 = ($119|0)>(-1);
    $121 = (($117) + ($s1$1$lcssa))|0;
    $122 = (($16) + ($121<<5)|0);
    if ($120) {
     $76 = $119;$77 = $122;$81 = $121;$s2$16 = $117;
    } else {
     $$lcssa = $122;
     break L39;
    }
   }
   STACKTOP = sp;return ($$0|0);
  } else {
   $$lcssa = $23;
  }
 } while(0);
 HEAP32[$$lcssa>>2] = -1;
 $$0 = $16;
 STACKTOP = sp;return ($$0|0);
}
function _tre_match_empty($stack,$node,$tags,$assertions,$num_tags_seen) {
 $stack = $stack|0;
 $node = $node|0;
 $tags = $tags|0;
 $assertions = $assertions|0;
 $num_tags_seen = $num_tags_seen|0;
 var $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $i$03 = 0, $i$05 = 0, $stack$idx$val = 0, $stack$idx1 = 0, $stack$idx1$val = 0, $status$0$be = 0, $status$0$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $stack$idx1 = (($stack) + 12|0);
 $stack$idx1$val = HEAP32[$stack$idx1>>2]|0;
 $0 = ($num_tags_seen|0)!=(0|0);
 if ($0) {
  HEAP32[$num_tags_seen>>2] = 0;
 }
 $1 = (_tre_stack_push($stack,$node)|0);
 $2 = ($1|0)==(0);
 if (!($2)) {
  $status$0$lcssa = $1;
  STACKTOP = sp;return ($status$0$lcssa|0);
 }
 $3 = (($stack) + 16|0);
 $4 = ($tags|0)==(0|0);
 $5 = ($assertions|0)==(0|0);
 L7: while(1) {
  $stack$idx$val = HEAP32[$stack$idx1>>2]|0;
  $6 = ($stack$idx$val|0)>($stack$idx1$val|0);
  if (!($6)) {
   $status$0$lcssa = 0;
   label = 28;
   break;
  }
  $7 = (($stack$idx$val) + -1)|0;
  HEAP32[$stack$idx1>>2] = $7;
  $8 = HEAP32[$3>>2]|0;
  $9 = (($8) + ($7<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$10>>2]|0;
  do {
   if ((($11|0) == 1)) {
    $49 = (($10) + 4|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = HEAP32[$50>>2]|0;
    $52 = (_tre_stack_push($stack,$51)|0);
    $53 = ($52|0)==(0);
    if (!($53)) {
     $status$0$lcssa = $52;
     label = 28;
     break L7;
    }
    $54 = (($50) + 4|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = (_tre_stack_push($stack,$55)|0);
    $status$0$be = $56;
   } else if ((($11|0) == 0)) {
    $13 = (($10) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = HEAP32[$14>>2]|0;
    if ((($15|0) == -2)) {
     if ($5) {
      continue L7;
     }
     $32 = (($14) + 4|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = HEAP32[$assertions>>2]|0;
     $35 = $34 | $33;
     HEAP32[$assertions>>2] = $35;
     continue L7;
    } else if (!((($15|0) == -3))) {
     continue L7;
    }
    $16 = (($14) + 4|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($17|0)>(-1);
    if (!($18)) {
     continue L7;
    }
    L19: do {
     if (!($4)) {
      $19 = HEAP32[$tags>>2]|0;
      $20 = ($19|0)>(-1);
      L21: do {
       if ($20) {
        $$pr = $19;$64 = $tags;$i$05 = 0;
        while(1) {
         $25 = ($$pr|0)==($17|0);
         $22 = (($i$05) + 1)|0;
         if ($25) {
          break;
         }
         $21 = (($tags) + ($22<<2)|0);
         $23 = HEAP32[$21>>2]|0;
         $24 = ($23|0)>(-1);
         if ($24) {
          $$pr = $23;$64 = $21;$i$05 = $22;
         } else {
          $27 = $21;$i$03 = $22;
          break L21;
         }
        }
        $26 = ($17|0)<(0);
        if ($26) {
         $27 = $64;$i$03 = $i$05;
        } else {
         break L19;
        }
       } else {
        $27 = $tags;$i$03 = 0;
       }
      } while(0);
      HEAP32[$27>>2] = $17;
      $28 = (($i$03) + 1)|0;
      $29 = (($tags) + ($28<<2)|0);
      HEAP32[$29>>2] = -1;
     }
    } while(0);
    if (!($0)) {
     continue L7;
    }
    $30 = HEAP32[$num_tags_seen>>2]|0;
    $31 = (($30) + 1)|0;
    HEAP32[$num_tags_seen>>2] = $31;
    continue L7;
   } else if ((($11|0) == 3)) {
    $36 = (($10) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = HEAP32[$37>>2]|0;
    $39 = (($38) + 8|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = ($40|0)==(0);
    if (!($41)) {
     $42 = (_tre_stack_push($stack,$38)|0);
     $status$0$be = $42;
     break;
    }
    $43 = (($37) + 4|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = (($44) + 8|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = ($46|0)==(0);
    if ($47) {
     continue L7;
    }
    $48 = (_tre_stack_push($stack,$44)|0);
    $status$0$be = $48;
   } else if ((($11|0) == 2)) {
    $57 = (($10) + 4|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = HEAP32[$58>>2]|0;
    $60 = (($59) + 8|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = ($61|0)==(0);
    if ($62) {
     continue L7;
    }
    $63 = (_tre_stack_push($stack,$59)|0);
    $status$0$be = $63;
   } else {
    continue L7;
   }
  } while(0);
  $12 = ($status$0$be|0)==(0);
  if (!($12)) {
   $status$0$lcssa = $status$0$be;
   label = 28;
   break;
  }
 }
 if ((label|0) == 28) {
  STACKTOP = sp;return ($status$0$lcssa|0);
 }
 return 0|0;
}
function _tre_stack_push($s,$value$02) {
 $s = $s|0;
 $value$02 = $value$02|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($s) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$s>>2]|0;
 $3 = ($1|0)<($2|0);
 if ($3) {
  $4 = (($s) + 16|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + ($1<<2)|0);
  HEAP32[$6>>2] = $value$02;
  $7 = HEAP32[$0>>2]|0;
  $8 = (($7) + 1)|0;
  HEAP32[$0>>2] = $8;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = (($s) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($2|0)<($10|0);
 if (!($11)) {
  $$0 = 12;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = (($s) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + ($2))|0;
 $15 = ($14|0)>($10|0);
 $$ = $15 ? $10 : $14;
 $16 = (($s) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $$ << 2;
 $19 = (_realloc($17,$18)|0);
 $20 = ($19|0)==(0|0);
 if ($20) {
  $$0 = 12;
  STACKTOP = sp;return ($$0|0);
 } else {
  HEAP32[$s>>2] = $$;
  HEAP32[$16>>2] = $19;
  (_tre_stack_push($s,$value$02)|0);
  STACKTOP = sp;return 0;
 }
 return 0|0;
}
function _tre_copy_ast($mem,$stack,$ast,$flags,$pos_add,$tag_directions,$copy,$max_pos) {
 $mem = $mem|0;
 $stack = $stack|0;
 $ast = $ast|0;
 $flags = $flags|0;
 $pos_add = $pos_add|0;
 $tag_directions = $tag_directions|0;
 $copy = $copy|0;
 $max_pos = $max_pos|0;
 var $$0$i4 = 0, $$status$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $first_tag$0$be = 0, $first_tag$08 = 0, $first_tag$08$phi = 0, $first_tag$1 = 0, $max$0 = 0, $min$0 = 0, $num_copied$0$be = 0;
 var $num_copied$0$lcssa = 0, $num_copied$09 = 0, $num_copied$09$phi = 0, $num_copied$1 = 0, $or$cond1 = 0, $or$cond2 = 0, $pos$0 = 0, $result$0$be = 0, $result$07 = 0, $result$07$phi = 0, $stack$idx$val = 0, $stack$idx3 = 0, $stack$idx3$val = 0, $status$0$be = 0, $status$0$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $stack$idx3 = (($stack) + 12|0);
 $stack$idx3$val = HEAP32[$stack$idx3>>2]|0;
 (_tre_stack_push($stack,$ast)|0);
 $0 = (_tre_stack_push($stack,0)|0);
 $1 = ($0|0)==(0);
 L1: do {
  if ($1) {
   $2 = (($stack) + 16|0);
   $3 = $flags & 1;
   $4 = ($3|0)==(0);
   $5 = $flags & 2;
   $6 = ($5|0)==(0);
   $first_tag$08 = 1;$num_copied$09 = 0;$result$07 = $copy;
   while(1) {
    $stack$idx$val = HEAP32[$stack$idx3>>2]|0;
    $7 = ($stack$idx$val|0)>($stack$idx3$val|0);
    if (!($7)) {
     $num_copied$0$lcssa = $num_copied$09;$status$0$lcssa = 0;
     break L1;
    }
    $8 = (($stack$idx$val) + -1)|0;
    HEAP32[$stack$idx3>>2] = $8;
    $9 = HEAP32[$2>>2]|0;
    $10 = (($9) + ($8<<2)|0);
    $11 = HEAP32[$10>>2]|0;
    if ((($11|0) == 1)) {
     $12 = (($stack$idx$val) + -2)|0;
     HEAP32[$stack$idx3>>2] = $12;
     $13 = (($9) + ($12<<2)|0);
     $14 = HEAP32[$13>>2]|0;
     $num_copied$09$phi = $num_copied$09;$first_tag$08$phi = $first_tag$08;$result$07 = $14;$num_copied$09 = $num_copied$09$phi;$first_tag$08 = $first_tag$08$phi;
     continue;
    } else if (!((($11|0) == 0))) {
     $result$07$phi = $result$07;$num_copied$09$phi = $num_copied$09;$first_tag$08$phi = $first_tag$08;$result$07 = $result$07$phi;$num_copied$09 = $num_copied$09$phi;$first_tag$08 = $first_tag$08$phi;
     continue;
    }
    $15 = (($stack$idx$val) + -2)|0;
    HEAP32[$stack$idx3>>2] = $15;
    $16 = (($9) + ($15<<2)|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = HEAP32[$17>>2]|0;
    if ((($18|0) == 3)) {
     $46 = (($17) + 4|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = HEAP32[$47>>2]|0;
     $49 = (($47) + 4|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = (___tre_mem_alloc_impl($mem,0,0,1,32)|0);
     $52 = ($51|0)==(0|0);
     if ($52) {
      label = 20;
      break;
     }
     $53 = (___tre_mem_alloc_impl($mem,0,0,1,8)|0);
     $54 = (($51) + 4|0);
     HEAP32[$54>>2] = $53;
     $55 = ($53|0)==(0|0);
     if ($55) {
      label = 20;
      break;
     }
     HEAP32[$51>>2] = 3;
     $56 = (($51) + 8|0);
     HEAP32[$56>>2] = -1;
     $57 = (($51) + 12|0);
     HEAP32[$57>>2] = -1;
     HEAP32[$53>>2] = $48;
     $58 = HEAP32[$54>>2]|0;
     $59 = (($58) + 4|0);
     HEAP32[$59>>2] = $50;
     $60 = (($48) + 16|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = (($50) + 16|0);
     $63 = HEAP32[$62>>2]|0;
     $64 = (($63) + ($61))|0;
     $65 = (($51) + 16|0);
     HEAP32[$65>>2] = $64;
     HEAP32[$result$07>>2] = $51;
     $66 = HEAP32[$54>>2]|0;
     $67 = HEAP32[$49>>2]|0;
     $68 = (_tre_stack_push($stack,$67)|0);
     $69 = ($68|0)==(0);
     if (!($69)) {
      $num_copied$0$lcssa = $num_copied$09;$status$0$lcssa = $68;
      break L1;
     }
     $70 = (_tre_stack_push($stack,0)|0);
     $71 = ($70|0)==(0);
     if (!($71)) {
      $num_copied$0$lcssa = $num_copied$09;$status$0$lcssa = $70;
      break L1;
     }
     $72 = (($66) + 4|0);
     $73 = (_tre_stack_push($stack,$72)|0);
     $74 = ($73|0)==(0);
     if (!($74)) {
      $num_copied$0$lcssa = $num_copied$09;$status$0$lcssa = $73;
      break L1;
     }
     $75 = (_tre_stack_push($stack,(1))|0);
     $76 = ($75|0)==(0);
     if (!($76)) {
      $num_copied$0$lcssa = $num_copied$09;$status$0$lcssa = $75;
      break L1;
     }
     $77 = HEAP32[$47>>2]|0;
     $78 = (_tre_stack_push($stack,$77)|0);
     $79 = ($78|0)==(0);
     if (!($79)) {
      $num_copied$0$lcssa = $num_copied$09;$status$0$lcssa = $78;
      break L1;
     }
     $80 = (_tre_stack_push($stack,0)|0);
     $first_tag$0$be = $first_tag$08;$num_copied$0$be = $num_copied$09;$result$0$be = $66;$status$0$be = $80;
    } else if ((($18|0) == 0)) {
     $19 = (($17) + 4|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = (($20) + 8|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = HEAP32[$20>>2]|0;
     $24 = (($20) + 4|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = ($23|0)>(-1);
     $27 = ($23|0)==(-4);
     $or$cond1 = $26 | $27;
     if ($or$cond1) {
      $28 = HEAP32[$pos_add>>2]|0;
      $29 = (($28) + ($22))|0;
      $30 = (($num_copied$09) + 1)|0;
      $first_tag$1 = $first_tag$08;$max$0 = $25;$min$0 = $23;$num_copied$1 = $30;$pos$0 = $29;
     } else {
      $31 = ($23|0)==(-3);
      if ($31) {
       if ($4) {
        $32 = ($first_tag$08|0)==(0);
        $or$cond2 = $6 | $32;
        if ($or$cond2) {
         $first_tag$1 = $first_tag$08;$max$0 = $25;$min$0 = -3;$num_copied$1 = $num_copied$09;$pos$0 = $22;
        } else {
         $33 = (($tag_directions) + ($25<<2)|0);
         HEAP32[$33>>2] = 1;
         $first_tag$1 = 0;$max$0 = $25;$min$0 = -3;$num_copied$1 = $num_copied$09;$pos$0 = $22;
        }
       } else {
        $first_tag$1 = $first_tag$08;$max$0 = -1;$min$0 = -1;$num_copied$1 = $num_copied$09;$pos$0 = -1;
       }
      } else {
       $first_tag$1 = $first_tag$08;$max$0 = $25;$min$0 = $23;$num_copied$1 = $num_copied$09;$pos$0 = $22;
      }
     }
     $34 = (___tre_mem_alloc_impl($mem,0,0,1,32)|0);
     $35 = ($34|0)==(0|0);
     if ($35) {
      $$0$i4 = 0;
     } else {
      $36 = (___tre_mem_alloc_impl($mem,0,0,1,20)|0);
      $37 = (($34) + 4|0);
      HEAP32[$37>>2] = $36;
      $38 = ($36|0)==(0|0);
      if ($38) {
       $$0$i4 = 0;
      } else {
       HEAP32[$34>>2] = 0;
       $39 = (($34) + 8|0);
       HEAP32[$39>>2] = -1;
       $40 = (($34) + 12|0);
       HEAP32[$40>>2] = -1;
       HEAP32[$36>>2] = $min$0;
       $41 = (($36) + 4|0);
       HEAP32[$41>>2] = $max$0;
       $42 = (($36) + 8|0);
       HEAP32[$42>>2] = $pos$0;
       $$0$i4 = $34;
      }
     }
     HEAP32[$result$07>>2] = $$0$i4;
     $43 = ($$0$i4|0)==(0|0);
     $$status$0 = $43 ? 12 : 0;
     $44 = HEAP32[$max_pos>>2]|0;
     $45 = ($pos$0|0)>($44|0);
     if ($45) {
      HEAP32[$max_pos>>2] = $pos$0;
      $first_tag$0$be = $first_tag$1;$num_copied$0$be = $num_copied$1;$result$0$be = $result$07;$status$0$be = $$status$0;
     } else {
      $first_tag$0$be = $first_tag$1;$num_copied$0$be = $num_copied$1;$result$0$be = $result$07;$status$0$be = $$status$0;
     }
    } else if ((($18|0) == 1)) {
     $81 = (($17) + 4|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = HEAP32[$82>>2]|0;
     $84 = (($82) + 4|0);
     $85 = HEAP32[$84>>2]|0;
     $86 = (___tre_mem_alloc_impl($mem,0,0,1,32)|0);
     $87 = ($86|0)==(0|0);
     if ($87) {
      label = 29;
      break;
     }
     $88 = (___tre_mem_alloc_impl($mem,0,0,1,8)|0);
     $89 = (($86) + 4|0);
     HEAP32[$89>>2] = $88;
     $90 = ($88|0)==(0|0);
     if ($90) {
      label = 29;
      break;
     }
     HEAP32[$86>>2] = 1;
     $91 = (($86) + 8|0);
     HEAP32[$91>>2] = -1;
     $92 = (($86) + 12|0);
     HEAP32[$92>>2] = -1;
     HEAP32[$88>>2] = $83;
     $93 = HEAP32[$89>>2]|0;
     $94 = (($93) + 4|0);
     HEAP32[$94>>2] = $85;
     $95 = (($83) + 16|0);
     $96 = HEAP32[$95>>2]|0;
     $97 = (($85) + 16|0);
     $98 = HEAP32[$97>>2]|0;
     $99 = (($98) + ($96))|0;
     $100 = (($86) + 16|0);
     HEAP32[$100>>2] = $99;
     HEAP32[$result$07>>2] = $86;
     $101 = HEAP32[$89>>2]|0;
     HEAP32[$101>>2] = 0;
     $102 = (($101) + 4|0);
     HEAP32[$102>>2] = 0;
     $103 = HEAP32[$84>>2]|0;
     $104 = (_tre_stack_push($stack,$103)|0);
     $105 = ($104|0)==(0);
     if (!($105)) {
      $num_copied$0$lcssa = $num_copied$09;$status$0$lcssa = $104;
      break L1;
     }
     $106 = (_tre_stack_push($stack,0)|0);
     $107 = ($106|0)==(0);
     if (!($107)) {
      $num_copied$0$lcssa = $num_copied$09;$status$0$lcssa = $106;
      break L1;
     }
     $108 = (_tre_stack_push($stack,$102)|0);
     $109 = ($108|0)==(0);
     if (!($109)) {
      $num_copied$0$lcssa = $num_copied$09;$status$0$lcssa = $108;
      break L1;
     }
     $110 = (_tre_stack_push($stack,(1))|0);
     $111 = ($110|0)==(0);
     if (!($111)) {
      $num_copied$0$lcssa = $num_copied$09;$status$0$lcssa = $110;
      break L1;
     }
     $112 = HEAP32[$82>>2]|0;
     $113 = (_tre_stack_push($stack,$112)|0);
     $114 = ($113|0)==(0);
     if (!($114)) {
      $num_copied$0$lcssa = $num_copied$09;$status$0$lcssa = $113;
      break L1;
     }
     $115 = (_tre_stack_push($stack,0)|0);
     $first_tag$0$be = $first_tag$08;$num_copied$0$be = $num_copied$09;$result$0$be = $101;$status$0$be = $115;
    } else if ((($18|0) == 2)) {
     $116 = (($17) + 4|0);
     $117 = HEAP32[$116>>2]|0;
     $118 = HEAP32[$117>>2]|0;
     $119 = (_tre_stack_push($stack,$118)|0);
     $120 = ($119|0)==(0);
     if (!($120)) {
      $num_copied$0$lcssa = $num_copied$09;$status$0$lcssa = $119;
      break L1;
     }
     $121 = (_tre_stack_push($stack,0)|0);
     $122 = ($121|0)==(0);
     if (!($122)) {
      $num_copied$0$lcssa = $num_copied$09;$status$0$lcssa = $121;
      break L1;
     }
     $123 = HEAP32[$117>>2]|0;
     $124 = (($117) + 4|0);
     $125 = HEAP32[$124>>2]|0;
     $126 = (($117) + 8|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = (($117) + 12|0);
     $129 = HEAP8[$128>>0]|0;
     $130 = (___tre_mem_alloc_impl($mem,0,0,1,32)|0);
     $131 = ($130|0)==(0|0);
     if ($131) {
      label = 40;
      break;
     }
     $132 = (___tre_mem_alloc_impl($mem,0,0,1,16)|0);
     $133 = (($130) + 4|0);
     HEAP32[$133>>2] = $132;
     $134 = ($132|0)==(0|0);
     if ($134) {
      label = 40;
      break;
     }
     HEAP32[$130>>2] = 2;
     $135 = (($130) + 8|0);
     HEAP32[$135>>2] = -1;
     $136 = (($130) + 12|0);
     HEAP32[$136>>2] = -1;
     HEAP32[$132>>2] = $123;
     $137 = (($132) + 4|0);
     HEAP32[$137>>2] = $125;
     $138 = (($132) + 8|0);
     HEAP32[$138>>2] = $127;
     $139 = (($132) + 12|0);
     $140 = HEAP8[$139>>0]|0;
     $141 = $129 & 1;
     $142 = $140 & -2;
     $143 = $142 | $141;
     HEAP8[$139>>0] = $143;
     $144 = (($123) + 16|0);
     $145 = HEAP32[$144>>2]|0;
     $146 = (($130) + 16|0);
     HEAP32[$146>>2] = $145;
     HEAP32[$result$07>>2] = $130;
     $147 = HEAP32[$133>>2]|0;
     $num_copied$09$phi = $num_copied$09;$first_tag$08$phi = $first_tag$08;$result$07 = $147;$num_copied$09 = $num_copied$09$phi;$first_tag$08 = $first_tag$08$phi;
     continue;
    } else {
     $result$07$phi = $result$07;$num_copied$09$phi = $num_copied$09;$first_tag$08$phi = $first_tag$08;$result$07 = $result$07$phi;$num_copied$09 = $num_copied$09$phi;$first_tag$08 = $first_tag$08$phi;
     continue;
    }
    $148 = ($status$0$be|0)==(0);
    if ($148) {
     $first_tag$08 = $first_tag$0$be;$num_copied$09 = $num_copied$0$be;$result$07 = $result$0$be;
    } else {
     $num_copied$0$lcssa = $num_copied$0$be;$status$0$lcssa = $status$0$be;
     break L1;
    }
   }
   if ((label|0) == 20) {
    HEAP32[$result$07>>2] = 0;
    $num_copied$0$lcssa = $num_copied$09;$status$0$lcssa = 12;
    break;
   }
   else if ((label|0) == 29) {
    HEAP32[$result$07>>2] = 0;
    $num_copied$0$lcssa = $num_copied$09;$status$0$lcssa = 12;
    break;
   }
   else if ((label|0) == 40) {
    HEAP32[$result$07>>2] = 0;
    $num_copied$0$lcssa = $num_copied$09;$status$0$lcssa = 12;
    break;
   }
  } else {
   $num_copied$0$lcssa = 0;$status$0$lcssa = $0;
  }
 } while(0);
 $149 = HEAP32[$pos_add>>2]|0;
 $150 = (($149) + ($num_copied$0$lcssa))|0;
 HEAP32[$pos_add>>2] = $150;
 STACKTOP = sp;return ($status$0$lcssa|0);
}
function _tre_add_tag_left($mem,$node,$tag_id) {
 $mem = $mem|0;
 $node = $node|0;
 $tag_id = $tag_id|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___tre_mem_alloc_impl($mem,0,0,0,8)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 12;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (___tre_mem_alloc_impl($mem,0,0,1,32)|0);
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = (___tre_mem_alloc_impl($mem,0,0,1,20)|0);
  $5 = (($2) + 4|0);
  HEAP32[$5>>2] = $4;
  $6 = ($4|0)==(0|0);
  if (!($6)) {
   HEAP32[$2>>2] = 0;
   $7 = (($2) + 8|0);
   HEAP32[$7>>2] = -1;
   $8 = (($2) + 12|0);
   HEAP32[$8>>2] = -1;
   HEAP32[$4>>2] = -3;
   $9 = (($4) + 4|0);
   HEAP32[$9>>2] = $tag_id;
   $10 = (($4) + 8|0);
   HEAP32[$10>>2] = -1;
   HEAP32[$0>>2] = $2;
   $11 = (___tre_mem_alloc_impl($mem,0,0,0,32)|0);
   $12 = (($0) + 4|0);
   HEAP32[$12>>2] = $11;
   $13 = ($11|0)==(0|0);
   if ($13) {
    $$0 = 12;
    STACKTOP = sp;return ($$0|0);
   }
   $14 = (($node) + 4|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = (($11) + 4|0);
   HEAP32[$16>>2] = $15;
   $17 = HEAP32[$node>>2]|0;
   $18 = HEAP32[$12>>2]|0;
   HEAP32[$18>>2] = $17;
   $19 = HEAP32[$12>>2]|0;
   $20 = (($19) + 8|0);
   HEAP32[$20>>2] = -1;
   $21 = (($19) + 12|0);
   HEAP32[$21>>2] = -1;
   $22 = (($19) + 24|0);
   HEAP32[$22>>2] = 0;
   $23 = HEAP32[$12>>2]|0;
   $24 = (($23) + 28|0);
   HEAP32[$24>>2] = 0;
   $25 = HEAP32[$12>>2]|0;
   $26 = (($25) + 20|0);
   HEAP32[$26>>2] = 0;
   HEAP32[$14>>2] = $0;
   HEAP32[$node>>2] = 1;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 HEAP32[$0>>2] = 0;
 $$0 = 12;
 STACKTOP = sp;return ($$0|0);
}
function _tre_add_tag_right($mem,$node,$tag_id) {
 $mem = $mem|0;
 $node = $node|0;
 $tag_id = $tag_id|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___tre_mem_alloc_impl($mem,0,0,0,8)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 12;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (___tre_mem_alloc_impl($mem,0,0,1,32)|0);
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = (___tre_mem_alloc_impl($mem,0,0,1,20)|0);
  $5 = (($2) + 4|0);
  HEAP32[$5>>2] = $4;
  $6 = ($4|0)==(0|0);
  if (!($6)) {
   HEAP32[$2>>2] = 0;
   $8 = (($2) + 8|0);
   HEAP32[$8>>2] = -1;
   $9 = (($2) + 12|0);
   HEAP32[$9>>2] = -1;
   HEAP32[$4>>2] = -3;
   $10 = (($4) + 4|0);
   HEAP32[$10>>2] = $tag_id;
   $11 = (($4) + 8|0);
   HEAP32[$11>>2] = -1;
   $12 = (($0) + 4|0);
   HEAP32[$12>>2] = $2;
   $13 = (___tre_mem_alloc_impl($mem,0,0,0,32)|0);
   HEAP32[$0>>2] = $13;
   $14 = ($13|0)==(0|0);
   if ($14) {
    $$0 = 12;
    STACKTOP = sp;return ($$0|0);
   }
   $15 = (($node) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($13) + 4|0);
   HEAP32[$17>>2] = $16;
   $18 = HEAP32[$node>>2]|0;
   $19 = HEAP32[$0>>2]|0;
   HEAP32[$19>>2] = $18;
   $20 = HEAP32[$0>>2]|0;
   $21 = (($20) + 8|0);
   HEAP32[$21>>2] = -1;
   $22 = (($20) + 12|0);
   HEAP32[$22>>2] = -1;
   $23 = (($20) + 24|0);
   HEAP32[$23>>2] = 0;
   $24 = HEAP32[$0>>2]|0;
   $25 = (($24) + 28|0);
   HEAP32[$25>>2] = 0;
   $26 = HEAP32[$0>>2]|0;
   $27 = (($26) + 20|0);
   HEAP32[$27>>2] = 0;
   HEAP32[$15>>2] = $0;
   HEAP32[$node>>2] = 1;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $7 = (($0) + 4|0);
 HEAP32[$7>>2] = 0;
 $$0 = 12;
 STACKTOP = sp;return ($$0|0);
}
function _tre_compare_items($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$a>>2]|0;
 $1 = HEAP32[$b>>2]|0;
 $2 = (($0) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$3>>2]|0;
 $7 = HEAP32[$5>>2]|0;
 $8 = ($6|0)<($7|0);
 if ($8) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = ($6|0)>($7|0);
 $$ = $9&1;
 $$0 = $$;
 STACKTOP = sp;return ($$0|0);
}
function _regerror($e,$preg,$buf,$size) {
 $e = $e|0;
 $preg = $preg|0;
 $buf = $buf|0;
 $size = $size|0;
 var $$01 = 0, $$s$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $s$0$lcssa = 0, $s$02 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ($e|0)==(0);
 L1: do {
  if ($0) {
   $s$0$lcssa = 283768;
  } else {
   $$01 = $e;$s$02 = 283768;
   while(1) {
    $1 = HEAP8[$s$02>>0]|0;
    $2 = ($1<<24>>24)==(0);
    if ($2) {
     $s$0$lcssa = $s$02;
     break L1;
    }
    $3 = (($$01) + -1)|0;
    $4 = (_strlen(($s$02|0))|0);
    $5 = (($4) + 1)|0;
    $6 = (($s$02) + ($5)|0);
    $7 = ($3|0)==(0);
    if ($7) {
     $s$0$lcssa = $6;
     break;
    } else {
     $$01 = $3;$s$02 = $6;
    }
   }
  }
 } while(0);
 $8 = HEAP8[$s$0$lcssa>>0]|0;
 $9 = ($8<<24>>24)==(0);
 $10 = (($s$0$lcssa) + 1|0);
 $$s$0 = $9 ? $10 : $s$0$lcssa;
 HEAP32[$vararg_buffer>>2] = $$s$0;
 $11 = (_snprintf($buf,$size,284056,$vararg_buffer)|0);
 $12 = (($11) + 1)|0;
 STACKTOP = sp;return ($12|0);
}
function _regexec($preg,$string,$nmatch,$pmatch,$eflags) {
 $preg = $preg|0;
 $string = $string|0;
 $nmatch = $nmatch|0;
 $pmatch = $pmatch|0;
 $eflags = $eflags|0;
 var $$$i = 0, $$$i2 = 0, $$0 = 0, $$012$i$i = 0, $$012$i$i26 = 0, $$012$us$i$i = 0, $$012$us$i$i24 = 0, $$9$i = 0, $$not$i = 0, $$not178$i = 0, $$pn$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i15 = 0, $$pre$phi175$iZ2D = 0, $$pre$phiZ2D = 0, $$pre147$i = 0, $$pre148$i = 0, $$pre149$i = 0, $$pre154$i = 0;
 var $$pre155$i = 0, $$pre156$i = 0, $$pre157$i = 0, $$pre158$i = 0, $$pre171$i = 0, $$pre172$i = 0, $$pre173$i = 0, $$pre180$i = 0, $$pre181$i = 0, $$pre182$i = 0, $$pre184$i = 0, $$pre96 = 0, $$sum$i = 0, $$sum$i3 = 0, $$sum$pn$i = 0, $$sum1$i = 0, $$sum2$i = 0, $$sum3$i = 0, $$sum4$i = 0, $$sum5$i = 0;
 var $$sum6$i = 0, $$sum8$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0;
 var $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0;
 var $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0;
 var $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0;
 var $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0;
 var $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0;
 var $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0;
 var $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0;
 var $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0;
 var $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0;
 var $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0;
 var $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0;
 var $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0;
 var $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0;
 var $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0;
 var $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0;
 var $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0;
 var $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0;
 var $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0;
 var $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0;
 var $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0;
 var $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0;
 var $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0;
 var $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0;
 var $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0;
 var $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0;
 var $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0;
 var $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0;
 var $89 = 0, $890 = 0, $891 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge$i = 0, $brmerge$i11 = 0, $brmerge176$i = 0, $brmerge179$i = 0, $brmerge180$i = 0, $brmerge181$i = 0;
 var $brmerge187$i = 0, $brmerge189$i = 0, $brmerge190$i = 0, $exitcond = 0, $exitcond$i = 0, $exitcond141$i = 0, $exitcond143$i = 0, $exitcond145$i = 0, $exitcond77 = 0, $exitcond80 = 0, $i$01$i$i = 0, $i$01$i$i30 = 0, $i$0126$i = 0, $i$031$i = 0, $i$1123$i = 0, $i$339$i = 0, $i$454$i = 0, $i$564$i = 0, $i$677$i = 0, $i$773$i = 0;
 var $i1$036$i = 0, $i2$0145$i = 0, $i3$071$i = 0, $i6$065$i = 0, $match_eo$0$i = 0, $match_eo$0$i5 = 0, $match_eo$1$ph$i = 0, $match_eo$1$ph108$i = 0, $match_eo$1$ph113$i = 0, $match_eo$1$ph113$mux$i = 0, $match_eo$10$i = 0, $match_eo$10$i32 = 0, $match_eo$10$i35 = 0, $match_eo$10$lobit$i = 0, $match_eo$2$i = 0, $match_eo$2$i20 = 0, $match_eo$2$lobit$i = 0, $match_eo$3$i = 0, $match_eo$4$i = 0, $match_eo$5$lcssa$i = 0;
 var $match_eo$596$i = 0, $match_eo$6$lcssa$i = 0, $match_eo$682$i = 0, $match_eo$7$i = 0, $match_eo$9$i = 0, $new_match$0$i = 0, $new_match$1$ph110$i = 0, $new_match$1$ph115$i = 0, $new_match$1$ph115$mux$i = 0, $new_match$10$i = 0, $new_match$2$i = 0, $new_match$3$i = 0, $new_match$4$i = 0, $new_match$5$i = 0, $new_match$6$lcssa$i = 0, $new_match$697$i = 0, $new_match$7$lcssa$i = 0, $new_match$783$i = 0, $new_match$8$i = 0, $next_c$i = 0;
 var $next_c$i1 = 0, $next_state$091$i = 0, $next_state$1$i = 0, $next_tags$050$i = 0, $next_tags$1$i = 0, $next_tags$262$i = 0, $next_tags$3$i = 0, $next_tags$4$be$i = 0, $next_tags$4$lcssa$i = 0, $next_tags$4$ph$i = 0, $next_tags$4129$i = 0, $next_tags$585$i = 0, $next_tags$6$i = 0, $next_tags$7100$i = 0, $next_tags$8$i = 0, $num_tags$0$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i9 = 0, $or$cond10$i = 0;
 var $or$cond10$i10 = 0, $or$cond10$not$i = 0, $or$cond11$i = 0, $or$cond12$i = 0, $or$cond13$i = 0, $or$cond14$i = 0, $or$cond15$i = 0, $or$cond16$i = 0, $or$cond17$i = 0, $or$cond17$not$i = 0, $or$cond177$i = 0, $or$cond182$i = 0, $or$cond188$i = 0, $or$cond19$i = 0, $or$cond191$i = 0, $or$cond2$i = 0, $or$cond2$not$i = 0, $or$cond20$i = 0, $or$cond4$i = 0, $or$cond5$i = 0;
 var $or$cond6$i = 0, $or$cond7$i = 0, $or$cond8$i = 0, $or$cond8$not$i = 0, $pmatch$0$i = 0, $pmatch$1$i = 0, $pos$0$i = 0, $pos$0$lcssa$i = 0, $pos$0$ph$i = 0, $pos$0135$i = 0, $pos$1$i = 0, $pos_add_next$0$i = 0, $pos_add_next$0$i4 = 0, $pos_add_next$1$i = 0, $pos_add_next$1$i6 = 0, $pos_add_next$2$i = 0, $pos_add_next$2$lcssa$i = 0, $pos_add_next$2$ph$i = 0, $pos_add_next$2133$i = 0, $pos_add_next$3$i = 0;
 var $pos_add_next$5$i = 0, $pos_add_next$6$i = 0, $pos_start$0$i = 0, $prev_c$0$i = 0, $prev_c$0$i8 = 0, $reach$0$i = 0, $reach$1$i = 0, $reach_i$194$i = 0, $reach_next$0$i = 0, $reach_next$1$i = 0, $reach_next_i$0$i = 0, $reach_next_i$1$ph106$i = 0, $reach_next_i$1$ph111$i = 0, $reach_next_i$2$i = 0, $reach_next_i$3$lcssa$i = 0, $reach_next_i$359$i = 0, $reach_next_i$4$i = 0, $reach_next_i$5$lcssa$i = 0, $reach_next_i$595$i = 0, $reach_next_i$6$lcssa$i = 0;
 var $reach_next_i$680$i = 0, $reach_next_i$7$i = 0, $ret$0$i = 0, $stack$0$i = 0, $stack$151$i = 0, $stack$2$i = 0, $stack$3$i = 0, $stack$4$lcssa$i = 0, $stack$4$ph$i = 0, $stack$4131$i = 0, $stack$586$i = 0, $stack$6$i = 0, $stack$7$i = 0, $stack$8$i = 0, $state$049$i = 0, $state$1$i = 0, $state$2$ph$i = 0, $state$2128$i = 0, $states_seen$0$ph$i = 0, $states_seen$1$i = 0;
 var $status$0 = 0, $status$099 = 0, $str_byte$0$i = 0, $str_byte$0$i7 = 0, $str_byte$1$ph$i = 0, $str_byte$1136$i = 0, $str_byte$2$i = 0, $tag_i$035$i = 0, $tag_i$168$i = 0, $tags$0 = 0, $tags$0$i = 0, $tags$1$i = 0, $tmp$041$i = 0, $tmp$i = 0, $tmp$i22 = 0, $tmp1$i = 0, $tmp5$076$i56 = 0, $tmp7$i = 0, $tmp_buf$0127$i = 0, $tmp_tags$0$i = 0;
 var $tmp_tags$1$lcssa$i = 0, $tmp_tags$198$i = 0, $tmp_tags$2$lcssa$i = 0, $tmp_tags$284$i = 0, $tmp_tags$3$i = 0, $trans_i$0$ph117$i = 0, $trans_i$048$i = 0, $trans_i$053$i = 0, $trans_i$185$i = 0, $trans_i$188$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $next_c$i1 = sp + 4|0;
 $next_c$i = sp;
 $0 = (($preg) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(1);
 $5 = ($nmatch|0)==(0);
 $or$cond = $4 | $5;
 if ($or$cond) {
  $tags$0 = 0;
 } else {
  $6 = $3 << 2;
  $7 = (_malloc($6)|0);
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$0 = 12;
   STACKTOP = sp;return ($$0|0);
  } else {
   $tags$0 = $7;
  }
 }
 $9 = (($1) + 60|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0);
 L5: do {
  if ($11) {
   HEAP32[$next_c$i1>>2] = 0;
   $475 = $eflags & 1;
   $476 = $eflags & 2;
   $477 = (($1) + 56|0);
   $478 = HEAP32[$477>>2]|0;
   $479 = $478 & 4;
   $480 = ($tags$0|0)==(0|0);
   if ($480) {
    $num_tags$0$i = 0;
   } else {
    $481 = HEAP32[$2>>2]|0;
    $num_tags$0$i = $481;
   }
   $482 = $num_tags$0$i << 2;
   $483 = (($1) + 52|0);
   $484 = HEAP32[$483>>2]|0;
   $485 = $484 << 3;
   $486 = (($485) + 8)|0;
   $487 = Math_imul($482, $484)|0;
   $488 = (($486) + ($487))|0;
   $489 = $488 << 1;
   $490 = (($482) + 12)|0;
   $491 = (($490) + ($485))|0;
   $492 = (($491) + ($489))|0;
   $493 = (_malloc($492)|0);
   $494 = ($493|0)==(0|0);
   if ($494) {
    $status$099 = 12;
   } else {
    _memset(($493|0),0,($492|0))|0;
    $495 = (($493) + ($482)|0);
    $496 = $495;
    $497 = $496 & 3;
    $498 = ($497|0)==(0);
    $499 = (4 - ($497))|0;
    $$$i2 = $498 ? 0 : $499;
    $$sum$i3 = (($$$i2) + ($482))|0;
    $500 = (($493) + ($$sum$i3)|0);
    $$sum1$i = (($$sum$i3) + ($486))|0;
    $501 = (($493) + ($$sum1$i)|0);
    $502 = $501;
    $503 = $502 & 3;
    $504 = ($503|0)==(0);
    $505 = (4 - ($503))|0;
    $506 = $504 ? 0 : $505;
    $$sum2$i = (($506) + ($$sum1$i))|0;
    $507 = (($493) + ($$sum2$i)|0);
    $$sum3$i = (($$sum2$i) + ($486))|0;
    $508 = (($493) + ($$sum3$i)|0);
    $509 = $508;
    $510 = $509 & 3;
    $511 = ($510|0)==(0);
    $512 = (4 - ($510))|0;
    $$9$i = $511 ? 0 : $512;
    $$sum4$i = (($$9$i) + ($$sum3$i))|0;
    $513 = (($493) + ($$sum4$i)|0);
    $$sum5$i = (($$sum4$i) + ($485))|0;
    $514 = (($493) + ($$sum5$i)|0);
    $515 = $514;
    $516 = $515 & 3;
    $517 = ($484|0)>(0);
    if ($517) {
     $518 = (4 - ($516))|0;
     $519 = ($516|0)==(0);
     $520 = $519 ? 0 : $518;
     $$sum6$i = (($520) + ($$sum5$i))|0;
     $521 = (($493) + ($$sum6$i)|0);
     $$sum8$i = $num_tags$0$i << 3;
     $i$0126$i = 0;$tmp_buf$0127$i = $521;
     while(1) {
      $522 = ((($507) + ($i$0126$i<<3)|0) + 4|0);
      HEAP32[$522>>2] = $tmp_buf$0127$i;
      $523 = (($tmp_buf$0127$i) + ($482)|0);
      $524 = ((($500) + ($i$0126$i<<3)|0) + 4|0);
      HEAP32[$524>>2] = $523;
      $525 = (($tmp_buf$0127$i) + ($$sum8$i)|0);
      $526 = (($i$0126$i) + 1)|0;
      $exitcond77 = ($526|0)==($484|0);
      if ($exitcond77) {
       $i$1123$i = 0;
       break;
      } else {
       $i$0126$i = $526;$tmp_buf$0127$i = $525;
      }
     }
     while(1) {
      $527 = (($513) + ($i$1123$i<<3)|0);
      HEAP32[$527>>2] = -1;
      $528 = (($i$1123$i) + 1)|0;
      $exitcond = ($528|0)==($484|0);
      if ($exitcond) {
       break;
      } else {
       $i$1123$i = $528;
      }
     }
    }
    $529 = (_mbtowc($next_c$i1,$string,4)|0);
    $530 = ($529|0)<(1);
    if ($530) {
     $531 = ($529|0)<(0);
     if ($531) {
      $status$099 = 1;
      break;
     }
     $532 = (($529) + 1)|0;
     $pos_add_next$0$i4 = $532;
    } else {
     $pos_add_next$0$i4 = $529;
    }
    $533 = (($string) + ($pos_add_next$0$i4)|0);
    $534 = (($1) + 8|0);
    $535 = ($479|0)==(0);
    $536 = ($475|0)==(0);
    $537 = ($num_tags$0$i|0)>(0);
    $538 = (($1) + 12|0);
    $539 = (($1) + 44|0);
    $540 = (($1) + 32|0);
    $541 = (($1) + 36|0);
    $542 = ($num_tags$0$i|0)==(0);
    $$not178$i = $537 ^ 1;
    $match_eo$0$i5 = -1;$new_match$0$i = 0;$pos$0$i = 0;$pos_add_next$1$i6 = $pos_add_next$0$i4;$prev_c$0$i8 = 0;$reach$0$i = $507;$reach_next$0$i = $500;$reach_next_i$0$i = $500;$str_byte$0$i7 = $533;$tmp_tags$0$i = $493;
    while(1) {
     $543 = ($match_eo$0$i5|0)<(0);
     if ($543) {
      $544 = HEAP32[$534>>2]|0;
      $545 = (($544) + 8|0);
      $546 = HEAP32[$545>>2]|0;
      $547 = ($546|0)==(0|0);
      L314: do {
       if ($547) {
        $match_eo$1$ph108$i = $match_eo$0$i5;$new_match$1$ph110$i = $new_match$0$i;$reach_next_i$1$ph106$i = $reach_next_i$0$i;
       } else {
        $548 = ($pos$0$i|0)==(0);
        $549 = ($prev_c$0$i8|0)==(95);
        $550 = ($pos$0$i|0)<(1);
        $or$cond$i9 = $550 & $536;
        $551 = ($prev_c$0$i8|0)!=(10);
        $or$cond10$i10 = $551 | $535;
        $or$cond10$not$i = $or$cond10$i10 ^ 1;
        $891 = $545;$match_eo$1$ph113$i = $match_eo$0$i5;$new_match$1$ph115$i = $new_match$0$i;$reach_next_i$1$ph111$i = $reach_next_i$0$i;$trans_i$0$ph117$i = $544;
        while(1) {
         $615 = $891;$trans_i$048$i = $trans_i$0$ph117$i;
         L318: while(1) {
          $552 = (($trans_i$048$i) + 12|0);
          $553 = HEAP32[$552>>2]|0;
          $554 = (($513) + ($553<<3)|0);
          $555 = HEAP32[$554>>2]|0;
          $556 = ($555|0)<($pos$0$i|0);
          if (!($556)) {
           $match_eo$3$i = $match_eo$1$ph113$i;$new_match$3$i = $new_match$1$ph115$i;$reach_next_i$2$i = $reach_next_i$1$ph111$i;
           break;
          }
          $557 = (($trans_i$048$i) + 20|0);
          $558 = HEAP32[$557>>2]|0;
          $559 = ($558|0)==(0);
          if ($559) {
           label = 256;
           break;
          }
          $560 = $558 & 1;
          $561 = ($560|0)==(0);
          $brmerge$i11 = $561 | $or$cond$i9;
          $brmerge176$i = $brmerge$i11 | $or$cond10$not$i;
          L322: do {
           if ($brmerge176$i) {
            $562 = $558 & 2;
            $563 = ($562|0)==(0);
            if (!($563)) {
             $564 = HEAP32[$next_c$i1>>2]|0;
             $565 = $564 | $476;
             $566 = ($565|0)!=(0);
             $567 = ($564|0)!=(10);
             $or$cond12$i = $567 | $535;
             $or$cond177$i = $566 & $or$cond12$i;
             if ($or$cond177$i) {
              break;
             }
            }
            $568 = $558 & 16;
            $569 = ($568|0)==(0);
            do {
             if (!($569)) {
              if ($549) {
               break L322;
              }
              $570 = (_iswalnum($prev_c$0$i8)|0);
              $571 = ($570|0)==(0);
              if (!($571)) {
               break L322;
              }
              $572 = HEAP32[$next_c$i1>>2]|0;
              $573 = ($572|0)==(95);
              if ($573) {
               break;
              }
              $574 = (_iswalnum($572)|0);
              $575 = ($574|0)==(0);
              if ($575) {
               break L322;
              }
             }
            } while(0);
            $576 = HEAP32[$557>>2]|0;
            $577 = $576 & 32;
            $578 = ($577|0)==(0);
            if ($578) {
             $586 = $576;
            } else {
             if (!($549)) {
              $579 = (_iswalnum($prev_c$0$i8)|0);
              $580 = ($579|0)==(0);
              if ($580) {
               break;
              }
             }
             $581 = HEAP32[$next_c$i1>>2]|0;
             $582 = ($581|0)==(95);
             if ($582) {
              break;
             }
             $583 = (_iswalnum($581)|0);
             $584 = ($583|0)==(0);
             if (!($584)) {
              break;
             }
             $$pre171$i = HEAP32[$557>>2]|0;
             $586 = $$pre171$i;
            }
            $585 = $586 & 64;
            $587 = ($585|0)==(0);
            $or$cond13$i = $587 | $548;
            do {
             if (!($or$cond13$i)) {
              $588 = HEAP32[$next_c$i1>>2]|0;
              $589 = ($588|0)==(0);
              if ($589) {
               break;
              }
              if ($549) {
               $593 = $588;$596 = 1;
              } else {
               $590 = (_iswalnum($prev_c$0$i8)|0);
               $591 = ($590|0)!=(0);
               $$pre147$i = HEAP32[$next_c$i1>>2]|0;
               $593 = $$pre147$i;$596 = $591;
              }
              $592 = ($593|0)==(95);
              if ($592) {
               if ($596) {
                break L322;
               } else {
                break;
               }
              } else {
               $594 = (_iswalnum($593)|0);
               $595 = ($594|0)!=(0);
               $tmp7$i = $596 ^ $595;
               if ($tmp7$i) {
                break;
               } else {
                break L322;
               }
              }
             }
            } while(0);
            $597 = HEAP32[$557>>2]|0;
            $598 = $597 & 128;
            $599 = ($598|0)==(0);
            if ($599) {
             label = 256;
             break L318;
            }
            if ($548) {
             break;
            }
            $600 = HEAP32[$next_c$i1>>2]|0;
            $601 = ($600|0)==(0);
            if ($601) {
             break;
            }
            if ($549) {
             $605 = $600;$609 = 1;
            } else {
             $602 = (_iswalnum($prev_c$0$i8)|0);
             $603 = ($602|0)!=(0);
             $$pre$i15 = HEAP32[$next_c$i1>>2]|0;
             $605 = $$pre$i15;$609 = $603;
            }
            $604 = ($605|0)==(95);
            if ($604) {
             if ($609) {
              label = 256;
              break L318;
             } else {
              break;
             }
            } else {
             $606 = (_iswalnum($605)|0);
             $607 = ($606|0)!=(0);
             $608 = $609 ^ $607;
             if ($608) {
              break;
             } else {
              label = 256;
              break L318;
             }
            }
           }
          } while(0);
          $610 = (($trans_i$048$i) + 32|0);
          $611 = (($trans_i$048$i) + 40|0);
          $612 = HEAP32[$611>>2]|0;
          $613 = ($612|0)==(0|0);
          if ($613) {
           $match_eo$1$ph108$i = $match_eo$1$ph113$i;$new_match$1$ph110$i = $new_match$1$ph115$i;$reach_next_i$1$ph106$i = $reach_next_i$1$ph111$i;
           break L314;
          } else {
           $615 = $611;$trans_i$048$i = $610;
          }
         }
         if ((label|0) == 256) {
          label = 0;
          $614 = HEAP32[$615>>2]|0;
          HEAP32[$reach_next_i$1$ph111$i>>2] = $614;
          if ($537) {
           $616 = (($reach_next_i$1$ph111$i) + 4|0);
           $617 = HEAP32[$616>>2]|0;
           _memset(($617|0),-1,($482|0))|0;
          }
          $618 = (($trans_i$048$i) + 16|0);
          $619 = HEAP32[$618>>2]|0;
          $620 = ($619|0)==(0|0);
          if (!($620)) {
           $621 = HEAP32[$619>>2]|0;
           $622 = ($621|0)>(-1);
           if ($622) {
            $623 = (($reach_next_i$1$ph111$i) + 4|0);
            $625 = $621;$tag_i$035$i = $619;
            while(1) {
             $624 = ($625|0)<($num_tags$0$i|0);
             if ($624) {
              $626 = HEAP32[$623>>2]|0;
              $627 = (($626) + ($625<<2)|0);
              HEAP32[$627>>2] = $pos$0$i;
             }
             $628 = (($tag_i$035$i) + 4|0);
             $629 = HEAP32[$628>>2]|0;
             $630 = ($629|0)>(-1);
             if ($630) {
              $625 = $629;$tag_i$035$i = $628;
             } else {
              break;
             }
            }
           }
          }
          $631 = HEAP32[$reach_next_i$1$ph111$i>>2]|0;
          $632 = HEAP32[$538>>2]|0;
          $$not$i = ($631|0)!=($632|0);
          $brmerge179$i = $$not$i | $$not178$i;
          if ($brmerge179$i) {
           $new_match$1$ph115$mux$i = $$not$i ? $new_match$1$ph115$i : 1;
           $match_eo$1$ph113$mux$i = $$not$i ? $match_eo$1$ph113$i : $pos$0$i;
           $$pre96 = (($reach_next_i$1$ph111$i) + 4|0);
           $$pre$phiZ2D = $$pre96;$match_eo$2$i20 = $match_eo$1$ph113$mux$i;$new_match$2$i = $new_match$1$ph115$mux$i;
          } else {
           $633 = (($reach_next_i$1$ph111$i) + 4|0);
           $634 = HEAP32[$633>>2]|0;
           $i$339$i = 0;
           while(1) {
            $635 = (($634) + ($i$339$i<<2)|0);
            $636 = HEAP32[$635>>2]|0;
            $637 = (($tags$0) + ($i$339$i<<2)|0);
            HEAP32[$637>>2] = $636;
            $638 = (($i$339$i) + 1)|0;
            $exitcond$i = ($638|0)==($num_tags$0$i|0);
            if ($exitcond$i) {
             $$pre$phiZ2D = $633;$match_eo$2$i20 = $pos$0$i;$new_match$2$i = 1;
             break;
            } else {
             $i$339$i = $638;
            }
           }
          }
          $639 = HEAP32[$552>>2]|0;
          $640 = (($513) + ($639<<3)|0);
          HEAP32[$640>>2] = $pos$0$i;
          $641 = HEAP32[$552>>2]|0;
          $642 = ((($513) + ($641<<3)|0) + 4|0);
          HEAP32[$642>>2] = $$pre$phiZ2D;
          $643 = (($reach_next_i$1$ph111$i) + 8|0);
          $match_eo$3$i = $match_eo$2$i20;$new_match$3$i = $new_match$2$i;$reach_next_i$2$i = $643;
         }
         $644 = (($trans_i$048$i) + 32|0);
         $645 = (($trans_i$048$i) + 40|0);
         $646 = HEAP32[$645>>2]|0;
         $647 = ($646|0)==(0|0);
         if ($647) {
          $match_eo$1$ph108$i = $match_eo$3$i;$new_match$1$ph110$i = $new_match$3$i;$reach_next_i$1$ph106$i = $reach_next_i$2$i;
          break;
         } else {
          $891 = $645;$match_eo$1$ph113$i = $match_eo$3$i;$new_match$1$ph115$i = $new_match$3$i;$reach_next_i$1$ph111$i = $reach_next_i$2$i;$trans_i$0$ph117$i = $644;
         }
        }
       }
      } while(0);
      HEAP32[$reach_next_i$1$ph106$i>>2] = 0;
      $match_eo$4$i = $match_eo$1$ph108$i;$new_match$4$i = $new_match$1$ph110$i;
     } else {
      $648 = ($reach_next_i$0$i|0)==($reach_next$0$i|0);
      $or$cond14$i = $542 | $648;
      if ($or$cond14$i) {
       $match_eo$10$i = $match_eo$0$i5;
       break;
      } else {
       $match_eo$4$i = $match_eo$0$i5;$new_match$4$i = $new_match$0$i;
      }
     }
     $649 = HEAP32[$next_c$i1>>2]|0;
     $650 = ($649|0)==(0);
     if ($650) {
      $match_eo$10$i = $match_eo$4$i;
      break;
     }
     $651 = (($pos$0$i) + ($pos_add_next$1$i6))|0;
     $652 = (_mbtowc($next_c$i1,$str_byte$0$i7,4)|0);
     $653 = ($652|0)<(1);
     if ($653) {
      $654 = ($652|0)<(0);
      if ($654) {
       $status$099 = 1;
       break L5;
      }
      $655 = (($652) + 1)|0;
      $pos_add_next$2$i = $655;
     } else {
      $pos_add_next$2$i = $652;
     }
     $656 = (($str_byte$0$i7) + ($pos_add_next$2$i)|0);
     $657 = HEAP32[$539>>2]|0;
     $658 = ($657|0)==(0);
     $659 = ($new_match$4$i|0)==(0);
     $or$cond15$i = $658 | $659;
     if ($or$cond15$i) {
      $new_match$5$i = $new_match$4$i;$reach$1$i = $reach_next$0$i;$reach_next$1$i = $reach$0$i;
     } else {
      $660 = HEAP32[$reach_next$0$i>>2]|0;
      $661 = ($660|0)==(0|0);
      if ($661) {
       $reach_next_i$3$lcssa$i = $reach$0$i;
      } else {
       $666 = $reach_next$0$i;$687 = $660;$reach_next_i$359$i = $reach$0$i;
       while(1) {
        $662 = HEAP32[$541>>2]|0;
        $663 = HEAP32[$662>>2]|0;
        $664 = ($663|0)>(-1);
        $665 = (($666) + 4|0);
        L394: do {
         if ($664) {
          $671 = $663;$i$454$i = 0;
          while(1) {
           $667 = $i$454$i | 1;
           $668 = (($662) + ($667<<2)|0);
           $669 = HEAP32[$668>>2]|0;
           $670 = ($671|0)<($num_tags$0$i|0);
           if (!($670)) {
            $reach_next_i$4$i = $reach_next_i$359$i;
            break L394;
           }
           $672 = HEAP32[$665>>2]|0;
           $673 = (($672) + ($669<<2)|0);
           $674 = HEAP32[$673>>2]|0;
           $675 = (($tags$0) + ($669<<2)|0);
           $676 = HEAP32[$675>>2]|0;
           $677 = ($674|0)==($676|0);
           if ($677) {
            $678 = (($672) + ($671<<2)|0);
            $679 = HEAP32[$678>>2]|0;
            $680 = (($tags$0) + ($671<<2)|0);
            $681 = HEAP32[$680>>2]|0;
            $682 = ($679|0)<($681|0);
            if ($682) {
             $reach_next_i$4$i = $reach_next_i$359$i;
             break L394;
            }
           }
           $683 = (($i$454$i) + 2)|0;
           $684 = (($662) + ($683<<2)|0);
           $685 = HEAP32[$684>>2]|0;
           $686 = ($685|0)>(-1);
           if ($686) {
            $671 = $685;$i$454$i = $683;
           } else {
            label = 283;
            break;
           }
          }
         } else {
          label = 283;
         }
        } while(0);
        if ((label|0) == 283) {
         label = 0;
         HEAP32[$reach_next_i$359$i>>2] = $687;
         $688 = (($reach_next_i$359$i) + 4|0);
         $689 = HEAP32[$688>>2]|0;
         $$pre$phi175$iZ2D = HEAP32[$665>>2]|0;
         HEAP32[$688>>2] = $$pre$phi175$iZ2D;
         HEAP32[$665>>2] = $689;
         $690 = (($reach_next_i$359$i) + 8|0);
         $reach_next_i$4$i = $690;
        }
        $691 = (($666) + 8|0);
        $692 = HEAP32[$691>>2]|0;
        $693 = ($692|0)==(0|0);
        if ($693) {
         $reach_next_i$3$lcssa$i = $reach_next_i$4$i;
         break;
        } else {
         $666 = $691;$687 = $692;$reach_next_i$359$i = $reach_next_i$4$i;
        }
       }
      }
      HEAP32[$reach_next_i$3$lcssa$i>>2] = 0;
      $new_match$5$i = 0;$reach$1$i = $reach$0$i;$reach_next$1$i = $reach_next$0$i;
     }
     $694 = HEAP32[$reach$1$i>>2]|0;
     $695 = ($694|0)==(0|0);
     if ($695) {
      $match_eo$5$lcssa$i = $match_eo$4$i;$new_match$6$lcssa$i = $new_match$5$i;$reach_next_i$5$lcssa$i = $reach_next$1$i;$tmp_tags$1$lcssa$i = $tmp_tags$0$i;
     } else {
      $696 = ($651|0)==(0);
      $697 = ($649|0)==(95);
      $698 = ($651|0)<(1);
      $or$cond16$i = $698 & $536;
      $699 = ($649|0)!=(10);
      $or$cond17$i = $699 | $535;
      $or$cond17$not$i = $or$cond17$i ^ 1;
      $701 = $694;$match_eo$596$i = $match_eo$4$i;$new_match$697$i = $new_match$5$i;$reach_i$194$i = $reach$1$i;$reach_next_i$595$i = $reach_next$1$i;$tmp_tags$198$i = $tmp_tags$0$i;
      while(1) {
       $700 = (($701) + 8|0);
       $702 = HEAP32[$700>>2]|0;
       $703 = ($702|0)==(0|0);
       if ($703) {
        $match_eo$6$lcssa$i = $match_eo$596$i;$new_match$7$lcssa$i = $new_match$697$i;$reach_next_i$6$lcssa$i = $reach_next_i$595$i;$tmp_tags$2$lcssa$i = $tmp_tags$198$i;
       } else {
        $704 = (($reach_i$194$i) + 4|0);
        $837 = $700;$match_eo$682$i = $match_eo$596$i;$new_match$783$i = $new_match$697$i;$reach_next_i$680$i = $reach_next_i$595$i;$tmp_tags$284$i = $tmp_tags$198$i;$trans_i$185$i = $701;
        while(1) {
         $705 = HEAP32[$trans_i$185$i>>2]|0;
         $706 = ($705>>>0)>($649>>>0);
         L414: do {
          if ($706) {
           $match_eo$9$i = $match_eo$682$i;$new_match$10$i = $new_match$783$i;$reach_next_i$7$i = $reach_next_i$680$i;$tmp_tags$3$i = $tmp_tags$284$i;
          } else {
           $707 = (($trans_i$185$i) + 4|0);
           $708 = HEAP32[$707>>2]|0;
           $709 = ($708>>>0)<($649>>>0);
           if ($709) {
            $match_eo$9$i = $match_eo$682$i;$new_match$10$i = $new_match$783$i;$reach_next_i$7$i = $reach_next_i$680$i;$tmp_tags$3$i = $tmp_tags$284$i;
            break;
           }
           $710 = (($trans_i$185$i) + 20|0);
           $711 = HEAP32[$710>>2]|0;
           $712 = ($711|0)==(0);
           L417: do {
            if (!($712)) {
             $713 = $711 & 1;
             $714 = ($713|0)==(0);
             $brmerge180$i = $714 | $or$cond16$i;
             $brmerge181$i = $brmerge180$i | $or$cond17$not$i;
             if (!($brmerge181$i)) {
              $match_eo$9$i = $match_eo$682$i;$new_match$10$i = $new_match$783$i;$reach_next_i$7$i = $reach_next_i$680$i;$tmp_tags$3$i = $tmp_tags$284$i;
              break L414;
             }
             $715 = $711 & 2;
             $716 = ($715|0)==(0);
             if (!($716)) {
              $717 = HEAP32[$next_c$i1>>2]|0;
              $718 = $717 | $476;
              $719 = ($718|0)!=(0);
              $720 = ($717|0)!=(10);
              $or$cond19$i = $720 | $535;
              $or$cond182$i = $719 & $or$cond19$i;
              if ($or$cond182$i) {
               $match_eo$9$i = $match_eo$682$i;$new_match$10$i = $new_match$783$i;$reach_next_i$7$i = $reach_next_i$680$i;$tmp_tags$3$i = $tmp_tags$284$i;
               break L414;
              }
             }
             $721 = $711 & 16;
             $722 = ($721|0)==(0);
             do {
              if (!($722)) {
               if ($697) {
                $match_eo$9$i = $match_eo$682$i;$new_match$10$i = $new_match$783$i;$reach_next_i$7$i = $reach_next_i$680$i;$tmp_tags$3$i = $tmp_tags$284$i;
                break L414;
               }
               $723 = (_iswalnum($649)|0);
               $724 = ($723|0)==(0);
               if (!($724)) {
                $match_eo$9$i = $match_eo$682$i;$new_match$10$i = $new_match$783$i;$reach_next_i$7$i = $reach_next_i$680$i;$tmp_tags$3$i = $tmp_tags$284$i;
                break L414;
               }
               $725 = HEAP32[$next_c$i1>>2]|0;
               $726 = ($725|0)==(95);
               if ($726) {
                break;
               }
               $727 = (_iswalnum($725)|0);
               $728 = ($727|0)==(0);
               if ($728) {
                $match_eo$9$i = $match_eo$682$i;$new_match$10$i = $new_match$783$i;$reach_next_i$7$i = $reach_next_i$680$i;$tmp_tags$3$i = $tmp_tags$284$i;
                break L414;
               }
              }
             } while(0);
             $729 = HEAP32[$710>>2]|0;
             $730 = $729 & 32;
             $731 = ($730|0)==(0);
             if ($731) {
              $739 = $729;
             } else {
              if (!($697)) {
               $732 = (_iswalnum($649)|0);
               $733 = ($732|0)==(0);
               if ($733) {
                $match_eo$9$i = $match_eo$682$i;$new_match$10$i = $new_match$783$i;$reach_next_i$7$i = $reach_next_i$680$i;$tmp_tags$3$i = $tmp_tags$284$i;
                break L414;
               }
              }
              $734 = HEAP32[$next_c$i1>>2]|0;
              $735 = ($734|0)==(95);
              if ($735) {
               $match_eo$9$i = $match_eo$682$i;$new_match$10$i = $new_match$783$i;$reach_next_i$7$i = $reach_next_i$680$i;$tmp_tags$3$i = $tmp_tags$284$i;
               break L414;
              }
              $736 = (_iswalnum($734)|0);
              $737 = ($736|0)==(0);
              if (!($737)) {
               $match_eo$9$i = $match_eo$682$i;$new_match$10$i = $new_match$783$i;$reach_next_i$7$i = $reach_next_i$680$i;$tmp_tags$3$i = $tmp_tags$284$i;
               break L414;
              }
              $$pre172$i = HEAP32[$710>>2]|0;
              $739 = $$pre172$i;
             }
             $738 = $739 & 64;
             $740 = ($738|0)==(0);
             $or$cond20$i = $740 | $696;
             do {
              if (!($or$cond20$i)) {
               $741 = HEAP32[$next_c$i1>>2]|0;
               $742 = ($741|0)==(0);
               if ($742) {
                break;
               }
               if ($697) {
                $746 = $741;$749 = 1;
               } else {
                $743 = (_iswalnum($649)|0);
                $744 = ($743|0)!=(0);
                $$pre149$i = HEAP32[$next_c$i1>>2]|0;
                $746 = $$pre149$i;$749 = $744;
               }
               $745 = ($746|0)==(95);
               if ($745) {
                if ($749) {
                 $match_eo$9$i = $match_eo$682$i;$new_match$10$i = $new_match$783$i;$reach_next_i$7$i = $reach_next_i$680$i;$tmp_tags$3$i = $tmp_tags$284$i;
                 break L414;
                } else {
                 break;
                }
               } else {
                $747 = (_iswalnum($746)|0);
                $748 = ($747|0)!=(0);
                $tmp$i22 = $749 ^ $748;
                if ($tmp$i22) {
                 break;
                } else {
                 $match_eo$9$i = $match_eo$682$i;$new_match$10$i = $new_match$783$i;$reach_next_i$7$i = $reach_next_i$680$i;$tmp_tags$3$i = $tmp_tags$284$i;
                 break L414;
                }
               }
              }
             } while(0);
             $750 = HEAP32[$710>>2]|0;
             $751 = $750 & 128;
             $752 = ($751|0)==(0);
             do {
              if (!($752)) {
               if ($696) {
                $match_eo$9$i = $match_eo$682$i;$new_match$10$i = $new_match$783$i;$reach_next_i$7$i = $reach_next_i$680$i;$tmp_tags$3$i = $tmp_tags$284$i;
                break L414;
               }
               $753 = HEAP32[$next_c$i1>>2]|0;
               $754 = ($753|0)==(0);
               if ($754) {
                $match_eo$9$i = $match_eo$682$i;$new_match$10$i = $new_match$783$i;$reach_next_i$7$i = $reach_next_i$680$i;$tmp_tags$3$i = $tmp_tags$284$i;
                break L414;
               }
               if ($697) {
                $758 = $753;$762 = 1;
               } else {
                $755 = (_iswalnum($649)|0);
                $756 = ($755|0)!=(0);
                $$pre148$i = HEAP32[$next_c$i1>>2]|0;
                $758 = $$pre148$i;$762 = $756;
               }
               $757 = ($758|0)==(95);
               if ($757) {
                if ($762) {
                 break;
                } else {
                 $match_eo$9$i = $match_eo$682$i;$new_match$10$i = $new_match$783$i;$reach_next_i$7$i = $reach_next_i$680$i;$tmp_tags$3$i = $tmp_tags$284$i;
                 break L414;
                }
               } else {
                $759 = (_iswalnum($758)|0);
                $760 = ($759|0)!=(0);
                $761 = $762 ^ $760;
                if ($761) {
                 $match_eo$9$i = $match_eo$682$i;$new_match$10$i = $new_match$783$i;$reach_next_i$7$i = $reach_next_i$680$i;$tmp_tags$3$i = $tmp_tags$284$i;
                 break L414;
                } else {
                 break;
                }
               }
              }
             } while(0);
             $763 = HEAP32[$710>>2]|0;
             $764 = $763 & 4;
             $765 = ($764|0)==(0);
             do {
              if ($765) {
               $774 = $763;
              } else {
               $766 = HEAP32[$477>>2]|0;
               $767 = $766 & 2;
               $768 = ($767|0)==(0);
               if (!($768)) {
                $774 = $763;
                break;
               }
               $769 = (($trans_i$185$i) + 24|0);
               $770 = HEAP32[$769>>2]|0;
               $771 = (_iswctype($649,$770)|0);
               $772 = ($771|0)==(0);
               if ($772) {
                $match_eo$9$i = $match_eo$682$i;$new_match$10$i = $new_match$783$i;$reach_next_i$7$i = $reach_next_i$680$i;$tmp_tags$3$i = $tmp_tags$284$i;
                break L414;
               }
               $$pre173$i = HEAP32[$710>>2]|0;
               $774 = $$pre173$i;
              }
             } while(0);
             $773 = $774 & 4;
             $775 = ($773|0)==(0);
             do {
              if (!($775)) {
               $776 = HEAP32[$477>>2]|0;
               $777 = $776 & 2;
               $778 = ($777|0)==(0);
               if ($778) {
                break;
               }
               $779 = (_towlower($649)|0);
               $780 = (($trans_i$185$i) + 24|0);
               $781 = HEAP32[$780>>2]|0;
               $782 = (_iswctype($779,$781)|0);
               $783 = ($782|0)==(0);
               if (!($783)) {
                break;
               }
               $784 = (_towupper($649)|0);
               $785 = HEAP32[$780>>2]|0;
               $786 = (_iswctype($784,$785)|0);
               $787 = ($786|0)==(0);
               if ($787) {
                $match_eo$9$i = $match_eo$682$i;$new_match$10$i = $new_match$783$i;$reach_next_i$7$i = $reach_next_i$680$i;$tmp_tags$3$i = $tmp_tags$284$i;
                break L414;
               }
              }
             } while(0);
             $788 = HEAP32[$710>>2]|0;
             $789 = $788 & 8;
             $790 = ($789|0)==(0);
             if ($790) {
              break;
             }
             $791 = (($trans_i$185$i) + 28|0);
             $792 = HEAP32[$791>>2]|0;
             $793 = HEAP32[$792>>2]|0;
             $794 = ($793|0)==(0);
             if ($794) {
              break;
             }
             $795 = HEAP32[$477>>2]|0;
             $796 = $795 & 2;
             $797 = ($796|0)==(0);
             if ($797) {
              $$012$us$i$i24 = $792;$798 = $793;
              while(1) {
               $799 = (_iswctype($649,$798)|0);
               $800 = ($799|0)==(0);
               if (!($800)) {
                $match_eo$9$i = $match_eo$682$i;$new_match$10$i = $new_match$783$i;$reach_next_i$7$i = $reach_next_i$680$i;$tmp_tags$3$i = $tmp_tags$284$i;
                break L414;
               }
               $801 = (($$012$us$i$i24) + 4|0);
               $802 = HEAP32[$801>>2]|0;
               $803 = ($802|0)==(0);
               if ($803) {
                break L417;
               } else {
                $$012$us$i$i24 = $801;$798 = $802;
               }
              }
             } else {
              $$012$i$i26 = $792;
             }
             while(1) {
              $804 = (_towupper($649)|0);
              $805 = HEAP32[$$012$i$i26>>2]|0;
              $806 = (_iswctype($804,$805)|0);
              $807 = ($806|0)==(0);
              if (!($807)) {
               $match_eo$9$i = $match_eo$682$i;$new_match$10$i = $new_match$783$i;$reach_next_i$7$i = $reach_next_i$680$i;$tmp_tags$3$i = $tmp_tags$284$i;
               break L414;
              }
              $808 = (_towlower($649)|0);
              $809 = HEAP32[$$012$i$i26>>2]|0;
              $810 = (_iswctype($808,$809)|0);
              $811 = ($810|0)==(0);
              if (!($811)) {
               $match_eo$9$i = $match_eo$682$i;$new_match$10$i = $new_match$783$i;$reach_next_i$7$i = $reach_next_i$680$i;$tmp_tags$3$i = $tmp_tags$284$i;
               break L414;
              }
              $812 = (($$012$i$i26) + 4|0);
              $813 = HEAP32[$812>>2]|0;
              $814 = ($813|0)==(0);
              if ($814) {
               break;
              } else {
               $$012$i$i26 = $812;
              }
             }
            }
           } while(0);
           if ($537) {
            $815 = HEAP32[$704>>2]|0;
            $i$564$i = 0;
            while(1) {
             $816 = (($815) + ($i$564$i<<2)|0);
             $817 = HEAP32[$816>>2]|0;
             $818 = (($tmp_tags$284$i) + ($i$564$i<<2)|0);
             HEAP32[$818>>2] = $817;
             $819 = (($i$564$i) + 1)|0;
             $exitcond141$i = ($819|0)==($num_tags$0$i|0);
             if ($exitcond141$i) {
              break;
             } else {
              $i$564$i = $819;
             }
            }
           }
           $820 = (($trans_i$185$i) + 16|0);
           $821 = HEAP32[$820>>2]|0;
           $822 = ($821|0)==(0|0);
           do {
            if (!($822)) {
             $823 = HEAP32[$821>>2]|0;
             $824 = ($823|0)>(-1);
             if ($824) {
              $826 = $823;$tag_i$168$i = $821;
             } else {
              break;
             }
             while(1) {
              $825 = ($826|0)<($num_tags$0$i|0);
              if ($825) {
               $827 = (($tmp_tags$284$i) + ($826<<2)|0);
               HEAP32[$827>>2] = $651;
              }
              $828 = (($tag_i$168$i) + 4|0);
              $829 = HEAP32[$828>>2]|0;
              $830 = ($829|0)>(-1);
              if ($830) {
               $826 = $829;$tag_i$168$i = $828;
              } else {
               break;
              }
             }
            }
           } while(0);
           $831 = (($trans_i$185$i) + 12|0);
           $832 = HEAP32[$831>>2]|0;
           $833 = (($513) + ($832<<3)|0);
           $834 = HEAP32[$833>>2]|0;
           $835 = ($834|0)<($651|0);
           if ($835) {
            $836 = HEAP32[$837>>2]|0;
            HEAP32[$reach_next_i$680$i>>2] = $836;
            $838 = (($reach_next_i$680$i) + 4|0);
            $839 = HEAP32[$838>>2]|0;
            HEAP32[$838>>2] = $tmp_tags$284$i;
            HEAP32[$833>>2] = $651;
            $840 = HEAP32[$831>>2]|0;
            $841 = ((($513) + ($840<<3)|0) + 4|0);
            HEAP32[$841>>2] = $838;
            $842 = HEAP32[$reach_next_i$680$i>>2]|0;
            $843 = HEAP32[$538>>2]|0;
            $844 = ($842|0)==($843|0);
            do {
             if ($844) {
              $845 = ($match_eo$682$i|0)==(-1);
              if ($845) {
               if (!($537)) {
                $match_eo$7$i = $651;$new_match$8$i = 1;
                break;
               }
               $$pre = HEAP32[$838>>2]|0;
               $851 = $$pre;
              } else {
               if (!($537)) {
                $match_eo$7$i = $match_eo$682$i;$new_match$8$i = $new_match$783$i;
                break;
               }
               $846 = HEAP32[$838>>2]|0;
               $847 = HEAP32[$846>>2]|0;
               $848 = HEAP32[$tags$0>>2]|0;
               $849 = ($847|0)>($848|0);
               if ($849) {
                $match_eo$7$i = $match_eo$682$i;$new_match$8$i = $new_match$783$i;
                break;
               } else {
                $851 = $846;
               }
              }
              $i$677$i = 0;
              while(1) {
               $850 = (($851) + ($i$677$i<<2)|0);
               $852 = HEAP32[$850>>2]|0;
               $853 = (($tags$0) + ($i$677$i<<2)|0);
               HEAP32[$853>>2] = $852;
               $854 = (($i$677$i) + 1)|0;
               $exitcond145$i = ($854|0)==($num_tags$0$i|0);
               if ($exitcond145$i) {
                $match_eo$7$i = $651;$new_match$8$i = 1;
                break;
               } else {
                $i$677$i = $854;
               }
              }
             } else {
              $match_eo$7$i = $match_eo$682$i;$new_match$8$i = $new_match$783$i;
             }
            } while(0);
            $855 = (($reach_next_i$680$i) + 8|0);
            $match_eo$9$i = $match_eo$7$i;$new_match$10$i = $new_match$8$i;$reach_next_i$7$i = $855;$tmp_tags$3$i = $839;
            break;
           } else {
            $856 = HEAP32[$540>>2]|0;
            $857 = ((($513) + ($832<<3)|0) + 4|0);
            $858 = HEAP32[$857>>2]|0;
            $859 = HEAP32[$858>>2]|0;
            if ($537) {
             $i$01$i$i30 = 0;
            } else {
             $match_eo$9$i = $match_eo$682$i;$new_match$10$i = $new_match$783$i;$reach_next_i$7$i = $reach_next_i$680$i;$tmp_tags$3$i = $tmp_tags$284$i;
             break;
            }
            while(1) {
             $860 = (($856) + ($i$01$i$i30<<2)|0);
             $861 = HEAP32[$860>>2]|0;
             $862 = ($861|0)==(0);
             $863 = (($tmp_tags$284$i) + ($i$01$i$i30<<2)|0);
             $864 = HEAP32[$863>>2]|0;
             $865 = (($859) + ($i$01$i$i30<<2)|0);
             $866 = HEAP32[$865>>2]|0;
             if ($862) {
              $867 = ($864|0)<($866|0);
              if ($867) {
               break;
              }
              $868 = ($864|0)>($866|0);
              if ($868) {
               $match_eo$9$i = $match_eo$682$i;$new_match$10$i = $new_match$783$i;$reach_next_i$7$i = $reach_next_i$680$i;$tmp_tags$3$i = $tmp_tags$284$i;
               break L414;
              }
             } else {
              $869 = ($864|0)>($866|0);
              if ($869) {
               break;
              }
              $870 = ($864|0)<($866|0);
              if ($870) {
               $match_eo$9$i = $match_eo$682$i;$new_match$10$i = $new_match$783$i;$reach_next_i$7$i = $reach_next_i$680$i;$tmp_tags$3$i = $tmp_tags$284$i;
               break L414;
              }
             }
             $871 = (($i$01$i$i30) + 1)|0;
             $872 = ($871|0)<($num_tags$0$i|0);
             if ($872) {
              $i$01$i$i30 = $871;
             } else {
              $match_eo$9$i = $match_eo$682$i;$new_match$10$i = $new_match$783$i;$reach_next_i$7$i = $reach_next_i$680$i;$tmp_tags$3$i = $tmp_tags$284$i;
              break L414;
             }
            }
            HEAP32[$858>>2] = $tmp_tags$284$i;
            $873 = HEAP32[$837>>2]|0;
            $874 = HEAP32[$538>>2]|0;
            $875 = ($873|0)==($874|0);
            if ($875) {
             $i$773$i = 0;
            } else {
             $match_eo$9$i = $match_eo$682$i;$new_match$10$i = $new_match$783$i;$reach_next_i$7$i = $reach_next_i$680$i;$tmp_tags$3$i = $859;
             break;
            }
            while(1) {
             $876 = (($tmp_tags$284$i) + ($i$773$i<<2)|0);
             $877 = HEAP32[$876>>2]|0;
             $878 = (($tags$0) + ($i$773$i<<2)|0);
             HEAP32[$878>>2] = $877;
             $879 = (($i$773$i) + 1)|0;
             $exitcond143$i = ($879|0)==($num_tags$0$i|0);
             if ($exitcond143$i) {
              $match_eo$9$i = $651;$new_match$10$i = 1;$reach_next_i$7$i = $reach_next_i$680$i;$tmp_tags$3$i = $859;
              break;
             } else {
              $i$773$i = $879;
             }
            }
           }
          }
         } while(0);
         $880 = (($trans_i$185$i) + 32|0);
         $881 = (($trans_i$185$i) + 40|0);
         $882 = HEAP32[$881>>2]|0;
         $883 = ($882|0)==(0|0);
         if ($883) {
          $match_eo$6$lcssa$i = $match_eo$9$i;$new_match$7$lcssa$i = $new_match$10$i;$reach_next_i$6$lcssa$i = $reach_next_i$7$i;$tmp_tags$2$lcssa$i = $tmp_tags$3$i;
          break;
         } else {
          $837 = $881;$match_eo$682$i = $match_eo$9$i;$new_match$783$i = $new_match$10$i;$reach_next_i$680$i = $reach_next_i$7$i;$tmp_tags$284$i = $tmp_tags$3$i;$trans_i$185$i = $880;
         }
        }
       }
       $884 = (($reach_i$194$i) + 8|0);
       $885 = HEAP32[$884>>2]|0;
       $886 = ($885|0)==(0|0);
       if ($886) {
        $match_eo$5$lcssa$i = $match_eo$6$lcssa$i;$new_match$6$lcssa$i = $new_match$7$lcssa$i;$reach_next_i$5$lcssa$i = $reach_next_i$6$lcssa$i;$tmp_tags$1$lcssa$i = $tmp_tags$2$lcssa$i;
        break;
       } else {
        $701 = $885;$match_eo$596$i = $match_eo$6$lcssa$i;$new_match$697$i = $new_match$7$lcssa$i;$reach_i$194$i = $884;$reach_next_i$595$i = $reach_next_i$6$lcssa$i;$tmp_tags$198$i = $tmp_tags$2$lcssa$i;
       }
      }
     }
     HEAP32[$reach_next_i$5$lcssa$i>>2] = 0;
     $match_eo$0$i5 = $match_eo$5$lcssa$i;$new_match$0$i = $new_match$6$lcssa$i;$pos$0$i = $651;$pos_add_next$1$i6 = $pos_add_next$2$i;$prev_c$0$i8 = $649;$reach$0$i = $reach$1$i;$reach_next$0$i = $reach_next$1$i;$reach_next_i$0$i = $reach_next_i$5$lcssa$i;$str_byte$0$i7 = $656;$tmp_tags$0$i = $tmp_tags$1$lcssa$i;
    }
    _free($493);
    $match_eo$10$lobit$i = $match_eo$10$i >>> 31;
    $match_eo$10$i32 = $match_eo$10$i;$status$0 = $match_eo$10$lobit$i;
    label = 369;
   }
  } else {
   HEAP32[$next_c$i>>2] = 0;
   $12 = $eflags & 1;
   $13 = $eflags & 2;
   $14 = (($1) + 56|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $15 & 4;
   $17 = (___tre_mem_new_impl(0,0)|0);
   $18 = ($17|0)==(0|0);
   if ($18) {
    $status$099 = 12;
   } else {
    $19 = (___tre_mem_alloc_impl($17,0,0,0,32)|0);
    $20 = ($19|0)==(0|0);
    if ($20) {
     ___tre_mem_destroy($17);
     $status$099 = 12;
     break;
    }
    $21 = (($19) + 24|0);
    HEAP32[$21>>2] = 0;
    $22 = (($19) + 28|0);
    HEAP32[$22>>2] = 0;
    $23 = HEAP32[$2>>2]|0;
    $24 = ($23|0)==(0);
    if ($24) {
     $tags$0$i = 0;
     label = 9;
    } else {
     $25 = $23 << 2;
     $26 = (_malloc($25)|0);
     $27 = ($26|0)==(0|0);
     if ($27) {
      $match_eo$10$i35 = 0;$pmatch$1$i = 0;$ret$0$i = 12;$states_seen$1$i = 0;$tags$1$i = $26;
     } else {
      $tags$0$i = $26;
      label = 9;
     }
    }
    do {
     if ((label|0) == 9) {
      $28 = (($1) + 28|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = ($29|0)==(0);
      if ($30) {
       $pmatch$0$i = 0;
      } else {
       $31 = $29 << 3;
       $32 = (_malloc($31)|0);
       $33 = ($32|0)==(0|0);
       if ($33) {
        $match_eo$10$i35 = 0;$pmatch$1$i = $32;$ret$0$i = 12;$states_seen$1$i = 0;$tags$1$i = $tags$0$i;
        break;
       } else {
        $pmatch$0$i = $32;
       }
      }
      $34 = (($1) + 52|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = ($35|0)==(0);
      if ($36) {
       $states_seen$0$ph$i = 0;
      } else {
       $37 = $35 << 2;
       $38 = (_malloc($37)|0);
       $39 = ($38|0)==(0|0);
       if ($39) {
        $match_eo$10$i35 = 0;$pmatch$1$i = $pmatch$0$i;$ret$0$i = 12;$states_seen$1$i = $38;$tags$1$i = $tags$0$i;
        break;
       } else {
        $states_seen$0$ph$i = $38;
       }
      }
      $40 = ($tags$0|0)==(0|0);
      $41 = (($1) + 8|0);
      $42 = (($1) + 12|0);
      $43 = (($1) + 32|0);
      $44 = ($16|0)==(0);
      $45 = ($12|0)==(0);
      $47 = $23;$match_eo$0$i = -1;$pos_add_next$0$i = 1;$pos_start$0$i = -1;$stack$0$i = $19;$str_byte$0$i = $string;
      L21: while(1) {
       $46 = ($47|0)>(0);
       do {
        if ($46) {
         if ($40) {
          $48 = $47 << 2;
          _memset(($tags$0$i|0),-1,($48|0))|0;
          break;
         } else {
          $i$031$i = 0;
          while(1) {
           $49 = (($tags$0$i) + ($i$031$i<<2)|0);
           HEAP32[$49>>2] = -1;
           $50 = (($tags$0) + ($i$031$i<<2)|0);
           HEAP32[$50>>2] = -1;
           $$pre154$i = HEAP32[$2>>2]|0;
           $51 = (($i$031$i) + 1)|0;
           $52 = ($51|0)<($$pre154$i|0);
           if ($52) {
            $i$031$i = $51;
           } else {
            break;
           }
          }
         }
        }
       } while(0);
       $53 = HEAP32[$34>>2]|0;
       $54 = ($53|0)>(0);
       if ($54) {
        $55 = $53 << 2;
        _memset(($states_seen$0$ph$i|0),0,($55|0))|0;
       }
       $56 = HEAP32[$next_c$i>>2]|0;
       $57 = (($pos_add_next$0$i) + ($pos_start$0$i))|0;
       $58 = (_mbtowc($next_c$i,$str_byte$0$i,4)|0);
       $59 = ($58|0)<(1);
       if ($59) {
        $60 = ($58|0)<(0);
        if ($60) {
         $status$099 = 1;
         break L5;
        }
        $61 = (($58) + 1)|0;
        $pos_add_next$1$i = $61;
       } else {
        $pos_add_next$1$i = $58;
       }
       $62 = (($str_byte$0$i) + ($pos_add_next$1$i)|0);
       $63 = HEAP32[$next_c$i>>2]|0;
       $64 = HEAP32[$41>>2]|0;
       $65 = (($64) + 8|0);
       $66 = HEAP32[$65>>2]|0;
       $67 = ($66|0)==(0|0);
       if ($67) {
        $match_eo$2$i = $match_eo$0$i;$next_tags$8$i = 0;$pos_add_next$6$i = $pos_add_next$1$i;$stack$8$i = $stack$0$i;
        label = 193;
       } else {
        $68 = ($57|0)==(0);
        $69 = ($56|0)==(95);
        $70 = ($57|0)<(1);
        $or$cond$i = $70 & $45;
        $71 = ($56|0)!=(10);
        $or$cond2$i = $71 | $44;
        $or$cond2$not$i = $or$cond2$i ^ 1;
        $127 = $65;$next_tags$050$i = 0;$stack$151$i = $stack$0$i;$state$049$i = 0;$trans_i$053$i = $64;
        while(1) {
         $72 = (($trans_i$053$i) + 20|0);
         $73 = HEAP32[$72>>2]|0;
         $74 = ($73|0)==(0);
         L41: do {
          if ($74) {
           label = 55;
          } else {
           $75 = $73 & 1;
           $76 = ($75|0)==(0);
           $brmerge$i = $76 | $or$cond$i;
           $brmerge187$i = $brmerge$i | $or$cond2$not$i;
           if ($brmerge187$i) {
            $77 = $73 & 2;
            $78 = ($77|0)==(0);
            if (!($78)) {
             $79 = HEAP32[$next_c$i>>2]|0;
             $80 = $79 | $13;
             $81 = ($80|0)!=(0);
             $82 = ($79|0)!=(10);
             $or$cond4$i = $82 | $44;
             $or$cond188$i = $81 & $or$cond4$i;
             if ($or$cond188$i) {
              $next_tags$1$i = $next_tags$050$i;$stack$3$i = $stack$151$i;$state$1$i = $state$049$i;
              break;
             }
            }
            $83 = $73 & 16;
            $84 = ($83|0)==(0);
            do {
             if (!($84)) {
              if ($69) {
               $next_tags$1$i = $next_tags$050$i;$stack$3$i = $stack$151$i;$state$1$i = $state$049$i;
               break L41;
              }
              $85 = (_iswalnum($56)|0);
              $86 = ($85|0)==(0);
              if (!($86)) {
               $next_tags$1$i = $next_tags$050$i;$stack$3$i = $stack$151$i;$state$1$i = $state$049$i;
               break L41;
              }
              $87 = HEAP32[$next_c$i>>2]|0;
              $88 = ($87|0)==(95);
              if ($88) {
               break;
              }
              $89 = (_iswalnum($87)|0);
              $90 = ($89|0)==(0);
              if ($90) {
               $next_tags$1$i = $next_tags$050$i;$stack$3$i = $stack$151$i;$state$1$i = $state$049$i;
               break L41;
              }
             }
            } while(0);
            $91 = HEAP32[$72>>2]|0;
            $92 = $91 & 32;
            $93 = ($92|0)==(0);
            if ($93) {
             $101 = $91;
            } else {
             if (!($69)) {
              $94 = (_iswalnum($56)|0);
              $95 = ($94|0)==(0);
              if ($95) {
               $next_tags$1$i = $next_tags$050$i;$stack$3$i = $stack$151$i;$state$1$i = $state$049$i;
               break;
              }
             }
             $96 = HEAP32[$next_c$i>>2]|0;
             $97 = ($96|0)==(95);
             if ($97) {
              $next_tags$1$i = $next_tags$050$i;$stack$3$i = $stack$151$i;$state$1$i = $state$049$i;
              break;
             }
             $98 = (_iswalnum($96)|0);
             $99 = ($98|0)==(0);
             if (!($99)) {
              $next_tags$1$i = $next_tags$050$i;$stack$3$i = $stack$151$i;$state$1$i = $state$049$i;
              break;
             }
             $$pre184$i = HEAP32[$72>>2]|0;
             $101 = $$pre184$i;
            }
            $100 = $101 & 64;
            $102 = ($100|0)==(0);
            $or$cond5$i = $102 | $68;
            do {
             if (!($or$cond5$i)) {
              $103 = HEAP32[$next_c$i>>2]|0;
              $104 = ($103|0)==(0);
              if ($104) {
               break;
              }
              if ($69) {
               $108 = $103;$111 = 1;
              } else {
               $105 = (_iswalnum($56)|0);
               $106 = ($105|0)!=(0);
               $$pre158$i = HEAP32[$next_c$i>>2]|0;
               $108 = $$pre158$i;$111 = $106;
              }
              $107 = ($108|0)==(95);
              if ($107) {
               if ($111) {
                $next_tags$1$i = $next_tags$050$i;$stack$3$i = $stack$151$i;$state$1$i = $state$049$i;
                break L41;
               } else {
                break;
               }
              } else {
               $109 = (_iswalnum($108)|0);
               $110 = ($109|0)!=(0);
               $tmp1$i = $111 ^ $110;
               if ($tmp1$i) {
                break;
               } else {
                $next_tags$1$i = $next_tags$050$i;$stack$3$i = $stack$151$i;$state$1$i = $state$049$i;
                break L41;
               }
              }
             }
            } while(0);
            $112 = HEAP32[$72>>2]|0;
            $113 = $112 & 128;
            $114 = ($113|0)==(0);
            if ($114) {
             label = 55;
             break;
            }
            if ($68) {
             $next_tags$1$i = $next_tags$050$i;$stack$3$i = $stack$151$i;$state$1$i = $state$049$i;
             break;
            }
            $115 = HEAP32[$next_c$i>>2]|0;
            $116 = ($115|0)==(0);
            if ($116) {
             $next_tags$1$i = $next_tags$050$i;$stack$3$i = $stack$151$i;$state$1$i = $state$049$i;
             break;
            }
            if ($69) {
             $120 = $115;$124 = 1;
            } else {
             $117 = (_iswalnum($56)|0);
             $118 = ($117|0)!=(0);
             $$pre157$i = HEAP32[$next_c$i>>2]|0;
             $120 = $$pre157$i;$124 = $118;
            }
            $119 = ($120|0)==(95);
            if ($119) {
             if ($124) {
              label = 55;
              break;
             } else {
              $next_tags$1$i = $next_tags$050$i;$stack$3$i = $stack$151$i;$state$1$i = $state$049$i;
              break;
             }
            } else {
             $121 = (_iswalnum($120)|0);
             $122 = ($121|0)!=(0);
             $123 = $124 ^ $122;
             if ($123) {
              $next_tags$1$i = $next_tags$050$i;$stack$3$i = $stack$151$i;$state$1$i = $state$049$i;
              break;
             } else {
              label = 55;
              break;
             }
            }
           } else {
            $next_tags$1$i = $next_tags$050$i;$stack$3$i = $stack$151$i;$state$1$i = $state$049$i;
           }
          }
         } while(0);
         do {
          if ((label|0) == 55) {
           label = 0;
           $125 = ($state$049$i|0)==(0|0);
           if ($125) {
            $126 = HEAP32[$127>>2]|0;
            $128 = (($trans_i$053$i) + 16|0);
            $129 = HEAP32[$128>>2]|0;
            $next_tags$1$i = $129;$stack$3$i = $stack$151$i;$state$1$i = $126;
            break;
           }
           $130 = (($stack$151$i) + 28|0);
           $131 = HEAP32[$130>>2]|0;
           $132 = ($131|0)==(0|0);
           if ($132) {
            $133 = (___tre_mem_alloc_impl($17,0,0,0,32)|0);
            $134 = ($133|0)==(0|0);
            if ($134) {
             label = 59;
             break L21;
            }
            $138 = (($133) + 24|0);
            HEAP32[$138>>2] = $stack$151$i;
            $139 = (($133) + 28|0);
            HEAP32[$139>>2] = 0;
            $140 = HEAP32[$2>>2]|0;
            $141 = $140 << 2;
            $142 = (___tre_mem_alloc_impl($17,0,0,0,$141)|0);
            $143 = (($133) + 20|0);
            HEAP32[$143>>2] = $142;
            $144 = ($142|0)==(0|0);
            if ($144) {
             label = 66;
             break L21;
            }
            HEAP32[$130>>2] = $133;
            $stack$2$i = $133;
           } else {
            $stack$2$i = $131;
           }
           HEAP32[$stack$2$i>>2] = $57;
           $148 = (($stack$2$i) + 4|0);
           HEAP32[$148>>2] = $62;
           $149 = HEAP32[$127>>2]|0;
           $150 = (($stack$2$i) + 8|0);
           HEAP32[$150>>2] = $149;
           $151 = (($trans_i$053$i) + 12|0);
           $152 = HEAP32[$151>>2]|0;
           $153 = (($stack$2$i) + 12|0);
           HEAP32[$153>>2] = $152;
           $154 = HEAP32[$next_c$i>>2]|0;
           $155 = (($stack$2$i) + 16|0);
           HEAP32[$155>>2] = $154;
           $156 = HEAP32[$2>>2]|0;
           $157 = ($156|0)>(0);
           if ($157) {
            $158 = (($stack$2$i) + 20|0);
            $159 = HEAP32[$158>>2]|0;
            $i1$036$i = 0;
            while(1) {
             $160 = (($tags$0$i) + ($i1$036$i<<2)|0);
             $161 = HEAP32[$160>>2]|0;
             $162 = (($159) + ($i1$036$i<<2)|0);
             HEAP32[$162>>2] = $161;
             $163 = (($i1$036$i) + 1)|0;
             $164 = HEAP32[$2>>2]|0;
             $165 = ($163|0)<($164|0);
             if ($165) {
              $i1$036$i = $163;
             } else {
              break;
             }
            }
           }
           $166 = (($trans_i$053$i) + 16|0);
           $167 = HEAP32[$166>>2]|0;
           $168 = ($167|0)==(0|0);
           if ($168) {
            $next_tags$1$i = $next_tags$050$i;$stack$3$i = $stack$2$i;$state$1$i = $state$049$i;
            break;
           }
           $169 = HEAP32[$167>>2]|0;
           $170 = ($169|0)>(-1);
           if (!($170)) {
            $next_tags$1$i = $next_tags$050$i;$stack$3$i = $stack$2$i;$state$1$i = $state$049$i;
            break;
           }
           $171 = (($stack$2$i) + 20|0);
           $172 = HEAP32[$171>>2]|0;
           $175 = $169;$tmp$041$i = $167;
           while(1) {
            $173 = (($tmp$041$i) + 4|0);
            $174 = (($172) + ($175<<2)|0);
            HEAP32[$174>>2] = $57;
            $176 = HEAP32[$173>>2]|0;
            $177 = ($176|0)>(-1);
            if ($177) {
             $175 = $176;$tmp$041$i = $173;
            } else {
             $next_tags$1$i = $next_tags$050$i;$stack$3$i = $stack$2$i;$state$1$i = $state$049$i;
             break;
            }
           }
          }
         } while(0);
         $178 = (($trans_i$053$i) + 32|0);
         $179 = (($trans_i$053$i) + 40|0);
         $180 = HEAP32[$179>>2]|0;
         $181 = ($180|0)==(0|0);
         if ($181) {
          break;
         } else {
          $127 = $179;$next_tags$050$i = $next_tags$1$i;$stack$151$i = $stack$3$i;$state$049$i = $state$1$i;$trans_i$053$i = $178;
         }
        }
        $182 = ($next_tags$1$i|0)==(0|0);
        if ($182) {
         $next_tags$3$i = 0;
        } else {
         $183 = HEAP32[$next_tags$1$i>>2]|0;
         $184 = ($183|0)>(-1);
         if ($184) {
          $186 = $183;$next_tags$262$i = $next_tags$1$i;
          while(1) {
           $185 = (($tags$0$i) + ($186<<2)|0);
           HEAP32[$185>>2] = $57;
           $187 = (($next_tags$262$i) + 4|0);
           $188 = HEAP32[$187>>2]|0;
           $189 = ($188|0)>(-1);
           if ($189) {
            $186 = $188;$next_tags$262$i = $187;
           } else {
            $next_tags$3$i = $187;
            break;
           }
          }
         } else {
          $next_tags$3$i = $next_tags$1$i;
         }
        }
        $190 = ($state$1$i|0)==(0|0);
        if ($190) {
         $match_eo$2$i = $match_eo$0$i;$next_tags$8$i = $next_tags$3$i;$pos_add_next$6$i = $pos_add_next$1$i;$stack$8$i = $stack$3$i;
         label = 193;
        } else {
         $match_eo$1$ph$i = $match_eo$0$i;$next_tags$4$ph$i = $next_tags$3$i;$pos$0$ph$i = $57;$pos_add_next$2$ph$i = $pos_add_next$1$i;$stack$4$ph$i = $stack$3$i;$state$2$ph$i = $state$1$i;$str_byte$1$ph$i = $62;
        }
       }
       L106: while(1) {
        if ((label|0) == 193) {
         label = 0;
         $444 = (($stack$8$i) + 24|0);
         $445 = HEAP32[$444>>2]|0;
         $446 = ($445|0)==(0|0);
         if ($446) {
          break;
         }
         $447 = (($stack$8$i) + 8|0);
         $448 = HEAP32[$447>>2]|0;
         $449 = (($448) + 20|0);
         $450 = HEAP32[$449>>2]|0;
         $451 = $450 & 256;
         $452 = ($451|0)==(0);
         if (!($452)) {
          $453 = (($stack$8$i) + 12|0);
          $454 = HEAP32[$453>>2]|0;
          $455 = (($states_seen$0$ph$i) + ($454<<2)|0);
          HEAP32[$455>>2] = 0;
         }
         $456 = HEAP32[$stack$8$i>>2]|0;
         $457 = (($stack$8$i) + 4|0);
         $458 = HEAP32[$457>>2]|0;
         $459 = (($stack$8$i) + 16|0);
         $460 = HEAP32[$459>>2]|0;
         HEAP32[$next_c$i>>2] = $460;
         $461 = HEAP32[$2>>2]|0;
         $462 = ($461|0)>(0);
         if (!($462)) {
          $match_eo$1$ph$i = $match_eo$2$i;$next_tags$4$ph$i = $next_tags$8$i;$pos$0$ph$i = $456;$pos_add_next$2$ph$i = $pos_add_next$6$i;$stack$4$ph$i = $445;$state$2$ph$i = $448;$str_byte$1$ph$i = $458;
          continue;
         }
         $463 = (($stack$8$i) + 20|0);
         $464 = HEAP32[$463>>2]|0;
         $i6$065$i = 0;
         while(1) {
          $465 = (($464) + ($i6$065$i<<2)|0);
          $466 = HEAP32[$465>>2]|0;
          $467 = (($tags$0$i) + ($i6$065$i<<2)|0);
          HEAP32[$467>>2] = $466;
          $468 = (($i6$065$i) + 1)|0;
          $exitcond80 = ($468|0)==($461|0);
          if ($exitcond80) {
           $match_eo$1$ph$i = $match_eo$2$i;$next_tags$4$ph$i = $next_tags$8$i;$pos$0$ph$i = $456;$pos_add_next$2$ph$i = $pos_add_next$6$i;$stack$4$ph$i = $445;$state$2$ph$i = $448;$str_byte$1$ph$i = $458;
           continue L106;
          } else {
           $i6$065$i = $468;
          }
         }
        }
        $191 = HEAP32[$42>>2]|0;
        $192 = ($state$2$ph$i|0)==($191|0);
        if ($192) {
         $next_tags$4$lcssa$i = $next_tags$4$ph$i;$pos$0$lcssa$i = $pos$0$ph$i;$pos_add_next$2$lcssa$i = $pos_add_next$2$ph$i;$stack$4$lcssa$i = $stack$4$ph$i;
        } else {
         $next_tags$4129$i = $next_tags$4$ph$i;$pos$0135$i = $pos$0$ph$i;$pos_add_next$2133$i = $pos_add_next$2$ph$i;$stack$4131$i = $stack$4$ph$i;$state$2128$i = $state$2$ph$i;$str_byte$1136$i = $str_byte$1$ph$i;
         while(1) {
          $219 = (($state$2128$i) + 8|0);
          $220 = HEAP32[$219>>2]|0;
          $221 = ($220|0)==(0|0);
          do {
           if ($221) {
            label = 108;
           } else {
            $222 = (($state$2128$i) + 20|0);
            $223 = HEAP32[$222>>2]|0;
            $224 = $223 & 256;
            $225 = ($224|0)==(0);
            if ($225) {
             label = 108;
             break;
            }
            $226 = (($state$2128$i) + 24|0);
            $227 = HEAP32[$226>>2]|0;
            $228 = (($227) + 1)|0;
            $229 = HEAP32[$14>>2]|0;
            $230 = $229 & -9;
            _tre_fill_pmatch($228,$pmatch$0$i,$230,$1,$tags$0$i,$pos$0135$i);
            $231 = (($pmatch$0$i) + ($227<<3)|0);
            $232 = HEAP32[$231>>2]|0;
            $233 = ((($pmatch$0$i) + ($227<<3)|0) + 4|0);
            $234 = HEAP32[$233>>2]|0;
            $235 = (($234) - ($232))|0;
            $236 = (($string) + ($232)|0);
            $237 = (($str_byte$1136$i) + -1|0);
            $238 = (_strncmp($236,$237,$235)|0);
            $239 = ($238|0)==(0);
            if (!($239)) {
             $match_eo$2$i = $match_eo$1$ph$i;$next_tags$8$i = $next_tags$4129$i;$pos_add_next$6$i = $pos_add_next$2133$i;$stack$8$i = $stack$4131$i;
             label = 193;
             continue L106;
            }
            $240 = ($234|0)==($232|0);
            $$$i = $240&1;
            $241 = (($state$2128$i) + 12|0);
            $242 = HEAP32[$241>>2]|0;
            $243 = (($states_seen$0$ph$i) + ($242<<2)|0);
            if ($240) {
             $244 = HEAP32[$243>>2]|0;
             $245 = ($244|0)==(0);
             if (!($245)) {
              $match_eo$2$i = $match_eo$1$ph$i;$next_tags$8$i = $next_tags$4129$i;$pos_add_next$6$i = $pos_add_next$2133$i;$stack$8$i = $stack$4131$i;
              label = 193;
              continue L106;
             }
            }
            HEAP32[$243>>2] = $$$i;
            $246 = (($235) + -1)|0;
            $247 = (($str_byte$1136$i) + ($246)|0);
            $248 = (($246) + ($pos$0135$i))|0;
            $249 = HEAP32[$next_c$i>>2]|0;
            $250 = (_mbtowc($next_c$i,$247,4)|0);
            $251 = ($250|0)<(1);
            if ($251) {
             $252 = ($250|0)<(0);
             if ($252) {
              $status$099 = 1;
              break L5;
             }
             $253 = (($250) + 1)|0;
             $pos_add_next$3$i = $253;
            } else {
             $pos_add_next$3$i = $250;
            }
            $$sum$i = (($pos_add_next$3$i) + ($246))|0;
            $$pn$i = $248;$$sum$pn$i = $$sum$i;$pos_add_next$5$i = $pos_add_next$3$i;$prev_c$0$i = $249;
           }
          } while(0);
          do {
           if ((label|0) == 108) {
            label = 0;
            $254 = HEAP32[$next_c$i>>2]|0;
            $255 = ($254|0)==(0);
            if ($255) {
             $match_eo$2$i = $match_eo$1$ph$i;$next_tags$8$i = $next_tags$4129$i;$pos_add_next$6$i = $pos_add_next$2133$i;$stack$8$i = $stack$4131$i;
             label = 193;
             continue L106;
            }
            $256 = (_mbtowc($next_c$i,$str_byte$1136$i,4)|0);
            $257 = ($256|0)<(1);
            if (!($257)) {
             $$pn$i = $pos$0135$i;$$sum$pn$i = $256;$pos_add_next$5$i = $256;$prev_c$0$i = $254;
             break;
            }
            $258 = ($256|0)<(0);
            if ($258) {
             $status$099 = 1;
             break L5;
            }
            $259 = (($256) + 1)|0;
            $$pn$i = $pos$0135$i;$$sum$pn$i = $259;$pos_add_next$5$i = $259;$prev_c$0$i = $254;
           }
          } while(0);
          $str_byte$2$i = (($str_byte$1136$i) + ($$sum$pn$i)|0);
          $pos$1$i = (($$pn$i) + ($pos_add_next$2133$i))|0;
          $260 = HEAP32[$219>>2]|0;
          $261 = ($260|0)==(0|0);
          if ($261) {
           $match_eo$2$i = $match_eo$1$ph$i;$next_tags$8$i = $next_tags$4129$i;$pos_add_next$6$i = $pos_add_next$5$i;$stack$8$i = $stack$4131$i;
           label = 193;
           continue L106;
          }
          $262 = ($pos$1$i|0)==(0);
          $263 = ($prev_c$0$i|0)==(95);
          $264 = ($pos$1$i|0)<(1);
          $or$cond7$i = $264 & $45;
          $265 = ($prev_c$0$i|0)!=(10);
          $or$cond8$i = $265 | $44;
          $or$cond8$not$i = $or$cond8$i ^ 1;
          $378 = $219;$next_state$091$i = 0;$next_tags$585$i = $next_tags$4129$i;$stack$586$i = $stack$4131$i;$trans_i$188$i = $state$2128$i;
          while(1) {
           $266 = HEAP32[$trans_i$188$i>>2]|0;
           $267 = ($266>>>0)>($prev_c$0$i>>>0);
           L140: do {
            if ($267) {
             $next_state$1$i = $next_state$091$i;$next_tags$6$i = $next_tags$585$i;$stack$7$i = $stack$586$i;
            } else {
             $268 = (($trans_i$188$i) + 4|0);
             $269 = HEAP32[$268>>2]|0;
             $270 = ($269>>>0)<($prev_c$0$i>>>0);
             if ($270) {
              $next_state$1$i = $next_state$091$i;$next_tags$6$i = $next_tags$585$i;$stack$7$i = $stack$586$i;
              break;
             }
             $271 = (($trans_i$188$i) + 20|0);
             $272 = HEAP32[$271>>2]|0;
             $273 = ($272|0)==(0);
             L143: do {
              if (!($273)) {
               $274 = $272 & 1;
               $275 = ($274|0)==(0);
               $brmerge189$i = $275 | $or$cond7$i;
               $brmerge190$i = $brmerge189$i | $or$cond8$not$i;
               if (!($brmerge190$i)) {
                $next_state$1$i = $next_state$091$i;$next_tags$6$i = $next_tags$585$i;$stack$7$i = $stack$586$i;
                break L140;
               }
               $276 = $272 & 2;
               $277 = ($276|0)==(0);
               if (!($277)) {
                $278 = HEAP32[$next_c$i>>2]|0;
                $279 = $278 | $13;
                $280 = ($279|0)!=(0);
                $281 = ($278|0)!=(10);
                $or$cond10$i = $281 | $44;
                $or$cond191$i = $280 & $or$cond10$i;
                if ($or$cond191$i) {
                 $next_state$1$i = $next_state$091$i;$next_tags$6$i = $next_tags$585$i;$stack$7$i = $stack$586$i;
                 break L140;
                }
               }
               $282 = $272 & 16;
               $283 = ($282|0)==(0);
               do {
                if (!($283)) {
                 if ($263) {
                  $next_state$1$i = $next_state$091$i;$next_tags$6$i = $next_tags$585$i;$stack$7$i = $stack$586$i;
                  break L140;
                 }
                 $284 = (_iswalnum($prev_c$0$i)|0);
                 $285 = ($284|0)==(0);
                 if (!($285)) {
                  $next_state$1$i = $next_state$091$i;$next_tags$6$i = $next_tags$585$i;$stack$7$i = $stack$586$i;
                  break L140;
                 }
                 $286 = HEAP32[$next_c$i>>2]|0;
                 $287 = ($286|0)==(95);
                 if ($287) {
                  break;
                 }
                 $288 = (_iswalnum($286)|0);
                 $289 = ($288|0)==(0);
                 if ($289) {
                  $next_state$1$i = $next_state$091$i;$next_tags$6$i = $next_tags$585$i;$stack$7$i = $stack$586$i;
                  break L140;
                 }
                }
               } while(0);
               $290 = HEAP32[$271>>2]|0;
               $291 = $290 & 32;
               $292 = ($291|0)==(0);
               if ($292) {
                $300 = $290;
               } else {
                if (!($263)) {
                 $293 = (_iswalnum($prev_c$0$i)|0);
                 $294 = ($293|0)==(0);
                 if ($294) {
                  $next_state$1$i = $next_state$091$i;$next_tags$6$i = $next_tags$585$i;$stack$7$i = $stack$586$i;
                  break L140;
                 }
                }
                $295 = HEAP32[$next_c$i>>2]|0;
                $296 = ($295|0)==(95);
                if ($296) {
                 $next_state$1$i = $next_state$091$i;$next_tags$6$i = $next_tags$585$i;$stack$7$i = $stack$586$i;
                 break L140;
                }
                $297 = (_iswalnum($295)|0);
                $298 = ($297|0)==(0);
                if (!($298)) {
                 $next_state$1$i = $next_state$091$i;$next_tags$6$i = $next_tags$585$i;$stack$7$i = $stack$586$i;
                 break L140;
                }
                $$pre181$i = HEAP32[$271>>2]|0;
                $300 = $$pre181$i;
               }
               $299 = $300 & 64;
               $301 = ($299|0)==(0);
               $or$cond11$i = $301 | $262;
               do {
                if (!($or$cond11$i)) {
                 $302 = HEAP32[$next_c$i>>2]|0;
                 $303 = ($302|0)==(0);
                 if ($303) {
                  break;
                 }
                 if ($263) {
                  $307 = $302;$310 = 1;
                 } else {
                  $304 = (_iswalnum($prev_c$0$i)|0);
                  $305 = ($304|0)!=(0);
                  $$pre156$i = HEAP32[$next_c$i>>2]|0;
                  $307 = $$pre156$i;$310 = $305;
                 }
                 $306 = ($307|0)==(95);
                 if ($306) {
                  if ($310) {
                   $next_state$1$i = $next_state$091$i;$next_tags$6$i = $next_tags$585$i;$stack$7$i = $stack$586$i;
                   break L140;
                  } else {
                   break;
                  }
                 } else {
                  $308 = (_iswalnum($307)|0);
                  $309 = ($308|0)!=(0);
                  $tmp$i = $310 ^ $309;
                  if ($tmp$i) {
                   break;
                  } else {
                   $next_state$1$i = $next_state$091$i;$next_tags$6$i = $next_tags$585$i;$stack$7$i = $stack$586$i;
                   break L140;
                  }
                 }
                }
               } while(0);
               $311 = HEAP32[$271>>2]|0;
               $312 = $311 & 128;
               $313 = ($312|0)==(0);
               do {
                if (!($313)) {
                 if ($262) {
                  $next_state$1$i = $next_state$091$i;$next_tags$6$i = $next_tags$585$i;$stack$7$i = $stack$586$i;
                  break L140;
                 }
                 $314 = HEAP32[$next_c$i>>2]|0;
                 $315 = ($314|0)==(0);
                 if ($315) {
                  $next_state$1$i = $next_state$091$i;$next_tags$6$i = $next_tags$585$i;$stack$7$i = $stack$586$i;
                  break L140;
                 }
                 if ($263) {
                  $319 = $314;$323 = 1;
                 } else {
                  $316 = (_iswalnum($prev_c$0$i)|0);
                  $317 = ($316|0)!=(0);
                  $$pre155$i = HEAP32[$next_c$i>>2]|0;
                  $319 = $$pre155$i;$323 = $317;
                 }
                 $318 = ($319|0)==(95);
                 if ($318) {
                  if ($323) {
                   break;
                  } else {
                   $next_state$1$i = $next_state$091$i;$next_tags$6$i = $next_tags$585$i;$stack$7$i = $stack$586$i;
                   break L140;
                  }
                 } else {
                  $320 = (_iswalnum($319)|0);
                  $321 = ($320|0)!=(0);
                  $322 = $323 ^ $321;
                  if ($322) {
                   $next_state$1$i = $next_state$091$i;$next_tags$6$i = $next_tags$585$i;$stack$7$i = $stack$586$i;
                   break L140;
                  } else {
                   break;
                  }
                 }
                }
               } while(0);
               $324 = HEAP32[$271>>2]|0;
               $325 = $324 & 4;
               $326 = ($325|0)==(0);
               do {
                if ($326) {
                 $335 = $324;
                } else {
                 $327 = HEAP32[$14>>2]|0;
                 $328 = $327 & 2;
                 $329 = ($328|0)==(0);
                 if (!($329)) {
                  $335 = $324;
                  break;
                 }
                 $330 = (($trans_i$188$i) + 24|0);
                 $331 = HEAP32[$330>>2]|0;
                 $332 = (_iswctype($prev_c$0$i,$331)|0);
                 $333 = ($332|0)==(0);
                 if ($333) {
                  $next_state$1$i = $next_state$091$i;$next_tags$6$i = $next_tags$585$i;$stack$7$i = $stack$586$i;
                  break L140;
                 }
                 $$pre182$i = HEAP32[$271>>2]|0;
                 $335 = $$pre182$i;
                }
               } while(0);
               $334 = $335 & 4;
               $336 = ($334|0)==(0);
               do {
                if (!($336)) {
                 $337 = HEAP32[$14>>2]|0;
                 $338 = $337 & 2;
                 $339 = ($338|0)==(0);
                 if ($339) {
                  break;
                 }
                 $340 = (_towlower($prev_c$0$i)|0);
                 $341 = (($trans_i$188$i) + 24|0);
                 $342 = HEAP32[$341>>2]|0;
                 $343 = (_iswctype($340,$342)|0);
                 $344 = ($343|0)==(0);
                 if (!($344)) {
                  break;
                 }
                 $345 = (_towupper($prev_c$0$i)|0);
                 $346 = HEAP32[$341>>2]|0;
                 $347 = (_iswctype($345,$346)|0);
                 $348 = ($347|0)==(0);
                 if ($348) {
                  $next_state$1$i = $next_state$091$i;$next_tags$6$i = $next_tags$585$i;$stack$7$i = $stack$586$i;
                  break L140;
                 }
                }
               } while(0);
               $349 = HEAP32[$271>>2]|0;
               $350 = $349 & 8;
               $351 = ($350|0)==(0);
               if ($351) {
                break;
               }
               $352 = (($trans_i$188$i) + 28|0);
               $353 = HEAP32[$352>>2]|0;
               $354 = HEAP32[$353>>2]|0;
               $355 = ($354|0)==(0);
               if ($355) {
                break;
               }
               $356 = HEAP32[$14>>2]|0;
               $357 = $356 & 2;
               $358 = ($357|0)==(0);
               if ($358) {
                $$012$us$i$i = $353;$359 = $354;
                while(1) {
                 $360 = (_iswctype($prev_c$0$i,$359)|0);
                 $361 = ($360|0)==(0);
                 if (!($361)) {
                  $next_state$1$i = $next_state$091$i;$next_tags$6$i = $next_tags$585$i;$stack$7$i = $stack$586$i;
                  break L140;
                 }
                 $362 = (($$012$us$i$i) + 4|0);
                 $363 = HEAP32[$362>>2]|0;
                 $364 = ($363|0)==(0);
                 if ($364) {
                  break L143;
                 } else {
                  $$012$us$i$i = $362;$359 = $363;
                 }
                }
               } else {
                $$012$i$i = $353;
               }
               while(1) {
                $365 = (_towupper($prev_c$0$i)|0);
                $366 = HEAP32[$$012$i$i>>2]|0;
                $367 = (_iswctype($365,$366)|0);
                $368 = ($367|0)==(0);
                if (!($368)) {
                 $next_state$1$i = $next_state$091$i;$next_tags$6$i = $next_tags$585$i;$stack$7$i = $stack$586$i;
                 break L140;
                }
                $369 = (_towlower($prev_c$0$i)|0);
                $370 = HEAP32[$$012$i$i>>2]|0;
                $371 = (_iswctype($369,$370)|0);
                $372 = ($371|0)==(0);
                if (!($372)) {
                 $next_state$1$i = $next_state$091$i;$next_tags$6$i = $next_tags$585$i;$stack$7$i = $stack$586$i;
                 break L140;
                }
                $373 = (($$012$i$i) + 4|0);
                $374 = HEAP32[$373>>2]|0;
                $375 = ($374|0)==(0);
                if ($375) {
                 break;
                } else {
                 $$012$i$i = $373;
                }
               }
              }
             } while(0);
             $376 = ($next_state$091$i|0)==(0|0);
             if ($376) {
              $377 = HEAP32[$378>>2]|0;
              $379 = (($trans_i$188$i) + 16|0);
              $380 = HEAP32[$379>>2]|0;
              $next_state$1$i = $377;$next_tags$6$i = $380;$stack$7$i = $stack$586$i;
              break;
             }
             $381 = (($stack$586$i) + 28|0);
             $382 = HEAP32[$381>>2]|0;
             $383 = ($382|0)==(0|0);
             if ($383) {
              $384 = (___tre_mem_alloc_impl($17,0,0,0,32)|0);
              $385 = ($384|0)==(0|0);
              if ($385) {
               label = 166;
               break L21;
              }
              $389 = (($384) + 24|0);
              HEAP32[$389>>2] = $stack$586$i;
              $390 = (($384) + 28|0);
              HEAP32[$390>>2] = 0;
              $391 = HEAP32[$2>>2]|0;
              $392 = $391 << 2;
              $393 = (___tre_mem_alloc_impl($17,0,0,0,$392)|0);
              $394 = (($384) + 20|0);
              HEAP32[$394>>2] = $393;
              $395 = ($393|0)==(0|0);
              if ($395) {
               label = 173;
               break L21;
              }
              HEAP32[$381>>2] = $384;
              $stack$6$i = $384;
             } else {
              $stack$6$i = $382;
             }
             HEAP32[$stack$6$i>>2] = $pos$1$i;
             $399 = (($stack$6$i) + 4|0);
             HEAP32[$399>>2] = $str_byte$2$i;
             $400 = HEAP32[$378>>2]|0;
             $401 = (($stack$6$i) + 8|0);
             HEAP32[$401>>2] = $400;
             $402 = (($trans_i$188$i) + 12|0);
             $403 = HEAP32[$402>>2]|0;
             $404 = (($stack$6$i) + 12|0);
             HEAP32[$404>>2] = $403;
             $405 = HEAP32[$next_c$i>>2]|0;
             $406 = (($stack$6$i) + 16|0);
             HEAP32[$406>>2] = $405;
             $407 = HEAP32[$2>>2]|0;
             $408 = ($407|0)>(0);
             if ($408) {
              $409 = (($stack$6$i) + 20|0);
              $410 = HEAP32[$409>>2]|0;
              $i3$071$i = 0;
              while(1) {
               $411 = (($tags$0$i) + ($i3$071$i<<2)|0);
               $412 = HEAP32[$411>>2]|0;
               $413 = (($410) + ($i3$071$i<<2)|0);
               HEAP32[$413>>2] = $412;
               $414 = (($i3$071$i) + 1)|0;
               $415 = HEAP32[$2>>2]|0;
               $416 = ($414|0)<($415|0);
               if ($416) {
                $i3$071$i = $414;
               } else {
                break;
               }
              }
             }
             $417 = (($trans_i$188$i) + 16|0);
             $418 = HEAP32[$417>>2]|0;
             $419 = ($418|0)==(0|0);
             if ($419) {
              $next_state$1$i = $next_state$091$i;$next_tags$6$i = $next_tags$585$i;$stack$7$i = $stack$6$i;
              break;
             }
             $420 = HEAP32[$418>>2]|0;
             $421 = ($420|0)>(-1);
             if (!($421)) {
              $next_state$1$i = $next_state$091$i;$next_tags$6$i = $next_tags$585$i;$stack$7$i = $stack$6$i;
              break;
             }
             $422 = (($stack$6$i) + 20|0);
             $423 = HEAP32[$422>>2]|0;
             $425 = $420;$tmp5$076$i56 = $418;
             while(1) {
              $424 = (($423) + ($425<<2)|0);
              HEAP32[$424>>2] = $pos$1$i;
              $426 = (($tmp5$076$i56) + 4|0);
              $427 = HEAP32[$426>>2]|0;
              $428 = ($427|0)>(-1);
              if ($428) {
               $425 = $427;$tmp5$076$i56 = $426;
              } else {
               $next_state$1$i = $next_state$091$i;$next_tags$6$i = $next_tags$585$i;$stack$7$i = $stack$6$i;
               break;
              }
             }
            }
           } while(0);
           $429 = (($trans_i$188$i) + 32|0);
           $430 = (($trans_i$188$i) + 40|0);
           $431 = HEAP32[$430>>2]|0;
           $432 = ($431|0)==(0|0);
           if ($432) {
            break;
           } else {
            $378 = $430;$next_state$091$i = $next_state$1$i;$next_tags$585$i = $next_tags$6$i;$stack$586$i = $stack$7$i;$trans_i$188$i = $429;
           }
          }
          $433 = ($next_state$1$i|0)==(0|0);
          if ($433) {
           $match_eo$2$i = $match_eo$1$ph$i;$next_tags$8$i = $next_tags$6$i;$pos_add_next$6$i = $pos_add_next$5$i;$stack$8$i = $stack$7$i;
           label = 193;
           continue L106;
          }
          $434 = ($next_tags$6$i|0)==(0|0);
          do {
           if ($434) {
            $next_tags$4$be$i = 0;
           } else {
            $437 = HEAP32[$next_tags$6$i>>2]|0;
            $438 = ($437|0)>(-1);
            if ($438) {
             $441 = $437;$next_tags$7100$i = $next_tags$6$i;
            } else {
             $next_tags$4$be$i = $next_tags$6$i;
             break;
            }
            while(1) {
             $439 = (($next_tags$7100$i) + 4|0);
             $440 = (($tags$0$i) + ($441<<2)|0);
             HEAP32[$440>>2] = $pos$1$i;
             $442 = HEAP32[$439>>2]|0;
             $443 = ($442|0)>(-1);
             if ($443) {
              $441 = $442;$next_tags$7100$i = $439;
             } else {
              $next_tags$4$be$i = $439;
              break;
             }
            }
           }
          } while(0);
          $435 = HEAP32[$42>>2]|0;
          $436 = ($next_state$1$i|0)==($435|0);
          if ($436) {
           $next_tags$4$lcssa$i = $next_tags$4$be$i;$pos$0$lcssa$i = $pos$1$i;$pos_add_next$2$lcssa$i = $pos_add_next$5$i;$stack$4$lcssa$i = $stack$7$i;
           break;
          } else {
           $next_tags$4129$i = $next_tags$4$be$i;$pos$0135$i = $pos$1$i;$pos_add_next$2133$i = $pos_add_next$5$i;$stack$4131$i = $stack$7$i;$state$2128$i = $next_state$1$i;$str_byte$1136$i = $str_byte$2$i;
          }
         }
        }
        $193 = ($match_eo$1$ph$i|0)<($pos$0$lcssa$i|0);
        L231: do {
         if ($193) {
          label = 95;
         } else {
          $194 = ($match_eo$1$ph$i|0)!=($pos$0$lcssa$i|0);
          $or$cond6$i = $194 | $40;
          if ($or$cond6$i) {
           $match_eo$2$i = $match_eo$1$ph$i;$next_tags$8$i = $next_tags$4$lcssa$i;$pos_add_next$6$i = $pos_add_next$2$lcssa$i;$stack$8$i = $stack$4$lcssa$i;
           label = 193;
           continue L106;
          }
          $195 = HEAP32[$2>>2]|0;
          $196 = HEAP32[$43>>2]|0;
          $197 = ($195|0)>(0);
          if ($197) {
           $i$01$i$i = 0;
          } else {
           $match_eo$2$i = $match_eo$1$ph$i;$next_tags$8$i = $next_tags$4$lcssa$i;$pos_add_next$6$i = $pos_add_next$2$lcssa$i;$stack$8$i = $stack$4$lcssa$i;
           label = 193;
           continue L106;
          }
          while(1) {
           $198 = (($196) + ($i$01$i$i<<2)|0);
           $199 = HEAP32[$198>>2]|0;
           $200 = ($199|0)==(0);
           $201 = (($tags$0$i) + ($i$01$i$i<<2)|0);
           $202 = HEAP32[$201>>2]|0;
           $203 = (($tags$0) + ($i$01$i$i<<2)|0);
           $204 = HEAP32[$203>>2]|0;
           if ($200) {
            $205 = ($202|0)<($204|0);
            if ($205) {
             label = 95;
             break L231;
            }
            $206 = ($202|0)>($204|0);
            if ($206) {
             $match_eo$2$i = $match_eo$1$ph$i;$next_tags$8$i = $next_tags$4$lcssa$i;$pos_add_next$6$i = $pos_add_next$2$lcssa$i;$stack$8$i = $stack$4$lcssa$i;
             label = 193;
             continue L106;
            }
           } else {
            $207 = ($202|0)>($204|0);
            if ($207) {
             $212 = $195;
             break L231;
            }
            $208 = ($202|0)<($204|0);
            if ($208) {
             $match_eo$2$i = $match_eo$1$ph$i;$next_tags$8$i = $next_tags$4$lcssa$i;$pos_add_next$6$i = $pos_add_next$2$lcssa$i;$stack$8$i = $stack$4$lcssa$i;
             label = 193;
             continue L106;
            }
           }
           $209 = (($i$01$i$i) + 1)|0;
           $210 = ($209|0)<($195|0);
           if ($210) {
            $i$01$i$i = $209;
           } else {
            $match_eo$2$i = $match_eo$1$ph$i;$next_tags$8$i = $next_tags$4$lcssa$i;$pos_add_next$6$i = $pos_add_next$2$lcssa$i;$stack$8$i = $stack$4$lcssa$i;
            label = 193;
            continue L106;
           }
          }
         }
        } while(0);
        if ((label|0) == 95) {
         label = 0;
         if ($40) {
          $match_eo$2$i = $pos$0$lcssa$i;$next_tags$8$i = $next_tags$4$lcssa$i;$pos_add_next$6$i = $pos_add_next$2$lcssa$i;$stack$8$i = $stack$4$lcssa$i;
          label = 193;
          continue;
         }
         $$pre180$i = HEAP32[$2>>2]|0;
         $212 = $$pre180$i;
        }
        $211 = ($212|0)>(0);
        if ($211) {
         $i2$0145$i = 0;
        } else {
         $match_eo$2$i = $pos$0$lcssa$i;$next_tags$8$i = $next_tags$4$lcssa$i;$pos_add_next$6$i = $pos_add_next$2$lcssa$i;$stack$8$i = $stack$4$lcssa$i;
         label = 193;
         continue;
        }
        while(1) {
         $213 = (($tags$0$i) + ($i2$0145$i<<2)|0);
         $214 = HEAP32[$213>>2]|0;
         $215 = (($tags$0) + ($i2$0145$i<<2)|0);
         HEAP32[$215>>2] = $214;
         $216 = (($i2$0145$i) + 1)|0;
         $217 = HEAP32[$2>>2]|0;
         $218 = ($216|0)<($217|0);
         if ($218) {
          $i2$0145$i = $216;
         } else {
          $match_eo$2$i = $pos$0$lcssa$i;$next_tags$8$i = $next_tags$4$lcssa$i;$pos_add_next$6$i = $pos_add_next$2$lcssa$i;$stack$8$i = $stack$4$lcssa$i;
          label = 193;
          continue L106;
         }
        }
       }
       $469 = ($match_eo$2$i|0)<(0);
       if (!($469)) {
        label = 202;
        break;
       }
       $470 = HEAP32[$next_c$i>>2]|0;
       $471 = ($470|0)==(0);
       if ($471) {
        label = 202;
        break;
       }
       HEAP32[$next_c$i>>2] = $63;
       $$pre$i = HEAP32[$2>>2]|0;
       $47 = $$pre$i;$match_eo$0$i = $match_eo$2$i;$pos_add_next$0$i = $pos_add_next$6$i;$pos_start$0$i = $57;$stack$0$i = $stack$8$i;$str_byte$0$i = $62;
      }
      if ((label|0) == 59) {
       ___tre_mem_destroy($17);
       $135 = ($tags$0$i|0)==(0|0);
       if (!($135)) {
        _free($tags$0$i);
       }
       $136 = ($pmatch$0$i|0)==(0|0);
       if (!($136)) {
        _free($pmatch$0$i);
       }
       $137 = ($states_seen$0$ph$i|0)==(0|0);
       if ($137) {
        $status$099 = 12;
        break L5;
       }
       _free($states_seen$0$ph$i);
       $status$099 = 12;
       break L5;
      }
      else if ((label|0) == 66) {
       ___tre_mem_destroy($17);
       $145 = ($tags$0$i|0)==(0|0);
       if (!($145)) {
        _free($tags$0$i);
       }
       $146 = ($pmatch$0$i|0)==(0|0);
       if (!($146)) {
        _free($pmatch$0$i);
       }
       $147 = ($states_seen$0$ph$i|0)==(0|0);
       if ($147) {
        $status$099 = 12;
        break L5;
       }
       _free($states_seen$0$ph$i);
       $status$099 = 12;
       break L5;
      }
      else if ((label|0) == 166) {
       ___tre_mem_destroy($17);
       $386 = ($tags$0$i|0)==(0|0);
       if (!($386)) {
        _free($tags$0$i);
       }
       $387 = ($pmatch$0$i|0)==(0|0);
       if (!($387)) {
        _free($pmatch$0$i);
       }
       $388 = ($states_seen$0$ph$i|0)==(0|0);
       if ($388) {
        $status$099 = 12;
        break L5;
       }
       _free($states_seen$0$ph$i);
       $status$099 = 12;
       break L5;
      }
      else if ((label|0) == 173) {
       ___tre_mem_destroy($17);
       $396 = ($tags$0$i|0)==(0|0);
       if (!($396)) {
        _free($tags$0$i);
       }
       $397 = ($pmatch$0$i|0)==(0|0);
       if (!($397)) {
        _free($pmatch$0$i);
       }
       $398 = ($states_seen$0$ph$i|0)==(0|0);
       if ($398) {
        $status$099 = 12;
        break L5;
       }
       _free($states_seen$0$ph$i);
       $status$099 = 12;
       break L5;
      }
      else if ((label|0) == 202) {
       $match_eo$2$lobit$i = $match_eo$2$i >>> 31;
       $match_eo$10$i35 = $match_eo$2$i;$pmatch$1$i = $pmatch$0$i;$ret$0$i = $match_eo$2$lobit$i;$states_seen$1$i = $states_seen$0$ph$i;$tags$1$i = $tags$0$i;
       break;
      }
     }
    } while(0);
    ___tre_mem_destroy($17);
    $472 = ($tags$1$i|0)==(0|0);
    if (!($472)) {
     _free($tags$1$i);
    }
    $473 = ($pmatch$1$i|0)==(0|0);
    if (!($473)) {
     _free($pmatch$1$i);
    }
    $474 = ($states_seen$1$i|0)==(0|0);
    if ($474) {
     $match_eo$10$i32 = $match_eo$10$i35;$status$0 = $ret$0$i;
     label = 369;
    } else {
     _free($states_seen$1$i);
     $match_eo$10$i32 = $match_eo$10$i35;$status$0 = $ret$0$i;
     label = 369;
    }
   }
  }
 } while(0);
 if ((label|0) == 369) {
  $887 = ($status$0|0)==(0);
  if ($887) {
   $888 = (($1) + 56|0);
   $889 = HEAP32[$888>>2]|0;
   _tre_fill_pmatch($nmatch,$pmatch,$889,$1,$tags$0,$match_eo$10$i32);
   $status$099 = 0;
  } else {
   $status$099 = $status$0;
  }
 }
 $890 = ($tags$0|0)==(0|0);
 if ($890) {
  $$0 = $status$099;
  STACKTOP = sp;return ($$0|0);
 }
 _free($tags$0);
 $$0 = $status$099;
 STACKTOP = sp;return ($$0|0);
}
function _tre_fill_pmatch($nmatch,$pmatch,$cflags,$tnfa,$tags,$match_eo) {
 $nmatch = $nmatch|0;
 $pmatch = $pmatch|0;
 $cflags = $cflags|0;
 $tnfa = $tnfa|0;
 $tags = $tags|0;
 $match_eo = $match_eo|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$pre14$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$010 = 0, $i$17 = 0, $i$2$ph = 0, $i$23 = 0, $j$04 = 0, $or$cond = 0, $or$cond17 = 0, $or$cond2 = 0, $or$cond26 = 0;
 var $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($match_eo|0)>(-1);
 if ($0) {
  $1 = $cflags & 8;
  $2 = ($1|0)==(0);
  if ($2) {
   $4 = (($tnfa) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = (($tnfa) + 28|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)!=(0);
   $9 = ($nmatch|0)!=(0);
   $or$cond9 = $8 & $9;
   if ($or$cond9) {
    $10 = (($tnfa) + 48|0);
    $i$010 = 0;
    while(1) {
     $13 = (($5) + (($i$010*12)|0)|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = HEAP32[$10>>2]|0;
     $16 = ($14|0)==($15|0);
     if ($16) {
      $17 = (($pmatch) + ($i$010<<3)|0);
      HEAP32[$17>>2] = $match_eo;
      $30 = $match_eo;
     } else {
      $18 = (($tags) + ($14<<2)|0);
      $19 = HEAP32[$18>>2]|0;
      $20 = (($pmatch) + ($i$010<<3)|0);
      HEAP32[$20>>2] = $19;
      $30 = $19;
     }
     $21 = ((($5) + (($i$010*12)|0)|0) + 4|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = HEAP32[$10>>2]|0;
     $24 = ($22|0)==($23|0);
     if ($24) {
      $25 = ((($pmatch) + ($i$010<<3)|0) + 4|0);
      HEAP32[$25>>2] = $match_eo;
      $32 = $match_eo;
     } else {
      $26 = (($tags) + ($22<<2)|0);
      $27 = HEAP32[$26>>2]|0;
      $28 = ((($pmatch) + ($i$010<<3)|0) + 4|0);
      HEAP32[$28>>2] = $27;
      $32 = $27;
     }
     $29 = ($30|0)==(-1);
     $31 = ($32|0)==(-1);
     $or$cond17 = $29 | $31;
     if ($or$cond17) {
      $33 = (($pmatch) + ($i$010<<3)|0);
      $$pre$phiZ2D = ((($pmatch) + ($i$010<<3)|0) + 4|0);
      HEAP32[$$pre$phiZ2D>>2] = -1;
      HEAP32[$33>>2] = -1;
     }
     $34 = (($i$010) + 1)|0;
     $35 = HEAP32[$6>>2]|0;
     $36 = ($34>>>0)<($35>>>0);
     $37 = ($34>>>0)<($nmatch>>>0);
     $or$cond = $36 & $37;
     if ($or$cond) {
      $i$010 = $34;
     } else {
      $12 = $35;
      break;
     }
    }
   } else {
    $12 = $7;
   }
   $11 = ($12|0)!=(0);
   $or$cond26 = $11 & $9;
   if ($or$cond26) {
    $65 = $12;$i$17 = 0;
    while(1) {
     $38 = ((($pmatch) + ($i$17<<3)|0) + 4|0);
     $39 = ((($5) + (($i$17*12)|0)|0) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==(0|0);
     if ($41) {
      $60 = $65;
     } else {
      $42 = HEAP32[$40>>2]|0;
      $43 = ($42|0)>(-1);
      if ($43) {
       $44 = (($pmatch) + ($i$17<<3)|0);
       $$pre = HEAP32[$44>>2]|0;
       $46 = $42;$49 = $$pre;$j$04 = 0;
       while(1) {
        $45 = (($pmatch) + ($46<<3)|0);
        $47 = HEAP32[$45>>2]|0;
        $48 = ($49|0)<($47|0);
        if ($48) {
         label = 21;
        } else {
         $50 = HEAP32[$38>>2]|0;
         $51 = ((($pmatch) + ($46<<3)|0) + 4|0);
         $52 = HEAP32[$51>>2]|0;
         $53 = ($50|0)>($52|0);
         if ($53) {
          label = 21;
         } else {
          $66 = $49;
         }
        }
        if ((label|0) == 21) {
         label = 0;
         HEAP32[$38>>2] = -1;
         HEAP32[$44>>2] = -1;
         $66 = -1;
        }
        $54 = (($j$04) + 1)|0;
        $55 = (($40) + ($54<<2)|0);
        $56 = HEAP32[$55>>2]|0;
        $57 = ($56|0)>(-1);
        if ($57) {
         $46 = $56;$49 = $66;$j$04 = $54;
        } else {
         break;
        }
       }
       $$pre14$pre = HEAP32[$6>>2]|0;
       $60 = $$pre14$pre;
      } else {
       $60 = $65;
      }
     }
     $58 = (($i$17) + 1)|0;
     $59 = ($58>>>0)<($60>>>0);
     $61 = ($58>>>0)<($nmatch>>>0);
     $or$cond2 = $59 & $61;
     if ($or$cond2) {
      $65 = $60;$i$17 = $58;
     } else {
      $i$2$ph = $58;
      break;
     }
    }
   } else {
    $i$2$ph = 0;
   }
  } else {
   $i$2$ph = 0;
  }
 } else {
  $i$2$ph = 0;
 }
 $3 = ($i$2$ph>>>0)<($nmatch>>>0);
 if ($3) {
  $i$23 = $i$2$ph;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $62 = (($pmatch) + ($i$23<<3)|0);
  HEAP32[$62>>2] = -1;
  $63 = ((($pmatch) + ($i$23<<3)|0) + 4|0);
  HEAP32[$63>>2] = -1;
  $64 = (($i$23) + 1)|0;
  $exitcond = ($64|0)==($nmatch|0);
  if ($exitcond) {
   break;
  } else {
   $i$23 = $64;
  }
 }
 STACKTOP = sp;return;
}
function ___tre_mem_new_impl($provided,$provided_block) {
 $provided = $provided|0;
 $provided_block = $provided_block|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $mem$0$in = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($provided|0)==(0);
 if ($0) {
  $1 = (_calloc(1,24)|0);
  $mem$0$in = $1;
 } else {
  ;HEAP32[$provided_block+0>>2]=0|0;HEAP32[$provided_block+4>>2]=0|0;HEAP32[$provided_block+8>>2]=0|0;HEAP32[$provided_block+12>>2]=0|0;HEAP32[$provided_block+16>>2]=0|0;HEAP32[$provided_block+20>>2]=0|0;
  $mem$0$in = $provided_block;
 }
 $2 = ($mem$0$in|0)==(0|0);
 if ($2) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $$0 = $mem$0$in;
 STACKTOP = sp;return ($$0|0);
}
function ___tre_mem_destroy($mem) {
 $mem = $mem|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $l$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$mem>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  _free($mem);
  STACKTOP = sp;return;
 } else {
  $l$01 = $0;
 }
 while(1) {
  $2 = HEAP32[$l$01>>2]|0;
  _free($2);
  $3 = (($l$01) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  _free($l$01);
  $5 = ($4|0)==(0|0);
  if ($5) {
   break;
  } else {
   $l$01 = $4;
  }
 }
 _free($mem);
 STACKTOP = sp;return;
}
function ___tre_mem_alloc_impl($mem,$provided,$provided_block,$zero,$size) {
 $mem = $mem|0;
 $provided = $provided|0;
 $provided_block = $provided_block|0;
 $zero = $zero|0;
 $size = $size|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($mem) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($mem) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4>>>0)<($size>>>0);
 do {
  if ($5) {
   $6 = ($provided|0)==(0);
   if (!($6)) {
    $7 = ($provided_block|0)==(0|0);
    if (!($7)) {
     $8 = (($mem) + 8|0);
     HEAP32[$8>>2] = $provided_block;
     HEAP32[$3>>2] = 1024;
     $26 = $provided_block;$34 = 1024;
     break;
    }
    HEAP32[$0>>2] = 1;
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $9 = $size << 3;
   $10 = ($9>>>0)>(1024);
   $$ = $10 ? $9 : 1024;
   $11 = (_malloc(8)|0);
   $12 = ($11|0)==(0|0);
   if ($12) {
    HEAP32[$0>>2] = 1;
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $13 = (_malloc($$)|0);
   HEAP32[$11>>2] = $13;
   $14 = ($13|0)==(0|0);
   if ($14) {
    _free($11);
    HEAP32[$0>>2] = 1;
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $15 = (($11) + 4|0);
   HEAP32[$15>>2] = 0;
   $16 = (($mem) + 4|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==(0|0);
   if (!($18)) {
    $19 = (($17) + 4|0);
    HEAP32[$19>>2] = $11;
   }
   $20 = HEAP32[$mem>>2]|0;
   $21 = ($20|0)==(0|0);
   if ($21) {
    HEAP32[$mem>>2] = $11;
   }
   HEAP32[$16>>2] = $11;
   $22 = HEAP32[$11>>2]|0;
   $23 = (($mem) + 8|0);
   HEAP32[$23>>2] = $22;
   HEAP32[$3>>2] = $$;
   $26 = $22;$34 = $$;
  } else {
   $$phi$trans$insert = (($mem) + 8|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $26 = $$pre;$34 = $4;
  }
 } while(0);
 $24 = (($mem) + 8|0);
 $25 = $26;
 $27 = (($25) + ($size))|0;
 $28 = $27 & 3;
 $29 = ($28|0)==(0);
 $30 = (4 - ($28))|0;
 $$1 = $29 ? 0 : $30;
 $31 = (($$1) + ($size))|0;
 $32 = (($26) + ($31)|0);
 HEAP32[$24>>2] = $32;
 $33 = (($34) - ($31))|0;
 HEAP32[$3>>2] = $33;
 $35 = ($zero|0)==(0);
 if ($35) {
  $$0 = $26;
  STACKTOP = sp;return ($$0|0);
 }
 _memset(($26|0),0,($31|0))|0;
 $$0 = $26;
 STACKTOP = sp;return ($$0|0);
}
function ___string_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k$0 = 0, $k$0$len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 84|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($len) + 256)|0;
 $3 = (_memchr($1,0,$2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $k$0 = $2;
 } else {
  $5 = $3;
  $6 = $1;
  $7 = (($5) - ($6))|0;
  $k$0 = $7;
 }
 $8 = ($k$0>>>0)<($len>>>0);
 $k$0$len = $8 ? $k$0 : $len;
 _memcpy(($buf|0),($1|0),($k$0$len|0))|0;
 $9 = (($1) + ($k$0$len)|0);
 $10 = (($f) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = (($1) + ($k$0)|0);
 $12 = (($f) + 8|0);
 HEAP32[$12>>2] = $11;
 HEAP32[$0>>2] = $11;
 STACKTOP = sp;return ($k$0$len|0);
}
function _asprintf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vasprintf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _fwprintf($f,$fmt,$varargs) {
 $f = $f|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vfwprintf($f,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _swprintf($s,$n,$fmt,$varargs) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vswprintf($s,$n,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _vfwprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $ap2 = 0, $nl_arg = 0, $nl_type = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $ap2 = sp + 112|0;
 $nl_type = sp + 72|0;
 $nl_arg = sp;
 dest=$nl_type+0|0; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $0 = (_wprintf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $2 = (_wprintf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $$0 = $2;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _wprintf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$0 = 0, $$012$i = 0, $$012$i17 = 0, $$012$i21 = 0, $$03$i = 0, $$03$i16 = 0, $$03$i20 = 0, $$lobit = 0, $$lobit5 = 0, $$lobit6 = 0, $$lobit7 = 0, $$mask$i = 0, $$mask$i25 = 0, $$mask1$i = 0, $$mask1$i24 = 0, $$p$0 = 0, $$pre = 0, $$pre103 = 0, $$sum = 0;
 var $$sum29 = 0, $$sum31 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0, $185 = 0.0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0.0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0.0, $341 = 0.0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $349$phi = 0, $35 = 0, $350 = 0, $350$phi = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current29 = 0, $arglist_current32 = 0, $arglist_current5 = 0, $arglist_current67 = 0, $arglist_current70 = 0, $arglist_current73 = 0, $arglist_current76 = 0, $arglist_current79 = 0, $arglist_current8 = 0, $arglist_current82 = 0, $arglist_current85 = 0;
 var $arglist_current88 = 0, $arglist_current91 = 0, $arglist_current94 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next30 = 0, $arglist_next33 = 0, $arglist_next6 = 0, $arglist_next68 = 0, $arglist_next71 = 0, $arglist_next74 = 0, $arglist_next77 = 0, $arglist_next80 = 0, $arglist_next83 = 0;
 var $arglist_next86 = 0, $arglist_next89 = 0, $arglist_next9 = 0, $arglist_next92 = 0, $arglist_next95 = 0, $argpos$0 = 0, $bs$059 = 0, $bs$165 = 0, $charfmt = 0, $cnt$0 = 0, $cnt$1 = 0, $fl$039104 = 0, $fl$043 = 0, $fl$1 = 0, $i$01$i = 0, $i$01$i12 = 0, $i$233 = 0, $i$332 = 0, $isdigit = 0, $isdigittmp = 0;
 var $l$0 = 0, $l$1$lcssa110 = 0, $l$1$w$1 = 0, $l$158 = 0, $l$264 = 0, $l10n$0 = 0, $l10n$0$phi = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $p$0 = 0, $p$1 = 0, $p$1$w$1 = 0, $sext = 0, $sext30 = 0, $st$0 = 0, $storemerge = 0, $storemerge437106 = 0, $storemerge442 = 0, $storemerge8 = 0;
 var $t$0 = 0, $vararg_buffer61 = 0, $vararg_ptr34 = 0, $vararg_ptr38 = 0, $vararg_ptr42 = 0, $vararg_ptr46 = 0, $vararg_ptr50 = 0, $vararg_ptr51 = 0, $vararg_ptr52 = 0, $vararg_ptr53 = 0, $vararg_ptr54 = 0, $vararg_ptr55 = 0, $vararg_ptr59 = 0, $vararg_ptr60 = 0, $vararg_ptr64 = 0, $vararg_ptr65 = 0, $w$0 = 0, $w$1 = 0, $wc = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer61 = sp;
 $charfmt = sp + 32|0;
 $wc = sp + 28|0;
 $0 = ($f|0)!=(0|0);
 $10 = $fmt;$349 = 0;$350 = 0;$cnt$0 = 0;$l$0 = 0;$l10n$0 = 0;
 L1: while(1) {
  $1 = ($cnt$0|0)>(-1);
  do {
   if ($1) {
    $2 = (2147483647 - ($cnt$0))|0;
    $3 = ($l$0|0)>($2|0);
    if (!($3)) {
     $8 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $8;
     break;
    }
    $4 = HEAP32[$f>>2]|0;
    $5 = $4 & 32;
    $6 = ($5|0)==(0);
    if ($6) {
     $7 = (___errno_location()|0);
     HEAP32[$7>>2] = 75;
     $cnt$1 = -1;
    } else {
     $cnt$1 = -1;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $9 = HEAP32[$10>>2]|0;
  $11 = ($9|0)==(0);
  if ($11) {
   label = 99;
   break;
  } else {
   $13 = $10;$351 = $9;
  }
  while(1) {
   if ((($351|0) == 37) | (($351|0) == 0)) {
    break;
   }
   $12 = (($13) + 4|0);
   $$pre = HEAP32[$12>>2]|0;
   $13 = $12;$351 = $$pre;
  }
  $14 = (_wcsspn($13,284064)|0);
  $15 = $14 >>> 1;
  $16 = (($13) + ($15<<2)|0);
  $17 = $15 << 1;
  $18 = (($13) + ($17<<2)|0);
  $19 = $16;
  $20 = $10;
  $21 = (($19) - ($20))|0;
  $22 = $21 >> 2;
  if ($0) {
   $23 = ($22|0)==(0);
   if (!($23)) {
    $$012$i = $10;$$03$i = $22;
    while(1) {
     $24 = (($$03$i) + -1)|0;
     $25 = (($$012$i) + 4|0);
     $26 = HEAP32[$$012$i>>2]|0;
     (_fputwc($26,$f)|0);
     $27 = ($24|0)==(0);
     if ($27) {
      label = 13;
      break;
     } else {
      $$012$i = $25;$$03$i = $24;
     }
    }
   }
  } else {
   label = 13;
  }
  if ((label|0) == 13) {
   label = 0;
   $28 = ($22|0)==(0);
   if (!($28)) {
    $l10n$0$phi = $l10n$0;$350$phi = $350;$349$phi = $349;$10 = $18;$cnt$0 = $cnt$1;$l$0 = $22;$l10n$0 = $l10n$0$phi;$350 = $350$phi;$349 = $349$phi;
    continue;
   }
  }
  $$sum29 = $17 | 1;
  $29 = (($13) + ($$sum29<<2)|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (_iswdigit($30)|0);
  $32 = ($31|0)==(0);
  if ($32) {
   $argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $29;
  } else {
   $$sum = (($17) + 2)|0;
   $33 = (($13) + ($$sum<<2)|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ($34|0)==(36);
   if ($35) {
    $36 = HEAP32[$29>>2]|0;
    $37 = (($36) + -48)|0;
    $$sum31 = (($17) + 3)|0;
    $38 = (($13) + ($$sum31<<2)|0);
    $argpos$0 = $37;$l10n$1 = 1;$storemerge = $38;
   } else {
    $argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $29;
   }
  }
  $39 = HEAP32[$storemerge>>2]|0;
  $40 = (($39) + -32)|0;
  $41 = ($40>>>0)<(32);
  L25: do {
   if ($41) {
    $43 = $39;$fl$043 = 0;$storemerge442 = $storemerge;
    while(1) {
     $42 = (($43) + -32)|0;
     $44 = 1 << $42;
     $45 = $44 & 75913;
     $46 = ($45|0)==(0);
     if ($46) {
      break;
     }
     $47 = $44 | $fl$043;
     $48 = (($storemerge442) + 4|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = (($49) + -32)|0;
     $51 = ($50>>>0)<(32);
     if ($51) {
      $43 = $49;$fl$043 = $47;$storemerge442 = $48;
     } else {
      $78 = $49;$fl$039104 = $47;$storemerge437106 = $48;
      label = 29;
      break L25;
     }
    }
    $52 = ($43|0)==(42);
    if ($52) {
     $53 = (($storemerge442) + 4|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = (_iswdigit($54)|0);
     $56 = ($55|0)==(0);
     if ($56) {
      label = 24;
     } else {
      $57 = (($storemerge442) + 8|0);
      $58 = HEAP32[$57>>2]|0;
      $59 = ($58|0)==(36);
      if ($59) {
       $60 = HEAP32[$53>>2]|0;
       $61 = (($60) + -48)|0;
       $62 = (($nl_type) + ($61<<2)|0);
       HEAP32[$62>>2] = 10;
       $63 = HEAP32[$53>>2]|0;
       $64 = (($63) + -48)|0;
       $65 = (($nl_arg) + ($64<<3)|0);
       $66 = $65;
       $67 = $66;
       $68 = HEAP32[$67>>2]|0;
       $69 = (($66) + 4)|0;
       $70 = $69;
       $71 = HEAP32[$70>>2]|0;
       $72 = (($storemerge442) + 12|0);
       $l10n$2 = 1;$storemerge8 = $72;$w$0 = $68;
      } else {
       label = 24;
      }
     }
     if ((label|0) == 24) {
      label = 0;
      $73 = ($l10n$1|0)==(0);
      if (!($73)) {
       $$0 = -1;
       label = 117;
       break L1;
      }
      if (!($0)) {
       $92 = $53;$fl$1 = $fl$043;$l10n$3 = 0;$w$1 = 0;
       break;
      }
      $arglist_current = HEAP32[$ap>>2]|0;
      $74 = HEAP32[$arglist_current>>2]|0;
      $arglist_next = (($arglist_current) + 4|0);
      HEAP32[$ap>>2] = $arglist_next;
      $l10n$2 = 0;$storemerge8 = $53;$w$0 = $74;
     }
     $75 = ($w$0|0)<(0);
     if ($75) {
      $76 = $fl$043 | 8192;
      $77 = (0 - ($w$0))|0;
      $92 = $storemerge8;$fl$1 = $76;$l10n$3 = $l10n$2;$w$1 = $77;
     } else {
      $92 = $storemerge8;$fl$1 = $fl$043;$l10n$3 = $l10n$2;$w$1 = $w$0;
     }
    } else {
     $78 = $43;$fl$039104 = $fl$043;$storemerge437106 = $storemerge442;
     label = 29;
    }
   } else {
    $78 = $39;$fl$039104 = 0;$storemerge437106 = $storemerge;
    label = 29;
   }
  } while(0);
  if ((label|0) == 29) {
   label = 0;
   $79 = (_iswdigit($78)|0);
   $80 = ($79|0)==(0);
   if ($80) {
    $92 = $storemerge437106;$fl$1 = $fl$039104;$l10n$3 = $l10n$1;$w$1 = 0;
   } else {
    $83 = $storemerge437106;$i$01$i = 0;
    while(1) {
     $81 = ($i$01$i*10)|0;
     $82 = HEAP32[$83>>2]|0;
     $84 = (($81) + -48)|0;
     $85 = (($84) + ($82))|0;
     $86 = (($83) + 4|0);
     $87 = HEAP32[$86>>2]|0;
     $88 = (_iswdigit($87)|0);
     $89 = ($88|0)==(0);
     if ($89) {
      break;
     } else {
      $83 = $86;$i$01$i = $85;
     }
    }
    $90 = ($85|0)<(0);
    if ($90) {
     $$0 = -1;
     label = 117;
     break;
    } else {
     $92 = $86;$fl$1 = $fl$039104;$l10n$3 = $l10n$1;$w$1 = $85;
    }
   }
  }
  $91 = HEAP32[$92>>2]|0;
  $93 = ($91|0)==(46);
  L46: do {
   if ($93) {
    $94 = (($92) + 4|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = ($95|0)==(42);
    if (!($96)) {
     $115 = (_iswdigit($95)|0);
     $116 = ($115|0)==(0);
     if ($116) {
      $352 = $94;$p$0 = 0;
      break;
     } else {
      $119 = $94;$i$01$i12 = 0;
     }
     while(1) {
      $117 = ($i$01$i12*10)|0;
      $118 = HEAP32[$119>>2]|0;
      $120 = (($117) + -48)|0;
      $121 = (($120) + ($118))|0;
      $122 = (($119) + 4|0);
      $123 = HEAP32[$122>>2]|0;
      $124 = (_iswdigit($123)|0);
      $125 = ($124|0)==(0);
      if ($125) {
       $352 = $122;$p$0 = $121;
       break L46;
      } else {
       $119 = $122;$i$01$i12 = $121;
      }
     }
    }
    $97 = (($92) + 8|0);
    $98 = HEAP32[$97>>2]|0;
    $isdigittmp = (($98) + -48)|0;
    $isdigit = ($isdigittmp>>>0)<(10);
    if ($isdigit) {
     $99 = (($92) + 12|0);
     $100 = HEAP32[$99>>2]|0;
     $101 = ($100|0)==(36);
     if ($101) {
      $102 = (($nl_type) + ($isdigittmp<<2)|0);
      HEAP32[$102>>2] = 10;
      $103 = HEAP32[$97>>2]|0;
      $104 = (($103) + -48)|0;
      $105 = (($nl_arg) + ($104<<3)|0);
      $106 = $105;
      $107 = $106;
      $108 = HEAP32[$107>>2]|0;
      $109 = (($106) + 4)|0;
      $110 = $109;
      $111 = HEAP32[$110>>2]|0;
      $112 = (($92) + 16|0);
      $352 = $112;$p$0 = $108;
      break;
     }
    }
    $113 = ($l10n$3|0)==(0);
    if (!($113)) {
     $$0 = -1;
     label = 117;
     break L1;
    }
    if ($0) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $114 = HEAP32[$arglist_current2>>2]|0;
     $arglist_next3 = (($arglist_current2) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $352 = $97;$p$0 = $114;
    } else {
     $352 = $97;$p$0 = 0;
    }
   } else {
    $352 = $92;$p$0 = -1;
   }
  } while(0);
  $127 = $352;$st$0 = 0;
  while(1) {
   $126 = HEAP32[$127>>2]|0;
   $128 = (($126) + -65)|0;
   $129 = ($128>>>0)>(57);
   if ($129) {
    $$0 = -1;
    label = 117;
    break L1;
   }
   $130 = (($127) + 4|0);
   $131 = ((284072 + (($st$0*58)|0)|0) + ($128)|0);
   $132 = HEAP8[$131>>0]|0;
   $133 = $132&255;
   $134 = (($133) + -1)|0;
   $135 = ($134>>>0)<(8);
   if ($135) {
    $127 = $130;$st$0 = $133;
   } else {
    break;
   }
  }
  $136 = ($132<<24>>24)==(0);
  if ($136) {
   $$0 = -1;
   label = 117;
   break;
  }
  $137 = ($132<<24>>24)==(19);
  $138 = ($argpos$0|0)>(-1);
  L65: do {
   if ($137) {
    if ($138) {
     $$0 = -1;
     label = 117;
     break L1;
    } else {
     $353 = $349;$354 = $350;
     label = 63;
    }
   } else {
    if ($138) {
     $139 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$139>>2] = $133;
     $140 = (($nl_arg) + ($argpos$0<<3)|0);
     $141 = $140;
     $142 = $141;
     $143 = HEAP32[$142>>2]|0;
     $144 = (($141) + 4)|0;
     $145 = $144;
     $146 = HEAP32[$145>>2]|0;
     $147 = $143;
     $353 = $146;$354 = $147;
     label = 63;
     break;
    }
    if (!($0)) {
     $$0 = 0;
     label = 117;
     break L1;
    }
    $148 = ($132&255)>(20);
    if ($148) {
     $191 = $126;$194 = $350;$273 = $349;
    } else {
     do {
      switch ($133|0) {
      case 18:  {
       $arglist_current32 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current32>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current32+4>>2];$185 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next33 = (($arglist_current32) + 8|0);
       HEAP32[$ap>>2] = $arglist_next33;
       HEAPF64[tempDoublePtr>>3] = $185;$186 = HEAP32[tempDoublePtr>>2]|0;
       $187 = HEAP32[tempDoublePtr+4>>2]|0;
       $188 = $186;
       $353 = $187;$354 = $188;
       label = 63;
       break L65;
       break;
      }
      case 10:  {
       $arglist_current8 = HEAP32[$ap>>2]|0;
       $150 = HEAP32[$arglist_current8>>2]|0;
       $arglist_next9 = (($arglist_current8) + 4|0);
       HEAP32[$ap>>2] = $arglist_next9;
       $151 = ($150|0)<(0);
       $152 = $151 << 31 >> 31;
       $153 = $150;
       $355 = $153;$356 = $152;
       label = 64;
       break L65;
       break;
      }
      case 13:  {
       $arglist_current17 = HEAP32[$ap>>2]|0;
       $163 = HEAP32[$arglist_current17>>2]|0;
       $arglist_next18 = (($arglist_current17) + 4|0);
       HEAP32[$ap>>2] = $arglist_next18;
       $164 = $163&65535;
       $165 = $164 << 16 >> 16;
       $166 = ($165|0)<(0);
       $167 = $166 << 31 >> 31;
       $sext30 = $163 << 16;
       $168 = $sext30 >> 16;
       $169 = $168;
       $355 = $169;$356 = $167;
       label = 64;
       break L65;
       break;
      }
      case 17:  {
       $arglist_current29 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current29>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current29+4>>2];$181 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next30 = (($arglist_current29) + 8|0);
       HEAP32[$ap>>2] = $arglist_next30;
       HEAPF64[tempDoublePtr>>3] = $181;$182 = HEAP32[tempDoublePtr>>2]|0;
       $183 = HEAP32[tempDoublePtr+4>>2]|0;
       $184 = $182;
       $355 = $184;$356 = $183;
       label = 64;
       break L65;
       break;
      }
      case 16:  {
       $arglist_current26 = HEAP32[$ap>>2]|0;
       $179 = HEAP32[$arglist_current26>>2]|0;
       $arglist_next27 = (($arglist_current26) + 4|0);
       HEAP32[$ap>>2] = $arglist_next27;
       $$mask$i = $179 & 255;
       $180 = $$mask$i;
       $355 = $180;$356 = 0;
       label = 64;
       break L65;
       break;
      }
      case 15:  {
       $arglist_current23 = HEAP32[$ap>>2]|0;
       $172 = HEAP32[$arglist_current23>>2]|0;
       $arglist_next24 = (($arglist_current23) + 4|0);
       HEAP32[$ap>>2] = $arglist_next24;
       $173 = $172&255;
       $174 = $173 << 24 >> 24;
       $175 = ($174|0)<(0);
       $176 = $175 << 31 >> 31;
       $sext = $172 << 24;
       $177 = $sext >> 24;
       $178 = $177;
       $355 = $178;$356 = $176;
       label = 64;
       break L65;
       break;
      }
      case 11:  {
       $arglist_current11 = HEAP32[$ap>>2]|0;
       $154 = HEAP32[$arglist_current11>>2]|0;
       $arglist_next12 = (($arglist_current11) + 4|0);
       HEAP32[$ap>>2] = $arglist_next12;
       $155 = $154;
       $355 = $155;$356 = 0;
       label = 64;
       break L65;
       break;
      }
      case 12:  {
       $arglist_current14 = HEAP32[$ap>>2]|0;
       $156 = $arglist_current14;
       $157 = $156;
       $158 = HEAP32[$157>>2]|0;
       $159 = (($156) + 4)|0;
       $160 = $159;
       $161 = HEAP32[$160>>2]|0;
       $arglist_next15 = (($arglist_current14) + 8|0);
       HEAP32[$ap>>2] = $arglist_next15;
       $162 = $158;
       $355 = $162;$356 = $161;
       label = 64;
       break L65;
       break;
      }
      case 14:  {
       $arglist_current20 = HEAP32[$ap>>2]|0;
       $170 = HEAP32[$arglist_current20>>2]|0;
       $arglist_next21 = (($arglist_current20) + 4|0);
       HEAP32[$ap>>2] = $arglist_next21;
       $$mask1$i = $170 & 65535;
       $171 = $$mask1$i;
       $355 = $171;$356 = 0;
       label = 64;
       break L65;
       break;
      }
      case 9:  {
       $arglist_current5 = HEAP32[$ap>>2]|0;
       $149 = HEAP32[$arglist_current5>>2]|0;
       $arglist_next6 = (($arglist_current5) + 4|0);
       HEAP32[$ap>>2] = $arglist_next6;
       $355 = $149;$356 = $349;
       label = 64;
       break L65;
       break;
      }
      default: {
       $355 = $350;$356 = $349;
       label = 64;
       break L65;
      }
      }
     } while(0);
    }
   }
  } while(0);
  if ((label|0) == 63) {
   label = 0;
   if ($0) {
    $355 = $354;$356 = $353;
    label = 64;
   } else {
    $10 = $130;$349 = $353;$350 = $354;$cnt$0 = $cnt$1;$l$0 = $22;$l10n$0 = $l10n$3;
    continue;
   }
  }
  if ((label|0) == 64) {
   label = 0;
   $$pre103 = HEAP32[$127>>2]|0;
   $191 = $$pre103;$194 = $355;$273 = $356;
  }
  $189 = ($st$0|0)==(0);
  if ($189) {
   $t$0 = $191;
  } else {
   $190 = $191 & 15;
   $192 = ($190|0)==(3);
   $193 = $191 & -33;
   $$ = $192 ? $193 : $191;
   $t$0 = $$;
  }
  switch ($t$0|0) {
  case 110:  {
   switch ($st$0|0) {
   case 6:  {
    HEAP32[$194>>2] = $cnt$1;
    $10 = $130;$349 = $273;$350 = $194;$cnt$0 = $cnt$1;$l$0 = $22;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   case 0:  {
    HEAP32[$194>>2] = $cnt$1;
    $10 = $130;$349 = $273;$350 = $194;$cnt$0 = $cnt$1;$l$0 = $22;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   case 1:  {
    HEAP32[$194>>2] = $cnt$1;
    $10 = $130;$349 = $273;$350 = $194;$cnt$0 = $cnt$1;$l$0 = $22;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   case 7:  {
    $203 = ($cnt$1|0)<(0);
    $204 = $203 << 31 >> 31;
    $205 = $194;
    $206 = $205;
    HEAP32[$206>>2] = $cnt$1;
    $207 = (($205) + 4)|0;
    $208 = $207;
    HEAP32[$208>>2] = $204;
    $10 = $130;$349 = $273;$350 = $194;$cnt$0 = $cnt$1;$l$0 = $22;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   case 2:  {
    $195 = ($cnt$1|0)<(0);
    $196 = $195 << 31 >> 31;
    $197 = $194;
    $198 = $197;
    HEAP32[$198>>2] = $cnt$1;
    $199 = (($197) + 4)|0;
    $200 = $199;
    HEAP32[$200>>2] = $196;
    $10 = $130;$349 = $273;$350 = $194;$cnt$0 = $cnt$1;$l$0 = $22;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   case 3:  {
    $201 = $cnt$1&65535;
    HEAP16[$194>>1] = $201;
    $10 = $130;$349 = $273;$350 = $194;$cnt$0 = $cnt$1;$l$0 = $22;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   case 4:  {
    $202 = $cnt$1&255;
    HEAP8[$194>>0] = $202;
    $10 = $130;$349 = $273;$350 = $194;$cnt$0 = $cnt$1;$l$0 = $22;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   default: {
    $10 = $130;$349 = $273;$350 = $194;$cnt$0 = $cnt$1;$l$0 = $22;$l10n$0 = $l10n$3;
    continue L1;
   }
   }
   break;
  }
  case 115:  {
   $233 = ($p$0|0)<(0);
   $$p$0 = $233 ? 2147483647 : $p$0;
   $234 = ($$p$0|0)>(0);
   L103: do {
    if ($234) {
     $bs$059 = $194;$l$158 = 0;
     while(1) {
      $235 = (_mbtowc($wc,$bs$059,4)|0);
      $236 = ($235|0)>(0);
      if (!($236)) {
       break;
      }
      $237 = (($bs$059) + ($235)|0);
      $238 = (($l$158) + 1)|0;
      $239 = ($238|0)<($$p$0|0);
      if ($239) {
       $bs$059 = $237;$l$158 = $238;
      } else {
       $l$1$lcssa110 = $238;
       break L103;
      }
     }
     $240 = ($235|0)<(0);
     if ($240) {
      $$0 = -1;
      label = 117;
      break L1;
     } else {
      $l$1$lcssa110 = $l$158;
     }
    } else {
     $l$1$lcssa110 = 0;
    }
   } while(0);
   $241 = ($w$1|0)<($l$1$lcssa110|0);
   $l$1$w$1 = $241 ? $l$1$lcssa110 : $w$1;
   $242 = $fl$1 & 8192;
   $243 = ($242|0)!=(0);
   if (!($243)) {
    $244 = (($l$1$w$1) - ($l$1$lcssa110))|0;
    HEAP32[$vararg_buffer61>>2] = $244;
    $vararg_ptr42 = (($vararg_buffer61) + 4|0);
    HEAP32[$vararg_ptr42>>2] = 284544;
    (_fprintf(($f|0),(284536|0),($vararg_buffer61|0))|0);
   }
   $245 = ($l$1$lcssa110|0)==(0);
   if (!($245)) {
    $bs$165 = $194;$l$264 = $l$1$lcssa110;
    while(1) {
     $246 = (($l$264) + -1)|0;
     $247 = (_mbtowc($wc,$bs$165,4)|0);
     $248 = (($bs$165) + ($247)|0);
     $249 = HEAP32[$wc>>2]|0;
     (_fputwc($249,$f)|0);
     $250 = ($246|0)==(0);
     if ($250) {
      break;
     } else {
      $bs$165 = $248;$l$264 = $246;
     }
    }
   }
   if (!($243)) {
    $10 = $130;$349 = $273;$350 = $194;$cnt$0 = $cnt$1;$l$0 = $l$1$w$1;$l10n$0 = $l10n$3;
    continue L1;
   }
   $251 = (($l$1$w$1) - ($l$1$lcssa110))|0;
   HEAP32[$vararg_buffer61>>2] = $251;
   $vararg_ptr46 = (($vararg_buffer61) + 4|0);
   HEAP32[$vararg_ptr46>>2] = 284544;
   (_fprintf(($f|0),(284536|0),($vararg_buffer61|0))|0);
   $10 = $130;$349 = $273;$350 = $194;$cnt$0 = $cnt$1;$l$0 = $l$1$w$1;$l10n$0 = $l10n$3;
   continue L1;
   break;
  }
  case 83:  {
   $212 = (_wmemchr($194,0,$p$0)|0);
   $213 = ($212|0)==(0|0);
   if ($213) {
    $p$1 = $p$0;
   } else {
    $214 = $212;
    $215 = $194;
    $216 = (($214) - ($215))|0;
    $217 = $216 >> 2;
    $p$1 = $217;
   }
   $218 = ($w$1|0)<($p$1|0);
   $p$1$w$1 = $218 ? $p$1 : $w$1;
   $219 = $fl$1 & 8192;
   $220 = ($219|0)==(0);
   if ($220) {
    $221 = (($p$1$w$1) - ($p$1))|0;
    HEAP32[$vararg_buffer61>>2] = $221;
    $vararg_ptr34 = (($vararg_buffer61) + 4|0);
    HEAP32[$vararg_ptr34>>2] = 284544;
    (_fprintf(($f|0),(284536|0),($vararg_buffer61|0))|0);
    $222 = ($p$1|0)==(0);
    if ($222) {
     $10 = $130;$349 = $273;$350 = $194;$cnt$0 = $cnt$1;$l$0 = $p$1$w$1;$l10n$0 = $l10n$3;
     continue L1;
    } else {
     $$012$i17 = $194;$$03$i16 = $p$1;
    }
    while(1) {
     $223 = (($$03$i16) + -1)|0;
     $224 = (($$012$i17) + 4|0);
     $225 = HEAP32[$$012$i17>>2]|0;
     (_fputwc($225,$f)|0);
     $226 = ($223|0)==(0);
     if ($226) {
      $10 = $130;$349 = $273;$350 = $194;$cnt$0 = $cnt$1;$l$0 = $p$1$w$1;$l10n$0 = $l10n$3;
      continue L1;
     } else {
      $$012$i17 = $224;$$03$i16 = $223;
     }
    }
   }
   $227 = ($p$1|0)==(0);
   if (!($227)) {
    $$012$i21 = $194;$$03$i20 = $p$1;
    while(1) {
     $228 = (($$03$i20) + -1)|0;
     $229 = (($$012$i21) + 4|0);
     $230 = HEAP32[$$012$i21>>2]|0;
     (_fputwc($230,$f)|0);
     $231 = ($228|0)==(0);
     if ($231) {
      break;
     } else {
      $$012$i21 = $229;$$03$i20 = $228;
     }
    }
   }
   $232 = (($p$1$w$1) - ($p$1))|0;
   HEAP32[$vararg_buffer61>>2] = $232;
   $vararg_ptr38 = (($vararg_buffer61) + 4|0);
   HEAP32[$vararg_ptr38>>2] = 284544;
   (_fprintf(($f|0),(284536|0),($vararg_buffer61|0))|0);
   $10 = $130;$349 = $273;$350 = $194;$cnt$0 = $cnt$1;$l$0 = $p$1$w$1;$l10n$0 = $l10n$3;
   continue L1;
   break;
  }
  case 99:  {
   $209 = $194;
   $210 = (_btowc($209)|0);
   (_fputwc($210,$f)|0);
   $10 = $130;$349 = $273;$350 = $194;$cnt$0 = $cnt$1;$l$0 = 1;$l10n$0 = $l10n$3;
   continue L1;
   break;
  }
  case 67:  {
   $211 = $194;
   (_fputwc($211,$f)|0);
   $10 = $130;$349 = $273;$350 = $194;$cnt$0 = $cnt$1;$l$0 = 1;$l10n$0 = $l10n$3;
   continue L1;
   break;
  }
  default: {
   $252 = $fl$1 >>> 3;
   $$lobit = $252 & 1;
   $253 = $$lobit ^ 1;
   $254 = (284576 + ($253)|0);
   $255 = $fl$1 >>> 11;
   $$lobit5 = $255 & 1;
   $256 = $$lobit5 ^ 1;
   $257 = (284584 + ($256)|0);
   $258 = $fl$1 >>> 13;
   $$lobit6 = $258 & 1;
   $259 = $$lobit6 ^ 1;
   $260 = (284592 + ($259)|0);
   $261 = $fl$1 & 1;
   $262 = $261 ^ 1;
   $263 = (284600 + ($262)|0);
   $264 = $fl$1 >>> 16;
   $$lobit7 = $264 & 1;
   $265 = $$lobit7 ^ 1;
   $266 = (284608 + ($265)|0);
   $267 = $t$0 | 32;
   $268 = (($267) + -97)|0;
   $269 = (284616 + ($268)|0);
   $270 = HEAP8[$269>>0]|0;
   $271 = $270 << 24 >> 24;
   HEAP32[$vararg_buffer61>>2] = $254;
   $vararg_ptr50 = (($vararg_buffer61) + 4|0);
   HEAP32[$vararg_ptr50>>2] = $257;
   $vararg_ptr51 = (($vararg_buffer61) + 8|0);
   HEAP32[$vararg_ptr51>>2] = $260;
   $vararg_ptr52 = (($vararg_buffer61) + 12|0);
   HEAP32[$vararg_ptr52>>2] = $263;
   $vararg_ptr53 = (($vararg_buffer61) + 16|0);
   HEAP32[$vararg_ptr53>>2] = $266;
   $vararg_ptr54 = (($vararg_buffer61) + 20|0);
   HEAP32[$vararg_ptr54>>2] = $271;
   $vararg_ptr55 = (($vararg_buffer61) + 24|0);
   HEAP32[$vararg_ptr55>>2] = $t$0;
   (_snprintf($charfmt,16,284552,$vararg_buffer61)|0);
   switch ($267|0) {
   case 112: case 120: case 117: case 111: case 105: case 100:  {
    $276 = $194;
    HEAP32[$vararg_buffer61>>2] = $w$1;
    $vararg_ptr64 = (($vararg_buffer61) + 4|0);
    HEAP32[$vararg_ptr64>>2] = $p$0;
    $vararg_ptr65 = (($vararg_buffer61) + 8|0);
    $277 = $vararg_ptr65;
    $278 = $277;
    HEAP32[$278>>2] = $276;
    $279 = (($277) + 4)|0;
    $280 = $279;
    HEAP32[$280>>2] = $273;
    $281 = (_fprintf(($f|0),($charfmt|0),($vararg_buffer61|0))|0);
    $10 = $130;$349 = $273;$350 = $194;$cnt$0 = $cnt$1;$l$0 = $281;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   case 103: case 102: case 101: case 97:  {
    $272 = $194;
    HEAP32[tempDoublePtr>>2] = $272;HEAP32[tempDoublePtr+4>>2] = $273;$274 = +HEAPF64[tempDoublePtr>>3];
    HEAP32[$vararg_buffer61>>2] = $w$1;
    $vararg_ptr59 = (($vararg_buffer61) + 4|0);
    HEAP32[$vararg_ptr59>>2] = $p$0;
    $vararg_ptr60 = (($vararg_buffer61) + 8|0);
    HEAPF64[tempDoublePtr>>3]=$274;HEAP32[$vararg_ptr60>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr60+4>>2]=HEAP32[tempDoublePtr+4>>2];
    $275 = (_fprintf(($f|0),($charfmt|0),($vararg_buffer61|0))|0);
    $10 = $130;$349 = $273;$350 = $194;$cnt$0 = $cnt$1;$l$0 = $275;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   default: {
    $10 = $130;$349 = $273;$350 = $194;$cnt$0 = $cnt$1;$l$0 = $22;$l10n$0 = $l10n$3;
    continue L1;
   }
   }
  }
  }
 }
 if ((label|0) == 99) {
  $282 = ($f|0)==(0|0);
  if (!($282)) {
   $$0 = $cnt$1;
   STACKTOP = sp;return ($$0|0);
  }
  $283 = ($l10n$0|0)==(0);
  if ($283) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $i$233 = 1;
  }
  while(1) {
   $284 = (($nl_type) + ($i$233<<2)|0);
   $285 = HEAP32[$284>>2]|0;
   $286 = ($285|0)==(0);
   if ($286) {
    $i$332 = $i$233;
    break;
   }
   $287 = (($nl_arg) + ($i$233<<3)|0);
   $288 = ($285>>>0)>(20);
   L154: do {
    if (!($288)) {
     do {
      switch ($285|0) {
      case 15:  {
       $arglist_current85 = HEAP32[$ap>>2]|0;
       $326 = HEAP32[$arglist_current85>>2]|0;
       $arglist_next86 = (($arglist_current85) + 4|0);
       HEAP32[$ap>>2] = $arglist_next86;
       $327 = $326&255;
       $328 = $327 << 24 >> 24;
       $329 = ($328|0)<(0);
       $330 = $329 << 31 >> 31;
       $331 = $287;
       $332 = $331;
       HEAP32[$332>>2] = $328;
       $333 = (($331) + 4)|0;
       $334 = $333;
       HEAP32[$334>>2] = $330;
       break L154;
       break;
      }
      case 9:  {
       $arglist_current67 = HEAP32[$ap>>2]|0;
       $289 = HEAP32[$arglist_current67>>2]|0;
       $arglist_next68 = (($arglist_current67) + 4|0);
       HEAP32[$ap>>2] = $arglist_next68;
       HEAP32[$287>>2] = $289;
       break L154;
       break;
      }
      case 10:  {
       $arglist_current70 = HEAP32[$ap>>2]|0;
       $290 = HEAP32[$arglist_current70>>2]|0;
       $arglist_next71 = (($arglist_current70) + 4|0);
       HEAP32[$ap>>2] = $arglist_next71;
       $291 = ($290|0)<(0);
       $292 = $291 << 31 >> 31;
       $293 = $287;
       $294 = $293;
       HEAP32[$294>>2] = $290;
       $295 = (($293) + 4)|0;
       $296 = $295;
       HEAP32[$296>>2] = $292;
       break L154;
       break;
      }
      case 11:  {
       $arglist_current73 = HEAP32[$ap>>2]|0;
       $297 = HEAP32[$arglist_current73>>2]|0;
       $arglist_next74 = (($arglist_current73) + 4|0);
       HEAP32[$ap>>2] = $arglist_next74;
       $298 = $287;
       $299 = $298;
       HEAP32[$299>>2] = $297;
       $300 = (($298) + 4)|0;
       $301 = $300;
       HEAP32[$301>>2] = 0;
       break L154;
       break;
      }
      case 13:  {
       $arglist_current79 = HEAP32[$ap>>2]|0;
       $312 = HEAP32[$arglist_current79>>2]|0;
       $arglist_next80 = (($arglist_current79) + 4|0);
       HEAP32[$ap>>2] = $arglist_next80;
       $313 = $312&65535;
       $314 = $313 << 16 >> 16;
       $315 = ($314|0)<(0);
       $316 = $315 << 31 >> 31;
       $317 = $287;
       $318 = $317;
       HEAP32[$318>>2] = $314;
       $319 = (($317) + 4)|0;
       $320 = $319;
       HEAP32[$320>>2] = $316;
       break L154;
       break;
      }
      case 18:  {
       $arglist_current94 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current94>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current94+4>>2];$341 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next95 = (($arglist_current94) + 8|0);
       HEAP32[$ap>>2] = $arglist_next95;
       HEAPF64[$287>>3] = $341;
       break L154;
       break;
      }
      case 14:  {
       $arglist_current82 = HEAP32[$ap>>2]|0;
       $321 = HEAP32[$arglist_current82>>2]|0;
       $arglist_next83 = (($arglist_current82) + 4|0);
       HEAP32[$ap>>2] = $arglist_next83;
       $$mask1$i24 = $321 & 65535;
       $322 = $287;
       $323 = $322;
       HEAP32[$323>>2] = $$mask1$i24;
       $324 = (($322) + 4)|0;
       $325 = $324;
       HEAP32[$325>>2] = 0;
       break L154;
       break;
      }
      case 16:  {
       $arglist_current88 = HEAP32[$ap>>2]|0;
       $335 = HEAP32[$arglist_current88>>2]|0;
       $arglist_next89 = (($arglist_current88) + 4|0);
       HEAP32[$ap>>2] = $arglist_next89;
       $$mask$i25 = $335 & 255;
       $336 = $287;
       $337 = $336;
       HEAP32[$337>>2] = $$mask$i25;
       $338 = (($336) + 4)|0;
       $339 = $338;
       HEAP32[$339>>2] = 0;
       break L154;
       break;
      }
      case 17:  {
       $arglist_current91 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current91>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current91+4>>2];$340 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next92 = (($arglist_current91) + 8|0);
       HEAP32[$ap>>2] = $arglist_next92;
       HEAPF64[$287>>3] = $340;
       break L154;
       break;
      }
      case 12:  {
       $arglist_current76 = HEAP32[$ap>>2]|0;
       $302 = $arglist_current76;
       $303 = $302;
       $304 = HEAP32[$303>>2]|0;
       $305 = (($302) + 4)|0;
       $306 = $305;
       $307 = HEAP32[$306>>2]|0;
       $arglist_next77 = (($arglist_current76) + 8|0);
       HEAP32[$ap>>2] = $arglist_next77;
       $308 = $287;
       $309 = $308;
       HEAP32[$309>>2] = $304;
       $310 = (($308) + 4)|0;
       $311 = $310;
       HEAP32[$311>>2] = $307;
       break L154;
       break;
      }
      default: {
       break L154;
      }
      }
     } while(0);
    }
   } while(0);
   $342 = (($i$233) + 1)|0;
   $343 = ($342|0)<(10);
   if ($343) {
    $i$233 = $342;
   } else {
    $$0 = 1;
    label = 117;
    break;
   }
  }
  if ((label|0) == 117) {
   STACKTOP = sp;return ($$0|0);
  }
  while(1) {
   $346 = (($nl_type) + ($i$332<<2)|0);
   $347 = HEAP32[$346>>2]|0;
   $348 = ($347|0)==(0);
   $345 = (($i$332) + 1)|0;
   if (!($348)) {
    $$0 = -1;
    label = 117;
    break;
   }
   $344 = ($345|0)<(10);
   if ($344) {
    $i$332 = $345;
   } else {
    $$0 = 1;
    label = 117;
    break;
   }
  }
  if ((label|0) == 117) {
   STACKTOP = sp;return ($$0|0);
  }
 }
 else if ((label|0) == 117) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _vswprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_fopen((284640|0),(284680|0))|0);
 $1 = (_vfwprintf($0,$fmt,$ap)|0);
 (_fclose(($0|0))|0);
 $2 = (_fopen((284640|0),(284688|0))|0);
 $3 = (($1) + 1)|0;
 $4 = STACKTOP; STACKTOP = STACKTOP + ((((1*$3)|0)+15)&-16)|0;;
 (_fread(($4|0),1,($1|0),($2|0))|0);
 (_fclose(($2|0))|0);
 (_remove((284640|0))|0);
 $5 = (($4) + ($1)|0);
 HEAP8[$5>>0] = 0;
 $6 = (_mbstowcs($s,$4,$n)|0);
 $7 = ($6>>>0)>=($n>>>0);
 $8 = $7 ? -1 : $6;
 STACKTOP = sp;return ($8|0);
}
function _vwprintf($fmt,$ap) {
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[_stdout>>2]|0;
 $1 = (_vfwprintf($0,$fmt,$ap)|0);
 STACKTOP = sp;return ($1|0);
}
function _wprintf($fmt,$varargs) {
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vwprintf($fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function ___fputwc_unlocked($c,$f) {
 $c = $c|0;
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, $isascii = 0, $mbc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $mbc = sp;
 $isascii = ($c>>>0)<(128);
 L1: do {
  if ($isascii) {
   $0 = (_fputc(($c|0),($f|0))|0);
   $$0 = $0;
  } else {
   $1 = (_wctomb($mbc,$c)|0);
   $2 = ($1|0)<(0);
   if ($2) {
    $$0 = -1;
   } else {
    $3 = ($1|0)>(0);
    if ($3) {
     $i$01 = 0;
     while(1) {
      $6 = (($mbc) + ($i$01)|0);
      $7 = HEAP8[$6>>0]|0;
      $8 = $7 << 24 >> 24;
      $9 = (_fputc(($8|0),($f|0))|0);
      $10 = ($9|0)==(-1);
      $5 = (($i$01) + 1)|0;
      if ($10) {
       $$0 = -1;
       break L1;
      }
      $4 = ($5|0)<($1|0);
      if ($4) {
       $i$01 = $5;
      } else {
       $$0 = $c;
       break;
      }
     }
    } else {
     $$0 = $c;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _fputwc($c,$f) {
 $c = $c|0;
 $f = $f|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01$i = 0, $isascii$i = 0, $mbc$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $mbc$i = sp;
 $isascii$i = ($c>>>0)<(128);
 L1: do {
  if ($isascii$i) {
   $0 = (_fputc(($c|0),($f|0))|0);
   $$0$i = $0;
  } else {
   $1 = (_wctomb($mbc$i,$c)|0);
   $2 = ($1|0)<(0);
   if ($2) {
    $$0$i = -1;
   } else {
    $3 = ($1|0)>(0);
    if ($3) {
     $i$01$i = 0;
     while(1) {
      $6 = (($mbc$i) + ($i$01$i)|0);
      $7 = HEAP8[$6>>0]|0;
      $8 = $7 << 24 >> 24;
      $9 = (_fputc(($8|0),($f|0))|0);
      $10 = ($9|0)==(-1);
      $5 = (($i$01$i) + 1)|0;
      if ($10) {
       $$0$i = -1;
       break L1;
      }
      $4 = ($5|0)<($1|0);
      if ($4) {
       $i$01$i = $5;
      } else {
       $$0$i = $c;
       break;
      }
     }
    } else {
     $$0$i = $c;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0$i|0);
}
function _fputws($ws,$f) {
 $ws = $ws|0;
 $f = $f|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $buf = 0, $l$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040|0;
 $0 = sp;
 $buf = sp + 8|0;
 HEAP32[$0>>2] = $ws;
 $2 = $ws;$l$0 = 0;
 while(1) {
  $1 = ($2|0)==(0|0);
  if ($1) {
   $$0 = $l$0;
   break;
  }
  $3 = (_wcsrtombs($buf,$0,1024,0)|0);
  $4 = (($3) + 1)|0;
  $5 = ($4>>>0)>(1);
  if (!($5)) {
   $$0 = $3;
   break;
  }
  $6 = (_fwrite(($buf|0),1,($3|0),($f|0))|0);
  $7 = ($6>>>0)<($3>>>0);
  if ($7) {
   $$0 = -1;
   break;
  }
  $$pre = HEAP32[$0>>2]|0;
  $2 = $$pre;$l$0 = $3;
 }
 STACKTOP = sp;return ($$0|0);
}
function _sscanf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsscanf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _vasprintf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap2 = 0, $vacopy_currentptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ap2 = sp;
 $0 = (_malloc(240)|0);
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $$0 = -1;
  } else {
   $vacopy_currentptr = HEAP32[$ap>>2]|0;
   HEAP32[$ap2>>2] = $vacopy_currentptr;
   $2 = (_vsnprintf($0,240,$fmt,$ap2)|0);
   $3 = ($2>>>0)<(240);
   if ($3) {
    $4 = (($2) + 1)|0;
    $5 = (_realloc($0,$4)|0);
    $6 = ($5|0)!=(0|0);
    $7 = $6 ? $5 : $0;
    HEAP32[$s>>2] = $7;
    $$0 = $2;
    break;
   }
   _free($0);
   $8 = ($2|0)<(0);
   if ($8) {
    $$0 = -1;
   } else {
    $9 = (($2) + 1)|0;
    $10 = (_malloc($9)|0);
    HEAP32[$s>>2] = $10;
    $11 = ($10|0)==(0|0);
    if ($11) {
     $$0 = -1;
    } else {
     $12 = (_vsnprintf($10,$9,$fmt,$ap)|0);
     $$0 = $12;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _MUSL_vfscanf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$10 = 0, $$4 = 0, $$7 = 0, $$8 = 0, $$9 = 0, $$lcssa18 = 0, $$matches$0 = 0, $$not = 0, $$pre = 0, $$pre$phi241Z2D = 0, $$pre221 = 0, $$pre234 = 0, $$pre235 = 0, $$pre236 = 0, $$pre237 = 0, $$pre238 = 0, $$pre239 = 0, $$pre240 = 0, $$size$0 = 0;
 var $$width$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0.0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0.0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $alloc$0 = 0, $alloc$1 = 0, $alloc$2 = 0, $ap2$i = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $base$0 = 0, $c$027 = 0, $dest$0 = 0, $factor = 0;
 var $factor14 = 0, $i$0$i = 0, $i$0$ph = 0, $i$0$ph46 = 0, $i$0$ph46$lcssa = 0, $i$0$ph46$us53 = 0, $i$1$lcssa = 0, $i$2 = 0, $i$2$ph = 0, $i$2$ph$phi = 0, $i$3 = 0, $i$4 = 0, $invert$0 = 0, $isdigit = 0, $isdigit3 = 0, $isdigit320 = 0, $isdigittmp = 0, $isdigittmp2 = 0, $isdigittmp219 = 0, $k$0$ph = 0;
 var $k$1$ph = 0, $matches$0$ = 0, $matches$0130 = 0, $matches$1 = 0, $matches$2 = 0, $matches$3 = 0, $not$ = 0, $or$cond$us = 0, $or$cond5 = 0, $or$cond6 = 0, $p$0136 = 0, $p$1 = 0, $p$10 = 0, $p$11 = 0, $p$2 = 0, $p$3$lcssa = 0, $p$321 = 0, $p$4 = 0, $p$5 = 0, $p$6 = 0;
 var $p$7 = 0, $p$7$ph = 0, $p$8 = 0, $p$9 = 0, $pos$0135 = 0, $pos$1 = 0, $pos$2 = 0, $s$0128 = 0, $s$1 = 0, $s$2$ph = 0, $s$3 = 0, $s$4 = 0, $s$5 = 0, $s$6 = 0, $s$7 = 0, $scanset = 0, $size$0 = 0, $st = 0, $vacopy_currentptr = 0, $wc = 0;
 var $wcs$0129 = 0, $wcs$1 = 0, $wcs$2 = 0, $wcs$3$ph = 0, $wcs$3$ph160 = 0, $wcs$4 = 0, $wcs$5 = 0, $wcs$6 = 0, $wcs$7 = 0, $wcs$8 = 0, $width$0$lcssa = 0, $width$022 = 0, $width$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0;
 $ap2$i = sp + 16|0;
 $st = sp + 8|0;
 $scanset = sp + 33|0;
 $wc = sp;
 $0 = sp + 32|0;
 $1 = HEAP8[$fmt>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $matches$3 = 0;
  STACKTOP = sp;return ($matches$3|0);
 }
 $3 = (($f) + 4|0);
 $4 = (($f) + 100|0);
 $5 = (($f) + 108|0);
 $6 = (($f) + 8|0);
 $7 = (($scanset) + 10|0);
 $8 = (($scanset) + 33|0);
 $9 = (($st) + 4|0);
 $10 = (($scanset) + 46|0);
 $11 = (($scanset) + 94|0);
 $13 = $1;$matches$0130 = 0;$p$0136 = $fmt;$pos$0135 = 0;$s$0128 = 0;$wcs$0129 = 0;
 L4: while(1) {
  $12 = $13&255;
  $14 = (_isspace($12)|0);
  $15 = ($14|0)==(0);
  L6: do {
   if ($15) {
    $42 = HEAP8[$p$0136>>0]|0;
    $43 = ($42<<24>>24)==(37);
    L21: do {
     if ($43) {
      $44 = (($p$0136) + 1|0);
      $45 = HEAP8[$44>>0]|0;
      do {
       if ((($45<<24>>24) == 42)) {
        $65 = (($p$0136) + 2|0);
        $dest$0 = 0;$p$2 = $65;
       } else if ((($45<<24>>24) == 37)) {
        break L21;
       } else {
        $66 = $45&255;
        $isdigittmp = (($66) + -48)|0;
        $isdigit = ($isdigittmp>>>0)<(10);
        if ($isdigit) {
         $67 = (($p$0136) + 2|0);
         $68 = HEAP8[$67>>0]|0;
         $69 = ($68<<24>>24)==(36);
         if ($69) {
          $vacopy_currentptr = HEAP32[$ap>>2]|0;
          HEAP32[$ap2$i>>2] = $vacopy_currentptr;
          $i$0$i = $isdigittmp;
          while(1) {
           $70 = ($i$0$i>>>0)>(1);
           $arglist_current = HEAP32[$ap2$i>>2]|0;
           $71 = HEAP32[$arglist_current>>2]|0;
           $arglist_next = (($arglist_current) + 4|0);
           HEAP32[$ap2$i>>2] = $arglist_next;
           $72 = (($i$0$i) + -1)|0;
           if ($70) {
            $i$0$i = $72;
           } else {
            break;
           }
          }
          $73 = (($p$0136) + 3|0);
          $dest$0 = $71;$p$2 = $73;
          break;
         }
        }
        $arglist_current2 = HEAP32[$ap>>2]|0;
        $74 = HEAP32[$arglist_current2>>2]|0;
        $arglist_next3 = (($arglist_current2) + 4|0);
        HEAP32[$ap>>2] = $arglist_next3;
        $dest$0 = $74;$p$2 = $44;
       }
      } while(0);
      $75 = HEAP8[$p$2>>0]|0;
      $76 = $75&255;
      $isdigittmp219 = (($76) + -48)|0;
      $isdigit320 = ($isdigittmp219>>>0)<(10);
      if ($isdigit320) {
       $80 = $76;$p$321 = $p$2;$width$022 = 0;
       while(1) {
        $77 = ($width$022*10)|0;
        $78 = (($77) + -48)|0;
        $79 = (($78) + ($80))|0;
        $81 = (($p$321) + 1|0);
        $82 = HEAP8[$81>>0]|0;
        $83 = $82&255;
        $isdigittmp2 = (($83) + -48)|0;
        $isdigit3 = ($isdigittmp2>>>0)<(10);
        if ($isdigit3) {
         $80 = $83;$p$321 = $81;$width$022 = $79;
        } else {
         $$lcssa18 = $82;$p$3$lcssa = $81;$width$0$lcssa = $79;
         break;
        }
       }
      } else {
       $$lcssa18 = $75;$p$3$lcssa = $p$2;$width$0$lcssa = 0;
      }
      $84 = ($$lcssa18<<24>>24)==(109);
      if ($84) {
       $85 = ($dest$0|0)!=(0|0);
       $86 = $85&1;
       $87 = (($p$3$lcssa) + 1|0);
       $$pre = HEAP8[$87>>0]|0;
       $90 = $$pre;$alloc$0 = $86;$p$4 = $87;$s$1 = 0;$wcs$1 = 0;
      } else {
       $90 = $$lcssa18;$alloc$0 = 0;$p$4 = $p$3$lcssa;$s$1 = $s$0128;$wcs$1 = $wcs$0129;
      }
      $88 = (($p$4) + 1|0);
      $89 = $90&255;
      switch ($89|0) {
      case 106:  {
       $p$5 = $88;$size$0 = 3;
       break;
      }
      case 110: case 112: case 67: case 83: case 91: case 99: case 115: case 88: case 71: case 70: case 69: case 65: case 103: case 102: case 101: case 97: case 120: case 117: case 111: case 105: case 100:  {
       $p$5 = $p$4;$size$0 = 0;
       break;
      }
      case 108:  {
       $94 = HEAP8[$88>>0]|0;
       $95 = ($94<<24>>24)==(108);
       $96 = (($p$4) + 2|0);
       $$9 = $95 ? $96 : $88;
       $$10 = $95 ? 3 : 1;
       $p$5 = $$9;$size$0 = $$10;
       break;
      }
      case 116: case 122:  {
       $p$5 = $88;$size$0 = 1;
       break;
      }
      case 76:  {
       $p$5 = $88;$size$0 = 2;
       break;
      }
      case 104:  {
       $91 = HEAP8[$88>>0]|0;
       $92 = ($91<<24>>24)==(104);
       $93 = (($p$4) + 2|0);
       $$7 = $92 ? $93 : $88;
       $$8 = $92 ? -2 : -1;
       $p$5 = $$7;$size$0 = $$8;
       break;
      }
      default: {
       $alloc$1 = $alloc$0;$s$6 = $s$1;$wcs$7 = $wcs$1;
       label = 162;
       break L4;
      }
      }
      $97 = HEAP8[$p$5>>0]|0;
      $98 = $97&255;
      $99 = $98 & 47;
      $100 = ($99|0)==(3);
      $101 = $98 | 32;
      $$ = $100 ? $101 : $98;
      $$size$0 = $100 ? 1 : $size$0;
      if ((($$|0) == 110)) {
       $103 = ($pos$0135|0)<(0);
       $104 = $103 << 31 >> 31;
       $105 = ($dest$0|0)==(0|0);
       if ($105) {
        $matches$1 = $matches$0130;$p$11 = $p$5;$pos$2 = $pos$0135;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
       }
       switch ($$size$0|0) {
       case 0:  {
        HEAP32[$dest$0>>2] = $pos$0135;
        $matches$1 = $matches$0130;$p$11 = $p$5;$pos$2 = $pos$0135;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       case -2:  {
        $106 = $pos$0135&255;
        HEAP8[$dest$0>>0] = $106;
        $matches$1 = $matches$0130;$p$11 = $p$5;$pos$2 = $pos$0135;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       case -1:  {
        $107 = $pos$0135&65535;
        HEAP16[$dest$0>>1] = $107;
        $matches$1 = $matches$0130;$p$11 = $p$5;$pos$2 = $pos$0135;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       case 1:  {
        HEAP32[$dest$0>>2] = $pos$0135;
        $matches$1 = $matches$0130;$p$11 = $p$5;$pos$2 = $pos$0135;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       case 3:  {
        $108 = $dest$0;
        $109 = $108;
        HEAP32[$109>>2] = $pos$0135;
        $110 = (($108) + 4)|0;
        $111 = $110;
        HEAP32[$111>>2] = $104;
        $matches$1 = $matches$0130;$p$11 = $p$5;$pos$2 = $pos$0135;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       default: {
        $matches$1 = $matches$0130;$p$11 = $p$5;$pos$2 = $pos$0135;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
       }
       }
      } else if ((($$|0) == 91)) {
       $pos$1 = $pos$0135;$width$1 = $width$0$lcssa;
      } else if ((($$|0) == 99)) {
       $102 = ($width$0$lcssa|0)<(1);
       $$width$0 = $102 ? 1 : $width$0$lcssa;
       $pos$1 = $pos$0135;$width$1 = $$width$0;
      } else {
       ___shlim($f,0);
       while(1) {
        $112 = HEAP32[$3>>2]|0;
        $113 = HEAP32[$4>>2]|0;
        $114 = ($112>>>0)<($113>>>0);
        if ($114) {
         $115 = (($112) + 1|0);
         HEAP32[$3>>2] = $115;
         $116 = HEAP8[$112>>0]|0;
         $117 = $116&255;
         $119 = $117;
        } else {
         $118 = (___shgetc($f)|0);
         $119 = $118;
        }
        $120 = (_isspace($119)|0);
        $121 = ($120|0)==(0);
        if ($121) {
         break;
        }
       }
       $122 = HEAP32[$4>>2]|0;
       $123 = ($122|0)==(0|0);
       $$pre234 = HEAP32[$3>>2]|0;
       if ($123) {
        $128 = $$pre234;
       } else {
        $124 = (($$pre234) + -1|0);
        HEAP32[$3>>2] = $124;
        $128 = $124;
       }
       $125 = HEAP32[$5>>2]|0;
       $126 = HEAP32[$6>>2]|0;
       $127 = $128;
       $129 = $126;
       $130 = (($125) + ($pos$0135))|0;
       $131 = (($130) + ($127))|0;
       $132 = (($131) - ($129))|0;
       $pos$1 = $132;$width$1 = $width$0$lcssa;
      }
      ___shlim($f,$width$1);
      $133 = HEAP32[$3>>2]|0;
      $134 = HEAP32[$4>>2]|0;
      $135 = ($133>>>0)<($134>>>0);
      if ($135) {
       $136 = (($133) + 1|0);
       HEAP32[$3>>2] = $136;
       $140 = $134;
      } else {
       $137 = (___shgetc($f)|0);
       $138 = ($137|0)<(0);
       if ($138) {
        $alloc$1 = $alloc$0;$s$6 = $s$1;$wcs$7 = $wcs$1;
        label = 162;
        break L4;
       }
       $$pre235 = HEAP32[$4>>2]|0;
       $140 = $$pre235;
      }
      $139 = ($140|0)==(0|0);
      if (!($139)) {
       $141 = HEAP32[$3>>2]|0;
       $142 = (($141) + -1|0);
       HEAP32[$3>>2] = $142;
      }
      L78: do {
       switch ($$|0) {
       case 91: case 99: case 115:  {
        $143 = ($$|0)==(99);
        $144 = $$ & 239;
        $145 = ($144|0)==(99);
        L80: do {
         if ($145) {
          $146 = ($$|0)==(115);
          _memset(($scanset|0),-1,257)|0;
          HEAP8[$scanset>>0] = 0;
          if ($146) {
           HEAP8[$8>>0] = 0;
           ;HEAP8[$7+0>>0]=0|0;HEAP8[$7+1>>0]=0|0;HEAP8[$7+2>>0]=0|0;HEAP8[$7+3>>0]=0|0;HEAP8[$7+4>>0]=0|0;
           $p$9 = $p$5;
          } else {
           $p$9 = $p$5;
          }
         } else {
          $147 = (($p$5) + 1|0);
          $148 = HEAP8[$147>>0]|0;
          $149 = ($148<<24>>24)==(94);
          $150 = (($p$5) + 2|0);
          $invert$0 = $149&1;
          $p$6 = $149 ? $150 : $147;
          $151 = $149&1;
          _memset(($scanset|0),($151|0),257)|0;
          HEAP8[$scanset>>0] = 0;
          $152 = HEAP8[$p$6>>0]|0;
          if ((($152<<24>>24) == 93)) {
           $156 = (($p$6) + 1|0);
           $157 = $invert$0 ^ 1;
           $158 = $157&255;
           HEAP8[$11>>0] = $158;
           $$pre$phi241Z2D = $158;$p$7$ph = $156;
          } else if ((($152<<24>>24) == 45)) {
           $153 = (($p$6) + 1|0);
           $154 = $invert$0 ^ 1;
           $155 = $154&255;
           HEAP8[$10>>0] = $155;
           $$pre$phi241Z2D = $155;$p$7$ph = $153;
          } else {
           $$pre239 = $invert$0 ^ 1;
           $$pre240 = $$pre239&255;
           $$pre$phi241Z2D = $$pre240;$p$7$ph = $p$6;
          }
          $p$7 = $p$7$ph;
          while(1) {
           $159 = HEAP8[$p$7>>0]|0;
           if ((($159<<24>>24) == 45)) {
            $160 = (($p$7) + 1|0);
            $161 = HEAP8[$160>>0]|0;
            if ((($161<<24>>24) == 93) | (($161<<24>>24) == 0)) {
             $172 = 45;$p$8 = $p$7;
            } else {
             $162 = (($p$7) + -1|0);
             $163 = HEAP8[$162>>0]|0;
             $164 = ($163&255)<($161&255);
             if ($164) {
              $165 = $163&255;
              $c$027 = $165;
              while(1) {
               $166 = (($c$027) + 1)|0;
               $167 = (($scanset) + ($166)|0);
               HEAP8[$167>>0] = $$pre$phi241Z2D;
               $168 = HEAP8[$160>>0]|0;
               $169 = $168&255;
               $170 = ($166|0)<($169|0);
               if ($170) {
                $c$027 = $166;
               } else {
                $172 = $168;$p$8 = $160;
                break;
               }
              }
             } else {
              $172 = $161;$p$8 = $160;
             }
            }
           } else if ((($159<<24>>24) == 93)) {
            $p$9 = $p$7;
            break L80;
           } else if ((($159<<24>>24) == 0)) {
            $alloc$1 = $alloc$0;$s$6 = $s$1;$wcs$7 = $wcs$1;
            label = 162;
            break L4;
           } else {
            $172 = $159;$p$8 = $p$7;
           }
           $171 = $172&255;
           $173 = (($171) + 1)|0;
           $174 = (($scanset) + ($173)|0);
           HEAP8[$174>>0] = $$pre$phi241Z2D;
           $175 = (($p$8) + 1|0);
           $p$7 = $175;
          }
         }
        } while(0);
        $176 = (($width$1) + 1)|0;
        $$4 = $143 ? $176 : 31;
        $177 = ($$size$0|0)==(1);
        $178 = ($alloc$0|0)!=(0);
        L99: do {
         if ($177) {
          if ($178) {
           $179 = $$4 << 2;
           $180 = (_malloc($179)|0);
           $181 = ($180|0)==(0|0);
           if ($181) {
            $alloc$1 = $alloc$0;$s$6 = 0;$wcs$7 = $180;
            label = 162;
            break L4;
           } else {
            $wcs$2 = $180;
           }
          } else {
           $wcs$2 = $dest$0;
          }
          HEAP32[$st>>2] = 0;
          HEAP32[$9>>2] = 0;
          $i$0$ph = 0;$k$0$ph = $$4;$wcs$3$ph = $wcs$2;
          L134: while(1) {
           $182 = ($wcs$3$ph|0)==(0|0);
           if ($182) {
            while(1) {
             $185 = HEAP32[$3>>2]|0;
             $196 = HEAP32[$4>>2]|0;
             $197 = ($185>>>0)<($196>>>0);
             if ($197) {
              $184 = (($185) + 1|0);
              HEAP32[$3>>2] = $184;
              $186 = HEAP8[$185>>0]|0;
              $187 = $186&255;
              $189 = $187;
             } else {
              $183 = (___shgetc($f)|0);
              $189 = $183;
             }
             $188 = (($189) + 1)|0;
             $190 = (($scanset) + ($188)|0);
             $191 = HEAP8[$190>>0]|0;
             $192 = ($191<<24>>24)==(0);
             if ($192) {
              $i$0$ph46$lcssa = $i$0$ph;$wcs$3$ph160 = 0;
              break L134;
             }
             $193 = $189&255;
             HEAP8[$0>>0] = $193;
             $194 = (_mbrtowc($wc,$0,1,$st)|0);
             if ((($194|0) == -2)) {
              continue;
             } else if ((($194|0) == -1)) {
              $alloc$1 = $alloc$0;$s$6 = 0;$wcs$7 = 0;
              label = 162;
              break L4;
             }
             $195 = ($i$0$ph|0)==($k$0$ph|0);
             $or$cond$us = $178 & $195;
             if ($or$cond$us) {
              $i$1$lcssa = $i$0$ph;
              break;
             }
            }
           } else {
            if ($178) {
             $i$0$ph46$us53 = $i$0$ph;
            } else {
             $i$0$ph46 = $i$0$ph;
             label = 98;
             break;
            }
            while(1) {
             while(1) {
              $200 = HEAP32[$3>>2]|0;
              $214 = HEAP32[$4>>2]|0;
              $215 = ($200>>>0)<($214>>>0);
              if ($215) {
               $199 = (($200) + 1|0);
               HEAP32[$3>>2] = $199;
               $201 = HEAP8[$200>>0]|0;
               $202 = $201&255;
               $204 = $202;
              } else {
               $198 = (___shgetc($f)|0);
               $204 = $198;
              }
              $203 = (($204) + 1)|0;
              $205 = (($scanset) + ($203)|0);
              $206 = HEAP8[$205>>0]|0;
              $207 = ($206<<24>>24)==(0);
              if ($207) {
               $i$0$ph46$lcssa = $i$0$ph46$us53;$wcs$3$ph160 = $wcs$3$ph;
               break L134;
              }
              $208 = $204&255;
              HEAP8[$0>>0] = $208;
              $209 = (_mbrtowc($wc,$0,1,$st)|0);
              if ((($209|0) == -1)) {
               $alloc$1 = $alloc$0;$s$6 = 0;$wcs$7 = $wcs$3$ph;
               label = 162;
               break L4;
              } else if (!((($209|0) == -2))) {
               break;
              }
             }
             $210 = HEAP32[$wc>>2]|0;
             $211 = (($i$0$ph46$us53) + 1)|0;
             $212 = (($wcs$3$ph) + ($i$0$ph46$us53<<2)|0);
             HEAP32[$212>>2] = $210;
             $213 = ($211|0)==($k$0$ph|0);
             if ($213) {
              $i$1$lcssa = $k$0$ph;
              break;
             } else {
              $i$0$ph46$us53 = $211;
             }
            }
           }
           $factor = $k$0$ph << 1;
           $233 = $factor | 1;
           $234 = $233 << 2;
           $235 = (_realloc($wcs$3$ph,$234)|0);
           $236 = ($235|0)==(0|0);
           if ($236) {
            $alloc$1 = $alloc$0;$s$6 = 0;$wcs$7 = $wcs$3$ph;
            label = 162;
            break L4;
           }
           $i$0$ph = $i$1$lcssa;$k$0$ph = $233;$wcs$3$ph = $235;
          }
          L158: do {
           if ((label|0) == 98) {
            while(1) {
             label = 0;
             while(1) {
              $216 = HEAP32[$3>>2]|0;
              $217 = HEAP32[$4>>2]|0;
              $218 = ($216>>>0)<($217>>>0);
              if ($218) {
               $219 = (($216) + 1|0);
               HEAP32[$3>>2] = $219;
               $220 = HEAP8[$216>>0]|0;
               $221 = $220&255;
               $224 = $221;
              } else {
               $222 = (___shgetc($f)|0);
               $224 = $222;
              }
              $223 = (($224) + 1)|0;
              $225 = (($scanset) + ($223)|0);
              $226 = HEAP8[$225>>0]|0;
              $227 = ($226<<24>>24)==(0);
              if ($227) {
               $i$0$ph46$lcssa = $i$0$ph46;$wcs$3$ph160 = $wcs$3$ph;
               break L158;
              }
              $228 = $224&255;
              HEAP8[$0>>0] = $228;
              $229 = (_mbrtowc($wc,$0,1,$st)|0);
              if ((($229|0) == -1)) {
               $alloc$1 = 0;$s$6 = 0;$wcs$7 = $wcs$3$ph;
               label = 162;
               break L4;
              } else if (!((($229|0) == -2))) {
               break;
              }
             }
             $230 = HEAP32[$wc>>2]|0;
             $231 = (($i$0$ph46) + 1)|0;
             $232 = (($wcs$3$ph) + ($i$0$ph46<<2)|0);
             HEAP32[$232>>2] = $230;
             $i$0$ph46 = $231;
             label = 98;
            }
           }
          } while(0);
          $237 = (_mbsinit($st)|0);
          $238 = ($237|0)==(0);
          if ($238) {
           $alloc$1 = $alloc$0;$s$6 = 0;$wcs$7 = $wcs$3$ph160;
           label = 162;
           break L4;
          } else {
           $i$4 = $i$0$ph46$lcssa;$s$3 = 0;$wcs$4 = $wcs$3$ph160;
          }
         } else {
          if ($178) {
           $239 = (_malloc($$4)|0);
           $240 = ($239|0)==(0|0);
           if ($240) {
            $alloc$1 = $alloc$0;$s$6 = 0;$wcs$7 = 0;
            label = 162;
            break L4;
           } else {
            $i$2$ph = 0;$k$1$ph = $$4;$s$2$ph = $239;
           }
           while(1) {
            $i$2 = $i$2$ph;
            while(1) {
             $241 = HEAP32[$3>>2]|0;
             $242 = HEAP32[$4>>2]|0;
             $243 = ($241>>>0)<($242>>>0);
             if ($243) {
              $244 = (($241) + 1|0);
              HEAP32[$3>>2] = $244;
              $245 = HEAP8[$241>>0]|0;
              $246 = $245&255;
              $249 = $246;
             } else {
              $247 = (___shgetc($f)|0);
              $249 = $247;
             }
             $248 = (($249) + 1)|0;
             $250 = (($scanset) + ($248)|0);
             $251 = HEAP8[$250>>0]|0;
             $252 = ($251<<24>>24)==(0);
             if ($252) {
              $i$4 = $i$2;$s$3 = $s$2$ph;$wcs$4 = 0;
              break L99;
             }
             $253 = $249&255;
             $254 = (($i$2) + 1)|0;
             $255 = (($s$2$ph) + ($i$2)|0);
             HEAP8[$255>>0] = $253;
             $256 = ($254|0)==($k$1$ph|0);
             if ($256) {
              break;
             } else {
              $i$2 = $254;
             }
            }
            $factor14 = $k$1$ph << 1;
            $257 = $factor14 | 1;
            $258 = (_realloc($s$2$ph,$257)|0);
            $259 = ($258|0)==(0|0);
            if ($259) {
             $alloc$1 = $alloc$0;$s$6 = $s$2$ph;$wcs$7 = 0;
             label = 162;
             break L4;
            } else {
             $i$2$ph$phi = $k$1$ph;$k$1$ph = $257;$s$2$ph = $258;$i$2$ph = $i$2$ph$phi;
            }
           }
          }
          $260 = ($dest$0|0)==(0|0);
          if ($260) {
           $278 = $140;
           while(1) {
            $276 = HEAP32[$3>>2]|0;
            $277 = ($276>>>0)<($278>>>0);
            if ($277) {
             $279 = (($276) + 1|0);
             HEAP32[$3>>2] = $279;
             $280 = HEAP8[$276>>0]|0;
             $281 = $280&255;
             $284 = $281;
            } else {
             $282 = (___shgetc($f)|0);
             $284 = $282;
            }
            $283 = (($284) + 1)|0;
            $285 = (($scanset) + ($283)|0);
            $286 = HEAP8[$285>>0]|0;
            $287 = ($286<<24>>24)==(0);
            if ($287) {
             $i$4 = 0;$s$3 = 0;$wcs$4 = 0;
             break L99;
            }
            $$pre237 = HEAP32[$4>>2]|0;
            $278 = $$pre237;
           }
          } else {
           $263 = $140;$i$3 = 0;
           while(1) {
            $261 = HEAP32[$3>>2]|0;
            $262 = ($261>>>0)<($263>>>0);
            if ($262) {
             $264 = (($261) + 1|0);
             HEAP32[$3>>2] = $264;
             $265 = HEAP8[$261>>0]|0;
             $266 = $265&255;
             $269 = $266;
            } else {
             $267 = (___shgetc($f)|0);
             $269 = $267;
            }
            $268 = (($269) + 1)|0;
            $270 = (($scanset) + ($268)|0);
            $271 = HEAP8[$270>>0]|0;
            $272 = ($271<<24>>24)==(0);
            if ($272) {
             $i$4 = $i$3;$s$3 = $dest$0;$wcs$4 = 0;
             break L99;
            }
            $273 = $269&255;
            $274 = (($i$3) + 1)|0;
            $275 = (($dest$0) + ($i$3)|0);
            HEAP8[$275>>0] = $273;
            $$pre221 = HEAP32[$4>>2]|0;
            $263 = $$pre221;$i$3 = $274;
           }
          }
         }
        } while(0);
        $288 = HEAP32[$4>>2]|0;
        $289 = ($288|0)==(0|0);
        $$pre236 = HEAP32[$3>>2]|0;
        if ($289) {
         $294 = $$pre236;
        } else {
         $290 = (($$pre236) + -1|0);
         HEAP32[$3>>2] = $290;
         $294 = $290;
        }
        $291 = HEAP32[$5>>2]|0;
        $292 = HEAP32[$6>>2]|0;
        $293 = $294;
        $295 = $292;
        $296 = (($293) - ($295))|0;
        $297 = (($296) + ($291))|0;
        $298 = ($297|0)==(0);
        if ($298) {
         $alloc$2 = $alloc$0;$matches$2 = $matches$0130;$s$7 = $s$3;$wcs$8 = $wcs$4;
         break L4;
        }
        $$not = $143 ^ 1;
        $299 = ($297|0)==($width$1|0);
        $or$cond5 = $299 | $$not;
        if (!($or$cond5)) {
         $alloc$2 = $alloc$0;$matches$2 = $matches$0130;$s$7 = $s$3;$wcs$8 = $wcs$4;
         break L4;
        }
        do {
         if ($178) {
          if ($177) {
           HEAP32[$dest$0>>2] = $wcs$4;
           break;
          } else {
           HEAP32[$dest$0>>2] = $s$3;
           break;
          }
         }
        } while(0);
        if ($143) {
         $p$10 = $p$9;$s$4 = $s$3;$wcs$5 = $wcs$4;
        } else {
         $300 = ($wcs$4|0)==(0|0);
         if (!($300)) {
          $301 = (($wcs$4) + ($i$4<<2)|0);
          HEAP32[$301>>2] = 0;
         }
         $302 = ($s$3|0)==(0|0);
         if ($302) {
          $p$10 = $p$9;$s$4 = 0;$wcs$5 = $wcs$4;
         } else {
          $303 = (($s$3) + ($i$4)|0);
          HEAP8[$303>>0] = 0;
          $p$10 = $p$9;$s$4 = $s$3;$wcs$5 = $wcs$4;
         }
        }
        break;
       }
       case 71: case 103: case 70: case 102: case 69: case 101: case 65: case 97:  {
        $322 = (+___floatscan($f,$$size$0,0));
        $323 = HEAP32[$5>>2]|0;
        $324 = HEAP32[$3>>2]|0;
        $325 = HEAP32[$6>>2]|0;
        $326 = $324;
        $327 = $325;
        $328 = (($327) - ($326))|0;
        $329 = ($323|0)==($328|0);
        if ($329) {
         $alloc$2 = $alloc$0;$matches$2 = $matches$0130;$s$7 = $s$1;$wcs$8 = $wcs$1;
         break L4;
        }
        $330 = ($dest$0|0)==(0|0);
        if ($330) {
         $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
        } else {
         if ((($$size$0|0) == 0)) {
          $331 = $322;
          HEAPF32[$dest$0>>2] = $331;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L78;
         } else if ((($$size$0|0) == 1)) {
          HEAPF64[$dest$0>>3] = $322;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L78;
         } else if ((($$size$0|0) == 2)) {
          HEAPF64[$dest$0>>3] = $322;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L78;
         } else {
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L78;
         }
        }
        break;
       }
       case 120: case 88: case 112:  {
        $base$0 = 16;
        label = 144;
        break;
       }
       case 111:  {
        $base$0 = 8;
        label = 144;
        break;
       }
       case 117: case 100:  {
        $base$0 = 10;
        label = 144;
        break;
       }
       case 105:  {
        $base$0 = 0;
        label = 144;
        break;
       }
       default: {
        $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
       }
       }
      } while(0);
      L197: do {
       if ((label|0) == 144) {
        label = 0;
        $304 = (___intscan($f,$base$0,0,-1,-1)|0);
        $305 = tempRet0;
        $306 = HEAP32[$5>>2]|0;
        $307 = HEAP32[$3>>2]|0;
        $308 = HEAP32[$6>>2]|0;
        $309 = $307;
        $310 = $308;
        $311 = (($310) - ($309))|0;
        $312 = ($306|0)==($311|0);
        if ($312) {
         $alloc$2 = $alloc$0;$matches$2 = $matches$0130;$s$7 = $s$1;$wcs$8 = $wcs$1;
         break L4;
        }
        $313 = ($$|0)!=(112);
        $314 = ($dest$0|0)==(0|0);
        $or$cond6 = $313 | $314;
        if (!($or$cond6)) {
         $315 = $304;
         HEAP32[$dest$0>>2] = $315;
         $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
         break;
        }
        if ($314) {
         $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
        } else {
         switch ($$size$0|0) {
         case 3:  {
          $318 = $dest$0;
          $319 = $318;
          HEAP32[$319>>2] = $304;
          $320 = (($318) + 4)|0;
          $321 = $320;
          HEAP32[$321>>2] = $305;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L197;
          break;
         }
         case -2:  {
          $316 = $304&255;
          HEAP8[$dest$0>>0] = $316;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L197;
          break;
         }
         case -1:  {
          $317 = $304&65535;
          HEAP16[$dest$0>>1] = $317;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L197;
          break;
         }
         case 0:  {
          HEAP32[$dest$0>>2] = $304;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L197;
          break;
         }
         case 1:  {
          HEAP32[$dest$0>>2] = $304;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L197;
          break;
         }
         default: {
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L197;
         }
         }
        }
       }
      } while(0);
      $332 = HEAP32[$5>>2]|0;
      $333 = HEAP32[$3>>2]|0;
      $334 = HEAP32[$6>>2]|0;
      $335 = $333;
      $336 = $334;
      $337 = (($332) + ($pos$1))|0;
      $338 = (($337) + ($335))|0;
      $339 = (($338) - ($336))|0;
      $not$ = ($dest$0|0)!=(0|0);
      $340 = $not$&1;
      $matches$0$ = (($340) + ($matches$0130))|0;
      $matches$1 = $matches$0$;$p$11 = $p$10;$pos$2 = $339;$s$5 = $s$4;$wcs$6 = $wcs$5;
      break L6;
     }
    } while(0);
    $46 = $43&1;
    $47 = (($p$0136) + ($46)|0);
    ___shlim($f,0);
    $48 = HEAP32[$3>>2]|0;
    $49 = HEAP32[$4>>2]|0;
    $50 = ($48>>>0)<($49>>>0);
    if ($50) {
     $51 = (($48) + 1|0);
     HEAP32[$3>>2] = $51;
     $52 = HEAP8[$48>>0]|0;
     $53 = $52&255;
     $58 = $53;
    } else {
     $54 = (___shgetc($f)|0);
     $58 = $54;
    }
    $55 = HEAP8[$47>>0]|0;
    $56 = $55&255;
    $57 = ($58|0)==($56|0);
    if (!($57)) {
     label = 19;
     break L4;
    }
    $64 = (($pos$0135) + 1)|0;
    $matches$1 = $matches$0130;$p$11 = $47;$pos$2 = $64;$s$5 = $s$0128;$wcs$6 = $wcs$0129;
   } else {
    $p$1 = $p$0136;
    while(1) {
     $16 = (($p$1) + 1|0);
     $17 = HEAP8[$16>>0]|0;
     $18 = $17&255;
     $19 = (_isspace($18)|0);
     $20 = ($19|0)==(0);
     if ($20) {
      break;
     } else {
      $p$1 = $16;
     }
    }
    ___shlim($f,0);
    while(1) {
     $21 = HEAP32[$3>>2]|0;
     $22 = HEAP32[$4>>2]|0;
     $23 = ($21>>>0)<($22>>>0);
     if ($23) {
      $24 = (($21) + 1|0);
      HEAP32[$3>>2] = $24;
      $25 = HEAP8[$21>>0]|0;
      $26 = $25&255;
      $28 = $26;
     } else {
      $27 = (___shgetc($f)|0);
      $28 = $27;
     }
     $29 = (_isspace($28)|0);
     $30 = ($29|0)==(0);
     if ($30) {
      break;
     }
    }
    $31 = HEAP32[$4>>2]|0;
    $32 = ($31|0)==(0|0);
    $$pre238 = HEAP32[$3>>2]|0;
    if ($32) {
     $37 = $$pre238;
    } else {
     $33 = (($$pre238) + -1|0);
     HEAP32[$3>>2] = $33;
     $37 = $33;
    }
    $34 = HEAP32[$5>>2]|0;
    $35 = HEAP32[$6>>2]|0;
    $36 = $37;
    $38 = $35;
    $39 = (($34) + ($pos$0135))|0;
    $40 = (($39) + ($36))|0;
    $41 = (($40) - ($38))|0;
    $matches$1 = $matches$0130;$p$11 = $p$1;$pos$2 = $41;$s$5 = $s$0128;$wcs$6 = $wcs$0129;
   }
  } while(0);
  $341 = (($p$11) + 1|0);
  $342 = HEAP8[$341>>0]|0;
  $343 = ($342<<24>>24)==(0);
  if ($343) {
   $matches$3 = $matches$1;
   label = 165;
   break;
  } else {
   $13 = $342;$matches$0130 = $matches$1;$p$0136 = $341;$pos$0135 = $pos$2;$s$0128 = $s$5;$wcs$0129 = $wcs$6;
  }
 }
 if ((label|0) == 165) {
  STACKTOP = sp;return ($matches$3|0);
 }
 if ((label|0) == 19) {
  $59 = HEAP32[$4>>2]|0;
  $60 = ($59|0)==(0|0);
  if (!($60)) {
   $61 = HEAP32[$3>>2]|0;
   $62 = (($61) + -1|0);
   HEAP32[$3>>2] = $62;
  }
  $63 = ($58|0)<(0);
  if ($63) {
   $alloc$1 = 0;$s$6 = $s$0128;$wcs$7 = $wcs$0129;
   label = 162;
  } else {
   $matches$3 = $matches$0130;
   STACKTOP = sp;return ($matches$3|0);
  }
 }
 if ((label|0) == 162) {
  $344 = ($matches$0130|0)==(0);
  $345 = $344 << 31 >> 31;
  $$matches$0 = (($345) + ($matches$0130))|0;
  $alloc$2 = $alloc$1;$matches$2 = $$matches$0;$s$7 = $s$6;$wcs$8 = $wcs$7;
 }
 $346 = ($alloc$2|0)==(0);
 if ($346) {
  $matches$3 = $matches$2;
  STACKTOP = sp;return ($matches$3|0);
 }
 _free($s$7);
 _free($wcs$8);
 $matches$3 = $matches$2;
 STACKTOP = sp;return ($matches$3|0);
}
function _vsscanf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $f = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $f = sp;
 dest=$f+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = (($f) + 32|0);
 HEAP32[$0>>2] = 3;
 $1 = (($f) + 44|0);
 HEAP32[$1>>2] = $s;
 $2 = (($f) + 76|0);
 HEAP32[$2>>2] = -1;
 $3 = (($f) + 84|0);
 HEAP32[$3>>2] = $s;
 $4 = (_MUSL_vfscanf($f,$fmt,$ap)|0);
 STACKTOP = sp;return ($4|0);
}
function _do_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___string_read($f,$buf,$len)|0);
 STACKTOP = sp;return ($0|0);
}
function _atoll($s) {
 $s = $s|0;
 var $$0 = 0, $$1$ph = 0, $$11 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $neg$0 = 0, $neg$1$ph = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $s;
 while(1) {
  $0 = HEAP8[$$0>>0]|0;
  $1 = $0 << 24 >> 24;
  $2 = (_isspace($1)|0);
  $3 = ($2|0)==(0);
  $4 = (($$0) + 1|0);
  if ($3) {
   break;
  } else {
   $$0 = $4;
  }
 }
 $5 = HEAP8[$$0>>0]|0;
 $6 = $5 << 24 >> 24;
 if ((($6|0) == 43)) {
  $neg$0 = 0;
  label = 5;
 } else if ((($6|0) == 45)) {
  $neg$0 = 1;
  label = 5;
 } else {
  $$1$ph = $$0;$8 = $5;$neg$1$ph = 0;
 }
 if ((label|0) == 5) {
  $$pre = HEAP8[$4>>0]|0;
  $$1$ph = $4;$8 = $$pre;$neg$1$ph = $neg$0;
 }
 $7 = $8 << 24 >> 24;
 $9 = (_isdigit($7)|0);
 $10 = ($9|0)==(0);
 if ($10) {
  $28 = 0;$29 = 0;
 } else {
  $$11 = $$1$ph;$11 = 0;$12 = 0;
  while(1) {
   $13 = (___muldi3(($11|0),($12|0),10,0)|0);
   $14 = tempRet0;
   $15 = (($$11) + 1|0);
   $16 = HEAP8[$$11>>0]|0;
   $17 = $16 << 24 >> 24;
   $18 = (($17) + -48)|0;
   $19 = ($18|0)<(0);
   $20 = $19 << 31 >> 31;
   $21 = (_i64Subtract(($13|0),($14|0),($18|0),($20|0))|0);
   $22 = tempRet0;
   $23 = HEAP8[$15>>0]|0;
   $24 = $23 << 24 >> 24;
   $25 = (_isdigit($24)|0);
   $26 = ($25|0)==(0);
   if ($26) {
    $28 = $21;$29 = $22;
    break;
   } else {
    $$11 = $15;$11 = $21;$12 = $22;
   }
  }
 }
 $27 = ($neg$1$ph|0)!=(0);
 $30 = (_i64Subtract(0,0,($28|0),($29|0))|0);
 $31 = tempRet0;
 $32 = $27 ? $28 : $30;
 $33 = $27 ? $29 : $31;
 tempRet0 = $33;
 STACKTOP = sp;return ($32|0);
}
function _bsearch($key,$base,$nel,$width,$cmp) {
 $key = $key|0;
 $base = $base|0;
 $nel = $nel|0;
 $width = $width|0;
 $cmp = $cmp|0;
 var $$ = 0, $$0 = 0, $$01$ = 0, $$014 = 0, $$023 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($nel|0)==(0);
 L1: do {
  if ($0) {
   $$0 = 0;
  } else {
   $$014 = $base;$$023 = $nel;
   while(1) {
    $1 = $$023 >>> 1;
    $2 = Math_imul($1, $width)|0;
    $3 = (($$014) + ($2)|0);
    $4 = (FUNCTION_TABLE_iii[$cmp & 7]($key,$3)|0);
    $5 = ($4|0)==(0);
    if ($5) {
     $$0 = $3;
     break L1;
    }
    $6 = ($$023|0)==(1);
    if ($6) {
     $$0 = 0;
     break L1;
    }
    $7 = ($4|0)<(0);
    $8 = (($$023) - ($1))|0;
    $$ = $7 ? $1 : $8;
    $$01$ = $7 ? $$014 : $3;
    $9 = ($$|0)==(0);
    if ($9) {
     $$0 = 0;
     break;
    } else {
     $$014 = $$01$;$$023 = $$;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _ecvt($x,$n,$dp,$sign) {
 $x = +$x;
 $n = $n|0;
 $dp = $dp|0;
 $sign = $sign|0;
 var $$lcssa = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0$lcssa = 0, $i$01 = 0, $j$02 = 0, $tmp = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer = sp;
 $tmp = sp + 16|0;
 $0 = (($n) + -1)|0;
 $1 = ($0>>>0)>(15);
 $2 = $1 ? 14 : $0;
 HEAP32[$vararg_buffer>>2] = $2;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAPF64[tempDoublePtr>>3]=$x;HEAP32[$vararg_ptr1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr1+4>>2]=HEAP32[tempDoublePtr+4>>2];
 (_sprintf($tmp,284712,$vararg_buffer)|0);
 $3 = HEAP8[$tmp>>0]|0;
 $4 = ($3<<24>>24)==(45);
 $5 = $4&1;
 HEAP32[$sign>>2] = $5;
 $6 = (($tmp) + ($5)|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)==(101);
 if ($8) {
  $$lcssa = 284696;$i$0$lcssa = $5;
 } else {
  $10 = 284696;$9 = $7;$i$01 = $5;$j$02 = 0;
  while(1) {
   HEAP8[$10>>0] = $9;
   $11 = (($i$01) + 1)|0;
   $12 = ($9<<24>>24)!=(46);
   $13 = $12&1;
   $14 = (($13) + ($j$02))|0;
   $15 = (($tmp) + ($11)|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = ($16<<24>>24)==(101);
   $18 = (284696 + ($14)|0);
   if ($17) {
    $$lcssa = $18;$i$0$lcssa = $11;
    break;
   } else {
    $10 = $18;$9 = $16;$i$01 = $11;$j$02 = $14;
   }
  }
 }
 HEAP8[$$lcssa>>0] = 0;
 $$sum = (($i$0$lcssa) + 1)|0;
 $19 = (($tmp) + ($$sum)|0);
 $20 = (_atoi($19)|0);
 $21 = (($20) + 1)|0;
 HEAP32[$dp>>2] = $21;
 STACKTOP = sp;return (284696|0);
}
function _fcvt($x,$n,$dp,$sign) {
 $x = +$x;
 $n = $n|0;
 $dp = $dp|0;
 $sign = $sign|0;
 var $$0 = 0, $$n = 0, $$n$op = 0, $$sum = 0, $$sum23 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $lz$0 = 0, $tmp = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1520|0;
 $vararg_buffer = sp;
 $tmp = sp + 12|0;
 $0 = ($n>>>0)>(1400);
 $$n = $0 ? 1400 : $n;
 HEAP32[$vararg_buffer>>2] = $$n;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAPF64[tempDoublePtr>>3]=$x;HEAP32[$vararg_ptr1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr1+4>>2]=HEAP32[tempDoublePtr+4>>2];
 (_sprintf($tmp,284720,$vararg_buffer)|0);
 $1 = HEAP8[$tmp>>0]|0;
 $2 = ($1<<24>>24)==(45);
 $3 = $2&1;
 $4 = (($tmp) + ($3)|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)==(48);
 if ($6) {
  $$sum23 = $3 | 2;
  $7 = (($tmp) + ($$sum23)|0);
  $8 = (_strspn($7,284728)|0);
  $lz$0 = $8;
 } else {
  $9 = (_strcspn($4,284736)|0);
  $10 = (0 - ($9))|0;
  $lz$0 = $10;
 }
 $11 = ($$n|0)>($lz$0|0);
 if ($11) {
  $14 = (($$n) - ($lz$0))|0;
  $15 = (_ecvt($x,$14,$dp,$sign)|0);
  $$0 = $15;
  STACKTOP = sp;return ($$0|0);
 } else {
  HEAP32[$sign>>2] = $3;
  HEAP32[$dp>>2] = 1;
  $12 = ($$n>>>0)>(14);
  $$n$op = (14 - ($$n))|0;
  $$sum = $12 ? 0 : $$n$op;
  $13 = (284744 + ($$sum)|0);
  $$0 = $13;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _gcvt($x,$n,$b) {
 $x = +$x;
 $n = $n|0;
 $b = $b|0;
 var $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $n;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAPF64[tempDoublePtr>>3]=$x;HEAP32[$vararg_ptr1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr1+4>>2]=HEAP32[tempDoublePtr+4>>2];
 (_sprintf($b,284760,$vararg_buffer)|0);
 STACKTOP = sp;return ($b|0);
}
function _qsort($base,$nel,$width,$cmp) {
 $base = $base|0;
 $nel = $nel|0;
 $width = $width|0;
 $cmp = $cmp|0;
 var $$ = 0, $$$i = 0, $$0$be$i = 0, $$0$be$i20 = 0, $$0$i50 = 0, $$01$be$i = 0, $$01$be$i19 = 0, $$01$i5$i = 0, $$012$i = 0, $$012$i16 = 0, $$02$i$i = 0, $$02$i3$i = 0, $$02$i3469 = 0, $$02$i72 = 0, $$02$us$i = 0, $$02$us$i32 = 0, $$03$i = 0, $$03$i15 = 0, $$66 = 0, $$67 = 0;
 var $$lcssa75 = 0, $$lcssa76 = 0, $$pre = 0, $$pre$i = 0, $$pre$i22 = 0, $$pre$i28 = 0, $$pre$i9 = 0, $$sum = 0, $$sum$i = 0, $$sum$i18 = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $4$phi = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ar$i = 0, $exitcond$i = 0, $exitcond$i31 = 0, $head$0$lcssa = 0, $head$077 = 0;
 var $head$1 = 0, $i$0 = 0, $i$0$lcssa$i = 0, $i$0$lcssa$i24 = 0, $i$01$us$i = 0, $i$01$us$i30 = 0, $i$04$i = 0, $i$04$i14 = 0, $lp = 0, $nTrailingZeros$03$i$i = 0, $nTrailingZeros$03$i2$i = 0, $pshift$0$lcssa = 0, $pshift$078 = 0, $pshift$1 = 0, $pshift$2 = 0, $sum = 0, $sum$i = 0, $sum$i17 = 0, $tmp$i = 0, $tmp$i26 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 944|0;
 $tmp$i26 = sp + 680|0;
 $tmp$i = sp + 424|0;
 $ar$i = sp + 192|0;
 $lp = sp;
 $0 = Math_imul($width, $nel)|0;
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $$sum = (($0) - ($width))|0;
 $2 = (($lp) + 4|0);
 HEAP32[$2>>2] = $width;
 HEAP32[$lp>>2] = $width;
 $4 = $width;$6 = $width;$i$0 = 2;
 while(1) {
  $3 = (($4) + ($width))|0;
  $5 = (($3) + ($6))|0;
  $7 = (($lp) + ($i$0<<2)|0);
  HEAP32[$7>>2] = $5;
  $8 = ($5>>>0)<($0>>>0);
  $9 = (($i$0) + 1)|0;
  if ($8) {
   $4$phi = $6;$6 = $5;$i$0 = $9;$4 = $4$phi;
  } else {
   break;
  }
 }
 $10 = (0 - ($width))|0;
 $11 = (($base) + ($$sum)|0);
 $12 = ($$sum|0)>(0);
 if ($12) {
  $13 = ($width|0)==(0);
  $14 = ($width>>>0)>(256);
  $15 = $14 ? 256 : $width;
  $16 = ($15|0)==($width|0);
  $17 = $11;
  $19 = 1;$61 = 0;$head$077 = $base;$pshift$078 = 1;
  while(1) {
   $18 = $19 & 3;
   $20 = ($18|0)==(3);
   do {
    if ($20) {
     HEAP32[$ar$i>>2] = $head$077;
     $21 = ($pshift$078|0)>(1);
     L44: do {
      if ($21) {
       $$012$i = $pshift$078;$$03$i = $head$077;$27 = $head$077;$i$04$i = 1;
       while(1) {
        $22 = (($$03$i) + ($10)|0);
        $23 = (($$012$i) + -2)|0;
        $24 = (($lp) + ($23<<2)|0);
        $25 = HEAP32[$24>>2]|0;
        $sum$i = (($25) + ($width))|0;
        $$sum$i = (0 - ($sum$i))|0;
        $26 = (($$03$i) + ($$sum$i)|0);
        $28 = (FUNCTION_TABLE_iii[$cmp & 7]($27,$26)|0);
        $29 = ($28|0)>(-1);
        if ($29) {
         $30 = (FUNCTION_TABLE_iii[$cmp & 7]($27,$22)|0);
         $31 = ($30|0)>(-1);
         if ($31) {
          $i$0$lcssa$i = $i$04$i;
          break;
         }
        }
        $32 = (FUNCTION_TABLE_iii[$cmp & 7]($26,$22)|0);
        $33 = ($32|0)>(-1);
        $34 = (($i$04$i) + 1)|0;
        $35 = (($ar$i) + ($i$04$i<<2)|0);
        if ($33) {
         HEAP32[$35>>2] = $26;
         $36 = (($$012$i) + -1)|0;
         $$0$be$i = $26;$$01$be$i = $36;
        } else {
         HEAP32[$35>>2] = $22;
         $$0$be$i = $22;$$01$be$i = $23;
        }
        $37 = ($$01$be$i|0)>(1);
        if (!($37)) {
         $i$0$lcssa$i = $34;
         break;
        }
        $$pre$i = HEAP32[$ar$i>>2]|0;
        $$012$i = $$01$be$i;$$03$i = $$0$be$i;$27 = $$pre$i;$i$04$i = $34;
       }
       $38 = ($i$0$lcssa$i|0)<(2);
       if (!($38)) {
        $39 = (($ar$i) + ($i$0$lcssa$i<<2)|0);
        HEAP32[$39>>2] = $tmp$i;
        if (!($13)) {
         $40 = ($i$0$lcssa$i|0)>(0);
         if ($40) {
          $$02$us$i = $width;$53 = $tmp$i;
         } else {
          $41 = HEAP32[$ar$i>>2]|0;
          _memcpy(($tmp$i|0),($41|0),($15|0))|0;
          if ($16) {
           break;
          } else {
           $$02$i72 = $width;$55 = $15;
          }
          while(1) {
           $54 = (($$02$i72) - ($55))|0;
           $56 = ($54>>>0)>(256);
           $57 = $56 ? 256 : $54;
           _memcpy(($tmp$i|0),($41|0),($57|0))|0;
           $58 = ($54|0)==($57|0);
           if ($58) {
            break L44;
           } else {
            $$02$i72 = $54;$55 = $57;
           }
          }
         }
         while(1) {
          $51 = ($$02$us$i>>>0)>(256);
          $43 = $51 ? 256 : $$02$us$i;
          $52 = HEAP32[$ar$i>>2]|0;
          _memcpy(($53|0),($52|0),($43|0))|0;
          $49 = $52;$i$01$us$i = 0;
          while(1) {
           $45 = (($ar$i) + ($i$01$us$i<<2)|0);
           $46 = (($i$01$us$i) + 1)|0;
           $47 = (($ar$i) + ($46<<2)|0);
           $48 = HEAP32[$47>>2]|0;
           _memcpy(($49|0),($48|0),($43|0))|0;
           $50 = (($49) + ($43)|0);
           HEAP32[$45>>2] = $50;
           $exitcond$i = ($46|0)==($i$0$lcssa$i|0);
           if ($exitcond$i) {
            break;
           } else {
            $49 = $48;$i$01$us$i = $46;
           }
          }
          $42 = ($$02$us$i|0)==($43|0);
          if ($42) {
           break L44;
          }
          $44 = (($$02$us$i) - ($43))|0;
          $$pre$i9 = HEAP32[$39>>2]|0;
          $$02$us$i = $44;$53 = $$pre$i9;
         }
        }
       }
      }
     } while(0);
     $59 = $19 >>> 2;
     $60 = $61 << 30;
     $62 = $59 | $60;
     $63 = $61 >>> 2;
     $64 = (($pshift$078) + 2)|0;
     $122 = $62;$182 = $63;$pshift$1 = $64;
    } else {
     $65 = (($pshift$078) + -1)|0;
     $66 = (($lp) + ($65<<2)|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = $head$077;
     $69 = (($17) - ($68))|0;
     $70 = ($67>>>0)<($69>>>0);
     L13: do {
      if ($70) {
       HEAP32[$ar$i>>2] = $head$077;
       $71 = ($pshift$078|0)>(1);
       if ($71) {
        $$012$i16 = $pshift$078;$$03$i15 = $head$077;$77 = $head$077;$i$04$i14 = 1;
        while(1) {
         $72 = (($$03$i15) + ($10)|0);
         $73 = (($$012$i16) + -2)|0;
         $74 = (($lp) + ($73<<2)|0);
         $75 = HEAP32[$74>>2]|0;
         $sum$i17 = (($75) + ($width))|0;
         $$sum$i18 = (0 - ($sum$i17))|0;
         $76 = (($$03$i15) + ($$sum$i18)|0);
         $78 = (FUNCTION_TABLE_iii[$cmp & 7]($77,$76)|0);
         $79 = ($78|0)>(-1);
         if ($79) {
          $80 = (FUNCTION_TABLE_iii[$cmp & 7]($77,$72)|0);
          $81 = ($80|0)>(-1);
          if ($81) {
           $i$0$lcssa$i24 = $i$04$i14;
           break;
          }
         }
         $82 = (FUNCTION_TABLE_iii[$cmp & 7]($76,$72)|0);
         $83 = ($82|0)>(-1);
         $84 = (($i$04$i14) + 1)|0;
         $85 = (($ar$i) + ($i$04$i14<<2)|0);
         if ($83) {
          HEAP32[$85>>2] = $76;
          $86 = (($$012$i16) + -1)|0;
          $$0$be$i20 = $76;$$01$be$i19 = $86;
         } else {
          HEAP32[$85>>2] = $72;
          $$0$be$i20 = $72;$$01$be$i19 = $73;
         }
         $87 = ($$01$be$i19|0)>(1);
         if (!($87)) {
          $i$0$lcssa$i24 = $84;
          break;
         }
         $$pre$i22 = HEAP32[$ar$i>>2]|0;
         $$012$i16 = $$01$be$i19;$$03$i15 = $$0$be$i20;$77 = $$pre$i22;$i$04$i14 = $84;
        }
        $88 = ($i$0$lcssa$i24|0)<(2);
        if (!($88)) {
         $89 = (($ar$i) + ($i$0$lcssa$i24<<2)|0);
         HEAP32[$89>>2] = $tmp$i26;
         if (!($13)) {
          $90 = ($i$0$lcssa$i24|0)>(0);
          if ($90) {
           $$02$us$i32 = $width;$103 = $tmp$i26;
          } else {
           $91 = HEAP32[$ar$i>>2]|0;
           _memcpy(($tmp$i26|0),($91|0),($15|0))|0;
           if ($16) {
            break;
           } else {
            $$02$i3469 = $width;$105 = $15;
           }
           while(1) {
            $104 = (($$02$i3469) - ($105))|0;
            $106 = ($104>>>0)>(256);
            $107 = $106 ? 256 : $104;
            _memcpy(($tmp$i26|0),($91|0),($107|0))|0;
            $108 = ($104|0)==($107|0);
            if ($108) {
             break L13;
            } else {
             $$02$i3469 = $104;$105 = $107;
            }
           }
          }
          while(1) {
           $101 = ($$02$us$i32>>>0)>(256);
           $93 = $101 ? 256 : $$02$us$i32;
           $102 = HEAP32[$ar$i>>2]|0;
           _memcpy(($103|0),($102|0),($93|0))|0;
           $99 = $102;$i$01$us$i30 = 0;
           while(1) {
            $95 = (($ar$i) + ($i$01$us$i30<<2)|0);
            $96 = (($i$01$us$i30) + 1)|0;
            $97 = (($ar$i) + ($96<<2)|0);
            $98 = HEAP32[$97>>2]|0;
            _memcpy(($99|0),($98|0),($93|0))|0;
            $100 = (($99) + ($93)|0);
            HEAP32[$95>>2] = $100;
            $exitcond$i31 = ($96|0)==($i$0$lcssa$i24|0);
            if ($exitcond$i31) {
             break;
            } else {
             $99 = $98;$i$01$us$i30 = $96;
            }
           }
           $92 = ($$02$us$i32|0)==($93|0);
           if ($92) {
            break L13;
           }
           $94 = (($$02$us$i32) - ($93))|0;
           $$pre$i28 = HEAP32[$89>>2]|0;
           $$02$us$i32 = $94;$103 = $$pre$i28;
          }
         }
        }
       }
      } else {
       _trinkle($head$077,$width,$cmp,$19,$61,$pshift$078,0,$lp);
      }
     } while(0);
     $109 = ($pshift$078|0)==(1);
     if ($109) {
      $110 = $61 << 1;
      $111 = $19 >>> 31;
      $112 = $111 | $110;
      $113 = $19 << 1;
      $122 = $113;$182 = $112;$pshift$1 = 0;
      break;
     } else {
      $114 = ($65>>>0)>(31);
      $115 = (($pshift$078) + -33)|0;
      $$ = $114 ? 0 : $19;
      $$66 = $114 ? $19 : $61;
      $$67 = $114 ? $115 : $65;
      $116 = $$66 << $$67;
      $117 = (32 - ($$67))|0;
      $118 = $$ >>> $117;
      $119 = $118 | $116;
      $120 = $$ << $$67;
      $122 = $120;$182 = $119;$pshift$1 = 1;
      break;
     }
    }
   } while(0);
   $121 = $122 | 1;
   $123 = (($head$077) + ($width)|0);
   $124 = ($123>>>0)<($11>>>0);
   if ($124) {
    $19 = $121;$61 = $182;$head$077 = $123;$pshift$078 = $pshift$1;
   } else {
    $$lcssa75 = $182;$$lcssa76 = $121;$head$0$lcssa = $123;$pshift$0$lcssa = $pshift$1;
    break;
   }
  }
 } else {
  $$lcssa75 = 0;$$lcssa76 = 1;$head$0$lcssa = $base;$pshift$0$lcssa = 1;
 }
 _trinkle($head$0$lcssa,$width,$cmp,$$lcssa76,$$lcssa75,$pshift$0$lcssa,0,$lp);
 $127 = $$lcssa76;$129 = $$lcssa75;$head$1 = $head$0$lcssa;$pshift$2 = $pshift$0$lcssa;
 while(1) {
  $125 = ($pshift$2|0)==(1);
  if ($125) {
   $126 = ($127|0)==(1);
   if ($126) {
    $128 = ($129|0)==(0);
    if ($128) {
     break;
    } else {
     label = 52;
    }
   }
  } else {
   label = 52;
  }
  if ((label|0) == 52) {
   label = 0;
   $130 = ($pshift$2|0)<(2);
   if (!($130)) {
    $162 = $129 << 2;
    $163 = $127 >>> 30;
    $164 = $163 | $162;
    $165 = (($pshift$2) + -2)|0;
    $166 = $127 << 1;
    $167 = $166 & 2147483646;
    $168 = $163 << 31;
    $169 = $167 | $168;
    $170 = $169 ^ 3;
    $171 = $164 >>> 1;
    $172 = (($lp) + ($165<<2)|0);
    $173 = HEAP32[$172>>2]|0;
    $sum = (($173) + ($width))|0;
    $$sum2 = (0 - ($sum))|0;
    $174 = (($head$1) + ($$sum2)|0);
    $175 = (($pshift$2) + -1)|0;
    _trinkle($174,$width,$cmp,$170,$171,$175,1,$lp);
    $176 = $171 << 1;
    $177 = $163 & 1;
    $178 = $176 | $177;
    $179 = $170 << 1;
    $180 = $179 | 1;
    $181 = (($head$1) + ($10)|0);
    _trinkle($181,$width,$cmp,$180,$178,$165,1,$lp);
    $127 = $180;$129 = $178;$head$1 = $181;$pshift$2 = $165;
    continue;
   }
  }
  $131 = (($127) + -1)|0;
  $132 = ($131|0)==(0);
  if ($132) {
   $152 = 32;
   label = 62;
  } else {
   $133 = $131 & 1;
   $134 = ($133|0)==(0);
   if ($134) {
    $$02$i$i = $131;$nTrailingZeros$03$i$i = 0;
    while(1) {
     $135 = (($nTrailingZeros$03$i$i) + 1)|0;
     $136 = $$02$i$i >>> 1;
     $137 = $136 & 1;
     $138 = ($137|0)==(0);
     if ($138) {
      $$02$i$i = $136;$nTrailingZeros$03$i$i = $135;
     } else {
      break;
     }
    }
    $139 = ($135|0)==(0);
    if ($139) {
     label = 57;
    } else {
     $150 = $135;
    }
   } else {
    label = 57;
   }
   if ((label|0) == 57) {
    label = 0;
    $140 = ($129|0)==(0);
    if ($140) {
     $$01$i5$i = 32;
    } else {
     $141 = $129 & 1;
     $142 = ($141|0)==(0);
     if ($142) {
      $$02$i3$i = $129;$nTrailingZeros$03$i2$i = 0;
      while(1) {
       $143 = (($nTrailingZeros$03$i2$i) + 1)|0;
       $144 = $$02$i3$i >>> 1;
       $145 = $144 & 1;
       $146 = ($145|0)==(0);
       if ($146) {
        $$02$i3$i = $144;$nTrailingZeros$03$i2$i = $143;
       } else {
        $$01$i5$i = $143;
        break;
       }
      }
     } else {
      $$01$i5$i = 0;
     }
    }
    $147 = (($$01$i5$i) + 32)|0;
    $148 = ($$01$i5$i|0)==(0);
    $$$i = $148 ? 0 : $147;
    $150 = $$$i;
   }
   $149 = ($150>>>0)>(31);
   if ($149) {
    $152 = $150;
    label = 62;
   } else {
    $$0$i50 = $150;$154 = $127;$157 = $129;$161 = $150;
   }
  }
  if ((label|0) == 62) {
   label = 0;
   $151 = (($152) + -32)|0;
   $$0$i50 = $151;$154 = $129;$157 = 0;$161 = $152;
  }
  $153 = $154 >>> $$0$i50;
  $155 = (32 - ($$0$i50))|0;
  $156 = $157 << $155;
  $158 = $156 | $153;
  $159 = $157 >>> $$0$i50;
  $160 = (($161) + ($pshift$2))|0;
  $$pre = (($head$1) + ($10)|0);
  $127 = $158;$129 = $159;$head$1 = $$pre;$pshift$2 = $160;
 }
 STACKTOP = sp;return;
}
function _trinkle($head,$width,$cmp,$pp$val,$pp$1$val,$pshift,$trusty,$lp) {
 $head = $head|0;
 $width = $width|0;
 $cmp = $cmp|0;
 $pp$val = $pp$val|0;
 $pp$1$val = $pp$1$val|0;
 $pshift = $pshift|0;
 $trusty = $trusty|0;
 $lp = $lp|0;
 var $$$i = 0, $$0$be$i = 0, $$0$i = 0, $$0$lcssa = 0, $$0$lcssa26 = 0, $$01$be$i = 0, $$01$i5$i = 0, $$01$lcssa = 0, $$01$lcssa28 = 0, $$0110 = 0, $$012 = 0, $$012$i = 0, $$02$i$i = 0, $$02$i146 = 0, $$02$i3 = 0, $$02$i3$i = 0, $$02$lcssa = 0, $$02$us$i = 0, $$02$us$i12 = 0, $$029 = 0;
 var $$03$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i3 = 0, $$pre$i8 = 0, $$sum = 0, $$sum$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ar = 0, $ar$i = 0, $exitcond$i = 0, $exitcond$i11 = 0, $i$0$lcssa = 0, $i$0$lcssa$i = 0;
 var $i$0$lcssa27 = 0, $i$01$us$i = 0, $i$01$us$i10 = 0, $i$011 = 0, $i$04$i = 0, $nTrailingZeros$03$i$i = 0, $nTrailingZeros$03$i2$i = 0, $or$cond = 0, $or$cond1 = 0, $or$cond18 = 0, $sum = 0, $sum$i = 0, $tmp$i6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 720|0;
 $tmp$i6 = sp + 456|0;
 $ar$i = sp + 228|0;
 $ar = sp;
 HEAP32[$ar>>2] = $head;
 $0 = (0 - ($width))|0;
 $1 = ($pp$val|0)==(1);
 $2 = ($pp$1$val|0)==(0);
 $or$cond18 = $1 & $2;
 L1: do {
  if ($or$cond18) {
   $$0$lcssa = $head;$$01$lcssa = $pshift;$$02$lcssa = $trusty;$i$0$lcssa = 1;
   label = 18;
  } else {
   $$0110 = $pshift;$$012 = $head;$$029 = $trusty;$24 = $pp$val;$34 = $pp$1$val;$7 = $head;$i$011 = 1;
   while(1) {
    $3 = (($lp) + ($$0110<<2)|0);
    $4 = HEAP32[$3>>2]|0;
    $5 = (0 - ($4))|0;
    $6 = (($$012) + ($5)|0);
    $8 = (FUNCTION_TABLE_iii[$cmp & 7]($6,$7)|0);
    $9 = ($8|0)<(1);
    if ($9) {
     $$0$lcssa = $$012;$$01$lcssa = $$0110;$$02$lcssa = $$029;$i$0$lcssa = $i$011;
     label = 18;
     break L1;
    }
    $10 = ($$029|0)==(0);
    $11 = ($$0110|0)>(1);
    $or$cond = $10 & $11;
    if ($or$cond) {
     $12 = (($$012) + ($0)|0);
     $13 = (($$0110) + -2)|0;
     $14 = (($lp) + ($13<<2)|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = (FUNCTION_TABLE_iii[$cmp & 7]($12,$6)|0);
     $17 = ($16|0)>(-1);
     if ($17) {
      $$0$lcssa26 = $$012;$$01$lcssa28 = $$0110;$i$0$lcssa27 = $i$011;
      break L1;
     }
     $sum = (($15) + ($width))|0;
     $$sum = (0 - ($sum))|0;
     $18 = (($$012) + ($$sum)|0);
     $19 = (FUNCTION_TABLE_iii[$cmp & 7]($18,$6)|0);
     $20 = ($19|0)>(-1);
     if ($20) {
      $$0$lcssa26 = $$012;$$01$lcssa28 = $$0110;$i$0$lcssa27 = $i$011;
      break L1;
     }
    }
    $21 = (($i$011) + 1)|0;
    $22 = (($ar) + ($i$011<<2)|0);
    HEAP32[$22>>2] = $6;
    $23 = (($24) + -1)|0;
    $25 = ($23|0)==(0);
    if ($25) {
     $46 = 32;
     label = 15;
    } else {
     $26 = $23 & 1;
     $27 = ($26|0)==(0);
     if ($27) {
      $$02$i$i = $23;$nTrailingZeros$03$i$i = 0;
      while(1) {
       $28 = (($nTrailingZeros$03$i$i) + 1)|0;
       $29 = $$02$i$i >>> 1;
       $30 = $29 & 1;
       $31 = ($30|0)==(0);
       if ($31) {
        $$02$i$i = $29;$nTrailingZeros$03$i$i = $28;
       } else {
        break;
       }
      }
      $32 = ($28|0)==(0);
      if ($32) {
       label = 10;
      } else {
       $44 = $28;
      }
     } else {
      label = 10;
     }
     if ((label|0) == 10) {
      label = 0;
      $33 = ($34|0)==(0);
      if ($33) {
       $$01$i5$i = 32;
      } else {
       $35 = $34 & 1;
       $36 = ($35|0)==(0);
       if ($36) {
        $$02$i3$i = $34;$nTrailingZeros$03$i2$i = 0;
        while(1) {
         $37 = (($nTrailingZeros$03$i2$i) + 1)|0;
         $38 = $$02$i3$i >>> 1;
         $39 = $38 & 1;
         $40 = ($39|0)==(0);
         if ($40) {
          $$02$i3$i = $38;$nTrailingZeros$03$i2$i = $37;
         } else {
          $$01$i5$i = $37;
          break;
         }
        }
       } else {
        $$01$i5$i = 0;
       }
      }
      $41 = (($$01$i5$i) + 32)|0;
      $42 = ($$01$i5$i|0)==(0);
      $$$i = $42 ? 0 : $41;
      $44 = $$$i;
     }
     $43 = ($44>>>0)>(31);
     if ($43) {
      $46 = $44;
      label = 15;
     } else {
      $$0$i = $44;$48 = $24;$51 = $34;$55 = $44;
     }
    }
    if ((label|0) == 15) {
     label = 0;
     $45 = (($46) + -32)|0;
     $$0$i = $45;$48 = $34;$51 = 0;$55 = $46;
    }
    $47 = $48 >>> $$0$i;
    $49 = (32 - ($$0$i))|0;
    $50 = $51 << $49;
    $52 = $50 | $47;
    $53 = $51 >>> $$0$i;
    $54 = (($55) + ($$0110))|0;
    $56 = ($52|0)==(1);
    $57 = ($53|0)==(0);
    $or$cond1 = $56 & $57;
    if ($or$cond1) {
     $$0$lcssa26 = $6;$$01$lcssa28 = $54;$i$0$lcssa27 = $21;
     break L1;
    }
    $$pre = HEAP32[$ar>>2]|0;
    $$0110 = $54;$$012 = $6;$$029 = 0;$24 = $52;$34 = $53;$7 = $$pre;$i$011 = $21;
   }
  }
 } while(0);
 if ((label|0) == 18) {
  $58 = ($$02$lcssa|0)==(0);
  if ($58) {
   $$0$lcssa26 = $$0$lcssa;$$01$lcssa28 = $$01$lcssa;$i$0$lcssa27 = $i$0$lcssa;
  } else {
   STACKTOP = sp;return;
  }
 }
 $59 = ($i$0$lcssa27|0)<(2);
 L31: do {
  if (!($59)) {
   $60 = (($ar) + ($i$0$lcssa27<<2)|0);
   HEAP32[$60>>2] = $tmp$i6;
   $61 = ($width|0)==(0);
   if (!($61)) {
    $62 = ($i$0$lcssa27|0)>(0);
    if ($62) {
     $$02$us$i12 = $width;$78 = $tmp$i6;
    } else {
     $63 = ($width>>>0)>(256);
     $64 = $63 ? 256 : $width;
     $65 = HEAP32[$ar>>2]|0;
     _memcpy(($tmp$i6|0),($65|0),($64|0))|0;
     $66 = ($64|0)==($width|0);
     if ($66) {
      break;
     } else {
      $$02$i146 = $width;$80 = $64;
     }
     while(1) {
      $79 = (($$02$i146) - ($80))|0;
      $81 = ($79>>>0)>(256);
      $82 = $81 ? 256 : $79;
      _memcpy(($tmp$i6|0),($65|0),($82|0))|0;
      $83 = ($79|0)==($82|0);
      if ($83) {
       break L31;
      } else {
       $$02$i146 = $79;$80 = $82;
      }
     }
    }
    while(1) {
     $76 = ($$02$us$i12>>>0)>(256);
     $68 = $76 ? 256 : $$02$us$i12;
     $77 = HEAP32[$ar>>2]|0;
     _memcpy(($78|0),($77|0),($68|0))|0;
     $74 = $77;$i$01$us$i10 = 0;
     while(1) {
      $70 = (($ar) + ($i$01$us$i10<<2)|0);
      $71 = (($i$01$us$i10) + 1)|0;
      $72 = (($ar) + ($71<<2)|0);
      $73 = HEAP32[$72>>2]|0;
      _memcpy(($74|0),($73|0),($68|0))|0;
      $75 = (($74) + ($68)|0);
      HEAP32[$70>>2] = $75;
      $exitcond$i11 = ($71|0)==($i$0$lcssa27|0);
      if ($exitcond$i11) {
       break;
      } else {
       $74 = $73;$i$01$us$i10 = $71;
      }
     }
     $67 = ($$02$us$i12|0)==($68|0);
     if ($67) {
      break L31;
     }
     $69 = (($$02$us$i12) - ($68))|0;
     $$pre$i8 = HEAP32[$60>>2]|0;
     $$02$us$i12 = $69;$78 = $$pre$i8;
    }
   }
  }
 } while(0);
 HEAP32[$ar$i>>2] = $$0$lcssa26;
 $84 = ($$01$lcssa28|0)>(1);
 L45: do {
  if ($84) {
   $$012$i = $$01$lcssa28;$$03$i = $$0$lcssa26;$90 = $$0$lcssa26;$i$04$i = 1;
   while(1) {
    $85 = (($$03$i) + ($0)|0);
    $86 = (($$012$i) + -2)|0;
    $87 = (($lp) + ($86<<2)|0);
    $88 = HEAP32[$87>>2]|0;
    $sum$i = (($88) + ($width))|0;
    $$sum$i = (0 - ($sum$i))|0;
    $89 = (($$03$i) + ($$sum$i)|0);
    $91 = (FUNCTION_TABLE_iii[$cmp & 7]($90,$89)|0);
    $92 = ($91|0)>(-1);
    if ($92) {
     $93 = (FUNCTION_TABLE_iii[$cmp & 7]($90,$85)|0);
     $94 = ($93|0)>(-1);
     if ($94) {
      $i$0$lcssa$i = $i$04$i;
      break;
     }
    }
    $95 = (FUNCTION_TABLE_iii[$cmp & 7]($89,$85)|0);
    $96 = ($95|0)>(-1);
    $97 = (($i$04$i) + 1)|0;
    $98 = (($ar$i) + ($i$04$i<<2)|0);
    if ($96) {
     HEAP32[$98>>2] = $89;
     $99 = (($$012$i) + -1)|0;
     $$0$be$i = $89;$$01$be$i = $99;
    } else {
     HEAP32[$98>>2] = $85;
     $$0$be$i = $85;$$01$be$i = $86;
    }
    $100 = ($$01$be$i|0)>(1);
    if (!($100)) {
     $i$0$lcssa$i = $97;
     break;
    }
    $$pre$i = HEAP32[$ar$i>>2]|0;
    $$012$i = $$01$be$i;$$03$i = $$0$be$i;$90 = $$pre$i;$i$04$i = $97;
   }
   $101 = ($i$0$lcssa$i|0)<(2);
   if ($101) {
    $126 = $tmp$i6;
   } else {
    $102 = (($ar$i) + ($i$0$lcssa$i<<2)|0);
    HEAP32[$102>>2] = $tmp$i6;
    $103 = ($width|0)==(0);
    if ($103) {
     $126 = $tmp$i6;
    } else {
     $104 = ($i$0$lcssa$i|0)>(0);
     if ($104) {
      $$02$us$i = $width;$120 = $tmp$i6;
     } else {
      $105 = ($width>>>0)>(256);
      $106 = $105 ? 256 : $width;
      $107 = HEAP32[$ar$i>>2]|0;
      _memcpy(($tmp$i6|0),($107|0),($106|0))|0;
      $108 = ($106|0)==($width|0);
      if ($108) {
       $126 = $tmp$i6;
       break;
      } else {
       $$02$i3 = $width;$122 = $106;
      }
      while(1) {
       $121 = (($$02$i3) - ($122))|0;
       $123 = ($121>>>0)>(256);
       $124 = $123 ? 256 : $121;
       _memcpy(($tmp$i6|0),($107|0),($124|0))|0;
       $125 = ($121|0)==($124|0);
       if ($125) {
        $126 = $tmp$i6;
        break L45;
       } else {
        $$02$i3 = $121;$122 = $124;
       }
      }
     }
     while(1) {
      $118 = ($$02$us$i>>>0)>(256);
      $110 = $118 ? 256 : $$02$us$i;
      $119 = HEAP32[$ar$i>>2]|0;
      _memcpy(($120|0),($119|0),($110|0))|0;
      $116 = $119;$i$01$us$i = 0;
      while(1) {
       $112 = (($ar$i) + ($i$01$us$i<<2)|0);
       $113 = (($i$01$us$i) + 1)|0;
       $114 = (($ar$i) + ($113<<2)|0);
       $115 = HEAP32[$114>>2]|0;
       _memcpy(($116|0),($115|0),($110|0))|0;
       $117 = (($116) + ($110)|0);
       HEAP32[$112>>2] = $117;
       $exitcond$i = ($113|0)==($i$0$lcssa$i|0);
       if ($exitcond$i) {
        break;
       } else {
        $116 = $115;$i$01$us$i = $113;
       }
      }
      $109 = ($$02$us$i|0)==($110|0);
      if ($109) {
       $126 = $tmp$i6;
       break L45;
      }
      $111 = (($$02$us$i) - ($110))|0;
      $$pre$i3 = HEAP32[$102>>2]|0;
      $$02$us$i = $111;$120 = $$pre$i3;
     }
    }
   }
  } else {
   $126 = $tmp$i6;
  }
 } while(0);
 STACKTOP = sp;return;
}
function _wcstof($s,$p) {
 $s = $s|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf$i = 0, $f$i = 0, $t$0$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $buf$i = sp + 112|0;
 $f$i = sp;
 dest=$f$i+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$f$i>>2] = 0;
 $0 = (($f$i) + 8|0);
 HEAP32[$0>>2] = 0;
 $1 = (($f$i) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = (($buf$i) + 4|0);
 $3 = (($f$i) + 44|0);
 HEAP32[$3>>2] = $2;
 $4 = (($f$i) + 48|0);
 HEAP32[$4>>2] = 60;
 $5 = (($f$i) + 76|0);
 HEAP32[$5>>2] = -1;
 $6 = (($f$i) + 32|0);
 HEAP32[$6>>2] = 4;
 $t$0$i = $s;
 while(1) {
  $7 = HEAP32[$t$0$i>>2]|0;
  $8 = (_iswspace($7)|0);
  $9 = ($8|0)==(0);
  $10 = (($t$0$i) + 4|0);
  if ($9) {
   break;
  } else {
   $t$0$i = $10;
  }
 }
 $11 = (($f$i) + 84|0);
 HEAP32[$11>>2] = $t$0$i;
 ___shlim($f$i,0);
 $12 = (+___floatscan($f$i,0,1));
 $13 = ($p|0)==(0|0);
 if ($13) {
  $25 = $12;
  STACKTOP = sp;return (+$25);
 }
 $14 = (($f$i) + 108|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = HEAP32[$1>>2]|0;
 $17 = HEAP32[$0>>2]|0;
 $18 = $16;
 $19 = $17;
 $20 = (($18) - ($19))|0;
 $21 = (($20) + ($15))|0;
 $22 = ($21|0)==(0);
 if ($22) {
  $24 = $s;
 } else {
  $23 = (($t$0$i) + ($21<<2)|0);
  $24 = $23;
 }
 HEAP32[$p>>2] = $24;
 $25 = $12;
 STACKTOP = sp;return (+$25);
}
function _wcstod($s,$p) {
 $s = $s|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf$i = 0, $f$i = 0, $t$0$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $buf$i = sp + 112|0;
 $f$i = sp;
 dest=$f$i+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$f$i>>2] = 0;
 $0 = (($f$i) + 8|0);
 HEAP32[$0>>2] = 0;
 $1 = (($f$i) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = (($buf$i) + 4|0);
 $3 = (($f$i) + 44|0);
 HEAP32[$3>>2] = $2;
 $4 = (($f$i) + 48|0);
 HEAP32[$4>>2] = 60;
 $5 = (($f$i) + 76|0);
 HEAP32[$5>>2] = -1;
 $6 = (($f$i) + 32|0);
 HEAP32[$6>>2] = 4;
 $t$0$i = $s;
 while(1) {
  $7 = HEAP32[$t$0$i>>2]|0;
  $8 = (_iswspace($7)|0);
  $9 = ($8|0)==(0);
  $10 = (($t$0$i) + 4|0);
  if ($9) {
   break;
  } else {
   $t$0$i = $10;
  }
 }
 $11 = (($f$i) + 84|0);
 HEAP32[$11>>2] = $t$0$i;
 ___shlim($f$i,0);
 $12 = (+___floatscan($f$i,1,1));
 $13 = ($p|0)==(0|0);
 if ($13) {
  STACKTOP = sp;return (+$12);
 }
 $14 = (($f$i) + 108|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = HEAP32[$1>>2]|0;
 $17 = HEAP32[$0>>2]|0;
 $18 = $16;
 $19 = $17;
 $20 = (($18) - ($19))|0;
 $21 = (($20) + ($15))|0;
 $22 = ($21|0)==(0);
 if ($22) {
  $24 = $s;
 } else {
  $23 = (($t$0$i) + ($21<<2)|0);
  $24 = $23;
 }
 HEAP32[$p>>2] = $24;
 STACKTOP = sp;return (+$12);
}
function _wcstold($s,$p) {
 $s = $s|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf$i = 0, $f$i = 0, $t$0$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $buf$i = sp + 112|0;
 $f$i = sp;
 dest=$f$i+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$f$i>>2] = 0;
 $0 = (($f$i) + 8|0);
 HEAP32[$0>>2] = 0;
 $1 = (($f$i) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = (($buf$i) + 4|0);
 $3 = (($f$i) + 44|0);
 HEAP32[$3>>2] = $2;
 $4 = (($f$i) + 48|0);
 HEAP32[$4>>2] = 60;
 $5 = (($f$i) + 76|0);
 HEAP32[$5>>2] = -1;
 $6 = (($f$i) + 32|0);
 HEAP32[$6>>2] = 4;
 $t$0$i = $s;
 while(1) {
  $7 = HEAP32[$t$0$i>>2]|0;
  $8 = (_iswspace($7)|0);
  $9 = ($8|0)==(0);
  $10 = (($t$0$i) + 4|0);
  if ($9) {
   break;
  } else {
   $t$0$i = $10;
  }
 }
 $11 = (($f$i) + 84|0);
 HEAP32[$11>>2] = $t$0$i;
 ___shlim($f$i,0);
 $12 = (+___floatscan($f$i,2,1));
 $13 = ($p|0)==(0|0);
 if ($13) {
  STACKTOP = sp;return (+$12);
 }
 $14 = (($f$i) + 108|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = HEAP32[$1>>2]|0;
 $17 = HEAP32[$0>>2]|0;
 $18 = $16;
 $19 = $17;
 $20 = (($18) - ($19))|0;
 $21 = (($20) + ($15))|0;
 $22 = ($21|0)==(0);
 if ($22) {
  $24 = $s;
 } else {
  $23 = (($t$0$i) + ($21<<2)|0);
  $24 = $23;
 }
 HEAP32[$p>>2] = $24;
 STACKTOP = sp;return (+$12);
}
function _do_read134($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$ = 0, $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0$lcssa = 0, $i$01 = 0, $or$cond = 0, $phitmp = 0, $phitmp$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 84|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0);
 $$ = $3 ? $1 : 284768;
 $4 = (($f) + 48|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 $$pre = (($f) + 44|0);
 L1: do {
  if ($6) {
   $i$0$lcssa = 0;
  } else {
   $i$01 = 0;
   while(1) {
    $7 = (($$) + ($i$01<<2)|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = ($8|0)==(0);
    if ($9) {
     $i$0$lcssa = $i$01;
     break L1;
    }
    $10 = ($8|0)<(128);
    $phitmp = $8&255;
    $phitmp$ = $10 ? $phitmp : 64;
    $11 = HEAP32[$$pre>>2]|0;
    $12 = (($11) + ($i$01)|0);
    HEAP8[$12>>0] = $phitmp$;
    $13 = (($i$01) + 1)|0;
    $14 = HEAP32[$4>>2]|0;
    $15 = ($13>>>0)<($14>>>0);
    if ($15) {
     $i$01 = $13;
    } else {
     $i$0$lcssa = $13;
     break;
    }
   }
  }
 } while(0);
 $16 = HEAP32[$$pre>>2]|0;
 $17 = (($f) + 4|0);
 HEAP32[$17>>2] = $16;
 $18 = (($16) + ($i$0$lcssa)|0);
 $19 = (($f) + 8|0);
 HEAP32[$19>>2] = $18;
 $20 = (($$) + ($i$0$lcssa<<2)|0);
 HEAP32[$0>>2] = $20;
 $21 = ($i$0$lcssa|0)==(0);
 $22 = ($len|0)==(0);
 $or$cond = $21 | $22;
 if ($or$cond) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $23 = (($16) + 1|0);
 HEAP32[$17>>2] = $23;
 $24 = HEAP8[$16>>0]|0;
 HEAP8[$buf>>0] = $24;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _wcstoull($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf$i = 0, $f$i = 0, $t$0$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $buf$i = sp + 112|0;
 $f$i = sp;
 dest=$f$i+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$f$i>>2] = 0;
 $0 = (($f$i) + 8|0);
 HEAP32[$0>>2] = 0;
 $1 = (($f$i) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = (($buf$i) + 4|0);
 $3 = (($f$i) + 44|0);
 HEAP32[$3>>2] = $2;
 $4 = (($f$i) + 48|0);
 HEAP32[$4>>2] = 60;
 $5 = (($f$i) + 76|0);
 HEAP32[$5>>2] = -1;
 $6 = (($f$i) + 32|0);
 HEAP32[$6>>2] = 5;
 $t$0$i = $s;
 while(1) {
  $7 = HEAP32[$t$0$i>>2]|0;
  $8 = (_iswspace($7)|0);
  $9 = ($8|0)==(0);
  $10 = (($t$0$i) + 4|0);
  if ($9) {
   break;
  } else {
   $t$0$i = $10;
  }
 }
 $11 = (($f$i) + 84|0);
 HEAP32[$11>>2] = $t$0$i;
 ___shlim($f$i,0);
 $12 = (___intscan($f$i,$base,1,-1,-1)|0);
 $13 = tempRet0;
 $14 = ($p|0)==(0|0);
 if ($14) {
  tempRet0 = $13;
  STACKTOP = sp;return ($12|0);
 }
 $15 = (($f$i) + 108|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = HEAP32[$1>>2]|0;
 $18 = HEAP32[$0>>2]|0;
 $19 = $17;
 $20 = $18;
 $21 = (($19) - ($20))|0;
 $22 = (($21) + ($16))|0;
 $23 = ($22|0)==(0);
 if ($23) {
  $25 = $s;
 } else {
  $24 = (($t$0$i) + ($22<<2)|0);
  $25 = $24;
 }
 HEAP32[$p>>2] = $25;
 tempRet0 = $13;
 STACKTOP = sp;return ($12|0);
}
function _wcstoll($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf$i = 0, $f$i = 0, $t$0$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $buf$i = sp + 112|0;
 $f$i = sp;
 dest=$f$i+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$f$i>>2] = 0;
 $0 = (($f$i) + 8|0);
 HEAP32[$0>>2] = 0;
 $1 = (($f$i) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = (($buf$i) + 4|0);
 $3 = (($f$i) + 44|0);
 HEAP32[$3>>2] = $2;
 $4 = (($f$i) + 48|0);
 HEAP32[$4>>2] = 60;
 $5 = (($f$i) + 76|0);
 HEAP32[$5>>2] = -1;
 $6 = (($f$i) + 32|0);
 HEAP32[$6>>2] = 5;
 $t$0$i = $s;
 while(1) {
  $7 = HEAP32[$t$0$i>>2]|0;
  $8 = (_iswspace($7)|0);
  $9 = ($8|0)==(0);
  $10 = (($t$0$i) + 4|0);
  if ($9) {
   break;
  } else {
   $t$0$i = $10;
  }
 }
 $11 = (($f$i) + 84|0);
 HEAP32[$11>>2] = $t$0$i;
 ___shlim($f$i,0);
 $12 = (___intscan($f$i,$base,1,0,-2147483648)|0);
 $13 = tempRet0;
 $14 = ($p|0)==(0|0);
 if ($14) {
  tempRet0 = $13;
  STACKTOP = sp;return ($12|0);
 }
 $15 = (($f$i) + 108|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = HEAP32[$1>>2]|0;
 $18 = HEAP32[$0>>2]|0;
 $19 = $17;
 $20 = $18;
 $21 = (($19) - ($20))|0;
 $22 = (($21) + ($16))|0;
 $23 = ($22|0)==(0);
 if ($23) {
  $25 = $s;
 } else {
  $24 = (($t$0$i) + ($22<<2)|0);
  $25 = $24;
 }
 HEAP32[$p>>2] = $25;
 tempRet0 = $13;
 STACKTOP = sp;return ($12|0);
}
function _wcstoul($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf$i = 0, $f$i = 0, $t$0$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $buf$i = sp + 112|0;
 $f$i = sp;
 dest=$f$i+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$f$i>>2] = 0;
 $0 = (($f$i) + 8|0);
 HEAP32[$0>>2] = 0;
 $1 = (($f$i) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = (($buf$i) + 4|0);
 $3 = (($f$i) + 44|0);
 HEAP32[$3>>2] = $2;
 $4 = (($f$i) + 48|0);
 HEAP32[$4>>2] = 60;
 $5 = (($f$i) + 76|0);
 HEAP32[$5>>2] = -1;
 $6 = (($f$i) + 32|0);
 HEAP32[$6>>2] = 5;
 $t$0$i = $s;
 while(1) {
  $7 = HEAP32[$t$0$i>>2]|0;
  $8 = (_iswspace($7)|0);
  $9 = ($8|0)==(0);
  $10 = (($t$0$i) + 4|0);
  if ($9) {
   break;
  } else {
   $t$0$i = $10;
  }
 }
 $11 = (($f$i) + 84|0);
 HEAP32[$11>>2] = $t$0$i;
 ___shlim($f$i,0);
 $12 = (___intscan($f$i,$base,1,-1,0)|0);
 $13 = tempRet0;
 $14 = ($p|0)==(0|0);
 if ($14) {
  STACKTOP = sp;return ($12|0);
 }
 $15 = (($f$i) + 108|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = HEAP32[$1>>2]|0;
 $18 = HEAP32[$0>>2]|0;
 $19 = $17;
 $20 = $18;
 $21 = (($19) - ($20))|0;
 $22 = (($21) + ($16))|0;
 $23 = ($22|0)==(0);
 if ($23) {
  $25 = $s;
 } else {
  $24 = (($t$0$i) + ($22<<2)|0);
  $25 = $24;
 }
 HEAP32[$p>>2] = $25;
 STACKTOP = sp;return ($12|0);
}
function _wcstol($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf$i = 0, $f$i = 0, $t$0$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $buf$i = sp + 112|0;
 $f$i = sp;
 dest=$f$i+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$f$i>>2] = 0;
 $0 = (($f$i) + 8|0);
 HEAP32[$0>>2] = 0;
 $1 = (($f$i) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = (($buf$i) + 4|0);
 $3 = (($f$i) + 44|0);
 HEAP32[$3>>2] = $2;
 $4 = (($f$i) + 48|0);
 HEAP32[$4>>2] = 60;
 $5 = (($f$i) + 76|0);
 HEAP32[$5>>2] = -1;
 $6 = (($f$i) + 32|0);
 HEAP32[$6>>2] = 5;
 $t$0$i = $s;
 while(1) {
  $7 = HEAP32[$t$0$i>>2]|0;
  $8 = (_iswspace($7)|0);
  $9 = ($8|0)==(0);
  $10 = (($t$0$i) + 4|0);
  if ($9) {
   break;
  } else {
   $t$0$i = $10;
  }
 }
 $11 = (($f$i) + 84|0);
 HEAP32[$11>>2] = $t$0$i;
 ___shlim($f$i,0);
 $12 = (___intscan($f$i,$base,1,-2147483648,0)|0);
 $13 = tempRet0;
 $14 = ($p|0)==(0|0);
 if ($14) {
  STACKTOP = sp;return ($12|0);
 }
 $15 = (($f$i) + 108|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = HEAP32[$1>>2]|0;
 $18 = HEAP32[$0>>2]|0;
 $19 = $17;
 $20 = $18;
 $21 = (($19) - ($20))|0;
 $22 = (($21) + ($16))|0;
 $23 = ($22|0)==(0);
 if ($23) {
  $25 = $s;
 } else {
  $24 = (($t$0$i) + ($22<<2)|0);
  $25 = $24;
 }
 HEAP32[$p>>2] = $25;
 STACKTOP = sp;return ($12|0);
}
function _wcstoimax($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf$i$i = 0, $f$i$i = 0, $t$0$i$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $buf$i$i = sp + 112|0;
 $f$i$i = sp;
 dest=$f$i$i+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$f$i$i>>2] = 0;
 $0 = (($f$i$i) + 8|0);
 HEAP32[$0>>2] = 0;
 $1 = (($f$i$i) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = (($buf$i$i) + 4|0);
 $3 = (($f$i$i) + 44|0);
 HEAP32[$3>>2] = $2;
 $4 = (($f$i$i) + 48|0);
 HEAP32[$4>>2] = 60;
 $5 = (($f$i$i) + 76|0);
 HEAP32[$5>>2] = -1;
 $6 = (($f$i$i) + 32|0);
 HEAP32[$6>>2] = 5;
 $t$0$i$i = $s;
 while(1) {
  $7 = HEAP32[$t$0$i$i>>2]|0;
  $8 = (_iswspace($7)|0);
  $9 = ($8|0)==(0);
  $10 = (($t$0$i$i) + 4|0);
  if ($9) {
   break;
  } else {
   $t$0$i$i = $10;
  }
 }
 $11 = (($f$i$i) + 84|0);
 HEAP32[$11>>2] = $t$0$i$i;
 ___shlim($f$i$i,0);
 $12 = (___intscan($f$i$i,$base,1,0,-2147483648)|0);
 $13 = tempRet0;
 $14 = ($p|0)==(0|0);
 if ($14) {
  tempRet0 = $13;
  STACKTOP = sp;return ($12|0);
 }
 $15 = (($f$i$i) + 108|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = HEAP32[$1>>2]|0;
 $18 = HEAP32[$0>>2]|0;
 $19 = $17;
 $20 = $18;
 $21 = (($19) - ($20))|0;
 $22 = (($21) + ($16))|0;
 $23 = ($22|0)==(0);
 if ($23) {
  $25 = $s;
 } else {
  $24 = (($t$0$i$i) + ($22<<2)|0);
  $25 = $24;
 }
 HEAP32[$p>>2] = $25;
 tempRet0 = $13;
 STACKTOP = sp;return ($12|0);
}
function _wcstoumax($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf$i$i = 0, $f$i$i = 0, $t$0$i$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $buf$i$i = sp + 112|0;
 $f$i$i = sp;
 dest=$f$i$i+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$f$i$i>>2] = 0;
 $0 = (($f$i$i) + 8|0);
 HEAP32[$0>>2] = 0;
 $1 = (($f$i$i) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = (($buf$i$i) + 4|0);
 $3 = (($f$i$i) + 44|0);
 HEAP32[$3>>2] = $2;
 $4 = (($f$i$i) + 48|0);
 HEAP32[$4>>2] = 60;
 $5 = (($f$i$i) + 76|0);
 HEAP32[$5>>2] = -1;
 $6 = (($f$i$i) + 32|0);
 HEAP32[$6>>2] = 5;
 $t$0$i$i = $s;
 while(1) {
  $7 = HEAP32[$t$0$i$i>>2]|0;
  $8 = (_iswspace($7)|0);
  $9 = ($8|0)==(0);
  $10 = (($t$0$i$i) + 4|0);
  if ($9) {
   break;
  } else {
   $t$0$i$i = $10;
  }
 }
 $11 = (($f$i$i) + 84|0);
 HEAP32[$11>>2] = $t$0$i$i;
 ___shlim($f$i$i,0);
 $12 = (___intscan($f$i$i,$base,1,-1,-1)|0);
 $13 = tempRet0;
 $14 = ($p|0)==(0|0);
 if ($14) {
  tempRet0 = $13;
  STACKTOP = sp;return ($12|0);
 }
 $15 = (($f$i$i) + 108|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = HEAP32[$1>>2]|0;
 $18 = HEAP32[$0>>2]|0;
 $19 = $17;
 $20 = $18;
 $21 = (($19) - ($20))|0;
 $22 = (($21) + ($16))|0;
 $23 = ($22|0)==(0);
 if ($23) {
  $25 = $s;
 } else {
  $24 = (($t$0$i$i) + ($22<<2)|0);
  $25 = $24;
 }
 HEAP32[$p>>2] = $25;
 tempRet0 = $13;
 STACKTOP = sp;return ($12|0);
}
function _do_read136($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$ = 0, $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0$lcssa = 0, $i$01 = 0, $or$cond = 0, $phitmp = 0, $phitmp$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 84|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0);
 $$ = $3 ? $1 : 284776;
 $4 = (($f) + 48|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 $$pre = (($f) + 44|0);
 L1: do {
  if ($6) {
   $i$0$lcssa = 0;
  } else {
   $i$01 = 0;
   while(1) {
    $7 = (($$) + ($i$01<<2)|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = ($8|0)==(0);
    if ($9) {
     $i$0$lcssa = $i$01;
     break L1;
    }
    $10 = ($8|0)<(128);
    $phitmp = $8&255;
    $phitmp$ = $10 ? $phitmp : 64;
    $11 = HEAP32[$$pre>>2]|0;
    $12 = (($11) + ($i$01)|0);
    HEAP8[$12>>0] = $phitmp$;
    $13 = (($i$01) + 1)|0;
    $14 = HEAP32[$4>>2]|0;
    $15 = ($13>>>0)<($14>>>0);
    if ($15) {
     $i$01 = $13;
    } else {
     $i$0$lcssa = $13;
     break;
    }
   }
  }
 } while(0);
 $16 = HEAP32[$$pre>>2]|0;
 $17 = (($f) + 4|0);
 HEAP32[$17>>2] = $16;
 $18 = (($16) + ($i$0$lcssa)|0);
 $19 = (($f) + 8|0);
 HEAP32[$19>>2] = $18;
 $20 = (($$) + ($i$0$lcssa<<2)|0);
 HEAP32[$0>>2] = $20;
 $21 = ($i$0$lcssa|0)==(0);
 $22 = ($len|0)==(0);
 $or$cond = $21 | $22;
 if ($or$cond) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $23 = (($16) + 1|0);
 HEAP32[$17>>2] = $23;
 $24 = HEAP8[$16>>0]|0;
 HEAP8[$buf>>0] = $24;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _bcmp($s1,$s2,$n) {
 $s1 = $s1|0;
 $s2 = $s2|0;
 $n = $n|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_memcmp($s1,$s2,$n)|0);
 STACKTOP = sp;return ($0|0);
}
function _bcopy($s1,$s2,$n) {
 $s1 = $s1|0;
 $s2 = $s2|0;
 $n = $n|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _memmove(($s2|0),($s1|0),($n|0))|0;
 STACKTOP = sp;return;
}
function _bzero($s,$n) {
 $s = $s|0;
 $n = $n|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _memset(($s|0),0,($n|0))|0;
 STACKTOP = sp;return;
}
function _index($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strchr($s,$c)|0);
 STACKTOP = sp;return ($0|0);
}
function _memccpy($dest,$src,$c,$n) {
 $dest = $dest|0;
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0 = 0, $$04$lcssa = 0, $$0419 = 0, $$1$lcssa = 0, $$19 = 0, $$2$ph = 0, $$25 = 0, $$lcssa = 0, $$not = 0, $$not17 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $d$0$lcssa = 0, $d$020 = 0, $d$1$ph = 0, $d$16 = 0, $d$2 = 0;
 var $or$cond = 0, $or$cond18 = 0, $s$0$lcssa = 0, $s$021 = 0, $s$1$ph = 0, $s$17 = 0, $s$2 = 0, $wd$0$lcssa = 0, $wd$010 = 0, $ws$0$lcssa = 0, $ws$011 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $dest;
 $3 = $1 ^ $2;
 $4 = $3 & 3;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = $1 & 3;
  $7 = ($6|0)!=(0);
  $$not17 = $7 ^ 1;
  $8 = ($n|0)==(0);
  $or$cond18 = $8 | $$not17;
  L3: do {
   if ($or$cond18) {
    $$04$lcssa = $n;$$lcssa = $7;$d$0$lcssa = $dest;$s$0$lcssa = $src;
   } else {
    $9 = $c&255;
    $$0419 = $n;$44 = $7;$d$020 = $dest;$s$021 = $src;
    while(1) {
     $10 = HEAP8[$s$021>>0]|0;
     HEAP8[$d$020>>0] = $10;
     $11 = ($10<<24>>24)==($9<<24>>24);
     if ($11) {
      $$04$lcssa = $$0419;$$lcssa = $44;$d$0$lcssa = $d$020;$s$0$lcssa = $s$021;
      break L3;
     }
     $12 = (($$0419) + -1)|0;
     $13 = (($s$021) + 1|0);
     $14 = (($d$020) + 1|0);
     $15 = $13;
     $16 = $15 & 3;
     $17 = ($16|0)!=(0);
     $$not = $17 ^ 1;
     $18 = ($12|0)==(0);
     $or$cond = $18 | $$not;
     if ($or$cond) {
      $$04$lcssa = $12;$$lcssa = $17;$d$0$lcssa = $14;$s$0$lcssa = $13;
      break;
     } else {
      $$0419 = $12;$44 = $17;$d$020 = $14;$s$021 = $13;
     }
    }
   }
  } while(0);
  if ($$lcssa) {
   $d$2 = $d$0$lcssa;$s$2 = $s$0$lcssa;
  } else {
   $19 = Math_imul($0, 16843009)|0;
   $20 = ($$04$lcssa>>>0)>(3);
   L10: do {
    if ($20) {
     $$19 = $$04$lcssa;$wd$010 = $d$0$lcssa;$ws$011 = $s$0$lcssa;
     while(1) {
      $21 = HEAP32[$ws$011>>2]|0;
      $22 = $21 ^ $19;
      $23 = (($22) + -16843009)|0;
      $24 = $22 & -2139062144;
      $25 = $24 ^ -2139062144;
      $26 = $25 & $23;
      $27 = ($26|0)==(0);
      if (!($27)) {
       $$1$lcssa = $$19;$wd$0$lcssa = $wd$010;$ws$0$lcssa = $ws$011;
       break L10;
      }
      HEAP32[$wd$010>>2] = $21;
      $28 = (($$19) + -4)|0;
      $29 = (($ws$011) + 4|0);
      $30 = (($wd$010) + 4|0);
      $31 = ($28>>>0)>(3);
      if ($31) {
       $$19 = $28;$wd$010 = $30;$ws$011 = $29;
      } else {
       $$1$lcssa = $28;$wd$0$lcssa = $30;$ws$0$lcssa = $29;
       break;
      }
     }
    } else {
     $$1$lcssa = $$04$lcssa;$wd$0$lcssa = $d$0$lcssa;$ws$0$lcssa = $s$0$lcssa;
    }
   } while(0);
   $$2$ph = $$1$lcssa;$d$1$ph = $wd$0$lcssa;$s$1$ph = $ws$0$lcssa;
   label = 11;
  }
 } else {
  $$2$ph = $n;$d$1$ph = $dest;$s$1$ph = $src;
  label = 11;
 }
 L15: do {
  if ((label|0) == 11) {
   $32 = ($$2$ph|0)==(0);
   if ($32) {
    $d$2 = $d$1$ph;$s$2 = $s$1$ph;
   } else {
    $33 = $c&255;
    $$25 = $$2$ph;$d$16 = $d$1$ph;$s$17 = $s$1$ph;
    while(1) {
     $34 = HEAP8[$s$17>>0]|0;
     HEAP8[$d$16>>0] = $34;
     $35 = ($34<<24>>24)==($33<<24>>24);
     if ($35) {
      $d$2 = $d$16;$s$2 = $s$17;
      break L15;
     }
     $36 = (($$25) + -1)|0;
     $37 = (($s$17) + 1|0);
     $38 = (($d$16) + 1|0);
     $39 = ($36|0)==(0);
     if ($39) {
      $d$2 = $38;$s$2 = $37;
      break;
     } else {
      $$25 = $36;$d$16 = $38;$s$17 = $37;
     }
    }
   }
  }
 } while(0);
 $40 = HEAP8[$s$2>>0]|0;
 $41 = $c&255;
 $42 = ($40<<24>>24)==($41<<24>>24);
 $43 = (($d$2) + 1|0);
 $$0 = $42 ? $43 : 0;
 STACKTOP = sp;return ($$0|0);
}
function _memmem($h0,$k,$n0,$l) {
 $h0 = $h0|0;
 $k = $k|0;
 $n0 = $n0|0;
 $l = $l|0;
 var $$0 = 0, $$013$i = 0, $$013$i7 = 0, $$015$i = 0, $$02$be$i = 0, $$02$be$us$i = 0, $$02$i = 0, $$0210$i = 0, $$0210$us$i = 0, $$022$i = 0, $$022$i8 = 0, $$024$i = 0, $$025$i = 0, $$mem$0$us$i = 0, $$phi$trans$insert = 0, $$pr$i = 0, $$pr$us$i = 0, $$pre = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $byteset$i = 0, $exitcond$i = 0;
 var $hw$0$in4$i = 0, $hw$04$i = 0, $hw$06$i = 0, $i$035$i = 0, $ip$0$ph71$i = 0, $ip$0$ph71124$i = 0, $ip$0$ph74$i = 0, $ip$1$ip$0$$i = 0, $ip$1$ip$0$i = 0, $ip$1$ph51$i = 0, $ip$1$ph54$i = 0, $jp$0$ph25$ph65$i = 0, $jp$0$ph2559$i = 0, $jp$0$ph75$i = 0, $jp$1$ph14$ph46$i = 0, $jp$1$ph1440$i = 0, $jp$1$ph55$i = 0, $k$033$i = 0, $k$120$i = 0, $k$2$us$i = 0;
 var $k$37$i = 0, $k$37$us$i = 0, $k$4$i = 0, $k$4$us$i = 0, $mem$0$be$us$i = 0, $mem$011$us$i = 0, $mem0$0$i = 0, $n0$idx = 0, $n0$idx$val = 0, $n0$idx2 = 0, $n0$idx2$val = 0, $n0$idx3 = 0, $n0$idx3$val = 0, $notlhs$i = 0, $notrhs$us$i = 0, $or$cond = 0, $or$cond3$us$i = 0, $p$0$ph$ph63$i = 0, $p$0$ph$ph63128$i = 0, $p$0$ph$ph66$i = 0;
 var $p$1$p$0$i = 0, $p$1$ph$ph44$i = 0, $p$1$ph$ph47$i = 0, $p$3$i = 0, $phitmp = 0, $shift$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0;
 $byteset$i = sp + 1024|0;
 $shift$i = sp;
 $0 = ($l|0)==(0);
 if ($0) {
  $$0 = $h0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = ($k>>>0)<($l>>>0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = HEAP8[$n0>>0]|0;
 $3 = $2&255;
 $4 = (_memchr($h0,$3,$k)|0);
 $5 = ($4|0)==(0|0);
 $6 = ($l|0)==(1);
 $or$cond = $5 | $6;
 if ($or$cond) {
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = $4;
 $8 = $h0;
 $9 = (($8) - ($7))|0;
 $10 = (($9) + ($k))|0;
 if ((($l|0) == 2)) {
  $n0$idx = (($n0) + 1|0);
  $n0$idx$val = HEAP8[$n0$idx>>0]|0;
  $11 = $3 << 8;
  $12 = $n0$idx$val&255;
  $13 = $12 | $11;
  $14 = (($4) + 1|0);
  $$022$i = (($10) + -1)|0;
  $15 = ($$022$i|0)==(0);
  if ($15) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $16 = HEAP8[$4>>0]|0;
  $17 = HEAP8[$14>>0]|0;
  $18 = $16&255;
  $19 = $17&255;
  $20 = $18 << 8;
  $21 = $20 | $19;
  $$013$i = $14;$$025$i = $$022$i;$hw$0$in4$i = $21;
  while(1) {
   $22 = $hw$0$in4$i & 65535;
   $23 = ($22|0)==($13|0);
   if ($23) {
    break;
   }
   $25 = $22 << 8;
   $26 = (($$013$i) + 1|0);
   $27 = HEAP8[$26>>0]|0;
   $28 = $27&255;
   $29 = $28 | $25;
   $$02$i = (($$025$i) + -1)|0;
   $30 = ($$02$i|0)==(0);
   if ($30) {
    $$0 = 0;
    label = 75;
    break;
   } else {
    $$013$i = $26;$$025$i = $$02$i;$hw$0$in4$i = $29;
   }
  }
  if ((label|0) == 75) {
   STACKTOP = sp;return ($$0|0);
  }
  $24 = (($$013$i) + -1|0);
  $$0 = $24;
  STACKTOP = sp;return ($$0|0);
 } else if ((($l|0) == 3)) {
  $n0$idx2 = (($n0) + 1|0);
  $n0$idx2$val = HEAP8[$n0$idx2>>0]|0;
  $n0$idx3 = (($n0) + 2|0);
  $n0$idx3$val = HEAP8[$n0$idx3>>0]|0;
  $31 = $3 << 24;
  $32 = $n0$idx2$val&255;
  $33 = $32 << 16;
  $34 = $33 | $31;
  $35 = $n0$idx3$val&255;
  $36 = $35 << 8;
  $37 = $34 | $36;
  $38 = (($4) + 2|0);
  $39 = (($10) + -2)|0;
  $40 = ($39|0)==(0);
  if ($40) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $41 = (($4) + 1|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = HEAP8[$4>>0]|0;
  $44 = HEAP8[$38>>0]|0;
  $45 = $42&255;
  $46 = $43&255;
  $47 = $44&255;
  $48 = $45 << 16;
  $49 = $46 << 24;
  $50 = $47 << 8;
  $51 = $49 | $48;
  $52 = $51 | $50;
  $$013$i7 = $38;$$022$i8 = $39;$hw$04$i = $52;
  while(1) {
   $53 = ($hw$04$i|0)==($37|0);
   if ($53) {
    break;
   }
   $55 = (($$022$i8) + -1)|0;
   $56 = (($$013$i7) + 1|0);
   $57 = HEAP8[$56>>0]|0;
   $58 = $57&255;
   $59 = $58 | $hw$04$i;
   $60 = $59 << 8;
   $61 = ($55|0)==(0);
   if ($61) {
    $$0 = 0;
    label = 75;
    break;
   } else {
    $$013$i7 = $56;$$022$i8 = $55;$hw$04$i = $60;
   }
  }
  if ((label|0) == 75) {
   STACKTOP = sp;return ($$0|0);
  }
  $54 = (($$013$i7) + -2|0);
  $$0 = $54;
  STACKTOP = sp;return ($$0|0);
 } else if ((($l|0) == 4)) {
  $62 = $3 << 24;
  $63 = (($n0) + 1|0);
  $64 = HEAP8[$63>>0]|0;
  $65 = $64&255;
  $66 = $65 << 16;
  $67 = $66 | $62;
  $68 = (($n0) + 2|0);
  $69 = HEAP8[$68>>0]|0;
  $70 = $69&255;
  $71 = $70 << 8;
  $72 = $67 | $71;
  $73 = (($n0) + 3|0);
  $74 = HEAP8[$73>>0]|0;
  $75 = $74&255;
  $76 = $72 | $75;
  $77 = (($4) + 3|0);
  $78 = (($10) + -3)|0;
  $79 = ($78|0)==(0);
  if ($79) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $80 = (($4) + 1|0);
  $81 = (($4) + 2|0);
  $82 = HEAP8[$80>>0]|0;
  $83 = HEAP8[$4>>0]|0;
  $84 = HEAP8[$81>>0]|0;
  $85 = $82&255;
  $86 = $83&255;
  $87 = $84&255;
  $88 = $85 << 16;
  $89 = $86 << 24;
  $90 = HEAP8[$77>>0]|0;
  $91 = $87 << 8;
  $92 = $89 | $88;
  $93 = $90&255;
  $94 = $92 | $91;
  $95 = $94 | $93;
  $$015$i = $77;$$024$i = $78;$hw$06$i = $95;
  while(1) {
   $96 = ($hw$06$i|0)==($76|0);
   if ($96) {
    break;
   }
   $98 = (($$024$i) + -1)|0;
   $99 = $hw$06$i << 8;
   $100 = (($$015$i) + 1|0);
   $101 = HEAP8[$100>>0]|0;
   $102 = $101&255;
   $103 = $102 | $99;
   $104 = ($98|0)==(0);
   if ($104) {
    $$0 = 0;
    label = 75;
    break;
   } else {
    $$015$i = $100;$$024$i = $98;$hw$06$i = $103;
   }
  }
  if ((label|0) == 75) {
   STACKTOP = sp;return ($$0|0);
  }
  $97 = (($$015$i) + -3|0);
  $$0 = $97;
  STACKTOP = sp;return ($$0|0);
 } else {
  $105 = (($4) + ($10)|0);
  ;HEAP32[$byteset$i+0>>2]=0|0;HEAP32[$byteset$i+4>>2]=0|0;HEAP32[$byteset$i+8>>2]=0|0;HEAP32[$byteset$i+12>>2]=0|0;HEAP32[$byteset$i+16>>2]=0|0;HEAP32[$byteset$i+20>>2]=0|0;HEAP32[$byteset$i+24>>2]=0|0;HEAP32[$byteset$i+28>>2]=0|0;
  $108 = $2;$i$035$i = 1;
  while(1) {
   $107 = $108&255;
   $109 = $107 & 31;
   $110 = 1 << $109;
   $111 = $107 >>> 5;
   $112 = (($byteset$i) + ($111<<2)|0);
   $113 = HEAP32[$112>>2]|0;
   $114 = $110 | $113;
   HEAP32[$112>>2] = $114;
   $115 = (($shift$i) + ($107<<2)|0);
   HEAP32[$115>>2] = $i$035$i;
   $exitcond$i = ($i$035$i|0)==($l|0);
   if ($exitcond$i) {
    break;
   }
   $$phi$trans$insert = (($n0) + ($i$035$i)|0);
   $$pre = HEAP8[$$phi$trans$insert>>0]|0;
   $phitmp = (($i$035$i) + 1)|0;
   $108 = $$pre;$i$035$i = $phitmp;
  }
  $106 = ($l>>>0)>(1);
  L38: do {
   if ($106) {
    $254 = 1;$ip$0$ph74$i = -1;$jp$0$ph75$i = 0;
    L39: while(1) {
     $257 = $254;$jp$0$ph25$ph65$i = $jp$0$ph75$i;$p$0$ph$ph66$i = 1;
     while(1) {
      $256 = $257;$jp$0$ph2559$i = $jp$0$ph25$ph65$i;
      L43: while(1) {
       $123 = $256;$k$033$i = 1;
       while(1) {
        $119 = (($k$033$i) + ($ip$0$ph74$i))|0;
        $120 = (($n0) + ($119)|0);
        $121 = HEAP8[$120>>0]|0;
        $122 = (($n0) + ($123)|0);
        $124 = HEAP8[$122>>0]|0;
        $125 = ($121<<24>>24)==($124<<24>>24);
        if (!($125)) {
         break L43;
        }
        $126 = ($k$033$i|0)==($p$0$ph$ph66$i|0);
        $117 = (($k$033$i) + 1)|0;
        if ($126) {
         break;
        }
        $116 = (($117) + ($jp$0$ph2559$i))|0;
        $118 = ($116>>>0)<($l>>>0);
        if ($118) {
         $123 = $116;$k$033$i = $117;
        } else {
         $ip$0$ph71$i = $ip$0$ph74$i;$p$0$ph$ph63$i = $p$0$ph$ph66$i;
         break L39;
        }
       }
       $127 = (($jp$0$ph2559$i) + ($p$0$ph$ph66$i))|0;
       $128 = (($127) + 1)|0;
       $129 = ($128>>>0)<($l>>>0);
       if ($129) {
        $256 = $128;$jp$0$ph2559$i = $127;
       } else {
        $ip$0$ph71$i = $ip$0$ph74$i;$p$0$ph$ph63$i = $p$0$ph$ph66$i;
        break L39;
       }
      }
      $130 = ($121&255)>($124&255);
      $131 = (($123) - ($ip$0$ph74$i))|0;
      if (!($130)) {
       break;
      }
      $132 = (($123) + 1)|0;
      $133 = ($132>>>0)<($l>>>0);
      if ($133) {
       $257 = $132;$jp$0$ph25$ph65$i = $123;$p$0$ph$ph66$i = $131;
      } else {
       $ip$0$ph71$i = $ip$0$ph74$i;$p$0$ph$ph63$i = $131;
       break L39;
      }
     }
     $134 = (($jp$0$ph2559$i) + 1)|0;
     $135 = (($jp$0$ph2559$i) + 2)|0;
     $136 = ($135>>>0)<($l>>>0);
     if ($136) {
      $254 = $135;$ip$0$ph74$i = $jp$0$ph2559$i;$jp$0$ph75$i = $134;
     } else {
      $ip$0$ph71$i = $jp$0$ph2559$i;$p$0$ph$ph63$i = 1;
      break;
     }
    }
    $255 = 1;$ip$1$ph54$i = -1;$jp$1$ph55$i = 0;
    while(1) {
     $259 = $255;$jp$1$ph14$ph46$i = $jp$1$ph55$i;$p$1$ph$ph47$i = 1;
     while(1) {
      $258 = $259;$jp$1$ph1440$i = $jp$1$ph14$ph46$i;
      L58: while(1) {
       $144 = $258;$k$120$i = 1;
       while(1) {
        $140 = (($k$120$i) + ($ip$1$ph54$i))|0;
        $141 = (($n0) + ($140)|0);
        $142 = HEAP8[$141>>0]|0;
        $143 = (($n0) + ($144)|0);
        $145 = HEAP8[$143>>0]|0;
        $146 = ($142<<24>>24)==($145<<24>>24);
        if (!($146)) {
         break L58;
        }
        $147 = ($k$120$i|0)==($p$1$ph$ph47$i|0);
        $138 = (($k$120$i) + 1)|0;
        if ($147) {
         break;
        }
        $137 = (($138) + ($jp$1$ph1440$i))|0;
        $139 = ($137>>>0)<($l>>>0);
        if ($139) {
         $144 = $137;$k$120$i = $138;
        } else {
         $ip$0$ph71124$i = $ip$0$ph71$i;$ip$1$ph51$i = $ip$1$ph54$i;$p$0$ph$ph63128$i = $p$0$ph$ph63$i;$p$1$ph$ph44$i = $p$1$ph$ph47$i;
         break L38;
        }
       }
       $148 = (($jp$1$ph1440$i) + ($p$1$ph$ph47$i))|0;
       $149 = (($148) + 1)|0;
       $150 = ($149>>>0)<($l>>>0);
       if ($150) {
        $258 = $149;$jp$1$ph1440$i = $148;
       } else {
        $ip$0$ph71124$i = $ip$0$ph71$i;$ip$1$ph51$i = $ip$1$ph54$i;$p$0$ph$ph63128$i = $p$0$ph$ph63$i;$p$1$ph$ph44$i = $p$1$ph$ph47$i;
        break L38;
       }
      }
      $151 = ($142&255)<($145&255);
      $152 = (($144) - ($ip$1$ph54$i))|0;
      if (!($151)) {
       break;
      }
      $153 = (($144) + 1)|0;
      $154 = ($153>>>0)<($l>>>0);
      if ($154) {
       $259 = $153;$jp$1$ph14$ph46$i = $144;$p$1$ph$ph47$i = $152;
      } else {
       $ip$0$ph71124$i = $ip$0$ph71$i;$ip$1$ph51$i = $ip$1$ph54$i;$p$0$ph$ph63128$i = $p$0$ph$ph63$i;$p$1$ph$ph44$i = $152;
       break L38;
      }
     }
     $155 = (($jp$1$ph1440$i) + 1)|0;
     $156 = (($jp$1$ph1440$i) + 2)|0;
     $157 = ($156>>>0)<($l>>>0);
     if ($157) {
      $255 = $156;$ip$1$ph54$i = $jp$1$ph1440$i;$jp$1$ph55$i = $155;
     } else {
      $ip$0$ph71124$i = $ip$0$ph71$i;$ip$1$ph51$i = $jp$1$ph1440$i;$p$0$ph$ph63128$i = $p$0$ph$ph63$i;$p$1$ph$ph44$i = 1;
      break;
     }
    }
   } else {
    $ip$0$ph71124$i = -1;$ip$1$ph51$i = -1;$p$0$ph$ph63128$i = 1;$p$1$ph$ph44$i = 1;
   }
  } while(0);
  $158 = (($ip$1$ph51$i) + 1)|0;
  $159 = (($ip$0$ph71124$i) + 1)|0;
  $160 = ($158>>>0)>($159>>>0);
  $p$1$p$0$i = $160 ? $p$1$ph$ph44$i : $p$0$ph$ph63128$i;
  $ip$1$ip$0$i = $160 ? $ip$1$ph51$i : $ip$0$ph71124$i;
  $161 = (($n0) + ($p$1$p$0$i)|0);
  $162 = (($ip$1$ip$0$i) + 1)|0;
  $163 = (_memcmp($n0,$161,$162)|0);
  $164 = ($163|0)==(0);
  if ($164) {
   $169 = (($l) - ($p$1$p$0$i))|0;
   $mem0$0$i = $169;$p$3$i = $p$1$p$0$i;
  } else {
   $165 = (($l) - ($ip$1$ip$0$i))|0;
   $166 = (($165) + -1)|0;
   $167 = ($ip$1$ip$0$i>>>0)>($166>>>0);
   $ip$1$ip$0$$i = $167 ? $ip$1$ip$0$i : $166;
   $168 = (($ip$1$ip$0$$i) + 1)|0;
   $mem0$0$i = 0;$p$3$i = $168;
  }
  $170 = $105;
  $171 = ($10>>>0)<($l>>>0);
  if ($171) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $172 = (($l) + -1)|0;
  $notlhs$i = ($mem0$0$i|0)==(0);
  $173 = (($l) - ($p$3$i))|0;
  if (!($notlhs$i)) {
   $$0210$us$i = $4;$mem$011$us$i = 0;
   L77: while(1) {
    $175 = (($$0210$us$i) + ($172)|0);
    $176 = HEAP8[$175>>0]|0;
    $177 = $176&255;
    $178 = $177 >>> 5;
    $179 = (($byteset$i) + ($178<<2)|0);
    $180 = HEAP32[$179>>2]|0;
    $181 = $177 & 31;
    $182 = 1 << $181;
    $183 = $182 & $180;
    $184 = ($183|0)==(0);
    L79: do {
     if ($184) {
      $212 = (($$0210$us$i) + ($l)|0);
      $$02$be$us$i = $212;$mem$0$be$us$i = 0;
     } else {
      $185 = (($shift$i) + ($177<<2)|0);
      $186 = HEAP32[$185>>2]|0;
      $187 = (($l) - ($186))|0;
      $188 = ($186|0)==($l|0);
      if (!($188)) {
       $notrhs$us$i = ($mem$011$us$i|0)!=(0);
       $189 = ($187>>>0)<($p$3$i>>>0);
       $or$cond3$us$i = $notrhs$us$i & $189;
       $k$2$us$i = $or$cond3$us$i ? $173 : $187;
       $190 = (($$0210$us$i) + ($k$2$us$i)|0);
       $$02$be$us$i = $190;$mem$0$be$us$i = 0;
       break;
      }
      $191 = ($162>>>0)>($mem$011$us$i>>>0);
      $$mem$0$us$i = $191 ? $162 : $mem$011$us$i;
      $192 = (($n0) + ($$mem$0$us$i)|0);
      $193 = HEAP8[$192>>0]|0;
      $194 = ($193<<24>>24)==(0);
      L84: do {
       if ($194) {
        $k$4$us$i = $162;
       } else {
        $$pr$us$i = $193;$k$37$us$i = $$mem$0$us$i;
        while(1) {
         $199 = (($$0210$us$i) + ($k$37$us$i)|0);
         $200 = HEAP8[$199>>0]|0;
         $201 = ($$pr$us$i<<24>>24)==($200<<24>>24);
         $196 = (($k$37$us$i) + 1)|0;
         if (!($201)) {
          break;
         }
         $195 = (($n0) + ($196)|0);
         $197 = HEAP8[$195>>0]|0;
         $198 = ($197<<24>>24)==(0);
         if ($198) {
          $k$4$us$i = $162;
          break L84;
         } else {
          $$pr$us$i = $197;$k$37$us$i = $196;
         }
        }
        $202 = (($k$37$us$i) - ($ip$1$ip$0$i))|0;
        $203 = (($$0210$us$i) + ($202)|0);
        $$02$be$us$i = $203;$mem$0$be$us$i = 0;
        break L79;
       }
      } while(0);
      while(1) {
       $204 = ($k$4$us$i>>>0)>($mem$011$us$i>>>0);
       if (!($204)) {
        $$0 = $$0210$us$i;
        label = 75;
        break L77;
       }
       $205 = (($k$4$us$i) + -1)|0;
       $206 = (($n0) + ($205)|0);
       $207 = HEAP8[$206>>0]|0;
       $208 = (($$0210$us$i) + ($205)|0);
       $209 = HEAP8[$208>>0]|0;
       $210 = ($207<<24>>24)==($209<<24>>24);
       if ($210) {
        $k$4$us$i = $205;
       } else {
        break;
       }
      }
      $211 = (($$0210$us$i) + ($p$3$i)|0);
      $$02$be$us$i = $211;$mem$0$be$us$i = $mem0$0$i;
     }
    } while(0);
    $213 = $$02$be$us$i;
    $214 = (($170) - ($213))|0;
    $215 = ($214>>>0)<($l>>>0);
    if ($215) {
     $$0 = 0;
     label = 75;
     break;
    } else {
     $$0210$us$i = $$02$be$us$i;$mem$011$us$i = $mem$0$be$us$i;
    }
   }
   if ((label|0) == 75) {
    STACKTOP = sp;return ($$0|0);
   }
  }
  $174 = (($n0) + ($162)|0);
  $$0210$i = $4;
  L99: while(1) {
   $216 = (($$0210$i) + ($172)|0);
   $217 = HEAP8[$216>>0]|0;
   $218 = $217&255;
   $219 = $218 >>> 5;
   $220 = (($byteset$i) + ($219<<2)|0);
   $221 = HEAP32[$220>>2]|0;
   $222 = $218 & 31;
   $223 = 1 << $222;
   $224 = $223 & $221;
   $225 = ($224|0)==(0);
   L101: do {
    if ($225) {
     $234 = (($$0210$i) + ($l)|0);
     $$02$be$i = $234;
    } else {
     $226 = (($shift$i) + ($218<<2)|0);
     $227 = HEAP32[$226>>2]|0;
     $228 = ($227|0)==($l|0);
     if (!($228)) {
      $229 = (($l) - ($227))|0;
      $230 = (($$0210$i) + ($229)|0);
      $$02$be$i = $230;
      break;
     }
     $235 = HEAP8[$174>>0]|0;
     $236 = ($235<<24>>24)==(0);
     L107: do {
      if ($236) {
       $k$4$i = $162;
      } else {
       $$pr$i = $235;$k$37$i = $162;
       while(1) {
        $241 = (($$0210$i) + ($k$37$i)|0);
        $242 = HEAP8[$241>>0]|0;
        $243 = ($$pr$i<<24>>24)==($242<<24>>24);
        $238 = (($k$37$i) + 1)|0;
        if (!($243)) {
         break;
        }
        $237 = (($n0) + ($238)|0);
        $239 = HEAP8[$237>>0]|0;
        $240 = ($239<<24>>24)==(0);
        if ($240) {
         $k$4$i = $162;
         break L107;
        } else {
         $$pr$i = $239;$k$37$i = $238;
        }
       }
       $244 = (($k$37$i) - ($ip$1$ip$0$i))|0;
       $245 = (($$0210$i) + ($244)|0);
       $$02$be$i = $245;
       break L101;
      }
     } while(0);
     while(1) {
      $246 = ($k$4$i|0)==(0);
      if ($246) {
       $$0 = $$0210$i;
       label = 75;
       break L99;
      }
      $247 = (($k$4$i) + -1)|0;
      $248 = (($n0) + ($247)|0);
      $249 = HEAP8[$248>>0]|0;
      $250 = (($$0210$i) + ($247)|0);
      $251 = HEAP8[$250>>0]|0;
      $252 = ($249<<24>>24)==($251<<24>>24);
      if ($252) {
       $k$4$i = $247;
      } else {
       break;
      }
     }
     $253 = (($$0210$i) + ($p$3$i)|0);
     $$02$be$i = $253;
    }
   } while(0);
   $231 = $$02$be$i;
   $232 = (($170) - ($231))|0;
   $233 = ($232>>>0)<($l>>>0);
   if ($233) {
    $$0 = 0;
    label = 75;
    break;
   } else {
    $$0210$i = $$02$be$i;
   }
  }
  if ((label|0) == 75) {
   STACKTOP = sp;return ($$0|0);
  }
 }
 return 0|0;
}
function _mempcpy($dest,$src,$n) {
 $dest = $dest|0;
 $src = $src|0;
 $n = $n|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _memcpy(($dest|0),($src|0),($n|0))|0;
 $0 = (($dest) + ($n)|0);
 STACKTOP = sp;return ($0|0);
}
function ___memrchr($m,$c,$n) {
 $m = $m|0;
 $c = $c|0;
 $n = $n|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c&255;
 $$01 = $n;
 while(1) {
  $1 = (($$01) + -1)|0;
  $2 = ($$01|0)==(0);
  if ($2) {
   $$0 = 0;
   label = 4;
   break;
  }
  $3 = (($m) + ($1)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)==($0<<24>>24);
  if ($5) {
   $$0 = $3;
   label = 4;
   break;
  } else {
   $$01 = $1;
  }
 }
 if ((label|0) == 4) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _rindex($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strrchr($s,$c)|0);
 STACKTOP = sp;return ($0|0);
}
function ___stpcpy($d,$s) {
 $d = $d|0;
 $s = $s|0;
 var $$0$lcssa = 0, $$01$lcssa = 0, $$0115 = 0, $$016 = 0, $$03 = 0, $$1$ph = 0, $$12$ph = 0, $$124 = 0, $$15 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $wd$0$lcssa = 0, $wd$06 = 0, $ws$0$lcssa = 0, $ws$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $1 = $d;
 $2 = $0 ^ $1;
 $3 = $2 & 3;
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = $0 & 3;
  $6 = ($5|0)==(0);
  L3: do {
   if ($6) {
    $$0$lcssa = $s;$$01$lcssa = $d;
   } else {
    $$0115 = $d;$$016 = $s;
    while(1) {
     $7 = HEAP8[$$016>>0]|0;
     HEAP8[$$0115>>0] = $7;
     $8 = ($7<<24>>24)==(0);
     if ($8) {
      $$03 = $$0115;
      break;
     }
     $9 = (($$016) + 1|0);
     $10 = (($$0115) + 1|0);
     $11 = $9;
     $12 = $11 & 3;
     $13 = ($12|0)==(0);
     if ($13) {
      $$0$lcssa = $9;$$01$lcssa = $10;
      break L3;
     } else {
      $$0115 = $10;$$016 = $9;
     }
    }
    STACKTOP = sp;return ($$03|0);
   }
  } while(0);
  $14 = HEAP32[$$0$lcssa>>2]|0;
  $15 = (($14) + -16843009)|0;
  $16 = $14 & -2139062144;
  $17 = $16 ^ -2139062144;
  $18 = $17 & $15;
  $19 = ($18|0)==(0);
  if ($19) {
   $22 = $14;$wd$06 = $$01$lcssa;$ws$07 = $$0$lcssa;
   while(1) {
    $20 = (($ws$07) + 4|0);
    $21 = (($wd$06) + 4|0);
    HEAP32[$wd$06>>2] = $22;
    $23 = HEAP32[$20>>2]|0;
    $24 = (($23) + -16843009)|0;
    $25 = $23 & -2139062144;
    $26 = $25 ^ -2139062144;
    $27 = $26 & $24;
    $28 = ($27|0)==(0);
    if ($28) {
     $22 = $23;$wd$06 = $21;$ws$07 = $20;
    } else {
     $wd$0$lcssa = $21;$ws$0$lcssa = $20;
     break;
    }
   }
  } else {
   $wd$0$lcssa = $$01$lcssa;$ws$0$lcssa = $$0$lcssa;
  }
  $$1$ph = $ws$0$lcssa;$$12$ph = $wd$0$lcssa;
 } else {
  $$1$ph = $s;$$12$ph = $d;
 }
 $29 = HEAP8[$$1$ph>>0]|0;
 HEAP8[$$12$ph>>0] = $29;
 $30 = ($29<<24>>24)==(0);
 if ($30) {
  $$03 = $$12$ph;
  STACKTOP = sp;return ($$03|0);
 } else {
  $$124 = $$12$ph;$$15 = $$1$ph;
 }
 while(1) {
  $31 = (($$15) + 1|0);
  $32 = (($$124) + 1|0);
  $33 = HEAP8[$31>>0]|0;
  HEAP8[$32>>0] = $33;
  $34 = ($33<<24>>24)==(0);
  if ($34) {
   $$03 = $32;
   break;
  } else {
   $$124 = $32;$$15 = $31;
  }
 }
 STACKTOP = sp;return ($$03|0);
}
function _strcasestr($h,$n) {
 $h = $h|0;
 $n = $n|0;
 var $$0 = 0, $$012 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($n|0))|0);
 $1 = HEAP8[$h>>0]|0;
 $2 = ($1<<24>>24)==(0);
 L1: do {
  if ($2) {
   $$0 = 0;
  } else {
   $$012 = $h;
   while(1) {
    $6 = (_strncasecmp($$012,$n,$0)|0);
    $7 = ($6|0)==(0);
    $4 = (($$012) + 1|0);
    if ($7) {
     $$0 = $$012;
     break L1;
    }
    $3 = HEAP8[$4>>0]|0;
    $5 = ($3<<24>>24)==(0);
    if ($5) {
     $$0 = 0;
     break;
    } else {
     $$012 = $4;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _strchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___strchrnul($s,$c)|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $c&255;
 $3 = ($1<<24>>24)==($2<<24>>24);
 $4 = $3 ? $0 : 0;
 STACKTOP = sp;return ($4|0);
}
function ___strchrnul($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$02$lcssa = 0, $$026 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $w$0$lcssa = 0, $w$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = ($0|0)==(0);
 if ($1) {
  $6 = (_strlen(($s|0))|0);
  $7 = (($s) + ($6)|0);
  $$0 = $7;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = $s;
 $3 = $2 & 3;
 $4 = ($3|0)==(0);
 L5: do {
  if ($4) {
   $$02$lcssa = $s;
  } else {
   $5 = $c&255;
   $$026 = $s;
   while(1) {
    $12 = HEAP8[$$026>>0]|0;
    $13 = ($12<<24>>24)==(0);
    if ($13) {
     $$0 = $$026;
     label = 13;
     break;
    }
    $14 = ($12<<24>>24)==($5<<24>>24);
    $9 = (($$026) + 1|0);
    if ($14) {
     $$0 = $$026;
     label = 13;
     break;
    }
    $8 = $9;
    $10 = $8 & 3;
    $11 = ($10|0)==(0);
    if ($11) {
     $$02$lcssa = $9;
     break L5;
    } else {
     $$026 = $9;
    }
   }
   if ((label|0) == 13) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $15 = Math_imul($0, 16843009)|0;
 $16 = HEAP32[$$02$lcssa>>2]|0;
 $17 = (($16) + -16843009)|0;
 $18 = $16 & -2139062144;
 $19 = $18 ^ -2139062144;
 $20 = $19 & $17;
 $21 = ($20|0)==(0);
 L15: do {
  if ($21) {
   $30 = $16;$w$03 = $$02$lcssa;
   while(1) {
    $29 = $30 ^ $15;
    $31 = (($29) + -16843009)|0;
    $32 = $29 & -2139062144;
    $33 = $32 ^ -2139062144;
    $34 = $33 & $31;
    $35 = ($34|0)==(0);
    $23 = (($w$03) + 4|0);
    if (!($35)) {
     $w$0$lcssa = $w$03;
     break L15;
    }
    $22 = HEAP32[$23>>2]|0;
    $24 = (($22) + -16843009)|0;
    $25 = $22 & -2139062144;
    $26 = $25 ^ -2139062144;
    $27 = $26 & $24;
    $28 = ($27|0)==(0);
    if ($28) {
     $30 = $22;$w$03 = $23;
    } else {
     $w$0$lcssa = $23;
     break;
    }
   }
  } else {
   $w$0$lcssa = $$02$lcssa;
  }
 } while(0);
 $36 = $c&255;
 $$1 = $w$0$lcssa;
 while(1) {
  $37 = HEAP8[$$1>>0]|0;
  $38 = ($37<<24>>24)==(0);
  $39 = ($37<<24>>24)==($36<<24>>24);
  $or$cond = $38 | $39;
  $40 = (($$1) + 1|0);
  if ($or$cond) {
   $$0 = $$1;
   break;
  } else {
   $$1 = $40;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _strcspn($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$025 = 0, $$03$lcssa = 0, $$034 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $byteset = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $byteset = sp;
 $0 = HEAP8[$c>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $2 = (($c) + 1|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = ($3<<24>>24)==(0);
  if (!($4)) {
   ;HEAP32[$byteset+0>>2]=0|0;HEAP32[$byteset+4>>2]=0|0;HEAP32[$byteset+8>>2]=0|0;HEAP32[$byteset+12>>2]=0|0;HEAP32[$byteset+16>>2]=0|0;HEAP32[$byteset+20>>2]=0|0;HEAP32[$byteset+24>>2]=0|0;HEAP32[$byteset+28>>2]=0|0;
   $$025 = $c;$13 = $0;
   while(1) {
    $12 = $13&255;
    $14 = $12 & 31;
    $15 = 1 << $14;
    $16 = $12 >>> 5;
    $17 = (($byteset) + ($16<<2)|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = $18 | $15;
    HEAP32[$17>>2] = $19;
    $20 = (($$025) + 1|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = ($21<<24>>24)==(0);
    if ($22) {
     break;
    } else {
     $$025 = $20;$13 = $21;
    }
   }
   $10 = HEAP8[$s>>0]|0;
   $11 = ($10<<24>>24)==(0);
   L7: do {
    if ($11) {
     $$03$lcssa = $s;
    } else {
     $$034 = $s;$27 = $10;
     while(1) {
      $26 = $27&255;
      $28 = $26 >>> 5;
      $29 = (($byteset) + ($28<<2)|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = $26 & 31;
      $32 = 1 << $31;
      $33 = $30 & $32;
      $34 = ($33|0)==(0);
      $24 = (($$034) + 1|0);
      if (!($34)) {
       $$03$lcssa = $$034;
       break L7;
      }
      $23 = HEAP8[$24>>0]|0;
      $25 = ($23<<24>>24)==(0);
      if ($25) {
       $$03$lcssa = $24;
       break;
      } else {
       $$034 = $24;$27 = $23;
      }
     }
    }
   } while(0);
   $35 = $$03$lcssa;
   $36 = $s;
   $37 = (($35) - ($36))|0;
   $$0 = $37;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $5 = $0 << 24 >> 24;
 $6 = (___strchrnul($s,$5)|0);
 $7 = $6;
 $8 = $s;
 $9 = (($7) - ($8))|0;
 $$0 = $9;
 STACKTOP = sp;return ($$0|0);
}
function ___strdup($s) {
 $s = $s|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($s|0))|0);
 $1 = (($0) + 1)|0;
 $2 = (_malloc($1)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 _memcpy(($2|0),($s|0),($1|0))|0;
 $$0 = $2;
 STACKTOP = sp;return ($$0|0);
}
function _strlcat($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$0 = 0, $$pn = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strnlen($d,$n)|0);
 $1 = ($0|0)==($n|0);
 if ($1) {
  $2 = (_strlen(($s|0))|0);
  $$pn = $2;
 } else {
  $3 = (($d) + ($0)|0);
  $4 = (($n) - ($0))|0;
  $5 = (_strlcpy($3,$s,$4)|0);
  $$pn = $5;
 }
 $$0 = (($$pn) + ($0))|0;
 STACKTOP = sp;return ($$0|0);
}
function _strlcpy($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa51 = 0, $$025 = 0, $$04$lcssa = 0, $$04$lcssa52 = 0, $$0424 = 0, $$07$lcssa = 0, $$07$lcssa53 = 0, $$0723 = 0, $$1$lcssa = 0, $$1$ph = 0, $$112 = 0, $$15$lcssa = 0, $$1514 = 0, $$18$lcssa = 0, $$18$ph = 0, $$1810 = 0, $$2 = 0, $$26$ph = 0, $$2611 = 0;
 var $$29 = 0, $$lcssa = 0, $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond22 = 0, $wd$0$lcssa = 0, $wd$015 = 0, $ws$0$lcssa = 0, $ws$016 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($n) + -1)|0;
 $1 = ($n|0)==(0);
 if ($1) {
  $$pre = $d;
  $$2 = $d;$$29 = $s;$$pre$phiZ2D = $$pre;
  $39 = $$2;
  $40 = (($39) - ($$pre$phiZ2D))|0;
  $41 = (_strlen(($$29|0))|0);
  $42 = (($40) + ($41))|0;
  STACKTOP = sp;return ($42|0);
 }
 $2 = $s;
 $3 = $d;
 $4 = $2 ^ $3;
 $5 = $4 & 3;
 $6 = ($5|0)==(0);
 do {
  if ($6) {
   $7 = $2 & 3;
   $8 = ($7|0)==(0);
   $9 = ($0|0)==(0);
   $or$cond22 = $8 | $9;
   L7: do {
    if ($or$cond22) {
     $$0$lcssa = $d;$$04$lcssa = $0;$$07$lcssa = $s;$$lcssa = $9;
     label = 7;
    } else {
     $$025 = $d;$$0424 = $0;$$0723 = $s;
     while(1) {
      $10 = HEAP8[$$0723>>0]|0;
      HEAP8[$$025>>0] = $10;
      $11 = ($10<<24>>24)==(0);
      if ($11) {
       $$0$lcssa51 = $$025;$$04$lcssa52 = $$0424;$$07$lcssa53 = $$0723;
       break L7;
      }
      $12 = (($$0424) + -1)|0;
      $13 = (($$0723) + 1|0);
      $14 = (($$025) + 1|0);
      $15 = $13;
      $16 = $15 & 3;
      $17 = ($16|0)==(0);
      $18 = ($12|0)==(0);
      $or$cond = $17 | $18;
      if ($or$cond) {
       $$0$lcssa = $14;$$04$lcssa = $12;$$07$lcssa = $13;$$lcssa = $18;
       label = 7;
       break;
      } else {
       $$025 = $14;$$0424 = $12;$$0723 = $13;
      }
     }
    }
   } while(0);
   if ((label|0) == 7) {
    if ($$lcssa) {
     $$1$lcssa = $$0$lcssa;$$18$lcssa = $$07$lcssa;
     break;
    } else {
     $$0$lcssa51 = $$0$lcssa;$$04$lcssa52 = $$04$lcssa;$$07$lcssa53 = $$07$lcssa;
    }
   }
   $19 = HEAP8[$$07$lcssa53>>0]|0;
   $20 = ($19<<24>>24)==(0);
   if ($20) {
    $$1$ph = $$0$lcssa51;$$18$ph = $$07$lcssa53;$$26$ph = $$04$lcssa52;
    label = 13;
   } else {
    $21 = ($$04$lcssa52>>>0)>(3);
    L15: do {
     if ($21) {
      $$1514 = $$04$lcssa52;$wd$015 = $$0$lcssa51;$ws$016 = $$07$lcssa53;
      while(1) {
       $22 = HEAP32[$ws$016>>2]|0;
       $23 = (($22) + -16843009)|0;
       $24 = $22 & -2139062144;
       $25 = $24 ^ -2139062144;
       $26 = $25 & $23;
       $27 = ($26|0)==(0);
       if (!($27)) {
        $$15$lcssa = $$1514;$wd$0$lcssa = $wd$015;$ws$0$lcssa = $ws$016;
        break L15;
       }
       HEAP32[$wd$015>>2] = $22;
       $28 = (($$1514) + -4)|0;
       $29 = (($ws$016) + 4|0);
       $30 = (($wd$015) + 4|0);
       $31 = ($28>>>0)>(3);
       if ($31) {
        $$1514 = $28;$wd$015 = $30;$ws$016 = $29;
       } else {
        $$15$lcssa = $28;$wd$0$lcssa = $30;$ws$0$lcssa = $29;
        break;
       }
      }
     } else {
      $$15$lcssa = $$04$lcssa52;$wd$0$lcssa = $$0$lcssa51;$ws$0$lcssa = $$07$lcssa53;
     }
    } while(0);
    $$1$ph = $wd$0$lcssa;$$18$ph = $ws$0$lcssa;$$26$ph = $$15$lcssa;
    label = 13;
   }
  } else {
   $$1$ph = $d;$$18$ph = $s;$$26$ph = $0;
   label = 13;
  }
 } while(0);
 L20: do {
  if ((label|0) == 13) {
   $32 = ($$26$ph|0)==(0);
   if ($32) {
    $$1$lcssa = $$1$ph;$$18$lcssa = $$18$ph;
   } else {
    $$112 = $$1$ph;$$1810 = $$18$ph;$$2611 = $$26$ph;
    while(1) {
     $33 = HEAP8[$$1810>>0]|0;
     HEAP8[$$112>>0] = $33;
     $34 = ($33<<24>>24)==(0);
     if ($34) {
      $$1$lcssa = $$112;$$18$lcssa = $$1810;
      break L20;
     }
     $35 = (($$2611) + -1)|0;
     $36 = (($$1810) + 1|0);
     $37 = (($$112) + 1|0);
     $38 = ($35|0)==(0);
     if ($38) {
      $$1$lcssa = $37;$$18$lcssa = $36;
      break;
     } else {
      $$112 = $37;$$1810 = $36;$$2611 = $35;
     }
    }
   }
  }
 } while(0);
 HEAP8[$$1$lcssa>>0] = 0;
 $$2 = $$1$lcssa;$$29 = $$18$lcssa;$$pre$phiZ2D = $3;
 $39 = $$2;
 $40 = (($39) - ($$pre$phiZ2D))|0;
 $41 = (_strlen(($$29|0))|0);
 $42 = (($40) + ($41))|0;
 STACKTOP = sp;return ($42|0);
}
function _strncat($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$014 = 0, $$023 = 0, $$05 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($d|0))|0);
 $1 = (($d) + ($0)|0);
 $2 = ($n|0)==(0);
 L1: do {
  if ($2) {
   $$0$lcssa = $1;
  } else {
   $$014 = $n;$$023 = $s;$$05 = $1;
   while(1) {
    $3 = HEAP8[$$023>>0]|0;
    $4 = ($3<<24>>24)==(0);
    if ($4) {
     $$0$lcssa = $$05;
     break L1;
    }
    $5 = (($$014) + -1)|0;
    $6 = (($$023) + 1|0);
    $7 = (($$05) + 1|0);
    HEAP8[$$05>>0] = $3;
    $8 = ($5|0)==(0);
    if ($8) {
     $$0$lcssa = $7;
     break;
    } else {
     $$014 = $5;$$023 = $6;$$05 = $7;
    }
   }
  }
 } while(0);
 HEAP8[$$0$lcssa>>0] = 0;
 STACKTOP = sp;return ($d|0);
}
function _strndup($s,$n) {
 $s = $s|0;
 $n = $n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strnlen($s,$n)|0);
 $1 = (($0) + 1)|0;
 $2 = (_malloc($1)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 _memcpy(($2|0),($s|0),($0|0))|0;
 $4 = (($2) + ($0)|0);
 HEAP8[$4>>0] = 0;
 $$0 = $2;
 STACKTOP = sp;return ($$0|0);
}
function _strnlen($s,$n) {
 $s = $s|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_memchr($s,0,$n)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $5 = $n;
 } else {
  $2 = $0;
  $3 = $s;
  $4 = (($2) - ($3))|0;
  $5 = $4;
 }
 STACKTOP = sp;return ($5|0);
}
function _strpbrk($s,$b) {
 $s = $s|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strcspn($s,$b)|0);
 $1 = (($s) + ($0)|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)!=(0);
 $4 = $3 ? $1 : 0;
 STACKTOP = sp;return ($4|0);
}
function _strrchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($s|0))|0);
 $1 = (($0) + 1)|0;
 $2 = (___memrchr($s,$c,$1)|0);
 STACKTOP = sp;return ($2|0);
}
function _strsep($str,$sep) {
 $str = $str|0;
 $sep = $sep|0;
 var $$0 = 0, $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $end$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$str>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (_strcspn($0,$sep)|0);
 $3 = (($0) + ($2)|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $end$0 = 0;
 } else {
  $$sum = (($2) + 1)|0;
  $6 = (($0) + ($$sum)|0);
  HEAP8[$3>>0] = 0;
  $end$0 = $6;
 }
 HEAP32[$str>>2] = $end$0;
 $$0 = $0;
 STACKTOP = sp;return ($$0|0);
}
function _strsignal($signum) {
 $signum = $signum|0;
 var $$ = 0, $$in = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $s$0$lcssa = 0, $s$01 = 0, $s$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($signum) + -1)|0;
 $1 = ($0>>>0)>(63);
 $$ = $1 ? 0 : $signum;
 $2 = ($$|0)==(0);
 if ($2) {
  $s$0$lcssa = 284784;
  STACKTOP = sp;return ($s$0$lcssa|0);
 } else {
  $$in = $$;$s$01 = 284784;
 }
 while(1) {
  $s$1 = $s$01;
  while(1) {
   $5 = HEAP8[$s$1>>0]|0;
   $6 = ($5<<24>>24)==(0);
   $7 = (($s$1) + 1|0);
   if ($6) {
    break;
   } else {
    $s$1 = $7;
   }
  }
  $3 = (($$in) + -1)|0;
  $4 = ($3|0)==(0);
  if ($4) {
   $s$0$lcssa = $7;
   break;
  } else {
   $$in = $3;$s$01 = $7;
  }
 }
 STACKTOP = sp;return ($s$0$lcssa|0);
}
function _strspn($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$026 = 0, $$03 = 0, $$1$lcssa = 0, $$14 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $byteset = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $byteset = sp;
 ;HEAP32[$byteset+0>>2]=0|0;HEAP32[$byteset+4>>2]=0|0;HEAP32[$byteset+8>>2]=0|0;HEAP32[$byteset+12>>2]=0|0;HEAP32[$byteset+16>>2]=0|0;HEAP32[$byteset+20>>2]=0|0;HEAP32[$byteset+24>>2]=0|0;HEAP32[$byteset+28>>2]=0|0;
 $0 = HEAP8[$c>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($c) + 1|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $$03 = $s;
  while(1) {
   $5 = HEAP8[$$03>>0]|0;
   $6 = ($5<<24>>24)==($0<<24>>24);
   $7 = (($$03) + 1|0);
   if ($6) {
    $$03 = $7;
   } else {
    break;
   }
  }
  $8 = $$03;
  $9 = $s;
  $10 = (($8) - ($9))|0;
  $$0 = $10;
  STACKTOP = sp;return ($$0|0);
 } else {
  $$026 = $c;$14 = $0;
 }
 while(1) {
  $13 = $14&255;
  $15 = $13 & 31;
  $16 = 1 << $15;
  $17 = $13 >>> 5;
  $18 = (($byteset) + ($17<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $19 | $16;
  HEAP32[$18>>2] = $20;
  $21 = (($$026) + 1|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = ($22<<24>>24)==(0);
  if ($23) {
   break;
  } else {
   $$026 = $21;$14 = $22;
  }
 }
 $11 = HEAP8[$s>>0]|0;
 $12 = ($11<<24>>24)==(0);
 L12: do {
  if ($12) {
   $$1$lcssa = $s;
  } else {
   $$14 = $s;$28 = $11;
   while(1) {
    $27 = $28&255;
    $29 = $27 >>> 5;
    $30 = (($byteset) + ($29<<2)|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = $27 & 31;
    $33 = 1 << $32;
    $34 = $31 & $33;
    $35 = ($34|0)==(0);
    $25 = (($$14) + 1|0);
    if ($35) {
     $$1$lcssa = $$14;
     break L12;
    }
    $24 = HEAP8[$25>>0]|0;
    $26 = ($24<<24>>24)==(0);
    if ($26) {
     $$1$lcssa = $25;
     break;
    } else {
     $$14 = $25;$28 = $24;
    }
   }
  }
 } while(0);
 $36 = $$1$lcssa;
 $37 = $s;
 $38 = (($36) - ($37))|0;
 $$0 = $38;
 STACKTOP = sp;return ($$0|0);
}
function _strstr($h,$n) {
 $h = $h|0;
 $n = $n|0;
 var $$$i = 0, $$$i16 = 0, $$$i8 = 0, $$0 = 0, $$0$lcssa$i = 0, $$0$lcssa$i15 = 0, $$0$lcssa$i7 = 0, $$01$i = 0, $$02$i = 0, $$02$i11 = 0, $$02$i5 = 0, $$02$us$i = 0, $$lcssa$i = 0, $$lcssa$i14 = 0, $$mem$0$us$i = 0, $$pr$i = 0, $$pr$us$i = 0, $0 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $byteset$i = 0, $hw$0$in2$i = 0, $hw$03$i = 0, $hw$03$i10 = 0, $ip$0$ph78$i = 0, $ip$0$ph78146$i = 0;
 var $ip$0$ph81$i = 0, $ip$1$ip$0$$i = 0, $ip$1$ip$0$i = 0, $ip$1$ph58$i = 0, $ip$1$ph61$i = 0, $jp$0$ph22$ph72$i = 0, $jp$0$ph2266$i = 0, $jp$0$ph82$i = 0, $jp$1$ph11$ph52$i = 0, $jp$1$ph1146$i = 0, $jp$1$ph62$i = 0, $k$030$i = 0, $k$117$i = 0, $k$2$us$i = 0, $k$37$i = 0, $k$37$us$i = 0, $k$4$i = 0, $k$4$us$i = 0, $l$039$i = 0, $mem$0$us$i = 0;
 var $notlhs$i = 0, $notrhs$us$i = 0, $or$cond$i = 0, $or$cond$i12 = 0, $or$cond3$us$i = 0, $p$0$ph$ph70$i = 0, $p$0$ph$ph70150$i = 0, $p$0$ph$ph73$i = 0, $p$1$p$0$i = 0, $p$1$ph$ph50$i = 0, $p$1$ph$ph53$i = 0, $p$3155$i = 0, $shift$i = 0, $z$0$i = 0, $z$0$us$i = 0, $z$1$i = 0, $z$1$us$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0;
 $byteset$i = sp + 1024|0;
 $shift$i = sp;
 $0 = HEAP8[$n>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $$0 = $h;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = $0 << 24 >> 24;
 $3 = (_strchr($h,$2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($n) + 1|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $$0 = $3;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = (($3) + 1|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = ($9<<24>>24)==(0);
 if ($10) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = (($n) + 2|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = ($12<<24>>24)==(0);
 if ($13) {
  $14 = $0&255;
  $15 = $14 << 8;
  $16 = $6&255;
  $17 = $16 | $15;
  $18 = HEAP8[$3>>0]|0;
  $19 = $18&255;
  $20 = $9&255;
  $21 = $19 << 8;
  $22 = $21 | $20;
  $$01$i = $8;$270 = $9;$hw$0$in2$i = $22;
  while(1) {
   $23 = $hw$0$in2$i & 65535;
   $24 = ($23|0)==($17|0);
   if ($24) {
    $$0$lcssa$i = $$01$i;$32 = $270;
    break;
   }
   $25 = $23 << 8;
   $26 = (($$01$i) + 1|0);
   $27 = HEAP8[$26>>0]|0;
   $28 = $27&255;
   $29 = $28 | $25;
   $30 = ($27<<24>>24)==(0);
   if ($30) {
    $$0$lcssa$i = $26;$32 = 0;
    break;
   } else {
    $$01$i = $26;$270 = $27;$hw$0$in2$i = $29;
   }
  }
  $31 = ($32<<24>>24)==(0);
  $33 = (($$0$lcssa$i) + -1|0);
  $$$i = $31 ? 0 : $33;
  $$0 = $$$i;
  STACKTOP = sp;return ($$0|0);
 }
 $34 = (($3) + 2|0);
 $35 = HEAP8[$34>>0]|0;
 $36 = ($35<<24>>24)==(0);
 if ($36) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $37 = (($n) + 3|0);
 $38 = HEAP8[$37>>0]|0;
 $39 = ($38<<24>>24)==(0);
 if ($39) {
  $40 = $0&255;
  $41 = $40 << 24;
  $42 = $6&255;
  $43 = $42 << 16;
  $44 = $43 | $41;
  $45 = $12&255;
  $46 = $45 << 8;
  $47 = $44 | $46;
  $48 = HEAP8[$3>>0]|0;
  $49 = $48&255;
  $50 = $49 << 24;
  $51 = $9&255;
  $52 = $51 << 16;
  $53 = $35&255;
  $54 = $53 << 8;
  $55 = $54 | $52;
  $56 = $55 | $50;
  $57 = ($56|0)==($47|0);
  if ($57) {
   $$0$lcssa$i7 = $34;$$lcssa$i = 0;
  } else {
   $$02$i5 = $34;$hw$03$i = $56;
   while(1) {
    $58 = (($$02$i5) + 1|0);
    $59 = HEAP8[$58>>0]|0;
    $60 = $59&255;
    $61 = $60 | $hw$03$i;
    $62 = $61 << 8;
    $63 = ($59<<24>>24)==(0);
    $64 = ($62|0)==($47|0);
    $or$cond$i = $63 | $64;
    if ($or$cond$i) {
     $$0$lcssa$i7 = $58;$$lcssa$i = $63;
     break;
    } else {
     $$02$i5 = $58;$hw$03$i = $62;
    }
   }
  }
  $65 = (($$0$lcssa$i7) + -2|0);
  $$$i8 = $$lcssa$i ? 0 : $65;
  $$0 = $$$i8;
  STACKTOP = sp;return ($$0|0);
 }
 $66 = (($3) + 3|0);
 $67 = HEAP8[$66>>0]|0;
 $68 = ($67<<24>>24)==(0);
 if ($68) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $69 = (($n) + 4|0);
 $70 = HEAP8[$69>>0]|0;
 $71 = ($70<<24>>24)==(0);
 if ($71) {
  $72 = $0&255;
  $73 = $72 << 24;
  $74 = $6&255;
  $75 = $74 << 16;
  $76 = $75 | $73;
  $77 = $12&255;
  $78 = $77 << 8;
  $79 = $76 | $78;
  $80 = $38&255;
  $81 = $79 | $80;
  $82 = HEAP8[$3>>0]|0;
  $83 = $82&255;
  $84 = $83 << 24;
  $85 = $9&255;
  $86 = $85 << 16;
  $87 = $35&255;
  $88 = $87 << 8;
  $89 = $67&255;
  $90 = $88 | $86;
  $91 = $90 | $89;
  $92 = $91 | $84;
  $93 = ($92|0)==($81|0);
  if ($93) {
   $$0$lcssa$i15 = $66;$$lcssa$i14 = 0;
  } else {
   $$02$i11 = $66;$hw$03$i10 = $92;
   while(1) {
    $94 = $hw$03$i10 << 8;
    $95 = (($$02$i11) + 1|0);
    $96 = HEAP8[$95>>0]|0;
    $97 = $96&255;
    $98 = $97 | $94;
    $99 = ($96<<24>>24)==(0);
    $100 = ($98|0)==($81|0);
    $or$cond$i12 = $99 | $100;
    if ($or$cond$i12) {
     $$0$lcssa$i15 = $95;$$lcssa$i14 = $99;
     break;
    } else {
     $$02$i11 = $95;$hw$03$i10 = $98;
    }
   }
  }
  $101 = (($$0$lcssa$i15) + -3|0);
  $$$i16 = $$lcssa$i14 ? 0 : $101;
  $$0 = $$$i16;
  STACKTOP = sp;return ($$0|0);
 }
 ;HEAP32[$byteset$i+0>>2]=0|0;HEAP32[$byteset$i+4>>2]=0|0;HEAP32[$byteset$i+8>>2]=0|0;HEAP32[$byteset$i+12>>2]=0|0;HEAP32[$byteset$i+16>>2]=0|0;HEAP32[$byteset$i+20>>2]=0|0;HEAP32[$byteset$i+24>>2]=0|0;HEAP32[$byteset$i+28>>2]=0|0;
 $106 = $0;$l$039$i = 0;
 while(1) {
  $102 = (($3) + ($l$039$i)|0);
  $103 = HEAP8[$102>>0]|0;
  $104 = ($103<<24>>24)==(0);
  if ($104) {
   $$0 = 0;
   label = 79;
   break;
  }
  $105 = $106&255;
  $107 = $105 & 31;
  $108 = 1 << $107;
  $109 = $105 >>> 5;
  $110 = (($byteset$i) + ($109<<2)|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = $111 | $108;
  HEAP32[$110>>2] = $112;
  $113 = (($l$039$i) + 1)|0;
  $114 = (($shift$i) + ($105<<2)|0);
  HEAP32[$114>>2] = $113;
  $115 = (($n) + ($113)|0);
  $116 = HEAP8[$115>>0]|0;
  $117 = ($116<<24>>24)==(0);
  if ($117) {
   break;
  } else {
   $106 = $116;$l$039$i = $113;
  }
 }
 if ((label|0) == 79) {
  STACKTOP = sp;return ($$0|0);
 }
 $118 = ($113>>>0)>(1);
 L49: do {
  if ($118) {
   $271 = 1;$ip$0$ph81$i = -1;$jp$0$ph82$i = 0;
   L50: while(1) {
    $272 = $271;$jp$0$ph22$ph72$i = $jp$0$ph82$i;$p$0$ph$ph73$i = 1;
    while(1) {
     $273 = $272;$jp$0$ph2266$i = $jp$0$ph22$ph72$i;
     L54: while(1) {
      $120 = $273;$k$030$i = 1;
      while(1) {
       $125 = (($k$030$i) + ($ip$0$ph81$i))|0;
       $126 = (($n) + ($125)|0);
       $127 = HEAP8[$126>>0]|0;
       $128 = (($n) + ($120)|0);
       $129 = HEAP8[$128>>0]|0;
       $130 = ($127<<24>>24)==($129<<24>>24);
       if (!($130)) {
        break L54;
       }
       $131 = ($k$030$i|0)==($p$0$ph$ph73$i|0);
       $123 = (($k$030$i) + 1)|0;
       if ($131) {
        break;
       }
       $122 = (($123) + ($jp$0$ph2266$i))|0;
       $124 = ($122>>>0)<($113>>>0);
       if ($124) {
        $120 = $122;$k$030$i = $123;
       } else {
        $ip$0$ph78$i = $ip$0$ph81$i;$p$0$ph$ph70$i = $p$0$ph$ph73$i;
        break L50;
       }
      }
      $132 = (($jp$0$ph2266$i) + ($p$0$ph$ph73$i))|0;
      $133 = (($132) + 1)|0;
      $134 = ($133>>>0)<($113>>>0);
      if ($134) {
       $273 = $133;$jp$0$ph2266$i = $132;
      } else {
       $ip$0$ph78$i = $ip$0$ph81$i;$p$0$ph$ph70$i = $p$0$ph$ph73$i;
       break L50;
      }
     }
     $135 = ($127&255)>($129&255);
     $136 = (($120) - ($ip$0$ph81$i))|0;
     if (!($135)) {
      break;
     }
     $119 = (($120) + 1)|0;
     $121 = ($119>>>0)<($113>>>0);
     if ($121) {
      $272 = $119;$jp$0$ph22$ph72$i = $120;$p$0$ph$ph73$i = $136;
     } else {
      $ip$0$ph78$i = $ip$0$ph81$i;$p$0$ph$ph70$i = $136;
      break L50;
     }
    }
    $137 = (($jp$0$ph2266$i) + 1)|0;
    $138 = (($jp$0$ph2266$i) + 2)|0;
    $139 = ($138>>>0)<($113>>>0);
    if ($139) {
     $271 = $138;$ip$0$ph81$i = $jp$0$ph2266$i;$jp$0$ph82$i = $137;
    } else {
     $ip$0$ph78$i = $jp$0$ph2266$i;$p$0$ph$ph70$i = 1;
     break;
    }
   }
   $274 = 1;$ip$1$ph61$i = -1;$jp$1$ph62$i = 0;
   while(1) {
    $276 = $274;$jp$1$ph11$ph52$i = $jp$1$ph62$i;$p$1$ph$ph53$i = 1;
    while(1) {
     $275 = $276;$jp$1$ph1146$i = $jp$1$ph11$ph52$i;
     L69: while(1) {
      $147 = $275;$k$117$i = 1;
      while(1) {
       $143 = (($k$117$i) + ($ip$1$ph61$i))|0;
       $144 = (($n) + ($143)|0);
       $145 = HEAP8[$144>>0]|0;
       $146 = (($n) + ($147)|0);
       $148 = HEAP8[$146>>0]|0;
       $149 = ($145<<24>>24)==($148<<24>>24);
       if (!($149)) {
        break L69;
       }
       $150 = ($k$117$i|0)==($p$1$ph$ph53$i|0);
       $141 = (($k$117$i) + 1)|0;
       if ($150) {
        break;
       }
       $140 = (($141) + ($jp$1$ph1146$i))|0;
       $142 = ($140>>>0)<($113>>>0);
       if ($142) {
        $147 = $140;$k$117$i = $141;
       } else {
        $ip$0$ph78146$i = $ip$0$ph78$i;$ip$1$ph58$i = $ip$1$ph61$i;$p$0$ph$ph70150$i = $p$0$ph$ph70$i;$p$1$ph$ph50$i = $p$1$ph$ph53$i;
        break L49;
       }
      }
      $151 = (($jp$1$ph1146$i) + ($p$1$ph$ph53$i))|0;
      $152 = (($151) + 1)|0;
      $153 = ($152>>>0)<($113>>>0);
      if ($153) {
       $275 = $152;$jp$1$ph1146$i = $151;
      } else {
       $ip$0$ph78146$i = $ip$0$ph78$i;$ip$1$ph58$i = $ip$1$ph61$i;$p$0$ph$ph70150$i = $p$0$ph$ph70$i;$p$1$ph$ph50$i = $p$1$ph$ph53$i;
       break L49;
      }
     }
     $154 = ($145&255)<($148&255);
     $155 = (($147) - ($ip$1$ph61$i))|0;
     if (!($154)) {
      break;
     }
     $156 = (($147) + 1)|0;
     $157 = ($156>>>0)<($113>>>0);
     if ($157) {
      $276 = $156;$jp$1$ph11$ph52$i = $147;$p$1$ph$ph53$i = $155;
     } else {
      $ip$0$ph78146$i = $ip$0$ph78$i;$ip$1$ph58$i = $ip$1$ph61$i;$p$0$ph$ph70150$i = $p$0$ph$ph70$i;$p$1$ph$ph50$i = $155;
      break L49;
     }
    }
    $158 = (($jp$1$ph1146$i) + 1)|0;
    $159 = (($jp$1$ph1146$i) + 2)|0;
    $160 = ($159>>>0)<($113>>>0);
    if ($160) {
     $274 = $159;$ip$1$ph61$i = $jp$1$ph1146$i;$jp$1$ph62$i = $158;
    } else {
     $ip$0$ph78146$i = $ip$0$ph78$i;$ip$1$ph58$i = $jp$1$ph1146$i;$p$0$ph$ph70150$i = $p$0$ph$ph70$i;$p$1$ph$ph50$i = 1;
     break;
    }
   }
  } else {
   $ip$0$ph78146$i = -1;$ip$1$ph58$i = -1;$p$0$ph$ph70150$i = 1;$p$1$ph$ph50$i = 1;
  }
 } while(0);
 $161 = (($ip$1$ph58$i) + 1)|0;
 $162 = (($ip$0$ph78146$i) + 1)|0;
 $163 = ($161>>>0)>($162>>>0);
 $p$1$p$0$i = $163 ? $p$1$ph$ph50$i : $p$0$ph$ph70150$i;
 $ip$1$ip$0$i = $163 ? $ip$1$ph58$i : $ip$0$ph78146$i;
 $164 = (($n) + ($p$1$p$0$i)|0);
 $165 = (($ip$1$ip$0$i) + 1)|0;
 $166 = (_memcmp($n,$164,$165)|0);
 $167 = ($166|0)==(0);
 if ($167) {
  $173 = (($113) - ($p$1$p$0$i))|0;
  $174 = $113 | 63;
  $notlhs$i = ($113|0)==($p$1$p$0$i|0);
  if ($notlhs$i) {
   $228 = $174;$p$3155$i = $113;
  } else {
   $$02$us$i = $3;$mem$0$us$i = 0;$z$0$us$i = $3;
   L83: while(1) {
    $176 = $z$0$us$i;
    $177 = $$02$us$i;
    $178 = (($176) - ($177))|0;
    $179 = ($178>>>0)<($113>>>0);
    do {
     if ($179) {
      $180 = (_memchr($z$0$us$i,0,$174)|0);
      $181 = ($180|0)==(0|0);
      if ($181) {
       $185 = (($z$0$us$i) + ($174)|0);
       $z$1$us$i = $185;
       break;
      } else {
       $182 = $180;
       $183 = (($182) - ($177))|0;
       $184 = ($183>>>0)<($113>>>0);
       if ($184) {
        $$0 = 0;
        label = 79;
        break L83;
       } else {
        $z$1$us$i = $180;
        break;
       }
      }
     } else {
      $z$1$us$i = $z$0$us$i;
     }
    } while(0);
    $186 = (($$02$us$i) + ($l$039$i)|0);
    $187 = HEAP8[$186>>0]|0;
    $188 = $187&255;
    $189 = $188 >>> 5;
    $190 = (($byteset$i) + ($189<<2)|0);
    $191 = HEAP32[$190>>2]|0;
    $192 = $188 & 31;
    $193 = 1 << $192;
    $194 = $193 & $191;
    $195 = ($194|0)==(0);
    if ($195) {
     $223 = (($$02$us$i) + ($113)|0);
     $$02$us$i = $223;$mem$0$us$i = 0;$z$0$us$i = $z$1$us$i;
     continue;
    }
    $196 = (($shift$i) + ($188<<2)|0);
    $197 = HEAP32[$196>>2]|0;
    $198 = (($113) - ($197))|0;
    $199 = ($113|0)==($197|0);
    if (!($199)) {
     $notrhs$us$i = ($mem$0$us$i|0)!=(0);
     $200 = ($198>>>0)<($p$1$p$0$i>>>0);
     $or$cond3$us$i = $notrhs$us$i & $200;
     $k$2$us$i = $or$cond3$us$i ? $173 : $198;
     $201 = (($$02$us$i) + ($k$2$us$i)|0);
     $$02$us$i = $201;$mem$0$us$i = 0;$z$0$us$i = $z$1$us$i;
     continue;
    }
    $202 = ($165>>>0)>($mem$0$us$i>>>0);
    $$mem$0$us$i = $202 ? $165 : $mem$0$us$i;
    $203 = (($n) + ($$mem$0$us$i)|0);
    $204 = HEAP8[$203>>0]|0;
    $205 = ($204<<24>>24)==(0);
    L97: do {
     if ($205) {
      $k$4$us$i = $165;
     } else {
      $$pr$us$i = $204;$k$37$us$i = $$mem$0$us$i;
      while(1) {
       $210 = (($$02$us$i) + ($k$37$us$i)|0);
       $211 = HEAP8[$210>>0]|0;
       $212 = ($$pr$us$i<<24>>24)==($211<<24>>24);
       $207 = (($k$37$us$i) + 1)|0;
       if (!($212)) {
        break;
       }
       $206 = (($n) + ($207)|0);
       $208 = HEAP8[$206>>0]|0;
       $209 = ($208<<24>>24)==(0);
       if ($209) {
        $k$4$us$i = $165;
        break L97;
       } else {
        $$pr$us$i = $208;$k$37$us$i = $207;
       }
      }
      $213 = (($k$37$us$i) - ($ip$1$ip$0$i))|0;
      $214 = (($$02$us$i) + ($213)|0);
      $$02$us$i = $214;$mem$0$us$i = 0;$z$0$us$i = $z$1$us$i;
      continue L83;
     }
    } while(0);
    while(1) {
     $215 = ($k$4$us$i>>>0)>($mem$0$us$i>>>0);
     if (!($215)) {
      $$0 = $$02$us$i;
      label = 79;
      break L83;
     }
     $216 = (($k$4$us$i) + -1)|0;
     $217 = (($n) + ($216)|0);
     $218 = HEAP8[$217>>0]|0;
     $219 = (($$02$us$i) + ($216)|0);
     $220 = HEAP8[$219>>0]|0;
     $221 = ($218<<24>>24)==($220<<24>>24);
     if ($221) {
      $k$4$us$i = $216;
     } else {
      break;
     }
    }
    $222 = (($$02$us$i) + ($p$1$p$0$i)|0);
    $$02$us$i = $222;$mem$0$us$i = $173;$z$0$us$i = $z$1$us$i;
   }
   if ((label|0) == 79) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } else {
  $168 = (($113) - ($ip$1$ip$0$i))|0;
  $169 = (($168) + -1)|0;
  $170 = ($ip$1$ip$0$i>>>0)>($169>>>0);
  $ip$1$ip$0$$i = $170 ? $ip$1$ip$0$i : $169;
  $171 = (($ip$1$ip$0$$i) + 1)|0;
  $172 = $113 | 63;
  $228 = $172;$p$3155$i = $171;
 }
 $175 = (($n) + ($165)|0);
 $$02$i = $3;$z$0$i = $3;
 L110: while(1) {
  $224 = $z$0$i;
  $225 = $$02$i;
  $226 = (($224) - ($225))|0;
  $227 = ($226>>>0)<($113>>>0);
  do {
   if ($227) {
    $229 = (_memchr($z$0$i,0,$228)|0);
    $230 = ($229|0)==(0|0);
    if ($230) {
     $234 = (($z$0$i) + ($228)|0);
     $z$1$i = $234;
     break;
    } else {
     $231 = $229;
     $232 = (($231) - ($225))|0;
     $233 = ($232>>>0)<($113>>>0);
     if ($233) {
      $$0 = 0;
      label = 79;
      break L110;
     } else {
      $z$1$i = $229;
      break;
     }
    }
   } else {
    $z$1$i = $z$0$i;
   }
  } while(0);
  $235 = (($$02$i) + ($l$039$i)|0);
  $236 = HEAP8[$235>>0]|0;
  $237 = $236&255;
  $238 = $237 >>> 5;
  $239 = (($byteset$i) + ($238<<2)|0);
  $240 = HEAP32[$239>>2]|0;
  $241 = $237 & 31;
  $242 = 1 << $241;
  $243 = $242 & $240;
  $244 = ($243|0)==(0);
  if ($244) {
   $250 = (($$02$i) + ($113)|0);
   $$02$i = $250;$z$0$i = $z$1$i;
   continue;
  }
  $245 = (($shift$i) + ($237<<2)|0);
  $246 = HEAP32[$245>>2]|0;
  $247 = ($113|0)==($246|0);
  if (!($247)) {
   $248 = (($113) - ($246))|0;
   $249 = (($$02$i) + ($248)|0);
   $$02$i = $249;$z$0$i = $z$1$i;
   continue;
  }
  $251 = HEAP8[$175>>0]|0;
  $252 = ($251<<24>>24)==(0);
  L124: do {
   if ($252) {
    $k$4$i = $165;
   } else {
    $$pr$i = $251;$k$37$i = $165;
    while(1) {
     $257 = (($$02$i) + ($k$37$i)|0);
     $258 = HEAP8[$257>>0]|0;
     $259 = ($$pr$i<<24>>24)==($258<<24>>24);
     $254 = (($k$37$i) + 1)|0;
     if (!($259)) {
      break;
     }
     $253 = (($n) + ($254)|0);
     $255 = HEAP8[$253>>0]|0;
     $256 = ($255<<24>>24)==(0);
     if ($256) {
      $k$4$i = $165;
      break L124;
     } else {
      $$pr$i = $255;$k$37$i = $254;
     }
    }
    $260 = (($k$37$i) - ($ip$1$ip$0$i))|0;
    $261 = (($$02$i) + ($260)|0);
    $$02$i = $261;$z$0$i = $z$1$i;
    continue L110;
   }
  } while(0);
  while(1) {
   $262 = ($k$4$i|0)==(0);
   if ($262) {
    $$0 = $$02$i;
    label = 79;
    break L110;
   }
   $263 = (($k$4$i) + -1)|0;
   $264 = (($n) + ($263)|0);
   $265 = HEAP8[$264>>0]|0;
   $266 = (($$02$i) + ($263)|0);
   $267 = HEAP8[$266>>0]|0;
   $268 = ($265<<24>>24)==($267<<24>>24);
   if ($268) {
    $k$4$i = $263;
   } else {
    break;
   }
  }
  $269 = (($$02$i) + ($p$3155$i)|0);
  $$02$i = $269;$z$0$i = $z$1$i;
 }
 if ((label|0) == 79) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _strtok($s,$sep) {
 $s = $s|0;
 $sep = $sep|0;
 var $$0 = 0, $$01 = 0, $$sum = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $1 = HEAP32[285456>>2]|0;
  $2 = ($1|0)==(0|0);
  if ($2) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$01 = $1;
  }
 } else {
  $$01 = $s;
 }
 $3 = (_strspn($$01,$sep)|0);
 $4 = (($$01) + ($3)|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)==(0);
 if ($6) {
  HEAP32[285456>>2] = 0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = (_strcspn($4,$sep)|0);
 $$sum = (($7) + ($3))|0;
 $8 = (($$01) + ($$sum)|0);
 HEAP32[285456>>2] = $8;
 $9 = HEAP8[$8>>0]|0;
 $10 = ($9<<24>>24)==(0);
 if ($10) {
  HEAP32[285456>>2] = 0;
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 } else {
  $$sum2 = (($$sum) + 1)|0;
  $11 = (($$01) + ($$sum2)|0);
  HEAP32[285456>>2] = $11;
  HEAP8[$8>>0] = 0;
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _strtok_r($s,$sep,$p) {
 $s = $s|0;
 $sep = $sep|0;
 $p = $p|0;
 var $$0 = 0, $$01 = 0, $$sum = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $1 = HEAP32[$p>>2]|0;
  $2 = ($1|0)==(0|0);
  if ($2) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$01 = $1;
  }
 } else {
  $$01 = $s;
 }
 $3 = (_strspn($$01,$sep)|0);
 $4 = (($$01) + ($3)|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)==(0);
 if ($6) {
  HEAP32[$p>>2] = 0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = (_strcspn($4,$sep)|0);
 $$sum = (($7) + ($3))|0;
 $8 = (($$01) + ($$sum)|0);
 HEAP32[$p>>2] = $8;
 $9 = HEAP8[$8>>0]|0;
 $10 = ($9<<24>>24)==(0);
 if ($10) {
  HEAP32[$p>>2] = 0;
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 } else {
  $$sum2 = (($$sum) + 1)|0;
  $11 = (($$01) + ($$sum2)|0);
  HEAP32[$p>>2] = $11;
  HEAP8[$8>>0] = 0;
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _strverscmp($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $$ = 0, $$0$lcssa40 = 0, $$0$lcssa41 = 0, $$01$lcssa42 = 0, $$01$lcssa43 = 0, $$0121 = 0, $$02 = 0, $$022 = 0, $$haszero$0 = 0, $$haszero$011 = 0, $$haszero$013 = 0, $$lcssa1938 = 0, $$lcssa39 = 0, $$phi$trans$insert = 0, $$phi$trans$insert34 = 0, $$pre = 0, $$pre35 = 0, $0 = 0, $1 = 0, $10 = 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $haszero$023 = 0, $haszero$1 = 0, $haszero$2 = 0, $isdigit = 0, $isdigit10 = 0, $isdigit4 = 0, $isdigit6 = 0, $isdigit8 = 0, $isdigittmp = 0, $isdigittmp3 = 0;
 var $isdigittmp5 = 0, $isdigittmp7 = 0, $isdigittmp9 = 0, $lenl$0 = 0, $lenr$0 = 0, $or$cond = 0, $or$cond12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$l>>0]|0;
 $1 = HEAP8[$r>>0]|0;
 $2 = ($0<<24>>24)==($1<<24>>24);
 do {
  if ($2) {
   $3 = $0 << 24 >> 24;
   $$0121 = $l;$$022 = $r;$32 = $0;$5 = $3;$haszero$023 = 1;
   while(1) {
    if ((($32<<24>>24) == 0)) {
     $$02 = 0;
     label = 20;
     break;
    } else if ((($32<<24>>24) == 48)) {
     $4 = ($haszero$023|0)==(1);
     $$haszero$0 = $4 ? 0 : $haszero$023;
     $haszero$1 = $$haszero$0;
    } else {
     $isdigittmp9 = (($5) + -48)|0;
     $isdigit10 = ($isdigittmp9>>>0)<(10);
     if ($isdigit10) {
      $6 = ($haszero$023|0)==(1);
      $$haszero$011 = $6 ? 2 : $haszero$023;
      $haszero$1 = $$haszero$011;
     } else {
      $haszero$1 = 1;
     }
    }
    $7 = (($$0121) + 1|0);
    $8 = (($$022) + 1|0);
    $9 = HEAP8[$7>>0]|0;
    $10 = $9 << 24 >> 24;
    $11 = HEAP8[$8>>0]|0;
    $12 = ($9<<24>>24)==($11<<24>>24);
    if ($12) {
     $$0121 = $7;$$022 = $8;$32 = $9;$5 = $10;$haszero$023 = $haszero$1;
    } else {
     label = 8;
     break;
    }
   }
   if ((label|0) == 8) {
    $13 = ($haszero$1|0)==(1);
    if ($13) {
     $$0$lcssa41 = $8;$$01$lcssa43 = $7;$$lcssa1938 = $11;$$lcssa39 = $9;
     label = 9;
     break;
    } else {
     $$0$lcssa40 = $8;$$01$lcssa42 = $7;$18 = $9;$20 = $11;$haszero$2 = $haszero$1;
     break;
    }
   }
   else if ((label|0) == 20) {
    STACKTOP = sp;return ($$02|0);
   }
  } else {
   $$0$lcssa41 = $r;$$01$lcssa43 = $l;$$lcssa1938 = $1;$$lcssa39 = $0;
   label = 9;
  }
 } while(0);
 if ((label|0) == 9) {
  $14 = ($$lcssa39<<24>>24)==(48);
  $15 = ($$lcssa1938<<24>>24)==(48);
  $or$cond = $14 | $15;
  $16 = $or$cond&1;
  $$haszero$013 = $16 ^ 1;
  $$0$lcssa40 = $$0$lcssa41;$$01$lcssa42 = $$01$lcssa43;$18 = $$lcssa39;$20 = $$lcssa1938;$haszero$2 = $$haszero$013;
 }
 $17 = $18 << 24 >> 24;
 $isdigittmp = (($17) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 $19 = $20 << 24 >> 24;
 if ($isdigit) {
  $isdigittmp3 = (($19) + -48)|0;
  $isdigit4 = ($isdigittmp3>>>0)>(9);
  $21 = ($haszero$2|0)==(0);
  $or$cond12 = $isdigit4 | $21;
  if (!($or$cond12)) {
   $23 = $18;$lenl$0 = 0;
   while(1) {
    $22 = $23 << 24 >> 24;
    $isdigittmp5 = (($22) + -48)|0;
    $isdigit6 = ($isdigittmp5>>>0)<(10);
    $24 = (($lenl$0) + 1)|0;
    if (!($isdigit6)) {
     $26 = $20;$lenr$0 = 0;
     break;
    }
    $$phi$trans$insert = (($$01$lcssa42) + ($24)|0);
    $$pre = HEAP8[$$phi$trans$insert>>0]|0;
    $23 = $$pre;$lenl$0 = $24;
   }
   while(1) {
    $25 = $26 << 24 >> 24;
    $isdigittmp7 = (($25) + -48)|0;
    $isdigit8 = ($isdigittmp7>>>0)<(10);
    $27 = (($lenr$0) + 1)|0;
    if (!($isdigit8)) {
     break;
    }
    $$phi$trans$insert34 = (($$0$lcssa40) + ($27)|0);
    $$pre35 = HEAP8[$$phi$trans$insert34>>0]|0;
    $26 = $$pre35;$lenr$0 = $27;
   }
   $28 = ($lenl$0|0)==($lenr$0|0);
   if ($28) {
    $29 = (($17) - ($19))|0;
    $$02 = $29;
    STACKTOP = sp;return ($$02|0);
   } else {
    $30 = ($lenl$0>>>0)>($lenr$0>>>0);
    $$ = $30 ? 1 : -1;
    $$02 = $$;
    STACKTOP = sp;return ($$02|0);
   }
  }
 }
 $31 = (($17) - ($19))|0;
 $$02 = $31;
 STACKTOP = sp;return ($$02|0);
}
function _wcpcpy($d,$s) {
 $d = $d|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcscpy($d,$s)|0);
 $1 = (_wcslen($s)|0);
 $2 = (($0) + ($1<<2)|0);
 STACKTOP = sp;return ($2|0);
}
function _wcpncpy($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcsncpy($d,$s,$n)|0);
 $1 = (_wcsnlen($s,$n)|0);
 $2 = (($0) + ($1<<2)|0);
 STACKTOP = sp;return ($2|0);
}
function _wcscasecmp($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcsncasecmp($l,$r,-1)|0);
 STACKTOP = sp;return ($0|0);
}
function _wcscasecmp_l($l,$r,$locale) {
 $l = $l|0;
 $r = $r|0;
 $locale = $locale|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcscasecmp($l,$r)|0);
 STACKTOP = sp;return ($0|0);
}
function _wcscat($dest,$src) {
 $dest = $dest|0;
 $src = $src|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcslen($dest)|0);
 $1 = (($dest) + ($0<<2)|0);
 (_wcscpy($1,$src)|0);
 STACKTOP = sp;return ($dest|0);
}
function _wcschr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(0);
 if ($0) {
  $1 = (_wcslen($s)|0);
  $2 = (($s) + ($1<<2)|0);
  $$0 = $2;
  STACKTOP = sp;return ($$0|0);
 } else {
  $$01 = $s;
 }
 while(1) {
  $3 = HEAP32[$$01>>2]|0;
  $4 = ($3|0)==(0);
  $5 = ($3|0)==($c|0);
  $or$cond = $4 | $5;
  $6 = (($$01) + 4|0);
  if ($or$cond) {
   break;
  } else {
   $$01 = $6;
  }
 }
 $7 = ($3|0)!=(0);
 $8 = $7 ? $$01 : 0;
 $$0 = $8;
 STACKTOP = sp;return ($$0|0);
}
function _wcscmp($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $$027 = 0, $$08 = 0, $$lcssa = 0, $$lcssa4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond36 = 0;
 var $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$l>>2]|0;
 $1 = HEAP32[$r>>2]|0;
 $2 = ($0|0)!=($1|0);
 $3 = ($0|0)==(0);
 $or$cond5 = $2 | $3;
 $4 = ($1|0)==(0);
 $or$cond36 = $or$cond5 | $4;
 if ($or$cond36) {
  $$lcssa = $0;$$lcssa4 = $1;
  $12 = (($$lcssa) - ($$lcssa4))|0;
  STACKTOP = sp;return ($12|0);
 } else {
  $$027 = $l;$$08 = $r;
 }
 while(1) {
  $5 = (($$027) + 4|0);
  $6 = (($$08) + 4|0);
  $7 = HEAP32[$5>>2]|0;
  $8 = HEAP32[$6>>2]|0;
  $9 = ($7|0)!=($8|0);
  $10 = ($7|0)==(0);
  $or$cond = $9 | $10;
  $11 = ($8|0)==(0);
  $or$cond3 = $or$cond | $11;
  if ($or$cond3) {
   $$lcssa = $7;$$lcssa4 = $8;
   break;
  } else {
   $$027 = $5;$$08 = $6;
  }
 }
 $12 = (($$lcssa) - ($$lcssa4))|0;
 STACKTOP = sp;return ($12|0);
}
function _wcscpy($d,$s) {
 $d = $d|0;
 $s = $s|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $d;$$01 = $s;
 while(1) {
  $0 = (($$01) + 4|0);
  $1 = HEAP32[$$01>>2]|0;
  $2 = (($$0) + 4|0);
  HEAP32[$$0>>2] = $1;
  $3 = ($1|0)==(0);
  if ($3) {
   break;
  } else {
   $$0 = $2;$$01 = $0;
  }
 }
 STACKTOP = sp;return ($d|0);
}
function _wcscspn($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$01$lcssa = 0, $$012 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$c>>2]|0;
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = (_wcslen($s)|0);
  $$0 = $2;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($c) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $8 = (_wcschr($s,$0)|0);
  $9 = ($8|0)==(0|0);
  if ($9) {
   $14 = (_wcslen($s)|0);
   $$0 = $14;
   STACKTOP = sp;return ($$0|0);
  } else {
   $10 = $8;
   $11 = $s;
   $12 = (($10) - ($11))|0;
   $13 = $12 >> 2;
   $$0 = $13;
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  $6 = HEAP32[$s>>2]|0;
  $7 = ($6|0)==(0);
  L13: do {
   if ($7) {
    $$01$lcssa = $s;
   } else {
    $$012 = $s;$18 = $6;
    while(1) {
     $19 = (_wcschr($c,$18)|0);
     $20 = ($19|0)==(0|0);
     $16 = (($$012) + 4|0);
     if (!($20)) {
      $$01$lcssa = $$012;
      break L13;
     }
     $15 = HEAP32[$16>>2]|0;
     $17 = ($15|0)==(0);
     if ($17) {
      $$01$lcssa = $16;
      break;
     } else {
      $$012 = $16;$18 = $15;
     }
    }
   }
  } while(0);
  $21 = $$01$lcssa;
  $22 = $s;
  $23 = (($21) - ($22))|0;
  $24 = $23 >> 2;
  $$0 = $24;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _wcsdup($s) {
 $s = $s|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcslen($s)|0);
 $1 = (($0) + 1)|0;
 $2 = $1 << 2;
 $3 = (_malloc($2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (_wmemcpy($3,$s,$1)|0);
 $$0 = $5;
 STACKTOP = sp;return ($$0|0);
}
function _wcslen($s) {
 $s = $s|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $s;
 while(1) {
  $0 = HEAP32[$$0>>2]|0;
  $1 = ($0|0)==(0);
  $2 = (($$0) + 4|0);
  if ($1) {
   break;
  } else {
   $$0 = $2;
  }
 }
 $3 = $$0;
 $4 = $s;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 STACKTOP = sp;return ($6|0);
}
function _wcsncasecmp($l,$r,$n) {
 $l = $l|0;
 $r = $r|0;
 $n = $n|0;
 var $$010 = 0, $$010$in = 0, $$04$lcssa = 0, $$049 = 0, $$058 = 0, $$06 = 0, $$pre$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  $$06 = 0;
  STACKTOP = sp;return ($$06|0);
 }
 $1 = HEAP32[$l>>2]|0;
 $2 = ($1|0)==(0);
 L4: do {
  if ($2) {
   $$04$lcssa = $r;$16 = 0;
  } else {
   $$010$in = $n;$$049 = $r;$$058 = $l;$7 = $1;
   while(1) {
    $$010 = (($$010$in) + -1)|0;
    $3 = HEAP32[$$049>>2]|0;
    $4 = ($3|0)==(0);
    $5 = ($$010|0)==(0);
    $or$cond = $4 | $5;
    if ($or$cond) {
     $$04$lcssa = $$049;$16 = $7;
     break L4;
    }
    $6 = ($7|0)==($3|0);
    if (!($6)) {
     $8 = (_towlower($7)|0);
     $9 = HEAP32[$$049>>2]|0;
     $10 = (_towlower($9)|0);
     $11 = ($8|0)==($10|0);
     if (!($11)) {
      break;
     }
    }
    $12 = (($$058) + 4|0);
    $13 = (($$049) + 4|0);
    $14 = HEAP32[$12>>2]|0;
    $15 = ($14|0)==(0);
    if ($15) {
     $$04$lcssa = $13;$16 = 0;
     break L4;
    } else {
     $$010$in = $$010;$$049 = $13;$$058 = $12;$7 = $14;
    }
   }
   $$pre$pre = HEAP32[$$058>>2]|0;
   $$04$lcssa = $$049;$16 = $$pre$pre;
  }
 } while(0);
 $17 = (_towlower($16)|0);
 $18 = HEAP32[$$04$lcssa>>2]|0;
 $19 = (_towlower($18)|0);
 $20 = (($17) - ($19))|0;
 $$06 = $20;
 STACKTOP = sp;return ($$06|0);
}
function _wcsncasecmp_l($l,$r,$n,$locale) {
 $l = $l|0;
 $r = $r|0;
 $n = $n|0;
 $locale = $locale|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcsncasecmp($l,$r,$n)|0);
 STACKTOP = sp;return ($0|0);
}
function _wcsncat($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$014 = 0, $$023 = 0, $$05 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcslen($d)|0);
 $1 = (($d) + ($0<<2)|0);
 $2 = ($n|0)==(0);
 L1: do {
  if ($2) {
   $$0$lcssa = $1;
  } else {
   $$014 = $n;$$023 = $s;$$05 = $1;
   while(1) {
    $3 = HEAP32[$$023>>2]|0;
    $4 = ($3|0)==(0);
    if ($4) {
     $$0$lcssa = $$05;
     break L1;
    }
    $5 = (($$014) + -1)|0;
    $6 = (($$023) + 4|0);
    $7 = (($$05) + 4|0);
    HEAP32[$$05>>2] = $3;
    $8 = ($5|0)==(0);
    if ($8) {
     $$0$lcssa = $7;
     break;
    } else {
     $$014 = $5;$$023 = $6;$$05 = $7;
    }
   }
  }
 } while(0);
 HEAP32[$$0$lcssa>>2] = 0;
 STACKTOP = sp;return ($d|0);
}
function _wcsncmp($l,$r,$n) {
 $l = $l|0;
 $r = $r|0;
 $n = $n|0;
 var $$010 = 0, $$039 = 0, $$048 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  $11 = 0;
  STACKTOP = sp;return ($11|0);
 } else {
  $$010 = $n;$$039 = $r;$$048 = $l;
 }
 while(1) {
  $1 = HEAP32[$$048>>2]|0;
  $2 = HEAP32[$$039>>2]|0;
  $3 = ($1|0)!=($2|0);
  $4 = ($1|0)==(0);
  $or$cond = $3 | $4;
  $5 = ($2|0)==(0);
  $or$cond5 = $or$cond | $5;
  if ($or$cond5) {
   break;
  }
  $6 = (($$010) + -1)|0;
  $7 = (($$048) + 4|0);
  $8 = (($$039) + 4|0);
  $9 = ($6|0)==(0);
  if ($9) {
   $11 = 0;
   label = 5;
   break;
  } else {
   $$010 = $6;$$039 = $8;$$048 = $7;
  }
 }
 if ((label|0) == 5) {
  STACKTOP = sp;return ($11|0);
 }
 $10 = (($1) - ($2))|0;
 $11 = $10;
 STACKTOP = sp;return ($11|0);
}
function _wcsncpy($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$01$lcssa = 0, $$014 = 0, $$023 = 0, $$05 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 L1: do {
  if ($0) {
   $$0$lcssa = $d;$$01$lcssa = 0;
  } else {
   $$014 = $n;$$023 = $s;$$05 = $d;
   while(1) {
    $1 = HEAP32[$$023>>2]|0;
    $2 = ($1|0)==(0);
    if ($2) {
     $$0$lcssa = $$05;$$01$lcssa = $$014;
     break L1;
    }
    $3 = (($$014) + -1)|0;
    $4 = (($$023) + 4|0);
    $5 = (($$05) + 4|0);
    HEAP32[$$05>>2] = $1;
    $6 = ($3|0)==(0);
    if ($6) {
     $$0$lcssa = $5;$$01$lcssa = 0;
     break;
    } else {
     $$014 = $3;$$023 = $4;$$05 = $5;
    }
   }
  }
 } while(0);
 (_wmemset($$0$lcssa,0,$$01$lcssa)|0);
 STACKTOP = sp;return ($d|0);
}
function _wcsnlen($s,$n) {
 $s = $s|0;
 $n = $n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wmemchr($s,0,$n)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = $n;
 } else {
  $2 = $0;
  $3 = $s;
  $4 = (($2) - ($3))|0;
  $5 = $4 >> 2;
  $$0 = $5;
 }
 STACKTOP = sp;return ($$0|0);
}
function _wcspbrk($s,$b) {
 $s = $s|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcscspn($s,$b)|0);
 $1 = (($s) + ($0<<2)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0);
 $4 = $3 ? $1 : 0;
 STACKTOP = sp;return ($4|0);
}
function _wcsrchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $p$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcslen($s)|0);
 $1 = ($0|0)>(-1);
 L1: do {
  if ($1) {
   $2 = (($s) + ($0<<2)|0);
   $p$01 = $2;
   while(1) {
    $5 = HEAP32[$p$01>>2]|0;
    $6 = ($5|0)==($c|0);
    $4 = (($p$01) + -4|0);
    if ($6) {
     $$lcssa = $p$01;
     break L1;
    }
    $3 = ($4>>>0)<($s>>>0);
    if ($3) {
     $$lcssa = 0;
     break;
    } else {
     $p$01 = $4;
    }
   }
  } else {
   $$lcssa = 0;
  }
 } while(0);
 STACKTOP = sp;return ($$lcssa|0);
}
function _wcsspn($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0$lcssa = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$s>>2]|0;
 $1 = ($0|0)==(0);
 L1: do {
  if ($1) {
   $$0$lcssa = $s;
  } else {
   $$01 = $s;$5 = $0;
   while(1) {
    $6 = (_wcschr($c,$5)|0);
    $7 = ($6|0)==(0|0);
    $3 = (($$01) + 4|0);
    if ($7) {
     $$0$lcssa = $$01;
     break L1;
    }
    $2 = HEAP32[$3>>2]|0;
    $4 = ($2|0)==(0);
    if ($4) {
     $$0$lcssa = $3;
     break;
    } else {
     $$01 = $3;$5 = $2;
    }
   }
  }
 } while(0);
 $8 = $$0$lcssa;
 $9 = $s;
 $10 = (($8) - ($9))|0;
 $11 = $10 >> 2;
 STACKTOP = sp;return ($11|0);
}
function _wcsstr($h,$n) {
 $h = $h|0;
 $n = $n|0;
 var $$0 = 0, $$03$be$i = 0, $$03$i = 0, $$mem$0$i = 0, $$pn$i = 0, $$pr4$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $ip$0$ph74$i = 0, $ip$0$ph74137$i = 0, $ip$0$ph77$i = 0, $ip$1$ip$0$$i = 0, $ip$1$ip$0$i = 0, $ip$1$ph54$i = 0, $ip$1$ph57$i = 0, $jp$0$ph21$ph68$i = 0, $jp$0$ph2162$i = 0, $jp$0$ph78$i = 0, $jp$1$ph12$ph48$i = 0, $jp$1$ph1242$i = 0, $jp$1$ph58$i = 0, $k$029$i = 0, $k$118$i = 0, $k$28$i = 0, $k$3$i = 0, $l$032133$i = 0, $l$037$i = 0, $mem$0$be$i = 0;
 var $mem$0$i = 0, $mem0$0$i = 0, $p$0$ph$ph66$i = 0, $p$0$ph$ph66141$i = 0, $p$0$ph$ph69$i = 0, $p$1$p$0$i = 0, $p$1$ph$ph46$i = 0, $p$1$ph$ph49$i = 0, $p$3$i = 0, $z$0$i = 0, $z$1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$n>>2]|0;
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = $h;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = HEAP32[$h>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (_wcschr($h,$0)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = (($n) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0);
 if ($8) {
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = (($4) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0);
 if ($11) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = HEAP32[$n>>2]|0;
 $13 = ($12|0)==(0);
 L16: do {
  if ($13) {
   $ip$0$ph74137$i = -1;$ip$1$ph54$i = -1;$l$032133$i = 0;$p$0$ph$ph66141$i = 1;$p$1$ph$ph46$i = 1;
  } else {
   $l$037$i = 0;
   while(1) {
    $18 = (($4) + ($l$037$i<<2)|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ($19|0)==(0);
    $15 = (($l$037$i) + 1)|0;
    if ($20) {
     $$0 = 0;
     label = 46;
     break;
    }
    $14 = (($n) + ($15<<2)|0);
    $16 = HEAP32[$14>>2]|0;
    $17 = ($16|0)==(0);
    if ($17) {
     break;
    } else {
     $l$037$i = $15;
    }
   }
   if ((label|0) == 46) {
    STACKTOP = sp;return ($$0|0);
   }
   $21 = ($15>>>0)>(1);
   if ($21) {
    $108 = 1;$ip$0$ph77$i = -1;$jp$0$ph78$i = 0;
    L23: while(1) {
     $109 = $108;$jp$0$ph21$ph68$i = $jp$0$ph78$i;$p$0$ph$ph69$i = 1;
     while(1) {
      $110 = $109;$jp$0$ph2162$i = $jp$0$ph21$ph68$i;
      L27: while(1) {
       $23 = $110;$k$029$i = 1;
       while(1) {
        $28 = (($k$029$i) + ($ip$0$ph77$i))|0;
        $29 = (($n) + ($28<<2)|0);
        $30 = HEAP32[$29>>2]|0;
        $31 = (($n) + ($23<<2)|0);
        $32 = HEAP32[$31>>2]|0;
        $33 = ($30|0)==($32|0);
        if (!($33)) {
         break L27;
        }
        $34 = ($k$029$i|0)==($p$0$ph$ph69$i|0);
        $26 = (($k$029$i) + 1)|0;
        if ($34) {
         break;
        }
        $25 = (($26) + ($jp$0$ph2162$i))|0;
        $27 = ($25>>>0)<($15>>>0);
        if ($27) {
         $23 = $25;$k$029$i = $26;
        } else {
         $ip$0$ph74$i = $ip$0$ph77$i;$p$0$ph$ph66$i = $p$0$ph$ph69$i;
         break L23;
        }
       }
       $35 = (($jp$0$ph2162$i) + ($p$0$ph$ph69$i))|0;
       $36 = (($35) + 1)|0;
       $37 = ($36>>>0)<($15>>>0);
       if ($37) {
        $110 = $36;$jp$0$ph2162$i = $35;
       } else {
        $ip$0$ph74$i = $ip$0$ph77$i;$p$0$ph$ph66$i = $p$0$ph$ph69$i;
        break L23;
       }
      }
      $38 = ($30|0)>($32|0);
      $39 = (($23) - ($ip$0$ph77$i))|0;
      if (!($38)) {
       break;
      }
      $22 = (($23) + 1)|0;
      $24 = ($22>>>0)<($15>>>0);
      if ($24) {
       $109 = $22;$jp$0$ph21$ph68$i = $23;$p$0$ph$ph69$i = $39;
      } else {
       $ip$0$ph74$i = $ip$0$ph77$i;$p$0$ph$ph66$i = $39;
       break L23;
      }
     }
     $40 = (($jp$0$ph2162$i) + 1)|0;
     $41 = (($jp$0$ph2162$i) + 2)|0;
     $42 = ($41>>>0)<($15>>>0);
     if ($42) {
      $108 = $41;$ip$0$ph77$i = $jp$0$ph2162$i;$jp$0$ph78$i = $40;
     } else {
      $ip$0$ph74$i = $jp$0$ph2162$i;$p$0$ph$ph66$i = 1;
      break;
     }
    }
    $111 = 1;$ip$1$ph57$i = -1;$jp$1$ph58$i = 0;
    while(1) {
     $113 = $111;$jp$1$ph12$ph48$i = $jp$1$ph58$i;$p$1$ph$ph49$i = 1;
     while(1) {
      $112 = $113;$jp$1$ph1242$i = $jp$1$ph12$ph48$i;
      L42: while(1) {
       $50 = $112;$k$118$i = 1;
       while(1) {
        $46 = (($k$118$i) + ($ip$1$ph57$i))|0;
        $47 = (($n) + ($46<<2)|0);
        $48 = HEAP32[$47>>2]|0;
        $49 = (($n) + ($50<<2)|0);
        $51 = HEAP32[$49>>2]|0;
        $52 = ($48|0)==($51|0);
        if (!($52)) {
         break L42;
        }
        $53 = ($k$118$i|0)==($p$1$ph$ph49$i|0);
        $44 = (($k$118$i) + 1)|0;
        if ($53) {
         break;
        }
        $43 = (($44) + ($jp$1$ph1242$i))|0;
        $45 = ($43>>>0)<($15>>>0);
        if ($45) {
         $50 = $43;$k$118$i = $44;
        } else {
         $ip$0$ph74137$i = $ip$0$ph74$i;$ip$1$ph54$i = $ip$1$ph57$i;$l$032133$i = $15;$p$0$ph$ph66141$i = $p$0$ph$ph66$i;$p$1$ph$ph46$i = $p$1$ph$ph49$i;
         break L16;
        }
       }
       $54 = (($jp$1$ph1242$i) + ($p$1$ph$ph49$i))|0;
       $55 = (($54) + 1)|0;
       $56 = ($55>>>0)<($15>>>0);
       if ($56) {
        $112 = $55;$jp$1$ph1242$i = $54;
       } else {
        $ip$0$ph74137$i = $ip$0$ph74$i;$ip$1$ph54$i = $ip$1$ph57$i;$l$032133$i = $15;$p$0$ph$ph66141$i = $p$0$ph$ph66$i;$p$1$ph$ph46$i = $p$1$ph$ph49$i;
        break L16;
       }
      }
      $57 = ($48|0)<($51|0);
      $58 = (($50) - ($ip$1$ph57$i))|0;
      if (!($57)) {
       break;
      }
      $59 = (($50) + 1)|0;
      $60 = ($59>>>0)<($15>>>0);
      if ($60) {
       $113 = $59;$jp$1$ph12$ph48$i = $50;$p$1$ph$ph49$i = $58;
      } else {
       $ip$0$ph74137$i = $ip$0$ph74$i;$ip$1$ph54$i = $ip$1$ph57$i;$l$032133$i = $15;$p$0$ph$ph66141$i = $p$0$ph$ph66$i;$p$1$ph$ph46$i = $58;
       break L16;
      }
     }
     $61 = (($jp$1$ph1242$i) + 1)|0;
     $62 = (($jp$1$ph1242$i) + 2)|0;
     $63 = ($62>>>0)<($15>>>0);
     if ($63) {
      $111 = $62;$ip$1$ph57$i = $jp$1$ph1242$i;$jp$1$ph58$i = $61;
     } else {
      $ip$0$ph74137$i = $ip$0$ph74$i;$ip$1$ph54$i = $jp$1$ph1242$i;$l$032133$i = $15;$p$0$ph$ph66141$i = $p$0$ph$ph66$i;$p$1$ph$ph46$i = 1;
      break;
     }
    }
   } else {
    $ip$0$ph74137$i = -1;$ip$1$ph54$i = -1;$l$032133$i = $15;$p$0$ph$ph66141$i = 1;$p$1$ph$ph46$i = 1;
   }
  }
 } while(0);
 $64 = (($ip$1$ph54$i) + 1)|0;
 $65 = (($ip$0$ph74137$i) + 1)|0;
 $66 = ($64>>>0)>($65>>>0);
 $p$1$p$0$i = $66 ? $p$1$ph$ph46$i : $p$0$ph$ph66141$i;
 $ip$1$ip$0$i = $66 ? $ip$1$ph54$i : $ip$0$ph74137$i;
 $67 = (($n) + ($p$1$p$0$i<<2)|0);
 $68 = (($ip$1$ip$0$i) + 1)|0;
 $69 = (_wmemcmp($n,$67,$68)|0);
 $70 = ($69|0)==(0);
 if ($70) {
  $75 = (($l$032133$i) - ($p$1$p$0$i))|0;
  $mem0$0$i = $75;$p$3$i = $p$1$p$0$i;
 } else {
  $71 = (($l$032133$i) - ($ip$1$ip$0$i))|0;
  $72 = (($71) + -1)|0;
  $73 = ($ip$1$ip$0$i>>>0)>($72>>>0);
  $ip$1$ip$0$$i = $73 ? $ip$1$ip$0$i : $72;
  $74 = (($ip$1$ip$0$$i) + 1)|0;
  $mem0$0$i = 0;$p$3$i = $74;
 }
 $76 = $l$032133$i | 63;
 $$03$i = $4;$mem$0$i = 0;$z$0$i = $4;
 L57: while(1) {
  $77 = $z$0$i;
  $78 = $$03$i;
  $79 = (($77) - ($78))|0;
  $80 = $79 >> 2;
  $81 = ($80>>>0)<($l$032133$i>>>0);
  do {
   if ($81) {
    $82 = (_wmemchr($z$0$i,0,$76)|0);
    $83 = ($82|0)==(0|0);
    if ($83) {
     $88 = (($z$0$i) + ($76<<2)|0);
     $z$1$i = $88;
     break;
    } else {
     $84 = $82;
     $85 = (($84) - ($78))|0;
     $86 = $85 >> 2;
     $87 = ($86>>>0)<($l$032133$i>>>0);
     if ($87) {
      $$0 = 0;
      label = 46;
      break L57;
     } else {
      $z$1$i = $82;
      break;
     }
    }
   } else {
    $z$1$i = $z$0$i;
   }
  } while(0);
  $89 = ($68>>>0)>($mem$0$i>>>0);
  $$mem$0$i = $89 ? $68 : $mem$0$i;
  $90 = (($n) + ($$mem$0$i<<2)|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = ($91|0)==(0);
  L65: do {
   if ($92) {
    $k$3$i = $68;
    label = 44;
   } else {
    $$pr4$i = $91;$k$28$i = $$mem$0$i;
    while(1) {
     $97 = (($$03$i) + ($k$28$i<<2)|0);
     $98 = HEAP32[$97>>2]|0;
     $99 = ($$pr4$i|0)==($98|0);
     $94 = (($k$28$i) + 1)|0;
     if (!($99)) {
      break;
     }
     $93 = (($n) + ($94<<2)|0);
     $95 = HEAP32[$93>>2]|0;
     $96 = ($95|0)==(0);
     if ($96) {
      $k$3$i = $68;
      label = 44;
      break L65;
     } else {
      $$pr4$i = $95;$k$28$i = $94;
     }
    }
    $100 = (($k$28$i) - ($ip$1$ip$0$i))|0;
    $$pn$i = $100;$mem$0$be$i = 0;
   }
  } while(0);
  if ((label|0) == 44) {
   while(1) {
    label = 0;
    $101 = ($k$3$i>>>0)>($mem$0$i>>>0);
    if (!($101)) {
     $$0 = $$03$i;
     label = 46;
     break L57;
    }
    $102 = (($k$3$i) + -1)|0;
    $103 = (($n) + ($102<<2)|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = (($$03$i) + ($102<<2)|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = ($104|0)==($106|0);
    if ($107) {
     $k$3$i = $102;
     label = 44;
    } else {
     $$pn$i = $p$3$i;$mem$0$be$i = $mem0$0$i;
     break;
    }
   }
  }
  $$03$be$i = (($$03$i) + ($$pn$i<<2)|0);
  $$03$i = $$03$be$i;$mem$0$i = $mem$0$be$i;$z$0$i = $z$1$i;
 }
 if ((label|0) == 46) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _wcstok($s,$sep,$p) {
 $s = $s|0;
 $sep = $sep|0;
 $p = $p|0;
 var $$0 = 0, $$01 = 0, $$sum = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $1 = HEAP32[$p>>2]|0;
  $2 = ($1|0)==(0|0);
  if ($2) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$01 = $1;
  }
 } else {
  $$01 = $s;
 }
 $3 = (_wcsspn($$01,$sep)|0);
 $4 = (($$01) + ($3<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  HEAP32[$p>>2] = 0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = (_wcscspn($4,$sep)|0);
 $$sum = (($7) + ($3))|0;
 $8 = (($$01) + ($$sum<<2)|0);
 HEAP32[$p>>2] = $8;
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if ($10) {
  HEAP32[$p>>2] = 0;
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 } else {
  $$sum2 = (($$sum) + 1)|0;
  $11 = (($$01) + ($$sum2<<2)|0);
  HEAP32[$p>>2] = $11;
  HEAP32[$8>>2] = 0;
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _wcswcs($haystack,$needle) {
 $haystack = $haystack|0;
 $needle = $needle|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcsstr($haystack,$needle)|0);
 STACKTOP = sp;return ($0|0);
}
function _wmemchr($s,$c,$n) {
 $s = $s|0;
 $c = $c|0;
 $n = $n|0;
 var $$012 = 0, $$03 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 L1: do {
  if ($0) {
   $$lcssa = 0;
  } else {
   $$012 = $s;$$03 = $n;
   while(1) {
    $1 = HEAP32[$$012>>2]|0;
    $2 = ($1|0)==($c|0);
    if ($2) {
     $$lcssa = $$012;
     break L1;
    }
    $3 = (($$03) + -1)|0;
    $4 = (($$012) + 4|0);
    $5 = ($3|0)==(0);
    if ($5) {
     $$lcssa = 0;
     break;
    } else {
     $$012 = $4;$$03 = $3;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$lcssa|0);
}
function _wmemcmp($l,$r,$n) {
 $l = $l|0;
 $r = $r|0;
 $n = $n|0;
 var $$016 = 0, $$025 = 0, $$07 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 L1: do {
  if ($0) {
   $9 = 0;
  } else {
   $$016 = $r;$$025 = $l;$$07 = $n;
   while(1) {
    $1 = HEAP32[$$025>>2]|0;
    $2 = HEAP32[$$016>>2]|0;
    $3 = ($1|0)==($2|0);
    if (!($3)) {
     break;
    }
    $4 = (($$07) + -1)|0;
    $5 = (($$025) + 4|0);
    $6 = (($$016) + 4|0);
    $7 = ($4|0)==(0);
    if ($7) {
     $9 = 0;
     break L1;
    } else {
     $$016 = $6;$$025 = $5;$$07 = $4;
    }
   }
   $8 = (($1) - ($2))|0;
   $9 = $8;
  }
 } while(0);
 STACKTOP = sp;return ($9|0);
}
function _wmemcpy($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$014 = 0, $$023 = 0, $$05 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  STACKTOP = sp;return ($d|0);
 } else {
  $$014 = $n;$$023 = $s;$$05 = $d;
 }
 while(1) {
  $1 = (($$014) + -1)|0;
  $2 = (($$023) + 4|0);
  $3 = HEAP32[$$023>>2]|0;
  $4 = (($$05) + 4|0);
  HEAP32[$$05>>2] = $3;
  $5 = ($1|0)==(0);
  if ($5) {
   break;
  } else {
   $$014 = $1;$$023 = $2;$$05 = $4;
  }
 }
 STACKTOP = sp;return ($d|0);
}
function _wmemmove($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$025 = 0, $$07 = 0, $$16 = 0, $$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $d;
 $1 = $s;
 $2 = (($0) - ($1))|0;
 $3 = $2 >> 2;
 $4 = ($3>>>0)<($n>>>0);
 $5 = ($n|0)==(0);
 if ($4) {
  if (!($5)) {
   $$in = $n;
   while(1) {
    $6 = (($$in) + -1)|0;
    $7 = (($s) + ($6<<2)|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = (($d) + ($6<<2)|0);
    HEAP32[$9>>2] = $8;
    $10 = ($6|0)==(0);
    if ($10) {
     break;
    } else {
     $$in = $6;
    }
   }
  }
 } else {
  if (!($5)) {
   $$025 = $s;$$07 = $d;$$16 = $n;
   while(1) {
    $11 = (($$16) + -1)|0;
    $12 = (($$025) + 4|0);
    $13 = HEAP32[$$025>>2]|0;
    $14 = (($$07) + 4|0);
    HEAP32[$$07>>2] = $13;
    $15 = ($11|0)==(0);
    if ($15) {
     break;
    } else {
     $$025 = $12;$$07 = $14;$$16 = $11;
    }
   }
  }
 }
 STACKTOP = sp;return ($d|0);
}
function _wmemset($d,$c,$n) {
 $d = $d|0;
 $c = $c|0;
 $n = $n|0;
 var $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if (!($0)) {
  $$012 = $n;$$03 = $d;
  while(1) {
   $1 = (($$012) + -1)|0;
   $2 = (($$03) + 4|0);
   HEAP32[$$03>>2] = $c;
   $3 = ($1|0)==(0);
   if ($3) {
    break;
   } else {
    $$012 = $1;$$03 = $2;
   }
  }
 }
 STACKTOP = sp;return ($d|0);
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$$i = 0, $$3$i = 0, $$4$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i25 = 0, $$pre$i25$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i26$iZ2D = 0, $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi58$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre57$i$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0;
 var $$sum$i14$i = 0, $$sum$i15$i = 0, $$sum$i18$i = 0, $$sum$i21$i = 0, $$sum$i2334 = 0, $$sum$i32 = 0, $$sum$i35 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i16$i = 0, $$sum1$i22$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum10$pre$i$i = 0, $$sum107$i = 0, $$sum108$i = 0, $$sum109$i = 0;
 var $$sum11$i = 0, $$sum11$i$i = 0, $$sum11$i24$i = 0, $$sum110$i = 0, $$sum111$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum116$i = 0, $$sum117$i = 0, $$sum118$i = 0, $$sum119$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum120$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0;
 var $$sum14$pre$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0, $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i17$i = 0, $$sum2$i19$i = 0, $$sum2$i23$i = 0, $$sum2$pre$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0;
 var $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum26$pre$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i$i = 0, $$sum3$i27 = 0, $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0;
 var $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0, $$sum8$pre = 0, $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0;
 var $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0;
 var $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0;
 var $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0;
 var $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0;
 var $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0;
 var $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0;
 var $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
 var $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0;
 var $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0;
 var $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0;
 var $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0;
 var $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0;
 var $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0;
 var $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0;
 var $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0;
 var $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0;
 var $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0;
 var $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0;
 var $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0;
 var $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0;
 var $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0;
 var $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0;
 var $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0;
 var $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0;
 var $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0;
 var $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0;
 var $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0;
 var $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0;
 var $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0;
 var $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0;
 var $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0;
 var $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0;
 var $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0;
 var $I1$0$c$i$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$025$i = 0, $K2$014$i$i = 0, $K8$052$i$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i18 = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i17 = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i28$i = 0, $T$013$i$i = 0;
 var $T$024$i = 0, $T$051$i$i = 0, $br$0$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0, $notlhs$i = 0, $notrhs$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i29 = 0, $or$cond1$i = 0, $or$cond10$i = 0, $or$cond19$i = 0, $or$cond2$i = 0;
 var $or$cond49$i = 0, $or$cond5$i = 0, $or$cond6$i = 0, $or$cond8$not$i = 0, $or$cond9$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i15 = 0, $rsize$1$i = 0, $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$329$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$075$i = 0, $sp$168$i = 0, $ssize$0$$i = 0;
 var $ssize$0$i = 0, $ssize$1$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0, $t$2$v$3$i = 0, $t$228$i = 0, $tbase$0$i = 0, $tbase$247$i = 0, $tsize$0$i = 0, $tsize$0323841$i = 0, $tsize$1$i = 0, $tsize$246$i = 0, $v$0$i = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0;
 var $v$330$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   if ($1) {
    $5 = 16;
   } else {
    $2 = (($bytes) + 11)|0;
    $3 = $2 & -8;
    $5 = $3;
   }
   $4 = $5 >>> 3;
   $6 = HEAP32[285464>>2]|0;
   $7 = $6 >>> $4;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($4))|0;
    $13 = $12 << 1;
    $14 = ((285464 + ($13<<2)|0) + 40|0);
    $$sum10 = (($13) + 2)|0;
    $15 = ((285464 + ($$sum10<<2)|0) + 40|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($16) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[285464>>2] = $22;
     } else {
      $23 = HEAP32[((285464 + 16|0))>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = (($18) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = (($16) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    STACKTOP = sp;return ($mem$0|0);
   }
   $34 = HEAP32[((285464 + 8|0))>>2]|0;
   $35 = ($5>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $4;
     $38 = 2 << $4;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = ((285464 + ($65<<2)|0) + 40|0);
     $$sum4 = (($65) + 2)|0;
     $67 = ((285464 + ($$sum4<<2)|0) + 40|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = (($68) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[285464>>2] = $74;
      } else {
       $75 = HEAP32[((285464 + 16|0))>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = (($70) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($5))|0;
     $82 = $5 | 3;
     $83 = (($68) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($5)|0);
     $85 = $81 | 1;
     $$sum56 = $5 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $88 = HEAP32[((285464 + 8|0))>>2]|0;
     $89 = ($88|0)==(0);
     if (!($89)) {
      $90 = HEAP32[((285464 + 20|0))>>2]|0;
      $91 = $88 >>> 3;
      $92 = $91 << 1;
      $93 = ((285464 + ($92<<2)|0) + 40|0);
      $94 = HEAP32[285464>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[285464>>2] = $98;
       $$sum8$pre = (($92) + 2)|0;
       $$pre = ((285464 + ($$sum8$pre<<2)|0) + 40|0);
       $$pre$phiZ2D = $$pre;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = ((285464 + ($$sum9<<2)|0) + 40|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[((285464 + 16|0))>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = (($F4$0) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = (($90) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = (($90) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[((285464 + 8|0))>>2] = $81;
     HEAP32[((285464 + 20|0))>>2] = $84;
     $mem$0 = $69;
     STACKTOP = sp;return ($mem$0|0);
    }
    $106 = HEAP32[((285464 + 4|0))>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $5;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = ((285464 + ($130<<2)|0) + 304|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = (($132) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($5))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = (($t$0$i) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = (($t$0$i) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = (($144) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($5))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[((285464 + 16|0))>>2]|0;
     $150 = ($v$0$i>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i) + ($5)|0);
     $152 = ($v$0$i>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = (($v$0$i) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = (($v$0$i) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i|0);
     do {
      if ($157) {
       $167 = (($v$0$i) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = (($v$0$i) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $171;$RP$0$i = $170;
        }
       } else {
        $R$0$i = $168;$RP$0$i = $167;
       }
       while(1) {
        $173 = (($R$0$i) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if (!($175)) {
         $R$0$i = $174;$RP$0$i = $173;
         continue;
        }
        $176 = (($R$0$i) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         break;
        } else {
         $R$0$i = $177;$RP$0$i = $176;
        }
       }
       $179 = ($RP$0$i>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i>>2] = 0;
        $R$1$i = $R$0$i;
        break;
       }
      } else {
       $158 = (($v$0$i) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = (($159) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = (($156) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = (($v$0$i) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ((285464 + ($182<<2)|0) + 304|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[((285464 + 4|0))>>2]|0;
         $189 = $188 & $187;
         HEAP32[((285464 + 4|0))>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[((285464 + 16|0))>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = (($154) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = (($154) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[((285464 + 16|0))>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = (($R$1$i) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = (($v$0$i) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = HEAP32[((285464 + 16|0))>>2]|0;
         $204 = ($201>>>0)<($203>>>0);
         if ($204) {
          _abort();
          // unreachable;
         } else {
          $205 = (($R$1$i) + 16|0);
          HEAP32[$205>>2] = $201;
          $206 = (($201) + 24|0);
          HEAP32[$206>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $207 = (($v$0$i) + 20|0);
       $208 = HEAP32[$207>>2]|0;
       $209 = ($208|0)==(0|0);
       if (!($209)) {
        $210 = HEAP32[((285464 + 16|0))>>2]|0;
        $211 = ($208>>>0)<($210>>>0);
        if ($211) {
         _abort();
         // unreachable;
        } else {
         $212 = (($R$1$i) + 20|0);
         HEAP32[$212>>2] = $208;
         $213 = (($208) + 24|0);
         HEAP32[$213>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $214 = ($rsize$0$i>>>0)<(16);
     if ($214) {
      $215 = (($rsize$0$i) + ($5))|0;
      $216 = $215 | 3;
      $217 = (($v$0$i) + 4|0);
      HEAP32[$217>>2] = $216;
      $$sum4$i = (($215) + 4)|0;
      $218 = (($v$0$i) + ($$sum4$i)|0);
      $219 = HEAP32[$218>>2]|0;
      $220 = $219 | 1;
      HEAP32[$218>>2] = $220;
     } else {
      $221 = $5 | 3;
      $222 = (($v$0$i) + 4|0);
      HEAP32[$222>>2] = $221;
      $223 = $rsize$0$i | 1;
      $$sum$i35 = $5 | 4;
      $224 = (($v$0$i) + ($$sum$i35)|0);
      HEAP32[$224>>2] = $223;
      $$sum1$i = (($rsize$0$i) + ($5))|0;
      $225 = (($v$0$i) + ($$sum1$i)|0);
      HEAP32[$225>>2] = $rsize$0$i;
      $226 = HEAP32[((285464 + 8|0))>>2]|0;
      $227 = ($226|0)==(0);
      if (!($227)) {
       $228 = HEAP32[((285464 + 20|0))>>2]|0;
       $229 = $226 >>> 3;
       $230 = $229 << 1;
       $231 = ((285464 + ($230<<2)|0) + 40|0);
       $232 = HEAP32[285464>>2]|0;
       $233 = 1 << $229;
       $234 = $232 & $233;
       $235 = ($234|0)==(0);
       if ($235) {
        $236 = $232 | $233;
        HEAP32[285464>>2] = $236;
        $$sum2$pre$i = (($230) + 2)|0;
        $$pre$i = ((285464 + ($$sum2$pre$i<<2)|0) + 40|0);
        $$pre$phi$iZ2D = $$pre$i;$F1$0$i = $231;
       } else {
        $$sum3$i = (($230) + 2)|0;
        $237 = ((285464 + ($$sum3$i<<2)|0) + 40|0);
        $238 = HEAP32[$237>>2]|0;
        $239 = HEAP32[((285464 + 16|0))>>2]|0;
        $240 = ($238>>>0)<($239>>>0);
        if ($240) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $237;$F1$0$i = $238;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $228;
       $241 = (($F1$0$i) + 12|0);
       HEAP32[$241>>2] = $228;
       $242 = (($228) + 8|0);
       HEAP32[$242>>2] = $F1$0$i;
       $243 = (($228) + 12|0);
       HEAP32[$243>>2] = $231;
      }
      HEAP32[((285464 + 8|0))>>2] = $rsize$0$i;
      HEAP32[((285464 + 20|0))>>2] = $151;
     }
     $244 = (($v$0$i) + 8|0);
     $mem$0 = $244;
     STACKTOP = sp;return ($mem$0|0);
    }
   } else {
    $nb$0 = $5;
   }
  } else {
   $245 = ($bytes>>>0)>(4294967231);
   if ($245) {
    $nb$0 = -1;
   } else {
    $246 = (($bytes) + 11)|0;
    $247 = $246 & -8;
    $248 = HEAP32[((285464 + 4|0))>>2]|0;
    $249 = ($248|0)==(0);
    if ($249) {
     $nb$0 = $247;
    } else {
     $250 = (0 - ($247))|0;
     $251 = $246 >>> 8;
     $252 = ($251|0)==(0);
     if ($252) {
      $idx$0$i = 0;
     } else {
      $253 = ($247>>>0)>(16777215);
      if ($253) {
       $idx$0$i = 31;
      } else {
       $254 = (($251) + 1048320)|0;
       $255 = $254 >>> 16;
       $256 = $255 & 8;
       $257 = $251 << $256;
       $258 = (($257) + 520192)|0;
       $259 = $258 >>> 16;
       $260 = $259 & 4;
       $261 = $260 | $256;
       $262 = $257 << $260;
       $263 = (($262) + 245760)|0;
       $264 = $263 >>> 16;
       $265 = $264 & 2;
       $266 = $261 | $265;
       $267 = (14 - ($266))|0;
       $268 = $262 << $265;
       $269 = $268 >>> 15;
       $270 = (($267) + ($269))|0;
       $271 = $270 << 1;
       $272 = (($270) + 7)|0;
       $273 = $247 >>> $272;
       $274 = $273 & 1;
       $275 = $274 | $271;
       $idx$0$i = $275;
      }
     }
     $276 = ((285464 + ($idx$0$i<<2)|0) + 304|0);
     $277 = HEAP32[$276>>2]|0;
     $278 = ($277|0)==(0|0);
     L9: do {
      if ($278) {
       $rsize$2$i = $250;$t$1$i = 0;$v$2$i = 0;
      } else {
       $279 = ($idx$0$i|0)==(31);
       if ($279) {
        $283 = 0;
       } else {
        $280 = $idx$0$i >>> 1;
        $281 = (25 - ($280))|0;
        $283 = $281;
       }
       $282 = $247 << $283;
       $rsize$0$i15 = $250;$rst$0$i = 0;$sizebits$0$i = $282;$t$0$i14 = $277;$v$0$i16 = 0;
       while(1) {
        $284 = (($t$0$i14) + 4|0);
        $285 = HEAP32[$284>>2]|0;
        $286 = $285 & -8;
        $287 = (($286) - ($247))|0;
        $288 = ($287>>>0)<($rsize$0$i15>>>0);
        if ($288) {
         $289 = ($286|0)==($247|0);
         if ($289) {
          $rsize$2$i = $287;$t$1$i = $t$0$i14;$v$2$i = $t$0$i14;
          break L9;
         } else {
          $rsize$1$i = $287;$v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
        }
        $290 = (($t$0$i14) + 20|0);
        $291 = HEAP32[$290>>2]|0;
        $292 = $sizebits$0$i >>> 31;
        $293 = ((($t$0$i14) + ($292<<2)|0) + 16|0);
        $294 = HEAP32[$293>>2]|0;
        $295 = ($291|0)==(0|0);
        $296 = ($291|0)==($294|0);
        $or$cond$i = $295 | $296;
        $rst$1$i = $or$cond$i ? $rst$0$i : $291;
        $297 = ($294|0)==(0|0);
        $298 = $sizebits$0$i << 1;
        if ($297) {
         $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $298;$t$0$i14 = $294;$v$0$i16 = $v$1$i;
        }
       }
      }
     } while(0);
     $299 = ($t$1$i|0)==(0|0);
     $300 = ($v$2$i|0)==(0|0);
     $or$cond19$i = $299 & $300;
     if ($or$cond19$i) {
      $301 = 2 << $idx$0$i;
      $302 = (0 - ($301))|0;
      $303 = $301 | $302;
      $304 = $248 & $303;
      $305 = ($304|0)==(0);
      if ($305) {
       $nb$0 = $247;
       break;
      }
      $306 = (0 - ($304))|0;
      $307 = $304 & $306;
      $308 = (($307) + -1)|0;
      $309 = $308 >>> 12;
      $310 = $309 & 16;
      $311 = $308 >>> $310;
      $312 = $311 >>> 5;
      $313 = $312 & 8;
      $314 = $313 | $310;
      $315 = $311 >>> $313;
      $316 = $315 >>> 2;
      $317 = $316 & 4;
      $318 = $314 | $317;
      $319 = $315 >>> $317;
      $320 = $319 >>> 1;
      $321 = $320 & 2;
      $322 = $318 | $321;
      $323 = $319 >>> $321;
      $324 = $323 >>> 1;
      $325 = $324 & 1;
      $326 = $322 | $325;
      $327 = $323 >>> $325;
      $328 = (($326) + ($327))|0;
      $329 = ((285464 + ($328<<2)|0) + 304|0);
      $330 = HEAP32[$329>>2]|0;
      $t$2$ph$i = $330;
     } else {
      $t$2$ph$i = $t$1$i;
     }
     $331 = ($t$2$ph$i|0)==(0|0);
     if ($331) {
      $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$2$i;
     } else {
      $rsize$329$i = $rsize$2$i;$t$228$i = $t$2$ph$i;$v$330$i = $v$2$i;
      while(1) {
       $332 = (($t$228$i) + 4|0);
       $333 = HEAP32[$332>>2]|0;
       $334 = $333 & -8;
       $335 = (($334) - ($247))|0;
       $336 = ($335>>>0)<($rsize$329$i>>>0);
       $$rsize$3$i = $336 ? $335 : $rsize$329$i;
       $t$2$v$3$i = $336 ? $t$228$i : $v$330$i;
       $337 = (($t$228$i) + 16|0);
       $338 = HEAP32[$337>>2]|0;
       $339 = ($338|0)==(0|0);
       if (!($339)) {
        $rsize$329$i = $$rsize$3$i;$t$228$i = $338;$v$330$i = $t$2$v$3$i;
        continue;
       }
       $340 = (($t$228$i) + 20|0);
       $341 = HEAP32[$340>>2]|0;
       $342 = ($341|0)==(0|0);
       if ($342) {
        $rsize$3$lcssa$i = $$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$329$i = $$rsize$3$i;$t$228$i = $341;$v$330$i = $t$2$v$3$i;
       }
      }
     }
     $343 = ($v$3$lcssa$i|0)==(0|0);
     if ($343) {
      $nb$0 = $247;
     } else {
      $344 = HEAP32[((285464 + 8|0))>>2]|0;
      $345 = (($344) - ($247))|0;
      $346 = ($rsize$3$lcssa$i>>>0)<($345>>>0);
      if ($346) {
       $347 = HEAP32[((285464 + 16|0))>>2]|0;
       $348 = ($v$3$lcssa$i>>>0)<($347>>>0);
       if ($348) {
        _abort();
        // unreachable;
       }
       $349 = (($v$3$lcssa$i) + ($247)|0);
       $350 = ($v$3$lcssa$i>>>0)<($349>>>0);
       if (!($350)) {
        _abort();
        // unreachable;
       }
       $351 = (($v$3$lcssa$i) + 24|0);
       $352 = HEAP32[$351>>2]|0;
       $353 = (($v$3$lcssa$i) + 12|0);
       $354 = HEAP32[$353>>2]|0;
       $355 = ($354|0)==($v$3$lcssa$i|0);
       do {
        if ($355) {
         $365 = (($v$3$lcssa$i) + 20|0);
         $366 = HEAP32[$365>>2]|0;
         $367 = ($366|0)==(0|0);
         if ($367) {
          $368 = (($v$3$lcssa$i) + 16|0);
          $369 = HEAP32[$368>>2]|0;
          $370 = ($369|0)==(0|0);
          if ($370) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18 = $369;$RP$0$i17 = $368;
          }
         } else {
          $R$0$i18 = $366;$RP$0$i17 = $365;
         }
         while(1) {
          $371 = (($R$0$i18) + 20|0);
          $372 = HEAP32[$371>>2]|0;
          $373 = ($372|0)==(0|0);
          if (!($373)) {
           $R$0$i18 = $372;$RP$0$i17 = $371;
           continue;
          }
          $374 = (($R$0$i18) + 16|0);
          $375 = HEAP32[$374>>2]|0;
          $376 = ($375|0)==(0|0);
          if ($376) {
           break;
          } else {
           $R$0$i18 = $375;$RP$0$i17 = $374;
          }
         }
         $377 = ($RP$0$i17>>>0)<($347>>>0);
         if ($377) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17>>2] = 0;
          $R$1$i20 = $R$0$i18;
          break;
         }
        } else {
         $356 = (($v$3$lcssa$i) + 8|0);
         $357 = HEAP32[$356>>2]|0;
         $358 = ($357>>>0)<($347>>>0);
         if ($358) {
          _abort();
          // unreachable;
         }
         $359 = (($357) + 12|0);
         $360 = HEAP32[$359>>2]|0;
         $361 = ($360|0)==($v$3$lcssa$i|0);
         if (!($361)) {
          _abort();
          // unreachable;
         }
         $362 = (($354) + 8|0);
         $363 = HEAP32[$362>>2]|0;
         $364 = ($363|0)==($v$3$lcssa$i|0);
         if ($364) {
          HEAP32[$359>>2] = $354;
          HEAP32[$362>>2] = $357;
          $R$1$i20 = $354;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $378 = ($352|0)==(0|0);
       do {
        if (!($378)) {
         $379 = (($v$3$lcssa$i) + 28|0);
         $380 = HEAP32[$379>>2]|0;
         $381 = ((285464 + ($380<<2)|0) + 304|0);
         $382 = HEAP32[$381>>2]|0;
         $383 = ($v$3$lcssa$i|0)==($382|0);
         if ($383) {
          HEAP32[$381>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $384 = 1 << $380;
           $385 = $384 ^ -1;
           $386 = HEAP32[((285464 + 4|0))>>2]|0;
           $387 = $386 & $385;
           HEAP32[((285464 + 4|0))>>2] = $387;
           break;
          }
         } else {
          $388 = HEAP32[((285464 + 16|0))>>2]|0;
          $389 = ($352>>>0)<($388>>>0);
          if ($389) {
           _abort();
           // unreachable;
          }
          $390 = (($352) + 16|0);
          $391 = HEAP32[$390>>2]|0;
          $392 = ($391|0)==($v$3$lcssa$i|0);
          if ($392) {
           HEAP32[$390>>2] = $R$1$i20;
          } else {
           $393 = (($352) + 20|0);
           HEAP32[$393>>2] = $R$1$i20;
          }
          $394 = ($R$1$i20|0)==(0|0);
          if ($394) {
           break;
          }
         }
         $395 = HEAP32[((285464 + 16|0))>>2]|0;
         $396 = ($R$1$i20>>>0)<($395>>>0);
         if ($396) {
          _abort();
          // unreachable;
         }
         $397 = (($R$1$i20) + 24|0);
         HEAP32[$397>>2] = $352;
         $398 = (($v$3$lcssa$i) + 16|0);
         $399 = HEAP32[$398>>2]|0;
         $400 = ($399|0)==(0|0);
         do {
          if (!($400)) {
           $401 = HEAP32[((285464 + 16|0))>>2]|0;
           $402 = ($399>>>0)<($401>>>0);
           if ($402) {
            _abort();
            // unreachable;
           } else {
            $403 = (($R$1$i20) + 16|0);
            HEAP32[$403>>2] = $399;
            $404 = (($399) + 24|0);
            HEAP32[$404>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $405 = (($v$3$lcssa$i) + 20|0);
         $406 = HEAP32[$405>>2]|0;
         $407 = ($406|0)==(0|0);
         if (!($407)) {
          $408 = HEAP32[((285464 + 16|0))>>2]|0;
          $409 = ($406>>>0)<($408>>>0);
          if ($409) {
           _abort();
           // unreachable;
          } else {
           $410 = (($R$1$i20) + 20|0);
           HEAP32[$410>>2] = $406;
           $411 = (($406) + 24|0);
           HEAP32[$411>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $412 = ($rsize$3$lcssa$i>>>0)<(16);
       L87: do {
        if ($412) {
         $413 = (($rsize$3$lcssa$i) + ($247))|0;
         $414 = $413 | 3;
         $415 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$415>>2] = $414;
         $$sum18$i = (($413) + 4)|0;
         $416 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $417 = HEAP32[$416>>2]|0;
         $418 = $417 | 1;
         HEAP32[$416>>2] = $418;
        } else {
         $419 = $247 | 3;
         $420 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$420>>2] = $419;
         $421 = $rsize$3$lcssa$i | 1;
         $$sum$i2334 = $247 | 4;
         $422 = (($v$3$lcssa$i) + ($$sum$i2334)|0);
         HEAP32[$422>>2] = $421;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($247))|0;
         $423 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$423>>2] = $rsize$3$lcssa$i;
         $424 = $rsize$3$lcssa$i >>> 3;
         $425 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($425) {
          $426 = $424 << 1;
          $427 = ((285464 + ($426<<2)|0) + 40|0);
          $428 = HEAP32[285464>>2]|0;
          $429 = 1 << $424;
          $430 = $428 & $429;
          $431 = ($430|0)==(0);
          do {
           if ($431) {
            $432 = $428 | $429;
            HEAP32[285464>>2] = $432;
            $$sum14$pre$i = (($426) + 2)|0;
            $$pre$i25 = ((285464 + ($$sum14$pre$i<<2)|0) + 40|0);
            $$pre$phi$i26Z2D = $$pre$i25;$F5$0$i = $427;
           } else {
            $$sum17$i = (($426) + 2)|0;
            $433 = ((285464 + ($$sum17$i<<2)|0) + 40|0);
            $434 = HEAP32[$433>>2]|0;
            $435 = HEAP32[((285464 + 16|0))>>2]|0;
            $436 = ($434>>>0)<($435>>>0);
            if (!($436)) {
             $$pre$phi$i26Z2D = $433;$F5$0$i = $434;
             break;
            }
            _abort();
            // unreachable;
           }
          } while(0);
          HEAP32[$$pre$phi$i26Z2D>>2] = $349;
          $437 = (($F5$0$i) + 12|0);
          HEAP32[$437>>2] = $349;
          $$sum15$i = (($247) + 8)|0;
          $438 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$438>>2] = $F5$0$i;
          $$sum16$i = (($247) + 12)|0;
          $439 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$439>>2] = $427;
          break;
         }
         $440 = $rsize$3$lcssa$i >>> 8;
         $441 = ($440|0)==(0);
         if ($441) {
          $I7$0$i = 0;
         } else {
          $442 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($442) {
           $I7$0$i = 31;
          } else {
           $443 = (($440) + 1048320)|0;
           $444 = $443 >>> 16;
           $445 = $444 & 8;
           $446 = $440 << $445;
           $447 = (($446) + 520192)|0;
           $448 = $447 >>> 16;
           $449 = $448 & 4;
           $450 = $449 | $445;
           $451 = $446 << $449;
           $452 = (($451) + 245760)|0;
           $453 = $452 >>> 16;
           $454 = $453 & 2;
           $455 = $450 | $454;
           $456 = (14 - ($455))|0;
           $457 = $451 << $454;
           $458 = $457 >>> 15;
           $459 = (($456) + ($458))|0;
           $460 = $459 << 1;
           $461 = (($459) + 7)|0;
           $462 = $rsize$3$lcssa$i >>> $461;
           $463 = $462 & 1;
           $464 = $463 | $460;
           $I7$0$i = $464;
          }
         }
         $465 = ((285464 + ($I7$0$i<<2)|0) + 304|0);
         $$sum2$i = (($247) + 28)|0;
         $466 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$466>>2] = $I7$0$i;
         $$sum3$i27 = (($247) + 16)|0;
         $467 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($247) + 20)|0;
         $468 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$468>>2] = 0;
         HEAP32[$467>>2] = 0;
         $469 = HEAP32[((285464 + 4|0))>>2]|0;
         $470 = 1 << $I7$0$i;
         $471 = $469 & $470;
         $472 = ($471|0)==(0);
         if ($472) {
          $473 = $469 | $470;
          HEAP32[((285464 + 4|0))>>2] = $473;
          HEAP32[$465>>2] = $349;
          $$sum5$i = (($247) + 24)|0;
          $474 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$474>>2] = $465;
          $$sum6$i = (($247) + 12)|0;
          $475 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$475>>2] = $349;
          $$sum7$i = (($247) + 8)|0;
          $476 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$476>>2] = $349;
          break;
         }
         $477 = HEAP32[$465>>2]|0;
         $478 = ($I7$0$i|0)==(31);
         if ($478) {
          $486 = 0;
         } else {
          $479 = $I7$0$i >>> 1;
          $480 = (25 - ($479))|0;
          $486 = $480;
         }
         $481 = (($477) + 4|0);
         $482 = HEAP32[$481>>2]|0;
         $483 = $482 & -8;
         $484 = ($483|0)==($rsize$3$lcssa$i|0);
         L107: do {
          if ($484) {
           $T$0$lcssa$i = $477;
          } else {
           $485 = $rsize$3$lcssa$i << $486;
           $K12$025$i = $485;$T$024$i = $477;
           while(1) {
            $493 = $K12$025$i >>> 31;
            $494 = ((($T$024$i) + ($493<<2)|0) + 16|0);
            $489 = HEAP32[$494>>2]|0;
            $495 = ($489|0)==(0|0);
            if ($495) {
             break;
            }
            $487 = $K12$025$i << 1;
            $488 = (($489) + 4|0);
            $490 = HEAP32[$488>>2]|0;
            $491 = $490 & -8;
            $492 = ($491|0)==($rsize$3$lcssa$i|0);
            if ($492) {
             $T$0$lcssa$i = $489;
             break L107;
            } else {
             $K12$025$i = $487;$T$024$i = $489;
            }
           }
           $496 = HEAP32[((285464 + 16|0))>>2]|0;
           $497 = ($494>>>0)<($496>>>0);
           if ($497) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$494>>2] = $349;
            $$sum11$i = (($247) + 24)|0;
            $498 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$498>>2] = $T$024$i;
            $$sum12$i = (($247) + 12)|0;
            $499 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$499>>2] = $349;
            $$sum13$i = (($247) + 8)|0;
            $500 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$500>>2] = $349;
            break L87;
           }
          }
         } while(0);
         $501 = (($T$0$lcssa$i) + 8|0);
         $502 = HEAP32[$501>>2]|0;
         $503 = HEAP32[((285464 + 16|0))>>2]|0;
         $504 = ($T$0$lcssa$i>>>0)<($503>>>0);
         if ($504) {
          _abort();
          // unreachable;
         }
         $505 = ($502>>>0)<($503>>>0);
         if ($505) {
          _abort();
          // unreachable;
         } else {
          $506 = (($502) + 12|0);
          HEAP32[$506>>2] = $349;
          HEAP32[$501>>2] = $349;
          $$sum8$i = (($247) + 8)|0;
          $507 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$507>>2] = $502;
          $$sum9$i = (($247) + 12)|0;
          $508 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$508>>2] = $T$0$lcssa$i;
          $$sum10$i = (($247) + 24)|0;
          $509 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$509>>2] = 0;
          break;
         }
        }
       } while(0);
       $510 = (($v$3$lcssa$i) + 8|0);
       $mem$0 = $510;
       STACKTOP = sp;return ($mem$0|0);
      } else {
       $nb$0 = $247;
      }
     }
    }
   }
  }
 } while(0);
 $511 = HEAP32[((285464 + 8|0))>>2]|0;
 $512 = ($nb$0>>>0)>($511>>>0);
 if (!($512)) {
  $513 = (($511) - ($nb$0))|0;
  $514 = HEAP32[((285464 + 20|0))>>2]|0;
  $515 = ($513>>>0)>(15);
  if ($515) {
   $516 = (($514) + ($nb$0)|0);
   HEAP32[((285464 + 20|0))>>2] = $516;
   HEAP32[((285464 + 8|0))>>2] = $513;
   $517 = $513 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $518 = (($514) + ($$sum2)|0);
   HEAP32[$518>>2] = $517;
   $519 = (($514) + ($511)|0);
   HEAP32[$519>>2] = $513;
   $520 = $nb$0 | 3;
   $521 = (($514) + 4|0);
   HEAP32[$521>>2] = $520;
  } else {
   HEAP32[((285464 + 8|0))>>2] = 0;
   HEAP32[((285464 + 20|0))>>2] = 0;
   $522 = $511 | 3;
   $523 = (($514) + 4|0);
   HEAP32[$523>>2] = $522;
   $$sum1 = (($511) + 4)|0;
   $524 = (($514) + ($$sum1)|0);
   $525 = HEAP32[$524>>2]|0;
   $526 = $525 | 1;
   HEAP32[$524>>2] = $526;
  }
  $527 = (($514) + 8|0);
  $mem$0 = $527;
  STACKTOP = sp;return ($mem$0|0);
 }
 $528 = HEAP32[((285464 + 12|0))>>2]|0;
 $529 = ($nb$0>>>0)<($528>>>0);
 if ($529) {
  $530 = (($528) - ($nb$0))|0;
  HEAP32[((285464 + 12|0))>>2] = $530;
  $531 = HEAP32[((285464 + 24|0))>>2]|0;
  $532 = (($531) + ($nb$0)|0);
  HEAP32[((285464 + 24|0))>>2] = $532;
  $533 = $530 | 1;
  $$sum = (($nb$0) + 4)|0;
  $534 = (($531) + ($$sum)|0);
  HEAP32[$534>>2] = $533;
  $535 = $nb$0 | 3;
  $536 = (($531) + 4|0);
  HEAP32[$536>>2] = $535;
  $537 = (($531) + 8|0);
  $mem$0 = $537;
  STACKTOP = sp;return ($mem$0|0);
 }
 $538 = HEAP32[285936>>2]|0;
 $539 = ($538|0)==(0);
 do {
  if ($539) {
   $540 = (_sysconf(30)|0);
   $541 = (($540) + -1)|0;
   $542 = $541 & $540;
   $543 = ($542|0)==(0);
   if ($543) {
    HEAP32[((285936 + 8|0))>>2] = $540;
    HEAP32[((285936 + 4|0))>>2] = $540;
    HEAP32[((285936 + 12|0))>>2] = -1;
    HEAP32[((285936 + 16|0))>>2] = -1;
    HEAP32[((285936 + 20|0))>>2] = 0;
    HEAP32[((285464 + 444|0))>>2] = 0;
    $544 = (_time((0|0))|0);
    $545 = $544 & -16;
    $546 = $545 ^ 1431655768;
    HEAP32[285936>>2] = $546;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $547 = (($nb$0) + 48)|0;
 $548 = HEAP32[((285936 + 8|0))>>2]|0;
 $549 = (($nb$0) + 47)|0;
 $550 = (($548) + ($549))|0;
 $551 = (0 - ($548))|0;
 $552 = $550 & $551;
 $553 = ($552>>>0)>($nb$0>>>0);
 if (!($553)) {
  $mem$0 = 0;
  STACKTOP = sp;return ($mem$0|0);
 }
 $554 = HEAP32[((285464 + 440|0))>>2]|0;
 $555 = ($554|0)==(0);
 if (!($555)) {
  $556 = HEAP32[((285464 + 432|0))>>2]|0;
  $557 = (($556) + ($552))|0;
  $558 = ($557>>>0)<=($556>>>0);
  $559 = ($557>>>0)>($554>>>0);
  $or$cond1$i = $558 | $559;
  if ($or$cond1$i) {
   $mem$0 = 0;
   STACKTOP = sp;return ($mem$0|0);
  }
 }
 $560 = HEAP32[((285464 + 444|0))>>2]|0;
 $561 = $560 & 4;
 $562 = ($561|0)==(0);
 L269: do {
  if ($562) {
   $563 = HEAP32[((285464 + 24|0))>>2]|0;
   $564 = ($563|0)==(0|0);
   L271: do {
    if ($564) {
     label = 182;
    } else {
     $sp$0$i$i = ((285464 + 448|0));
     while(1) {
      $565 = HEAP32[$sp$0$i$i>>2]|0;
      $566 = ($565>>>0)>($563>>>0);
      if (!($566)) {
       $567 = (($sp$0$i$i) + 4|0);
       $568 = HEAP32[$567>>2]|0;
       $569 = (($565) + ($568)|0);
       $570 = ($569>>>0)>($563>>>0);
       if ($570) {
        break;
       }
      }
      $571 = (($sp$0$i$i) + 8|0);
      $572 = HEAP32[$571>>2]|0;
      $573 = ($572|0)==(0|0);
      if ($573) {
       label = 182;
       break L271;
      } else {
       $sp$0$i$i = $572;
      }
     }
     $574 = ($sp$0$i$i|0)==(0|0);
     if ($574) {
      label = 182;
     } else {
      $597 = HEAP32[((285464 + 12|0))>>2]|0;
      $598 = (($550) - ($597))|0;
      $599 = $598 & $551;
      $600 = ($599>>>0)<(2147483647);
      if ($600) {
       $601 = (_sbrk(($599|0))|0);
       $602 = HEAP32[$sp$0$i$i>>2]|0;
       $603 = HEAP32[$567>>2]|0;
       $604 = (($602) + ($603)|0);
       $605 = ($601|0)==($604|0);
       $$3$i = $605 ? $599 : 0;
       $$4$i = $605 ? $601 : (-1);
       $br$0$i = $601;$ssize$1$i = $599;$tbase$0$i = $$4$i;$tsize$0$i = $$3$i;
       label = 191;
      } else {
       $tsize$0323841$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 182) {
     $575 = (_sbrk(0)|0);
     $576 = ($575|0)==((-1)|0);
     if ($576) {
      $tsize$0323841$i = 0;
     } else {
      $577 = $575;
      $578 = HEAP32[((285936 + 4|0))>>2]|0;
      $579 = (($578) + -1)|0;
      $580 = $579 & $577;
      $581 = ($580|0)==(0);
      if ($581) {
       $ssize$0$i = $552;
      } else {
       $582 = (($579) + ($577))|0;
       $583 = (0 - ($578))|0;
       $584 = $582 & $583;
       $585 = (($552) - ($577))|0;
       $586 = (($585) + ($584))|0;
       $ssize$0$i = $586;
      }
      $587 = HEAP32[((285464 + 432|0))>>2]|0;
      $588 = (($587) + ($ssize$0$i))|0;
      $589 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $590 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i29 = $589 & $590;
      if ($or$cond$i29) {
       $591 = HEAP32[((285464 + 440|0))>>2]|0;
       $592 = ($591|0)==(0);
       if (!($592)) {
        $593 = ($588>>>0)<=($587>>>0);
        $594 = ($588>>>0)>($591>>>0);
        $or$cond2$i = $593 | $594;
        if ($or$cond2$i) {
         $tsize$0323841$i = 0;
         break;
        }
       }
       $595 = (_sbrk(($ssize$0$i|0))|0);
       $596 = ($595|0)==($575|0);
       $ssize$0$$i = $596 ? $ssize$0$i : 0;
       $$$i = $596 ? $575 : (-1);
       $br$0$i = $595;$ssize$1$i = $ssize$0$i;$tbase$0$i = $$$i;$tsize$0$i = $ssize$0$$i;
       label = 191;
      } else {
       $tsize$0323841$i = 0;
      }
     }
    }
   } while(0);
   L291: do {
    if ((label|0) == 191) {
     $606 = (0 - ($ssize$1$i))|0;
     $607 = ($tbase$0$i|0)==((-1)|0);
     if (!($607)) {
      $tbase$247$i = $tbase$0$i;$tsize$246$i = $tsize$0$i;
      label = 202;
      break L269;
     }
     $608 = ($br$0$i|0)!=((-1)|0);
     $609 = ($ssize$1$i>>>0)<(2147483647);
     $or$cond5$i = $608 & $609;
     $610 = ($ssize$1$i>>>0)<($547>>>0);
     $or$cond6$i = $or$cond5$i & $610;
     do {
      if ($or$cond6$i) {
       $611 = HEAP32[((285936 + 8|0))>>2]|0;
       $612 = (($549) - ($ssize$1$i))|0;
       $613 = (($612) + ($611))|0;
       $614 = (0 - ($611))|0;
       $615 = $613 & $614;
       $616 = ($615>>>0)<(2147483647);
       if ($616) {
        $617 = (_sbrk(($615|0))|0);
        $618 = ($617|0)==((-1)|0);
        if ($618) {
         (_sbrk(($606|0))|0);
         $tsize$0323841$i = $tsize$0$i;
         break L291;
        } else {
         $619 = (($615) + ($ssize$1$i))|0;
         $ssize$2$i = $619;
         break;
        }
       } else {
        $ssize$2$i = $ssize$1$i;
       }
      } else {
       $ssize$2$i = $ssize$1$i;
      }
     } while(0);
     $620 = ($br$0$i|0)==((-1)|0);
     if ($620) {
      $tsize$0323841$i = $tsize$0$i;
     } else {
      $tbase$247$i = $br$0$i;$tsize$246$i = $ssize$2$i;
      label = 202;
      break L269;
     }
    }
   } while(0);
   $621 = HEAP32[((285464 + 444|0))>>2]|0;
   $622 = $621 | 4;
   HEAP32[((285464 + 444|0))>>2] = $622;
   $tsize$1$i = $tsize$0323841$i;
   label = 199;
  } else {
   $tsize$1$i = 0;
   label = 199;
  }
 } while(0);
 if ((label|0) == 199) {
  $623 = ($552>>>0)<(2147483647);
  if ($623) {
   $624 = (_sbrk(($552|0))|0);
   $625 = (_sbrk(0)|0);
   $notlhs$i = ($624|0)!=((-1)|0);
   $notrhs$i = ($625|0)!=((-1)|0);
   $or$cond8$not$i = $notrhs$i & $notlhs$i;
   $626 = ($624>>>0)<($625>>>0);
   $or$cond9$i = $or$cond8$not$i & $626;
   if ($or$cond9$i) {
    $627 = $625;
    $628 = $624;
    $629 = (($627) - ($628))|0;
    $630 = (($nb$0) + 40)|0;
    $631 = ($629>>>0)>($630>>>0);
    $$tsize$1$i = $631 ? $629 : $tsize$1$i;
    if ($631) {
     $tbase$247$i = $624;$tsize$246$i = $$tsize$1$i;
     label = 202;
    }
   }
  }
 }
 if ((label|0) == 202) {
  $632 = HEAP32[((285464 + 432|0))>>2]|0;
  $633 = (($632) + ($tsize$246$i))|0;
  HEAP32[((285464 + 432|0))>>2] = $633;
  $634 = HEAP32[((285464 + 436|0))>>2]|0;
  $635 = ($633>>>0)>($634>>>0);
  if ($635) {
   HEAP32[((285464 + 436|0))>>2] = $633;
  }
  $636 = HEAP32[((285464 + 24|0))>>2]|0;
  $637 = ($636|0)==(0|0);
  L311: do {
   if ($637) {
    $638 = HEAP32[((285464 + 16|0))>>2]|0;
    $639 = ($638|0)==(0|0);
    $640 = ($tbase$247$i>>>0)<($638>>>0);
    $or$cond10$i = $639 | $640;
    if ($or$cond10$i) {
     HEAP32[((285464 + 16|0))>>2] = $tbase$247$i;
    }
    HEAP32[((285464 + 448|0))>>2] = $tbase$247$i;
    HEAP32[((285464 + 452|0))>>2] = $tsize$246$i;
    HEAP32[((285464 + 460|0))>>2] = 0;
    $641 = HEAP32[285936>>2]|0;
    HEAP32[((285464 + 36|0))>>2] = $641;
    HEAP32[((285464 + 32|0))>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $642 = $i$02$i$i << 1;
     $643 = ((285464 + ($642<<2)|0) + 40|0);
     $$sum$i$i = (($642) + 3)|0;
     $644 = ((285464 + ($$sum$i$i<<2)|0) + 40|0);
     HEAP32[$644>>2] = $643;
     $$sum1$i$i = (($642) + 2)|0;
     $645 = ((285464 + ($$sum1$i$i<<2)|0) + 40|0);
     HEAP32[$645>>2] = $643;
     $646 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($646|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $646;
     }
    }
    $647 = (($tsize$246$i) + -40)|0;
    $648 = (($tbase$247$i) + 8|0);
    $649 = $648;
    $650 = $649 & 7;
    $651 = ($650|0)==(0);
    if ($651) {
     $655 = 0;
    } else {
     $652 = (0 - ($649))|0;
     $653 = $652 & 7;
     $655 = $653;
    }
    $654 = (($tbase$247$i) + ($655)|0);
    $656 = (($647) - ($655))|0;
    HEAP32[((285464 + 24|0))>>2] = $654;
    HEAP32[((285464 + 12|0))>>2] = $656;
    $657 = $656 | 1;
    $$sum$i14$i = (($655) + 4)|0;
    $658 = (($tbase$247$i) + ($$sum$i14$i)|0);
    HEAP32[$658>>2] = $657;
    $$sum2$i$i = (($tsize$246$i) + -36)|0;
    $659 = (($tbase$247$i) + ($$sum2$i$i)|0);
    HEAP32[$659>>2] = 40;
    $660 = HEAP32[((285936 + 16|0))>>2]|0;
    HEAP32[((285464 + 28|0))>>2] = $660;
   } else {
    $sp$075$i = ((285464 + 448|0));
    while(1) {
     $661 = HEAP32[$sp$075$i>>2]|0;
     $662 = (($sp$075$i) + 4|0);
     $663 = HEAP32[$662>>2]|0;
     $664 = (($661) + ($663)|0);
     $665 = ($tbase$247$i|0)==($664|0);
     if ($665) {
      label = 214;
      break;
     }
     $666 = (($sp$075$i) + 8|0);
     $667 = HEAP32[$666>>2]|0;
     $668 = ($667|0)==(0|0);
     if ($668) {
      break;
     } else {
      $sp$075$i = $667;
     }
    }
    if ((label|0) == 214) {
     $669 = (($sp$075$i) + 12|0);
     $670 = HEAP32[$669>>2]|0;
     $671 = $670 & 8;
     $672 = ($671|0)==(0);
     if ($672) {
      $673 = ($636>>>0)>=($661>>>0);
      $674 = ($636>>>0)<($tbase$247$i>>>0);
      $or$cond49$i = $673 & $674;
      if ($or$cond49$i) {
       $675 = (($663) + ($tsize$246$i))|0;
       HEAP32[$662>>2] = $675;
       $676 = HEAP32[((285464 + 12|0))>>2]|0;
       $677 = (($676) + ($tsize$246$i))|0;
       $678 = (($636) + 8|0);
       $679 = $678;
       $680 = $679 & 7;
       $681 = ($680|0)==(0);
       if ($681) {
        $685 = 0;
       } else {
        $682 = (0 - ($679))|0;
        $683 = $682 & 7;
        $685 = $683;
       }
       $684 = (($636) + ($685)|0);
       $686 = (($677) - ($685))|0;
       HEAP32[((285464 + 24|0))>>2] = $684;
       HEAP32[((285464 + 12|0))>>2] = $686;
       $687 = $686 | 1;
       $$sum$i18$i = (($685) + 4)|0;
       $688 = (($636) + ($$sum$i18$i)|0);
       HEAP32[$688>>2] = $687;
       $$sum2$i19$i = (($677) + 4)|0;
       $689 = (($636) + ($$sum2$i19$i)|0);
       HEAP32[$689>>2] = 40;
       $690 = HEAP32[((285936 + 16|0))>>2]|0;
       HEAP32[((285464 + 28|0))>>2] = $690;
       break;
      }
     }
    }
    $691 = HEAP32[((285464 + 16|0))>>2]|0;
    $692 = ($tbase$247$i>>>0)<($691>>>0);
    if ($692) {
     HEAP32[((285464 + 16|0))>>2] = $tbase$247$i;
    }
    $693 = (($tbase$247$i) + ($tsize$246$i)|0);
    $sp$168$i = ((285464 + 448|0));
    while(1) {
     $694 = HEAP32[$sp$168$i>>2]|0;
     $695 = ($694|0)==($693|0);
     if ($695) {
      label = 224;
      break;
     }
     $696 = (($sp$168$i) + 8|0);
     $697 = HEAP32[$696>>2]|0;
     $698 = ($697|0)==(0|0);
     if ($698) {
      break;
     } else {
      $sp$168$i = $697;
     }
    }
    if ((label|0) == 224) {
     $699 = (($sp$168$i) + 12|0);
     $700 = HEAP32[$699>>2]|0;
     $701 = $700 & 8;
     $702 = ($701|0)==(0);
     if ($702) {
      HEAP32[$sp$168$i>>2] = $tbase$247$i;
      $703 = (($sp$168$i) + 4|0);
      $704 = HEAP32[$703>>2]|0;
      $705 = (($704) + ($tsize$246$i))|0;
      HEAP32[$703>>2] = $705;
      $706 = (($tbase$247$i) + 8|0);
      $707 = $706;
      $708 = $707 & 7;
      $709 = ($708|0)==(0);
      if ($709) {
       $713 = 0;
      } else {
       $710 = (0 - ($707))|0;
       $711 = $710 & 7;
       $713 = $711;
      }
      $712 = (($tbase$247$i) + ($713)|0);
      $$sum107$i = (($tsize$246$i) + 8)|0;
      $714 = (($tbase$247$i) + ($$sum107$i)|0);
      $715 = $714;
      $716 = $715 & 7;
      $717 = ($716|0)==(0);
      if ($717) {
       $720 = 0;
      } else {
       $718 = (0 - ($715))|0;
       $719 = $718 & 7;
       $720 = $719;
      }
      $$sum108$i = (($720) + ($tsize$246$i))|0;
      $721 = (($tbase$247$i) + ($$sum108$i)|0);
      $722 = $721;
      $723 = $712;
      $724 = (($722) - ($723))|0;
      $$sum$i21$i = (($713) + ($nb$0))|0;
      $725 = (($tbase$247$i) + ($$sum$i21$i)|0);
      $726 = (($724) - ($nb$0))|0;
      $727 = $nb$0 | 3;
      $$sum1$i22$i = (($713) + 4)|0;
      $728 = (($tbase$247$i) + ($$sum1$i22$i)|0);
      HEAP32[$728>>2] = $727;
      $729 = HEAP32[((285464 + 24|0))>>2]|0;
      $730 = ($721|0)==($729|0);
      L338: do {
       if ($730) {
        $731 = HEAP32[((285464 + 12|0))>>2]|0;
        $732 = (($731) + ($726))|0;
        HEAP32[((285464 + 12|0))>>2] = $732;
        HEAP32[((285464 + 24|0))>>2] = $725;
        $733 = $732 | 1;
        $$sum42$i$i = (($$sum$i21$i) + 4)|0;
        $734 = (($tbase$247$i) + ($$sum42$i$i)|0);
        HEAP32[$734>>2] = $733;
       } else {
        $735 = HEAP32[((285464 + 20|0))>>2]|0;
        $736 = ($721|0)==($735|0);
        if ($736) {
         $737 = HEAP32[((285464 + 8|0))>>2]|0;
         $738 = (($737) + ($726))|0;
         HEAP32[((285464 + 8|0))>>2] = $738;
         HEAP32[((285464 + 20|0))>>2] = $725;
         $739 = $738 | 1;
         $$sum40$i$i = (($$sum$i21$i) + 4)|0;
         $740 = (($tbase$247$i) + ($$sum40$i$i)|0);
         HEAP32[$740>>2] = $739;
         $$sum41$i$i = (($738) + ($$sum$i21$i))|0;
         $741 = (($tbase$247$i) + ($$sum41$i$i)|0);
         HEAP32[$741>>2] = $738;
         break;
        }
        $$sum2$i23$i = (($tsize$246$i) + 4)|0;
        $$sum109$i = (($$sum2$i23$i) + ($720))|0;
        $742 = (($tbase$247$i) + ($$sum109$i)|0);
        $743 = HEAP32[$742>>2]|0;
        $744 = $743 & 3;
        $745 = ($744|0)==(1);
        if ($745) {
         $746 = $743 & -8;
         $747 = $743 >>> 3;
         $748 = ($743>>>0)<(256);
         L346: do {
          if ($748) {
           $$sum3738$i$i = $720 | 8;
           $$sum119$i = (($$sum3738$i$i) + ($tsize$246$i))|0;
           $749 = (($tbase$247$i) + ($$sum119$i)|0);
           $750 = HEAP32[$749>>2]|0;
           $$sum39$i$i = (($tsize$246$i) + 12)|0;
           $$sum120$i = (($$sum39$i$i) + ($720))|0;
           $751 = (($tbase$247$i) + ($$sum120$i)|0);
           $752 = HEAP32[$751>>2]|0;
           $753 = $747 << 1;
           $754 = ((285464 + ($753<<2)|0) + 40|0);
           $755 = ($750|0)==($754|0);
           do {
            if (!($755)) {
             $756 = HEAP32[((285464 + 16|0))>>2]|0;
             $757 = ($750>>>0)<($756>>>0);
             if ($757) {
              _abort();
              // unreachable;
             }
             $758 = (($750) + 12|0);
             $759 = HEAP32[$758>>2]|0;
             $760 = ($759|0)==($721|0);
             if ($760) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $761 = ($752|0)==($750|0);
           if ($761) {
            $762 = 1 << $747;
            $763 = $762 ^ -1;
            $764 = HEAP32[285464>>2]|0;
            $765 = $764 & $763;
            HEAP32[285464>>2] = $765;
            break;
           }
           $766 = ($752|0)==($754|0);
           do {
            if ($766) {
             $$pre57$i$i = (($752) + 8|0);
             $$pre$phi58$i$iZ2D = $$pre57$i$i;
            } else {
             $767 = HEAP32[((285464 + 16|0))>>2]|0;
             $768 = ($752>>>0)<($767>>>0);
             if ($768) {
              _abort();
              // unreachable;
             }
             $769 = (($752) + 8|0);
             $770 = HEAP32[$769>>2]|0;
             $771 = ($770|0)==($721|0);
             if ($771) {
              $$pre$phi58$i$iZ2D = $769;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $772 = (($750) + 12|0);
           HEAP32[$772>>2] = $752;
           HEAP32[$$pre$phi58$i$iZ2D>>2] = $750;
          } else {
           $$sum34$i$i = $720 | 24;
           $$sum110$i = (($$sum34$i$i) + ($tsize$246$i))|0;
           $773 = (($tbase$247$i) + ($$sum110$i)|0);
           $774 = HEAP32[$773>>2]|0;
           $$sum5$i$i = (($tsize$246$i) + 12)|0;
           $$sum111$i = (($$sum5$i$i) + ($720))|0;
           $775 = (($tbase$247$i) + ($$sum111$i)|0);
           $776 = HEAP32[$775>>2]|0;
           $777 = ($776|0)==($721|0);
           do {
            if ($777) {
             $$sum67$i$i = $720 | 16;
             $$sum117$i = (($$sum2$i23$i) + ($$sum67$i$i))|0;
             $788 = (($tbase$247$i) + ($$sum117$i)|0);
             $789 = HEAP32[$788>>2]|0;
             $790 = ($789|0)==(0|0);
             if ($790) {
              $$sum118$i = (($$sum67$i$i) + ($tsize$246$i))|0;
              $791 = (($tbase$247$i) + ($$sum118$i)|0);
              $792 = HEAP32[$791>>2]|0;
              $793 = ($792|0)==(0|0);
              if ($793) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $792;$RP$0$i$i = $791;
              }
             } else {
              $R$0$i$i = $789;$RP$0$i$i = $788;
             }
             while(1) {
              $794 = (($R$0$i$i) + 20|0);
              $795 = HEAP32[$794>>2]|0;
              $796 = ($795|0)==(0|0);
              if (!($796)) {
               $R$0$i$i = $795;$RP$0$i$i = $794;
               continue;
              }
              $797 = (($R$0$i$i) + 16|0);
              $798 = HEAP32[$797>>2]|0;
              $799 = ($798|0)==(0|0);
              if ($799) {
               break;
              } else {
               $R$0$i$i = $798;$RP$0$i$i = $797;
              }
             }
             $800 = HEAP32[((285464 + 16|0))>>2]|0;
             $801 = ($RP$0$i$i>>>0)<($800>>>0);
             if ($801) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i>>2] = 0;
              $R$1$i$i = $R$0$i$i;
              break;
             }
            } else {
             $$sum3536$i$i = $720 | 8;
             $$sum112$i = (($$sum3536$i$i) + ($tsize$246$i))|0;
             $778 = (($tbase$247$i) + ($$sum112$i)|0);
             $779 = HEAP32[$778>>2]|0;
             $780 = HEAP32[((285464 + 16|0))>>2]|0;
             $781 = ($779>>>0)<($780>>>0);
             if ($781) {
              _abort();
              // unreachable;
             }
             $782 = (($779) + 12|0);
             $783 = HEAP32[$782>>2]|0;
             $784 = ($783|0)==($721|0);
             if (!($784)) {
              _abort();
              // unreachable;
             }
             $785 = (($776) + 8|0);
             $786 = HEAP32[$785>>2]|0;
             $787 = ($786|0)==($721|0);
             if ($787) {
              HEAP32[$782>>2] = $776;
              HEAP32[$785>>2] = $779;
              $R$1$i$i = $776;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $802 = ($774|0)==(0|0);
           if ($802) {
            break;
           }
           $$sum30$i$i = (($tsize$246$i) + 28)|0;
           $$sum113$i = (($$sum30$i$i) + ($720))|0;
           $803 = (($tbase$247$i) + ($$sum113$i)|0);
           $804 = HEAP32[$803>>2]|0;
           $805 = ((285464 + ($804<<2)|0) + 304|0);
           $806 = HEAP32[$805>>2]|0;
           $807 = ($721|0)==($806|0);
           do {
            if ($807) {
             HEAP32[$805>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $808 = 1 << $804;
             $809 = $808 ^ -1;
             $810 = HEAP32[((285464 + 4|0))>>2]|0;
             $811 = $810 & $809;
             HEAP32[((285464 + 4|0))>>2] = $811;
             break L346;
            } else {
             $812 = HEAP32[((285464 + 16|0))>>2]|0;
             $813 = ($774>>>0)<($812>>>0);
             if ($813) {
              _abort();
              // unreachable;
             }
             $814 = (($774) + 16|0);
             $815 = HEAP32[$814>>2]|0;
             $816 = ($815|0)==($721|0);
             if ($816) {
              HEAP32[$814>>2] = $R$1$i$i;
             } else {
              $817 = (($774) + 20|0);
              HEAP32[$817>>2] = $R$1$i$i;
             }
             $818 = ($R$1$i$i|0)==(0|0);
             if ($818) {
              break L346;
             }
            }
           } while(0);
           $819 = HEAP32[((285464 + 16|0))>>2]|0;
           $820 = ($R$1$i$i>>>0)<($819>>>0);
           if ($820) {
            _abort();
            // unreachable;
           }
           $821 = (($R$1$i$i) + 24|0);
           HEAP32[$821>>2] = $774;
           $$sum3132$i$i = $720 | 16;
           $$sum114$i = (($$sum3132$i$i) + ($tsize$246$i))|0;
           $822 = (($tbase$247$i) + ($$sum114$i)|0);
           $823 = HEAP32[$822>>2]|0;
           $824 = ($823|0)==(0|0);
           do {
            if (!($824)) {
             $825 = HEAP32[((285464 + 16|0))>>2]|0;
             $826 = ($823>>>0)<($825>>>0);
             if ($826) {
              _abort();
              // unreachable;
             } else {
              $827 = (($R$1$i$i) + 16|0);
              HEAP32[$827>>2] = $823;
              $828 = (($823) + 24|0);
              HEAP32[$828>>2] = $R$1$i$i;
              break;
             }
            }
           } while(0);
           $$sum115$i = (($$sum2$i23$i) + ($$sum3132$i$i))|0;
           $829 = (($tbase$247$i) + ($$sum115$i)|0);
           $830 = HEAP32[$829>>2]|0;
           $831 = ($830|0)==(0|0);
           if ($831) {
            break;
           }
           $832 = HEAP32[((285464 + 16|0))>>2]|0;
           $833 = ($830>>>0)<($832>>>0);
           if ($833) {
            _abort();
            // unreachable;
           } else {
            $834 = (($R$1$i$i) + 20|0);
            HEAP32[$834>>2] = $830;
            $835 = (($830) + 24|0);
            HEAP32[$835>>2] = $R$1$i$i;
            break;
           }
          }
         } while(0);
         $$sum9$i$i = $746 | $720;
         $$sum116$i = (($$sum9$i$i) + ($tsize$246$i))|0;
         $836 = (($tbase$247$i) + ($$sum116$i)|0);
         $837 = (($746) + ($726))|0;
         $oldfirst$0$i$i = $836;$qsize$0$i$i = $837;
        } else {
         $oldfirst$0$i$i = $721;$qsize$0$i$i = $726;
        }
        $838 = (($oldfirst$0$i$i) + 4|0);
        $839 = HEAP32[$838>>2]|0;
        $840 = $839 & -2;
        HEAP32[$838>>2] = $840;
        $841 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i21$i) + 4)|0;
        $842 = (($tbase$247$i) + ($$sum10$i$i)|0);
        HEAP32[$842>>2] = $841;
        $$sum11$i24$i = (($qsize$0$i$i) + ($$sum$i21$i))|0;
        $843 = (($tbase$247$i) + ($$sum11$i24$i)|0);
        HEAP32[$843>>2] = $qsize$0$i$i;
        $844 = $qsize$0$i$i >>> 3;
        $845 = ($qsize$0$i$i>>>0)<(256);
        if ($845) {
         $846 = $844 << 1;
         $847 = ((285464 + ($846<<2)|0) + 40|0);
         $848 = HEAP32[285464>>2]|0;
         $849 = 1 << $844;
         $850 = $848 & $849;
         $851 = ($850|0)==(0);
         do {
          if ($851) {
           $852 = $848 | $849;
           HEAP32[285464>>2] = $852;
           $$sum26$pre$i$i = (($846) + 2)|0;
           $$pre$i25$i = ((285464 + ($$sum26$pre$i$i<<2)|0) + 40|0);
           $$pre$phi$i26$iZ2D = $$pre$i25$i;$F4$0$i$i = $847;
          } else {
           $$sum29$i$i = (($846) + 2)|0;
           $853 = ((285464 + ($$sum29$i$i<<2)|0) + 40|0);
           $854 = HEAP32[$853>>2]|0;
           $855 = HEAP32[((285464 + 16|0))>>2]|0;
           $856 = ($854>>>0)<($855>>>0);
           if (!($856)) {
            $$pre$phi$i26$iZ2D = $853;$F4$0$i$i = $854;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i26$iZ2D>>2] = $725;
         $857 = (($F4$0$i$i) + 12|0);
         HEAP32[$857>>2] = $725;
         $$sum27$i$i = (($$sum$i21$i) + 8)|0;
         $858 = (($tbase$247$i) + ($$sum27$i$i)|0);
         HEAP32[$858>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i21$i) + 12)|0;
         $859 = (($tbase$247$i) + ($$sum28$i$i)|0);
         HEAP32[$859>>2] = $847;
         break;
        }
        $860 = $qsize$0$i$i >>> 8;
        $861 = ($860|0)==(0);
        do {
         if ($861) {
          $I7$0$i$i = 0;
         } else {
          $862 = ($qsize$0$i$i>>>0)>(16777215);
          if ($862) {
           $I7$0$i$i = 31;
           break;
          }
          $863 = (($860) + 1048320)|0;
          $864 = $863 >>> 16;
          $865 = $864 & 8;
          $866 = $860 << $865;
          $867 = (($866) + 520192)|0;
          $868 = $867 >>> 16;
          $869 = $868 & 4;
          $870 = $869 | $865;
          $871 = $866 << $869;
          $872 = (($871) + 245760)|0;
          $873 = $872 >>> 16;
          $874 = $873 & 2;
          $875 = $870 | $874;
          $876 = (14 - ($875))|0;
          $877 = $871 << $874;
          $878 = $877 >>> 15;
          $879 = (($876) + ($878))|0;
          $880 = $879 << 1;
          $881 = (($879) + 7)|0;
          $882 = $qsize$0$i$i >>> $881;
          $883 = $882 & 1;
          $884 = $883 | $880;
          $I7$0$i$i = $884;
         }
        } while(0);
        $885 = ((285464 + ($I7$0$i$i<<2)|0) + 304|0);
        $$sum12$i$i = (($$sum$i21$i) + 28)|0;
        $886 = (($tbase$247$i) + ($$sum12$i$i)|0);
        HEAP32[$886>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i21$i) + 16)|0;
        $887 = (($tbase$247$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i21$i) + 20)|0;
        $888 = (($tbase$247$i) + ($$sum14$i$i)|0);
        HEAP32[$888>>2] = 0;
        HEAP32[$887>>2] = 0;
        $889 = HEAP32[((285464 + 4|0))>>2]|0;
        $890 = 1 << $I7$0$i$i;
        $891 = $889 & $890;
        $892 = ($891|0)==(0);
        if ($892) {
         $893 = $889 | $890;
         HEAP32[((285464 + 4|0))>>2] = $893;
         HEAP32[$885>>2] = $725;
         $$sum15$i$i = (($$sum$i21$i) + 24)|0;
         $894 = (($tbase$247$i) + ($$sum15$i$i)|0);
         HEAP32[$894>>2] = $885;
         $$sum16$i$i = (($$sum$i21$i) + 12)|0;
         $895 = (($tbase$247$i) + ($$sum16$i$i)|0);
         HEAP32[$895>>2] = $725;
         $$sum17$i$i = (($$sum$i21$i) + 8)|0;
         $896 = (($tbase$247$i) + ($$sum17$i$i)|0);
         HEAP32[$896>>2] = $725;
         break;
        }
        $897 = HEAP32[$885>>2]|0;
        $898 = ($I7$0$i$i|0)==(31);
        if ($898) {
         $906 = 0;
        } else {
         $899 = $I7$0$i$i >>> 1;
         $900 = (25 - ($899))|0;
         $906 = $900;
        }
        $901 = (($897) + 4|0);
        $902 = HEAP32[$901>>2]|0;
        $903 = $902 & -8;
        $904 = ($903|0)==($qsize$0$i$i|0);
        L435: do {
         if ($904) {
          $T$0$lcssa$i28$i = $897;
         } else {
          $905 = $qsize$0$i$i << $906;
          $K8$052$i$i = $905;$T$051$i$i = $897;
          while(1) {
           $913 = $K8$052$i$i >>> 31;
           $914 = ((($T$051$i$i) + ($913<<2)|0) + 16|0);
           $909 = HEAP32[$914>>2]|0;
           $915 = ($909|0)==(0|0);
           if ($915) {
            break;
           }
           $907 = $K8$052$i$i << 1;
           $908 = (($909) + 4|0);
           $910 = HEAP32[$908>>2]|0;
           $911 = $910 & -8;
           $912 = ($911|0)==($qsize$0$i$i|0);
           if ($912) {
            $T$0$lcssa$i28$i = $909;
            break L435;
           } else {
            $K8$052$i$i = $907;$T$051$i$i = $909;
           }
          }
          $916 = HEAP32[((285464 + 16|0))>>2]|0;
          $917 = ($914>>>0)<($916>>>0);
          if ($917) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$914>>2] = $725;
           $$sum23$i$i = (($$sum$i21$i) + 24)|0;
           $918 = (($tbase$247$i) + ($$sum23$i$i)|0);
           HEAP32[$918>>2] = $T$051$i$i;
           $$sum24$i$i = (($$sum$i21$i) + 12)|0;
           $919 = (($tbase$247$i) + ($$sum24$i$i)|0);
           HEAP32[$919>>2] = $725;
           $$sum25$i$i = (($$sum$i21$i) + 8)|0;
           $920 = (($tbase$247$i) + ($$sum25$i$i)|0);
           HEAP32[$920>>2] = $725;
           break L338;
          }
         }
        } while(0);
        $921 = (($T$0$lcssa$i28$i) + 8|0);
        $922 = HEAP32[$921>>2]|0;
        $923 = HEAP32[((285464 + 16|0))>>2]|0;
        $924 = ($T$0$lcssa$i28$i>>>0)<($923>>>0);
        if ($924) {
         _abort();
         // unreachable;
        }
        $925 = ($922>>>0)<($923>>>0);
        if ($925) {
         _abort();
         // unreachable;
        } else {
         $926 = (($922) + 12|0);
         HEAP32[$926>>2] = $725;
         HEAP32[$921>>2] = $725;
         $$sum20$i$i = (($$sum$i21$i) + 8)|0;
         $927 = (($tbase$247$i) + ($$sum20$i$i)|0);
         HEAP32[$927>>2] = $922;
         $$sum21$i$i = (($$sum$i21$i) + 12)|0;
         $928 = (($tbase$247$i) + ($$sum21$i$i)|0);
         HEAP32[$928>>2] = $T$0$lcssa$i28$i;
         $$sum22$i$i = (($$sum$i21$i) + 24)|0;
         $929 = (($tbase$247$i) + ($$sum22$i$i)|0);
         HEAP32[$929>>2] = 0;
         break;
        }
       }
      } while(0);
      $$sum1819$i$i = $713 | 8;
      $930 = (($tbase$247$i) + ($$sum1819$i$i)|0);
      $mem$0 = $930;
      STACKTOP = sp;return ($mem$0|0);
     }
    }
    $sp$0$i$i$i = ((285464 + 448|0));
    while(1) {
     $931 = HEAP32[$sp$0$i$i$i>>2]|0;
     $932 = ($931>>>0)>($636>>>0);
     if (!($932)) {
      $933 = (($sp$0$i$i$i) + 4|0);
      $934 = HEAP32[$933>>2]|0;
      $935 = (($931) + ($934)|0);
      $936 = ($935>>>0)>($636>>>0);
      if ($936) {
       break;
      }
     }
     $937 = (($sp$0$i$i$i) + 8|0);
     $938 = HEAP32[$937>>2]|0;
     $sp$0$i$i$i = $938;
    }
    $$sum$i15$i = (($934) + -47)|0;
    $$sum1$i16$i = (($934) + -39)|0;
    $939 = (($931) + ($$sum1$i16$i)|0);
    $940 = $939;
    $941 = $940 & 7;
    $942 = ($941|0)==(0);
    if ($942) {
     $945 = 0;
    } else {
     $943 = (0 - ($940))|0;
     $944 = $943 & 7;
     $945 = $944;
    }
    $$sum2$i17$i = (($$sum$i15$i) + ($945))|0;
    $946 = (($931) + ($$sum2$i17$i)|0);
    $947 = (($636) + 16|0);
    $948 = ($946>>>0)<($947>>>0);
    $949 = $948 ? $636 : $946;
    $950 = (($949) + 8|0);
    $951 = (($tsize$246$i) + -40)|0;
    $952 = (($tbase$247$i) + 8|0);
    $953 = $952;
    $954 = $953 & 7;
    $955 = ($954|0)==(0);
    if ($955) {
     $959 = 0;
    } else {
     $956 = (0 - ($953))|0;
     $957 = $956 & 7;
     $959 = $957;
    }
    $958 = (($tbase$247$i) + ($959)|0);
    $960 = (($951) - ($959))|0;
    HEAP32[((285464 + 24|0))>>2] = $958;
    HEAP32[((285464 + 12|0))>>2] = $960;
    $961 = $960 | 1;
    $$sum$i$i$i = (($959) + 4)|0;
    $962 = (($tbase$247$i) + ($$sum$i$i$i)|0);
    HEAP32[$962>>2] = $961;
    $$sum2$i$i$i = (($tsize$246$i) + -36)|0;
    $963 = (($tbase$247$i) + ($$sum2$i$i$i)|0);
    HEAP32[$963>>2] = 40;
    $964 = HEAP32[((285936 + 16|0))>>2]|0;
    HEAP32[((285464 + 28|0))>>2] = $964;
    $965 = (($949) + 4|0);
    HEAP32[$965>>2] = 27;
    ;HEAP32[$950+0>>2]=HEAP32[((285464 + 448|0))+0>>2]|0;HEAP32[$950+4>>2]=HEAP32[((285464 + 448|0))+4>>2]|0;HEAP32[$950+8>>2]=HEAP32[((285464 + 448|0))+8>>2]|0;HEAP32[$950+12>>2]=HEAP32[((285464 + 448|0))+12>>2]|0;
    HEAP32[((285464 + 448|0))>>2] = $tbase$247$i;
    HEAP32[((285464 + 452|0))>>2] = $tsize$246$i;
    HEAP32[((285464 + 460|0))>>2] = 0;
    HEAP32[((285464 + 456|0))>>2] = $950;
    $966 = (($949) + 28|0);
    HEAP32[$966>>2] = 7;
    $967 = (($949) + 32|0);
    $968 = ($967>>>0)<($935>>>0);
    if ($968) {
     $970 = $966;
     while(1) {
      $969 = (($970) + 4|0);
      HEAP32[$969>>2] = 7;
      $971 = (($970) + 8|0);
      $972 = ($971>>>0)<($935>>>0);
      if ($972) {
       $970 = $969;
      } else {
       break;
      }
     }
    }
    $973 = ($949|0)==($636|0);
    if (!($973)) {
     $974 = $949;
     $975 = $636;
     $976 = (($974) - ($975))|0;
     $977 = (($636) + ($976)|0);
     $$sum3$i$i = (($976) + 4)|0;
     $978 = (($636) + ($$sum3$i$i)|0);
     $979 = HEAP32[$978>>2]|0;
     $980 = $979 & -2;
     HEAP32[$978>>2] = $980;
     $981 = $976 | 1;
     $982 = (($636) + 4|0);
     HEAP32[$982>>2] = $981;
     HEAP32[$977>>2] = $976;
     $983 = $976 >>> 3;
     $984 = ($976>>>0)<(256);
     if ($984) {
      $985 = $983 << 1;
      $986 = ((285464 + ($985<<2)|0) + 40|0);
      $987 = HEAP32[285464>>2]|0;
      $988 = 1 << $983;
      $989 = $987 & $988;
      $990 = ($989|0)==(0);
      do {
       if ($990) {
        $991 = $987 | $988;
        HEAP32[285464>>2] = $991;
        $$sum10$pre$i$i = (($985) + 2)|0;
        $$pre$i$i = ((285464 + ($$sum10$pre$i$i<<2)|0) + 40|0);
        $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $986;
       } else {
        $$sum11$i$i = (($985) + 2)|0;
        $992 = ((285464 + ($$sum11$i$i<<2)|0) + 40|0);
        $993 = HEAP32[$992>>2]|0;
        $994 = HEAP32[((285464 + 16|0))>>2]|0;
        $995 = ($993>>>0)<($994>>>0);
        if (!($995)) {
         $$pre$phi$i$iZ2D = $992;$F$0$i$i = $993;
         break;
        }
        _abort();
        // unreachable;
       }
      } while(0);
      HEAP32[$$pre$phi$i$iZ2D>>2] = $636;
      $996 = (($F$0$i$i) + 12|0);
      HEAP32[$996>>2] = $636;
      $997 = (($636) + 8|0);
      HEAP32[$997>>2] = $F$0$i$i;
      $998 = (($636) + 12|0);
      HEAP32[$998>>2] = $986;
      break;
     }
     $999 = $976 >>> 8;
     $1000 = ($999|0)==(0);
     if ($1000) {
      $I1$0$i$i = 0;
     } else {
      $1001 = ($976>>>0)>(16777215);
      if ($1001) {
       $I1$0$i$i = 31;
      } else {
       $1002 = (($999) + 1048320)|0;
       $1003 = $1002 >>> 16;
       $1004 = $1003 & 8;
       $1005 = $999 << $1004;
       $1006 = (($1005) + 520192)|0;
       $1007 = $1006 >>> 16;
       $1008 = $1007 & 4;
       $1009 = $1008 | $1004;
       $1010 = $1005 << $1008;
       $1011 = (($1010) + 245760)|0;
       $1012 = $1011 >>> 16;
       $1013 = $1012 & 2;
       $1014 = $1009 | $1013;
       $1015 = (14 - ($1014))|0;
       $1016 = $1010 << $1013;
       $1017 = $1016 >>> 15;
       $1018 = (($1015) + ($1017))|0;
       $1019 = $1018 << 1;
       $1020 = (($1018) + 7)|0;
       $1021 = $976 >>> $1020;
       $1022 = $1021 & 1;
       $1023 = $1022 | $1019;
       $I1$0$i$i = $1023;
      }
     }
     $1024 = ((285464 + ($I1$0$i$i<<2)|0) + 304|0);
     $1025 = (($636) + 28|0);
     $I1$0$c$i$i = $I1$0$i$i;
     HEAP32[$1025>>2] = $I1$0$c$i$i;
     $1026 = (($636) + 20|0);
     HEAP32[$1026>>2] = 0;
     $1027 = (($636) + 16|0);
     HEAP32[$1027>>2] = 0;
     $1028 = HEAP32[((285464 + 4|0))>>2]|0;
     $1029 = 1 << $I1$0$i$i;
     $1030 = $1028 & $1029;
     $1031 = ($1030|0)==(0);
     if ($1031) {
      $1032 = $1028 | $1029;
      HEAP32[((285464 + 4|0))>>2] = $1032;
      HEAP32[$1024>>2] = $636;
      $1033 = (($636) + 24|0);
      HEAP32[$1033>>2] = $1024;
      $1034 = (($636) + 12|0);
      HEAP32[$1034>>2] = $636;
      $1035 = (($636) + 8|0);
      HEAP32[$1035>>2] = $636;
      break;
     }
     $1036 = HEAP32[$1024>>2]|0;
     $1037 = ($I1$0$i$i|0)==(31);
     if ($1037) {
      $1045 = 0;
     } else {
      $1038 = $I1$0$i$i >>> 1;
      $1039 = (25 - ($1038))|0;
      $1045 = $1039;
     }
     $1040 = (($1036) + 4|0);
     $1041 = HEAP32[$1040>>2]|0;
     $1042 = $1041 & -8;
     $1043 = ($1042|0)==($976|0);
     L489: do {
      if ($1043) {
       $T$0$lcssa$i$i = $1036;
      } else {
       $1044 = $976 << $1045;
       $K2$014$i$i = $1044;$T$013$i$i = $1036;
       while(1) {
        $1052 = $K2$014$i$i >>> 31;
        $1053 = ((($T$013$i$i) + ($1052<<2)|0) + 16|0);
        $1048 = HEAP32[$1053>>2]|0;
        $1054 = ($1048|0)==(0|0);
        if ($1054) {
         break;
        }
        $1046 = $K2$014$i$i << 1;
        $1047 = (($1048) + 4|0);
        $1049 = HEAP32[$1047>>2]|0;
        $1050 = $1049 & -8;
        $1051 = ($1050|0)==($976|0);
        if ($1051) {
         $T$0$lcssa$i$i = $1048;
         break L489;
        } else {
         $K2$014$i$i = $1046;$T$013$i$i = $1048;
        }
       }
       $1055 = HEAP32[((285464 + 16|0))>>2]|0;
       $1056 = ($1053>>>0)<($1055>>>0);
       if ($1056) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$1053>>2] = $636;
        $1057 = (($636) + 24|0);
        HEAP32[$1057>>2] = $T$013$i$i;
        $1058 = (($636) + 12|0);
        HEAP32[$1058>>2] = $636;
        $1059 = (($636) + 8|0);
        HEAP32[$1059>>2] = $636;
        break L311;
       }
      }
     } while(0);
     $1060 = (($T$0$lcssa$i$i) + 8|0);
     $1061 = HEAP32[$1060>>2]|0;
     $1062 = HEAP32[((285464 + 16|0))>>2]|0;
     $1063 = ($T$0$lcssa$i$i>>>0)<($1062>>>0);
     if ($1063) {
      _abort();
      // unreachable;
     }
     $1064 = ($1061>>>0)<($1062>>>0);
     if ($1064) {
      _abort();
      // unreachable;
     } else {
      $1065 = (($1061) + 12|0);
      HEAP32[$1065>>2] = $636;
      HEAP32[$1060>>2] = $636;
      $1066 = (($636) + 8|0);
      HEAP32[$1066>>2] = $1061;
      $1067 = (($636) + 12|0);
      HEAP32[$1067>>2] = $T$0$lcssa$i$i;
      $1068 = (($636) + 24|0);
      HEAP32[$1068>>2] = 0;
      break;
     }
    }
   }
  } while(0);
  $1069 = HEAP32[((285464 + 12|0))>>2]|0;
  $1070 = ($1069>>>0)>($nb$0>>>0);
  if ($1070) {
   $1071 = (($1069) - ($nb$0))|0;
   HEAP32[((285464 + 12|0))>>2] = $1071;
   $1072 = HEAP32[((285464 + 24|0))>>2]|0;
   $1073 = (($1072) + ($nb$0)|0);
   HEAP32[((285464 + 24|0))>>2] = $1073;
   $1074 = $1071 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1075 = (($1072) + ($$sum$i32)|0);
   HEAP32[$1075>>2] = $1074;
   $1076 = $nb$0 | 3;
   $1077 = (($1072) + 4|0);
   HEAP32[$1077>>2] = $1076;
   $1078 = (($1072) + 8|0);
   $mem$0 = $1078;
   STACKTOP = sp;return ($mem$0|0);
  }
 }
 $1079 = (___errno_location()|0);
 HEAP32[$1079>>2] = 12;
 $mem$0 = 0;
 STACKTOP = sp;return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$pre = 0, $$pre$phi68Z2D = 0, $$pre$phi70Z2D = 0, $$pre$phiZ2D = 0, $$pre67 = 0, $$pre69 = 0, $$sum = 0, $$sum16$pre = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum2324 = 0, $$sum25 = 0, $$sum26 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0;
 var $$sum31 = 0, $$sum32 = 0, $$sum33 = 0, $$sum34 = 0, $$sum35 = 0, $$sum36 = 0, $$sum37 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $322 = 0, $323 = 0, $324 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $I18$0$c = 0, $K19$057 = 0;
 var $R$0 = 0, $R$1 = 0, $R7$0 = 0, $R7$1 = 0, $RP$0 = 0, $RP9$0 = 0, $T$0$lcssa = 0, $T$056 = 0, $cond = 0, $cond54 = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (($mem) + -8|0);
 $2 = HEAP32[((285464 + 16|0))>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = (($mem) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    STACKTOP = sp;return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[((285464 + 20|0))>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $104 = (($mem) + ($$sum3)|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = $105 & 3;
    $107 = ($106|0)==(3);
    if (!($107)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[((285464 + 8|0))>>2] = $15;
    $108 = HEAP32[$104>>2]|0;
    $109 = $108 & -2;
    HEAP32[$104>>2] = $109;
    $110 = $15 | 1;
    $$sum26 = (($$sum2) + 4)|0;
    $111 = (($mem) + ($$sum26)|0);
    HEAP32[$111>>2] = $110;
    HEAP32[$9>>2] = $15;
    STACKTOP = sp;return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum36 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum36)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum37 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum37)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = ((285464 + ($25<<2)|0) + 40|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = (($22) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[285464>>2]|0;
     $36 = $35 & $34;
     HEAP32[285464>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre69 = (($24) + 8|0);
     $$pre$phi70Z2D = $$pre69;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = (($24) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi70Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = (($22) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi70Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum28 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum28)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum29 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum29)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum31 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum31)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum30 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum30)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $61;$RP$0 = $60;
      }
     } else {
      $R$0 = $58;$RP$0 = $57;
     }
     while(1) {
      $63 = (($R$0) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $R$0 = $64;$RP$0 = $63;
       continue;
      }
      $66 = (($R$0) + 16|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==(0|0);
      if ($68) {
       break;
      } else {
       $R$0 = $67;$RP$0 = $66;
      }
     }
     $69 = ($RP$0>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum35 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum35)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = (($49) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = (($46) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum32 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum32)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ((285464 + ($72<<2)|0) + 304|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[((285464 + 4|0))>>2]|0;
      $79 = $78 & $77;
      HEAP32[((285464 + 4|0))>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[((285464 + 16|0))>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = (($44) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = (($44) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[((285464 + 16|0))>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = (($R$1) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum33 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum33)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = HEAP32[((285464 + 16|0))>>2]|0;
      $94 = ($91>>>0)<($93>>>0);
      if ($94) {
       _abort();
       // unreachable;
      } else {
       $95 = (($R$1) + 16|0);
       HEAP32[$95>>2] = $91;
       $96 = (($91) + 24|0);
       HEAP32[$96>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum34 = (($$sum2) + 20)|0;
    $97 = (($mem) + ($$sum34)|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($98|0)==(0|0);
    if ($99) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $100 = HEAP32[((285464 + 16|0))>>2]|0;
     $101 = ($98>>>0)<($100>>>0);
     if ($101) {
      _abort();
      // unreachable;
     } else {
      $102 = (($R$1) + 20|0);
      HEAP32[$102>>2] = $98;
      $103 = (($98) + 24|0);
      HEAP32[$103>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $112 = ($p$0>>>0)<($9>>>0);
 if (!($112)) {
  _abort();
  // unreachable;
 }
 $$sum25 = (($8) + -4)|0;
 $113 = (($mem) + ($$sum25)|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = $114 & 1;
 $116 = ($115|0)==(0);
 if ($116) {
  _abort();
  // unreachable;
 }
 $117 = $114 & 2;
 $118 = ($117|0)==(0);
 if ($118) {
  $119 = HEAP32[((285464 + 24|0))>>2]|0;
  $120 = ($9|0)==($119|0);
  if ($120) {
   $121 = HEAP32[((285464 + 12|0))>>2]|0;
   $122 = (($121) + ($psize$0))|0;
   HEAP32[((285464 + 12|0))>>2] = $122;
   HEAP32[((285464 + 24|0))>>2] = $p$0;
   $123 = $122 | 1;
   $124 = (($p$0) + 4|0);
   HEAP32[$124>>2] = $123;
   $125 = HEAP32[((285464 + 20|0))>>2]|0;
   $126 = ($p$0|0)==($125|0);
   if (!($126)) {
    STACKTOP = sp;return;
   }
   HEAP32[((285464 + 20|0))>>2] = 0;
   HEAP32[((285464 + 8|0))>>2] = 0;
   STACKTOP = sp;return;
  }
  $127 = HEAP32[((285464 + 20|0))>>2]|0;
  $128 = ($9|0)==($127|0);
  if ($128) {
   $129 = HEAP32[((285464 + 8|0))>>2]|0;
   $130 = (($129) + ($psize$0))|0;
   HEAP32[((285464 + 8|0))>>2] = $130;
   HEAP32[((285464 + 20|0))>>2] = $p$0;
   $131 = $130 | 1;
   $132 = (($p$0) + 4|0);
   HEAP32[$132>>2] = $131;
   $133 = (($p$0) + ($130)|0);
   HEAP32[$133>>2] = $130;
   STACKTOP = sp;return;
  }
  $134 = $114 & -8;
  $135 = (($134) + ($psize$0))|0;
  $136 = $114 >>> 3;
  $137 = ($114>>>0)<(256);
  do {
   if ($137) {
    $138 = (($mem) + ($8)|0);
    $139 = HEAP32[$138>>2]|0;
    $$sum2324 = $8 | 4;
    $140 = (($mem) + ($$sum2324)|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = $136 << 1;
    $143 = ((285464 + ($142<<2)|0) + 40|0);
    $144 = ($139|0)==($143|0);
    if (!($144)) {
     $145 = HEAP32[((285464 + 16|0))>>2]|0;
     $146 = ($139>>>0)<($145>>>0);
     if ($146) {
      _abort();
      // unreachable;
     }
     $147 = (($139) + 12|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ($148|0)==($9|0);
     if (!($149)) {
      _abort();
      // unreachable;
     }
    }
    $150 = ($141|0)==($139|0);
    if ($150) {
     $151 = 1 << $136;
     $152 = $151 ^ -1;
     $153 = HEAP32[285464>>2]|0;
     $154 = $153 & $152;
     HEAP32[285464>>2] = $154;
     break;
    }
    $155 = ($141|0)==($143|0);
    if ($155) {
     $$pre67 = (($141) + 8|0);
     $$pre$phi68Z2D = $$pre67;
    } else {
     $156 = HEAP32[((285464 + 16|0))>>2]|0;
     $157 = ($141>>>0)<($156>>>0);
     if ($157) {
      _abort();
      // unreachable;
     }
     $158 = (($141) + 8|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($159|0)==($9|0);
     if ($160) {
      $$pre$phi68Z2D = $158;
     } else {
      _abort();
      // unreachable;
     }
    }
    $161 = (($139) + 12|0);
    HEAP32[$161>>2] = $141;
    HEAP32[$$pre$phi68Z2D>>2] = $139;
   } else {
    $$sum5 = (($8) + 16)|0;
    $162 = (($mem) + ($$sum5)|0);
    $163 = HEAP32[$162>>2]|0;
    $$sum67 = $8 | 4;
    $164 = (($mem) + ($$sum67)|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = ($165|0)==($9|0);
    do {
     if ($166) {
      $$sum9 = (($8) + 12)|0;
      $177 = (($mem) + ($$sum9)|0);
      $178 = HEAP32[$177>>2]|0;
      $179 = ($178|0)==(0|0);
      if ($179) {
       $$sum8 = (($8) + 8)|0;
       $180 = (($mem) + ($$sum8)|0);
       $181 = HEAP32[$180>>2]|0;
       $182 = ($181|0)==(0|0);
       if ($182) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $181;$RP9$0 = $180;
       }
      } else {
       $R7$0 = $178;$RP9$0 = $177;
      }
      while(1) {
       $183 = (($R7$0) + 20|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($184|0)==(0|0);
       if (!($185)) {
        $R7$0 = $184;$RP9$0 = $183;
        continue;
       }
       $186 = (($R7$0) + 16|0);
       $187 = HEAP32[$186>>2]|0;
       $188 = ($187|0)==(0|0);
       if ($188) {
        break;
       } else {
        $R7$0 = $187;$RP9$0 = $186;
       }
      }
      $189 = HEAP32[((285464 + 16|0))>>2]|0;
      $190 = ($RP9$0>>>0)<($189>>>0);
      if ($190) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0>>2] = 0;
       $R7$1 = $R7$0;
       break;
      }
     } else {
      $167 = (($mem) + ($8)|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = HEAP32[((285464 + 16|0))>>2]|0;
      $170 = ($168>>>0)<($169>>>0);
      if ($170) {
       _abort();
       // unreachable;
      }
      $171 = (($168) + 12|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = ($172|0)==($9|0);
      if (!($173)) {
       _abort();
       // unreachable;
      }
      $174 = (($165) + 8|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = ($175|0)==($9|0);
      if ($176) {
       HEAP32[$171>>2] = $165;
       HEAP32[$174>>2] = $168;
       $R7$1 = $165;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $191 = ($163|0)==(0|0);
    if (!($191)) {
     $$sum18 = (($8) + 20)|0;
     $192 = (($mem) + ($$sum18)|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ((285464 + ($193<<2)|0) + 304|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = ($9|0)==($195|0);
     if ($196) {
      HEAP32[$194>>2] = $R7$1;
      $cond54 = ($R7$1|0)==(0|0);
      if ($cond54) {
       $197 = 1 << $193;
       $198 = $197 ^ -1;
       $199 = HEAP32[((285464 + 4|0))>>2]|0;
       $200 = $199 & $198;
       HEAP32[((285464 + 4|0))>>2] = $200;
       break;
      }
     } else {
      $201 = HEAP32[((285464 + 16|0))>>2]|0;
      $202 = ($163>>>0)<($201>>>0);
      if ($202) {
       _abort();
       // unreachable;
      }
      $203 = (($163) + 16|0);
      $204 = HEAP32[$203>>2]|0;
      $205 = ($204|0)==($9|0);
      if ($205) {
       HEAP32[$203>>2] = $R7$1;
      } else {
       $206 = (($163) + 20|0);
       HEAP32[$206>>2] = $R7$1;
      }
      $207 = ($R7$1|0)==(0|0);
      if ($207) {
       break;
      }
     }
     $208 = HEAP32[((285464 + 16|0))>>2]|0;
     $209 = ($R7$1>>>0)<($208>>>0);
     if ($209) {
      _abort();
      // unreachable;
     }
     $210 = (($R7$1) + 24|0);
     HEAP32[$210>>2] = $163;
     $$sum19 = (($8) + 8)|0;
     $211 = (($mem) + ($$sum19)|0);
     $212 = HEAP32[$211>>2]|0;
     $213 = ($212|0)==(0|0);
     do {
      if (!($213)) {
       $214 = HEAP32[((285464 + 16|0))>>2]|0;
       $215 = ($212>>>0)<($214>>>0);
       if ($215) {
        _abort();
        // unreachable;
       } else {
        $216 = (($R7$1) + 16|0);
        HEAP32[$216>>2] = $212;
        $217 = (($212) + 24|0);
        HEAP32[$217>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum20 = (($8) + 12)|0;
     $218 = (($mem) + ($$sum20)|0);
     $219 = HEAP32[$218>>2]|0;
     $220 = ($219|0)==(0|0);
     if (!($220)) {
      $221 = HEAP32[((285464 + 16|0))>>2]|0;
      $222 = ($219>>>0)<($221>>>0);
      if ($222) {
       _abort();
       // unreachable;
      } else {
       $223 = (($R7$1) + 20|0);
       HEAP32[$223>>2] = $219;
       $224 = (($219) + 24|0);
       HEAP32[$224>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $225 = $135 | 1;
  $226 = (($p$0) + 4|0);
  HEAP32[$226>>2] = $225;
  $227 = (($p$0) + ($135)|0);
  HEAP32[$227>>2] = $135;
  $228 = HEAP32[((285464 + 20|0))>>2]|0;
  $229 = ($p$0|0)==($228|0);
  if ($229) {
   HEAP32[((285464 + 8|0))>>2] = $135;
   STACKTOP = sp;return;
  } else {
   $psize$1 = $135;
  }
 } else {
  $230 = $114 & -2;
  HEAP32[$113>>2] = $230;
  $231 = $psize$0 | 1;
  $232 = (($p$0) + 4|0);
  HEAP32[$232>>2] = $231;
  $233 = (($p$0) + ($psize$0)|0);
  HEAP32[$233>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $234 = $psize$1 >>> 3;
 $235 = ($psize$1>>>0)<(256);
 if ($235) {
  $236 = $234 << 1;
  $237 = ((285464 + ($236<<2)|0) + 40|0);
  $238 = HEAP32[285464>>2]|0;
  $239 = 1 << $234;
  $240 = $238 & $239;
  $241 = ($240|0)==(0);
  if ($241) {
   $242 = $238 | $239;
   HEAP32[285464>>2] = $242;
   $$sum16$pre = (($236) + 2)|0;
   $$pre = ((285464 + ($$sum16$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $237;
  } else {
   $$sum17 = (($236) + 2)|0;
   $243 = ((285464 + ($$sum17<<2)|0) + 40|0);
   $244 = HEAP32[$243>>2]|0;
   $245 = HEAP32[((285464 + 16|0))>>2]|0;
   $246 = ($244>>>0)<($245>>>0);
   if ($246) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $243;$F16$0 = $244;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $247 = (($F16$0) + 12|0);
  HEAP32[$247>>2] = $p$0;
  $248 = (($p$0) + 8|0);
  HEAP32[$248>>2] = $F16$0;
  $249 = (($p$0) + 12|0);
  HEAP32[$249>>2] = $237;
  STACKTOP = sp;return;
 }
 $250 = $psize$1 >>> 8;
 $251 = ($250|0)==(0);
 if ($251) {
  $I18$0 = 0;
 } else {
  $252 = ($psize$1>>>0)>(16777215);
  if ($252) {
   $I18$0 = 31;
  } else {
   $253 = (($250) + 1048320)|0;
   $254 = $253 >>> 16;
   $255 = $254 & 8;
   $256 = $250 << $255;
   $257 = (($256) + 520192)|0;
   $258 = $257 >>> 16;
   $259 = $258 & 4;
   $260 = $259 | $255;
   $261 = $256 << $259;
   $262 = (($261) + 245760)|0;
   $263 = $262 >>> 16;
   $264 = $263 & 2;
   $265 = $260 | $264;
   $266 = (14 - ($265))|0;
   $267 = $261 << $264;
   $268 = $267 >>> 15;
   $269 = (($266) + ($268))|0;
   $270 = $269 << 1;
   $271 = (($269) + 7)|0;
   $272 = $psize$1 >>> $271;
   $273 = $272 & 1;
   $274 = $273 | $270;
   $I18$0 = $274;
  }
 }
 $275 = ((285464 + ($I18$0<<2)|0) + 304|0);
 $276 = (($p$0) + 28|0);
 $I18$0$c = $I18$0;
 HEAP32[$276>>2] = $I18$0$c;
 $277 = (($p$0) + 20|0);
 HEAP32[$277>>2] = 0;
 $278 = (($p$0) + 16|0);
 HEAP32[$278>>2] = 0;
 $279 = HEAP32[((285464 + 4|0))>>2]|0;
 $280 = 1 << $I18$0;
 $281 = $279 & $280;
 $282 = ($281|0)==(0);
 L199: do {
  if ($282) {
   $283 = $279 | $280;
   HEAP32[((285464 + 4|0))>>2] = $283;
   HEAP32[$275>>2] = $p$0;
   $284 = (($p$0) + 24|0);
   HEAP32[$284>>2] = $275;
   $285 = (($p$0) + 12|0);
   HEAP32[$285>>2] = $p$0;
   $286 = (($p$0) + 8|0);
   HEAP32[$286>>2] = $p$0;
  } else {
   $287 = HEAP32[$275>>2]|0;
   $288 = ($I18$0|0)==(31);
   if ($288) {
    $296 = 0;
   } else {
    $289 = $I18$0 >>> 1;
    $290 = (25 - ($289))|0;
    $296 = $290;
   }
   $291 = (($287) + 4|0);
   $292 = HEAP32[$291>>2]|0;
   $293 = $292 & -8;
   $294 = ($293|0)==($psize$1|0);
   L204: do {
    if ($294) {
     $T$0$lcssa = $287;
    } else {
     $295 = $psize$1 << $296;
     $K19$057 = $295;$T$056 = $287;
     while(1) {
      $303 = $K19$057 >>> 31;
      $304 = ((($T$056) + ($303<<2)|0) + 16|0);
      $299 = HEAP32[$304>>2]|0;
      $305 = ($299|0)==(0|0);
      if ($305) {
       break;
      }
      $297 = $K19$057 << 1;
      $298 = (($299) + 4|0);
      $300 = HEAP32[$298>>2]|0;
      $301 = $300 & -8;
      $302 = ($301|0)==($psize$1|0);
      if ($302) {
       $T$0$lcssa = $299;
       break L204;
      } else {
       $K19$057 = $297;$T$056 = $299;
      }
     }
     $306 = HEAP32[((285464 + 16|0))>>2]|0;
     $307 = ($304>>>0)<($306>>>0);
     if ($307) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$304>>2] = $p$0;
      $308 = (($p$0) + 24|0);
      HEAP32[$308>>2] = $T$056;
      $309 = (($p$0) + 12|0);
      HEAP32[$309>>2] = $p$0;
      $310 = (($p$0) + 8|0);
      HEAP32[$310>>2] = $p$0;
      break L199;
     }
    }
   } while(0);
   $311 = (($T$0$lcssa) + 8|0);
   $312 = HEAP32[$311>>2]|0;
   $313 = HEAP32[((285464 + 16|0))>>2]|0;
   $314 = ($T$0$lcssa>>>0)<($313>>>0);
   if ($314) {
    _abort();
    // unreachable;
   }
   $315 = ($312>>>0)<($313>>>0);
   if ($315) {
    _abort();
    // unreachable;
   } else {
    $316 = (($312) + 12|0);
    HEAP32[$316>>2] = $p$0;
    HEAP32[$311>>2] = $p$0;
    $317 = (($p$0) + 8|0);
    HEAP32[$317>>2] = $312;
    $318 = (($p$0) + 12|0);
    HEAP32[$318>>2] = $T$0$lcssa;
    $319 = (($p$0) + 24|0);
    HEAP32[$319>>2] = 0;
    break;
   }
  }
 } while(0);
 $320 = HEAP32[((285464 + 32|0))>>2]|0;
 $321 = (($320) + -1)|0;
 HEAP32[((285464 + 32|0))>>2] = $321;
 $322 = ($321|0)==(0);
 if ($322) {
  $sp$0$in$i = ((285464 + 456|0));
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $323 = ($sp$0$i|0)==(0|0);
  $324 = (($sp$0$i) + 8|0);
  if ($323) {
   break;
  } else {
   $sp$0$in$i = $324;
  }
 }
 HEAP32[((285464 + 32|0))>>2] = -1;
 STACKTOP = sp;return;
}
function _calloc($n_elements,$elem_size) {
 $n_elements = $n_elements|0;
 $elem_size = $elem_size|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $req$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n_elements|0)==(0);
 if ($0) {
  $req$0 = 0;
 } else {
  $1 = Math_imul($elem_size, $n_elements)|0;
  $2 = $elem_size | $n_elements;
  $3 = ($2>>>0)>(65535);
  if ($3) {
   $4 = (($1>>>0) / ($n_elements>>>0))&-1;
   $5 = ($4|0)==($elem_size|0);
   $$ = $5 ? $1 : -1;
   $req$0 = $$;
  } else {
   $req$0 = $1;
  }
 }
 $6 = (_malloc($req$0)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  STACKTOP = sp;return ($6|0);
 }
 $8 = (($6) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 3;
 $11 = ($10|0)==(0);
 if ($11) {
  STACKTOP = sp;return ($6|0);
 }
 _memset(($6|0),0,($req$0|0))|0;
 STACKTOP = sp;return ($6|0);
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $mem$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 do {
  if ($0) {
   $1 = (_malloc($bytes)|0);
   $mem$0 = $1;
  } else {
   $2 = ($bytes>>>0)>(4294967231);
   if ($2) {
    $3 = (___errno_location()|0);
    HEAP32[$3>>2] = 12;
    $mem$0 = 0;
    break;
   }
   $4 = ($bytes>>>0)<(11);
   if ($4) {
    $8 = 16;
   } else {
    $5 = (($bytes) + 11)|0;
    $6 = $5 & -8;
    $8 = $6;
   }
   $7 = (($oldmem) + -8|0);
   $9 = (_try_realloc_chunk($7,$8)|0);
   $10 = ($9|0)==(0|0);
   if (!($10)) {
    $11 = (($9) + 8|0);
    $mem$0 = $11;
    break;
   }
   $12 = (_malloc($bytes)|0);
   $13 = ($12|0)==(0|0);
   if ($13) {
    $mem$0 = 0;
   } else {
    $14 = (($oldmem) + -4|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = $15 & -8;
    $17 = $15 & 3;
    $18 = ($17|0)==(0);
    $19 = $18 ? 8 : 4;
    $20 = (($16) - ($19))|0;
    $21 = ($20>>>0)<($bytes>>>0);
    $22 = $21 ? $20 : $bytes;
    _memcpy(($12|0),($oldmem|0),($22|0))|0;
    _free($oldmem);
    $mem$0 = $12;
   }
  }
 } while(0);
 STACKTOP = sp;return ($mem$0|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum2728 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum78 = 0;
 var $$sum910 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$0 = 0, $R$1 = 0, $RP$0 = 0;
 var $cond = 0, $newp$0 = 0, $or$cond = 0, $storemerge = 0, $storemerge21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -8;
 $3 = (($p) + ($2)|0);
 $4 = HEAP32[((285464 + 16|0))>>2]|0;
 $5 = ($p>>>0)<($4>>>0);
 if ($5) {
  _abort();
  // unreachable;
 }
 $6 = $1 & 3;
 $7 = ($6|0)!=(1);
 $8 = ($p>>>0)<($3>>>0);
 $or$cond = $7 & $8;
 if (!($or$cond)) {
  _abort();
  // unreachable;
 }
 $$sum2728 = $2 | 4;
 $9 = (($p) + ($$sum2728)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 1;
 $12 = ($11|0)==(0);
 if ($12) {
  _abort();
  // unreachable;
 }
 $13 = ($6|0)==(0);
 if ($13) {
  $14 = ($nb>>>0)<(256);
  if ($14) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $15 = (($nb) + 4)|0;
  $16 = ($2>>>0)<($15>>>0);
  if (!($16)) {
   $17 = (($2) - ($nb))|0;
   $18 = HEAP32[((285936 + 8|0))>>2]|0;
   $19 = $18 << 1;
   $20 = ($17>>>0)>($19>>>0);
   if (!($20)) {
    $newp$0 = $p;
    STACKTOP = sp;return ($newp$0|0);
   }
  }
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $21 = ($2>>>0)<($nb>>>0);
 if (!($21)) {
  $22 = (($2) - ($nb))|0;
  $23 = ($22>>>0)>(15);
  if (!($23)) {
   $newp$0 = $p;
   STACKTOP = sp;return ($newp$0|0);
  }
  $24 = (($p) + ($nb)|0);
  $25 = $1 & 1;
  $26 = $25 | $nb;
  $27 = $26 | 2;
  HEAP32[$0>>2] = $27;
  $$sum23 = (($nb) + 4)|0;
  $28 = (($p) + ($$sum23)|0);
  $29 = $22 | 3;
  HEAP32[$28>>2] = $29;
  $30 = HEAP32[$9>>2]|0;
  $31 = $30 | 1;
  HEAP32[$9>>2] = $31;
  _dispose_chunk($24,$22);
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $32 = HEAP32[((285464 + 24|0))>>2]|0;
 $33 = ($3|0)==($32|0);
 if ($33) {
  $34 = HEAP32[((285464 + 12|0))>>2]|0;
  $35 = (($34) + ($2))|0;
  $36 = ($35>>>0)>($nb>>>0);
  if (!($36)) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $37 = (($35) - ($nb))|0;
  $38 = (($p) + ($nb)|0);
  $39 = $1 & 1;
  $40 = $39 | $nb;
  $41 = $40 | 2;
  HEAP32[$0>>2] = $41;
  $$sum22 = (($nb) + 4)|0;
  $42 = (($p) + ($$sum22)|0);
  $43 = $37 | 1;
  HEAP32[$42>>2] = $43;
  HEAP32[((285464 + 24|0))>>2] = $38;
  HEAP32[((285464 + 12|0))>>2] = $37;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $44 = HEAP32[((285464 + 20|0))>>2]|0;
 $45 = ($3|0)==($44|0);
 if ($45) {
  $46 = HEAP32[((285464 + 8|0))>>2]|0;
  $47 = (($46) + ($2))|0;
  $48 = ($47>>>0)<($nb>>>0);
  if ($48) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $49 = (($47) - ($nb))|0;
  $50 = ($49>>>0)>(15);
  if ($50) {
   $51 = (($p) + ($nb)|0);
   $52 = (($p) + ($47)|0);
   $53 = $1 & 1;
   $54 = $53 | $nb;
   $55 = $54 | 2;
   HEAP32[$0>>2] = $55;
   $$sum19 = (($nb) + 4)|0;
   $56 = (($p) + ($$sum19)|0);
   $57 = $49 | 1;
   HEAP32[$56>>2] = $57;
   HEAP32[$52>>2] = $49;
   $$sum20 = (($47) + 4)|0;
   $58 = (($p) + ($$sum20)|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $59 & -2;
   HEAP32[$58>>2] = $60;
   $storemerge = $51;$storemerge21 = $49;
  } else {
   $61 = $1 & 1;
   $62 = $61 | $47;
   $63 = $62 | 2;
   HEAP32[$0>>2] = $63;
   $$sum17 = (($47) + 4)|0;
   $64 = (($p) + ($$sum17)|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = $65 | 1;
   HEAP32[$64>>2] = $66;
   $storemerge = 0;$storemerge21 = 0;
  }
  HEAP32[((285464 + 8|0))>>2] = $storemerge21;
  HEAP32[((285464 + 20|0))>>2] = $storemerge;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $67 = $10 & 2;
 $68 = ($67|0)==(0);
 if (!($68)) {
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $69 = $10 & -8;
 $70 = (($69) + ($2))|0;
 $71 = ($70>>>0)<($nb>>>0);
 if ($71) {
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $72 = (($70) - ($nb))|0;
 $73 = $10 >>> 3;
 $74 = ($10>>>0)<(256);
 do {
  if ($74) {
   $$sum15 = (($2) + 8)|0;
   $75 = (($p) + ($$sum15)|0);
   $76 = HEAP32[$75>>2]|0;
   $$sum16 = (($2) + 12)|0;
   $77 = (($p) + ($$sum16)|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = $73 << 1;
   $80 = ((285464 + ($79<<2)|0) + 40|0);
   $81 = ($76|0)==($80|0);
   if (!($81)) {
    $82 = ($76>>>0)<($4>>>0);
    if ($82) {
     _abort();
     // unreachable;
    }
    $83 = (($76) + 12|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = ($84|0)==($3|0);
    if (!($85)) {
     _abort();
     // unreachable;
    }
   }
   $86 = ($78|0)==($76|0);
   if ($86) {
    $87 = 1 << $73;
    $88 = $87 ^ -1;
    $89 = HEAP32[285464>>2]|0;
    $90 = $89 & $88;
    HEAP32[285464>>2] = $90;
    break;
   }
   $91 = ($78|0)==($80|0);
   if ($91) {
    $$pre = (($78) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $92 = ($78>>>0)<($4>>>0);
    if ($92) {
     _abort();
     // unreachable;
    }
    $93 = (($78) + 8|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ($94|0)==($3|0);
    if ($95) {
     $$pre$phiZ2D = $93;
    } else {
     _abort();
     // unreachable;
    }
   }
   $96 = (($76) + 12|0);
   HEAP32[$96>>2] = $78;
   HEAP32[$$pre$phiZ2D>>2] = $76;
  } else {
   $$sum = (($2) + 24)|0;
   $97 = (($p) + ($$sum)|0);
   $98 = HEAP32[$97>>2]|0;
   $$sum2 = (($2) + 12)|0;
   $99 = (($p) + ($$sum2)|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = ($100|0)==($3|0);
   do {
    if ($101) {
     $$sum4 = (($2) + 20)|0;
     $111 = (($p) + ($$sum4)|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = ($112|0)==(0|0);
     if ($113) {
      $$sum3 = (($2) + 16)|0;
      $114 = (($p) + ($$sum3)|0);
      $115 = HEAP32[$114>>2]|0;
      $116 = ($115|0)==(0|0);
      if ($116) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $115;$RP$0 = $114;
      }
     } else {
      $R$0 = $112;$RP$0 = $111;
     }
     while(1) {
      $117 = (($R$0) + 20|0);
      $118 = HEAP32[$117>>2]|0;
      $119 = ($118|0)==(0|0);
      if (!($119)) {
       $R$0 = $118;$RP$0 = $117;
       continue;
      }
      $120 = (($R$0) + 16|0);
      $121 = HEAP32[$120>>2]|0;
      $122 = ($121|0)==(0|0);
      if ($122) {
       break;
      } else {
       $R$0 = $121;$RP$0 = $120;
      }
     }
     $123 = ($RP$0>>>0)<($4>>>0);
     if ($123) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum14 = (($2) + 8)|0;
     $102 = (($p) + ($$sum14)|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = ($103>>>0)<($4>>>0);
     if ($104) {
      _abort();
      // unreachable;
     }
     $105 = (($103) + 12|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = ($106|0)==($3|0);
     if (!($107)) {
      _abort();
      // unreachable;
     }
     $108 = (($100) + 8|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = ($109|0)==($3|0);
     if ($110) {
      HEAP32[$105>>2] = $100;
      HEAP32[$108>>2] = $103;
      $R$1 = $100;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $124 = ($98|0)==(0|0);
   if (!($124)) {
    $$sum11 = (($2) + 28)|0;
    $125 = (($p) + ($$sum11)|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ((285464 + ($126<<2)|0) + 304|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = ($3|0)==($128|0);
    if ($129) {
     HEAP32[$127>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $130 = 1 << $126;
      $131 = $130 ^ -1;
      $132 = HEAP32[((285464 + 4|0))>>2]|0;
      $133 = $132 & $131;
      HEAP32[((285464 + 4|0))>>2] = $133;
      break;
     }
    } else {
     $134 = HEAP32[((285464 + 16|0))>>2]|0;
     $135 = ($98>>>0)<($134>>>0);
     if ($135) {
      _abort();
      // unreachable;
     }
     $136 = (($98) + 16|0);
     $137 = HEAP32[$136>>2]|0;
     $138 = ($137|0)==($3|0);
     if ($138) {
      HEAP32[$136>>2] = $R$1;
     } else {
      $139 = (($98) + 20|0);
      HEAP32[$139>>2] = $R$1;
     }
     $140 = ($R$1|0)==(0|0);
     if ($140) {
      break;
     }
    }
    $141 = HEAP32[((285464 + 16|0))>>2]|0;
    $142 = ($R$1>>>0)<($141>>>0);
    if ($142) {
     _abort();
     // unreachable;
    }
    $143 = (($R$1) + 24|0);
    HEAP32[$143>>2] = $98;
    $$sum12 = (($2) + 16)|0;
    $144 = (($p) + ($$sum12)|0);
    $145 = HEAP32[$144>>2]|0;
    $146 = ($145|0)==(0|0);
    do {
     if (!($146)) {
      $147 = HEAP32[((285464 + 16|0))>>2]|0;
      $148 = ($145>>>0)<($147>>>0);
      if ($148) {
       _abort();
       // unreachable;
      } else {
       $149 = (($R$1) + 16|0);
       HEAP32[$149>>2] = $145;
       $150 = (($145) + 24|0);
       HEAP32[$150>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum13 = (($2) + 20)|0;
    $151 = (($p) + ($$sum13)|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = ($152|0)==(0|0);
    if (!($153)) {
     $154 = HEAP32[((285464 + 16|0))>>2]|0;
     $155 = ($152>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     } else {
      $156 = (($R$1) + 20|0);
      HEAP32[$156>>2] = $152;
      $157 = (($152) + 24|0);
      HEAP32[$157>>2] = $R$1;
      break;
     }
    }
   }
  }
 } while(0);
 $158 = ($72>>>0)<(16);
 if ($158) {
  $159 = HEAP32[$0>>2]|0;
  $160 = $159 & 1;
  $161 = $70 | $160;
  $162 = $161 | 2;
  HEAP32[$0>>2] = $162;
  $$sum910 = $70 | 4;
  $163 = (($p) + ($$sum910)|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = $164 | 1;
  HEAP32[$163>>2] = $165;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 } else {
  $166 = (($p) + ($nb)|0);
  $167 = HEAP32[$0>>2]|0;
  $168 = $167 & 1;
  $169 = $168 | $nb;
  $170 = $169 | 2;
  HEAP32[$0>>2] = $170;
  $$sum5 = (($nb) + 4)|0;
  $171 = (($p) + ($$sum5)|0);
  $172 = $72 | 3;
  HEAP32[$171>>2] = $172;
  $$sum78 = $70 | 4;
  $173 = (($p) + ($$sum78)|0);
  $174 = HEAP32[$173>>2]|0;
  $175 = $174 | 1;
  HEAP32[$173>>2] = $175;
  _dispose_chunk($166,$72);
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 return 0|0;
}
function _realloc_in_place($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $oldmem$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return (0|0);
 }
 $1 = ($bytes>>>0)>(4294967231);
 if ($1) {
  $2 = (___errno_location()|0);
  HEAP32[$2>>2] = 12;
  STACKTOP = sp;return (0|0);
 }
 $3 = ($bytes>>>0)<(11);
 if ($3) {
  $7 = 16;
 } else {
  $4 = (($bytes) + 11)|0;
  $5 = $4 & -8;
  $7 = $5;
 }
 $6 = (($oldmem) + -8|0);
 $8 = (_try_realloc_chunk($6,$7)|0);
 $9 = ($8|0)==($6|0);
 $oldmem$ = $9 ? $oldmem : 0;
 STACKTOP = sp;return ($oldmem$|0);
}
function _memalign($alignment,$bytes) {
 $alignment = $alignment|0;
 $bytes = $bytes|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($alignment>>>0)<(9);
 if ($0) {
  $1 = (_malloc($bytes)|0);
  $$0 = $1;
 } else {
  $2 = (_internal_memalign($alignment,$bytes)|0);
  $$0 = $2;
 }
 STACKTOP = sp;return ($$0|0);
}
function _internal_memalign($alignment,$bytes) {
 $alignment = $alignment|0;
 $bytes = $bytes|0;
 var $$1 = 0, $$alignment = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $$sum6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $a$0 = 0, $mem$0 = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($alignment>>>0)<(16);
 $$alignment = $0 ? 16 : $alignment;
 $1 = (($$alignment) + -1)|0;
 $2 = $1 & $$alignment;
 $3 = ($2|0)==(0);
 if ($3) {
  $$1 = $$alignment;
 } else {
  $a$0 = 16;
  while(1) {
   $4 = ($a$0>>>0)<($$alignment>>>0);
   $5 = $a$0 << 1;
   if ($4) {
    $a$0 = $5;
   } else {
    $$1 = $a$0;
    break;
   }
  }
 }
 $6 = (-64 - ($$1))|0;
 $7 = ($6>>>0)>($bytes>>>0);
 if (!($7)) {
  $8 = (___errno_location()|0);
  HEAP32[$8>>2] = 12;
  $mem$0 = 0;
  STACKTOP = sp;return ($mem$0|0);
 }
 $9 = ($bytes>>>0)<(11);
 if ($9) {
  $14 = 16;
 } else {
  $10 = (($bytes) + 11)|0;
  $11 = $10 & -8;
  $14 = $11;
 }
 $12 = (($$1) + 12)|0;
 $13 = (($12) + ($14))|0;
 $15 = (_malloc($13)|0);
 $16 = ($15|0)==(0|0);
 if ($16) {
  $mem$0 = 0;
  STACKTOP = sp;return ($mem$0|0);
 }
 $17 = (($15) + -8|0);
 $18 = $15;
 $19 = (($$1) + -1)|0;
 $20 = $18 & $19;
 $21 = ($20|0)==(0);
 do {
  if ($21) {
   $p$0 = $17;
  } else {
   $22 = (($15) + ($19)|0);
   $23 = $22;
   $24 = (0 - ($$1))|0;
   $25 = $23 & $24;
   $26 = $25;
   $27 = (($26) + -8|0);
   $28 = $27;
   $29 = $17;
   $30 = (($28) - ($29))|0;
   $31 = ($30>>>0)>(15);
   if ($31) {
    $34 = $27;
   } else {
    $$sum3 = (($$1) + -8)|0;
    $32 = (($26) + ($$sum3)|0);
    $34 = $32;
   }
   $33 = $34;
   $35 = (($33) - ($29))|0;
   $36 = (($15) + -4|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = $37 & -8;
   $39 = (($38) - ($35))|0;
   $40 = $37 & 3;
   $41 = ($40|0)==(0);
   if ($41) {
    $42 = HEAP32[$17>>2]|0;
    $43 = (($42) + ($35))|0;
    HEAP32[$34>>2] = $43;
    $44 = (($34) + 4|0);
    HEAP32[$44>>2] = $39;
    $p$0 = $34;
    break;
   } else {
    $45 = (($34) + 4|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = $46 & 1;
    $48 = $39 | $47;
    $49 = $48 | 2;
    HEAP32[$45>>2] = $49;
    $$sum4 = (($39) + 4)|0;
    $50 = (($34) + ($$sum4)|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = $51 | 1;
    HEAP32[$50>>2] = $52;
    $53 = HEAP32[$36>>2]|0;
    $54 = $53 & 1;
    $55 = $35 | $54;
    $56 = $55 | 2;
    HEAP32[$36>>2] = $56;
    $$sum6 = (($35) + -4)|0;
    $57 = (($15) + ($$sum6)|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = $58 | 1;
    HEAP32[$57>>2] = $59;
    _dispose_chunk($17,$35);
    $p$0 = $34;
    break;
   }
  }
 } while(0);
 $60 = (($p$0) + 4|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = $61 & 3;
 $63 = ($62|0)==(0);
 if (!($63)) {
  $64 = $61 & -8;
  $65 = (($14) + 16)|0;
  $66 = ($64>>>0)>($65>>>0);
  if ($66) {
   $67 = (($64) - ($14))|0;
   $68 = (($p$0) + ($14)|0);
   $69 = $61 & 1;
   $70 = $14 | $69;
   $71 = $70 | 2;
   HEAP32[$60>>2] = $71;
   $$sum1 = $14 | 4;
   $72 = (($p$0) + ($$sum1)|0);
   $73 = $67 | 3;
   HEAP32[$72>>2] = $73;
   $$sum2 = $64 | 4;
   $74 = (($p$0) + ($$sum2)|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = $75 | 1;
   HEAP32[$74>>2] = $76;
   _dispose_chunk($68,$67);
  }
 }
 $77 = (($p$0) + 8|0);
 $mem$0 = $77;
 STACKTOP = sp;return ($mem$0|0);
}
function _posix_memalign($pp,$alignment,$bytes) {
 $pp = $pp|0;
 $alignment = $alignment|0;
 $bytes = $bytes|0;
 var $$0 = 0, $$alignment = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mem$0 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($alignment|0)==(8);
 if ($0) {
  $1 = (_malloc($bytes)|0);
  $mem$0 = $1;
  label = 7;
 } else {
  $2 = $alignment >>> 2;
  $3 = $alignment & 3;
  $4 = ($3|0)!=(0);
  $5 = ($2|0)==(0);
  $or$cond = $4 | $5;
  if ($or$cond) {
   $$0 = 22;
  } else {
   $6 = (($2) + 1073741823)|0;
   $7 = $6 & $2;
   $8 = ($7|0)==(0);
   if ($8) {
    $9 = (-64 - ($alignment))|0;
    $10 = ($9>>>0)<($bytes>>>0);
    if ($10) {
     $$0 = 12;
    } else {
     $11 = ($alignment>>>0)<(16);
     $$alignment = $11 ? 16 : $alignment;
     $12 = (_internal_memalign($$alignment,$bytes)|0);
     $mem$0 = $12;
     label = 7;
    }
   } else {
    $$0 = 22;
   }
  }
 }
 if ((label|0) == 7) {
  $13 = ($mem$0|0)==(0|0);
  if ($13) {
   $$0 = 12;
  } else {
   HEAP32[$pp>>2] = $mem$0;
   $$0 = 0;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _valloc($bytes) {
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[285936>>2]|0;
 $1 = ($0|0)==(0);
 if (!($1)) {
  $9 = HEAP32[((285936 + 4|0))>>2]|0;
  $10 = (_memalign($9,$bytes)|0);
  STACKTOP = sp;return ($10|0);
 }
 $2 = (_sysconf(30)|0);
 $3 = (($2) + -1)|0;
 $4 = $3 & $2;
 $5 = ($4|0)==(0);
 if (!($5)) {
  _abort();
  // unreachable;
 }
 HEAP32[((285936 + 8|0))>>2] = $2;
 HEAP32[((285936 + 4|0))>>2] = $2;
 HEAP32[((285936 + 12|0))>>2] = -1;
 HEAP32[((285936 + 16|0))>>2] = -1;
 HEAP32[((285936 + 20|0))>>2] = 0;
 HEAP32[((285464 + 444|0))>>2] = 0;
 $6 = (_time((0|0))|0);
 $7 = $6 & -16;
 $8 = $7 ^ 1431655768;
 HEAP32[285936>>2] = $8;
 $9 = HEAP32[((285936 + 4|0))>>2]|0;
 $10 = (_memalign($9,$bytes)|0);
 STACKTOP = sp;return ($10|0);
}
function _pvalloc($bytes) {
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[285936>>2]|0;
 $1 = ($0|0)==(0);
 do {
  if ($1) {
   $2 = (_sysconf(30)|0);
   $3 = (($2) + -1)|0;
   $4 = $3 & $2;
   $5 = ($4|0)==(0);
   if ($5) {
    HEAP32[((285936 + 8|0))>>2] = $2;
    HEAP32[((285936 + 4|0))>>2] = $2;
    HEAP32[((285936 + 12|0))>>2] = -1;
    HEAP32[((285936 + 16|0))>>2] = -1;
    HEAP32[((285936 + 20|0))>>2] = 0;
    HEAP32[((285464 + 444|0))>>2] = 0;
    $6 = (_time((0|0))|0);
    $7 = $6 & -16;
    $8 = $7 ^ 1431655768;
    HEAP32[285936>>2] = $8;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $9 = HEAP32[((285936 + 4|0))>>2]|0;
 $10 = (($bytes) + -1)|0;
 $11 = (($10) + ($9))|0;
 $12 = (0 - ($9))|0;
 $13 = $11 & $12;
 $14 = (_memalign($9,$13)|0);
 STACKTOP = sp;return ($14|0);
}
function _independent_calloc($n_elements,$elem_size,$chunks) {
 $n_elements = $n_elements|0;
 $elem_size = $elem_size|0;
 $chunks = $chunks|0;
 var $0 = 0, $sz = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $sz = sp;
 HEAP32[$sz>>2] = $elem_size;
 $0 = (_ialloc($n_elements,$sz,3,$chunks)|0);
 STACKTOP = sp;return ($0|0);
}
function _ialloc($n_elements,$sizes,$opts,$chunks) {
 $n_elements = $n_elements|0;
 $sizes = $sizes|0;
 $opts = $opts|0;
 $chunks = $chunks|0;
 var $$0 = 0, $$sum = 0, $$sum11 = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0;
 var $array_size$0 = 0, $contents_size$07 = 0, $contents_size$1 = 0, $element_size$0 = 0, $i$08 = 0, $i$15 = 0, $i$15$us = 0, $marray$0 = 0, $marray$1 = 0, $p$0$in$lcssa = 0, $p$0$in3 = 0, $p$0$in3$us = 0, $remainder_size$0 = 0, $remainder_size$1$lcssa = 0, $remainder_size$14 = 0, $remainder_size$14$us = 0, $size$0$us = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[285936>>2]|0;
 $1 = ($0|0)==(0);
 do {
  if ($1) {
   $2 = (_sysconf(30)|0);
   $3 = (($2) + -1)|0;
   $4 = $3 & $2;
   $5 = ($4|0)==(0);
   if ($5) {
    HEAP32[((285936 + 8|0))>>2] = $2;
    HEAP32[((285936 + 4|0))>>2] = $2;
    HEAP32[((285936 + 12|0))>>2] = -1;
    HEAP32[((285936 + 16|0))>>2] = -1;
    HEAP32[((285936 + 20|0))>>2] = 0;
    HEAP32[((285464 + 444|0))>>2] = 0;
    $6 = (_time((0|0))|0);
    $7 = $6 & -16;
    $8 = $7 ^ 1431655768;
    HEAP32[285936>>2] = $8;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $9 = ($chunks|0)==(0|0);
 $10 = ($n_elements|0)==(0);
 do {
  if ($9) {
   if ($10) {
    $11 = (_malloc(0)|0);
    $$0 = $11;
    STACKTOP = sp;return ($$0|0);
   } else {
    $12 = $n_elements << 2;
    $13 = ($12>>>0)<(11);
    if ($13) {
     $array_size$0 = 16;$marray$0 = 0;
     break;
    }
    $14 = (($12) + 11)|0;
    $15 = $14 & -8;
    $array_size$0 = $15;$marray$0 = 0;
    break;
   }
  } else {
   if ($10) {
    $$0 = $chunks;
    STACKTOP = sp;return ($$0|0);
   } else {
    $array_size$0 = 0;$marray$0 = $chunks;
   }
  }
 } while(0);
 $16 = $opts & 1;
 $17 = ($16|0)==(0);
 if ($17) {
  if ($10) {
   $contents_size$1 = 0;$element_size$0 = 0;
  } else {
   $contents_size$07 = 0;$i$08 = 0;
   while(1) {
    $24 = (($sizes) + ($i$08<<2)|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ($25>>>0)<(11);
    if ($26) {
     $30 = 16;
    } else {
     $27 = (($25) + 11)|0;
     $28 = $27 & -8;
     $30 = $28;
    }
    $29 = (($30) + ($contents_size$07))|0;
    $31 = (($i$08) + 1)|0;
    $32 = ($31|0)==($n_elements|0);
    if ($32) {
     $contents_size$1 = $29;$element_size$0 = 0;
     break;
    } else {
     $contents_size$07 = $29;$i$08 = $31;
    }
   }
  }
 } else {
  $18 = HEAP32[$sizes>>2]|0;
  $19 = ($18>>>0)<(11);
  if ($19) {
   $23 = 16;
  } else {
   $20 = (($18) + 11)|0;
   $21 = $20 & -8;
   $23 = $21;
  }
  $22 = Math_imul($23, $n_elements)|0;
  $contents_size$1 = $22;$element_size$0 = $23;
 }
 $33 = (($array_size$0) + -4)|0;
 $34 = (($33) + ($contents_size$1))|0;
 $35 = (_malloc($34)|0);
 $36 = ($35|0)==(0|0);
 if ($36) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $37 = (($35) + -8|0);
 $38 = (($35) + -4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $39 & -8;
 $41 = $opts & 2;
 $42 = ($41|0)==(0);
 if (!($42)) {
  $43 = (-4 - ($array_size$0))|0;
  $44 = (($43) + ($40))|0;
  _memset(($35|0),0,($44|0))|0;
 }
 $45 = ($marray$0|0)==(0|0);
 if ($45) {
  $46 = (($40) - ($contents_size$1))|0;
  $47 = (($35) + ($contents_size$1)|0);
  $48 = $46 | 3;
  $$sum2 = (($contents_size$1) + -4)|0;
  $49 = (($35) + ($$sum2)|0);
  HEAP32[$49>>2] = $48;
  $marray$1 = $47;$remainder_size$0 = $contents_size$1;
 } else {
  $marray$1 = $marray$0;$remainder_size$0 = $40;
 }
 HEAP32[$marray$1>>2] = $35;
 $50 = (($n_elements) + -1)|0;
 $51 = ($50|0)==(0);
 L38: do {
  if ($51) {
   $p$0$in$lcssa = $37;$remainder_size$1$lcssa = $remainder_size$0;
  } else {
   $52 = ($element_size$0|0)==(0);
   if ($52) {
    $i$15$us = 0;$p$0$in3$us = $37;$remainder_size$14$us = $remainder_size$0;
   } else {
    $i$15 = 0;$p$0$in3 = $37;$remainder_size$14 = $remainder_size$0;
    while(1) {
     $66 = (($remainder_size$14) - ($element_size$0))|0;
     $67 = $element_size$0 | 3;
     $68 = (($p$0$in3) + 4|0);
     HEAP32[$68>>2] = $67;
     $69 = (($p$0$in3) + ($element_size$0)|0);
     $70 = (($i$15) + 1)|0;
     $$sum = (($element_size$0) + 8)|0;
     $71 = (($p$0$in3) + ($$sum)|0);
     $72 = (($marray$1) + ($70<<2)|0);
     HEAP32[$72>>2] = $71;
     $73 = ($70|0)==($50|0);
     if ($73) {
      $p$0$in$lcssa = $69;$remainder_size$1$lcssa = $66;
      break L38;
     } else {
      $i$15 = $70;$p$0$in3 = $69;$remainder_size$14 = $66;
     }
    }
   }
   while(1) {
    $53 = (($sizes) + ($i$15$us<<2)|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = ($54>>>0)<(11);
    if ($55) {
     $size$0$us = 16;
    } else {
     $56 = (($54) + 11)|0;
     $57 = $56 & -8;
     $size$0$us = $57;
    }
    $58 = (($remainder_size$14$us) - ($size$0$us))|0;
    $59 = $size$0$us | 3;
    $60 = (($p$0$in3$us) + 4|0);
    HEAP32[$60>>2] = $59;
    $61 = (($p$0$in3$us) + ($size$0$us)|0);
    $62 = (($i$15$us) + 1)|0;
    $$sum11 = (($size$0$us) + 8)|0;
    $63 = (($p$0$in3$us) + ($$sum11)|0);
    $64 = (($marray$1) + ($62<<2)|0);
    HEAP32[$64>>2] = $63;
    $65 = ($62|0)==($50|0);
    if ($65) {
     $p$0$in$lcssa = $61;$remainder_size$1$lcssa = $58;
     break;
    } else {
     $i$15$us = $62;$p$0$in3$us = $61;$remainder_size$14$us = $58;
    }
   }
  }
 } while(0);
 $74 = $remainder_size$1$lcssa | 3;
 $75 = (($p$0$in$lcssa) + 4|0);
 HEAP32[$75>>2] = $74;
 $$0 = $marray$1;
 STACKTOP = sp;return ($$0|0);
}
function _independent_comalloc($n_elements,$sizes,$chunks) {
 $n_elements = $n_elements|0;
 $sizes = $sizes|0;
 $chunks = $chunks|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ialloc($n_elements,$sizes,0,$chunks)|0);
 STACKTOP = sp;return ($0|0);
}
function _bulk_free($array,$nelem) {
 $array = $array|0;
 $nelem = $nelem|0;
 var $$pre$i = 0, $$pre$phi$iZ2D = 0, $$sum$i = 0, $$sum1$i = 0, $$sum23$i = 0, $$sum5$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a$06$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($array) + ($nelem<<2)|0);
 $1 = ($nelem|0)==(0);
 if ($1) {
  STACKTOP = sp;return 0;
 } else {
  $a$06$i = $array;
 }
 L3: while(1) {
  $2 = HEAP32[$a$06$i>>2]|0;
  $3 = ($2|0)==(0|0);
  do {
   if ($3) {
    $$pre$i = (($a$06$i) + 4|0);
    $$pre$phi$iZ2D = $$pre$i;
   } else {
    $4 = (($2) + -8|0);
    $5 = (($2) + -4|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = $6 & -8;
    HEAP32[$a$06$i>>2] = 0;
    $8 = HEAP32[((285464 + 16|0))>>2]|0;
    $9 = ($4>>>0)<($8>>>0);
    if ($9) {
     label = 10;
     break L3;
    }
    $10 = $6 & 3;
    $11 = ($10|0)==(1);
    if ($11) {
     label = 10;
     break L3;
    }
    $12 = (($a$06$i) + 4|0);
    $13 = (($6) + -8)|0;
    $$sum$i = $13 & -8;
    $14 = ($12|0)==($0|0);
    if (!($14)) {
     $15 = HEAP32[$12>>2]|0;
     $$sum1$i = (($$sum$i) + 8)|0;
     $16 = (($2) + ($$sum1$i)|0);
     $17 = ($15|0)==($16|0);
     if ($17) {
      $$sum23$i = $$sum$i | 4;
      $18 = (($2) + ($$sum23$i)|0);
      $19 = HEAP32[$18>>2]|0;
      $20 = $19 & -8;
      $21 = (($20) + ($7))|0;
      $22 = $6 & 1;
      $23 = $22 | $21;
      $24 = $23 | 2;
      HEAP32[$5>>2] = $24;
      $$sum5$i = (($21) + -4)|0;
      $25 = (($2) + ($$sum5$i)|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = $26 | 1;
      HEAP32[$25>>2] = $27;
      HEAP32[$12>>2] = $2;
      $$pre$phi$iZ2D = $12;
      break;
     }
    }
    _dispose_chunk($4,$7);
    $$pre$phi$iZ2D = $12;
   }
  } while(0);
  $28 = ($$pre$phi$iZ2D|0)==($0|0);
  if ($28) {
   label = 12;
   break;
  } else {
   $a$06$i = $$pre$phi$iZ2D;
  }
 }
 if ((label|0) == 10) {
  _abort();
  // unreachable;
 }
 else if ((label|0) == 12) {
  STACKTOP = sp;return 0;
 }
 return 0|0;
}
function _malloc_trim($pad) {
 $pad = $pad|0;
 var $$$i = 0, $$sum$i$i = 0, $$sum2$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $or$cond$i = 0, $released$2$i = 0, $sp$0$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[285936>>2]|0;
 $1 = ($0|0)==(0);
 do {
  if ($1) {
   $2 = (_sysconf(30)|0);
   $3 = (($2) + -1)|0;
   $4 = $3 & $2;
   $5 = ($4|0)==(0);
   if ($5) {
    HEAP32[((285936 + 8|0))>>2] = $2;
    HEAP32[((285936 + 4|0))>>2] = $2;
    HEAP32[((285936 + 12|0))>>2] = -1;
    HEAP32[((285936 + 16|0))>>2] = -1;
    HEAP32[((285936 + 20|0))>>2] = 0;
    HEAP32[((285464 + 444|0))>>2] = 0;
    $6 = (_time((0|0))|0);
    $7 = $6 & -16;
    $8 = $7 ^ 1431655768;
    HEAP32[285936>>2] = $8;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $9 = ($pad>>>0)<(4294967232);
 if (!($9)) {
  $released$2$i = 0;
  STACKTOP = sp;return ($released$2$i|0);
 }
 $10 = HEAP32[((285464 + 24|0))>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $released$2$i = 0;
  STACKTOP = sp;return ($released$2$i|0);
 }
 $12 = (($pad) + 40)|0;
 $13 = HEAP32[((285464 + 12|0))>>2]|0;
 $14 = ($13>>>0)>($12>>>0);
 if ($14) {
  $15 = HEAP32[((285936 + 8|0))>>2]|0;
  $16 = (-41 - ($pad))|0;
  $17 = (($16) + ($13))|0;
  $18 = (($17) + ($15))|0;
  $19 = (($18>>>0) / ($15>>>0))&-1;
  $sp$0$i$i = ((285464 + 448|0));
  while(1) {
   $20 = HEAP32[$sp$0$i$i>>2]|0;
   $21 = ($20>>>0)>($10>>>0);
   if (!($21)) {
    $22 = (($sp$0$i$i) + 4|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (($20) + ($23)|0);
    $25 = ($24>>>0)>($10>>>0);
    if ($25) {
     break;
    }
   }
   $26 = (($sp$0$i$i) + 8|0);
   $27 = HEAP32[$26>>2]|0;
   $sp$0$i$i = $27;
  }
  $28 = (($19) + -1)|0;
  $29 = Math_imul($28, $15)|0;
  $30 = (($sp$0$i$i) + 12|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $31 & 8;
  $33 = ($32|0)==(0);
  if ($33) {
   $34 = (_sbrk(0)|0);
   $35 = HEAP32[$sp$0$i$i>>2]|0;
   $36 = HEAP32[$22>>2]|0;
   $37 = (($35) + ($36)|0);
   $38 = ($34|0)==($37|0);
   if ($38) {
    $39 = (-2147483648 - ($15))|0;
    $40 = ($29>>>0)>(2147483646);
    $$$i = $40 ? $39 : $29;
    $41 = (0 - ($$$i))|0;
    $42 = (_sbrk(($41|0))|0);
    $43 = (_sbrk(0)|0);
    $44 = ($42|0)!=((-1)|0);
    $45 = ($43>>>0)<($34>>>0);
    $or$cond$i = $44 & $45;
    if ($or$cond$i) {
     $46 = $34;
     $47 = $43;
     $48 = (($46) - ($47))|0;
     $49 = ($34|0)==($43|0);
     if (!($49)) {
      $50 = HEAP32[$22>>2]|0;
      $51 = (($50) - ($48))|0;
      HEAP32[$22>>2] = $51;
      $52 = HEAP32[((285464 + 432|0))>>2]|0;
      $53 = (($52) - ($48))|0;
      HEAP32[((285464 + 432|0))>>2] = $53;
      $54 = HEAP32[((285464 + 24|0))>>2]|0;
      $55 = HEAP32[((285464 + 12|0))>>2]|0;
      $56 = (($55) - ($48))|0;
      $57 = (($54) + 8|0);
      $58 = $57;
      $59 = $58 & 7;
      $60 = ($59|0)==(0);
      if ($60) {
       $64 = 0;
      } else {
       $61 = (0 - ($58))|0;
       $62 = $61 & 7;
       $64 = $62;
      }
      $63 = (($54) + ($64)|0);
      $65 = (($56) - ($64))|0;
      HEAP32[((285464 + 24|0))>>2] = $63;
      HEAP32[((285464 + 12|0))>>2] = $65;
      $66 = $65 | 1;
      $$sum$i$i = (($64) + 4)|0;
      $67 = (($54) + ($$sum$i$i)|0);
      HEAP32[$67>>2] = $66;
      $$sum2$i$i = (($56) + 4)|0;
      $68 = (($54) + ($$sum2$i$i)|0);
      HEAP32[$68>>2] = 40;
      $69 = HEAP32[((285936 + 16|0))>>2]|0;
      HEAP32[((285464 + 28|0))>>2] = $69;
      $released$2$i = 1;
      STACKTOP = sp;return ($released$2$i|0);
     }
    }
   }
  }
 }
 $70 = HEAP32[((285464 + 12|0))>>2]|0;
 $71 = HEAP32[((285464 + 28|0))>>2]|0;
 $72 = ($70>>>0)>($71>>>0);
 if (!($72)) {
  $released$2$i = 0;
  STACKTOP = sp;return ($released$2$i|0);
 }
 HEAP32[((285464 + 28|0))>>2] = -1;
 $released$2$i = 0;
 STACKTOP = sp;return ($released$2$i|0);
}
function _malloc_footprint() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((285464 + 432|0))>>2]|0;
 STACKTOP = sp;return ($0|0);
}
function _malloc_max_footprint() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((285464 + 436|0))>>2]|0;
 STACKTOP = sp;return ($0|0);
}
function _malloc_footprint_limit() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((285464 + 440|0))>>2]|0;
 $1 = ($0|0)==(0);
 $2 = $1 ? -1 : $0;
 STACKTOP = sp;return ($2|0);
}
function _malloc_set_footprint_limit($bytes) {
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $result$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes|0)==(-1);
 if ($0) {
  $result$0 = 0;
 } else {
  $1 = HEAP32[((285936 + 8|0))>>2]|0;
  $2 = (($bytes) + -1)|0;
  $3 = (($2) + ($1))|0;
  $4 = (0 - ($1))|0;
  $5 = $3 & $4;
  $result$0 = $5;
 }
 HEAP32[((285464 + 440|0))>>2] = $result$0;
 STACKTOP = sp;return ($result$0|0);
}
function _mallinfo($agg$result) {
 $agg$result = $agg$result|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mfree$09$i = 0, $mfree$1$lcssa$i = 0, $mfree$13$i = 0;
 var $mfree$2$i = 0, $nfree$08$i = 0, $nfree$1$lcssa$i = 0, $nfree$12$i = 0, $nfree$2$i = 0, $nm$sroa$0$0$i = 0, $nm$sroa$1$0$i = 0, $nm$sroa$3$0$i = 0, $nm$sroa$4$0$i = 0, $nm$sroa$6$0$i = 0, $nm$sroa$7$0$i = 0, $nm$sroa$8$0$i = 0, $or$cond$i = 0, $q$0$in5$i = 0, $s$011$i = 0, $sum$010$i = 0, $sum$1$lcssa$i = 0, $sum$14$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[285936>>2]|0;
 $1 = ($0|0)==(0);
 do {
  if ($1) {
   $2 = (_sysconf(30)|0);
   $3 = (($2) + -1)|0;
   $4 = $3 & $2;
   $5 = ($4|0)==(0);
   if ($5) {
    HEAP32[((285936 + 8|0))>>2] = $2;
    HEAP32[((285936 + 4|0))>>2] = $2;
    HEAP32[((285936 + 12|0))>>2] = -1;
    HEAP32[((285936 + 16|0))>>2] = -1;
    HEAP32[((285936 + 20|0))>>2] = 0;
    HEAP32[((285464 + 444|0))>>2] = 0;
    $6 = (_time((0|0))|0);
    $7 = $6 & -16;
    $8 = $7 ^ 1431655768;
    HEAP32[285936>>2] = $8;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $9 = HEAP32[((285464 + 24|0))>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $nm$sroa$0$0$i = 0;$nm$sroa$1$0$i = 0;$nm$sroa$3$0$i = 0;$nm$sroa$4$0$i = 0;$nm$sroa$6$0$i = 0;$nm$sroa$7$0$i = 0;$nm$sroa$8$0$i = 0;
 } else {
  $11 = HEAP32[((285464 + 12|0))>>2]|0;
  $12 = (($11) + 40)|0;
  $mfree$09$i = $12;$nfree$08$i = 1;$s$011$i = ((285464 + 448|0));$sum$010$i = $12;
  while(1) {
   $13 = HEAP32[$s$011$i>>2]|0;
   $14 = (($13) + 8|0);
   $15 = $14;
   $16 = $15 & 7;
   $17 = ($16|0)==(0);
   if ($17) {
    $21 = 0;
   } else {
    $18 = (0 - ($15))|0;
    $19 = $18 & 7;
    $21 = $19;
   }
   $20 = (($13) + ($21)|0);
   $22 = (($s$011$i) + 4|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (($13) + ($23)|0);
   $mfree$13$i = $mfree$09$i;$nfree$12$i = $nfree$08$i;$q$0$in5$i = $20;$sum$14$i = $sum$010$i;
   while(1) {
    $25 = ($q$0$in5$i>>>0)>=($24>>>0);
    $26 = ($q$0$in5$i|0)==($9|0);
    $or$cond$i = $25 | $26;
    if ($or$cond$i) {
     $mfree$1$lcssa$i = $mfree$13$i;$nfree$1$lcssa$i = $nfree$12$i;$sum$1$lcssa$i = $sum$14$i;
     break;
    }
    $27 = (($q$0$in5$i) + 4|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = ($28|0)==(7);
    if ($29) {
     $mfree$1$lcssa$i = $mfree$13$i;$nfree$1$lcssa$i = $nfree$12$i;$sum$1$lcssa$i = $sum$14$i;
     break;
    }
    $30 = $28 & -8;
    $31 = (($30) + ($sum$14$i))|0;
    $32 = $28 & 3;
    $33 = ($32|0)==(1);
    if ($33) {
     $34 = (($30) + ($mfree$13$i))|0;
     $35 = (($nfree$12$i) + 1)|0;
     $mfree$2$i = $34;$nfree$2$i = $35;
    } else {
     $mfree$2$i = $mfree$13$i;$nfree$2$i = $nfree$12$i;
    }
    $36 = (($q$0$in5$i) + ($30)|0);
    $37 = ($36>>>0)<($13>>>0);
    if ($37) {
     $mfree$1$lcssa$i = $mfree$2$i;$nfree$1$lcssa$i = $nfree$2$i;$sum$1$lcssa$i = $31;
     break;
    } else {
     $mfree$13$i = $mfree$2$i;$nfree$12$i = $nfree$2$i;$q$0$in5$i = $36;$sum$14$i = $31;
    }
   }
   $38 = (($s$011$i) + 8|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ($39|0)==(0|0);
   if ($40) {
    break;
   } else {
    $mfree$09$i = $mfree$1$lcssa$i;$nfree$08$i = $nfree$1$lcssa$i;$s$011$i = $39;$sum$010$i = $sum$1$lcssa$i;
   }
  }
  $41 = HEAP32[((285464 + 432|0))>>2]|0;
  $42 = (($41) - ($sum$1$lcssa$i))|0;
  $43 = HEAP32[((285464 + 436|0))>>2]|0;
  $44 = (($41) - ($mfree$1$lcssa$i))|0;
  $nm$sroa$0$0$i = $sum$1$lcssa$i;$nm$sroa$1$0$i = $nfree$1$lcssa$i;$nm$sroa$3$0$i = $42;$nm$sroa$4$0$i = $43;$nm$sroa$6$0$i = $44;$nm$sroa$7$0$i = $mfree$1$lcssa$i;$nm$sroa$8$0$i = $11;
 }
 HEAP32[$agg$result>>2] = $nm$sroa$0$0$i;
 $45 = (($agg$result) + 4|0);
 HEAP32[$45>>2] = $nm$sroa$1$0$i;
 $46 = (($agg$result) + 8|0);
 $47 = $46;
 $48 = $47;
 HEAP32[$48>>2] = 0;
 $49 = (($47) + 4)|0;
 $50 = $49;
 HEAP32[$50>>2] = 0;
 $51 = (($agg$result) + 16|0);
 HEAP32[$51>>2] = $nm$sroa$3$0$i;
 $52 = (($agg$result) + 20|0);
 HEAP32[$52>>2] = $nm$sroa$4$0$i;
 $53 = (($agg$result) + 24|0);
 HEAP32[$53>>2] = 0;
 $54 = (($agg$result) + 28|0);
 HEAP32[$54>>2] = $nm$sroa$6$0$i;
 $55 = (($agg$result) + 32|0);
 HEAP32[$55>>2] = $nm$sroa$7$0$i;
 $56 = (($agg$result) + 36|0);
 HEAP32[$56>>2] = $nm$sroa$8$0$i;
 STACKTOP = sp;return;
}
function _malloc_stats() {
 var $$neg2$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $fp$0$i = 0, $maxfp$0$i = 0, $or$cond$i = 0, $q$0$in4$i = 0, $s$06$i = 0, $used$05$i = 0, $used$1$lcssa$i = 0, $used$13$i = 0, $used$2$i = 0, $used$3$i = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer4 = sp;
 $0 = HEAP32[285936>>2]|0;
 $1 = ($0|0)==(0);
 do {
  if ($1) {
   $2 = (_sysconf(30)|0);
   $3 = (($2) + -1)|0;
   $4 = $3 & $2;
   $5 = ($4|0)==(0);
   if ($5) {
    HEAP32[((285936 + 8|0))>>2] = $2;
    HEAP32[((285936 + 4|0))>>2] = $2;
    HEAP32[((285936 + 12|0))>>2] = -1;
    HEAP32[((285936 + 16|0))>>2] = -1;
    HEAP32[((285936 + 20|0))>>2] = 0;
    HEAP32[((285464 + 444|0))>>2] = 0;
    $6 = (_time((0|0))|0);
    $7 = $6 & -16;
    $8 = $7 ^ 1431655768;
    HEAP32[285936>>2] = $8;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $9 = HEAP32[((285464 + 24|0))>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $fp$0$i = 0;$maxfp$0$i = 0;$used$3$i = 0;
 } else {
  $11 = HEAP32[((285464 + 436|0))>>2]|0;
  $12 = HEAP32[((285464 + 432|0))>>2]|0;
  $13 = HEAP32[((285464 + 12|0))>>2]|0;
  $$neg2$i = (($12) + -40)|0;
  $14 = (($$neg2$i) - ($13))|0;
  $s$06$i = ((285464 + 448|0));$used$05$i = $14;
  while(1) {
   $15 = HEAP32[$s$06$i>>2]|0;
   $16 = (($15) + 8|0);
   $17 = $16;
   $18 = $17 & 7;
   $19 = ($18|0)==(0);
   if ($19) {
    $23 = 0;
   } else {
    $20 = (0 - ($17))|0;
    $21 = $20 & 7;
    $23 = $21;
   }
   $22 = (($15) + ($23)|0);
   $24 = (($s$06$i) + 4|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = (($15) + ($25)|0);
   $q$0$in4$i = $22;$used$13$i = $used$05$i;
   while(1) {
    $27 = ($q$0$in4$i>>>0)>=($26>>>0);
    $28 = ($q$0$in4$i|0)==($9|0);
    $or$cond$i = $27 | $28;
    if ($or$cond$i) {
     $used$1$lcssa$i = $used$13$i;
     break;
    }
    $29 = (($q$0$in4$i) + 4|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = ($30|0)==(7);
    if ($31) {
     $used$1$lcssa$i = $used$13$i;
     break;
    }
    $32 = $30 & 3;
    $33 = ($32|0)==(1);
    $34 = $30 & -8;
    $35 = $33 ? $34 : 0;
    $used$2$i = (($used$13$i) - ($35))|0;
    $36 = (($q$0$in4$i) + ($34)|0);
    $37 = ($36>>>0)<($15>>>0);
    if ($37) {
     $used$1$lcssa$i = $used$2$i;
     break;
    } else {
     $q$0$in4$i = $36;$used$13$i = $used$2$i;
    }
   }
   $38 = (($s$06$i) + 8|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ($39|0)==(0|0);
   if ($40) {
    $fp$0$i = $12;$maxfp$0$i = $11;$used$3$i = $used$1$lcssa$i;
    break;
   } else {
    $s$06$i = $39;$used$05$i = $used$1$lcssa$i;
   }
  }
 }
 $41 = HEAP32[_stderr>>2]|0;
 HEAP32[$vararg_buffer4>>2] = $maxfp$0$i;
 (_fprintf(($41|0),(285960|0),($vararg_buffer4|0))|0);
 HEAP32[$vararg_buffer4>>2] = $fp$0$i;
 (_fprintf(($41|0),(285992|0),($vararg_buffer4|0))|0);
 HEAP32[$vararg_buffer4>>2] = $used$3$i;
 (_fprintf(($41|0),(286024|0),($vararg_buffer4|0))|0);
 STACKTOP = sp;return;
}
function _mallopt($param_number,$value) {
 $param_number = $param_number|0;
 $value = $value|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[285936>>2]|0;
 $1 = ($0|0)==(0);
 do {
  if ($1) {
   $2 = (_sysconf(30)|0);
   $3 = (($2) + -1)|0;
   $4 = $3 & $2;
   $5 = ($4|0)==(0);
   if ($5) {
    HEAP32[((285936 + 8|0))>>2] = $2;
    HEAP32[((285936 + 4|0))>>2] = $2;
    HEAP32[((285936 + 12|0))>>2] = -1;
    HEAP32[((285936 + 16|0))>>2] = -1;
    HEAP32[((285936 + 20|0))>>2] = 0;
    HEAP32[((285464 + 444|0))>>2] = 0;
    $6 = (_time((0|0))|0);
    $7 = $6 & -16;
    $8 = $7 ^ 1431655768;
    HEAP32[285936>>2] = $8;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 if ((($param_number|0) == -3)) {
  HEAP32[((285936 + 12|0))>>2] = $value;
  $$0$i = 1;
 } else if ((($param_number|0) == -1)) {
  HEAP32[((285936 + 16|0))>>2] = $value;
  $$0$i = 1;
 } else if ((($param_number|0) == -2)) {
  $9 = HEAP32[((285936 + 4|0))>>2]|0;
  $10 = ($9>>>0)>($value>>>0);
  if ($10) {
   $$0$i = 0;
  } else {
   $11 = (($value) + -1)|0;
   $12 = $11 & $value;
   $13 = ($12|0)==(0);
   if ($13) {
    HEAP32[((285936 + 8|0))>>2] = $value;
    $$0$i = 1;
   } else {
    $$0$i = 0;
   }
  }
 } else {
  $$0$i = 0;
 }
 STACKTOP = sp;return ($$0$i|0);
}
function _malloc_usable_size($mem) {
 $mem = $mem|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (($mem) + -4|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = $2 & 3;
  $4 = ($3|0)==(1);
  if ($4) {
   $$0 = 0;
  } else {
   $5 = $2 & -8;
   $6 = ($3|0)==(0);
   $7 = $6 ? 8 : 4;
   $8 = (($5) - ($7))|0;
   $$0 = $8;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$pre = 0, $$pre$phi63Z2D = 0, $$pre$phi65Z2D = 0, $$pre$phiZ2D = 0, $$pre62 = 0, $$pre64 = 0, $$sum = 0, $$sum1 = 0, $$sum12$pre = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0;
 var $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum4 = 0, $$sum5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I19$0 = 0, $I19$0$c = 0, $K20$049 = 0, $R$0 = 0, $R$1 = 0, $R7$0 = 0, $R7$1 = 0, $RP$0 = 0, $RP9$0 = 0, $T$0$lcssa = 0, $T$048 = 0, $cond = 0, $cond46 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = (($p) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    STACKTOP = sp;return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[((285464 + 16|0))>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[((285464 + 20|0))>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $$sum = (($psize) + 4)|0;
    $100 = (($p) + ($$sum)|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = $101 & 3;
    $103 = ($102|0)==(3);
    if (!($103)) {
     $$0 = $9;$$02 = $10;
     break;
    }
    HEAP32[((285464 + 8|0))>>2] = $10;
    $104 = HEAP32[$100>>2]|0;
    $105 = $104 & -2;
    HEAP32[$100>>2] = $105;
    $106 = $10 | 1;
    $$sum20 = (4 - ($5))|0;
    $107 = (($p) + ($$sum20)|0);
    HEAP32[$107>>2] = $106;
    HEAP32[$0>>2] = $10;
    STACKTOP = sp;return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $$sum30 = (8 - ($5))|0;
    $17 = (($p) + ($$sum30)|0);
    $18 = HEAP32[$17>>2]|0;
    $$sum31 = (12 - ($5))|0;
    $19 = (($p) + ($$sum31)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = ((285464 + ($21<<2)|0) + 40|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = (($18) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[285464>>2]|0;
     $32 = $31 & $30;
     HEAP32[285464>>2] = $32;
     $$0 = $9;$$02 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre64 = (($20) + 8|0);
     $$pre$phi65Z2D = $$pre64;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = (($20) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi65Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = (($18) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi65Z2D>>2] = $18;
    $$0 = $9;$$02 = $10;
    break;
   }
   $$sum22 = (24 - ($5))|0;
   $39 = (($p) + ($$sum22)|0);
   $40 = HEAP32[$39>>2]|0;
   $$sum23 = (12 - ($5))|0;
   $41 = (($p) + ($$sum23)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $$sum24 = (16 - ($5))|0;
     $$sum25 = (($$sum24) + 4)|0;
     $53 = (($p) + ($$sum25)|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==(0|0);
     if ($55) {
      $56 = (($p) + ($$sum24)|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $57;$RP$0 = $56;
      }
     } else {
      $R$0 = $54;$RP$0 = $53;
     }
     while(1) {
      $59 = (($R$0) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if (!($61)) {
       $R$0 = $60;$RP$0 = $59;
       continue;
      }
      $62 = (($R$0) + 16|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       break;
      } else {
       $R$0 = $63;$RP$0 = $62;
      }
     }
     $65 = ($RP$0>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum29 = (8 - ($5))|0;
     $44 = (($p) + ($$sum29)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = (($45) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = (($42) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$1 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$0 = $9;$$02 = $10;
   } else {
    $$sum26 = (28 - ($5))|0;
    $67 = (($p) + ($$sum26)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = ((285464 + ($68<<2)|0) + 304|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[((285464 + 4|0))>>2]|0;
      $75 = $74 & $73;
      HEAP32[((285464 + 4|0))>>2] = $75;
      $$0 = $9;$$02 = $10;
      break;
     }
    } else {
     $76 = HEAP32[((285464 + 16|0))>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = (($40) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$1;
     } else {
      $81 = (($40) + 20|0);
      HEAP32[$81>>2] = $R$1;
     }
     $82 = ($R$1|0)==(0|0);
     if ($82) {
      $$0 = $9;$$02 = $10;
      break;
     }
    }
    $83 = HEAP32[((285464 + 16|0))>>2]|0;
    $84 = ($R$1>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = (($R$1) + 24|0);
    HEAP32[$85>>2] = $40;
    $$sum27 = (16 - ($5))|0;
    $86 = (($p) + ($$sum27)|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = HEAP32[((285464 + 16|0))>>2]|0;
      $90 = ($87>>>0)<($89>>>0);
      if ($90) {
       _abort();
       // unreachable;
      } else {
       $91 = (($R$1) + 16|0);
       HEAP32[$91>>2] = $87;
       $92 = (($87) + 24|0);
       HEAP32[$92>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum28 = (($$sum27) + 4)|0;
    $93 = (($p) + ($$sum28)|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ($94|0)==(0|0);
    if ($95) {
     $$0 = $9;$$02 = $10;
    } else {
     $96 = HEAP32[((285464 + 16|0))>>2]|0;
     $97 = ($94>>>0)<($96>>>0);
     if ($97) {
      _abort();
      // unreachable;
     } else {
      $98 = (($R$1) + 20|0);
      HEAP32[$98>>2] = $94;
      $99 = (($94) + 24|0);
      HEAP32[$99>>2] = $R$1;
      $$0 = $9;$$02 = $10;
      break;
     }
    }
   }
  } else {
   $$0 = $p;$$02 = $psize;
  }
 } while(0);
 $108 = HEAP32[((285464 + 16|0))>>2]|0;
 $109 = ($0>>>0)<($108>>>0);
 if ($109) {
  _abort();
  // unreachable;
 }
 $$sum1 = (($psize) + 4)|0;
 $110 = (($p) + ($$sum1)|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = $111 & 2;
 $113 = ($112|0)==(0);
 if ($113) {
  $114 = HEAP32[((285464 + 24|0))>>2]|0;
  $115 = ($0|0)==($114|0);
  if ($115) {
   $116 = HEAP32[((285464 + 12|0))>>2]|0;
   $117 = (($116) + ($$02))|0;
   HEAP32[((285464 + 12|0))>>2] = $117;
   HEAP32[((285464 + 24|0))>>2] = $$0;
   $118 = $117 | 1;
   $119 = (($$0) + 4|0);
   HEAP32[$119>>2] = $118;
   $120 = HEAP32[((285464 + 20|0))>>2]|0;
   $121 = ($$0|0)==($120|0);
   if (!($121)) {
    STACKTOP = sp;return;
   }
   HEAP32[((285464 + 20|0))>>2] = 0;
   HEAP32[((285464 + 8|0))>>2] = 0;
   STACKTOP = sp;return;
  }
  $122 = HEAP32[((285464 + 20|0))>>2]|0;
  $123 = ($0|0)==($122|0);
  if ($123) {
   $124 = HEAP32[((285464 + 8|0))>>2]|0;
   $125 = (($124) + ($$02))|0;
   HEAP32[((285464 + 8|0))>>2] = $125;
   HEAP32[((285464 + 20|0))>>2] = $$0;
   $126 = $125 | 1;
   $127 = (($$0) + 4|0);
   HEAP32[$127>>2] = $126;
   $128 = (($$0) + ($125)|0);
   HEAP32[$128>>2] = $125;
   STACKTOP = sp;return;
  }
  $129 = $111 & -8;
  $130 = (($129) + ($$02))|0;
  $131 = $111 >>> 3;
  $132 = ($111>>>0)<(256);
  do {
   if ($132) {
    $$sum18 = (($psize) + 8)|0;
    $133 = (($p) + ($$sum18)|0);
    $134 = HEAP32[$133>>2]|0;
    $$sum19 = (($psize) + 12)|0;
    $135 = (($p) + ($$sum19)|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = $131 << 1;
    $138 = ((285464 + ($137<<2)|0) + 40|0);
    $139 = ($134|0)==($138|0);
    if (!($139)) {
     $140 = ($134>>>0)<($108>>>0);
     if ($140) {
      _abort();
      // unreachable;
     }
     $141 = (($134) + 12|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = ($142|0)==($0|0);
     if (!($143)) {
      _abort();
      // unreachable;
     }
    }
    $144 = ($136|0)==($134|0);
    if ($144) {
     $145 = 1 << $131;
     $146 = $145 ^ -1;
     $147 = HEAP32[285464>>2]|0;
     $148 = $147 & $146;
     HEAP32[285464>>2] = $148;
     break;
    }
    $149 = ($136|0)==($138|0);
    if ($149) {
     $$pre62 = (($136) + 8|0);
     $$pre$phi63Z2D = $$pre62;
    } else {
     $150 = ($136>>>0)<($108>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($136) + 8|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = ($152|0)==($0|0);
     if ($153) {
      $$pre$phi63Z2D = $151;
     } else {
      _abort();
      // unreachable;
     }
    }
    $154 = (($134) + 12|0);
    HEAP32[$154>>2] = $136;
    HEAP32[$$pre$phi63Z2D>>2] = $134;
   } else {
    $$sum2 = (($psize) + 24)|0;
    $155 = (($p) + ($$sum2)|0);
    $156 = HEAP32[$155>>2]|0;
    $$sum3 = (($psize) + 12)|0;
    $157 = (($p) + ($$sum3)|0);
    $158 = HEAP32[$157>>2]|0;
    $159 = ($158|0)==($0|0);
    do {
     if ($159) {
      $$sum5 = (($psize) + 20)|0;
      $169 = (($p) + ($$sum5)|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==(0|0);
      if ($171) {
       $$sum4 = (($psize) + 16)|0;
       $172 = (($p) + ($$sum4)|0);
       $173 = HEAP32[$172>>2]|0;
       $174 = ($173|0)==(0|0);
       if ($174) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $173;$RP9$0 = $172;
       }
      } else {
       $R7$0 = $170;$RP9$0 = $169;
      }
      while(1) {
       $175 = (($R7$0) + 20|0);
       $176 = HEAP32[$175>>2]|0;
       $177 = ($176|0)==(0|0);
       if (!($177)) {
        $R7$0 = $176;$RP9$0 = $175;
        continue;
       }
       $178 = (($R7$0) + 16|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)==(0|0);
       if ($180) {
        break;
       } else {
        $R7$0 = $179;$RP9$0 = $178;
       }
      }
      $181 = ($RP9$0>>>0)<($108>>>0);
      if ($181) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0>>2] = 0;
       $R7$1 = $R7$0;
       break;
      }
     } else {
      $$sum17 = (($psize) + 8)|0;
      $160 = (($p) + ($$sum17)|0);
      $161 = HEAP32[$160>>2]|0;
      $162 = ($161>>>0)<($108>>>0);
      if ($162) {
       _abort();
       // unreachable;
      }
      $163 = (($161) + 12|0);
      $164 = HEAP32[$163>>2]|0;
      $165 = ($164|0)==($0|0);
      if (!($165)) {
       _abort();
       // unreachable;
      }
      $166 = (($158) + 8|0);
      $167 = HEAP32[$166>>2]|0;
      $168 = ($167|0)==($0|0);
      if ($168) {
       HEAP32[$163>>2] = $158;
       HEAP32[$166>>2] = $161;
       $R7$1 = $158;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $182 = ($156|0)==(0|0);
    if (!($182)) {
     $$sum14 = (($psize) + 28)|0;
     $183 = (($p) + ($$sum14)|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = ((285464 + ($184<<2)|0) + 304|0);
     $186 = HEAP32[$185>>2]|0;
     $187 = ($0|0)==($186|0);
     if ($187) {
      HEAP32[$185>>2] = $R7$1;
      $cond46 = ($R7$1|0)==(0|0);
      if ($cond46) {
       $188 = 1 << $184;
       $189 = $188 ^ -1;
       $190 = HEAP32[((285464 + 4|0))>>2]|0;
       $191 = $190 & $189;
       HEAP32[((285464 + 4|0))>>2] = $191;
       break;
      }
     } else {
      $192 = HEAP32[((285464 + 16|0))>>2]|0;
      $193 = ($156>>>0)<($192>>>0);
      if ($193) {
       _abort();
       // unreachable;
      }
      $194 = (($156) + 16|0);
      $195 = HEAP32[$194>>2]|0;
      $196 = ($195|0)==($0|0);
      if ($196) {
       HEAP32[$194>>2] = $R7$1;
      } else {
       $197 = (($156) + 20|0);
       HEAP32[$197>>2] = $R7$1;
      }
      $198 = ($R7$1|0)==(0|0);
      if ($198) {
       break;
      }
     }
     $199 = HEAP32[((285464 + 16|0))>>2]|0;
     $200 = ($R7$1>>>0)<($199>>>0);
     if ($200) {
      _abort();
      // unreachable;
     }
     $201 = (($R7$1) + 24|0);
     HEAP32[$201>>2] = $156;
     $$sum15 = (($psize) + 16)|0;
     $202 = (($p) + ($$sum15)|0);
     $203 = HEAP32[$202>>2]|0;
     $204 = ($203|0)==(0|0);
     do {
      if (!($204)) {
       $205 = HEAP32[((285464 + 16|0))>>2]|0;
       $206 = ($203>>>0)<($205>>>0);
       if ($206) {
        _abort();
        // unreachable;
       } else {
        $207 = (($R7$1) + 16|0);
        HEAP32[$207>>2] = $203;
        $208 = (($203) + 24|0);
        HEAP32[$208>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum16 = (($psize) + 20)|0;
     $209 = (($p) + ($$sum16)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     if (!($211)) {
      $212 = HEAP32[((285464 + 16|0))>>2]|0;
      $213 = ($210>>>0)<($212>>>0);
      if ($213) {
       _abort();
       // unreachable;
      } else {
       $214 = (($R7$1) + 20|0);
       HEAP32[$214>>2] = $210;
       $215 = (($210) + 24|0);
       HEAP32[$215>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $216 = $130 | 1;
  $217 = (($$0) + 4|0);
  HEAP32[$217>>2] = $216;
  $218 = (($$0) + ($130)|0);
  HEAP32[$218>>2] = $130;
  $219 = HEAP32[((285464 + 20|0))>>2]|0;
  $220 = ($$0|0)==($219|0);
  if ($220) {
   HEAP32[((285464 + 8|0))>>2] = $130;
   STACKTOP = sp;return;
  } else {
   $$1 = $130;
  }
 } else {
  $221 = $111 & -2;
  HEAP32[$110>>2] = $221;
  $222 = $$02 | 1;
  $223 = (($$0) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($$0) + ($$02)|0);
  HEAP32[$224>>2] = $$02;
  $$1 = $$02;
 }
 $225 = $$1 >>> 3;
 $226 = ($$1>>>0)<(256);
 if ($226) {
  $227 = $225 << 1;
  $228 = ((285464 + ($227<<2)|0) + 40|0);
  $229 = HEAP32[285464>>2]|0;
  $230 = 1 << $225;
  $231 = $229 & $230;
  $232 = ($231|0)==(0);
  if ($232) {
   $233 = $229 | $230;
   HEAP32[285464>>2] = $233;
   $$sum12$pre = (($227) + 2)|0;
   $$pre = ((285464 + ($$sum12$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $228;
  } else {
   $$sum13 = (($227) + 2)|0;
   $234 = ((285464 + ($$sum13<<2)|0) + 40|0);
   $235 = HEAP32[$234>>2]|0;
   $236 = HEAP32[((285464 + 16|0))>>2]|0;
   $237 = ($235>>>0)<($236>>>0);
   if ($237) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $234;$F16$0 = $235;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$0;
  $238 = (($F16$0) + 12|0);
  HEAP32[$238>>2] = $$0;
  $239 = (($$0) + 8|0);
  HEAP32[$239>>2] = $F16$0;
  $240 = (($$0) + 12|0);
  HEAP32[$240>>2] = $228;
  STACKTOP = sp;return;
 }
 $241 = $$1 >>> 8;
 $242 = ($241|0)==(0);
 if ($242) {
  $I19$0 = 0;
 } else {
  $243 = ($$1>>>0)>(16777215);
  if ($243) {
   $I19$0 = 31;
  } else {
   $244 = (($241) + 1048320)|0;
   $245 = $244 >>> 16;
   $246 = $245 & 8;
   $247 = $241 << $246;
   $248 = (($247) + 520192)|0;
   $249 = $248 >>> 16;
   $250 = $249 & 4;
   $251 = $250 | $246;
   $252 = $247 << $250;
   $253 = (($252) + 245760)|0;
   $254 = $253 >>> 16;
   $255 = $254 & 2;
   $256 = $251 | $255;
   $257 = (14 - ($256))|0;
   $258 = $252 << $255;
   $259 = $258 >>> 15;
   $260 = (($257) + ($259))|0;
   $261 = $260 << 1;
   $262 = (($260) + 7)|0;
   $263 = $$1 >>> $262;
   $264 = $263 & 1;
   $265 = $264 | $261;
   $I19$0 = $265;
  }
 }
 $266 = ((285464 + ($I19$0<<2)|0) + 304|0);
 $267 = (($$0) + 28|0);
 $I19$0$c = $I19$0;
 HEAP32[$267>>2] = $I19$0$c;
 $268 = (($$0) + 20|0);
 HEAP32[$268>>2] = 0;
 $269 = (($$0) + 16|0);
 HEAP32[$269>>2] = 0;
 $270 = HEAP32[((285464 + 4|0))>>2]|0;
 $271 = 1 << $I19$0;
 $272 = $270 & $271;
 $273 = ($272|0)==(0);
 if ($273) {
  $274 = $270 | $271;
  HEAP32[((285464 + 4|0))>>2] = $274;
  HEAP32[$266>>2] = $$0;
  $275 = (($$0) + 24|0);
  HEAP32[$275>>2] = $266;
  $276 = (($$0) + 12|0);
  HEAP32[$276>>2] = $$0;
  $277 = (($$0) + 8|0);
  HEAP32[$277>>2] = $$0;
  STACKTOP = sp;return;
 }
 $278 = HEAP32[$266>>2]|0;
 $279 = ($I19$0|0)==(31);
 if ($279) {
  $287 = 0;
 } else {
  $280 = $I19$0 >>> 1;
  $281 = (25 - ($280))|0;
  $287 = $281;
 }
 $282 = (($278) + 4|0);
 $283 = HEAP32[$282>>2]|0;
 $284 = $283 & -8;
 $285 = ($284|0)==($$1|0);
 L194: do {
  if ($285) {
   $T$0$lcssa = $278;
  } else {
   $286 = $$1 << $287;
   $K20$049 = $286;$T$048 = $278;
   while(1) {
    $294 = $K20$049 >>> 31;
    $295 = ((($T$048) + ($294<<2)|0) + 16|0);
    $290 = HEAP32[$295>>2]|0;
    $296 = ($290|0)==(0|0);
    if ($296) {
     break;
    }
    $288 = $K20$049 << 1;
    $289 = (($290) + 4|0);
    $291 = HEAP32[$289>>2]|0;
    $292 = $291 & -8;
    $293 = ($292|0)==($$1|0);
    if ($293) {
     $T$0$lcssa = $290;
     break L194;
    } else {
     $K20$049 = $288;$T$048 = $290;
    }
   }
   $297 = HEAP32[((285464 + 16|0))>>2]|0;
   $298 = ($295>>>0)<($297>>>0);
   if ($298) {
    _abort();
    // unreachable;
   }
   HEAP32[$295>>2] = $$0;
   $299 = (($$0) + 24|0);
   HEAP32[$299>>2] = $T$048;
   $300 = (($$0) + 12|0);
   HEAP32[$300>>2] = $$0;
   $301 = (($$0) + 8|0);
   HEAP32[$301>>2] = $$0;
   STACKTOP = sp;return;
  }
 } while(0);
 $302 = (($T$0$lcssa) + 8|0);
 $303 = HEAP32[$302>>2]|0;
 $304 = HEAP32[((285464 + 16|0))>>2]|0;
 $305 = ($T$0$lcssa>>>0)<($304>>>0);
 if ($305) {
  _abort();
  // unreachable;
 }
 $306 = ($303>>>0)<($304>>>0);
 if ($306) {
  _abort();
  // unreachable;
 }
 $307 = (($303) + 12|0);
 HEAP32[$307>>2] = $$0;
 HEAP32[$302>>2] = $$0;
 $308 = (($$0) + 8|0);
 HEAP32[$308>>2] = $303;
 $309 = (($$0) + 12|0);
 HEAP32[$309>>2] = $T$0$lcssa;
 $310 = (($$0) + 24|0);
 HEAP32[$310>>2] = 0;
 STACKTOP = sp;return;
}
function _isdigit($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -48)|0;
 $1 = ($0>>>0)<(10);
 $2 = $1&1;
 STACKTOP = sp;return ($2|0);
}
function _isspace($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(32);
 if ($0) {
  $4 = 1;
 } else {
  $1 = (($c) + -9)|0;
  $2 = ($1>>>0)<(5);
  $4 = $2;
 }
 $3 = $4&1;
 STACKTOP = sp;return ($3|0);
}
function _isupper($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -65)|0;
 $1 = ($0>>>0)<(26);
 $2 = $1&1;
 STACKTOP = sp;return ($2|0);
}
function _isxdigit($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $isdigit = 0, $isdigittmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isdigittmp = (($c) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 if ($isdigit) {
  $4 = 1;
 } else {
  $0 = $c | 32;
  $1 = (($0) + -97)|0;
  $2 = ($1>>>0)<(6);
  $4 = $2;
 }
 $3 = $4&1;
 STACKTOP = sp;return ($3|0);
}
function _tolower($c) {
 $c = $c|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isupper($c)|0);
 $1 = ($0|0)==(0);
 $2 = $c | 32;
 $$0 = $1 ? $c : $2;
 STACKTOP = sp;return ($$0|0);
}
function ___intscan($f,$base,$pok,$0,$1) {
 $f = $f|0;
 $base = $base|0;
 $pok = $pok|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$1 = 0, $$121 = 0, $$122 = 0, $$18 = 0, $$19 = 0, $$base = 0, $$base16 = 0, $$lcssa = 0, $$sum = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum1352 = 0, $$sum14 = 0, $$sum15 = 0, $$sum9 = 0, $$sum934 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$0 = 0, $c$1 = 0, $c$123 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$3$be = 0, $c$3$lcssa = 0, $c$359 = 0, $c$4$be = 0, $c$4$lcssa = 0, $c$5$be = 0, $c$6$be = 0, $c$6$lcssa = 0, $c$7$be = 0, $c$744 = 0;
 var $c$8 = 0, $c$9$be = 0, $neg$0 = 0, $or$cond = 0, $or$cond17 = 0, $or$cond20 = 0, $or$cond26 = 0, $or$cond2628 = 0, $phitmp93 = 0, $x$068 = 0, $x$135 = 0, $x$253 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($base>>>0)>(36);
 if ($2) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 22;
  $278 = 0;$279 = 0;
  tempRet0 = $278;
  STACKTOP = sp;return ($279|0);
 }
 $3 = (($f) + 4|0);
 $4 = (($f) + 100|0);
 while(1) {
  $6 = HEAP32[$3>>2]|0;
  $7 = HEAP32[$4>>2]|0;
  $8 = ($6>>>0)<($7>>>0);
  if ($8) {
   $9 = (($6) + 1|0);
   HEAP32[$3>>2] = $9;
   $10 = HEAP8[$6>>0]|0;
   $11 = $10&255;
   $13 = $11;
  } else {
   $12 = (___shgetc($f)|0);
   $13 = $12;
  }
  $14 = (_isspace($13)|0);
  $15 = ($14|0)==(0);
  if ($15) {
   break;
  }
 }
 $16 = ($13|0)==(45);
 do {
  if ((($13|0) == 43) | (($13|0) == 45)) {
   $17 = $16 << 31 >> 31;
   $18 = HEAP32[$3>>2]|0;
   $19 = HEAP32[$4>>2]|0;
   $20 = ($18>>>0)<($19>>>0);
   if ($20) {
    $21 = (($18) + 1|0);
    HEAP32[$3>>2] = $21;
    $22 = HEAP8[$18>>0]|0;
    $23 = $22&255;
    $c$0 = $23;$neg$0 = $17;
    break;
   } else {
    $24 = (___shgetc($f)|0);
    $c$0 = $24;$neg$0 = $17;
    break;
   }
  } else {
   $c$0 = $13;$neg$0 = 0;
  }
 } while(0);
 $25 = ($base|0)==(0);
 $26 = $base & -17;
 $27 = ($26|0)==(0);
 $28 = ($c$0|0)==(48);
 $or$cond = $27 & $28;
 do {
  if ($or$cond) {
   $29 = HEAP32[$3>>2]|0;
   $30 = HEAP32[$4>>2]|0;
   $31 = ($29>>>0)<($30>>>0);
   if ($31) {
    $32 = (($29) + 1|0);
    HEAP32[$3>>2] = $32;
    $33 = HEAP8[$29>>0]|0;
    $34 = $33&255;
    $37 = $34;
   } else {
    $35 = (___shgetc($f)|0);
    $37 = $35;
   }
   $36 = $37 | 32;
   $38 = ($36|0)==(120);
   if (!($38)) {
    $$base = $25 ? 8 : $base;
    $$1 = $$base;$c$1 = $37;
    label = 32;
    break;
   }
   $39 = HEAP32[$3>>2]|0;
   $40 = HEAP32[$4>>2]|0;
   $41 = ($39>>>0)<($40>>>0);
   if ($41) {
    $42 = (($39) + 1|0);
    HEAP32[$3>>2] = $42;
    $43 = HEAP8[$39>>0]|0;
    $44 = $43&255;
    $46 = $44;
   } else {
    $45 = (___shgetc($f)|0);
    $46 = $45;
   }
   $$sum15 = (($46) + 1)|0;
   $47 = (286056 + ($$sum15)|0);
   $48 = HEAP8[$47>>0]|0;
   $49 = ($48&255)>(15);
   if ($49) {
    $50 = HEAP32[$4>>2]|0;
    $51 = ($50|0)==(0|0);
    if (!($51)) {
     $52 = HEAP32[$3>>2]|0;
     $53 = (($52) + -1|0);
     HEAP32[$3>>2] = $53;
    }
    $54 = ($pok|0)==(0);
    if ($54) {
     ___shlim($f,0);
     $278 = 0;$279 = 0;
     tempRet0 = $278;
     STACKTOP = sp;return ($279|0);
    }
    if ($51) {
     $278 = 0;$279 = 0;
     tempRet0 = $278;
     STACKTOP = sp;return ($279|0);
    }
    $55 = HEAP32[$3>>2]|0;
    $56 = (($55) + -1|0);
    HEAP32[$3>>2] = $56;
    $278 = 0;$279 = 0;
    tempRet0 = $278;
    STACKTOP = sp;return ($279|0);
   } else {
    $$122 = 16;$c$123 = $46;
    label = 47;
   }
  } else {
   $$base16 = $25 ? 10 : $base;
   $$sum = (($c$0) + 1)|0;
   $57 = (286056 + ($$sum)|0);
   $58 = HEAP8[$57>>0]|0;
   $59 = $58&255;
   $60 = ($59>>>0)<($$base16>>>0);
   if ($60) {
    $$1 = $$base16;$c$1 = $c$0;
    label = 32;
   } else {
    $61 = HEAP32[$4>>2]|0;
    $62 = ($61|0)==(0|0);
    if (!($62)) {
     $63 = HEAP32[$3>>2]|0;
     $64 = (($63) + -1|0);
     HEAP32[$3>>2] = $64;
    }
    ___shlim($f,0);
    $65 = (___errno_location()|0);
    HEAP32[$65>>2] = 22;
    $278 = 0;$279 = 0;
    tempRet0 = $278;
    STACKTOP = sp;return ($279|0);
   }
  }
 } while(0);
 if ((label|0) == 32) {
  $66 = ($$1|0)==(10);
  if ($66) {
   $67 = (($c$1) + -48)|0;
   $68 = ($67>>>0)<(10);
   if ($68) {
    $70 = $67;$x$068 = 0;
    while(1) {
     $69 = (($x$068) + ($70))|0;
     $71 = HEAP32[$3>>2]|0;
     $72 = HEAP32[$4>>2]|0;
     $73 = ($71>>>0)<($72>>>0);
     if ($73) {
      $74 = (($71) + 1|0);
      HEAP32[$3>>2] = $74;
      $75 = HEAP8[$71>>0]|0;
      $76 = $75&255;
      $c$2$be = $76;
     } else {
      $77 = (___shgetc($f)|0);
      $c$2$be = $77;
     }
     $78 = (($c$2$be) + -48)|0;
     $79 = ($78>>>0)<(10);
     $80 = ($69>>>0)<(429496729);
     $$ = $79 & $80;
     if (!($$)) {
      break;
     }
     $phitmp93 = ($69*10)|0;
     $70 = $78;$x$068 = $phitmp93;
    }
    $280 = $69;$281 = 0;$c$2$lcssa = $c$2$be;
   } else {
    $280 = 0;$281 = 0;$c$2$lcssa = $c$1;
   }
   $81 = (($c$2$lcssa) + -48)|0;
   $82 = ($81>>>0)<(10);
   if ($82) {
    $83 = $280;$84 = $281;$88 = $81;$c$359 = $c$2$lcssa;
    while(1) {
     $85 = (___muldi3(($83|0),($84|0),10,0)|0);
     $86 = tempRet0;
     $87 = ($88|0)<(0);
     $89 = $87 << 31 >> 31;
     $90 = $88 ^ -1;
     $91 = $89 ^ -1;
     $92 = ($86>>>0)>($91>>>0);
     $93 = ($86|0)==($91|0);
     $94 = ($85>>>0)>($90>>>0);
     $95 = $93 & $94;
     $96 = $92 | $95;
     if ($96) {
      $$lcssa = $88;$282 = $83;$283 = $84;$c$3$lcssa = $c$359;
      break;
     }
     $97 = (_i64Add(($85|0),($86|0),($88|0),($89|0))|0);
     $98 = tempRet0;
     $99 = HEAP32[$3>>2]|0;
     $100 = HEAP32[$4>>2]|0;
     $101 = ($99>>>0)<($100>>>0);
     if ($101) {
      $102 = (($99) + 1|0);
      HEAP32[$3>>2] = $102;
      $103 = HEAP8[$99>>0]|0;
      $104 = $103&255;
      $c$3$be = $104;
     } else {
      $105 = (___shgetc($f)|0);
      $c$3$be = $105;
     }
     $106 = (($c$3$be) + -48)|0;
     $107 = ($106>>>0)<(10);
     $108 = ($98>>>0)<(429496729);
     $109 = ($98|0)==(429496729);
     $110 = ($97>>>0)<(2576980378);
     $111 = $109 & $110;
     $112 = $108 | $111;
     $or$cond17 = $107 & $112;
     if ($or$cond17) {
      $83 = $97;$84 = $98;$88 = $106;$c$359 = $c$3$be;
     } else {
      $$lcssa = $106;$282 = $97;$283 = $98;$c$3$lcssa = $c$3$be;
      break;
     }
    }
    $113 = ($$lcssa>>>0)>(9);
    if ($113) {
     $252 = $283;$255 = $282;
    } else {
     $$121 = 10;$284 = $282;$285 = $283;$c$8 = $c$3$lcssa;
     label = 73;
    }
   } else {
    $252 = $281;$255 = $280;
   }
  } else {
   $$122 = $$1;$c$123 = $c$1;
   label = 47;
  }
 }
 L70: do {
  if ((label|0) == 47) {
   $114 = (($$122) + -1)|0;
   $115 = $114 & $$122;
   $116 = ($115|0)==(0);
   if ($116) {
    $121 = ($$122*23)|0;
    $122 = $121 >>> 5;
    $123 = $122 & 7;
    $124 = (286320 + ($123)|0);
    $125 = HEAP8[$124>>0]|0;
    $126 = $125 << 24 >> 24;
    $$sum934 = (($c$123) + 1)|0;
    $127 = (286056 + ($$sum934)|0);
    $128 = HEAP8[$127>>0]|0;
    $129 = $128&255;
    $130 = ($129>>>0)<($$122>>>0);
    if ($130) {
     $133 = $129;$x$135 = 0;
     while(1) {
      $131 = $x$135 << $126;
      $132 = $133 | $131;
      $134 = HEAP32[$3>>2]|0;
      $135 = HEAP32[$4>>2]|0;
      $136 = ($134>>>0)<($135>>>0);
      if ($136) {
       $137 = (($134) + 1|0);
       HEAP32[$3>>2] = $137;
       $138 = HEAP8[$134>>0]|0;
       $139 = $138&255;
       $c$4$be = $139;
      } else {
       $140 = (___shgetc($f)|0);
       $c$4$be = $140;
      }
      $$sum9 = (($c$4$be) + 1)|0;
      $141 = (286056 + ($$sum9)|0);
      $142 = HEAP8[$141>>0]|0;
      $143 = $142&255;
      $144 = ($143>>>0)<($$122>>>0);
      $145 = ($132>>>0)<(134217728);
      $$18 = $144 & $145;
      if ($$18) {
       $133 = $143;$x$135 = $132;
      } else {
       break;
      }
     }
     $149 = $142;$152 = 0;$155 = $132;$c$4$lcssa = $c$4$be;
    } else {
     $149 = $128;$152 = 0;$155 = 0;$c$4$lcssa = $c$123;
    }
    $146 = (_bitshift64Lshr(-1,-1,($126|0))|0);
    $147 = tempRet0;
    $148 = $149&255;
    $150 = ($148>>>0)>=($$122>>>0);
    $151 = ($152>>>0)>($147>>>0);
    $153 = ($152|0)==($147|0);
    $154 = ($155>>>0)>($146>>>0);
    $156 = $153 & $154;
    $157 = $151 | $156;
    $or$cond2628 = $150 | $157;
    if ($or$cond2628) {
     $$121 = $$122;$284 = $155;$285 = $152;$c$8 = $c$4$lcssa;
     label = 73;
     break;
    } else {
     $158 = $155;$159 = $152;$163 = $149;
    }
    while(1) {
     $160 = (_bitshift64Shl(($158|0),($159|0),($126|0))|0);
     $161 = tempRet0;
     $162 = $163&255;
     $164 = $162 | $160;
     $165 = HEAP32[$3>>2]|0;
     $166 = HEAP32[$4>>2]|0;
     $167 = ($165>>>0)<($166>>>0);
     if ($167) {
      $168 = (($165) + 1|0);
      HEAP32[$3>>2] = $168;
      $169 = HEAP8[$165>>0]|0;
      $170 = $169&255;
      $c$5$be = $170;
     } else {
      $171 = (___shgetc($f)|0);
      $c$5$be = $171;
     }
     $$sum10 = (($c$5$be) + 1)|0;
     $172 = (286056 + ($$sum10)|0);
     $173 = HEAP8[$172>>0]|0;
     $174 = $173&255;
     $175 = ($174>>>0)>=($$122>>>0);
     $176 = ($161>>>0)>($147>>>0);
     $177 = ($161|0)==($147|0);
     $178 = ($164>>>0)>($146>>>0);
     $179 = $177 & $178;
     $180 = $176 | $179;
     $or$cond26 = $175 | $180;
     if ($or$cond26) {
      $$121 = $$122;$284 = $164;$285 = $161;$c$8 = $c$5$be;
      label = 73;
      break L70;
     } else {
      $158 = $164;$159 = $161;$163 = $173;
     }
    }
   }
   $$sum1352 = (($c$123) + 1)|0;
   $117 = (286056 + ($$sum1352)|0);
   $118 = HEAP8[$117>>0]|0;
   $119 = $118&255;
   $120 = ($119>>>0)<($$122>>>0);
   if ($120) {
    $183 = $119;$x$253 = 0;
    while(1) {
     $181 = Math_imul($x$253, $$122)|0;
     $182 = (($183) + ($181))|0;
     $184 = HEAP32[$3>>2]|0;
     $185 = HEAP32[$4>>2]|0;
     $186 = ($184>>>0)<($185>>>0);
     if ($186) {
      $187 = (($184) + 1|0);
      HEAP32[$3>>2] = $187;
      $188 = HEAP8[$184>>0]|0;
      $189 = $188&255;
      $c$6$be = $189;
     } else {
      $190 = (___shgetc($f)|0);
      $c$6$be = $190;
     }
     $$sum13 = (($c$6$be) + 1)|0;
     $191 = (286056 + ($$sum13)|0);
     $192 = HEAP8[$191>>0]|0;
     $193 = $192&255;
     $194 = ($193>>>0)<($$122>>>0);
     $195 = ($182>>>0)<(119304647);
     $$19 = $194 & $195;
     if ($$19) {
      $183 = $193;$x$253 = $182;
     } else {
      break;
     }
    }
    $197 = $192;$286 = $182;$287 = 0;$c$6$lcssa = $c$6$be;
   } else {
    $197 = $118;$286 = 0;$287 = 0;$c$6$lcssa = $c$123;
   }
   $196 = $197&255;
   $198 = ($196>>>0)<($$122>>>0);
   if ($198) {
    $199 = (___udivdi3(-1,-1,($$122|0),0)|0);
    $200 = tempRet0;
    $202 = $287;$205 = $286;$211 = $197;$c$744 = $c$6$lcssa;
    while(1) {
     $201 = ($202>>>0)>($200>>>0);
     $203 = ($202|0)==($200|0);
     $204 = ($205>>>0)>($199>>>0);
     $206 = $203 & $204;
     $207 = $201 | $206;
     if ($207) {
      $$121 = $$122;$284 = $205;$285 = $202;$c$8 = $c$744;
      label = 73;
      break L70;
     }
     $208 = (___muldi3(($205|0),($202|0),($$122|0),0)|0);
     $209 = tempRet0;
     $210 = $211&255;
     $212 = $210 ^ -1;
     $213 = ($209>>>0)>(4294967295);
     $214 = ($209|0)==(-1);
     $215 = ($208>>>0)>($212>>>0);
     $216 = $214 & $215;
     $217 = $213 | $216;
     if ($217) {
      $$121 = $$122;$284 = $205;$285 = $202;$c$8 = $c$744;
      label = 73;
      break L70;
     }
     $218 = (_i64Add(($210|0),0,($208|0),($209|0))|0);
     $219 = tempRet0;
     $220 = HEAP32[$3>>2]|0;
     $221 = HEAP32[$4>>2]|0;
     $222 = ($220>>>0)<($221>>>0);
     if ($222) {
      $223 = (($220) + 1|0);
      HEAP32[$3>>2] = $223;
      $224 = HEAP8[$220>>0]|0;
      $225 = $224&255;
      $c$7$be = $225;
     } else {
      $226 = (___shgetc($f)|0);
      $c$7$be = $226;
     }
     $$sum14 = (($c$7$be) + 1)|0;
     $227 = (286056 + ($$sum14)|0);
     $228 = HEAP8[$227>>0]|0;
     $229 = $228&255;
     $230 = ($229>>>0)<($$122>>>0);
     if ($230) {
      $202 = $219;$205 = $218;$211 = $228;$c$744 = $c$7$be;
     } else {
      $$121 = $$122;$284 = $218;$285 = $219;$c$8 = $c$7$be;
      label = 73;
      break;
     }
    }
   } else {
    $$121 = $$122;$284 = $286;$285 = $287;$c$8 = $c$6$lcssa;
    label = 73;
   }
  }
 } while(0);
 if ((label|0) == 73) {
  $$sum11 = (($c$8) + 1)|0;
  $231 = (286056 + ($$sum11)|0);
  $232 = HEAP8[$231>>0]|0;
  $233 = $232&255;
  $234 = ($233>>>0)<($$121>>>0);
  if ($234) {
   while(1) {
    $235 = HEAP32[$3>>2]|0;
    $236 = HEAP32[$4>>2]|0;
    $237 = ($235>>>0)<($236>>>0);
    if ($237) {
     $238 = (($235) + 1|0);
     HEAP32[$3>>2] = $238;
     $239 = HEAP8[$235>>0]|0;
     $240 = $239&255;
     $c$9$be = $240;
    } else {
     $241 = (___shgetc($f)|0);
     $c$9$be = $241;
    }
    $$sum12 = (($c$9$be) + 1)|0;
    $242 = (286056 + ($$sum12)|0);
    $243 = HEAP8[$242>>0]|0;
    $244 = $243&255;
    $245 = ($244>>>0)<($$121>>>0);
    if (!($245)) {
     break;
    }
   }
   $246 = (___errno_location()|0);
   HEAP32[$246>>2] = 34;
   $252 = $1;$255 = $0;
  } else {
   $252 = $285;$255 = $284;
  }
 }
 $247 = HEAP32[$4>>2]|0;
 $248 = ($247|0)==(0|0);
 if (!($248)) {
  $249 = HEAP32[$3>>2]|0;
  $250 = (($249) + -1|0);
  HEAP32[$3>>2] = $250;
 }
 $251 = ($252>>>0)<($1>>>0);
 $253 = ($252|0)==($1|0);
 $254 = ($255>>>0)<($0>>>0);
 $256 = $253 & $254;
 $257 = $251 | $256;
 if (!($257)) {
  $258 = $0 & 1;
  $259 = ($258|0)==(0);
  $260 = (0)==(0);
  $261 = $259 & $260;
  $262 = ($neg$0|0)==(0);
  $or$cond20 = $261 & $262;
  if ($or$cond20) {
   $263 = (___errno_location()|0);
   HEAP32[$263>>2] = 34;
   $264 = (_i64Add(($0|0),($1|0),-1,-1)|0);
   $265 = tempRet0;
   $278 = $265;$279 = $264;
   tempRet0 = $278;
   STACKTOP = sp;return ($279|0);
  }
  $266 = ($252>>>0)>($1>>>0);
  $267 = ($252|0)==($1|0);
  $268 = ($255>>>0)>($0>>>0);
  $269 = $267 & $268;
  $270 = $266 | $269;
  if ($270) {
   $271 = (___errno_location()|0);
   HEAP32[$271>>2] = 34;
   $278 = $1;$279 = $0;
   tempRet0 = $278;
   STACKTOP = sp;return ($279|0);
  }
 }
 $272 = ($neg$0|0)<(0);
 $273 = $272 << 31 >> 31;
 $274 = $255 ^ $neg$0;
 $275 = $252 ^ $273;
 $276 = (_i64Subtract(($274|0),($275|0),($neg$0|0),($273|0))|0);
 $277 = tempRet0;
 $278 = $277;$279 = $276;
 tempRet0 = $278;
 STACKTOP = sp;return ($279|0);
}
function ___floatscan($f,$prec,$pok) {
 $f = $f|0;
 $prec = $prec|0;
 $pok = $pok|0;
 var $$$i = 0, $$$i22 = 0, $$0 = 0.0, $$02$i = 0, $$08$i = 0, $$09$i = 0, $$1$be$i = 0, $$1$ph$i = 0, $$10$i = 0, $$14$i = 0, $$2$i = 0, $$3$be$i = 0, $$3$lcssa$i = 0, $$38$i = 0, $$388$i = 0, $$397$i = 0, $$in = 0, $$k$0$i = 0, $$lcssa43$i = 0, $$lnz$0$i = 0;
 var $$neg20$i = 0, $$pn$i = 0.0, $$pre$i = 0.0, $$pre$i17 = 0, $$pre$phi$iZ2D = 0.0, $$promoted$i = 0, $$sink$off0$us$i = 0, $$sink$off0$us53$i = 0, $$x$4$i = 0, $$y$3$i = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0.0, $255 = 0.0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0.0, $277 = 0.0, $278 = 0.0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0.0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0.0;
 var $305 = 0.0, $306 = 0.0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0.0, $313 = 0.0, $314 = 0.0, $315 = 0.0, $316 = 0.0, $317 = 0.0, $318 = 0, $319 = 0, $32 = 0, $320 = 0.0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0;
 var $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0.0, $418 = 0.0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0;
 var $431 = 0, $432 = 0, $433 = 0, $434 = 0.0, $435 = 0.0, $436 = 0.0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0.0, $447 = 0.0, $448 = 0.0, $449 = 0;
 var $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0.0, $459 = 0.0, $46 = 0, $460 = 0.0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0;
 var $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0.0, $473 = 0, $474 = 0.0, $475 = 0.0, $476 = 0, $477 = 0.0, $478 = 0, $479 = 0.0, $48 = 0, $480 = 0.0, $481 = 0, $482 = 0, $483 = 0, $484 = 0.0, $485 = 0.0;
 var $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0.0, $490 = 0, $491 = 0.0, $492 = 0.0, $493 = 0.0, $494 = 0, $495 = 0, $496 = 0, $497 = 0.0, $498 = 0.0, $499 = 0, $5 = 0, $50 = 0.0, $500 = 0, $501 = 0, $502 = 0;
 var $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0.0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0;
 var $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0;
 var $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0;
 var $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0;
 var $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0;
 var $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0;
 var $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0;
 var $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0.0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0;
 var $648 = 0.0, $649 = 0.0, $65 = 0, $650 = 0.0, $651 = 0, $652 = 0.0, $653 = 0.0, $654 = 0.0, $655 = 0.0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0;
 var $666 = 0.0, $667 = 0.0, $668 = 0.0, $669 = 0, $67 = 0, $670 = 0.0, $671 = 0.0, $672 = 0, $673 = 0, $674 = 0, $675 = 0.0, $676 = 0.0, $677 = 0.0, $678 = 0.0, $679 = 0, $68 = 0, $680 = 0, $681 = 0.0, $682 = 0, $683 = 0.0;
 var $684 = 0.0, $685 = 0.0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0.0, $691 = 0, $692 = 0, $693 = 0, $694 = 0.0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0;
 var $701 = 0.0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0.0, $707 = 0, $708 = 0, $709 = 0.0, $71 = 0, $710 = 0.0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0;
 var $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$0$lcssa161$i = 0, $a$061$i = 0, $a$1$i = 0, $a$2$ph40$i = 0;
 var $a$3$i = 0, $a$3$i$ph = 0, $a$3$ph$i = 0, $a$427$i = 0, $a$5$i = 0, $bias$0$i = 0.0, $bias$07$i = 0.0, $bits$0$ph = 0, $brmerge = 0, $brmerge107 = 0, $c$0 = 0, $c$0$i = 0, $c$1$lcssa = 0, $c$1$ph$i = 0, $c$169 = 0, $c$2 = 0, $c$2$i = 0, $c$2$lcssa$i = 0, $c$364 = 0, $c$4 = 0;
 var $c$5 = 0, $c$6 = 0, $carry$063$i = 0, $carry1$0$us$i = 0, $carry1$0$us49$i = 0, $carry1$1$lcssa$lcssa$i = 0, $carry1$1$us$i = 0, $carry1$1$us54$i = 0, $carry3$030$i = 0, $cond$i = 0, $d$0$i = 0, $denormal$0$i = 0, $denormal$1$i = 0, $denormal$2$i = 0, $e2$0$ph$i = 0, $e2$0$us$i = 0, $e2$0$us44$i = 0, $e2$1$i = 0, $e2$1$i$ph = 0, $e2$1$ph$i = 0;
 var $e2$2$i = 0, $e2$3$i = 0, $emin$0$ph = 0, $exitcond$i = 0, $frac$0$i = 0.0, $frac$1$i = 0.0, $frac$2$i = 0.0, $gotdig$0$i = 0, $gotdig$0$i9 = 0, $gotdig$2$i = 0, $gotdig$2$i11 = 0, $gotdig$3$i = 0, $gotdig$3$lcssa$i = 0, $gotdig$381$i = 0, $gotdig$393$i = 0, $gotdig$4$i = 0, $gotrad$0$i = 0, $gotrad$0$i12 = 0, $gotrad$1$i = 0, $gotrad$1$lcssa$i = 0;
 var $gotrad$194$i = 0, $gotrad$2$i = 0, $gottail$0$i = 0, $gottail$1$i = 0, $gottail$2$i = 0, $i$0$lcssa = 0, $i$025$i = 0, $i$068 = 0, $i$1$i = 0, $i$166 = 0, $i$263 = 0, $i$3 = 0, $i$4 = 0, $j$0$lcssa$i = 0, $j$086$i = 0, $j$096$i = 0, $j$2$i = 0, $j$371$i = 0, $k$0$lcssa$i = 0, $k$084$i = 0;
 var $k$095$i = 0, $k$2$i = 0, $k$3$i = 0, $k$462$i = 0, $k$5$in$us$i = 0, $k$5$in$us48$i = 0, $k$5$us$i = 0, $k$5$us50$i = 0, $k$5$z$2$us$i = 0, $k$5$z$2$us56$i = 0, $k$628$i = 0, $lnz$0$lcssa$i = 0, $lnz$079$i = 0, $lnz$092$i = 0, $lnz$2$i = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i15 = 0;
 var $or$cond106$not = 0, $or$cond11$i = 0, $or$cond12$us$i = 0, $or$cond12$us55$i = 0, $or$cond13$i = 0, $or$cond15$i = 0, $or$cond16$i = 0, $or$cond17$i = 0, $or$cond3$i = 0, $or$cond3$i16 = 0, $or$cond4$i = 0, $or$cond5 = 0, $or$cond7$i = 0, $or$cond789$i = 0, $or$cond8 = 0, $rp$0$lcssa162$i = 0, $rp$060$i = 0, $rp$1$i18 = 0, $rp$2$ph38$i = 0, $rp$3$i$ph = 0;
 var $rp$3$ph33$i = 0, $rp$426$i = 0, $rp$5$i = 0, $scale$0$i = 0.0, $scale$1$i = 0.0, $scale$2$i = 0.0, $sign$0 = 0, $storemerge$i = 0, $sum$i = 0, $x$0$i = 0, $x$1$i = 0, $x$2$i = 0, $x$3$lcssa$i = 0, $x$313$i = 0, $x$4$lcssa$i = 0, $x$48$i = 0, $x$5$i = 0, $x$6$i = 0, $x$i = 0, $y$0$i = 0.0;
 var $y$1$i = 0.0, $y$1$i23 = 0.0, $y$2$i = 0.0, $y$2$i24 = 0.0, $y$3$i = 0.0, $y$3$lcssa$i = 0.0, $y$39$i = 0.0, $y$4$i = 0.0, $y$5$i = 0.0, $z$0$i = 0, $z$1$ph39$i = 0, $z$1$us$i = 0, $z$1$us45$i = 0, $z$2$us$i = 0, $z$2$us47$i = 0, $z$3$lcssa$lcssa$i = 0, $z$3$us$i = 0, $z$3$us57$i = 0, $z$4$i = 0, $z$5$ph$i = 0;
 var $z$7$1$i = 0, $z$7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0;
 $x$i = sp;
 if ((($prec|0) == 0)) {
  $bits$0$ph = 24;$emin$0$ph = -149;
 } else if ((($prec|0) == 1)) {
  $bits$0$ph = 53;$emin$0$ph = -1074;
 } else if ((($prec|0) == 2)) {
  $bits$0$ph = 53;$emin$0$ph = -1074;
 } else {
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $0 = (($f) + 4|0);
 $1 = (($f) + 100|0);
 while(1) {
  $2 = HEAP32[$0>>2]|0;
  $3 = HEAP32[$1>>2]|0;
  $4 = ($2>>>0)<($3>>>0);
  if ($4) {
   $5 = (($2) + 1|0);
   HEAP32[$0>>2] = $5;
   $6 = HEAP8[$2>>0]|0;
   $7 = $6&255;
   $9 = $7;
  } else {
   $8 = (___shgetc($f)|0);
   $9 = $8;
  }
  $10 = (_isspace($9)|0);
  $11 = ($10|0)==(0);
  if ($11) {
   break;
  }
 }
 $12 = ($9|0)==(45);
 do {
  if ((($9|0) == 43) | (($9|0) == 45)) {
   $13 = $12&1;
   $14 = $13 << 1;
   $15 = (1 - ($14))|0;
   $16 = HEAP32[$0>>2]|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = ($16>>>0)<($17>>>0);
   if ($18) {
    $19 = (($16) + 1|0);
    HEAP32[$0>>2] = $19;
    $20 = HEAP8[$16>>0]|0;
    $21 = $20&255;
    $c$0 = $21;$sign$0 = $15;
    break;
   } else {
    $22 = (___shgetc($f)|0);
    $c$0 = $22;$sign$0 = $15;
    break;
   }
  } else {
   $c$0 = $9;$sign$0 = 1;
  }
 } while(0);
 $c$169 = $c$0;$i$068 = 0;
 while(1) {
  $23 = $c$169 | 32;
  $24 = (286336 + ($i$068)|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25 << 24 >> 24;
  $27 = ($23|0)==($26|0);
  if (!($27)) {
   $c$1$lcssa = $c$169;$i$0$lcssa = $i$068;
   break;
  }
  $28 = ($i$068>>>0)<(7);
  do {
   if ($28) {
    $29 = HEAP32[$0>>2]|0;
    $30 = HEAP32[$1>>2]|0;
    $31 = ($29>>>0)<($30>>>0);
    if ($31) {
     $32 = (($29) + 1|0);
     HEAP32[$0>>2] = $32;
     $33 = HEAP8[$29>>0]|0;
     $34 = $33&255;
     $c$2 = $34;
     break;
    } else {
     $35 = (___shgetc($f)|0);
     $c$2 = $35;
     break;
    }
   } else {
    $c$2 = $c$169;
   }
  } while(0);
  $36 = (($i$068) + 1)|0;
  $37 = ($36>>>0)<(8);
  if ($37) {
   $c$169 = $c$2;$i$068 = $36;
  } else {
   $c$1$lcssa = $c$2;$i$0$lcssa = $36;
   break;
  }
 }
 do {
  if ((($i$0$lcssa|0) == 3)) {
   label = 23;
  } else if (!((($i$0$lcssa|0) == 8))) {
   $38 = ($i$0$lcssa>>>0)<(4);
   $39 = ($pok|0)==(0);
   $or$cond = $38 | $39;
   if (!($or$cond)) {
    $40 = ($i$0$lcssa|0)==(8);
    if ($40) {
     break;
    } else {
     label = 23;
     break;
    }
   }
   $52 = ($i$0$lcssa|0)==(0);
   L34: do {
    if ($52) {
     $c$364 = $c$1$lcssa;$i$263 = 0;
     while(1) {
      $53 = $c$364 | 32;
      $54 = (286352 + ($i$263)|0);
      $55 = HEAP8[$54>>0]|0;
      $56 = $55 << 24 >> 24;
      $57 = ($53|0)==($56|0);
      if (!($57)) {
       $c$5 = $c$364;$i$3 = $i$263;
       break L34;
      }
      $58 = ($i$263>>>0)<(2);
      do {
       if ($58) {
        $59 = HEAP32[$0>>2]|0;
        $60 = HEAP32[$1>>2]|0;
        $61 = ($59>>>0)<($60>>>0);
        if ($61) {
         $62 = (($59) + 1|0);
         HEAP32[$0>>2] = $62;
         $63 = HEAP8[$59>>0]|0;
         $64 = $63&255;
         $c$4 = $64;
         break;
        } else {
         $65 = (___shgetc($f)|0);
         $c$4 = $65;
         break;
        }
       } else {
        $c$4 = $c$364;
       }
      } while(0);
      $66 = (($i$263) + 1)|0;
      $67 = ($66>>>0)<(3);
      if ($67) {
       $c$364 = $c$4;$i$263 = $66;
      } else {
       $c$5 = $c$4;$i$3 = $66;
       break;
      }
     }
    } else {
     $c$5 = $c$1$lcssa;$i$3 = $i$0$lcssa;
    }
   } while(0);
   if ((($i$3|0) == 0)) {
    $113 = ($c$5|0)==(48);
    do {
     if ($113) {
      $114 = HEAP32[$0>>2]|0;
      $115 = HEAP32[$1>>2]|0;
      $116 = ($114>>>0)<($115>>>0);
      if ($116) {
       $117 = (($114) + 1|0);
       HEAP32[$0>>2] = $117;
       $118 = HEAP8[$114>>0]|0;
       $119 = $118&255;
       $122 = $119;
      } else {
       $120 = (___shgetc($f)|0);
       $122 = $120;
      }
      $121 = $122 | 32;
      $123 = ($121|0)==(120);
      if (!($123)) {
       $321 = HEAP32[$1>>2]|0;
       $322 = ($321|0)==(0|0);
       if ($322) {
        $c$6 = 48;
        break;
       }
       $323 = HEAP32[$0>>2]|0;
       $324 = (($323) + -1|0);
       HEAP32[$0>>2] = $324;
       $c$6 = 48;
       break;
      }
      $124 = HEAP32[$0>>2]|0;
      $125 = HEAP32[$1>>2]|0;
      $126 = ($124>>>0)<($125>>>0);
      if ($126) {
       $127 = (($124) + 1|0);
       HEAP32[$0>>2] = $127;
       $128 = HEAP8[$124>>0]|0;
       $129 = $128&255;
       $c$0$i = $129;$gotdig$0$i = 0;
      } else {
       $130 = (___shgetc($f)|0);
       $c$0$i = $130;$gotdig$0$i = 0;
      }
      while(1) {
       if ((($c$0$i|0) == 46)) {
        label = 70;
        break;
       } else if (!((($c$0$i|0) == 48))) {
        $169 = 0;$172 = 0;$212 = 0;$214 = 0;$c$2$i = $c$0$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 0;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
        break;
       }
       $131 = HEAP32[$0>>2]|0;
       $132 = HEAP32[$1>>2]|0;
       $133 = ($131>>>0)<($132>>>0);
       if ($133) {
        $134 = (($131) + 1|0);
        HEAP32[$0>>2] = $134;
        $135 = HEAP8[$131>>0]|0;
        $136 = $135&255;
        $c$0$i = $136;$gotdig$0$i = 1;
        continue;
       } else {
        $137 = (___shgetc($f)|0);
        $c$0$i = $137;$gotdig$0$i = 1;
        continue;
       }
      }
      L66: do {
       if ((label|0) == 70) {
        $138 = HEAP32[$0>>2]|0;
        $139 = HEAP32[$1>>2]|0;
        $140 = ($138>>>0)<($139>>>0);
        if ($140) {
         $141 = (($138) + 1|0);
         HEAP32[$0>>2] = $141;
         $142 = HEAP8[$138>>0]|0;
         $143 = $142&255;
         $c$1$ph$i = $143;
        } else {
         $144 = (___shgetc($f)|0);
         $c$1$ph$i = $144;
        }
        $145 = ($c$1$ph$i|0)==(48);
        if ($145) {
         $155 = -1;$156 = -1;
         while(1) {
          $146 = HEAP32[$0>>2]|0;
          $147 = HEAP32[$1>>2]|0;
          $148 = ($146>>>0)<($147>>>0);
          if ($148) {
           $149 = (($146) + 1|0);
           HEAP32[$0>>2] = $149;
           $150 = HEAP8[$146>>0]|0;
           $151 = $150&255;
           $154 = $151;
          } else {
           $152 = (___shgetc($f)|0);
           $154 = $152;
          }
          $153 = ($154|0)==(48);
          if (!($153)) {
           $169 = 0;$172 = 0;$212 = $155;$214 = $156;$c$2$i = $154;$gotdig$2$i = 1;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
           break L66;
          }
          $157 = (_i64Add(($155|0),($156|0),-1,-1)|0);
          $158 = tempRet0;
          $155 = $157;$156 = $158;
         }
        } else {
         $169 = 0;$172 = 0;$212 = 0;$214 = 0;$c$2$i = $c$1$ph$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
        }
       }
      } while(0);
      L79: while(1) {
       $159 = (($c$2$i) + -48)|0;
       $160 = ($159>>>0)<(10);
       do {
        if ($160) {
         $d$0$i = $159;
         label = 84;
        } else {
         $161 = $c$2$i | 32;
         $162 = (($161) + -97)|0;
         $163 = ($162>>>0)<(6);
         $164 = ($c$2$i|0)==(46);
         $or$cond$i = $163 | $164;
         if (!($or$cond$i)) {
          $c$2$lcssa$i = $c$2$i;
          break L79;
         }
         if ($164) {
          $165 = ($gotrad$0$i|0)==(0);
          if ($165) {
           $712 = $172;$713 = $169;$714 = $172;$715 = $169;$gotdig$3$i = $gotdig$2$i;$gotrad$1$i = 1;$gottail$2$i = $gottail$0$i;$scale$2$i = $scale$0$i;$x$2$i = $x$0$i;$y$2$i = $y$0$i;
           break;
          } else {
           $c$2$lcssa$i = 46;
           break L79;
          }
         } else {
          $166 = ($c$2$i|0)>(57);
          $167 = (($161) + -87)|0;
          $$38$i = $166 ? $167 : $159;
          $d$0$i = $$38$i;
          label = 84;
          break;
         }
        }
       } while(0);
       if ((label|0) == 84) {
        label = 0;
        $168 = ($169|0)<(0);
        $170 = ($169|0)==(0);
        $171 = ($172>>>0)<(8);
        $173 = $170 & $171;
        $174 = $168 | $173;
        do {
         if ($174) {
          $175 = $x$0$i << 4;
          $176 = (($d$0$i) + ($175))|0;
          $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $176;$y$1$i = $y$0$i;
         } else {
          $177 = ($169|0)<(0);
          $178 = ($169|0)==(0);
          $179 = ($172>>>0)<(14);
          $180 = $178 & $179;
          $181 = $177 | $180;
          if ($181) {
           $182 = (+($d$0$i|0));
           $183 = $scale$0$i * 0.0625;
           $184 = $183 * $182;
           $185 = $y$0$i + $184;
           $gottail$1$i = $gottail$0$i;$scale$1$i = $183;$x$1$i = $x$0$i;$y$1$i = $185;
           break;
          }
          $186 = ($d$0$i|0)!=(0);
          $187 = ($gottail$0$i|0)==(0);
          $or$cond3$i = $186 & $187;
          if ($or$cond3$i) {
           $188 = $scale$0$i * 0.5;
           $189 = $y$0$i + $188;
           $gottail$1$i = 1;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $189;
          } else {
           $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $y$0$i;
          }
         }
        } while(0);
        $190 = (_i64Add(($172|0),($169|0),1,0)|0);
        $191 = tempRet0;
        $712 = $212;$713 = $214;$714 = $190;$715 = $191;$gotdig$3$i = 1;$gotrad$1$i = $gotrad$0$i;$gottail$2$i = $gottail$1$i;$scale$2$i = $scale$1$i;$x$2$i = $x$1$i;$y$2$i = $y$1$i;
       }
       $192 = HEAP32[$0>>2]|0;
       $193 = HEAP32[$1>>2]|0;
       $194 = ($192>>>0)<($193>>>0);
       if ($194) {
        $195 = (($192) + 1|0);
        HEAP32[$0>>2] = $195;
        $196 = HEAP8[$192>>0]|0;
        $197 = $196&255;
        $169 = $715;$172 = $714;$212 = $712;$214 = $713;$c$2$i = $197;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
        continue;
       } else {
        $198 = (___shgetc($f)|0);
        $169 = $715;$172 = $714;$212 = $712;$214 = $713;$c$2$i = $198;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
        continue;
       }
      }
      $199 = ($gotdig$2$i|0)==(0);
      if ($199) {
       $200 = HEAP32[$1>>2]|0;
       $201 = ($200|0)==(0|0);
       if (!($201)) {
        $202 = HEAP32[$0>>2]|0;
        $203 = (($202) + -1|0);
        HEAP32[$0>>2] = $203;
       }
       if ($39) {
        ___shlim($f,0);
       } else {
        if (!($201)) {
         $204 = HEAP32[$0>>2]|0;
         $205 = (($204) + -1|0);
         HEAP32[$0>>2] = $205;
         $206 = ($gotrad$0$i|0)==(0);
         if (!($206)) {
          $207 = (($204) + -2|0);
          HEAP32[$0>>2] = $207;
         }
        }
       }
       $208 = (+($sign$0|0));
       $209 = $208 * 0.0;
       $$0 = $209;
       STACKTOP = sp;return (+$$0);
      }
      $210 = ($gotrad$0$i|0)==(0);
      $211 = $210 ? $172 : $212;
      $213 = $210 ? $169 : $214;
      $215 = ($169|0)<(0);
      $216 = ($169|0)==(0);
      $217 = ($172>>>0)<(8);
      $218 = $216 & $217;
      $219 = $215 | $218;
      if ($219) {
       $221 = $172;$222 = $169;$x$313$i = $x$0$i;
       while(1) {
        $220 = $x$313$i << 4;
        $223 = (_i64Add(($221|0),($222|0),1,0)|0);
        $224 = tempRet0;
        $225 = ($224|0)<(0);
        $226 = ($224|0)==(0);
        $227 = ($223>>>0)<(8);
        $228 = $226 & $227;
        $229 = $225 | $228;
        if ($229) {
         $221 = $223;$222 = $224;$x$313$i = $220;
        } else {
         $x$3$lcssa$i = $220;
         break;
        }
       }
      } else {
       $x$3$lcssa$i = $x$0$i;
      }
      $230 = $c$2$lcssa$i | 32;
      $231 = ($230|0)==(112);
      do {
       if ($231) {
        $232 = (_scanexp($f,$pok)|0);
        $233 = tempRet0;
        $234 = ($232|0)==(0);
        $235 = ($233|0)==(-2147483648);
        $236 = $234 & $235;
        if ($236) {
         if ($39) {
          ___shlim($f,0);
          $$0 = 0.0;
          STACKTOP = sp;return (+$$0);
         } else {
          $237 = HEAP32[$1>>2]|0;
          $238 = ($237|0)==(0|0);
          if ($238) {
           $249 = 0;$250 = 0;
           break;
          }
          $239 = HEAP32[$0>>2]|0;
          $240 = (($239) + -1|0);
          HEAP32[$0>>2] = $240;
          $249 = 0;$250 = 0;
          break;
         }
        } else {
         $249 = $232;$250 = $233;
        }
       } else {
        $241 = HEAP32[$1>>2]|0;
        $242 = ($241|0)==(0|0);
        if ($242) {
         $249 = 0;$250 = 0;
        } else {
         $243 = HEAP32[$0>>2]|0;
         $244 = (($243) + -1|0);
         HEAP32[$0>>2] = $244;
         $249 = 0;$250 = 0;
        }
       }
      } while(0);
      $245 = (_bitshift64Shl(($211|0),($213|0),2)|0);
      $246 = tempRet0;
      $247 = (_i64Add(($245|0),($246|0),-32,-1)|0);
      $248 = tempRet0;
      $251 = (_i64Add(($247|0),($248|0),($249|0),($250|0))|0);
      $252 = tempRet0;
      $253 = ($x$3$lcssa$i|0)==(0);
      if ($253) {
       $254 = (+($sign$0|0));
       $255 = $254 * 0.0;
       $$0 = $255;
       STACKTOP = sp;return (+$$0);
      }
      $256 = (0 - ($emin$0$ph))|0;
      $257 = ($252|0)>(0);
      $258 = ($252|0)==(0);
      $259 = ($251>>>0)>($256>>>0);
      $260 = $258 & $259;
      $261 = $257 | $260;
      if ($261) {
       $262 = (___errno_location()|0);
       HEAP32[$262>>2] = 34;
       $263 = (+($sign$0|0));
       $264 = $263 * 1.79769313486231570815E+308;
       $265 = $264 * 1.79769313486231570815E+308;
       $$0 = $265;
       STACKTOP = sp;return (+$$0);
      }
      $266 = (($emin$0$ph) + -106)|0;
      $267 = ($266|0)<(0);
      $268 = $267 << 31 >> 31;
      $269 = ($252|0)<($268|0);
      $270 = ($252|0)==($268|0);
      $271 = ($251>>>0)<($266>>>0);
      $272 = $270 & $271;
      $273 = $269 | $272;
      if ($273) {
       $275 = (___errno_location()|0);
       HEAP32[$275>>2] = 34;
       $276 = (+($sign$0|0));
       $277 = $276 * 2.22507385850720138309E-308;
       $278 = $277 * 2.22507385850720138309E-308;
       $$0 = $278;
       STACKTOP = sp;return (+$$0);
      }
      $274 = ($x$3$lcssa$i|0)>(-1);
      if ($274) {
       $283 = $251;$284 = $252;$x$48$i = $x$3$lcssa$i;$y$39$i = $y$0$i;
       while(1) {
        $279 = !($y$39$i >= 0.5);
        $280 = $x$48$i << 1;
        if ($279) {
         $$pn$i = $y$39$i;$x$5$i = $280;
        } else {
         $281 = $280 | 1;
         $282 = $y$39$i + -1.0;
         $$pn$i = $282;$x$5$i = $281;
        }
        $y$4$i = $y$39$i + $$pn$i;
        $285 = (_i64Add(($283|0),($284|0),-1,-1)|0);
        $286 = tempRet0;
        $287 = ($x$5$i|0)>(-1);
        if ($287) {
         $283 = $285;$284 = $286;$x$48$i = $x$5$i;$y$39$i = $y$4$i;
        } else {
         $292 = $285;$293 = $286;$x$4$lcssa$i = $x$5$i;$y$3$lcssa$i = $y$4$i;
         break;
        }
       }
      } else {
       $292 = $251;$293 = $252;$x$4$lcssa$i = $x$3$lcssa$i;$y$3$lcssa$i = $y$0$i;
      }
      $288 = ($emin$0$ph|0)<(0);
      $289 = $288 << 31 >> 31;
      $290 = (_i64Subtract(32,0,($emin$0$ph|0),($289|0))|0);
      $291 = tempRet0;
      $294 = (_i64Add(($292|0),($293|0),($290|0),($291|0))|0);
      $295 = tempRet0;
      $296 = (0)>($295|0);
      $297 = (0)==($295|0);
      $298 = ($bits$0$ph>>>0)>($294>>>0);
      $299 = $297 & $298;
      $300 = $296 | $299;
      if ($300) {
       $301 = ($294|0)<(0);
       $$$i = $301 ? 0 : $294;
       $$02$i = $$$i;
      } else {
       $$02$i = $bits$0$ph;
      }
      $302 = ($$02$i|0)<(53);
      do {
       if ($302) {
        $303 = (84 - ($$02$i))|0;
        $304 = (+_scalbn(1.0,$303));
        $305 = (+($sign$0|0));
        $306 = (+_copysignl((+$304),(+$305)));
        $307 = ($$02$i|0)<(32);
        $308 = $y$3$lcssa$i != 0.0;
        $or$cond4$i = $307 & $308;
        if (!($or$cond4$i)) {
         $$pre$phi$iZ2D = $305;$bias$07$i = $306;$x$6$i = $x$4$lcssa$i;$y$5$i = $y$3$lcssa$i;
         break;
        }
        $309 = $x$4$lcssa$i & 1;
        $310 = ($309|0)==(0);
        $311 = $309 ^ 1;
        $$x$4$i = (($311) + ($x$4$lcssa$i))|0;
        $$y$3$i = $310 ? 0.0 : $y$3$lcssa$i;
        $$pre$phi$iZ2D = $305;$bias$07$i = $306;$x$6$i = $$x$4$i;$y$5$i = $$y$3$i;
       } else {
        $$pre$i = (+($sign$0|0));
        $$pre$phi$iZ2D = $$pre$i;$bias$07$i = 0.0;$x$6$i = $x$4$lcssa$i;$y$5$i = $y$3$lcssa$i;
       }
      } while(0);
      $312 = (+($x$6$i>>>0));
      $313 = $$pre$phi$iZ2D * $312;
      $314 = $bias$07$i + $313;
      $315 = $$pre$phi$iZ2D * $y$5$i;
      $316 = $315 + $314;
      $317 = $316 - $bias$07$i;
      $318 = $317 != 0.0;
      if (!($318)) {
       $319 = (___errno_location()|0);
       HEAP32[$319>>2] = 34;
      }
      $320 = (+_scalbnl($317,$292));
      $$0 = $320;
      STACKTOP = sp;return (+$$0);
     } else {
      $c$6 = $c$5;
     }
    } while(0);
    $sum$i = (($emin$0$ph) + ($bits$0$ph))|0;
    $325 = (0 - ($sum$i))|0;
    $$08$i = $c$6;$gotdig$0$i9 = 0;
    while(1) {
     if ((($$08$i|0) == 46)) {
      label = 139;
      break;
     } else if (!((($$08$i|0) == 48))) {
      $$2$i = $$08$i;$716 = 0;$717 = 0;$gotdig$2$i11 = $gotdig$0$i9;$gotrad$0$i12 = 0;
      break;
     }
     $326 = HEAP32[$0>>2]|0;
     $327 = HEAP32[$1>>2]|0;
     $328 = ($326>>>0)<($327>>>0);
     if ($328) {
      $329 = (($326) + 1|0);
      HEAP32[$0>>2] = $329;
      $330 = HEAP8[$326>>0]|0;
      $331 = $330&255;
      $$08$i = $331;$gotdig$0$i9 = 1;
      continue;
     } else {
      $332 = (___shgetc($f)|0);
      $$08$i = $332;$gotdig$0$i9 = 1;
      continue;
     }
    }
    L168: do {
     if ((label|0) == 139) {
      $333 = HEAP32[$0>>2]|0;
      $334 = HEAP32[$1>>2]|0;
      $335 = ($333>>>0)<($334>>>0);
      if ($335) {
       $336 = (($333) + 1|0);
       HEAP32[$0>>2] = $336;
       $337 = HEAP8[$333>>0]|0;
       $338 = $337&255;
       $$1$ph$i = $338;
      } else {
       $339 = (___shgetc($f)|0);
       $$1$ph$i = $339;
      }
      $340 = ($$1$ph$i|0)==(48);
      if ($340) {
       $349 = -1;$350 = -1;
       while(1) {
        $341 = HEAP32[$0>>2]|0;
        $342 = HEAP32[$1>>2]|0;
        $343 = ($341>>>0)<($342>>>0);
        if ($343) {
         $344 = (($341) + 1|0);
         HEAP32[$0>>2] = $344;
         $345 = HEAP8[$341>>0]|0;
         $346 = $345&255;
         $$1$be$i = $346;
        } else {
         $347 = (___shgetc($f)|0);
         $$1$be$i = $347;
        }
        $348 = ($$1$be$i|0)==(48);
        if (!($348)) {
         $$2$i = $$1$be$i;$716 = $349;$717 = $350;$gotdig$2$i11 = 1;$gotrad$0$i12 = 1;
         break L168;
        }
        $351 = (_i64Add(($349|0),($350|0),-1,-1)|0);
        $352 = tempRet0;
        $349 = $351;$350 = $352;
       }
      } else {
       $$2$i = $$1$ph$i;$716 = 0;$717 = 0;$gotdig$2$i11 = $gotdig$0$i9;$gotrad$0$i12 = 1;
      }
     }
    } while(0);
    HEAP32[$x$i>>2] = 0;
    $353 = (($$2$i) + -48)|0;
    $354 = ($353>>>0)<(10);
    $355 = ($$2$i|0)==(46);
    $or$cond789$i = $354 | $355;
    L182: do {
     if ($or$cond789$i) {
      $356 = (($x$i) + 496|0);
      $$397$i = $$2$i;$358 = 0;$359 = 0;$718 = $355;$719 = $353;$720 = $716;$721 = $717;$gotdig$393$i = $gotdig$2$i11;$gotrad$194$i = $gotrad$0$i12;$j$096$i = 0;$k$095$i = 0;$lnz$092$i = 0;
      while(1) {
       do {
        if ($718) {
         $cond$i = ($gotrad$194$i|0)==(0);
         if ($cond$i) {
          $722 = $358;$723 = $359;$724 = $358;$725 = $359;$gotdig$4$i = $gotdig$393$i;$gotrad$2$i = 1;$j$2$i = $j$096$i;$k$2$i = $k$095$i;$lnz$2$i = $lnz$092$i;
         } else {
          $$388$i = $$397$i;$405 = $720;$406 = $721;$421 = $358;$424 = $359;$gotdig$381$i = $gotdig$393$i;$j$086$i = $j$096$i;$k$084$i = $k$095$i;$lnz$079$i = $lnz$092$i;
          break L182;
         }
        } else {
         $357 = ($k$095$i|0)<(125);
         $360 = (_i64Add(($358|0),($359|0),1,0)|0);
         $361 = tempRet0;
         $362 = ($$397$i|0)!=(48);
         if (!($357)) {
          if (!($362)) {
           $722 = $720;$723 = $721;$724 = $360;$725 = $361;$gotdig$4$i = $gotdig$393$i;$gotrad$2$i = $gotrad$194$i;$j$2$i = $j$096$i;$k$2$i = $k$095$i;$lnz$2$i = $lnz$092$i;
           break;
          }
          $372 = HEAP32[$356>>2]|0;
          $373 = $372 | 1;
          HEAP32[$356>>2] = $373;
          $722 = $720;$723 = $721;$724 = $360;$725 = $361;$gotdig$4$i = $gotdig$393$i;$gotrad$2$i = $gotrad$194$i;$j$2$i = $j$096$i;$k$2$i = $k$095$i;$lnz$2$i = $lnz$092$i;
          break;
         }
         $$lnz$0$i = $362 ? $360 : $lnz$092$i;
         $363 = ($j$096$i|0)==(0);
         $364 = (($x$i) + ($k$095$i<<2)|0);
         if ($363) {
          $storemerge$i = $719;
         } else {
          $365 = HEAP32[$364>>2]|0;
          $366 = ($365*10)|0;
          $367 = (($$397$i) + -48)|0;
          $368 = (($367) + ($366))|0;
          $storemerge$i = $368;
         }
         HEAP32[$364>>2] = $storemerge$i;
         $369 = (($j$096$i) + 1)|0;
         $370 = ($369|0)==(9);
         $371 = $370&1;
         $$k$0$i = (($371) + ($k$095$i))|0;
         $$10$i = $370 ? 0 : $369;
         $722 = $720;$723 = $721;$724 = $360;$725 = $361;$gotdig$4$i = 1;$gotrad$2$i = $gotrad$194$i;$j$2$i = $$10$i;$k$2$i = $$k$0$i;$lnz$2$i = $$lnz$0$i;
        }
       } while(0);
       $374 = HEAP32[$0>>2]|0;
       $375 = HEAP32[$1>>2]|0;
       $376 = ($374>>>0)<($375>>>0);
       if ($376) {
        $377 = (($374) + 1|0);
        HEAP32[$0>>2] = $377;
        $378 = HEAP8[$374>>0]|0;
        $379 = $378&255;
        $$3$be$i = $379;
       } else {
        $380 = (___shgetc($f)|0);
        $$3$be$i = $380;
       }
       $381 = (($$3$be$i) + -48)|0;
       $382 = ($381>>>0)<(10);
       $383 = ($$3$be$i|0)==(46);
       $or$cond7$i = $382 | $383;
       if ($or$cond7$i) {
        $$397$i = $$3$be$i;$358 = $724;$359 = $725;$718 = $383;$719 = $381;$720 = $722;$721 = $723;$gotdig$393$i = $gotdig$4$i;$gotrad$194$i = $gotrad$2$i;$j$096$i = $j$2$i;$k$095$i = $k$2$i;$lnz$092$i = $lnz$2$i;
       } else {
        $$3$lcssa$i = $$3$be$i;$386 = $724;$387 = $722;$389 = $725;$390 = $723;$gotdig$3$lcssa$i = $gotdig$4$i;$gotrad$1$lcssa$i = $gotrad$2$i;$j$0$lcssa$i = $j$2$i;$k$0$lcssa$i = $k$2$i;$lnz$0$lcssa$i = $lnz$2$i;
        label = 162;
        break;
       }
      }
     } else {
      $$3$lcssa$i = $$2$i;$386 = 0;$387 = $716;$389 = 0;$390 = $717;$gotdig$3$lcssa$i = $gotdig$2$i11;$gotrad$1$lcssa$i = $gotrad$0$i12;$j$0$lcssa$i = 0;$k$0$lcssa$i = 0;$lnz$0$lcssa$i = 0;
      label = 162;
     }
    } while(0);
    if ((label|0) == 162) {
     $384 = ($gotrad$1$lcssa$i|0)==(0);
     $385 = $384 ? $386 : $387;
     $388 = $384 ? $389 : $390;
     $$388$i = $$3$lcssa$i;$405 = $385;$406 = $388;$421 = $386;$424 = $389;$gotdig$381$i = $gotdig$3$lcssa$i;$j$086$i = $j$0$lcssa$i;$k$084$i = $k$0$lcssa$i;$lnz$079$i = $lnz$0$lcssa$i;
    }
    $391 = ($gotdig$381$i|0)!=(0);
    if ($391) {
     $392 = $$388$i | 32;
     $393 = ($392|0)==(101);
     if ($393) {
      $394 = (_scanexp($f,$pok)|0);
      $395 = tempRet0;
      $396 = ($394|0)==(0);
      $397 = ($395|0)==(-2147483648);
      $398 = $396 & $397;
      do {
       if ($398) {
        if ($39) {
         ___shlim($f,0);
         $$0 = 0.0;
         STACKTOP = sp;return (+$$0);
        } else {
         $399 = HEAP32[$1>>2]|0;
         $400 = ($399|0)==(0|0);
         if ($400) {
          $403 = 0;$404 = 0;
          break;
         }
         $401 = HEAP32[$0>>2]|0;
         $402 = (($401) + -1|0);
         HEAP32[$0>>2] = $402;
         $403 = 0;$404 = 0;
         break;
        }
       } else {
        $403 = $394;$404 = $395;
       }
      } while(0);
      $407 = (_i64Add(($403|0),($404|0),($405|0),($406|0))|0);
      $408 = tempRet0;
      $420 = $407;$423 = $408;
     } else {
      label = 171;
     }
    } else {
     label = 171;
    }
    if ((label|0) == 171) {
     $409 = ($$388$i|0)>(-1);
     if ($409) {
      $410 = HEAP32[$1>>2]|0;
      $411 = ($410|0)==(0|0);
      if ($411) {
       $420 = $405;$423 = $406;
      } else {
       $412 = HEAP32[$0>>2]|0;
       $413 = (($412) + -1|0);
       HEAP32[$0>>2] = $413;
       $420 = $405;$423 = $406;
      }
     } else {
      $420 = $405;$423 = $406;
     }
    }
    if (!($391)) {
     $414 = (___errno_location()|0);
     HEAP32[$414>>2] = 22;
     ___shlim($f,0);
     $$0 = 0.0;
     STACKTOP = sp;return (+$$0);
    }
    $415 = HEAP32[$x$i>>2]|0;
    $416 = ($415|0)==(0);
    if ($416) {
     $417 = (+($sign$0|0));
     $418 = $417 * 0.0;
     $$0 = $418;
     STACKTOP = sp;return (+$$0);
    }
    $419 = ($420|0)==($421|0);
    $422 = ($423|0)==($424|0);
    $425 = $419 & $422;
    $426 = ($424|0)<(0);
    $427 = ($424|0)==(0);
    $428 = ($421>>>0)<(10);
    $429 = $427 & $428;
    $430 = $426 | $429;
    $or$cond$i15 = $425 & $430;
    do {
     if ($or$cond$i15) {
      $431 = ($bits$0$ph>>>0)>(30);
      if (!($431)) {
       $432 = $415 >>> $bits$0$ph;
       $433 = ($432|0)==(0);
       if (!($433)) {
        break;
       }
      }
      $434 = (+($sign$0|0));
      $435 = (+($415>>>0));
      $436 = $434 * $435;
      $$0 = $436;
      STACKTOP = sp;return (+$$0);
     }
    } while(0);
    $437 = (($emin$0$ph|0) / -2)&-1;
    $438 = ($437|0)<(0);
    $439 = $438 << 31 >> 31;
    $440 = ($423|0)>($439|0);
    $441 = ($423|0)==($439|0);
    $442 = ($420>>>0)>($437>>>0);
    $443 = $441 & $442;
    $444 = $440 | $443;
    if ($444) {
     $445 = (___errno_location()|0);
     HEAP32[$445>>2] = 34;
     $446 = (+($sign$0|0));
     $447 = $446 * 1.79769313486231570815E+308;
     $448 = $447 * 1.79769313486231570815E+308;
     $$0 = $448;
     STACKTOP = sp;return (+$$0);
    }
    $449 = (($emin$0$ph) + -106)|0;
    $450 = ($449|0)<(0);
    $451 = $450 << 31 >> 31;
    $452 = ($423|0)<($451|0);
    $453 = ($423|0)==($451|0);
    $454 = ($420>>>0)<($449>>>0);
    $455 = $453 & $454;
    $456 = $452 | $455;
    if ($456) {
     $457 = (___errno_location()|0);
     HEAP32[$457>>2] = 34;
     $458 = (+($sign$0|0));
     $459 = $458 * 2.22507385850720138309E-308;
     $460 = $459 * 2.22507385850720138309E-308;
     $$0 = $460;
     STACKTOP = sp;return (+$$0);
    }
    $461 = ($j$086$i|0)==(0);
    if ($461) {
     $k$3$i = $k$084$i;
    } else {
     $462 = ($j$086$i|0)<(9);
     if ($462) {
      $463 = (($x$i) + ($k$084$i<<2)|0);
      $$promoted$i = HEAP32[$463>>2]|0;
      $465 = $$promoted$i;$j$371$i = $j$086$i;
      while(1) {
       $464 = ($465*10)|0;
       $466 = (($j$371$i) + 1)|0;
       $exitcond$i = ($466|0)==(9);
       if ($exitcond$i) {
        break;
       } else {
        $465 = $464;$j$371$i = $466;
       }
      }
      HEAP32[$463>>2] = $464;
     }
     $467 = (($k$084$i) + 1)|0;
     $k$3$i = $467;
    }
    $468 = ($lnz$079$i|0)<(9);
    do {
     if ($468) {
      $469 = ($lnz$079$i|0)<=($420|0);
      $470 = ($420|0)<(18);
      $or$cond3$i16 = $469 & $470;
      if ($or$cond3$i16) {
       $471 = ($420|0)==(9);
       if ($471) {
        $472 = (+($sign$0|0));
        $473 = HEAP32[$x$i>>2]|0;
        $474 = (+($473>>>0));
        $475 = $472 * $474;
        $$0 = $475;
        STACKTOP = sp;return (+$$0);
       }
       $476 = ($420|0)<(9);
       if ($476) {
        $477 = (+($sign$0|0));
        $478 = HEAP32[$x$i>>2]|0;
        $479 = (+($478>>>0));
        $480 = $477 * $479;
        $481 = (8 - ($420))|0;
        $482 = (286368 + ($481<<2)|0);
        $483 = HEAP32[$482>>2]|0;
        $484 = (+($483|0));
        $485 = $480 / $484;
        $$0 = $485;
        STACKTOP = sp;return (+$$0);
       }
       $486 = Math_imul($420, -3)|0;
       $$neg20$i = (($bits$0$ph) + 27)|0;
       $487 = (($$neg20$i) + ($486))|0;
       $488 = ($487|0)>(30);
       $$pre$i17 = HEAP32[$x$i>>2]|0;
       if (!($488)) {
        $489 = $$pre$i17 >>> $487;
        $490 = ($489|0)==(0);
        if (!($490)) {
         break;
        }
       }
       $491 = (+($sign$0|0));
       $492 = (+($$pre$i17>>>0));
       $493 = $491 * $492;
       $494 = (($420) + -10)|0;
       $495 = (286368 + ($494<<2)|0);
       $496 = HEAP32[$495>>2]|0;
       $497 = (+($496|0));
       $498 = $493 * $497;
       $$0 = $498;
       STACKTOP = sp;return (+$$0);
      }
     }
    } while(0);
    $499 = (($420|0) % 9)&-1;
    $500 = ($499|0)==(0);
    if ($500) {
     $a$2$ph40$i = 0;$e2$0$ph$i = 0;$rp$2$ph38$i = $420;$z$1$ph39$i = $k$3$i;
    } else {
     $501 = ($420|0)>(-1);
     $502 = (($499) + 9)|0;
     $503 = $501 ? $499 : $502;
     $504 = (8 - ($503))|0;
     $505 = (286368 + ($504<<2)|0);
     $506 = HEAP32[$505>>2]|0;
     $507 = ($k$3$i|0)==(0);
     if ($507) {
      $a$0$lcssa161$i = 0;$rp$0$lcssa162$i = $420;$z$0$i = 0;
     } else {
      $508 = (1000000000 / ($506|0))&-1;
      $a$061$i = 0;$carry$063$i = 0;$k$462$i = 0;$rp$060$i = $420;
      while(1) {
       $509 = (($x$i) + ($k$462$i<<2)|0);
       $510 = HEAP32[$509>>2]|0;
       $511 = (($510>>>0) % ($506>>>0))&-1;
       $512 = (($510>>>0) / ($506>>>0))&-1;
       $513 = (($512) + ($carry$063$i))|0;
       HEAP32[$509>>2] = $513;
       $514 = Math_imul($511, $508)|0;
       $515 = ($k$462$i|0)==($a$061$i|0);
       $516 = ($513|0)==(0);
       $or$cond11$i = $515 & $516;
       $517 = (($k$462$i) + 1)|0;
       if ($or$cond11$i) {
        $518 = $517 & 127;
        $519 = (($rp$060$i) + -9)|0;
        $a$1$i = $518;$rp$1$i18 = $519;
       } else {
        $a$1$i = $a$061$i;$rp$1$i18 = $rp$060$i;
       }
       $520 = ($517|0)==($k$3$i|0);
       if ($520) {
        break;
       } else {
        $a$061$i = $a$1$i;$carry$063$i = $514;$k$462$i = $517;$rp$060$i = $rp$1$i18;
       }
      }
      $521 = ($514|0)==(0);
      if ($521) {
       $a$0$lcssa161$i = $a$1$i;$rp$0$lcssa162$i = $rp$1$i18;$z$0$i = $k$3$i;
      } else {
       $522 = (($k$3$i) + 1)|0;
       $523 = (($x$i) + ($k$3$i<<2)|0);
       HEAP32[$523>>2] = $514;
       $a$0$lcssa161$i = $a$1$i;$rp$0$lcssa162$i = $rp$1$i18;$z$0$i = $522;
      }
     }
     $524 = (9 - ($503))|0;
     $525 = (($524) + ($rp$0$lcssa162$i))|0;
     $a$2$ph40$i = $a$0$lcssa161$i;$e2$0$ph$i = 0;$rp$2$ph38$i = $525;$z$1$ph39$i = $z$0$i;
    }
    L280: while(1) {
     $526 = ($rp$2$ph38$i|0)<(18);
     $527 = (($x$i) + ($a$2$ph40$i<<2)|0);
     if ($526) {
      $e2$0$us$i = $e2$0$ph$i;$z$1$us$i = $z$1$ph39$i;
      while(1) {
       $529 = (($z$1$us$i) + 127)|0;
       $carry1$0$us$i = 0;$k$5$in$us$i = $529;$z$2$us$i = $z$1$us$i;
       while(1) {
        $k$5$us$i = $k$5$in$us$i & 127;
        $530 = (($x$i) + ($k$5$us$i<<2)|0);
        $531 = HEAP32[$530>>2]|0;
        $532 = (_bitshift64Shl(($531|0),0,29)|0);
        $533 = tempRet0;
        $534 = (_i64Add(($532|0),($533|0),($carry1$0$us$i|0),0)|0);
        $535 = tempRet0;
        $536 = ($535>>>0)>(0);
        $537 = ($535|0)==(0);
        $538 = ($534>>>0)>(1000000000);
        $539 = $537 & $538;
        $540 = $536 | $539;
        if ($540) {
         $541 = (___udivdi3(($534|0),($535|0),1000000000,0)|0);
         $542 = tempRet0;
         $543 = (___uremdi3(($534|0),($535|0),1000000000,0)|0);
         $544 = tempRet0;
         $$sink$off0$us$i = $543;$carry1$1$us$i = $541;
        } else {
         $$sink$off0$us$i = $534;$carry1$1$us$i = 0;
        }
        HEAP32[$530>>2] = $$sink$off0$us$i;
        $545 = (($z$2$us$i) + 127)|0;
        $546 = $545 & 127;
        $547 = ($k$5$us$i|0)!=($546|0);
        $548 = ($k$5$us$i|0)==($a$2$ph40$i|0);
        $or$cond12$us$i = $547 | $548;
        if ($or$cond12$us$i) {
         $z$3$us$i = $z$2$us$i;
        } else {
         $549 = ($$sink$off0$us$i|0)==(0);
         $k$5$z$2$us$i = $549 ? $k$5$us$i : $z$2$us$i;
         $z$3$us$i = $k$5$z$2$us$i;
        }
        $550 = (($k$5$us$i) + -1)|0;
        if ($548) {
         break;
        } else {
         $carry1$0$us$i = $carry1$1$us$i;$k$5$in$us$i = $550;$z$2$us$i = $z$3$us$i;
        }
       }
       $551 = (($e2$0$us$i) + -29)|0;
       $552 = ($carry1$1$us$i|0)==(0);
       if ($552) {
        $e2$0$us$i = $551;$z$1$us$i = $z$3$us$i;
       } else {
        $$lcssa43$i = $551;$carry1$1$lcssa$lcssa$i = $carry1$1$us$i;$z$3$lcssa$lcssa$i = $z$3$us$i;
        break;
       }
      }
     } else {
      $528 = ($rp$2$ph38$i|0)==(18);
      if ($528) {
       $e2$0$us44$i = $e2$0$ph$i;$z$1$us45$i = $z$1$ph39$i;
      } else {
       $a$3$ph$i = $a$2$ph40$i;$e2$1$ph$i = $e2$0$ph$i;$rp$3$ph33$i = $rp$2$ph38$i;$z$5$ph$i = $z$1$ph39$i;
       break;
      }
      while(1) {
       $553 = HEAP32[$527>>2]|0;
       $554 = ($553>>>0)<(9007199);
       if (!($554)) {
        $a$3$ph$i = $a$2$ph40$i;$e2$1$ph$i = $e2$0$us44$i;$rp$3$ph33$i = 18;$z$5$ph$i = $z$1$us45$i;
        break L280;
       }
       $555 = (($z$1$us45$i) + 127)|0;
       $carry1$0$us49$i = 0;$k$5$in$us48$i = $555;$z$2$us47$i = $z$1$us45$i;
       while(1) {
        $k$5$us50$i = $k$5$in$us48$i & 127;
        $556 = (($x$i) + ($k$5$us50$i<<2)|0);
        $557 = HEAP32[$556>>2]|0;
        $558 = (_bitshift64Shl(($557|0),0,29)|0);
        $559 = tempRet0;
        $560 = (_i64Add(($558|0),($559|0),($carry1$0$us49$i|0),0)|0);
        $561 = tempRet0;
        $562 = ($561>>>0)>(0);
        $563 = ($561|0)==(0);
        $564 = ($560>>>0)>(1000000000);
        $565 = $563 & $564;
        $566 = $562 | $565;
        if ($566) {
         $567 = (___udivdi3(($560|0),($561|0),1000000000,0)|0);
         $568 = tempRet0;
         $569 = (___uremdi3(($560|0),($561|0),1000000000,0)|0);
         $570 = tempRet0;
         $$sink$off0$us53$i = $569;$carry1$1$us54$i = $567;
        } else {
         $$sink$off0$us53$i = $560;$carry1$1$us54$i = 0;
        }
        HEAP32[$556>>2] = $$sink$off0$us53$i;
        $571 = (($z$2$us47$i) + 127)|0;
        $572 = $571 & 127;
        $573 = ($k$5$us50$i|0)!=($572|0);
        $574 = ($k$5$us50$i|0)==($a$2$ph40$i|0);
        $or$cond12$us55$i = $573 | $574;
        if ($or$cond12$us55$i) {
         $z$3$us57$i = $z$2$us47$i;
        } else {
         $575 = ($$sink$off0$us53$i|0)==(0);
         $k$5$z$2$us56$i = $575 ? $k$5$us50$i : $z$2$us47$i;
         $z$3$us57$i = $k$5$z$2$us56$i;
        }
        $576 = (($k$5$us50$i) + -1)|0;
        if ($574) {
         break;
        } else {
         $carry1$0$us49$i = $carry1$1$us54$i;$k$5$in$us48$i = $576;$z$2$us47$i = $z$3$us57$i;
        }
       }
       $577 = (($e2$0$us44$i) + -29)|0;
       $578 = ($carry1$1$us54$i|0)==(0);
       if ($578) {
        $e2$0$us44$i = $577;$z$1$us45$i = $z$3$us57$i;
       } else {
        $$lcssa43$i = $577;$carry1$1$lcssa$lcssa$i = $carry1$1$us54$i;$z$3$lcssa$lcssa$i = $z$3$us57$i;
        break;
       }
      }
     }
     $579 = (($rp$2$ph38$i) + 9)|0;
     $580 = (($a$2$ph40$i) + 127)|0;
     $581 = $580 & 127;
     $582 = ($581|0)==($z$3$lcssa$lcssa$i|0);
     if ($582) {
      $583 = (($z$3$lcssa$lcssa$i) + 127)|0;
      $584 = $583 & 127;
      $585 = (($x$i) + ($584<<2)|0);
      $586 = HEAP32[$585>>2]|0;
      $587 = (($z$3$lcssa$lcssa$i) + 126)|0;
      $588 = $587 & 127;
      $589 = (($x$i) + ($588<<2)|0);
      $590 = HEAP32[$589>>2]|0;
      $591 = $590 | $586;
      HEAP32[$589>>2] = $591;
      $z$4$i = $584;
     } else {
      $z$4$i = $z$3$lcssa$lcssa$i;
     }
     $592 = (($x$i) + ($581<<2)|0);
     HEAP32[$592>>2] = $carry1$1$lcssa$lcssa$i;
     $a$2$ph40$i = $581;$e2$0$ph$i = $$lcssa43$i;$rp$2$ph38$i = $579;$z$1$ph39$i = $z$4$i;
    }
    L311: while(1) {
     $629 = (($z$5$ph$i) + 1)|0;
     $627 = $629 & 127;
     $630 = (($z$5$ph$i) + 127)|0;
     $631 = $630 & 127;
     $632 = (($x$i) + ($631<<2)|0);
     $a$3$i$ph = $a$3$ph$i;$e2$1$i$ph = $e2$1$ph$i;$rp$3$i$ph = $rp$3$ph33$i;
     while(1) {
      $605 = ($rp$3$i$ph|0)==(18);
      $633 = ($rp$3$i$ph|0)>(27);
      $$14$i = $633 ? 9 : 1;
      $a$3$i = $a$3$i$ph;$e2$1$i = $e2$1$i$ph;
      while(1) {
       $i$025$i = 0;
       while(1) {
        $595 = (($i$025$i) + ($a$3$i))|0;
        $596 = $595 & 127;
        $597 = ($596|0)==($z$5$ph$i|0);
        if ($597) {
         $i$1$i = 2;
         break;
        }
        $598 = (($x$i) + ($596<<2)|0);
        $599 = HEAP32[$598>>2]|0;
        $600 = (286360 + ($i$025$i<<2)|0);
        $601 = HEAP32[$600>>2]|0;
        $602 = ($599>>>0)<($601>>>0);
        if ($602) {
         $i$1$i = 2;
         break;
        }
        $603 = ($599>>>0)>($601>>>0);
        $594 = (($i$025$i) + 1)|0;
        if ($603) {
         $i$1$i = $i$025$i;
         break;
        }
        $593 = ($594|0)<(2);
        if ($593) {
         $i$025$i = $594;
        } else {
         $i$1$i = $594;
         break;
        }
       }
       $604 = ($i$1$i|0)==(2);
       $or$cond13$i = $604 & $605;
       if ($or$cond13$i) {
        break L311;
       }
       $608 = (($$14$i) + ($e2$1$i))|0;
       $609 = ($a$3$i|0)==($z$5$ph$i|0);
       if ($609) {
        $a$3$i = $z$5$ph$i;$e2$1$i = $608;
       } else {
        break;
       }
      }
      $610 = 1 << $$14$i;
      $611 = (($610) + -1)|0;
      $612 = 1000000000 >>> $$14$i;
      $a$427$i = $a$3$i;$carry3$030$i = 0;$k$628$i = $a$3$i;$rp$426$i = $rp$3$i$ph;
      while(1) {
       $613 = (($x$i) + ($k$628$i<<2)|0);
       $614 = HEAP32[$613>>2]|0;
       $615 = $614 & $611;
       $616 = $614 >>> $$14$i;
       $617 = (($616) + ($carry3$030$i))|0;
       HEAP32[$613>>2] = $617;
       $618 = Math_imul($615, $612)|0;
       $619 = ($k$628$i|0)==($a$427$i|0);
       $620 = ($617|0)==(0);
       $or$cond15$i = $619 & $620;
       $621 = (($k$628$i) + 1)|0;
       $622 = $621 & 127;
       $623 = (($rp$426$i) + -9)|0;
       $rp$5$i = $or$cond15$i ? $623 : $rp$426$i;
       $a$5$i = $or$cond15$i ? $622 : $a$427$i;
       $624 = ($622|0)==($z$5$ph$i|0);
       if ($624) {
        break;
       } else {
        $a$427$i = $a$5$i;$carry3$030$i = $618;$k$628$i = $622;$rp$426$i = $rp$5$i;
       }
      }
      $625 = ($618|0)==(0);
      if ($625) {
       $a$3$i$ph = $a$5$i;$e2$1$i$ph = $608;$rp$3$i$ph = $rp$5$i;
       continue;
      }
      $626 = ($627|0)==($a$5$i|0);
      if (!($626)) {
       break;
      }
      $634 = HEAP32[$632>>2]|0;
      $635 = $634 | 1;
      HEAP32[$632>>2] = $635;
      $a$3$i$ph = $a$5$i;$e2$1$i$ph = $608;$rp$3$i$ph = $rp$5$i;
     }
     $628 = (($x$i) + ($z$5$ph$i<<2)|0);
     HEAP32[$628>>2] = $618;
     $a$3$ph$i = $a$5$i;$e2$1$ph$i = $608;$rp$3$ph33$i = $rp$5$i;$z$5$ph$i = $627;
    }
    $606 = $a$3$i & 127;
    $607 = ($606|0)==($z$5$ph$i|0);
    if ($607) {
     $636 = (($627) + -1)|0;
     $637 = (($x$i) + ($636<<2)|0);
     HEAP32[$637>>2] = 0;
     $z$7$i = $627;
    } else {
     $z$7$i = $z$5$ph$i;
    }
    $638 = (($x$i) + ($606<<2)|0);
    $639 = HEAP32[$638>>2]|0;
    $640 = (+($639>>>0));
    $641 = (($a$3$i) + 1)|0;
    $642 = $641 & 127;
    $643 = ($642|0)==($z$7$i|0);
    if ($643) {
     $702 = (($z$7$i) + 1)|0;
     $703 = $702 & 127;
     $704 = (($703) + -1)|0;
     $705 = (($x$i) + ($704<<2)|0);
     HEAP32[$705>>2] = 0;
     $z$7$1$i = $703;
    } else {
     $z$7$1$i = $z$7$i;
    }
    $706 = $640 * 1.0E+9;
    $707 = (($x$i) + ($642<<2)|0);
    $708 = HEAP32[$707>>2]|0;
    $709 = (+($708>>>0));
    $710 = $706 + $709;
    $667 = (+($sign$0|0));
    $649 = $667 * $710;
    $687 = (($e2$1$i) + 53)|0;
    $645 = (($687) - ($emin$0$ph))|0;
    $711 = ($645|0)<($bits$0$ph|0);
    if ($711) {
     $644 = ($645|0)<(0);
     $$$i22 = $644 ? 0 : $645;
     $$09$i = $$$i22;$denormal$0$i = 1;
    } else {
     $$09$i = $bits$0$ph;$denormal$0$i = 0;
    }
    $646 = ($$09$i|0)<(53);
    if ($646) {
     $647 = (105 - ($$09$i))|0;
     $648 = (+_scalbn(1.0,$647));
     $650 = (+_copysignl((+$648),(+$649)));
     $651 = (53 - ($$09$i))|0;
     $652 = (+_scalbn(1.0,$651));
     $653 = (+_fmodl((+$649),(+$652)));
     $654 = $649 - $653;
     $655 = $650 + $654;
     $bias$0$i = $650;$frac$0$i = $653;$y$1$i23 = $655;
    } else {
     $bias$0$i = 0.0;$frac$0$i = 0.0;$y$1$i23 = $649;
    }
    $656 = (($a$3$i) + 2)|0;
    $657 = $656 & 127;
    $658 = ($657|0)==($z$7$1$i|0);
    do {
     if ($658) {
      $frac$2$i = $frac$0$i;
     } else {
      $659 = (($x$i) + ($657<<2)|0);
      $660 = HEAP32[$659>>2]|0;
      $661 = ($660>>>0)<(500000000);
      do {
       if ($661) {
        $662 = ($660|0)==(0);
        if ($662) {
         $663 = (($a$3$i) + 3)|0;
         $664 = $663 & 127;
         $665 = ($664|0)==($z$7$1$i|0);
         if ($665) {
          $frac$1$i = $frac$0$i;
          break;
         }
        }
        $666 = $667 * 0.25;
        $668 = $666 + $frac$0$i;
        $frac$1$i = $668;
       } else {
        $669 = ($660>>>0)>(500000000);
        if ($669) {
         $670 = $667 * 0.75;
         $671 = $670 + $frac$0$i;
         $frac$1$i = $671;
         break;
        }
        $672 = (($a$3$i) + 3)|0;
        $673 = $672 & 127;
        $674 = ($673|0)==($z$7$1$i|0);
        if ($674) {
         $675 = $667 * 0.5;
         $676 = $675 + $frac$0$i;
         $frac$1$i = $676;
         break;
        } else {
         $677 = $667 * 0.75;
         $678 = $677 + $frac$0$i;
         $frac$1$i = $678;
         break;
        }
       }
      } while(0);
      $679 = (53 - ($$09$i))|0;
      $680 = ($679|0)>(1);
      if (!($680)) {
       $frac$2$i = $frac$1$i;
       break;
      }
      $681 = (+_fmodl((+$frac$1$i),1.0));
      $682 = $681 != 0.0;
      if ($682) {
       $frac$2$i = $frac$1$i;
       break;
      }
      $683 = $frac$1$i + 1.0;
      $frac$2$i = $683;
     }
    } while(0);
    $684 = $y$1$i23 + $frac$2$i;
    $685 = $684 - $bias$0$i;
    $686 = $687 & 2147483647;
    $688 = (-2 - ($sum$i))|0;
    $689 = ($686|0)>($688|0);
    do {
     if ($689) {
      $690 = (+Math_abs((+$685)));
      $691 = !($690 >= 9007199254740992.0);
      if ($691) {
       $denormal$2$i = $denormal$0$i;$e2$2$i = $e2$1$i;$y$2$i24 = $685;
      } else {
       $692 = ($denormal$0$i|0)!=(0);
       $693 = ($$09$i|0)==($645|0);
       $or$cond16$i = $692 & $693;
       $denormal$1$i = $or$cond16$i ? 0 : $denormal$0$i;
       $694 = $685 * 0.5;
       $695 = (($e2$1$i) + 1)|0;
       $denormal$2$i = $denormal$1$i;$e2$2$i = $695;$y$2$i24 = $694;
      }
      $696 = (($e2$2$i) + 50)|0;
      $697 = ($696|0)>($325|0);
      if (!($697)) {
       $698 = ($denormal$2$i|0)!=(0);
       $699 = $frac$2$i != 0.0;
       $or$cond17$i = $698 & $699;
       if (!($or$cond17$i)) {
        $e2$3$i = $e2$2$i;$y$3$i = $y$2$i24;
        break;
       }
      }
      $700 = (___errno_location()|0);
      HEAP32[$700>>2] = 34;
      $e2$3$i = $e2$2$i;$y$3$i = $y$2$i24;
     } else {
      $e2$3$i = $e2$1$i;$y$3$i = $685;
     }
    } while(0);
    $701 = (+_scalbnl($y$3$i,$e2$3$i));
    $$0 = $701;
    STACKTOP = sp;return (+$$0);
   } else if ((($i$3|0) == 3)) {
    $68 = HEAP32[$0>>2]|0;
    $69 = HEAP32[$1>>2]|0;
    $70 = ($68>>>0)<($69>>>0);
    if ($70) {
     $71 = (($68) + 1|0);
     HEAP32[$0>>2] = $71;
     $72 = HEAP8[$68>>0]|0;
     $73 = $72&255;
     $76 = $73;
    } else {
     $74 = (___shgetc($f)|0);
     $76 = $74;
    }
    $75 = ($76|0)==(40);
    if ($75) {
     $i$4 = 1;
    } else {
     $77 = HEAP32[$1>>2]|0;
     $78 = ($77|0)==(0|0);
     if ($78) {
      $$0 = nan;
      STACKTOP = sp;return (+$$0);
     }
     $79 = HEAP32[$0>>2]|0;
     $80 = (($79) + -1|0);
     HEAP32[$0>>2] = $80;
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    }
    while(1) {
     $81 = HEAP32[$0>>2]|0;
     $82 = HEAP32[$1>>2]|0;
     $83 = ($81>>>0)<($82>>>0);
     if ($83) {
      $84 = (($81) + 1|0);
      HEAP32[$0>>2] = $84;
      $85 = HEAP8[$81>>0]|0;
      $86 = $85&255;
      $89 = $86;
     } else {
      $87 = (___shgetc($f)|0);
      $89 = $87;
     }
     $88 = (($89) + -48)|0;
     $90 = ($88>>>0)<(10);
     $91 = (($89) + -65)|0;
     $92 = ($91>>>0)<(26);
     $or$cond8 = $90 | $92;
     if (!($or$cond8)) {
      $93 = (($89) + -97)|0;
      $94 = ($93>>>0)<(26);
      $95 = ($89|0)==(95);
      $or$cond5 = $94 | $95;
      if (!($or$cond5)) {
       break;
      }
     }
     $107 = (($i$4) + 1)|0;
     $i$4 = $107;
    }
    $96 = ($89|0)==(41);
    if ($96) {
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    }
    $97 = HEAP32[$1>>2]|0;
    $98 = ($97|0)==(0|0);
    if (!($98)) {
     $99 = HEAP32[$0>>2]|0;
     $100 = (($99) + -1|0);
     HEAP32[$0>>2] = $100;
    }
    if ($39) {
     $102 = (___errno_location()|0);
     HEAP32[$102>>2] = 22;
     ___shlim($f,0);
     $$0 = 0.0;
     STACKTOP = sp;return (+$$0);
    }
    $101 = ($i$4|0)==(0);
    $brmerge107 = $101 | $98;
    if ($brmerge107) {
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    } else {
     $$in = $i$4;
    }
    while(1) {
     $103 = (($$in) + -1)|0;
     $104 = HEAP32[$0>>2]|0;
     $105 = (($104) + -1|0);
     HEAP32[$0>>2] = $105;
     $106 = ($103|0)==(0);
     if ($106) {
      $$0 = nan;
      break;
     } else {
      $$in = $103;
     }
    }
    STACKTOP = sp;return (+$$0);
   } else {
    $108 = HEAP32[$1>>2]|0;
    $109 = ($108|0)==(0|0);
    if (!($109)) {
     $110 = HEAP32[$0>>2]|0;
     $111 = (($110) + -1|0);
     HEAP32[$0>>2] = $111;
    }
    $112 = (___errno_location()|0);
    HEAP32[$112>>2] = 22;
    ___shlim($f,0);
    $$0 = 0.0;
    STACKTOP = sp;return (+$$0);
   }
  }
 } while(0);
 if ((label|0) == 23) {
  $41 = HEAP32[$1>>2]|0;
  $42 = ($41|0)==(0|0);
  if (!($42)) {
   $43 = HEAP32[$0>>2]|0;
   $44 = (($43) + -1|0);
   HEAP32[$0>>2] = $44;
  }
  $notlhs = ($pok|0)==(0);
  $notrhs = ($i$0$lcssa>>>0)<(4);
  $or$cond106$not = $notrhs | $notlhs;
  $brmerge = $or$cond106$not | $42;
  if (!($brmerge)) {
   $i$166 = $i$0$lcssa;
   while(1) {
    $45 = HEAP32[$0>>2]|0;
    $46 = (($45) + -1|0);
    HEAP32[$0>>2] = $46;
    $47 = (($i$166) + -1)|0;
    $48 = ($47>>>0)>(3);
    if ($48) {
     $i$166 = $47;
    } else {
     break;
    }
   }
  }
 }
 $49 = (+($sign$0|0));
 $50 = $49 * inf;
 $51 = $50;
 $$0 = $51;
 STACKTOP = sp;return (+$$0);
}
function _scanexp($f,$pok) {
 $f = $f|0;
 $pok = $pok|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $c$0 = 0, $c$1$be = 0;
 var $c$18 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$23 = 0, $c$3$be = 0, $neg$0 = 0, $or$cond = 0, $or$cond2 = 0, $phitmp16 = 0, $x$09 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($f) + 100|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 if ($4) {
  $5 = (($1) + 1|0);
  HEAP32[$0>>2] = $5;
  $6 = HEAP8[$1>>0]|0;
  $7 = $6&255;
  $10 = $7;
 } else {
  $8 = (___shgetc($f)|0);
  $10 = $8;
 }
 $9 = ($10|0)==(45);
 if ((($10|0) == 43) | (($10|0) == 45)) {
  $11 = $9&1;
  $12 = HEAP32[$0>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = ($12>>>0)<($13>>>0);
  if ($14) {
   $15 = (($12) + 1|0);
   HEAP32[$0>>2] = $15;
   $16 = HEAP8[$12>>0]|0;
   $17 = $16&255;
   $20 = $17;
  } else {
   $18 = (___shgetc($f)|0);
   $20 = $18;
  }
  $19 = (($20) + -48)|0;
  $21 = ($19>>>0)<(10);
  $22 = ($pok|0)==(0);
  $or$cond = $21 | $22;
  if ($or$cond) {
   $c$0 = $20;$neg$0 = $11;
  } else {
   $23 = HEAP32[$2>>2]|0;
   $24 = ($23|0)==(0|0);
   if ($24) {
    $c$0 = $20;$neg$0 = $11;
   } else {
    $25 = HEAP32[$0>>2]|0;
    $26 = (($25) + -1|0);
    HEAP32[$0>>2] = $26;
    $c$0 = $20;$neg$0 = $11;
   }
  }
 } else {
  $c$0 = $10;$neg$0 = 0;
 }
 $27 = (($c$0) + -48)|0;
 $28 = ($27>>>0)>(9);
 if ($28) {
  $29 = HEAP32[$2>>2]|0;
  $30 = ($29|0)==(0|0);
  if ($30) {
   $95 = -2147483648;$96 = 0;
   tempRet0 = $95;
   STACKTOP = sp;return ($96|0);
  }
  $31 = HEAP32[$0>>2]|0;
  $32 = (($31) + -1|0);
  HEAP32[$0>>2] = $32;
  $95 = -2147483648;$96 = 0;
  tempRet0 = $95;
  STACKTOP = sp;return ($96|0);
 } else {
  $c$18 = $c$0;$x$09 = 0;
 }
 while(1) {
  $33 = (($c$18) + -48)|0;
  $34 = (($33) + ($x$09))|0;
  $35 = HEAP32[$0>>2]|0;
  $36 = HEAP32[$2>>2]|0;
  $37 = ($35>>>0)<($36>>>0);
  if ($37) {
   $38 = (($35) + 1|0);
   HEAP32[$0>>2] = $38;
   $39 = HEAP8[$35>>0]|0;
   $40 = $39&255;
   $c$1$be = $40;
  } else {
   $41 = (___shgetc($f)|0);
   $c$1$be = $41;
  }
  $42 = (($c$1$be) + -48)|0;
  $43 = ($42>>>0)<(10);
  $44 = ($34|0)<(214748364);
  $$ = $43 & $44;
  if (!($$)) {
   break;
  }
  $phitmp16 = ($34*10)|0;
  $c$18 = $c$1$be;$x$09 = $phitmp16;
 }
 $45 = ($34|0)<(0);
 $46 = $45 << 31 >> 31;
 $47 = (($c$1$be) + -48)|0;
 $48 = ($47>>>0)<(10);
 if ($48) {
  $51 = $34;$52 = $46;$c$23 = $c$1$be;
  while(1) {
   $53 = (___muldi3(($51|0),($52|0),10,0)|0);
   $54 = tempRet0;
   $55 = ($c$23|0)<(0);
   $56 = $55 << 31 >> 31;
   $57 = (_i64Add(($c$23|0),($56|0),-48,-1)|0);
   $58 = tempRet0;
   $59 = (_i64Add(($57|0),($58|0),($53|0),($54|0))|0);
   $60 = tempRet0;
   $61 = HEAP32[$0>>2]|0;
   $62 = HEAP32[$2>>2]|0;
   $63 = ($61>>>0)<($62>>>0);
   if ($63) {
    $64 = (($61) + 1|0);
    HEAP32[$0>>2] = $64;
    $65 = HEAP8[$61>>0]|0;
    $66 = $65&255;
    $c$2$be = $66;
   } else {
    $67 = (___shgetc($f)|0);
    $c$2$be = $67;
   }
   $68 = (($c$2$be) + -48)|0;
   $69 = ($68>>>0)<(10);
   $70 = ($60|0)<(21474836);
   $71 = ($60|0)==(21474836);
   $72 = ($59>>>0)<(2061584302);
   $73 = $71 & $72;
   $74 = $70 | $73;
   $or$cond2 = $69 & $74;
   if ($or$cond2) {
    $51 = $59;$52 = $60;$c$23 = $c$2$be;
   } else {
    $89 = $59;$90 = $60;$c$2$lcssa = $c$2$be;
    break;
   }
  }
 } else {
  $89 = $34;$90 = $46;$c$2$lcssa = $c$1$be;
 }
 $49 = (($c$2$lcssa) + -48)|0;
 $50 = ($49>>>0)<(10);
 if ($50) {
  while(1) {
   $75 = HEAP32[$0>>2]|0;
   $76 = HEAP32[$2>>2]|0;
   $77 = ($75>>>0)<($76>>>0);
   if ($77) {
    $78 = (($75) + 1|0);
    HEAP32[$0>>2] = $78;
    $79 = HEAP8[$75>>0]|0;
    $80 = $79&255;
    $c$3$be = $80;
   } else {
    $81 = (___shgetc($f)|0);
    $c$3$be = $81;
   }
   $82 = (($c$3$be) + -48)|0;
   $83 = ($82>>>0)<(10);
   if (!($83)) {
    break;
   }
  }
 }
 $84 = HEAP32[$2>>2]|0;
 $85 = ($84|0)==(0|0);
 if (!($85)) {
  $86 = HEAP32[$0>>2]|0;
  $87 = (($86) + -1|0);
  HEAP32[$0>>2] = $87;
 }
 $88 = ($neg$0|0)!=(0);
 $91 = (_i64Subtract(0,0,($89|0),($90|0))|0);
 $92 = tempRet0;
 $93 = $88 ? $91 : $89;
 $94 = $88 ? $92 : $90;
 $95 = $94;$96 = $93;
 tempRet0 = $95;
 STACKTOP = sp;return ($96|0);
}
function ___shlim($f,$lim) {
 $f = $f|0;
 $lim = $lim|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 104|0);
 HEAP32[$0>>2] = $lim;
 $1 = (($f) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($f) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $2;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = (($f) + 108|0);
 HEAP32[$8>>2] = $7;
 $9 = ($lim|0)!=(0);
 $10 = ($7|0)>($lim|0);
 $or$cond = $9 & $10;
 if ($or$cond) {
  $11 = (($4) + ($lim)|0);
  $12 = (($f) + 100|0);
  HEAP32[$12>>2] = $11;
  STACKTOP = sp;return;
 } else {
  $13 = (($f) + 100|0);
  HEAP32[$13>>2] = $2;
  STACKTOP = sp;return;
 }
}
function ___shgetc($f) {
 $f = $f|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert2 = 0, $$pre = 0, $$pre3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  label = 3;
 } else {
  $3 = (($f) + 108|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)<($1|0);
  if ($5) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $6 = (___uflow($f)|0);
  $7 = ($6|0)<(0);
  if (!($7)) {
   $9 = HEAP32[$0>>2]|0;
   $10 = ($9|0)==(0);
   $$phi$trans$insert = (($f) + 8|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($10) {
    label = 8;
   } else {
    $11 = (($f) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = $$pre;
    $14 = $12;
    $15 = (($13) - ($14))|0;
    $16 = (($f) + 108|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (($9) - ($17))|0;
    $19 = (($18) + -1)|0;
    $20 = ($15|0)>($19|0);
    if ($20) {
     $21 = (($12) + ($19)|0);
     $22 = (($f) + 100|0);
     HEAP32[$22>>2] = $21;
    } else {
     label = 8;
    }
   }
   if ((label|0) == 8) {
    $23 = (($f) + 100|0);
    HEAP32[$23>>2] = $$pre;
   }
   $24 = ($$pre|0)==(0|0);
   $$phi$trans$insert2 = (($f) + 4|0);
   $$pre3 = HEAP32[$$phi$trans$insert2>>2]|0;
   if (!($24)) {
    $25 = $$pre;
    $26 = $$pre3;
    $27 = (($f) + 108|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($25) + 1)|0;
    $30 = (($29) - ($26))|0;
    $31 = (($30) + ($28))|0;
    HEAP32[$27>>2] = $31;
   }
   $32 = (($$pre3) + -1|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $33&255;
   $35 = ($34|0)==($6|0);
   if ($35) {
    $$0 = $6;
    STACKTOP = sp;return ($$0|0);
   }
   $36 = $6&255;
   HEAP8[$32>>0] = $36;
   $$0 = $6;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $8 = (($f) + 100|0);
 HEAP32[$8>>2] = 0;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 if ((($4|0) == 0)) {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 18446744073709551616.0;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  STACKTOP = sp;return (+$$0);
 } else if ((($4|0) == 2047)) {
  $$0 = $x;
  STACKTOP = sp;return (+$$0);
 } else {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
  STACKTOP = sp;return (+$$0);
 }
 return +0;
}
function _frexpf($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
 $1 = $0 >>> 23;
 $2 = $1 & 255;
 if ((($2|0) == 255)) {
  $$0 = $x;
  STACKTOP = sp;return (+$$0);
 } else if ((($2|0) == 0)) {
  $3 = $x != 0.0;
  if ($3) {
   $4 = $x * 18446744073709551616.0;
   $5 = (+_frexpf($4,$e));
   $6 = HEAP32[$e>>2]|0;
   $7 = (($6) + -64)|0;
   $$01 = $5;$storemerge = $7;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  STACKTOP = sp;return (+$$0);
 } else {
  $8 = (($2) + -126)|0;
  HEAP32[$e>>2] = $8;
  $9 = $0 & -2139095041;
  $10 = $9 | 1056964608;
  $11 = (HEAP32[tempDoublePtr>>2]=$10,+HEAPF32[tempDoublePtr>>2]);
  $$0 = $11;
  STACKTOP = sp;return (+$$0);
 }
 return +0;
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_frexp($x,$e));
 STACKTOP = sp;return (+$0);
}
function _scalbn($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)>(1023);
 if ($0) {
  $1 = $x * 8.98846567431157953864E+307;
  $2 = (($n) + -1023)|0;
  $3 = ($2|0)>(1023);
  if ($3) {
   $4 = $1 * 8.98846567431157953864E+307;
   $5 = (($n) + -2046)|0;
   $6 = ($5|0)>(1023);
   $$ = $6 ? 1023 : $5;
   $$0 = $$;$y$0 = $4;
  } else {
   $$0 = $2;$y$0 = $1;
  }
 } else {
  $7 = ($n|0)<(-1022);
  if ($7) {
   $8 = $x * 2.22507385850720138309E-308;
   $9 = (($n) + 1022)|0;
   $10 = ($9|0)<(-1022);
   if ($10) {
    $11 = $8 * 2.22507385850720138309E-308;
    $12 = (($n) + 2044)|0;
    $13 = ($12|0)<(-1022);
    $$1 = $13 ? -1022 : $12;
    $$0 = $$1;$y$0 = $11;
   } else {
    $$0 = $9;$y$0 = $8;
   }
  } else {
   $$0 = $n;$y$0 = $x;
  }
 }
 $14 = (($$0) + 1023)|0;
 $15 = (_bitshift64Shl(($14|0),0,52)|0);
 $16 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $15;HEAP32[tempDoublePtr+4>>2] = $16;$17 = +HEAPF64[tempDoublePtr>>3];
 $18 = $y$0 * $17;
 STACKTOP = sp;return (+$18);
}
function _scalbnl($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_scalbn($x,$n));
 STACKTOP = sp;return (+$0);
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_wcrtomb($s,$wc,0)|0);
  $$0 = $1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = ($wc>>>0)<(128);
 if ($1) {
  $2 = $wc&255;
  HEAP8[$s>>0] = $2;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ($wc>>>0)<(2048);
 if ($3) {
  $4 = $wc >>> 6;
  $5 = $4 | 192;
  $6 = $5&255;
  $7 = (($s) + 1|0);
  HEAP8[$s>>0] = $6;
  $8 = $wc & 63;
  $9 = $8 | 128;
  $10 = $9&255;
  HEAP8[$7>>0] = $10;
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = ($wc>>>0)<(55296);
 $12 = (($wc) + -57344)|0;
 $13 = ($12>>>0)<(8192);
 $or$cond = $11 | $13;
 if ($or$cond) {
  $14 = $wc >>> 12;
  $15 = $14 | 224;
  $16 = $15&255;
  $17 = (($s) + 1|0);
  HEAP8[$s>>0] = $16;
  $18 = $wc >>> 6;
  $19 = $18 & 63;
  $20 = $19 | 128;
  $21 = $20&255;
  $22 = (($s) + 2|0);
  HEAP8[$17>>0] = $21;
  $23 = $wc & 63;
  $24 = $23 | 128;
  $25 = $24&255;
  HEAP8[$22>>0] = $25;
  $$0 = 3;
  STACKTOP = sp;return ($$0|0);
 }
 $26 = (($wc) + -65536)|0;
 $27 = ($26>>>0)<(1048576);
 if ($27) {
  $28 = $wc >>> 18;
  $29 = $28 | 240;
  $30 = $29&255;
  $31 = (($s) + 1|0);
  HEAP8[$s>>0] = $30;
  $32 = $wc >>> 12;
  $33 = $32 & 63;
  $34 = $33 | 128;
  $35 = $34&255;
  $36 = (($s) + 2|0);
  HEAP8[$31>>0] = $35;
  $37 = $wc >>> 6;
  $38 = $37 & 63;
  $39 = $38 | 128;
  $40 = $39&255;
  $41 = (($s) + 3|0);
  HEAP8[$36>>0] = $40;
  $42 = $wc & 63;
  $43 = $42 | 128;
  $44 = $43&255;
  HEAP8[$41>>0] = $44;
  $$0 = 4;
  STACKTOP = sp;return ($$0|0);
 } else {
  $45 = (___errno_location()|0);
  HEAP32[$45>>2] = 84;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function ___rand48_step($xi,$lc) {
 $xi = $xi|0;
 $lc = $lc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP16[$xi>>1]|0;
 $1 = $0&65535;
 $2 = (($xi) + 2|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 $5 = $4 << 16;
 $6 = $5 | $1;
 $7 = ($6|0)<(0);
 $8 = $7 << 31 >> 31;
 $9 = (($xi) + 4|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10&65535;
 $12 = $8 | $11;
 $13 = HEAP16[$lc>>1]|0;
 $14 = $13&65535;
 $15 = (($lc) + 2|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = $16&65535;
 $18 = $17 << 16;
 $19 = $18 | $14;
 $20 = ($19|0)<(0);
 $21 = $20 << 31 >> 31;
 $22 = (($lc) + 4|0);
 $23 = HEAP16[$22>>1]|0;
 $24 = $23&65535;
 $25 = $21 | $24;
 $26 = (___muldi3(($19|0),($25|0),($6|0),($12|0))|0);
 $27 = tempRet0;
 $28 = (($lc) + 6|0);
 $29 = HEAP16[$28>>1]|0;
 $30 = $29&65535;
 $31 = (_i64Add(($26|0),($27|0),($30|0),0)|0);
 $32 = tempRet0;
 $33 = $31&65535;
 HEAP16[$xi>>1] = $33;
 $34 = (_bitshift64Lshr(($31|0),($32|0),16)|0);
 $35 = tempRet0;
 $36 = $34&65535;
 HEAP16[$2>>1] = $36;
 $37 = $32&65535;
 HEAP16[$9>>1] = $37;
 $38 = $32 & 65535;
 tempRet0 = $38;
 STACKTOP = sp;return ($31|0);
}
function _erand48($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___rand48_step($s,((286400 + 6|0)))|0);
 $1 = tempRet0;
 $2 = (_bitshift64Shl(($0|0),($1|0),4)|0);
 $3 = tempRet0;
 $4 = $3 | 1072693248;
 HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $4;$5 = +HEAPF64[tempDoublePtr>>3];
 $6 = $5 + -1.0;
 STACKTOP = sp;return (+$6);
}
function _drand48() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___rand48_step(286400,((286400 + 6|0)))|0);
 $1 = tempRet0;
 $2 = (_bitshift64Shl(($0|0),($1|0),4)|0);
 $3 = tempRet0;
 $4 = $3 | 1072693248;
 HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $4;$5 = +HEAPF64[tempDoublePtr>>3];
 $6 = $5 + -1.0;
 STACKTOP = sp;return (+$6);
}
function _lcong48($p) {
 $p = $p|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP16[286400+0>>1]=HEAP16[$p+0>>1]|0;HEAP16[286400+2>>1]=HEAP16[$p+2>>1]|0;HEAP16[286400+4>>1]=HEAP16[$p+4>>1]|0;HEAP16[286400+6>>1]=HEAP16[$p+6>>1]|0;HEAP16[286400+8>>1]=HEAP16[$p+8>>1]|0;HEAP16[286400+10>>1]=HEAP16[$p+10>>1]|0;HEAP16[286400+12>>1]=HEAP16[$p+12>>1]|0;
 STACKTOP = sp;return;
}
function _nrand48($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___rand48_step($s,((286400 + 6|0)))|0);
 $1 = tempRet0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),17)|0);
 $3 = tempRet0;
 STACKTOP = sp;return ($2|0);
}
function _lrand48() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___rand48_step(286400,((286400 + 6|0)))|0);
 $1 = tempRet0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),17)|0);
 $3 = tempRet0;
 STACKTOP = sp;return ($2|0);
}
function _jrand48($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___rand48_step($s,((286400 + 6|0)))|0);
 $1 = tempRet0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),16)|0);
 $3 = tempRet0;
 STACKTOP = sp;return ($2|0);
}
function _mrand48() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___rand48_step(286400,((286400 + 6|0)))|0);
 $1 = tempRet0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),16)|0);
 $3 = tempRet0;
 STACKTOP = sp;return ($2|0);
}
function _rand_r($seed) {
 $seed = $seed|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$seed>>2]|0;
 $1 = Math_imul($0, 1103515245)|0;
 $2 = (($1) + 12345)|0;
 HEAP32[$seed>>2] = $2;
 $3 = $2 >>> 11;
 $4 = $3 ^ $2;
 $5 = $4 << 7;
 $6 = $5 & -1658038656;
 $7 = $6 ^ $4;
 $8 = $7 << 15;
 $9 = $8 & -272236544;
 $10 = $9 ^ $7;
 $11 = $10 >>> 18;
 $12 = $11 ^ $10;
 $13 = $12 >>> 1;
 STACKTOP = sp;return ($13|0);
}
function _srand($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($s) + -1)|0;
 $1 = 286416;
 $2 = $1;
 HEAP32[$2>>2] = $0;
 $3 = (($1) + 4)|0;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 STACKTOP = sp;return;
}
function _rand() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = 286416;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (___muldi3(($2|0),($5|0),1284865837,1481765933)|0);
 $7 = tempRet0;
 $8 = (_i64Add(($6|0),($7|0),1,0)|0);
 $9 = tempRet0;
 $10 = 286416;
 $11 = $10;
 HEAP32[$11>>2] = $8;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = $9;
 $14 = (_bitshift64Lshr(($8|0),($9|0),33)|0);
 $15 = tempRet0;
 STACKTOP = sp;return ($14|0);
}
function _srandom($seed) {
 $seed = $seed|0;
 var $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k$01$i = 0;
 var $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ___lock((286424|0));
 $0 = HEAP32[286432>>2]|0;
 if ((($0|0) == 31)) {
  HEAP32[286456>>2] = 3;
  HEAP32[286448>>2] = 0;
  label = 6;
 } else if ((($0|0) == 0)) {
  $1 = HEAP32[286440>>2]|0;
  HEAP32[$1>>2] = $seed;
  ___unlock((286424|0));
  STACKTOP = sp;return;
 } else {
  $2 = ($0|0)==(7);
  $phitmp$i = $2 ? 3 : 1;
  HEAP32[286456>>2] = $phitmp$i;
  HEAP32[286448>>2] = 0;
  $3 = ($0|0)>(0);
  if ($3) {
   label = 6;
  } else {
   $$pre$i = HEAP32[286440>>2]|0;
   $16 = $$pre$i;
  }
 }
 if ((label|0) == 6) {
  $4 = HEAP32[286440>>2]|0;
  $5 = $seed;$6 = 0;$k$01$i = 0;
  while(1) {
   $7 = (___muldi3(($5|0),($6|0),1284865837,1481765933)|0);
   $8 = tempRet0;
   $9 = (_i64Add(($7|0),($8|0),1,0)|0);
   $10 = tempRet0;
   $11 = (($4) + ($k$01$i<<2)|0);
   HEAP32[$11>>2] = $10;
   $12 = (($k$01$i) + 1)|0;
   $13 = HEAP32[286432>>2]|0;
   $14 = ($12|0)<($13|0);
   if ($14) {
    $5 = $9;$6 = $10;$k$01$i = $12;
   } else {
    $16 = $4;
    break;
   }
  }
 }
 $15 = HEAP32[$16>>2]|0;
 $17 = $15 | 1;
 HEAP32[$16>>2] = $17;
 ___unlock((286424|0));
 STACKTOP = sp;return;
}
function _initstate($seed,$state,$size) {
 $seed = $seed|0;
 $state = $state|0;
 $size = $size|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k$01$i = 0, $storemerge = 0, $storemerge2$in = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($size>>>0)<(8);
 if ($0) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 ___lock((286424|0));
 $1 = HEAP32[286432>>2]|0;
 $2 = $1 << 16;
 $3 = HEAP32[286456>>2]|0;
 $4 = $3 << 8;
 $5 = $4 | $2;
 $6 = HEAP32[286448>>2]|0;
 $7 = $5 | $6;
 $8 = HEAP32[286440>>2]|0;
 $9 = (($8) + -4|0);
 HEAP32[$9>>2] = $7;
 $10 = ($size>>>0)<(32);
 if ($10) {
  HEAP32[286432>>2] = 0;
  $14 = (($state) + 4|0);
  HEAP32[286440>>2] = $14;
  HEAP32[$14>>2] = $seed;
  $35 = $14;
 } else {
  $11 = ($size>>>0)<(64);
  do {
   if ($11) {
    HEAP32[286432>>2] = 7;
    $storemerge = 3;
   } else {
    $12 = ($size>>>0)<(128);
    if ($12) {
     HEAP32[286432>>2] = 15;
     $storemerge = 1;
     break;
    }
    $13 = ($size>>>0)<(256);
    if ($13) {
     HEAP32[286432>>2] = 31;
     $storemerge = 3;
     break;
    } else {
     HEAP32[286432>>2] = 63;
     $storemerge = 1;
     break;
    }
   }
  } while(0);
  $storemerge2$in = (($state) + 4|0);
  HEAP32[286440>>2] = $storemerge2$in;
  HEAP32[286456>>2] = $storemerge;
  HEAP32[286448>>2] = 0;
  $15 = $seed;$16 = 0;$k$01$i = 0;
  while(1) {
   $17 = (___muldi3(($15|0),($16|0),1284865837,1481765933)|0);
   $18 = tempRet0;
   $19 = (_i64Add(($17|0),($18|0),1,0)|0);
   $20 = tempRet0;
   $21 = (($storemerge2$in) + ($k$01$i<<2)|0);
   HEAP32[$21>>2] = $20;
   $22 = (($k$01$i) + 1)|0;
   $23 = HEAP32[286432>>2]|0;
   $24 = ($22|0)<($23|0);
   if ($24) {
    $15 = $19;$16 = $20;$k$01$i = $22;
   } else {
    break;
   }
  }
  $25 = HEAP32[$storemerge2$in>>2]|0;
  $26 = $25 | 1;
  HEAP32[$storemerge2$in>>2] = $26;
  $35 = $storemerge2$in;
 }
 $27 = HEAP32[286432>>2]|0;
 $28 = $27 << 16;
 $29 = HEAP32[286456>>2]|0;
 $30 = $29 << 8;
 $31 = $30 | $28;
 $32 = HEAP32[286448>>2]|0;
 $33 = $31 | $32;
 $34 = (($35) + -4|0);
 HEAP32[$34>>2] = $33;
 ___unlock((286424|0));
 $$0 = $9;
 STACKTOP = sp;return ($$0|0);
}
function _setstate($state) {
 $state = $state|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ___lock((286424|0));
 $0 = HEAP32[286432>>2]|0;
 $1 = $0 << 16;
 $2 = HEAP32[286456>>2]|0;
 $3 = $2 << 8;
 $4 = $3 | $1;
 $5 = HEAP32[286448>>2]|0;
 $6 = $4 | $5;
 $7 = HEAP32[286440>>2]|0;
 $8 = (($7) + -4|0);
 HEAP32[$8>>2] = $6;
 $9 = (($state) + 4|0);
 HEAP32[286440>>2] = $9;
 $10 = HEAP32[$state>>2]|0;
 $11 = $10 >>> 16;
 HEAP32[286432>>2] = $11;
 $12 = HEAP32[$state>>2]|0;
 $13 = $12 >>> 8;
 $14 = $13 & 255;
 HEAP32[286456>>2] = $14;
 $15 = HEAP32[$state>>2]|0;
 $16 = $15 & 255;
 HEAP32[286448>>2] = $16;
 ___unlock((286424|0));
 STACKTOP = sp;return ($8|0);
}
function _random() {
 var $$ = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ___lock((286424|0));
 $0 = HEAP32[286432>>2]|0;
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = HEAP32[286440>>2]|0;
  $3 = HEAP32[$2>>2]|0;
  $4 = Math_imul($3, 1103515245)|0;
  $5 = (($4) + 12345)|0;
  $6 = $5 & 2147483647;
  HEAP32[$2>>2] = $6;
  $k$0 = $6;
  ___unlock((286424|0));
  STACKTOP = sp;return ($k$0|0);
 } else {
  $7 = HEAP32[286448>>2]|0;
  $8 = HEAP32[286440>>2]|0;
  $9 = (($8) + ($7<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[286456>>2]|0;
  $12 = (($8) + ($11<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + ($10))|0;
  HEAP32[$12>>2] = $14;
  $15 = HEAP32[286456>>2]|0;
  $16 = (($8) + ($15<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $17 >>> 1;
  $19 = (($15) + 1)|0;
  $20 = HEAP32[286432>>2]|0;
  $21 = ($19|0)==($20|0);
  $$ = $21 ? 0 : $19;
  HEAP32[286456>>2] = $$;
  $22 = HEAP32[286448>>2]|0;
  $23 = (($22) + 1)|0;
  $24 = ($23|0)==($20|0);
  $$1 = $24 ? 0 : $23;
  HEAP32[286448>>2] = $$1;
  $k$0 = $18;
  ___unlock((286424|0));
  STACKTOP = sp;return ($k$0|0);
 }
 return 0|0;
}
function _seed48($s) {
 $s = $s|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP16[286592+0>>1]=HEAP16[286400+0>>1]|0;HEAP16[286592+2>>1]=HEAP16[286400+2>>1]|0;HEAP16[286592+4>>1]=HEAP16[286400+4>>1]|0;
 ;HEAP16[286400+0>>1]=HEAP16[$s+0>>1]|0;HEAP16[286400+2>>1]=HEAP16[$s+2>>1]|0;HEAP16[286400+4>>1]=HEAP16[$s+4>>1]|0;
 STACKTOP = sp;return (286592|0);
}
function _srand48($seed) {
 $seed = $seed|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP16[$0>>1] = 13070;
 $1 = (($0) + 2|0);
 $2 = $seed&65535;
 HEAP16[$1>>1] = $2;
 $3 = (($0) + 4|0);
 $4 = $seed >>> 16;
 $5 = $4&65535;
 HEAP16[$3>>1] = $5;
 (_seed48($0)|0);
 STACKTOP = sp;return;
}
function ___overflow($f,$_c) {
 $f = $f|0;
 $_c = $_c|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $c = sp;
 $0 = $_c&255;
 HEAP8[$c>>0] = $0;
 $1 = (($f) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 do {
  if ($3) {
   $4 = (___towrite($f)|0);
   $5 = ($4|0)==(0);
   if ($5) {
    $$pre = HEAP32[$1>>2]|0;
    $9 = $$pre;
    break;
   } else {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $9 = $2;
  }
 } while(0);
 $6 = (($f) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7>>>0)<($9>>>0);
 if ($8) {
  $10 = HEAP8[$c>>0]|0;
  $11 = $10&255;
  $12 = (($f) + 75|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13 << 24 >> 24;
  $15 = ($11|0)==($14|0);
  if (!($15)) {
   $16 = (($7) + 1|0);
   HEAP32[$6>>2] = $16;
   HEAP8[$7>>0] = $10;
   $$0 = $11;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $17 = (($f) + 36|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (FUNCTION_TABLE_iiii[$18 & 7]($f,$c,1)|0);
 $20 = ($19|0)==(1);
 if (!($20)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = HEAP8[$c>>0]|0;
 $22 = $21&255;
 $$0 = $22;
 STACKTOP = sp;return ($$0|0);
}
function ___toread($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = (($f) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($f) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)>($9>>>0);
 if ($10) {
  $11 = (($f) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  (FUNCTION_TABLE_iiii[$12 & 7]($f,0,0)|0);
 }
 $13 = (($f) + 16|0);
 HEAP32[$13>>2] = 0;
 $14 = (($f) + 28|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$6>>2] = 0;
 $15 = HEAP32[$f>>2]|0;
 $16 = $15 & 20;
 $17 = ($16|0)==(0);
 if ($17) {
  $21 = HEAP32[$8>>2]|0;
  $22 = (($f) + 8|0);
  HEAP32[$22>>2] = $21;
  $23 = (($f) + 4|0);
  HEAP32[$23>>2] = $21;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $18 = $15 & 4;
 $19 = ($18|0)==(0);
 if ($19) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $20 = $15 | 32;
 HEAP32[$f>>2] = $20;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = HEAP32[$f>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $10 = (($f) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = (($f) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = (($f) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($f) + 28|0);
  HEAP32[$14>>2] = $13;
  $15 = (($f) + 20|0);
  HEAP32[$15>>2] = $13;
  $16 = (($f) + 48|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($13) + ($17)|0);
  $19 = (($f) + 16|0);
  HEAP32[$19>>2] = $18;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $9 = $6 | 32;
  HEAP32[$f>>2] = $9;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function ___uflow($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $c = sp;
 $0 = (($f) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___toread($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $$0 = -1;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $5 = (($f) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (FUNCTION_TABLE_iiii[$6 & 7]($f,$c,1)|0);
  $8 = ($7|0)==(1);
  if ($8) {
   $9 = HEAP8[$c>>0]|0;
   $10 = $9&255;
   $$0 = $10;
  } else {
   $$0 = -1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   $3 = (___towrite($f)|0);
   $4 = ($3|0)==(0);
   if ($4) {
    $$pre6 = HEAP32[$0>>2]|0;
    $8 = $$pre6;
    break;
   } else {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $8 = $1;
  }
 } while(0);
 $5 = (($f) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $8;
 $9 = $6;
 $10 = (($7) - ($9))|0;
 $11 = ($10>>>0)<($l>>>0);
 if ($11) {
  $12 = (($f) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (FUNCTION_TABLE_iiii[$13 & 7]($f,$s,$l)|0);
  $$0 = $14;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = (($f) + 75|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ($16<<24>>24)>(-1);
 L11: do {
  if ($17) {
   $i$0 = $l;
   while(1) {
    $18 = ($i$0|0)==(0);
    if ($18) {
     $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
     break L11;
    }
    $19 = (($i$0) + -1)|0;
    $20 = (($s) + ($19)|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = ($21<<24>>24)==(10);
    if ($22) {
     break;
    } else {
     $i$0 = $19;
    }
   }
   $23 = (($f) + 36|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (FUNCTION_TABLE_iiii[$24 & 7]($f,$s,$i$0)|0);
   $26 = ($25>>>0)<($i$0>>>0);
   if ($26) {
    $$0 = $i$0;
    STACKTOP = sp;return ($$0|0);
   } else {
    $27 = (($s) + ($i$0)|0);
    $28 = (($l) - ($i$0))|0;
    $$pre = HEAP32[$5>>2]|0;
    $$01 = $28;$$02 = $27;$29 = $$pre;$i$1 = $i$0;
    break;
   }
  } else {
   $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
  }
 } while(0);
 _memcpy(($29|0),($$02|0),($$01|0))|0;
 $30 = HEAP32[$5>>2]|0;
 $31 = (($30) + ($$01)|0);
 HEAP32[$5>>2] = $31;
 $32 = (($i$1) + ($$01))|0;
 $$0 = $32;
 STACKTOP = sp;return ($$0|0);
}
function _snprintf($s,$n,$fmt,$varargs) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsnprintf($s,$n,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _sprintf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsprintf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _MUSL_vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0, $ret$1 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $0 = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($f) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $6 = (($f) + 44|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$6>>2] = $internal_buf;
  $8 = (($f) + 28|0);
  HEAP32[$8>>2] = $internal_buf;
  $9 = (($f) + 20|0);
  HEAP32[$9>>2] = $internal_buf;
  HEAP32[$2>>2] = 80;
  $10 = (($internal_buf) + 80|0);
  $11 = (($f) + 16|0);
  HEAP32[$11>>2] = $10;
  $12 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $13 = ($7|0)==(0|0);
  if ($13) {
   $ret$1 = $12;
  } else {
   $14 = (($f) + 36|0);
   $15 = HEAP32[$14>>2]|0;
   (FUNCTION_TABLE_iiii[$15 & 7]($f,0,0)|0);
   $16 = HEAP32[$9>>2]|0;
   $17 = ($16|0)==(0|0);
   $$ = $17 ? -1 : $12;
   HEAP32[$6>>2] = $7;
   HEAP32[$2>>2] = 0;
   HEAP32[$11>>2] = 0;
   HEAP32[$8>>2] = 0;
   HEAP32[$9>>2] = 0;
   $ret$1 = $$;
  }
 } else {
  $5 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $ret$1 = $5;
 }
 $$0 = $ret$1;
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$5$i = 0, $$$i = 0, $$$p$i = 0, $$0 = 0, $$0$lcssa$i = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i103$i = 0, $$0$lcssa$i127$i = 0, $$0$lcssa$i142$i = 0, $$0$lcssa$i37 = 0, $$0$lcssa$i38$i = 0, $$0$lcssa$i43 = 0, $$0$lcssa$i45 = 0, $$0$lcssa$i45$i = 0, $$0$lcssa$i48$i = 0, $$0$lcssa$i52 = 0, $$0$lcssa$i55$i = 0, $$0$lcssa$i59 = 0, $$0$lcssa$i62$i = 0;
 var $$0$lcssa$i66 = 0, $$0$lcssa$i68$i = 0, $$0$lcssa$i75$i = 0, $$0$lcssa$i76 = 0, $$0$lcssa$i84$i = 0, $$0$lcssa$i96$i = 0, $$01$i = 0, $$01$i$i = 0, $$01$i101$i = 0, $$01$i125$i = 0, $$01$i140$i = 0, $$01$i35 = 0, $$01$i36$i = 0, $$01$i43$i = 0, $$01$i50 = 0, $$01$i53$i = 0, $$01$i57 = 0, $$01$i60$i = 0, $$01$i64 = 0, $$01$i66$i = 0;
 var $$01$i73$i = 0, $$01$i74 = 0, $$01$i94$i = 0, $$01$lcssa$off0$i = 0, $$01$lcssa$off0$i$i = 0, $$01$lcssa$off0$i85$i = 0, $$012$i = 0, $$013$i = 0, $$03$i40 = 0, $$05$i = 0, $$05$i$i = 0, $$05$i79$i = 0, $$07$i = 0.0, $$1$i = 0.0, $$1$lcssa$i$i = 0, $$1$lcssa$i112$i = 0, $$114$i = 0, $$12$i = 0, $$12$i$i = 0, $$12$i110$i = 0;
 var $$12$i119$i = 0, $$12$i134$i = 0, $$12$i87$i = 0, $$13 = 0, $$14 = 0, $$15 = 0, $$17 = 0, $$2$i = 0.0, $$2$us$i = 0.0, $$2$us$us$i = 0.0, $$2$us159$i = 0.0, $$20$i = 0, $$20$us$i = 0, $$21$i = 0, $$210$$23$i = 0, $$210$$25$i = 0, $$210$i = 0, $$22$i = 0.0, $$23$i = 0, $$25$i = 0;
 var $$3$i = 0.0, $$31$i = 0, $$311$i = 0, $$4$i = 0.0, $$412$lcssa$i = 0, $$412175$i = 0, $$5193$i = 0, $$a$3$i = 0, $$a$3$us$i = 0, $$a$3$us322$i = 0, $$a$3$us323$i = 0, $$a$3324$i = 0, $$a$3325$i = 0, $$fl$4 = 0, $$lcssa300$i = 0, $$lcssa92 = 0, $$mask$i = 0, $$mask$i30 = 0, $$mask1$i = 0, $$mask1$i29 = 0;
 var $$neg151$i = 0, $$neg152$i = 0, $$not$i = 0, $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr$i = 0, $$pr146$i = 0, $$pre = 0, $$pre$i = 0, $$pre290 = 0, $$pre292 = 0, $$pre319$i = 0, $$sum$i = 0, $$sum15$i = 0, $$sum16$i = 0, $$z$3$i = 0, $$z$4$us$i = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
 var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0.0, $1037 = 0.0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1045$phi = 0, $1046 = 0, $1046$phi = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0.0, $191 = 0, $192 = 0, $193 = 0, $194 = 0.0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0.0;
 var $37 = 0, $370 = 0, $371 = 0.0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0.0, $408 = 0.0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0.0;
 var $423 = 0, $424 = 0, $425 = 0, $426 = 0.0, $427 = 0.0, $428 = 0.0, $429 = 0.0, $43 = 0, $430 = 0.0, $431 = 0.0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
 var $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
 var $478 = 0, $479 = 0, $48 = 0, $480 = 0.0, $481 = 0.0, $482 = 0.0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0.0;
 var $496 = 0.0, $497 = 0.0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0.0, $511 = 0.0, $512 = 0.0;
 var $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0.0, $526 = 0.0, $527 = 0.0, $528 = 0, $529 = 0, $53 = 0, $530 = 0;
 var $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0;
 var $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0;
 var $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0.0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0.0;
 var $586 = 0.0, $587 = 0.0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0;
 var $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0;
 var $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0;
 var $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0;
 var $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0;
 var $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0;
 var $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0;
 var $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0.0, $726 = 0.0, $727 = 0, $728 = 0.0, $729 = 0;
 var $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0;
 var $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0;
 var $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0;
 var $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0;
 var $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0;
 var $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0;
 var $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0;
 var $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0;
 var $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0;
 var $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0;
 var $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0;
 var $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0;
 var $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0;
 var $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0;
 var $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $a$0 = 0;
 var $a$1 = 0, $a$1$lcssa$i = 0, $a$1263$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3249$i = 0, $a$3249$us$i = 0, $a$5$lcssa$i = 0, $a$5223$i = 0, $a$6$i = 0, $a$7$i = 0, $a$8$ph$i = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0;
 var $arglist_current26 = 0, $arglist_current29 = 0, $arglist_current32 = 0, $arglist_current35 = 0, $arglist_current38 = 0, $arglist_current41 = 0, $arglist_current44 = 0, $arglist_current47 = 0, $arglist_current5 = 0, $arglist_current50 = 0, $arglist_current53 = 0, $arglist_current56 = 0, $arglist_current59 = 0, $arglist_current62 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0;
 var $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next30 = 0, $arglist_next33 = 0, $arglist_next36 = 0, $arglist_next39 = 0, $arglist_next42 = 0, $arglist_next45 = 0, $arglist_next48 = 0, $arglist_next51 = 0, $arglist_next54 = 0, $arglist_next57 = 0, $arglist_next6 = 0, $arglist_next60 = 0, $arglist_next63 = 0, $arglist_next9 = 0, $argpos$0 = 0, $big$i = 0, $brmerge$i = 0;
 var $buf = 0, $buf$i = 0, $carry$0255$i = 0, $carry3$0243$i = 0, $carry3$0243$us$i = 0, $cnt$0 = 0, $cnt$1 = 0, $d$0$i = 0, $d$0254$i = 0, $d$0256$i = 0, $d$1242$i = 0, $d$1242$us$i = 0, $d$2$lcssa$i = 0, $d$2222$i = 0, $d$3$i = 0, $d$4183$i = 0, $d$5174$i = 0, $d$6192$i = 0, $e$0238$i = 0, $e$1$i = 0;
 var $e$2218$i = 0, $e$3$i = 0, $e$4$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$1$ph$i = 0, $estr$1200$i = 0, $estr$2$i = 0, $exitcond$i = 0, $fl$0100 = 0, $fl$0104 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $i$0$lcssa = 0, $i$0166 = 0;
 var $i$0168 = 0, $i$0237$i = 0, $i$03$i = 0, $i$03$i22 = 0, $i$1$lcssa$i = 0, $i$1174 = 0, $i$1230$i = 0, $i$2217$i = 0, $i$289 = 0, $i$3209$i = 0, $i$388 = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i24 = 0, $isdigit11 = 0, $isdigit2$i = 0, $isdigit2$i21 = 0, $isdigit9 = 0, $isdigittmp = 0, $isdigittmp$i = 0;
 var $isdigittmp$i23 = 0, $isdigittmp1$i = 0, $isdigittmp1$i20 = 0, $isdigittmp10 = 0, $isdigittmp8 = 0, $j$0$i = 0, $j$0229$i = 0, $j$0231$i = 0, $j$1210$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0, $l$1$lcssa = 0, $l$1167 = 0, $l10n$0 = 0, $l10n$0$phi = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0;
 var $mb = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i100$i = 0, $or$cond$i35$i = 0, $or$cond$i42$i = 0, $or$cond$i49 = 0, $or$cond$i52$i = 0, $or$cond$i56 = 0, $or$cond$i59$i = 0, $or$cond$i63 = 0, $or$cond$i71 = 0, $or$cond$i72$i = 0, $or$cond$i73 = 0, $or$cond$i93$i = 0, $or$cond28$i = 0, $or$cond28173$i = 0, $or$cond29$i = 0, $or$cond4$i = 0;
 var $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$ = 0, $p$4296 = 0, $p$5 = 0, $pad$i = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$8$i = 0, $re$0$i = 0, $re$1165$i = 0;
 var $round$0164$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0, $s$0$us$i = 0, $s$0$us$us$i = 0, $s$0$us158$i = 0, $s$1$i = 0, $s$1$lcssa$i = 0, $s$1$us$i = 0, $s$1$us$us$i = 0, $s$1$us160$i = 0, $s1$0$i = 0, $s7$0180$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$0169$i = 0, $s9$0$i = 0, $s9$1188$i = 0, $s9$2$i = 0, $sext = 0;
 var $sext84 = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $storemerge = 0, $storemerge12 = 0, $storemerge7103 = 0, $storemerge798 = 0, $t$0 = 0, $t$1 = 0, $w$$i = 0, $w$0 = 0, $w$1 = 0, $w$18$i = 0, $w$2 = 0, $w$30$i = 0, $wc = 0, $ws$0169 = 0, $ws$1175 = 0, $y$03$i = 0;
 var $y$03$i$i = 0, $y$03$i109$i = 0, $y$03$i118$i = 0, $y$03$i133$i = 0, $y$03$i86$i = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$093 = 0, $z$1$lcssa$i = 0, $z$1262$i = 0, $z$2 = 0, $z$2$i = 0, $z$3$lcssa$i = 0, $z$3248$i = 0, $z$3248$us$i = 0, $z$4$i = 0, $z$4$us$i = 0, $z$5$i = 0, $z$6$$i = 0, $z$6$i = 0;
 var $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 864|0;
 $big$i = sp + 16|0;
 $e2$i = sp + 8|0;
 $buf$i = sp + 836|0;
 $0 = $buf$i;
 $ebuf0$i = sp + 824|0;
 $pad$i = sp + 568|0;
 $buf = sp + 528|0;
 $wc = sp;
 $mb = sp + 520|0;
 $1 = ($f|0)!=(0|0);
 $2 = (($buf) + 40|0);
 $3 = $2;
 $4 = (($buf) + 39|0);
 $5 = (($wc) + 4|0);
 $6 = (($ebuf0$i) + 12|0);
 $7 = (($ebuf0$i) + 11|0);
 $8 = $6;
 $9 = (($8) - ($0))|0;
 $10 = (-2 - ($0))|0;
 $11 = (($8) + 2)|0;
 $12 = (($big$i) + 288|0);
 $13 = (($buf$i) + 9|0);
 $14 = $13;
 $15 = (($buf$i) + 8|0);
 $1045 = 0;$1046 = 0;$22 = $fmt;$cnt$0 = 0;$l$0 = 0;$l10n$0 = 0;
 L1: while(1) {
  $16 = ($cnt$0|0)>(-1);
  do {
   if ($16) {
    $17 = (2147483647 - ($cnt$0))|0;
    $18 = ($l$0|0)>($17|0);
    if ($18) {
     $19 = (___errno_location()|0);
     HEAP32[$19>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $20 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $20;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $21 = HEAP8[$22>>0]|0;
  $23 = ($21<<24>>24)==(0);
  if ($23) {
   label = 344;
   break;
  } else {
   $1047 = $21;$25 = $22;
  }
  while(1) {
   if ((($1047<<24>>24) == 37)) {
    $27 = $25;$z$093 = $25;
    label = 9;
    break;
   } else if ((($1047<<24>>24) == 0)) {
    $$lcssa92 = $25;$z$0$lcssa = $25;
    break;
   }
   $24 = (($25) + 1|0);
   $$pre = HEAP8[$24>>0]|0;
   $1047 = $$pre;$25 = $24;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $26 = (($27) + 1|0);
     $28 = HEAP8[$26>>0]|0;
     $29 = ($28<<24>>24)==(37);
     if (!($29)) {
      $$lcssa92 = $27;$z$0$lcssa = $z$093;
      break L12;
     }
     $30 = (($z$093) + 1|0);
     $31 = (($27) + 2|0);
     $32 = HEAP8[$31>>0]|0;
     $33 = ($32<<24>>24)==(37);
     if ($33) {
      $27 = $31;$z$093 = $30;
      label = 9;
     } else {
      $$lcssa92 = $31;$z$0$lcssa = $30;
      break;
     }
    }
   }
  } while(0);
  $34 = $z$0$lcssa;
  $35 = $22;
  $36 = (($34) - ($35))|0;
  if ($1) {
   (___fwritex($22,$36,$f)|0);
  }
  $37 = ($z$0$lcssa|0)==($22|0);
  if (!($37)) {
   $l10n$0$phi = $l10n$0;$1046$phi = $1046;$1045$phi = $1045;$22 = $$lcssa92;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$0$phi;$1046 = $1046$phi;$1045 = $1045$phi;
   continue;
  }
  $38 = (($$lcssa92) + 1|0);
  $39 = HEAP8[$38>>0]|0;
  $40 = $39 << 24 >> 24;
  $isdigittmp = (($40) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $41 = (($$lcssa92) + 2|0);
   $42 = HEAP8[$41>>0]|0;
   $43 = ($42<<24>>24)==(36);
   if ($43) {
    $44 = (($$lcssa92) + 3|0);
    $$pre290 = HEAP8[$44>>0]|0;
    $46 = $$pre290;$argpos$0 = $isdigittmp;$l10n$1 = 1;$storemerge = $44;
   } else {
    $46 = $39;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $38;
   }
  } else {
   $46 = $39;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $38;
  }
  $45 = $46 << 24 >> 24;
  $47 = (($45) + -32)|0;
  $48 = ($47>>>0)<(32);
  L25: do {
   if ($48) {
    $50 = $45;$55 = $46;$fl$0104 = 0;$storemerge7103 = $storemerge;
    while(1) {
     $49 = (($50) + -32)|0;
     $51 = 1 << $49;
     $52 = $51 & 75913;
     $53 = ($52|0)==(0);
     if ($53) {
      $65 = $55;$fl$0100 = $fl$0104;$storemerge798 = $storemerge7103;
      break L25;
     }
     $54 = $55 << 24 >> 24;
     $56 = (($54) + -32)|0;
     $57 = 1 << $56;
     $58 = $57 | $fl$0104;
     $59 = (($storemerge7103) + 1|0);
     $60 = HEAP8[$59>>0]|0;
     $61 = $60 << 24 >> 24;
     $62 = (($61) + -32)|0;
     $63 = ($62>>>0)<(32);
     if ($63) {
      $50 = $61;$55 = $60;$fl$0104 = $58;$storemerge7103 = $59;
     } else {
      $65 = $60;$fl$0100 = $58;$storemerge798 = $59;
      break;
     }
    }
   } else {
    $65 = $46;$fl$0100 = 0;$storemerge798 = $storemerge;
   }
  } while(0);
  $64 = ($65<<24>>24)==(42);
  do {
   if ($64) {
    $66 = (($storemerge798) + 1|0);
    $67 = HEAP8[$66>>0]|0;
    $68 = $67 << 24 >> 24;
    $isdigittmp10 = (($68) + -48)|0;
    $isdigit11 = ($isdigittmp10>>>0)<(10);
    if ($isdigit11) {
     $69 = (($storemerge798) + 2|0);
     $70 = HEAP8[$69>>0]|0;
     $71 = ($70<<24>>24)==(36);
     if ($71) {
      $72 = (($nl_type) + ($isdigittmp10<<2)|0);
      HEAP32[$72>>2] = 10;
      $73 = HEAP8[$66>>0]|0;
      $74 = $73 << 24 >> 24;
      $75 = (($74) + -48)|0;
      $76 = (($nl_arg) + ($75<<3)|0);
      $77 = $76;
      $78 = $77;
      $79 = HEAP32[$78>>2]|0;
      $80 = (($77) + 4)|0;
      $81 = $80;
      $82 = HEAP32[$81>>2]|0;
      $83 = (($storemerge798) + 3|0);
      $l10n$2 = 1;$storemerge12 = $83;$w$0 = $79;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $84 = ($l10n$1|0)==(0);
     if (!($84)) {
      $$0 = -1;
      label = 362;
      break L1;
     }
     if (!($1)) {
      $100 = $66;$fl$1 = $fl$0100;$l10n$3 = 0;$w$1 = 0;
      break;
     }
     $arglist_current = HEAP32[$ap>>2]|0;
     $85 = HEAP32[$arglist_current>>2]|0;
     $arglist_next = (($arglist_current) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $l10n$2 = 0;$storemerge12 = $66;$w$0 = $85;
    }
    $86 = ($w$0|0)<(0);
    if ($86) {
     $87 = $fl$0100 | 8192;
     $88 = (0 - ($w$0))|0;
     $100 = $storemerge12;$fl$1 = $87;$l10n$3 = $l10n$2;$w$1 = $88;
    } else {
     $100 = $storemerge12;$fl$1 = $fl$0100;$l10n$3 = $l10n$2;$w$1 = $w$0;
    }
   } else {
    $89 = $65 << 24 >> 24;
    $isdigittmp1$i = (($89) + -48)|0;
    $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
    if ($isdigit2$i) {
     $92 = $89;$95 = $storemerge798;$i$03$i = 0;
     while(1) {
      $90 = ($i$03$i*10)|0;
      $91 = (($92) + -48)|0;
      $93 = (($91) + ($90))|0;
      $94 = (($95) + 1|0);
      $96 = HEAP8[$94>>0]|0;
      $97 = $96 << 24 >> 24;
      $isdigittmp$i = (($97) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $92 = $97;$95 = $94;$i$03$i = $93;
      } else {
       break;
      }
     }
     $98 = ($93|0)<(0);
     if ($98) {
      $$0 = -1;
      label = 362;
      break L1;
     } else {
      $100 = $94;$fl$1 = $fl$0100;$l10n$3 = $l10n$1;$w$1 = $93;
     }
    } else {
     $100 = $storemerge798;$fl$1 = $fl$0100;$l10n$3 = $l10n$1;$w$1 = 0;
    }
   }
  } while(0);
  $99 = HEAP8[$100>>0]|0;
  $101 = ($99<<24>>24)==(46);
  L46: do {
   if ($101) {
    $102 = (($100) + 1|0);
    $103 = HEAP8[$102>>0]|0;
    $104 = ($103<<24>>24)==(42);
    if (!($104)) {
     $125 = $103 << 24 >> 24;
     $isdigittmp1$i20 = (($125) + -48)|0;
     $isdigit2$i21 = ($isdigittmp1$i20>>>0)<(10);
     if ($isdigit2$i21) {
      $128 = $125;$131 = $102;$i$03$i22 = 0;
     } else {
      $1048 = $102;$p$0 = 0;
      break;
     }
     while(1) {
      $126 = ($i$03$i22*10)|0;
      $127 = (($128) + -48)|0;
      $129 = (($127) + ($126))|0;
      $130 = (($131) + 1|0);
      $132 = HEAP8[$130>>0]|0;
      $133 = $132 << 24 >> 24;
      $isdigittmp$i23 = (($133) + -48)|0;
      $isdigit$i24 = ($isdigittmp$i23>>>0)<(10);
      if ($isdigit$i24) {
       $128 = $133;$131 = $130;$i$03$i22 = $129;
      } else {
       $1048 = $130;$p$0 = $129;
       break L46;
      }
     }
    }
    $105 = (($100) + 2|0);
    $106 = HEAP8[$105>>0]|0;
    $107 = $106 << 24 >> 24;
    $isdigittmp8 = (($107) + -48)|0;
    $isdigit9 = ($isdigittmp8>>>0)<(10);
    if ($isdigit9) {
     $108 = (($100) + 3|0);
     $109 = HEAP8[$108>>0]|0;
     $110 = ($109<<24>>24)==(36);
     if ($110) {
      $111 = (($nl_type) + ($isdigittmp8<<2)|0);
      HEAP32[$111>>2] = 10;
      $112 = HEAP8[$105>>0]|0;
      $113 = $112 << 24 >> 24;
      $114 = (($113) + -48)|0;
      $115 = (($nl_arg) + ($114<<3)|0);
      $116 = $115;
      $117 = $116;
      $118 = HEAP32[$117>>2]|0;
      $119 = (($116) + 4)|0;
      $120 = $119;
      $121 = HEAP32[$120>>2]|0;
      $122 = (($100) + 4|0);
      $1048 = $122;$p$0 = $118;
      break;
     }
    }
    $123 = ($l10n$3|0)==(0);
    if (!($123)) {
     $$0 = -1;
     label = 362;
     break L1;
    }
    if ($1) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $124 = HEAP32[$arglist_current2>>2]|0;
     $arglist_next3 = (($arglist_current2) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $1048 = $105;$p$0 = $124;
    } else {
     $1048 = $105;$p$0 = 0;
    }
   } else {
    $1048 = $100;$p$0 = -1;
   }
  } while(0);
  $135 = $1048;$st$0 = 0;
  while(1) {
   $134 = HEAP8[$135>>0]|0;
   $136 = $134 << 24 >> 24;
   $137 = (($136) + -65)|0;
   $138 = ($137>>>0)>(57);
   if ($138) {
    $$0 = -1;
    label = 362;
    break L1;
   }
   $139 = (($135) + 1|0);
   $140 = ((286600 + (($st$0*58)|0)|0) + ($137)|0);
   $141 = HEAP8[$140>>0]|0;
   $142 = $141&255;
   $143 = (($142) + -1)|0;
   $144 = ($143>>>0)<(8);
   if ($144) {
    $135 = $139;$st$0 = $142;
   } else {
    break;
   }
  }
  $145 = ($141<<24>>24)==(0);
  if ($145) {
   $$0 = -1;
   label = 362;
   break;
  }
  $146 = ($141<<24>>24)==(19);
  $147 = ($argpos$0|0)>(-1);
  L65: do {
   if ($146) {
    if ($147) {
     $$0 = -1;
     label = 362;
     break L1;
    } else {
     $1049 = $1045;$1050 = $1046;
     label = 63;
    }
   } else {
    if ($147) {
     $148 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$148>>2] = $142;
     $149 = (($nl_arg) + ($argpos$0<<3)|0);
     $150 = $149;
     $151 = $150;
     $152 = HEAP32[$151>>2]|0;
     $153 = (($150) + 4)|0;
     $154 = $153;
     $155 = HEAP32[$154>>2]|0;
     $156 = $152;
     $1049 = $155;$1050 = $156;
     label = 63;
     break;
    }
    if (!($1)) {
     $$0 = 0;
     label = 362;
     break L1;
    }
    $157 = ($141&255)>(20);
    if ($157) {
     $199 = $134;$207 = $1046;$229 = $1045;
    } else {
     do {
      switch ($142|0) {
      case 15:  {
       $arglist_current23 = HEAP32[$ap>>2]|0;
       $181 = HEAP32[$arglist_current23>>2]|0;
       $arglist_next24 = (($arglist_current23) + 4|0);
       HEAP32[$ap>>2] = $arglist_next24;
       $182 = $181&255;
       $183 = $182 << 24 >> 24;
       $184 = ($183|0)<(0);
       $185 = $184 << 31 >> 31;
       $sext = $181 << 24;
       $186 = $sext >> 24;
       $187 = $186;
       $1051 = $187;$1052 = $185;
       label = 64;
       break L65;
       break;
      }
      case 11:  {
       $arglist_current11 = HEAP32[$ap>>2]|0;
       $163 = HEAP32[$arglist_current11>>2]|0;
       $arglist_next12 = (($arglist_current11) + 4|0);
       HEAP32[$ap>>2] = $arglist_next12;
       $164 = $163;
       $1051 = $164;$1052 = 0;
       label = 64;
       break L65;
       break;
      }
      case 10:  {
       $arglist_current8 = HEAP32[$ap>>2]|0;
       $159 = HEAP32[$arglist_current8>>2]|0;
       $arglist_next9 = (($arglist_current8) + 4|0);
       HEAP32[$ap>>2] = $arglist_next9;
       $160 = ($159|0)<(0);
       $161 = $160 << 31 >> 31;
       $162 = $159;
       $1051 = $162;$1052 = $161;
       label = 64;
       break L65;
       break;
      }
      case 12:  {
       $arglist_current14 = HEAP32[$ap>>2]|0;
       $165 = $arglist_current14;
       $166 = $165;
       $167 = HEAP32[$166>>2]|0;
       $168 = (($165) + 4)|0;
       $169 = $168;
       $170 = HEAP32[$169>>2]|0;
       $arglist_next15 = (($arglist_current14) + 8|0);
       HEAP32[$ap>>2] = $arglist_next15;
       $171 = $167;
       $1051 = $171;$1052 = $170;
       label = 64;
       break L65;
       break;
      }
      case 16:  {
       $arglist_current26 = HEAP32[$ap>>2]|0;
       $188 = HEAP32[$arglist_current26>>2]|0;
       $arglist_next27 = (($arglist_current26) + 4|0);
       HEAP32[$ap>>2] = $arglist_next27;
       $$mask$i30 = $188 & 255;
       $189 = $$mask$i30;
       $1051 = $189;$1052 = 0;
       label = 64;
       break L65;
       break;
      }
      case 18:  {
       $arglist_current32 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current32>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current32+4>>2];$194 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next33 = (($arglist_current32) + 8|0);
       HEAP32[$ap>>2] = $arglist_next33;
       HEAPF64[tempDoublePtr>>3] = $194;$195 = HEAP32[tempDoublePtr>>2]|0;
       $196 = HEAP32[tempDoublePtr+4>>2]|0;
       $197 = $195;
       $1049 = $196;$1050 = $197;
       label = 63;
       break L65;
       break;
      }
      case 17:  {
       $arglist_current29 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current29>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current29+4>>2];$190 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next30 = (($arglist_current29) + 8|0);
       HEAP32[$ap>>2] = $arglist_next30;
       HEAPF64[tempDoublePtr>>3] = $190;$191 = HEAP32[tempDoublePtr>>2]|0;
       $192 = HEAP32[tempDoublePtr+4>>2]|0;
       $193 = $191;
       $1051 = $193;$1052 = $192;
       label = 64;
       break L65;
       break;
      }
      case 14:  {
       $arglist_current20 = HEAP32[$ap>>2]|0;
       $179 = HEAP32[$arglist_current20>>2]|0;
       $arglist_next21 = (($arglist_current20) + 4|0);
       HEAP32[$ap>>2] = $arglist_next21;
       $$mask1$i29 = $179 & 65535;
       $180 = $$mask1$i29;
       $1051 = $180;$1052 = 0;
       label = 64;
       break L65;
       break;
      }
      case 9:  {
       $arglist_current5 = HEAP32[$ap>>2]|0;
       $158 = HEAP32[$arglist_current5>>2]|0;
       $arglist_next6 = (($arglist_current5) + 4|0);
       HEAP32[$ap>>2] = $arglist_next6;
       $1051 = $158;$1052 = $1045;
       label = 64;
       break L65;
       break;
      }
      case 13:  {
       $arglist_current17 = HEAP32[$ap>>2]|0;
       $172 = HEAP32[$arglist_current17>>2]|0;
       $arglist_next18 = (($arglist_current17) + 4|0);
       HEAP32[$ap>>2] = $arglist_next18;
       $173 = $172&65535;
       $174 = $173 << 16 >> 16;
       $175 = ($174|0)<(0);
       $176 = $175 << 31 >> 31;
       $sext84 = $172 << 16;
       $177 = $sext84 >> 16;
       $178 = $177;
       $1051 = $178;$1052 = $176;
       label = 64;
       break L65;
       break;
      }
      default: {
       $1051 = $1046;$1052 = $1045;
       label = 64;
       break L65;
      }
      }
     } while(0);
    }
   }
  } while(0);
  if ((label|0) == 63) {
   label = 0;
   if ($1) {
    $1051 = $1050;$1052 = $1049;
    label = 64;
   } else {
    $1045 = $1049;$1046 = $1050;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
    continue;
   }
  }
  if ((label|0) == 64) {
   label = 0;
   $$pre292 = HEAP8[$135>>0]|0;
   $199 = $$pre292;$207 = $1051;$229 = $1052;
  }
  $198 = $199 << 24 >> 24;
  $200 = ($st$0|0)==(0);
  if ($200) {
   $t$0 = $198;
  } else {
   $201 = $198 & 15;
   $202 = ($201|0)==(3);
   $203 = $198 & -33;
   $$ = $202 ? $203 : $198;
   $t$0 = $$;
  }
  $204 = $fl$1 & 8192;
  $205 = ($204|0)==(0);
  $206 = $fl$1 & -65537;
  $fl$1$ = $205 ? $fl$1 : $206;
  L92: do {
   switch ($t$0|0) {
   case 117:  {
    $277 = $207;$279 = $229;$pl$0 = 0;$prefix$0 = 287064;
    label = 89;
    break;
   }
   case 105: case 100:  {
    $267 = $207;
    $268 = ($229|0)<(0);
    if ($268) {
     $269 = (_i64Subtract(0,0,($267|0),($229|0))|0);
     $270 = tempRet0;
     $271 = $269;
     $277 = $271;$279 = $270;$pl$0 = 1;$prefix$0 = 287064;
     label = 89;
     break L92;
    }
    $272 = $fl$1$ & 2048;
    $273 = ($272|0)==(0);
    if ($273) {
     $274 = $fl$1$ & 1;
     $275 = ($274|0)==(0);
     $$15 = $275 ? 287064 : ((287064 + 2|0));
     $277 = $207;$279 = $229;$pl$0 = $274;$prefix$0 = $$15;
     label = 89;
    } else {
     $277 = $207;$279 = $229;$pl$0 = 1;$prefix$0 = ((287064 + 1|0));
     label = 89;
    }
    break;
   }
   case 111:  {
    $249 = $207;
    $250 = ($249|0)==(0);
    $251 = ($229|0)==(0);
    $252 = $250 & $251;
    if ($252) {
     $$0$lcssa$i43 = $2;
    } else {
     $$03$i40 = $2;$254 = $249;$258 = $229;
     while(1) {
      $253 = $254 & 7;
      $255 = $253 | 48;
      $256 = $255&255;
      $257 = (($$03$i40) + -1|0);
      HEAP8[$257>>0] = $256;
      $259 = (_bitshift64Lshr(($254|0),($258|0),3)|0);
      $260 = tempRet0;
      $261 = ($259|0)==(0);
      $262 = ($260|0)==(0);
      $263 = $261 & $262;
      if ($263) {
       $$0$lcssa$i43 = $257;
       break;
      } else {
       $$03$i40 = $257;$254 = $259;$258 = $260;
      }
     }
    }
    $264 = $fl$1$ & 8;
    $265 = ($264|0)==(0);
    if ($265) {
     $308 = $207;$311 = $229;$a$0 = $$0$lcssa$i43;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = 0;$prefix$1 = 287064;
     label = 94;
    } else {
     $$13 = $252 ? 287064 : ((287064 + 5|0));
     $266 = $252&1;
     $$14 = $266 ^ 1;
     $308 = $207;$311 = $229;$a$0 = $$0$lcssa$i43;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $$14;$prefix$1 = $$13;
     label = 94;
    }
    break;
   }
   case 83:  {
    $332 = ($p$0|0)==(0);
    if ($332) {
     $1057 = $207;$1058 = $207;$i$0166 = 0;
     label = 110;
    } else {
     $1055 = $207;$1056 = $207;$p$4296 = $p$0;
     label = 104;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $368 = $207;
    HEAP32[tempDoublePtr>>2] = $368;HEAP32[tempDoublePtr+4>>2] = $229;$369 = +HEAPF64[tempDoublePtr>>3];
    HEAP32[$e2$i>>2] = 0;
    $370 = ($229|0)<(0);
    if ($370) {
     $371 = -$369;
     $$07$i = $371;$pl$0$i = 1;$prefix$0$i = 287088;
    } else {
     $372 = $fl$1$ & 2048;
     $373 = ($372|0)==(0);
     if ($373) {
      $374 = $fl$1$ & 1;
      $375 = ($374|0)==(0);
      $$$i = $375 ? ((287088 + 1|0)) : ((287088 + 6|0));
      $$07$i = $369;$pl$0$i = $374;$prefix$0$i = $$$i;
     } else {
      $$07$i = $369;$pl$0$i = 1;$prefix$0$i = ((287088 + 3|0));
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$07$i;$376 = HEAP32[tempDoublePtr>>2]|0;
    $377 = HEAP32[tempDoublePtr+4>>2]|0;
    $378 = $377 & 2146435072;
    $379 = ($378>>>0)<(2146435072);
    $380 = ($378|0)==(2146435072);
    $381 = (0)<(0);
    $382 = $380 & $381;
    $383 = $379 | $382;
    if (!($383)) {
     $384 = $t$0 & 32;
     $385 = ($384|0)!=(0);
     $386 = $385 ? 287112 : 287120;
     $387 = ($$07$i != $$07$i) | (0.0 != 0.0);
     if ($387) {
      $388 = $385 ? 287128 : 287136;
      $pl$1$i = 0;$s1$0$i = $388;
     } else {
      $pl$1$i = $pl$0$i;$s1$0$i = $386;
     }
     $389 = (($pl$1$i) + 3)|0;
     $390 = $fl$1$ & 8192;
     $391 = ($390|0)==(0);
     $392 = ($389|0)<($w$1|0);
     $or$cond$i35$i = $391 & $392;
     if ($or$cond$i35$i) {
      $393 = (($w$1) - ($389))|0;
      $394 = ($393>>>0)>(256);
      $395 = $394 ? 256 : $393;
      _memset(($pad$i|0),32,($395|0))|0;
      $396 = ($393>>>0)>(255);
      if ($396) {
       $$01$i36$i = $393;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $397 = (($$01$i36$i) + -256)|0;
        $398 = ($397>>>0)>(255);
        if ($398) {
         $$01$i36$i = $397;
        } else {
         $$0$lcssa$i38$i = $397;
         break;
        }
       }
      } else {
       $$0$lcssa$i38$i = $393;
      }
      (___fwritex($pad$i,$$0$lcssa$i38$i,$f)|0);
     }
     (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
     (___fwritex($s1$0$i,3,$f)|0);
     $399 = $fl$1$ & 73728;
     $400 = ($399|0)==(8192);
     $or$cond$i42$i = $400 & $392;
     if ($or$cond$i42$i) {
      $401 = (($w$1) - ($389))|0;
      $402 = ($401>>>0)>(256);
      $403 = $402 ? 256 : $401;
      _memset(($pad$i|0),32,($403|0))|0;
      $404 = ($401>>>0)>(255);
      if ($404) {
       $$01$i43$i = $401;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $405 = (($$01$i43$i) + -256)|0;
        $406 = ($405>>>0)>(255);
        if ($406) {
         $$01$i43$i = $405;
        } else {
         $$0$lcssa$i45$i = $405;
         break;
        }
       }
      } else {
       $$0$lcssa$i45$i = $401;
      }
      (___fwritex($pad$i,$$0$lcssa$i45$i,$f)|0);
     }
     $w$$i = $392 ? $w$1 : $389;
     $1045 = $229;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$$i;$l10n$0 = $l10n$3;
     continue L1;
    }
    $407 = (+_frexpl($$07$i,$e2$i));
    $408 = $407 * 2.0;
    $409 = $408 != 0.0;
    if ($409) {
     $410 = HEAP32[$e2$i>>2]|0;
     $411 = (($410) + -1)|0;
     HEAP32[$e2$i>>2] = $411;
    }
    $412 = $t$0 | 32;
    $413 = ($412|0)==(97);
    if ($413) {
     $414 = $t$0 & 32;
     $415 = ($414|0)==(0);
     $416 = (($prefix$0$i) + 9|0);
     $prefix$0$$i = $415 ? $prefix$0$i : $416;
     $417 = $pl$0$i | 2;
     $418 = ($p$0>>>0)>(11);
     $419 = (12 - ($p$0))|0;
     $re$0$i = $418 ? 0 : $419;
     $420 = ($re$0$i|0)==(0);
     do {
      if ($420) {
       $$1$i = $408;
      } else {
       $re$1165$i = $re$0$i;$round$0164$i = 8.0;
       while(1) {
        $421 = (($re$1165$i) + -1)|0;
        $422 = $round$0164$i * 16.0;
        $423 = ($421|0)==(0);
        if ($423) {
         break;
        } else {
         $re$1165$i = $421;$round$0164$i = $422;
        }
       }
       $424 = HEAP8[$prefix$0$$i>>0]|0;
       $425 = ($424<<24>>24)==(45);
       if ($425) {
        $426 = -$408;
        $427 = $426 - $422;
        $428 = $422 + $427;
        $429 = -$428;
        $$1$i = $429;
        break;
       } else {
        $430 = $408 + $422;
        $431 = $430 - $422;
        $$1$i = $431;
        break;
       }
      }
     } while(0);
     $432 = HEAP32[$e2$i>>2]|0;
     $433 = ($432|0)<(0);
     $434 = (0 - ($432))|0;
     $435 = $433 ? $434 : $432;
     $436 = ($435|0)<(0);
     if ($436) {
      $437 = ($435|0)<(0);
      $438 = $437 << 31 >> 31;
      $$05$i$i = $6;$439 = $435;$440 = $438;
      while(1) {
       $441 = (___uremdi3(($439|0),($440|0),10,0)|0);
       $442 = tempRet0;
       $443 = $441 | 48;
       $444 = $443&255;
       $445 = (($$05$i$i) + -1|0);
       HEAP8[$445>>0] = $444;
       $446 = (___udivdi3(($439|0),($440|0),10,0)|0);
       $447 = tempRet0;
       $448 = ($440>>>0)>(9);
       $449 = ($440|0)==(9);
       $450 = ($439>>>0)>(4294967295);
       $451 = $449 & $450;
       $452 = $448 | $451;
       if ($452) {
        $$05$i$i = $445;$439 = $446;$440 = $447;
       } else {
        break;
       }
      }
      $$0$lcssa$i48$i = $445;$$01$lcssa$off0$i$i = $446;
     } else {
      $$0$lcssa$i48$i = $6;$$01$lcssa$off0$i$i = $435;
     }
     $453 = ($$01$lcssa$off0$i$i|0)==(0);
     if ($453) {
      $$1$lcssa$i$i = $$0$lcssa$i48$i;
     } else {
      $$12$i$i = $$0$lcssa$i48$i;$y$03$i$i = $$01$lcssa$off0$i$i;
      while(1) {
       $454 = (($y$03$i$i>>>0) % 10)&-1;
       $455 = $454 | 48;
       $456 = $455&255;
       $457 = (($$12$i$i) + -1|0);
       HEAP8[$457>>0] = $456;
       $458 = (($y$03$i$i>>>0) / 10)&-1;
       $459 = ($y$03$i$i>>>0)<(10);
       if ($459) {
        $$1$lcssa$i$i = $457;
        break;
       } else {
        $$12$i$i = $457;$y$03$i$i = $458;
       }
      }
     }
     $460 = ($$1$lcssa$i$i|0)==($6|0);
     if ($460) {
      HEAP8[$7>>0] = 48;
      $estr$0$i = $7;
     } else {
      $estr$0$i = $$1$lcssa$i$i;
     }
     $461 = HEAP32[$e2$i>>2]|0;
     $462 = $461 >> 31;
     $463 = $462 & 2;
     $464 = (($463) + 43)|0;
     $465 = $464&255;
     $466 = (($estr$0$i) + -1|0);
     HEAP8[$466>>0] = $465;
     $467 = (($t$0) + 15)|0;
     $468 = $467&255;
     $469 = (($estr$0$i) + -2|0);
     HEAP8[$469>>0] = $468;
     $470 = ($p$0|0)>(0);
     $471 = $fl$1$ & 8;
     $472 = ($471|0)==(0);
     if ($470) {
      if ($472) {
       $$2$us$us$i = $$1$i;$s$0$us$us$i = $buf$i;
       while(1) {
        $473 = (~~(($$2$us$us$i)));
        $474 = (287144 + ($473)|0);
        $475 = HEAP8[$474>>0]|0;
        $476 = $475&255;
        $477 = $476 | $414;
        $478 = $477&255;
        $479 = (($s$0$us$us$i) + 1|0);
        HEAP8[$s$0$us$us$i>>0] = $478;
        $480 = (+($473|0));
        $481 = $$2$us$us$i - $480;
        $482 = $481 * 16.0;
        $483 = $479;
        $484 = (($483) - ($0))|0;
        $485 = ($484|0)==(1);
        if ($485) {
         $486 = (($s$0$us$us$i) + 2|0);
         HEAP8[$479>>0] = 46;
         $s$1$us$us$i = $486;
        } else {
         $s$1$us$us$i = $479;
        }
        $487 = $482 != 0.0;
        if ($487) {
         $$2$us$us$i = $482;$s$0$us$us$i = $s$1$us$us$i;
        } else {
         $s$1$lcssa$i = $s$1$us$us$i;
         break;
        }
       }
      } else {
       $$2$us$i = $$1$i;$s$0$us$i = $buf$i;
       while(1) {
        $488 = (~~(($$2$us$i)));
        $489 = (287144 + ($488)|0);
        $490 = HEAP8[$489>>0]|0;
        $491 = $490&255;
        $492 = $491 | $414;
        $493 = $492&255;
        $494 = (($s$0$us$i) + 1|0);
        HEAP8[$s$0$us$i>>0] = $493;
        $495 = (+($488|0));
        $496 = $$2$us$i - $495;
        $497 = $496 * 16.0;
        $498 = $494;
        $499 = (($498) - ($0))|0;
        $500 = ($499|0)==(1);
        if ($500) {
         $501 = (($s$0$us$i) + 2|0);
         HEAP8[$494>>0] = 46;
         $s$1$us$i = $501;
        } else {
         $s$1$us$i = $494;
        }
        $502 = $497 != 0.0;
        if ($502) {
         $$2$us$i = $497;$s$0$us$i = $s$1$us$i;
        } else {
         $s$1$lcssa$i = $s$1$us$i;
         break;
        }
       }
      }
     } else {
      if ($472) {
       $$2$us159$i = $$1$i;$s$0$us158$i = $buf$i;
       while(1) {
        $503 = (~~(($$2$us159$i)));
        $504 = (287144 + ($503)|0);
        $505 = HEAP8[$504>>0]|0;
        $506 = $505&255;
        $507 = $506 | $414;
        $508 = $507&255;
        $509 = (($s$0$us158$i) + 1|0);
        HEAP8[$s$0$us158$i>>0] = $508;
        $510 = (+($503|0));
        $511 = $$2$us159$i - $510;
        $512 = $511 * 16.0;
        $513 = $509;
        $514 = (($513) - ($0))|0;
        $515 = ($514|0)==(1);
        $516 = $512 != 0.0;
        $or$cond$i71 = $515 & $516;
        if ($or$cond$i71) {
         $517 = (($s$0$us158$i) + 2|0);
         HEAP8[$509>>0] = 46;
         $s$1$us160$i = $517;
        } else {
         $s$1$us160$i = $509;
        }
        if ($516) {
         $$2$us159$i = $512;$s$0$us158$i = $s$1$us160$i;
        } else {
         $s$1$lcssa$i = $s$1$us160$i;
         break;
        }
       }
      } else {
       $$2$i = $$1$i;$s$0$i = $buf$i;
       while(1) {
        $518 = (~~(($$2$i)));
        $519 = (287144 + ($518)|0);
        $520 = HEAP8[$519>>0]|0;
        $521 = $520&255;
        $522 = $521 | $414;
        $523 = $522&255;
        $524 = (($s$0$i) + 1|0);
        HEAP8[$s$0$i>>0] = $523;
        $525 = (+($518|0));
        $526 = $$2$i - $525;
        $527 = $526 * 16.0;
        $528 = $524;
        $529 = (($528) - ($0))|0;
        $530 = ($529|0)==(1);
        if ($530) {
         $531 = (($s$0$i) + 2|0);
         HEAP8[$524>>0] = 46;
         $s$1$i = $531;
        } else {
         $s$1$i = $524;
        }
        $532 = $527 != 0.0;
        if ($532) {
         $$2$i = $527;$s$0$i = $s$1$i;
        } else {
         $s$1$lcssa$i = $s$1$i;
         break;
        }
       }
      }
     }
     $533 = ($p$0|0)==(0);
     $$pre319$i = $s$1$lcssa$i;
     do {
      if ($533) {
       label = 173;
      } else {
       $534 = (($10) + ($$pre319$i))|0;
       $535 = ($534|0)<($p$0|0);
       if (!($535)) {
        label = 173;
        break;
       }
       $536 = $469;
       $537 = (($11) + ($p$0))|0;
       $538 = (($537) - ($536))|0;
       $l$0$i = $538;
      }
     } while(0);
     if ((label|0) == 173) {
      label = 0;
      $539 = $469;
      $540 = (($9) - ($539))|0;
      $541 = (($540) + ($$pre319$i))|0;
      $l$0$i = $541;
     }
     $542 = (($l$0$i) + ($417))|0;
     $543 = $fl$1$ & 73728;
     $544 = ($543|0)==(0);
     $545 = ($542|0)<($w$1|0);
     $or$cond$i52$i = $544 & $545;
     if ($or$cond$i52$i) {
      $546 = (($w$1) - ($542))|0;
      $547 = ($546>>>0)>(256);
      $548 = $547 ? 256 : $546;
      _memset(($pad$i|0),32,($548|0))|0;
      $549 = ($546>>>0)>(255);
      if ($549) {
       $$01$i53$i = $546;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $550 = (($$01$i53$i) + -256)|0;
        $551 = ($550>>>0)>(255);
        if ($551) {
         $$01$i53$i = $550;
        } else {
         $$0$lcssa$i55$i = $550;
         break;
        }
       }
      } else {
       $$0$lcssa$i55$i = $546;
      }
      (___fwritex($pad$i,$$0$lcssa$i55$i,$f)|0);
     }
     (___fwritex($prefix$0$$i,$417,$f)|0);
     $552 = ($543|0)==(65536);
     $or$cond$i59$i = $552 & $545;
     if ($or$cond$i59$i) {
      $553 = (($w$1) - ($542))|0;
      $554 = ($553>>>0)>(256);
      $555 = $554 ? 256 : $553;
      _memset(($pad$i|0),48,($555|0))|0;
      $556 = ($553>>>0)>(255);
      if ($556) {
       $$01$i60$i = $553;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $557 = (($$01$i60$i) + -256)|0;
        $558 = ($557>>>0)>(255);
        if ($558) {
         $$01$i60$i = $557;
        } else {
         $$0$lcssa$i62$i = $557;
         break;
        }
       }
      } else {
       $$0$lcssa$i62$i = $553;
      }
      (___fwritex($pad$i,$$0$lcssa$i62$i,$f)|0);
     }
     $559 = (($$pre319$i) - ($0))|0;
     (___fwritex($buf$i,$559,$f)|0);
     $560 = $469;
     $561 = (($8) - ($560))|0;
     $562 = (($l$0$i) - ($561))|0;
     $563 = (($562) - ($559))|0;
     $564 = ($563|0)>(0);
     if ($564) {
      $565 = ($563>>>0)>(256);
      $566 = $565 ? 256 : $563;
      _memset(($pad$i|0),48,($566|0))|0;
      $567 = ($563>>>0)>(255);
      if ($567) {
       $$01$i66$i = $563;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $568 = (($$01$i66$i) + -256)|0;
        $569 = ($568>>>0)>(255);
        if ($569) {
         $$01$i66$i = $568;
        } else {
         $$0$lcssa$i68$i = $568;
         break;
        }
       }
      } else {
       $$0$lcssa$i68$i = $563;
      }
      (___fwritex($pad$i,$$0$lcssa$i68$i,$f)|0);
     }
     (___fwritex($469,$561,$f)|0);
     $570 = ($543|0)==(8192);
     $or$cond$i72$i = $570 & $545;
     if ($or$cond$i72$i) {
      $571 = (($w$1) - ($542))|0;
      $572 = ($571>>>0)>(256);
      $573 = $572 ? 256 : $571;
      _memset(($pad$i|0),32,($573|0))|0;
      $574 = ($571>>>0)>(255);
      if ($574) {
       $$01$i73$i = $571;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $575 = (($$01$i73$i) + -256)|0;
        $576 = ($575>>>0)>(255);
        if ($576) {
         $$01$i73$i = $575;
        } else {
         $$0$lcssa$i75$i = $575;
         break;
        }
       }
      } else {
       $$0$lcssa$i75$i = $571;
      }
      (___fwritex($pad$i,$$0$lcssa$i75$i,$f)|0);
     }
     $w$18$i = $545 ? $w$1 : $542;
     $1045 = $229;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$18$i;$l10n$0 = $l10n$3;
     continue L1;
    }
    $577 = ($p$0|0)<(0);
    $$p$i = $577 ? 6 : $p$0;
    if ($409) {
     $578 = $408 * 268435456.0;
     $579 = HEAP32[$e2$i>>2]|0;
     $580 = (($579) + -28)|0;
     HEAP32[$e2$i>>2] = $580;
     $$3$i = $578;$582 = $580;
    } else {
     $$pre$i = HEAP32[$e2$i>>2]|0;
     $$3$i = $408;$582 = $$pre$i;
    }
    $581 = ($582|0)<(0);
    $$31$i = $581 ? $big$i : $12;
    $$4$i = $$3$i;$z$0$i = $$31$i;
    while(1) {
     $583 = (~~(($$4$i))>>>0);
     HEAP32[$z$0$i>>2] = $583;
     $584 = (($z$0$i) + 4|0);
     $585 = (+($583>>>0));
     $586 = $$4$i - $585;
     $587 = $586 * 1.0E+9;
     $588 = $587 != 0.0;
     if ($588) {
      $$4$i = $587;$z$0$i = $584;
     } else {
      break;
     }
    }
    $$pr$i = HEAP32[$e2$i>>2]|0;
    $589 = ($$pr$i|0)>(0);
    if ($589) {
     $591 = $$pr$i;$a$1263$i = $$31$i;$z$1262$i = $584;
     while(1) {
      $590 = ($591|0)>(29);
      $592 = $590 ? 29 : $591;
      $d$0254$i = (($z$1262$i) + -4|0);
      $593 = ($d$0254$i>>>0)<($a$1263$i>>>0);
      do {
       if ($593) {
        $a$2$ph$i = $a$1263$i;
       } else {
        $carry$0255$i = 0;$d$0256$i = $d$0254$i;
        while(1) {
         $594 = HEAP32[$d$0256$i>>2]|0;
         $595 = (_bitshift64Shl(($594|0),0,($592|0))|0);
         $596 = tempRet0;
         $597 = (_i64Add(($595|0),($596|0),($carry$0255$i|0),0)|0);
         $598 = tempRet0;
         $599 = (___uremdi3(($597|0),($598|0),1000000000,0)|0);
         $600 = tempRet0;
         HEAP32[$d$0256$i>>2] = $599;
         $601 = (___udivdi3(($597|0),($598|0),1000000000,0)|0);
         $602 = tempRet0;
         $d$0$i = (($d$0256$i) + -4|0);
         $603 = ($d$0$i>>>0)<($a$1263$i>>>0);
         if ($603) {
          break;
         } else {
          $carry$0255$i = $601;$d$0256$i = $d$0$i;
         }
        }
        $604 = ($601|0)==(0);
        if ($604) {
         $a$2$ph$i = $a$1263$i;
         break;
        }
        $605 = (($a$1263$i) + -4|0);
        HEAP32[$605>>2] = $601;
        $a$2$ph$i = $605;
       }
      } while(0);
      $z$2$i = $z$1262$i;
      while(1) {
       $606 = ($z$2$i>>>0)>($a$2$ph$i>>>0);
       if (!($606)) {
        break;
       }
       $607 = (($z$2$i) + -4|0);
       $608 = HEAP32[$607>>2]|0;
       $609 = ($608|0)==(0);
       if ($609) {
        $z$2$i = $607;
       } else {
        break;
       }
      }
      $610 = HEAP32[$e2$i>>2]|0;
      $611 = (($610) - ($592))|0;
      HEAP32[$e2$i>>2] = $611;
      $612 = ($611|0)>(0);
      if ($612) {
       $591 = $611;$a$1263$i = $a$2$ph$i;$z$1262$i = $z$2$i;
      } else {
       $$pr146$i = $611;$a$1$lcssa$i = $a$2$ph$i;$z$1$lcssa$i = $z$2$i;
       break;
      }
     }
    } else {
     $$pr146$i = $$pr$i;$a$1$lcssa$i = $$31$i;$z$1$lcssa$i = $584;
    }
    $613 = ($$pr146$i|0)<(0);
    L240: do {
     if ($613) {
      $614 = (($$p$i) + 25)|0;
      $615 = (($614|0) / 9)&-1;
      $616 = (($615) + 1)|0;
      $617 = ($412|0)==(102);
      if ($617) {
       $618 = $$31$i;
       $619 = (($$31$i) + ($616<<2)|0);
       $621 = $$pr146$i;$a$3249$us$i = $a$1$lcssa$i;$z$3248$us$i = $z$1$lcssa$i;
       while(1) {
        $620 = (0 - ($621))|0;
        $622 = ($620|0)>(9);
        $$20$us$i = $622 ? 9 : $620;
        $623 = ($a$3249$us$i>>>0)<($z$3248$us$i>>>0);
        do {
         if ($623) {
          $648 = 1 << $$20$us$i;
          $642 = (($648) + -1)|0;
          $645 = 1000000000 >>> $$20$us$i;
          $carry3$0243$us$i = 0;$d$1242$us$i = $a$3249$us$i;
          while(1) {
           $640 = HEAP32[$d$1242$us$i>>2]|0;
           $641 = $640 & $642;
           $643 = $640 >>> $$20$us$i;
           $644 = (($643) + ($carry3$0243$us$i))|0;
           HEAP32[$d$1242$us$i>>2] = $644;
           $631 = Math_imul($641, $645)|0;
           $646 = (($d$1242$us$i) + 4|0);
           $647 = ($646>>>0)<($z$3248$us$i>>>0);
           if ($647) {
            $carry3$0243$us$i = $631;$d$1242$us$i = $646;
           } else {
            break;
           }
          }
          $627 = HEAP32[$a$3249$us$i>>2]|0;
          $628 = ($627|0)==(0);
          $629 = (($a$3249$us$i) + 4|0);
          $$a$3$us$i = $628 ? $629 : $a$3249$us$i;
          $630 = ($631|0)==(0);
          if ($630) {
           $$a$3$us323$i = $$a$3$us$i;$z$4$us$i = $z$3248$us$i;
           break;
          }
          $632 = (($z$3248$us$i) + 4|0);
          HEAP32[$z$3248$us$i>>2] = $631;
          $$a$3$us323$i = $$a$3$us$i;$z$4$us$i = $632;
         } else {
          $624 = HEAP32[$a$3249$us$i>>2]|0;
          $625 = ($624|0)==(0);
          $626 = (($a$3249$us$i) + 4|0);
          $$a$3$us322$i = $625 ? $626 : $a$3249$us$i;
          $$a$3$us323$i = $$a$3$us322$i;$z$4$us$i = $z$3248$us$i;
         }
        } while(0);
        $633 = $z$4$us$i;
        $634 = (($633) - ($618))|0;
        $635 = $634 >> 2;
        $636 = ($635|0)>($616|0);
        $$z$4$us$i = $636 ? $619 : $z$4$us$i;
        $637 = HEAP32[$e2$i>>2]|0;
        $638 = (($637) + ($$20$us$i))|0;
        HEAP32[$e2$i>>2] = $638;
        $639 = ($638|0)<(0);
        if ($639) {
         $621 = $638;$a$3249$us$i = $$a$3$us323$i;$z$3248$us$i = $$z$4$us$i;
        } else {
         $a$3$lcssa$i = $$a$3$us323$i;$z$3$lcssa$i = $$z$4$us$i;
         break L240;
        }
       }
      } else {
       $650 = $$pr146$i;$a$3249$i = $a$1$lcssa$i;$z$3248$i = $z$1$lcssa$i;
      }
      while(1) {
       $649 = (0 - ($650))|0;
       $651 = ($649|0)>(9);
       $$20$i = $651 ? 9 : $649;
       $652 = ($a$3249$i>>>0)<($z$3248$i>>>0);
       do {
        if ($652) {
         $656 = 1 << $$20$i;
         $657 = (($656) + -1)|0;
         $658 = 1000000000 >>> $$20$i;
         $carry3$0243$i = 0;$d$1242$i = $a$3249$i;
         while(1) {
          $659 = HEAP32[$d$1242$i>>2]|0;
          $660 = $659 & $657;
          $661 = $659 >>> $$20$i;
          $662 = (($661) + ($carry3$0243$i))|0;
          HEAP32[$d$1242$i>>2] = $662;
          $663 = Math_imul($660, $658)|0;
          $664 = (($d$1242$i) + 4|0);
          $665 = ($664>>>0)<($z$3248$i>>>0);
          if ($665) {
           $carry3$0243$i = $663;$d$1242$i = $664;
          } else {
           break;
          }
         }
         $666 = HEAP32[$a$3249$i>>2]|0;
         $667 = ($666|0)==(0);
         $668 = (($a$3249$i) + 4|0);
         $$a$3$i = $667 ? $668 : $a$3249$i;
         $669 = ($663|0)==(0);
         if ($669) {
          $$a$3325$i = $$a$3$i;$z$4$i = $z$3248$i;
          break;
         }
         $670 = (($z$3248$i) + 4|0);
         HEAP32[$z$3248$i>>2] = $663;
         $$a$3325$i = $$a$3$i;$z$4$i = $670;
        } else {
         $653 = HEAP32[$a$3249$i>>2]|0;
         $654 = ($653|0)==(0);
         $655 = (($a$3249$i) + 4|0);
         $$a$3324$i = $654 ? $655 : $a$3249$i;
         $$a$3325$i = $$a$3324$i;$z$4$i = $z$3248$i;
        }
       } while(0);
       $671 = $z$4$i;
       $672 = $$a$3325$i;
       $673 = (($671) - ($672))|0;
       $674 = $673 >> 2;
       $675 = ($674|0)>($616|0);
       if ($675) {
        $676 = (($$a$3325$i) + ($616<<2)|0);
        $z$5$i = $676;
       } else {
        $z$5$i = $z$4$i;
       }
       $677 = HEAP32[$e2$i>>2]|0;
       $678 = (($677) + ($$20$i))|0;
       HEAP32[$e2$i>>2] = $678;
       $679 = ($678|0)<(0);
       if ($679) {
        $650 = $678;$a$3249$i = $$a$3325$i;$z$3248$i = $z$5$i;
       } else {
        $a$3$lcssa$i = $$a$3325$i;$z$3$lcssa$i = $z$5$i;
        break;
       }
      }
     } else {
      $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
     }
    } while(0);
    $680 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
    $681 = $$31$i;
    do {
     if ($680) {
      $682 = $a$3$lcssa$i;
      $683 = (($681) - ($682))|0;
      $684 = $683 >> 2;
      $685 = ($684*9)|0;
      $686 = HEAP32[$a$3$lcssa$i>>2]|0;
      $687 = ($686>>>0)<(10);
      if ($687) {
       $e$1$i = $685;
       break;
      } else {
       $e$0238$i = $685;$i$0237$i = 10;
      }
      while(1) {
       $688 = ($i$0237$i*10)|0;
       $689 = (($e$0238$i) + 1)|0;
       $690 = ($686>>>0)<($688>>>0);
       if ($690) {
        $e$1$i = $689;
        break;
       } else {
        $e$0238$i = $689;$i$0237$i = $688;
       }
      }
     } else {
      $e$1$i = 0;
     }
    } while(0);
    $691 = ($412|0)!=(102);
    $692 = $691 ? $e$1$i : 0;
    $693 = (($$p$i) - ($692))|0;
    $694 = ($412|0)==(103);
    $695 = ($$p$i|0)!=(0);
    $$21$i = $694 & $695;
    $$neg151$i = $$21$i << 31 >> 31;
    $696 = (($693) + ($$neg151$i))|0;
    $697 = $z$3$lcssa$i;
    $698 = (($697) - ($681))|0;
    $699 = $698 >> 2;
    $700 = ($699*9)|0;
    $701 = (($700) + -9)|0;
    $702 = ($696|0)<($701|0);
    if ($702) {
     $703 = (($696) + 9216)|0;
     $704 = (($703|0) / 9)&-1;
     $$sum$i = (($704) + -1023)|0;
     $705 = (($$31$i) + ($$sum$i<<2)|0);
     $706 = (($703|0) % 9)&-1;
     $j$0229$i = (($706) + 1)|0;
     $707 = ($j$0229$i|0)<(9);
     if ($707) {
      $i$1230$i = 10;$j$0231$i = $j$0229$i;
      while(1) {
       $708 = ($i$1230$i*10)|0;
       $j$0$i = (($j$0231$i) + 1)|0;
       $exitcond$i = ($j$0$i|0)==(9);
       if ($exitcond$i) {
        $i$1$lcssa$i = $708;
        break;
       } else {
        $i$1230$i = $708;$j$0231$i = $j$0$i;
       }
      }
     } else {
      $i$1$lcssa$i = 10;
     }
     $709 = HEAP32[$705>>2]|0;
     $710 = (($709>>>0) % ($i$1$lcssa$i>>>0))&-1;
     $711 = ($710|0)==(0);
     if ($711) {
      $$sum15$i = (($704) + -1022)|0;
      $712 = (($$31$i) + ($$sum15$i<<2)|0);
      $713 = ($712|0)==($z$3$lcssa$i|0);
      if ($713) {
       $a$7$i = $a$3$lcssa$i;$d$3$i = $705;$e$3$i = $e$1$i;
      } else {
       label = 233;
      }
     } else {
      label = 233;
     }
     do {
      if ((label|0) == 233) {
       label = 0;
       $714 = (($709>>>0) / ($i$1$lcssa$i>>>0))&-1;
       $715 = $714 & 1;
       $716 = ($715|0)==(0);
       $$22$i = $716 ? 9007199254740992.0 : 9007199254740994.0;
       $717 = (($i$1$lcssa$i|0) / 2)&-1;
       $718 = ($710>>>0)<($717>>>0);
       do {
        if ($718) {
         $small$0$i = 0.5;
        } else {
         $719 = ($710|0)==($717|0);
         if ($719) {
          $$sum16$i = (($704) + -1022)|0;
          $720 = (($$31$i) + ($$sum16$i<<2)|0);
          $721 = ($720|0)==($z$3$lcssa$i|0);
          if ($721) {
           $small$0$i = 1.0;
           break;
          }
         }
         $small$0$i = 1.5;
        }
       } while(0);
       $722 = ($pl$0$i|0)==(0);
       do {
        if ($722) {
         $round6$1$i = $$22$i;$small$1$i = $small$0$i;
        } else {
         $723 = HEAP8[$prefix$0$i>>0]|0;
         $724 = ($723<<24>>24)==(45);
         if (!($724)) {
          $round6$1$i = $$22$i;$small$1$i = $small$0$i;
          break;
         }
         $725 = $$22$i * -1.0;
         $726 = $small$0$i * -1.0;
         $round6$1$i = $725;$small$1$i = $726;
        }
       } while(0);
       $727 = (($709) - ($710))|0;
       HEAP32[$705>>2] = $727;
       $728 = $round6$1$i + $small$1$i;
       $729 = $728 != $round6$1$i;
       if (!($729)) {
        $a$7$i = $a$3$lcssa$i;$d$3$i = $705;$e$3$i = $e$1$i;
        break;
       }
       $730 = (($727) + ($i$1$lcssa$i))|0;
       HEAP32[$705>>2] = $730;
       $731 = ($730>>>0)>(999999999);
       if ($731) {
        $a$5223$i = $a$3$lcssa$i;$d$2222$i = $705;
        while(1) {
         $732 = (($d$2222$i) + -4|0);
         HEAP32[$d$2222$i>>2] = 0;
         $733 = ($732>>>0)<($a$5223$i>>>0);
         if ($733) {
          $734 = (($a$5223$i) + -4|0);
          HEAP32[$734>>2] = 0;
          $a$6$i = $734;
         } else {
          $a$6$i = $a$5223$i;
         }
         $735 = HEAP32[$732>>2]|0;
         $736 = (($735) + 1)|0;
         HEAP32[$732>>2] = $736;
         $737 = ($736>>>0)>(999999999);
         if ($737) {
          $a$5223$i = $a$6$i;$d$2222$i = $732;
         } else {
          $a$5$lcssa$i = $a$6$i;$d$2$lcssa$i = $732;
          break;
         }
        }
       } else {
        $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $705;
       }
       $738 = $a$5$lcssa$i;
       $739 = (($681) - ($738))|0;
       $740 = $739 >> 2;
       $741 = ($740*9)|0;
       $742 = HEAP32[$a$5$lcssa$i>>2]|0;
       $743 = ($742>>>0)<(10);
       if ($743) {
        $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $741;
        break;
       } else {
        $e$2218$i = $741;$i$2217$i = 10;
       }
       while(1) {
        $744 = ($i$2217$i*10)|0;
        $745 = (($e$2218$i) + 1)|0;
        $746 = ($742>>>0)<($744>>>0);
        if ($746) {
         $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $745;
         break;
        } else {
         $e$2218$i = $745;$i$2217$i = $744;
        }
       }
      }
     } while(0);
     $747 = (($d$3$i) + 4|0);
     $748 = ($z$3$lcssa$i>>>0)>($747>>>0);
     $$z$3$i = $748 ? $747 : $z$3$lcssa$i;
     $a$8$ph$i = $a$7$i;$e$4$ph$i = $e$3$i;$z$6$ph$i = $$z$3$i;
    } else {
     $a$8$ph$i = $a$3$lcssa$i;$e$4$ph$i = $e$1$i;$z$6$ph$i = $z$3$lcssa$i;
    }
    $749 = (0 - ($e$4$ph$i))|0;
    $z$6$i = $z$6$ph$i;
    while(1) {
     $750 = ($z$6$i>>>0)>($a$8$ph$i>>>0);
     if (!($750)) {
      $$lcssa300$i = 0;
      break;
     }
     $751 = (($z$6$i) + -4|0);
     $752 = HEAP32[$751>>2]|0;
     $753 = ($752|0)==(0);
     if ($753) {
      $z$6$i = $751;
     } else {
      $$lcssa300$i = 1;
      break;
     }
    }
    do {
     if ($694) {
      $754 = ($$p$i|0)==(0);
      $755 = $754&1;
      $$$p$i = (($755) + ($$p$i))|0;
      $756 = ($$$p$i|0)>($e$4$ph$i|0);
      $757 = ($e$4$ph$i|0)>(-5);
      $or$cond4$i = $756 & $757;
      if ($or$cond4$i) {
       $758 = (($t$0) + -1)|0;
       $$neg152$i = (($$$p$i) + -1)|0;
       $759 = (($$neg152$i) - ($e$4$ph$i))|0;
       $$013$i = $758;$$210$i = $759;
      } else {
       $760 = (($t$0) + -2)|0;
       $761 = (($$$p$i) + -1)|0;
       $$013$i = $760;$$210$i = $761;
      }
      $762 = $fl$1$ & 8;
      $763 = ($762|0)==(0);
      if (!($763)) {
       $$114$i = $$013$i;$$311$i = $$210$i;
       break;
      }
      do {
       if ($$lcssa300$i) {
        $764 = (($z$6$i) + -4|0);
        $765 = HEAP32[$764>>2]|0;
        $766 = ($765|0)==(0);
        if ($766) {
         $j$2$i = 9;
         break;
        }
        $767 = (($765>>>0) % 10)&-1;
        $768 = ($767|0)==(0);
        if ($768) {
         $i$3209$i = 10;$j$1210$i = 0;
        } else {
         $j$2$i = 0;
         break;
        }
        while(1) {
         $769 = ($i$3209$i*10)|0;
         $770 = (($j$1210$i) + 1)|0;
         $771 = (($765>>>0) % ($769>>>0))&-1;
         $772 = ($771|0)==(0);
         if ($772) {
          $i$3209$i = $769;$j$1210$i = $770;
         } else {
          $j$2$i = $770;
          break;
         }
        }
       } else {
        $j$2$i = 9;
       }
      } while(0);
      $773 = $$013$i | 32;
      $774 = ($773|0)==(102);
      $775 = $z$6$i;
      $776 = (($775) - ($681))|0;
      $777 = $776 >> 2;
      $778 = ($777*9)|0;
      $779 = (($778) + -9)|0;
      if ($774) {
       $780 = (($779) - ($j$2$i))|0;
       $781 = ($780|0)<(0);
       $$23$i = $781 ? 0 : $780;
       $782 = ($$210$i|0)<($$23$i|0);
       $$210$$23$i = $782 ? $$210$i : $$23$i;
       $$114$i = $$013$i;$$311$i = $$210$$23$i;
       break;
      } else {
       $783 = (($779) + ($e$4$ph$i))|0;
       $784 = (($783) - ($j$2$i))|0;
       $785 = ($784|0)<(0);
       $$25$i = $785 ? 0 : $784;
       $786 = ($$210$i|0)<($$25$i|0);
       $$210$$25$i = $786 ? $$210$i : $$25$i;
       $$114$i = $$013$i;$$311$i = $$210$$25$i;
       break;
      }
     } else {
      $$114$i = $t$0;$$311$i = $$p$i;
     }
    } while(0);
    $787 = ($$311$i|0)!=(0);
    if ($787) {
     $791 = 1;
    } else {
     $788 = $fl$1$ & 8;
     $789 = ($788|0)!=(0);
     $791 = $789;
    }
    $790 = $791&1;
    $792 = $$114$i | 32;
    $793 = ($792|0)==(102);
    if ($793) {
     $794 = ($e$4$ph$i|0)>(0);
     $795 = $794 ? $e$4$ph$i : 0;
     $$pn$i = $795;$estr$2$i = 0;
    } else {
     $796 = ($e$4$ph$i|0)<(0);
     $797 = $796 ? $749 : $e$4$ph$i;
     $798 = ($797|0)<(0);
     if ($798) {
      $799 = ($797|0)<(0);
      $800 = $799 << 31 >> 31;
      $$05$i79$i = $6;$801 = $797;$802 = $800;
      while(1) {
       $803 = (___uremdi3(($801|0),($802|0),10,0)|0);
       $804 = tempRet0;
       $805 = $803 | 48;
       $806 = $805&255;
       $807 = (($$05$i79$i) + -1|0);
       HEAP8[$807>>0] = $806;
       $808 = (___udivdi3(($801|0),($802|0),10,0)|0);
       $809 = tempRet0;
       $810 = ($802>>>0)>(9);
       $811 = ($802|0)==(9);
       $812 = ($801>>>0)>(4294967295);
       $813 = $811 & $812;
       $814 = $810 | $813;
       if ($814) {
        $$05$i79$i = $807;$801 = $808;$802 = $809;
       } else {
        break;
       }
      }
      $$0$lcssa$i84$i = $807;$$01$lcssa$off0$i85$i = $808;
     } else {
      $$0$lcssa$i84$i = $6;$$01$lcssa$off0$i85$i = $797;
     }
     $815 = ($$01$lcssa$off0$i85$i|0)==(0);
     if ($815) {
      $estr$1$ph$i = $$0$lcssa$i84$i;
     } else {
      $$12$i87$i = $$0$lcssa$i84$i;$y$03$i86$i = $$01$lcssa$off0$i85$i;
      while(1) {
       $816 = (($y$03$i86$i>>>0) % 10)&-1;
       $817 = $816 | 48;
       $818 = $817&255;
       $819 = (($$12$i87$i) + -1|0);
       HEAP8[$819>>0] = $818;
       $820 = (($y$03$i86$i>>>0) / 10)&-1;
       $821 = ($y$03$i86$i>>>0)<(10);
       if ($821) {
        $estr$1$ph$i = $819;
        break;
       } else {
        $$12$i87$i = $819;$y$03$i86$i = $820;
       }
      }
     }
     $822 = $estr$1$ph$i;
     $823 = (($8) - ($822))|0;
     $824 = ($823|0)<(2);
     if ($824) {
      $estr$1200$i = $estr$1$ph$i;
      while(1) {
       $825 = (($estr$1200$i) + -1|0);
       HEAP8[$825>>0] = 48;
       $826 = $825;
       $827 = (($8) - ($826))|0;
       $828 = ($827|0)<(2);
       if ($828) {
        $estr$1200$i = $825;
       } else {
        $estr$1$lcssa$i = $825;
        break;
       }
      }
     } else {
      $estr$1$lcssa$i = $estr$1$ph$i;
     }
     $829 = $e$4$ph$i >> 31;
     $830 = $829 & 2;
     $831 = (($830) + 43)|0;
     $832 = $831&255;
     $833 = (($estr$1$lcssa$i) + -1|0);
     HEAP8[$833>>0] = $832;
     $834 = $$114$i&255;
     $835 = (($estr$1$lcssa$i) + -2|0);
     HEAP8[$835>>0] = $834;
     $836 = $835;
     $837 = (($8) - ($836))|0;
     $$pn$i = $837;$estr$2$i = $835;
    }
    $838 = (($pl$0$i) + 1)|0;
    $839 = (($838) + ($$311$i))|0;
    $l$1$i = (($839) + ($790))|0;
    $840 = (($l$1$i) + ($$pn$i))|0;
    $841 = $fl$1$ & 73728;
    $842 = ($841|0)==(0);
    $843 = ($840|0)<($w$1|0);
    $or$cond$i93$i = $842 & $843;
    if ($or$cond$i93$i) {
     $844 = (($w$1) - ($840))|0;
     $845 = ($844>>>0)>(256);
     $846 = $845 ? 256 : $844;
     _memset(($pad$i|0),32,($846|0))|0;
     $847 = ($844>>>0)>(255);
     if ($847) {
      $$01$i94$i = $844;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $848 = (($$01$i94$i) + -256)|0;
       $849 = ($848>>>0)>(255);
       if ($849) {
        $$01$i94$i = $848;
       } else {
        $$0$lcssa$i96$i = $848;
        break;
       }
      }
     } else {
      $$0$lcssa$i96$i = $844;
     }
     (___fwritex($pad$i,$$0$lcssa$i96$i,$f)|0);
    }
    (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
    $850 = ($841|0)==(65536);
    $or$cond$i100$i = $850 & $843;
    if ($or$cond$i100$i) {
     $851 = (($w$1) - ($840))|0;
     $852 = ($851>>>0)>(256);
     $853 = $852 ? 256 : $851;
     _memset(($pad$i|0),48,($853|0))|0;
     $854 = ($851>>>0)>(255);
     if ($854) {
      $$01$i101$i = $851;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $855 = (($$01$i101$i) + -256)|0;
       $856 = ($855>>>0)>(255);
       if ($856) {
        $$01$i101$i = $855;
       } else {
        $$0$lcssa$i103$i = $855;
        break;
       }
      }
     } else {
      $$0$lcssa$i103$i = $851;
     }
     (___fwritex($pad$i,$$0$lcssa$i103$i,$f)|0);
    }
    do {
     if ($793) {
      $857 = ($a$8$ph$i>>>0)>($$31$i>>>0);
      $r$0$a$8$i = $857 ? $$31$i : $a$8$ph$i;
      $d$4183$i = $r$0$a$8$i;
      while(1) {
       $858 = HEAP32[$d$4183$i>>2]|0;
       $859 = ($858|0)==(0);
       if ($859) {
        $$1$lcssa$i112$i = $13;
       } else {
        $$12$i110$i = $13;$y$03$i109$i = $858;
        while(1) {
         $860 = (($y$03$i109$i>>>0) % 10)&-1;
         $861 = $860 | 48;
         $862 = $861&255;
         $863 = (($$12$i110$i) + -1|0);
         HEAP8[$863>>0] = $862;
         $864 = (($y$03$i109$i>>>0) / 10)&-1;
         $865 = ($y$03$i109$i>>>0)<(10);
         if ($865) {
          $$1$lcssa$i112$i = $863;
          break;
         } else {
          $$12$i110$i = $863;$y$03$i109$i = $864;
         }
        }
       }
       $866 = ($d$4183$i|0)==($r$0$a$8$i|0);
       do {
        if ($866) {
         $870 = ($$1$lcssa$i112$i|0)==($13|0);
         if (!($870)) {
          $s7$1$i = $$1$lcssa$i112$i;
          break;
         }
         HEAP8[$15>>0] = 48;
         $s7$1$i = $15;
        } else {
         $867 = ($$1$lcssa$i112$i>>>0)>($buf$i>>>0);
         if ($867) {
          $s7$0180$i = $$1$lcssa$i112$i;
         } else {
          $s7$1$i = $$1$lcssa$i112$i;
          break;
         }
         while(1) {
          $868 = (($s7$0180$i) + -1|0);
          HEAP8[$868>>0] = 48;
          $869 = ($868>>>0)>($buf$i>>>0);
          if ($869) {
           $s7$0180$i = $868;
          } else {
           $s7$1$i = $868;
           break;
          }
         }
        }
       } while(0);
       $871 = $s7$1$i;
       $872 = (($14) - ($871))|0;
       (___fwritex($s7$1$i,$872,$f)|0);
       $873 = (($d$4183$i) + 4|0);
       $874 = ($873>>>0)>($$31$i>>>0);
       if ($874) {
        break;
       } else {
        $d$4183$i = $873;
       }
      }
      if (!($787)) {
       $875 = $fl$1$ & 8;
       $876 = ($875|0)==(0);
       if ($876) {
        break;
       }
      }
      (___fwritex(287160,1,$f)|0);
      $877 = ($873>>>0)<($z$6$i>>>0);
      $878 = ($$311$i|0)>(0);
      $or$cond28173$i = $877 & $878;
      if ($or$cond28173$i) {
       $$412175$i = $$311$i;$d$5174$i = $873;
       while(1) {
        $879 = HEAP32[$d$5174$i>>2]|0;
        $880 = ($879|0)==(0);
        if ($880) {
         $s8$0169$i = $13;
         label = 300;
        } else {
         $$12$i119$i = $13;$y$03$i118$i = $879;
         while(1) {
          $881 = (($y$03$i118$i>>>0) % 10)&-1;
          $882 = $881 | 48;
          $883 = $882&255;
          $884 = (($$12$i119$i) + -1|0);
          HEAP8[$884>>0] = $883;
          $885 = (($y$03$i118$i>>>0) / 10)&-1;
          $886 = ($y$03$i118$i>>>0)<(10);
          if ($886) {
           break;
          } else {
           $$12$i119$i = $884;$y$03$i118$i = $885;
          }
         }
         $887 = ($884>>>0)>($buf$i>>>0);
         if ($887) {
          $s8$0169$i = $884;
          label = 300;
         } else {
          $s8$0$lcssa$i = $884;
         }
        }
        if ((label|0) == 300) {
         while(1) {
          label = 0;
          $888 = (($s8$0169$i) + -1|0);
          HEAP8[$888>>0] = 48;
          $889 = ($888>>>0)>($buf$i>>>0);
          if ($889) {
           $s8$0169$i = $888;
           label = 300;
          } else {
           $s8$0$lcssa$i = $888;
           break;
          }
         }
        }
        $890 = ($$412175$i|0)>(9);
        $891 = $890 ? 9 : $$412175$i;
        (___fwritex($s8$0$lcssa$i,$891,$f)|0);
        $892 = (($d$5174$i) + 4|0);
        $893 = (($$412175$i) + -9)|0;
        $894 = ($892>>>0)<($z$6$i>>>0);
        $895 = ($893|0)>(0);
        $or$cond28$i = $894 & $895;
        if ($or$cond28$i) {
         $$412175$i = $893;$d$5174$i = $892;
        } else {
         $$412$lcssa$i = $893;
         break;
        }
       }
      } else {
       $$412$lcssa$i = $$311$i;
      }
      $896 = ($$412$lcssa$i|0)>(0);
      if (!($896)) {
       break;
      }
      $897 = ($$412$lcssa$i>>>0)>(256);
      $898 = $897 ? 256 : $$412$lcssa$i;
      _memset(($pad$i|0),48,($898|0))|0;
      $899 = ($$412$lcssa$i>>>0)>(255);
      if ($899) {
       $$01$i125$i = $$412$lcssa$i;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $900 = (($$01$i125$i) + -256)|0;
        $901 = ($900>>>0)>(255);
        if ($901) {
         $$01$i125$i = $900;
        } else {
         $$0$lcssa$i127$i = $900;
         break;
        }
       }
      } else {
       $$0$lcssa$i127$i = $$412$lcssa$i;
      }
      (___fwritex($pad$i,$$0$lcssa$i127$i,$f)|0);
     } else {
      $902 = (($a$8$ph$i) + 4|0);
      $z$6$$i = $$lcssa300$i ? $z$6$i : $902;
      $903 = ($$311$i|0)>(-1);
      do {
       if ($903) {
        $904 = $fl$1$ & 8;
        $$not$i = ($904|0)!=(0);
        $$5193$i = $$311$i;$d$6192$i = $a$8$ph$i;
        while(1) {
         $905 = HEAP32[$d$6192$i>>2]|0;
         $906 = ($905|0)==(0);
         if ($906) {
          label = 311;
         } else {
          $$12$i134$i = $13;$y$03$i133$i = $905;
          while(1) {
           $907 = (($y$03$i133$i>>>0) % 10)&-1;
           $908 = $907 | 48;
           $909 = $908&255;
           $910 = (($$12$i134$i) + -1|0);
           HEAP8[$910>>0] = $909;
           $911 = (($y$03$i133$i>>>0) / 10)&-1;
           $912 = ($y$03$i133$i>>>0)<(10);
           if ($912) {
            break;
           } else {
            $$12$i134$i = $910;$y$03$i133$i = $911;
           }
          }
          $913 = ($910|0)==($13|0);
          if ($913) {
           label = 311;
          } else {
           $s9$0$i = $910;
          }
         }
         if ((label|0) == 311) {
          label = 0;
          HEAP8[$15>>0] = 48;
          $s9$0$i = $15;
         }
         $914 = ($d$6192$i|0)==($a$8$ph$i|0);
         do {
          if ($914) {
           $918 = (($s9$0$i) + 1|0);
           (___fwritex($s9$0$i,1,$f)|0);
           $919 = ($$5193$i|0)>(0);
           $brmerge$i = $919 | $$not$i;
           if (!($brmerge$i)) {
            $s9$2$i = $918;
            break;
           }
           (___fwritex(287160,1,$f)|0);
           $s9$2$i = $918;
          } else {
           $915 = ($s9$0$i>>>0)>($buf$i>>>0);
           if ($915) {
            $s9$1188$i = $s9$0$i;
           } else {
            $s9$2$i = $s9$0$i;
            break;
           }
           while(1) {
            $916 = (($s9$1188$i) + -1|0);
            HEAP8[$916>>0] = 48;
            $917 = ($916>>>0)>($buf$i>>>0);
            if ($917) {
             $s9$1188$i = $916;
            } else {
             $s9$2$i = $916;
             break;
            }
           }
          }
         } while(0);
         $920 = $s9$2$i;
         $921 = (($14) - ($920))|0;
         $922 = ($921|0)<($$5193$i|0);
         $$$5$i = $922 ? $921 : $$5193$i;
         (___fwritex($s9$2$i,$$$5$i,$f)|0);
         $923 = (($$5193$i) - ($921))|0;
         $924 = (($d$6192$i) + 4|0);
         $925 = ($924>>>0)<($z$6$$i>>>0);
         $926 = ($923|0)>(-1);
         $or$cond29$i = $925 & $926;
         if ($or$cond29$i) {
          $$5193$i = $923;$d$6192$i = $924;
         } else {
          break;
         }
        }
        $927 = ($923|0)>(0);
        if (!($927)) {
         break;
        }
        $928 = ($923>>>0)>(256);
        $929 = $928 ? 256 : $923;
        _memset(($pad$i|0),48,($929|0))|0;
        $930 = ($923>>>0)>(255);
        if ($930) {
         $$01$i140$i = $923;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $931 = (($$01$i140$i) + -256)|0;
          $932 = ($931>>>0)>(255);
          if ($932) {
           $$01$i140$i = $931;
          } else {
           $$0$lcssa$i142$i = $931;
           break;
          }
         }
        } else {
         $$0$lcssa$i142$i = $923;
        }
        (___fwritex($pad$i,$$0$lcssa$i142$i,$f)|0);
       }
      } while(0);
      $933 = $estr$2$i;
      $934 = (($8) - ($933))|0;
      (___fwritex($estr$2$i,$934,$f)|0);
     }
    } while(0);
    $935 = ($841|0)==(8192);
    $or$cond$i$i = $935 & $843;
    if ($or$cond$i$i) {
     $936 = (($w$1) - ($840))|0;
     $937 = ($936>>>0)>(256);
     $938 = $937 ? 256 : $936;
     _memset(($pad$i|0),32,($938|0))|0;
     $939 = ($936>>>0)>(255);
     if ($939) {
      $$01$i$i = $936;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $940 = (($$01$i$i) + -256)|0;
       $941 = ($940>>>0)>(255);
       if ($941) {
        $$01$i$i = $940;
       } else {
        $$0$lcssa$i$i = $940;
        break;
       }
      }
     } else {
      $$0$lcssa$i$i = $936;
     }
     (___fwritex($pad$i,$$0$lcssa$i$i,$f)|0);
    }
    $w$30$i = $843 ? $w$1 : $840;
    $1045 = $229;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$30$i;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   case 112:  {
    $222 = ($p$0>>>0)>(8);
    $223 = $222 ? $p$0 : 8;
    $224 = $fl$1$ | 8;
    $fl$3 = $224;$p$1 = $223;$t$1 = 120;
    label = 77;
    break;
   }
   case 88: case 120:  {
    $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
    label = 77;
    break;
   }
   case 115:  {
    $324 = ($207|0)==(0|0);
    $$17 = $324 ? 287080 : $207;
    $a$1 = $$17;
    label = 99;
    break;
   }
   case 99:  {
    $319 = $207;
    $320 = $319&255;
    HEAP8[$4>>0] = $320;
    $1053 = $229;$1054 = $207;$a$2 = $4;$fl$6 = $206;$p$5 = 1;$pl$2 = 0;$prefix$2 = 287064;$z$2 = $2;
    break;
   }
   case 110:  {
    switch ($st$0|0) {
    case 1:  {
     HEAP32[$207>>2] = $cnt$1;
     $1045 = $229;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 3:  {
     $214 = $cnt$1&65535;
     HEAP16[$207>>1] = $214;
     $1045 = $229;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 4:  {
     $215 = $cnt$1&255;
     HEAP8[$207>>0] = $215;
     $1045 = $229;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 6:  {
     HEAP32[$207>>2] = $cnt$1;
     $1045 = $229;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 0:  {
     HEAP32[$207>>2] = $cnt$1;
     $1045 = $229;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 7:  {
     $216 = ($cnt$1|0)<(0);
     $217 = $216 << 31 >> 31;
     $218 = $207;
     $219 = $218;
     HEAP32[$219>>2] = $cnt$1;
     $220 = (($218) + 4)|0;
     $221 = $220;
     HEAP32[$221>>2] = $217;
     $1045 = $229;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 2:  {
     $208 = ($cnt$1|0)<(0);
     $209 = $208 << 31 >> 31;
     $210 = $207;
     $211 = $210;
     HEAP32[$211>>2] = $cnt$1;
     $212 = (($210) + 4)|0;
     $213 = $212;
     HEAP32[$213>>2] = $209;
     $1045 = $229;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    default: {
     $1045 = $229;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
    }
    }
    break;
   }
   case 67:  {
    $331 = $207;
    HEAP32[$wc>>2] = $331;
    HEAP32[$5>>2] = 0;
    $1055 = $wc;$1056 = $wc;$p$4296 = -1;
    label = 104;
    break;
   }
   case 109:  {
    $321 = (___errno_location()|0);
    $322 = HEAP32[$321>>2]|0;
    $323 = (_strerror(($322|0))|0);
    $a$1 = $323;
    label = 99;
    break;
   }
   default: {
    $1053 = $229;$1054 = $207;$a$2 = $22;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 287064;$z$2 = $2;
   }
   }
  } while(0);
  L445: do {
   if ((label|0) == 77) {
    label = 0;
    $225 = $207;
    $226 = $t$1 & 32;
    $227 = ($225|0)==(0);
    $228 = ($229|0)==(0);
    $230 = $227 & $228;
    if ($230) {
     $308 = $207;$311 = $229;$a$0 = $2;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 287064;
     label = 94;
    } else {
     $$012$i = $2;$232 = $225;$239 = $229;
     while(1) {
      $231 = $232 & 15;
      $233 = (287144 + ($231)|0);
      $234 = HEAP8[$233>>0]|0;
      $235 = $234&255;
      $236 = $235 | $226;
      $237 = $236&255;
      $238 = (($$012$i) + -1|0);
      HEAP8[$238>>0] = $237;
      $240 = (_bitshift64Lshr(($232|0),($239|0),4)|0);
      $241 = tempRet0;
      $242 = ($240|0)==(0);
      $243 = ($241|0)==(0);
      $244 = $242 & $243;
      if ($244) {
       break;
      } else {
       $$012$i = $238;$232 = $240;$239 = $241;
      }
     }
     $245 = $fl$3 & 8;
     $246 = ($245|0)==(0);
     if ($246) {
      $308 = $207;$311 = $229;$a$0 = $238;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 287064;
      label = 94;
     } else {
      $247 = $t$1 >> 4;
      $248 = (287064 + ($247)|0);
      $308 = $207;$311 = $229;$a$0 = $238;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $248;
      label = 94;
     }
    }
   }
   else if ((label|0) == 89) {
    label = 0;
    $276 = $277;
    $278 = ($279>>>0)>(0);
    $280 = ($279|0)==(0);
    $281 = ($276>>>0)>(4294967295);
    $282 = $280 & $281;
    $283 = $278 | $282;
    if ($283) {
     $$05$i = $2;$284 = $276;$285 = $279;
     while(1) {
      $286 = (___uremdi3(($284|0),($285|0),10,0)|0);
      $287 = tempRet0;
      $288 = $286 | 48;
      $289 = $288&255;
      $290 = (($$05$i) + -1|0);
      HEAP8[$290>>0] = $289;
      $291 = (___udivdi3(($284|0),($285|0),10,0)|0);
      $292 = tempRet0;
      $293 = ($285>>>0)>(9);
      $294 = ($285|0)==(9);
      $295 = ($284>>>0)>(4294967295);
      $296 = $294 & $295;
      $297 = $293 | $296;
      if ($297) {
       $$05$i = $290;$284 = $291;$285 = $292;
      } else {
       break;
      }
     }
     $$0$lcssa$i45 = $290;$$01$lcssa$off0$i = $291;
    } else {
     $$0$lcssa$i45 = $2;$$01$lcssa$off0$i = $276;
    }
    $298 = ($$01$lcssa$off0$i|0)==(0);
    if ($298) {
     $308 = $277;$311 = $279;$a$0 = $$0$lcssa$i45;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
     label = 94;
    } else {
     $$12$i = $$0$lcssa$i45;$y$03$i = $$01$lcssa$off0$i;
     while(1) {
      $299 = (($y$03$i>>>0) % 10)&-1;
      $300 = $299 | 48;
      $301 = $300&255;
      $302 = (($$12$i) + -1|0);
      HEAP8[$302>>0] = $301;
      $303 = (($y$03$i>>>0) / 10)&-1;
      $304 = ($y$03$i>>>0)<(10);
      if ($304) {
       $308 = $277;$311 = $279;$a$0 = $302;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
       label = 94;
       break;
      } else {
       $$12$i = $302;$y$03$i = $303;
      }
     }
    }
   }
   else if ((label|0) == 99) {
    label = 0;
    $325 = (_memchr($a$1,0,$p$0)|0);
    $326 = ($325|0)==(0|0);
    if ($326) {
     $327 = (($a$1) + ($p$0)|0);
     $1053 = $229;$1054 = $207;$a$2 = $a$1;$fl$6 = $206;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 287064;$z$2 = $327;
     break;
    } else {
     $328 = $325;
     $329 = $a$1;
     $330 = (($328) - ($329))|0;
     $1053 = $229;$1054 = $207;$a$2 = $a$1;$fl$6 = $206;$p$5 = $330;$pl$2 = 0;$prefix$2 = 287064;$z$2 = $325;
     break;
    }
   }
   else if ((label|0) == 104) {
    label = 0;
    $i$0168 = 0;$l$1167 = 0;$ws$0169 = $1055;
    while(1) {
     $336 = HEAP32[$ws$0169>>2]|0;
     $337 = ($336|0)==(0);
     if ($337) {
      $i$0$lcssa = $i$0168;$l$1$lcssa = $l$1167;
      break;
     }
     $338 = (_wctomb($mb,$336)|0);
     $339 = ($338|0)>(-1);
     if (!($339)) {
      $$0 = -1;
      label = 362;
      break L1;
     }
     $340 = (($p$4296) - ($i$0168))|0;
     $341 = ($338>>>0)>($340>>>0);
     $335 = (($338) + ($i$0168))|0;
     if ($341) {
      $1057 = $1055;$1058 = $1056;$i$0166 = $i$0168;
      label = 110;
      break L445;
     }
     $333 = (($ws$0169) + 4|0);
     $334 = ($335>>>0)<($p$4296>>>0);
     if ($334) {
      $i$0168 = $335;$l$1167 = $338;$ws$0169 = $333;
     } else {
      $i$0$lcssa = $335;$l$1$lcssa = $338;
      break;
     }
    }
    $342 = ($l$1$lcssa|0)<(0);
    if ($342) {
     $$0 = -1;
     label = 362;
     break L1;
    } else {
     $1057 = $1055;$1058 = $1056;$i$0166 = $i$0$lcssa;
     label = 110;
    }
   }
  } while(0);
  if ((label|0) == 94) {
   label = 0;
   $305 = ($p$2|0)>(-1);
   $306 = $fl$4 & -65537;
   $$fl$4 = $305 ? $306 : $fl$4;
   $307 = $308;
   $309 = ($307|0)==(0);
   $310 = ($311|0)==(0);
   $312 = $309 & $310;
   $313 = ($p$2|0)==(0);
   $or$cond = $312 & $313;
   if ($or$cond) {
    $1053 = $311;$1054 = $308;$a$2 = $2;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   } else {
    $314 = $a$0;
    $315 = (($3) - ($314))|0;
    $316 = $312&1;
    $317 = (($316) + ($315))|0;
    $318 = ($p$2|0)>($317|0);
    $p$2$ = $318 ? $p$2 : $317;
    $1053 = $311;$1054 = $308;$a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   }
  }
  else if ((label|0) == 110) {
   label = 0;
   $343 = $fl$1$ & 73728;
   $344 = ($343|0)==(0);
   $345 = ($i$0166|0)<($w$1|0);
   $or$cond$i56 = $344 & $345;
   if ($or$cond$i56) {
    $346 = (($w$1) - ($i$0166))|0;
    $347 = ($346>>>0)>(256);
    $348 = $347 ? 256 : $346;
    _memset(($pad$i|0),32,($348|0))|0;
    $349 = ($346>>>0)>(255);
    if ($349) {
     $$01$i57 = $346;
     while(1) {
      (___fwritex($pad$i,256,$f)|0);
      $350 = (($$01$i57) + -256)|0;
      $351 = ($350>>>0)>(255);
      if ($351) {
       $$01$i57 = $350;
      } else {
       $$0$lcssa$i59 = $350;
       break;
      }
     }
    } else {
     $$0$lcssa$i59 = $346;
    }
    (___fwritex($pad$i,$$0$lcssa$i59,$f)|0);
   }
   $352 = ($i$0166|0)==(0);
   L479: do {
    if (!($352)) {
     $i$1174 = 0;$ws$1175 = $1057;
     while(1) {
      $353 = HEAP32[$ws$1175>>2]|0;
      $354 = ($353|0)==(0);
      if ($354) {
       break L479;
      }
      $355 = (_wctomb($mb,$353)|0);
      $356 = (($355) + ($i$1174))|0;
      $357 = ($356|0)>($i$0166|0);
      if ($357) {
       break L479;
      }
      $358 = (($ws$1175) + 4|0);
      (___fwritex($mb,$355,$f)|0);
      $359 = ($356>>>0)<($i$0166>>>0);
      if ($359) {
       $i$1174 = $356;$ws$1175 = $358;
      } else {
       break;
      }
     }
    }
   } while(0);
   $360 = ($343|0)==(8192);
   $or$cond$i63 = $360 & $345;
   if ($or$cond$i63) {
    $361 = (($w$1) - ($i$0166))|0;
    $362 = ($361>>>0)>(256);
    $363 = $362 ? 256 : $361;
    _memset(($pad$i|0),32,($363|0))|0;
    $364 = ($361>>>0)>(255);
    if ($364) {
     $$01$i64 = $361;
     while(1) {
      (___fwritex($pad$i,256,$f)|0);
      $365 = (($$01$i64) + -256)|0;
      $366 = ($365>>>0)>(255);
      if ($366) {
       $$01$i64 = $365;
      } else {
       $$0$lcssa$i66 = $365;
       break;
      }
     }
    } else {
     $$0$lcssa$i66 = $361;
    }
    (___fwritex($pad$i,$$0$lcssa$i66,$f)|0);
   }
   $367 = $345 ? $w$1 : $i$0166;
   $1045 = $229;$1046 = $1058;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $367;$l10n$0 = $l10n$3;
   continue;
  }
  $942 = $z$2;
  $943 = $a$2;
  $944 = (($942) - ($943))|0;
  $945 = ($p$5|0)<($944|0);
  $$p$5 = $945 ? $944 : $p$5;
  $946 = (($pl$2) + ($$p$5))|0;
  $947 = ($w$1|0)<($946|0);
  $w$2 = $947 ? $946 : $w$1;
  $948 = $fl$6 & 73728;
  $949 = ($948|0)==(0);
  $950 = ($946|0)<($w$2|0);
  $or$cond$i73 = $949 & $950;
  if ($or$cond$i73) {
   $951 = (($w$2) - ($946))|0;
   $952 = ($951>>>0)>(256);
   $953 = $952 ? 256 : $951;
   _memset(($pad$i|0),32,($953|0))|0;
   $954 = ($951>>>0)>(255);
   if ($954) {
    $$01$i74 = $951;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $955 = (($$01$i74) + -256)|0;
     $956 = ($955>>>0)>(255);
     if ($956) {
      $$01$i74 = $955;
     } else {
      $$0$lcssa$i76 = $955;
      break;
     }
    }
   } else {
    $$0$lcssa$i76 = $951;
   }
   (___fwritex($pad$i,$$0$lcssa$i76,$f)|0);
  }
  (___fwritex($prefix$2,$pl$2,$f)|0);
  $957 = ($948|0)==(65536);
  $or$cond$i49 = $957 & $950;
  if ($or$cond$i49) {
   $958 = (($w$2) - ($946))|0;
   $959 = ($958>>>0)>(256);
   $960 = $959 ? 256 : $958;
   _memset(($pad$i|0),48,($960|0))|0;
   $961 = ($958>>>0)>(255);
   if ($961) {
    $$01$i50 = $958;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $962 = (($$01$i50) + -256)|0;
     $963 = ($962>>>0)>(255);
     if ($963) {
      $$01$i50 = $962;
     } else {
      $$0$lcssa$i52 = $962;
      break;
     }
    }
   } else {
    $$0$lcssa$i52 = $958;
   }
   (___fwritex($pad$i,$$0$lcssa$i52,$f)|0);
  }
  $964 = ($944|0)<($$p$5|0);
  if ($964) {
   $965 = (($$p$5) - ($944))|0;
   $966 = ($965>>>0)>(256);
   $967 = $966 ? 256 : $965;
   _memset(($pad$i|0),48,($967|0))|0;
   $968 = ($965>>>0)>(255);
   if ($968) {
    $$01$i35 = $965;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $969 = (($$01$i35) + -256)|0;
     $970 = ($969>>>0)>(255);
     if ($970) {
      $$01$i35 = $969;
     } else {
      $$0$lcssa$i37 = $969;
      break;
     }
    }
   } else {
    $$0$lcssa$i37 = $965;
   }
   (___fwritex($pad$i,$$0$lcssa$i37,$f)|0);
  }
  (___fwritex($a$2,$944,$f)|0);
  $971 = ($948|0)==(8192);
  $or$cond$i = $971 & $950;
  if (!($or$cond$i)) {
   $1045 = $1053;$1046 = $1054;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$2;$l10n$0 = $l10n$3;
   continue;
  }
  $972 = (($w$2) - ($946))|0;
  $973 = ($972>>>0)>(256);
  $974 = $973 ? 256 : $972;
  _memset(($pad$i|0),32,($974|0))|0;
  $975 = ($972>>>0)>(255);
  if ($975) {
   $$01$i = $972;
   while(1) {
    (___fwritex($pad$i,256,$f)|0);
    $976 = (($$01$i) + -256)|0;
    $977 = ($976>>>0)>(255);
    if ($977) {
     $$01$i = $976;
    } else {
     $$0$lcssa$i = $976;
     break;
    }
   }
  } else {
   $$0$lcssa$i = $972;
  }
  (___fwritex($pad$i,$$0$lcssa$i,$f)|0);
  $1045 = $1053;$1046 = $1054;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$2;$l10n$0 = $l10n$3;
 }
 if ((label|0) == 344) {
  $978 = ($f|0)==(0|0);
  if (!($978)) {
   $$0 = $cnt$1;
   STACKTOP = sp;return ($$0|0);
  }
  $979 = ($l10n$0|0)==(0);
  if ($979) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $i$289 = 1;
  }
  while(1) {
   $980 = (($nl_type) + ($i$289<<2)|0);
   $981 = HEAP32[$980>>2]|0;
   $982 = ($981|0)==(0);
   if ($982) {
    $i$388 = $i$289;
    break;
   }
   $983 = (($nl_arg) + ($i$289<<3)|0);
   $984 = ($981>>>0)>(20);
   L531: do {
    if (!($984)) {
     do {
      switch ($981|0) {
      case 11:  {
       $arglist_current41 = HEAP32[$ap>>2]|0;
       $993 = HEAP32[$arglist_current41>>2]|0;
       $arglist_next42 = (($arglist_current41) + 4|0);
       HEAP32[$ap>>2] = $arglist_next42;
       $994 = $983;
       $995 = $994;
       HEAP32[$995>>2] = $993;
       $996 = (($994) + 4)|0;
       $997 = $996;
       HEAP32[$997>>2] = 0;
       break L531;
       break;
      }
      case 12:  {
       $arglist_current44 = HEAP32[$ap>>2]|0;
       $998 = $arglist_current44;
       $999 = $998;
       $1000 = HEAP32[$999>>2]|0;
       $1001 = (($998) + 4)|0;
       $1002 = $1001;
       $1003 = HEAP32[$1002>>2]|0;
       $arglist_next45 = (($arglist_current44) + 8|0);
       HEAP32[$ap>>2] = $arglist_next45;
       $1004 = $983;
       $1005 = $1004;
       HEAP32[$1005>>2] = $1000;
       $1006 = (($1004) + 4)|0;
       $1007 = $1006;
       HEAP32[$1007>>2] = $1003;
       break L531;
       break;
      }
      case 13:  {
       $arglist_current47 = HEAP32[$ap>>2]|0;
       $1008 = HEAP32[$arglist_current47>>2]|0;
       $arglist_next48 = (($arglist_current47) + 4|0);
       HEAP32[$ap>>2] = $arglist_next48;
       $1009 = $1008&65535;
       $1010 = $1009 << 16 >> 16;
       $1011 = ($1010|0)<(0);
       $1012 = $1011 << 31 >> 31;
       $1013 = $983;
       $1014 = $1013;
       HEAP32[$1014>>2] = $1010;
       $1015 = (($1013) + 4)|0;
       $1016 = $1015;
       HEAP32[$1016>>2] = $1012;
       break L531;
       break;
      }
      case 14:  {
       $arglist_current50 = HEAP32[$ap>>2]|0;
       $1017 = HEAP32[$arglist_current50>>2]|0;
       $arglist_next51 = (($arglist_current50) + 4|0);
       HEAP32[$ap>>2] = $arglist_next51;
       $$mask1$i = $1017 & 65535;
       $1018 = $983;
       $1019 = $1018;
       HEAP32[$1019>>2] = $$mask1$i;
       $1020 = (($1018) + 4)|0;
       $1021 = $1020;
       HEAP32[$1021>>2] = 0;
       break L531;
       break;
      }
      case 15:  {
       $arglist_current53 = HEAP32[$ap>>2]|0;
       $1022 = HEAP32[$arglist_current53>>2]|0;
       $arglist_next54 = (($arglist_current53) + 4|0);
       HEAP32[$ap>>2] = $arglist_next54;
       $1023 = $1022&255;
       $1024 = $1023 << 24 >> 24;
       $1025 = ($1024|0)<(0);
       $1026 = $1025 << 31 >> 31;
       $1027 = $983;
       $1028 = $1027;
       HEAP32[$1028>>2] = $1024;
       $1029 = (($1027) + 4)|0;
       $1030 = $1029;
       HEAP32[$1030>>2] = $1026;
       break L531;
       break;
      }
      case 16:  {
       $arglist_current56 = HEAP32[$ap>>2]|0;
       $1031 = HEAP32[$arglist_current56>>2]|0;
       $arglist_next57 = (($arglist_current56) + 4|0);
       HEAP32[$ap>>2] = $arglist_next57;
       $$mask$i = $1031 & 255;
       $1032 = $983;
       $1033 = $1032;
       HEAP32[$1033>>2] = $$mask$i;
       $1034 = (($1032) + 4)|0;
       $1035 = $1034;
       HEAP32[$1035>>2] = 0;
       break L531;
       break;
      }
      case 17:  {
       $arglist_current59 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current59>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current59+4>>2];$1036 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next60 = (($arglist_current59) + 8|0);
       HEAP32[$ap>>2] = $arglist_next60;
       HEAPF64[$983>>3] = $1036;
       break L531;
       break;
      }
      case 18:  {
       $arglist_current62 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current62>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current62+4>>2];$1037 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next63 = (($arglist_current62) + 8|0);
       HEAP32[$ap>>2] = $arglist_next63;
       HEAPF64[$983>>3] = $1037;
       break L531;
       break;
      }
      case 9:  {
       $arglist_current35 = HEAP32[$ap>>2]|0;
       $985 = HEAP32[$arglist_current35>>2]|0;
       $arglist_next36 = (($arglist_current35) + 4|0);
       HEAP32[$ap>>2] = $arglist_next36;
       HEAP32[$983>>2] = $985;
       break L531;
       break;
      }
      case 10:  {
       $arglist_current38 = HEAP32[$ap>>2]|0;
       $986 = HEAP32[$arglist_current38>>2]|0;
       $arglist_next39 = (($arglist_current38) + 4|0);
       HEAP32[$ap>>2] = $arglist_next39;
       $987 = ($986|0)<(0);
       $988 = $987 << 31 >> 31;
       $989 = $983;
       $990 = $989;
       HEAP32[$990>>2] = $986;
       $991 = (($989) + 4)|0;
       $992 = $991;
       HEAP32[$992>>2] = $988;
       break L531;
       break;
      }
      default: {
       break L531;
      }
      }
     } while(0);
    }
   } while(0);
   $1038 = (($i$289) + 1)|0;
   $1039 = ($1038|0)<(10);
   if ($1039) {
    $i$289 = $1038;
   } else {
    $$0 = 1;
    label = 362;
    break;
   }
  }
  if ((label|0) == 362) {
   STACKTOP = sp;return ($$0|0);
  }
  while(1) {
   $1042 = (($nl_type) + ($i$388<<2)|0);
   $1043 = HEAP32[$1042>>2]|0;
   $1044 = ($1043|0)==(0);
   $1041 = (($i$388) + 1)|0;
   if (!($1044)) {
    $$0 = -1;
    label = 362;
    break;
   }
   $1040 = ($1041|0)<(10);
   if ($1040) {
    $i$388 = $1041;
   } else {
    $$0 = 1;
    label = 362;
    break;
   }
  }
  if ((label|0) == 362) {
   STACKTOP = sp;return ($$0|0);
  }
 }
 else if ((label|0) == 362) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $f = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $b = sp + 112|0;
 $f = sp;
 dest=$f+0|0; src=287168+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $0 = (($n) + -1)|0;
 $1 = ($0>>>0)>(2147483646);
 if ($1) {
  $2 = ($n|0)==(0);
  if ($2) {
   $$01 = $b;$$02 = 1;
  } else {
   $3 = (___errno_location()|0);
   HEAP32[$3>>2] = 75;
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  $$01 = $s;$$02 = $n;
 }
 $4 = $$01;
 $5 = (-2 - ($4))|0;
 $6 = ($$02>>>0)>($5>>>0);
 $$$02 = $6 ? $5 : $$02;
 $7 = (($f) + 48|0);
 HEAP32[$7>>2] = $$$02;
 $8 = (($f) + 20|0);
 HEAP32[$8>>2] = $$01;
 $9 = (($f) + 44|0);
 HEAP32[$9>>2] = $$01;
 $10 = (($$01) + ($$$02)|0);
 $11 = (($f) + 16|0);
 HEAP32[$11>>2] = $10;
 $12 = (($f) + 28|0);
 HEAP32[$12>>2] = $10;
 $13 = (_MUSL_vfprintf($f,$fmt,$ap)|0);
 $14 = ($$$02|0)==(0);
 if ($14) {
  $$0 = $13;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = HEAP32[$8>>2]|0;
 $16 = HEAP32[$11>>2]|0;
 $17 = ($15|0)==($16|0);
 $18 = $17 << 31 >> 31;
 $19 = (($15) + ($18)|0);
 HEAP8[$19>>0] = 0;
 $$0 = $13;
 STACKTOP = sp;return ($$0|0);
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($f) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = ($6>>>0)>($l>>>0);
 $l$ = $7 ? $l : $6;
 _memcpy(($3|0),($s|0),($l$|0))|0;
 $8 = HEAP32[$2>>2]|0;
 $9 = (($8) + ($l$)|0);
 HEAP32[$2>>2] = $9;
 STACKTOP = sp;return ($l|0);
}
function _vsprintf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_vsnprintf($s,2147483647,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _atof($s) {
 $s = $s|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_strtod($s,0));
 STACKTOP = sp;return (+$0);
}
function _atoi($s) {
 $s = $s|0;
 var $$0 = 0, $$1$ph = 0, $$12 = 0, $$neg1 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n$0$lcssa = 0, $n$03 = 0, $neg$0 = 0, $neg$1$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $s;
 while(1) {
  $0 = HEAP8[$$0>>0]|0;
  $1 = $0 << 24 >> 24;
  $2 = (_isspace($1)|0);
  $3 = ($2|0)==(0);
  $4 = (($$0) + 1|0);
  if ($3) {
   break;
  } else {
   $$0 = $4;
  }
 }
 $5 = HEAP8[$$0>>0]|0;
 $6 = $5 << 24 >> 24;
 if ((($6|0) == 43)) {
  $neg$0 = 0;
  label = 5;
 } else if ((($6|0) == 45)) {
  $neg$0 = 1;
  label = 5;
 } else {
  $$1$ph = $$0;$8 = $5;$neg$1$ph = 0;
 }
 if ((label|0) == 5) {
  $$pre = HEAP8[$4>>0]|0;
  $$1$ph = $4;$8 = $$pre;$neg$1$ph = $neg$0;
 }
 $7 = $8 << 24 >> 24;
 $9 = (_isdigit($7)|0);
 $10 = ($9|0)==(0);
 if ($10) {
  $n$0$lcssa = 0;
  $20 = ($neg$1$ph|0)!=(0);
  $21 = (0 - ($n$0$lcssa))|0;
  $22 = $20 ? $n$0$lcssa : $21;
  STACKTOP = sp;return ($22|0);
 } else {
  $$12 = $$1$ph;$n$03 = 0;
 }
 while(1) {
  $11 = ($n$03*10)|0;
  $12 = (($$12) + 1|0);
  $13 = HEAP8[$$12>>0]|0;
  $14 = $13 << 24 >> 24;
  $$neg1 = (($11) + 48)|0;
  $15 = (($$neg1) - ($14))|0;
  $16 = HEAP8[$12>>0]|0;
  $17 = $16 << 24 >> 24;
  $18 = (_isdigit($17)|0);
  $19 = ($18|0)==(0);
  if ($19) {
   $n$0$lcssa = $15;
   break;
  } else {
   $$12 = $12;$n$03 = $15;
  }
 }
 $20 = ($neg$1$ph|0)!=(0);
 $21 = (0 - ($n$0$lcssa))|0;
 $22 = $20 ? $n$0$lcssa : $21;
 STACKTOP = sp;return ($22|0);
}
function _atol($s) {
 $s = $s|0;
 var $$0 = 0, $$1$ph = 0, $$12 = 0, $$neg1 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n$0$lcssa = 0, $n$03 = 0, $neg$0 = 0, $neg$1$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $s;
 while(1) {
  $0 = HEAP8[$$0>>0]|0;
  $1 = $0 << 24 >> 24;
  $2 = (_isspace($1)|0);
  $3 = ($2|0)==(0);
  $4 = (($$0) + 1|0);
  if ($3) {
   break;
  } else {
   $$0 = $4;
  }
 }
 $5 = HEAP8[$$0>>0]|0;
 $6 = $5 << 24 >> 24;
 if ((($6|0) == 43)) {
  $neg$0 = 0;
  label = 5;
 } else if ((($6|0) == 45)) {
  $neg$0 = 1;
  label = 5;
 } else {
  $$1$ph = $$0;$8 = $5;$neg$1$ph = 0;
 }
 if ((label|0) == 5) {
  $$pre = HEAP8[$4>>0]|0;
  $$1$ph = $4;$8 = $$pre;$neg$1$ph = $neg$0;
 }
 $7 = $8 << 24 >> 24;
 $9 = (_isdigit($7)|0);
 $10 = ($9|0)==(0);
 if ($10) {
  $n$0$lcssa = 0;
  $20 = ($neg$1$ph|0)!=(0);
  $21 = (0 - ($n$0$lcssa))|0;
  $22 = $20 ? $n$0$lcssa : $21;
  STACKTOP = sp;return ($22|0);
 } else {
  $$12 = $$1$ph;$n$03 = 0;
 }
 while(1) {
  $11 = ($n$03*10)|0;
  $12 = (($$12) + 1|0);
  $13 = HEAP8[$$12>>0]|0;
  $14 = $13 << 24 >> 24;
  $$neg1 = (($11) + 48)|0;
  $15 = (($$neg1) - ($14))|0;
  $16 = HEAP8[$12>>0]|0;
  $17 = $16 << 24 >> 24;
  $18 = (_isdigit($17)|0);
  $19 = ($18|0)==(0);
  if ($19) {
   $n$0$lcssa = $15;
   break;
  } else {
   $$12 = $12;$n$03 = $15;
  }
 }
 $20 = ($neg$1$ph|0)!=(0);
 $21 = (0 - ($n$0$lcssa))|0;
 $22 = $20 ? $n$0$lcssa : $21;
 STACKTOP = sp;return ($22|0);
}
function _strtof($s,$p) {
 $s = $s|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f$i = 0, dest = 0;
 var label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $f$i = sp;
 dest=$f$i+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = (($f$i) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = (($f$i) + 8|0);
 HEAP32[$1>>2] = (-1);
 $2 = (($f$i) + 44|0);
 HEAP32[$2>>2] = $s;
 $3 = (($f$i) + 76|0);
 HEAP32[$3>>2] = -1;
 ___shlim($f$i,0);
 $4 = (+___floatscan($f$i,0,1));
 $5 = (($f$i) + 108|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = HEAP32[$1>>2]|0;
 $9 = $7;
 $10 = $8;
 $11 = (($9) - ($10))|0;
 $12 = (($11) + ($6))|0;
 $13 = ($p|0)==(0|0);
 if ($13) {
  $17 = $4;
  STACKTOP = sp;return (+$17);
 }
 $14 = ($12|0)==(0);
 if ($14) {
  $16 = $s;
 } else {
  $15 = (($s) + ($12)|0);
  $16 = $15;
 }
 HEAP32[$p>>2] = $16;
 $17 = $4;
 STACKTOP = sp;return (+$17);
}
function _strtod($s,$p) {
 $s = $s|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f$i = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $f$i = sp;
 dest=$f$i+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = (($f$i) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = (($f$i) + 8|0);
 HEAP32[$1>>2] = (-1);
 $2 = (($f$i) + 44|0);
 HEAP32[$2>>2] = $s;
 $3 = (($f$i) + 76|0);
 HEAP32[$3>>2] = -1;
 ___shlim($f$i,0);
 $4 = (+___floatscan($f$i,1,1));
 $5 = (($f$i) + 108|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = HEAP32[$1>>2]|0;
 $9 = $7;
 $10 = $8;
 $11 = (($9) - ($10))|0;
 $12 = (($11) + ($6))|0;
 $13 = ($p|0)==(0|0);
 if ($13) {
  STACKTOP = sp;return (+$4);
 }
 $14 = ($12|0)==(0);
 if ($14) {
  $16 = $s;
 } else {
  $15 = (($s) + ($12)|0);
  $16 = $15;
 }
 HEAP32[$p>>2] = $16;
 STACKTOP = sp;return (+$4);
}
function _strtold($s,$p) {
 $s = $s|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f$i = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $f$i = sp;
 dest=$f$i+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = (($f$i) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = (($f$i) + 8|0);
 HEAP32[$1>>2] = (-1);
 $2 = (($f$i) + 44|0);
 HEAP32[$2>>2] = $s;
 $3 = (($f$i) + 76|0);
 HEAP32[$3>>2] = -1;
 ___shlim($f$i,0);
 $4 = (+___floatscan($f$i,2,1));
 $5 = (($f$i) + 108|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = HEAP32[$1>>2]|0;
 $9 = $7;
 $10 = $8;
 $11 = (($9) - ($10))|0;
 $12 = (($11) + ($6))|0;
 $13 = ($p|0)==(0|0);
 if ($13) {
  STACKTOP = sp;return (+$4);
 }
 $14 = ($12|0)==(0);
 if ($14) {
  $16 = $s;
 } else {
  $15 = (($s) + ($12)|0);
  $16 = $15;
 }
 HEAP32[$p>>2] = $16;
 STACKTOP = sp;return (+$4);
}
function _strtof_l($s,$p,$loc) {
 $s = $s|0;
 $p = $p|0;
 $loc = $loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f$i$i = 0, dest = 0;
 var label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $f$i$i = sp;
 dest=$f$i$i+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = (($f$i$i) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = (($f$i$i) + 8|0);
 HEAP32[$1>>2] = (-1);
 $2 = (($f$i$i) + 44|0);
 HEAP32[$2>>2] = $s;
 $3 = (($f$i$i) + 76|0);
 HEAP32[$3>>2] = -1;
 ___shlim($f$i$i,0);
 $4 = (+___floatscan($f$i$i,0,1));
 $5 = (($f$i$i) + 108|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = HEAP32[$1>>2]|0;
 $9 = $7;
 $10 = $8;
 $11 = (($9) - ($10))|0;
 $12 = (($11) + ($6))|0;
 $13 = ($p|0)==(0|0);
 if ($13) {
  $17 = $4;
  STACKTOP = sp;return (+$17);
 }
 $14 = ($12|0)==(0);
 if ($14) {
  $16 = $s;
 } else {
  $15 = (($s) + ($12)|0);
  $16 = $15;
 }
 HEAP32[$p>>2] = $16;
 $17 = $4;
 STACKTOP = sp;return (+$17);
}
function _strtod_l($s,$p,$loc) {
 $s = $s|0;
 $p = $p|0;
 $loc = $loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f$i$i = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $f$i$i = sp;
 dest=$f$i$i+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = (($f$i$i) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = (($f$i$i) + 8|0);
 HEAP32[$1>>2] = (-1);
 $2 = (($f$i$i) + 44|0);
 HEAP32[$2>>2] = $s;
 $3 = (($f$i$i) + 76|0);
 HEAP32[$3>>2] = -1;
 ___shlim($f$i$i,0);
 $4 = (+___floatscan($f$i$i,1,1));
 $5 = (($f$i$i) + 108|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = HEAP32[$1>>2]|0;
 $9 = $7;
 $10 = $8;
 $11 = (($9) - ($10))|0;
 $12 = (($11) + ($6))|0;
 $13 = ($p|0)==(0|0);
 if ($13) {
  STACKTOP = sp;return (+$4);
 }
 $14 = ($12|0)==(0);
 if ($14) {
  $16 = $s;
 } else {
  $15 = (($s) + ($12)|0);
  $16 = $15;
 }
 HEAP32[$p>>2] = $16;
 STACKTOP = sp;return (+$4);
}
function _strtold_l($s,$p,$loc) {
 $s = $s|0;
 $p = $p|0;
 $loc = $loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f$i$i = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $f$i$i = sp;
 dest=$f$i$i+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = (($f$i$i) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = (($f$i$i) + 8|0);
 HEAP32[$1>>2] = (-1);
 $2 = (($f$i$i) + 44|0);
 HEAP32[$2>>2] = $s;
 $3 = (($f$i$i) + 76|0);
 HEAP32[$3>>2] = -1;
 ___shlim($f$i$i,0);
 $4 = (+___floatscan($f$i$i,2,1));
 $5 = (($f$i$i) + 108|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = HEAP32[$1>>2]|0;
 $9 = $7;
 $10 = $8;
 $11 = (($9) - ($10))|0;
 $12 = (($11) + ($6))|0;
 $13 = ($p|0)==(0|0);
 if ($13) {
  STACKTOP = sp;return (+$4);
 }
 $14 = ($12|0)==(0);
 if ($14) {
  $16 = $s;
 } else {
  $15 = (($s) + ($12)|0);
  $16 = $15;
 }
 HEAP32[$p>>2] = $16;
 STACKTOP = sp;return (+$4);
}
function _strtoull($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $f$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $f$i = sp;
 HEAP32[$f$i>>2] = 0;
 $0 = (($f$i) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = (($f$i) + 44|0);
 HEAP32[$1>>2] = $s;
 $2 = ($s|0)<(0|0);
 if ($2) {
  $3 = (($f$i) + 8|0);
  HEAP32[$3>>2] = (-1);
 } else {
  $4 = (($s) + 2147483647|0);
  $5 = (($f$i) + 8|0);
  HEAP32[$5>>2] = $4;
 }
 $6 = (($f$i) + 76|0);
 HEAP32[$6>>2] = -1;
 ___shlim($f$i,0);
 $7 = (___intscan($f$i,$base,1,-1,-1)|0);
 $8 = tempRet0;
 $9 = ($p|0)==(0|0);
 if ($9) {
  tempRet0 = $8;
  STACKTOP = sp;return ($7|0);
 }
 $10 = (($f$i) + 108|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[$0>>2]|0;
 $13 = (($f$i) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $12;
 $16 = $14;
 $17 = (($15) + ($11))|0;
 $18 = (($17) - ($16))|0;
 $19 = (($s) + ($18)|0);
 HEAP32[$p>>2] = $19;
 tempRet0 = $8;
 STACKTOP = sp;return ($7|0);
}
function _strtoll($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $f$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $f$i = sp;
 HEAP32[$f$i>>2] = 0;
 $0 = (($f$i) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = (($f$i) + 44|0);
 HEAP32[$1>>2] = $s;
 $2 = ($s|0)<(0|0);
 if ($2) {
  $3 = (($f$i) + 8|0);
  HEAP32[$3>>2] = (-1);
 } else {
  $4 = (($s) + 2147483647|0);
  $5 = (($f$i) + 8|0);
  HEAP32[$5>>2] = $4;
 }
 $6 = (($f$i) + 76|0);
 HEAP32[$6>>2] = -1;
 ___shlim($f$i,0);
 $7 = (___intscan($f$i,$base,1,0,-2147483648)|0);
 $8 = tempRet0;
 $9 = ($p|0)==(0|0);
 if ($9) {
  tempRet0 = $8;
  STACKTOP = sp;return ($7|0);
 }
 $10 = (($f$i) + 108|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[$0>>2]|0;
 $13 = (($f$i) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $12;
 $16 = $14;
 $17 = (($15) + ($11))|0;
 $18 = (($17) - ($16))|0;
 $19 = (($s) + ($18)|0);
 HEAP32[$p>>2] = $19;
 tempRet0 = $8;
 STACKTOP = sp;return ($7|0);
}
function _strtoul($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $f$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $f$i = sp;
 HEAP32[$f$i>>2] = 0;
 $0 = (($f$i) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = (($f$i) + 44|0);
 HEAP32[$1>>2] = $s;
 $2 = ($s|0)<(0|0);
 if ($2) {
  $3 = (($f$i) + 8|0);
  HEAP32[$3>>2] = (-1);
 } else {
  $4 = (($s) + 2147483647|0);
  $5 = (($f$i) + 8|0);
  HEAP32[$5>>2] = $4;
 }
 $6 = (($f$i) + 76|0);
 HEAP32[$6>>2] = -1;
 ___shlim($f$i,0);
 $7 = (___intscan($f$i,$base,1,-1,0)|0);
 $8 = tempRet0;
 $9 = ($p|0)==(0|0);
 if ($9) {
  STACKTOP = sp;return ($7|0);
 }
 $10 = (($f$i) + 108|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[$0>>2]|0;
 $13 = (($f$i) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $12;
 $16 = $14;
 $17 = (($15) + ($11))|0;
 $18 = (($17) - ($16))|0;
 $19 = (($s) + ($18)|0);
 HEAP32[$p>>2] = $19;
 STACKTOP = sp;return ($7|0);
}
function _strtol($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $f$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $f$i = sp;
 HEAP32[$f$i>>2] = 0;
 $0 = (($f$i) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = (($f$i) + 44|0);
 HEAP32[$1>>2] = $s;
 $2 = ($s|0)<(0|0);
 if ($2) {
  $3 = (($f$i) + 8|0);
  HEAP32[$3>>2] = (-1);
 } else {
  $4 = (($s) + 2147483647|0);
  $5 = (($f$i) + 8|0);
  HEAP32[$5>>2] = $4;
 }
 $6 = (($f$i) + 76|0);
 HEAP32[$6>>2] = -1;
 ___shlim($f$i,0);
 $7 = (___intscan($f$i,$base,1,-2147483648,0)|0);
 $8 = tempRet0;
 $9 = ($p|0)==(0|0);
 if ($9) {
  STACKTOP = sp;return ($7|0);
 }
 $10 = (($f$i) + 108|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[$0>>2]|0;
 $13 = (($f$i) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $12;
 $16 = $14;
 $17 = (($15) + ($11))|0;
 $18 = (($17) - ($16))|0;
 $19 = (($s) + ($18)|0);
 HEAP32[$p>>2] = $19;
 STACKTOP = sp;return ($7|0);
}
function _strtoimax($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $f$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $f$i$i = sp;
 HEAP32[$f$i$i>>2] = 0;
 $0 = (($f$i$i) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = (($f$i$i) + 44|0);
 HEAP32[$1>>2] = $s;
 $2 = ($s|0)<(0|0);
 if ($2) {
  $3 = (($f$i$i) + 8|0);
  HEAP32[$3>>2] = (-1);
 } else {
  $4 = (($s) + 2147483647|0);
  $5 = (($f$i$i) + 8|0);
  HEAP32[$5>>2] = $4;
 }
 $6 = (($f$i$i) + 76|0);
 HEAP32[$6>>2] = -1;
 ___shlim($f$i$i,0);
 $7 = (___intscan($f$i$i,$base,1,0,-2147483648)|0);
 $8 = tempRet0;
 $9 = ($p|0)==(0|0);
 if ($9) {
  tempRet0 = $8;
  STACKTOP = sp;return ($7|0);
 }
 $10 = (($f$i$i) + 108|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[$0>>2]|0;
 $13 = (($f$i$i) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $12;
 $16 = $14;
 $17 = (($15) + ($11))|0;
 $18 = (($17) - ($16))|0;
 $19 = (($s) + ($18)|0);
 HEAP32[$p>>2] = $19;
 tempRet0 = $8;
 STACKTOP = sp;return ($7|0);
}
function _strtoumax($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $f$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $f$i$i = sp;
 HEAP32[$f$i$i>>2] = 0;
 $0 = (($f$i$i) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = (($f$i$i) + 44|0);
 HEAP32[$1>>2] = $s;
 $2 = ($s|0)<(0|0);
 if ($2) {
  $3 = (($f$i$i) + 8|0);
  HEAP32[$3>>2] = (-1);
 } else {
  $4 = (($s) + 2147483647|0);
  $5 = (($f$i$i) + 8|0);
  HEAP32[$5>>2] = $4;
 }
 $6 = (($f$i$i) + 76|0);
 HEAP32[$6>>2] = -1;
 ___shlim($f$i$i,0);
 $7 = (___intscan($f$i$i,$base,1,-1,-1)|0);
 $8 = tempRet0;
 $9 = ($p|0)==(0|0);
 if ($9) {
  tempRet0 = $8;
  STACKTOP = sp;return ($7|0);
 }
 $10 = (($f$i$i) + 108|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[$0>>2]|0;
 $13 = (($f$i$i) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $12;
 $16 = $14;
 $17 = (($15) + ($11))|0;
 $18 = (($17) - ($16))|0;
 $19 = (($s) + ($18)|0);
 HEAP32[$p>>2] = $19;
 tempRet0 = $8;
 STACKTOP = sp;return ($7|0);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa34 = 0, $$013 = 0, $$1$lcssa = 0, $$17 = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond12 = 0, $s$0$lcssa = 0, $s$0$lcssa33 = 0, $s$014 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$08 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 $4 = ($n|0)==(0);
 $or$cond12 = $3 | $4;
 L1: do {
  if ($or$cond12) {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 5;
  } else {
   $5 = $c&255;
   $$013 = $n;$s$014 = $src;
   while(1) {
    $6 = HEAP8[$s$014>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$0$lcssa34 = $$013;$s$0$lcssa33 = $s$014;
     label = 6;
     break L1;
    }
    $8 = (($s$014) + 1|0);
    $9 = (($$013) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)==(0);
    $13 = ($9|0)==(0);
    $or$cond = $12 | $13;
    if ($or$cond) {
     $$0$lcssa = $9;$$lcssa = $13;$s$0$lcssa = $8;
     label = 5;
     break;
    } else {
     $$013 = $9;$s$014 = $8;
    }
   }
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$3 = 0;$s$2 = $s$0$lcssa;
  } else {
   $$0$lcssa34 = $$0$lcssa;$s$0$lcssa33 = $s$0$lcssa;
   label = 6;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $14 = HEAP8[$s$0$lcssa33>>0]|0;
   $15 = $c&255;
   $16 = ($14<<24>>24)==($15<<24>>24);
   if ($16) {
    $$3 = $$0$lcssa34;$s$2 = $s$0$lcssa33;
   } else {
    $17 = Math_imul($0, 16843009)|0;
    $18 = ($$0$lcssa34>>>0)>(3);
    L11: do {
     if ($18) {
      $$17 = $$0$lcssa34;$w$08 = $s$0$lcssa33;
      while(1) {
       $19 = HEAP32[$w$08>>2]|0;
       $20 = $19 ^ $17;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$1$lcssa = $$17;$w$0$lcssa = $w$08;
        break L11;
       }
       $26 = (($w$08) + 4|0);
       $27 = (($$17) + -4)|0;
       $28 = ($27>>>0)>(3);
       if ($28) {
        $$17 = $27;$w$08 = $26;
       } else {
        $$1$lcssa = $27;$w$0$lcssa = $26;
        break;
       }
      }
     } else {
      $$1$lcssa = $$0$lcssa34;$w$0$lcssa = $s$0$lcssa33;
     }
    } while(0);
    $29 = ($$1$lcssa|0)==(0);
    if ($29) {
     $$3 = 0;$s$2 = $w$0$lcssa;
    } else {
     $$24 = $$1$lcssa;$s$15 = $w$0$lcssa;
     while(1) {
      $30 = HEAP8[$s$15>>0]|0;
      $31 = ($30<<24>>24)==($15<<24>>24);
      if ($31) {
       $$3 = $$24;$s$2 = $s$15;
       break L8;
      }
      $32 = (($s$15) + 1|0);
      $33 = (($$24) + -1)|0;
      $34 = ($33|0)==(0);
      if ($34) {
       $$3 = 0;$s$2 = $32;
       break;
      } else {
       $$24 = $33;$s$15 = $32;
      }
     }
    }
   }
  }
 } while(0);
 $35 = ($$3|0)!=(0);
 $36 = $35 ? $s$2 : 0;
 STACKTOP = sp;return ($36|0);
}
function _memcmp($vl,$vr,$n) {
 $vl = $vl|0;
 $vr = $vr|0;
 $n = $n|0;
 var $$03 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$04 = 0, $r$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 L1: do {
  if ($0) {
   $11 = 0;
  } else {
   $$03 = $n;$l$04 = $vl;$r$05 = $vr;
   while(1) {
    $1 = HEAP8[$l$04>>0]|0;
    $2 = HEAP8[$r$05>>0]|0;
    $3 = ($1<<24>>24)==($2<<24>>24);
    if (!($3)) {
     break;
    }
    $4 = (($$03) + -1)|0;
    $5 = (($l$04) + 1|0);
    $6 = (($r$05) + 1|0);
    $7 = ($4|0)==(0);
    if ($7) {
     $11 = 0;
     break L1;
    } else {
     $$03 = $4;$l$04 = $5;$r$05 = $6;
    }
   }
   $8 = $1&255;
   $9 = $2&255;
   $10 = (($8) - ($9))|0;
   $11 = $10;
  }
 } while(0);
 STACKTOP = sp;return ($11|0);
}
function _strcasecmp($_l,$_r) {
 $_l = $_l|0;
 $_r = $_r|0;
 var $$pre$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$03 = 0, $r$0$lcssa = 0, $r$04 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$_l>>0]|0;
 $1 = ($0<<24>>24)==(0);
 L1: do {
  if ($1) {
   $19 = 0;$r$0$lcssa = $_r;
  } else {
   $2 = $0&255;
   $6 = $0;$7 = $2;$l$03 = $_l;$r$04 = $_r;
   while(1) {
    $3 = HEAP8[$r$04>>0]|0;
    $4 = ($3<<24>>24)==(0);
    if ($4) {
     $19 = $6;$r$0$lcssa = $r$04;
     break L1;
    }
    $5 = ($6<<24>>24)==($3<<24>>24);
    if (!($5)) {
     $8 = (_tolower($7)|0);
     $9 = HEAP8[$r$04>>0]|0;
     $10 = $9&255;
     $11 = (_tolower($10)|0);
     $12 = ($8|0)==($11|0);
     if (!($12)) {
      break;
     }
    }
    $13 = (($l$03) + 1|0);
    $14 = (($r$04) + 1|0);
    $15 = HEAP8[$13>>0]|0;
    $16 = $15&255;
    $17 = ($15<<24>>24)==(0);
    if ($17) {
     $19 = 0;$r$0$lcssa = $14;
     break L1;
    } else {
     $6 = $15;$7 = $16;$l$03 = $13;$r$04 = $14;
    }
   }
   $$pre$pre = HEAP8[$l$03>>0]|0;
   $19 = $$pre$pre;$r$0$lcssa = $r$04;
  }
 } while(0);
 $18 = $19&255;
 $20 = (_tolower($18)|0);
 $21 = HEAP8[$r$0$lcssa>>0]|0;
 $22 = $21&255;
 $23 = (_tolower($22)|0);
 $24 = (($20) - ($23))|0;
 STACKTOP = sp;return ($24|0);
}
function _strcmp($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $$014 = 0, $$05 = 0, $$lcssa = 0, $$lcssa2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$l>>0]|0;
 $1 = HEAP8[$r>>0]|0;
 $2 = ($0<<24>>24)!=($1<<24>>24);
 $3 = ($0<<24>>24)==(0);
 $or$cond3 = $2 | $3;
 if ($or$cond3) {
  $$lcssa = $0;$$lcssa2 = $1;
 } else {
  $$014 = $l;$$05 = $r;
  while(1) {
   $4 = (($$014) + 1|0);
   $5 = (($$05) + 1|0);
   $6 = HEAP8[$4>>0]|0;
   $7 = HEAP8[$5>>0]|0;
   $8 = ($6<<24>>24)!=($7<<24>>24);
   $9 = ($6<<24>>24)==(0);
   $or$cond = $8 | $9;
   if ($or$cond) {
    $$lcssa = $6;$$lcssa2 = $7;
    break;
   } else {
    $$014 = $4;$$05 = $5;
   }
  }
 }
 $10 = $$lcssa&255;
 $11 = $$lcssa2&255;
 $12 = (($10) - ($11))|0;
 STACKTOP = sp;return ($12|0);
}
function _strncasecmp($_l,$_r,$n) {
 $_l = $_l|0;
 $_r = $_r|0;
 $n = $n|0;
 var $$04 = 0, $$08 = 0, $$08$in = 0, $$pre$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$06 = 0, $or$cond = 0, $r$0$lcssa = 0, $r$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  $$04 = 0;
  STACKTOP = sp;return ($$04|0);
 }
 $1 = HEAP8[$_l>>0]|0;
 $2 = ($1<<24>>24)==(0);
 L4: do {
  if ($2) {
   $21 = 0;$r$0$lcssa = $_r;
  } else {
   $3 = $1&255;
   $$08$in = $n;$8 = $1;$9 = $3;$l$06 = $_l;$r$07 = $_r;
   while(1) {
    $$08 = (($$08$in) + -1)|0;
    $4 = HEAP8[$r$07>>0]|0;
    $5 = ($4<<24>>24)==(0);
    $6 = ($$08|0)==(0);
    $or$cond = $5 | $6;
    if ($or$cond) {
     $21 = $8;$r$0$lcssa = $r$07;
     break L4;
    }
    $7 = ($8<<24>>24)==($4<<24>>24);
    if (!($7)) {
     $10 = (_tolower($9)|0);
     $11 = HEAP8[$r$07>>0]|0;
     $12 = $11&255;
     $13 = (_tolower($12)|0);
     $14 = ($10|0)==($13|0);
     if (!($14)) {
      break;
     }
    }
    $15 = (($l$06) + 1|0);
    $16 = (($r$07) + 1|0);
    $17 = HEAP8[$15>>0]|0;
    $18 = $17&255;
    $19 = ($17<<24>>24)==(0);
    if ($19) {
     $21 = 0;$r$0$lcssa = $16;
     break L4;
    } else {
     $$08$in = $$08;$8 = $17;$9 = $18;$l$06 = $15;$r$07 = $16;
    }
   }
   $$pre$pre = HEAP8[$l$06>>0]|0;
   $21 = $$pre$pre;$r$0$lcssa = $r$07;
  }
 } while(0);
 $20 = $21&255;
 $22 = (_tolower($20)|0);
 $23 = HEAP8[$r$0$lcssa>>0]|0;
 $24 = $23&255;
 $25 = (_tolower($24)|0);
 $26 = (($22) - ($25))|0;
 $$04 = $26;
 STACKTOP = sp;return ($$04|0);
}
function _strncmp($_l,$_r,$n) {
 $_l = $_l|0;
 $_r = $_r|0;
 $n = $n|0;
 var $$03 = 0, $$08 = 0, $$08$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$06 = 0, $notlhs = 0;
 var $notrhs = 0, $or$cond$not = 0, $or$cond4 = 0, $r$0$lcssa = 0, $r$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  $$03 = 0;
  STACKTOP = sp;return ($$03|0);
 }
 $1 = HEAP8[$_l>>0]|0;
 $2 = ($1<<24>>24)==(0);
 L4: do {
  if ($2) {
   $11 = 0;$r$0$lcssa = $_r;
  } else {
   $$08$in = $n;$5 = $1;$l$06 = $_l;$r$07 = $_r;
   while(1) {
    $$08 = (($$08$in) + -1)|0;
    $3 = HEAP8[$r$07>>0]|0;
    $notlhs = ($3<<24>>24)!=(0);
    $notrhs = ($$08|0)!=(0);
    $or$cond$not = $notrhs & $notlhs;
    $4 = ($5<<24>>24)==($3<<24>>24);
    $or$cond4 = $or$cond$not & $4;
    if (!($or$cond4)) {
     $11 = $5;$r$0$lcssa = $r$07;
     break L4;
    }
    $6 = (($l$06) + 1|0);
    $7 = (($r$07) + 1|0);
    $8 = HEAP8[$6>>0]|0;
    $9 = ($8<<24>>24)==(0);
    if ($9) {
     $11 = 0;$r$0$lcssa = $7;
     break;
    } else {
     $$08$in = $$08;$5 = $8;$l$06 = $6;$r$07 = $7;
    }
   }
  }
 } while(0);
 $10 = $11&255;
 $12 = HEAP8[$r$0$lcssa>>0]|0;
 $13 = $12&255;
 $14 = (($10) - ($13))|0;
 $$03 = $14;
 STACKTOP = sp;return ($$03|0);
}
function runPostSets() {
 
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _strncpy(pdest, psrc, num) {
    pdest = pdest|0; psrc = psrc|0; num = num|0;
    var padding = 0, curr = 0, i = 0;
    while ((i|0) < (num|0)) {
      curr = padding ? 0 : ((HEAP8[(((psrc)+(i))>>0)])|0);
      HEAP8[(((pdest)+(i))>>0)]=curr;
      padding = padding ? 1 : (((HEAP8[(((psrc)+(i))>>0)])|0) == 0);
      i = (i+1)|0;
    }
    return pdest|0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _strlen(ptr) {
    ptr = ptr|0;
    var curr = 0;
    curr = ptr;
    while (((HEAP8[((curr)>>0)])|0)) {
      curr = (curr + 1)|0;
    }
    return (curr - ptr)|0;
}
function _memcpy(dest, src, num) {

    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _strcpy(pdest, psrc) {
    pdest = pdest|0; psrc = psrc|0;
    var i = 0;
    do {
      HEAP8[(((pdest+i)|0)>>0)]=HEAP8[(((psrc+i)|0)>>0)];
      i = (i+1)|0;
    } while (((HEAP8[(((psrc)+(i-1))>>0)])|0));
    return pdest|0;
}
function _emscripten_replace_memory(newBuffer) {
    if ((byteLength(newBuffer) & 0xffff) || byteLength(newBuffer) < 0xffff) return false;
    HEAP8 = new Int8View(newBuffer);
    HEAP16 = new Int16View(newBuffer);
    HEAP32 = new Int32View(newBuffer);
    HEAPU8 = new Uint8View(newBuffer);
    HEAPU16 = new Uint16View(newBuffer);
    HEAPU32 = new Uint32View(newBuffer);
    HEAPF32 = new Float32View(newBuffer);
    HEAPF64 = new Float64View(newBuffer);
    buffer = newBuffer;
    return true;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_ctlz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((ctlz_i8)+(x >>> 24))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((ctlz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((ctlz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((ctlz_i8)+(x&0xff))>>0)])|0) + 24)|0;
  }

function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return (tempRet0 = tempRet0, $10$0) | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return (tempRet0 = tempRet0, $1$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (_llvm_ctlz_i32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



// EMSCRIPTEN_END_FUNCS

    
    function dynCall_iiiii(index,a1,a2,a3,a4) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      return FUNCTION_TABLE_iiiii[index&7](a1|0,a2|0,a3|0,a4|0)|0;
    }
  

    function dynCall_iiidii(index,a1,a2,a3,a4,a5) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=+a3; a4=a4|0; a5=a5|0;
      return FUNCTION_TABLE_iiidii[index&3](a1|0,a2|0,+a3,a4|0,a5|0)|0;
    }
  

    function dynCall_vii(index,a1,a2) {
      index = index|0;
      a1=a1|0; a2=a2|0;
      FUNCTION_TABLE_vii[index&3](a1|0,a2|0);
    }
  

    function dynCall_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
      return FUNCTION_TABLE_iiiiiii[index&3](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
    }
  

    function dynCall_iiii(index,a1,a2,a3) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0;
      return FUNCTION_TABLE_iiii[index&7](a1|0,a2|0,a3|0)|0;
    }
  

    function dynCall_viii(index,a1,a2,a3) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0;
      FUNCTION_TABLE_viii[index&0](a1|0,a2|0,a3|0);
    }
  

    function dynCall_iii(index,a1,a2) {
      index = index|0;
      a1=a1|0; a2=a2|0;
      return FUNCTION_TABLE_iii[index&7](a1|0,a2|0)|0;
    }
  

    function dynCall_viiii(index,a1,a2,a3,a4) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      FUNCTION_TABLE_viiii[index&7](a1|0,a2|0,a3|0,a4|0);
    }
  
function b0(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; abort(0);return 0; }
  function b1(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = +p2;p3 = p3|0;p4 = p4|0; abort(1);return 0; }
  function b2(p0,p1) { p0 = p0|0;p1 = p1|0; abort(2); }
  function b3(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; abort(3);return 0; }
  function _decodeMP3__wrapper(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; return _decodeMP3(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0)|0; }
  function _decodeMP3_unclipped__wrapper(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; return _decodeMP3_unclipped(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0)|0; }
  function b4(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; abort(4);return 0; }
  function b5(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; abort(5); }
  function b6(p0,p1) { p0 = p0|0;p1 = p1|0; abort(6);return 0; }
  function b7(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; abort(7); }
  // EMSCRIPTEN_END_FUNCS
  var FUNCTION_TABLE_iiiii = [b0,_count_bit_null,_count_bit_noESC,_count_bit_noESC_from2,_count_bit_noESC_from3,b0,b0,b0];
  var FUNCTION_TABLE_iiidii = [b1,_guess_scalefac_x34,_find_scalefac_x34,b1];
  var FUNCTION_TABLE_vii = [b2,_fht,_lame_report_def,b2];
  var FUNCTION_TABLE_iiiiiii = [b3,_decodeMP3__wrapper,_decodeMP3_unclipped__wrapper,b3];
  var FUNCTION_TABLE_iiii = [b4,_sn_write,_choose_table_nonMMX,_do_read,_do_read134,_do_read136,b4,b4];
  var FUNCTION_TABLE_viii = [b5];
  var FUNCTION_TABLE_iii = [b6,_floatcompare,_ignore_err,_sort,_tre_compare_items,b6,b6,b6];
  var FUNCTION_TABLE_viiii = [b7,_VBR_new_iteration_loop,_VBR_old_iteration_loop,_CBR_iteration_loop,_ABR_iteration_loop,_init_xrpow_core_c,_short_block_constrain,_long_block_constrain];

    return { _strlen: _strlen, _lame_get_num_channels: _lame_get_num_channels, _bitshift64Lshr: _bitshift64Lshr, _lame_get_in_samplerate: _lame_get_in_samplerate, _lame_init: _lame_init, _lame_set_VBR_max_bitrate_kbps: _lame_set_VBR_max_bitrate_kbps, _calloc: _calloc, _bitshift64Shl: _bitshift64Shl, _lame_get_VBR_max_bitrate_kbps: _lame_get_VBR_max_bitrate_kbps, _lame_get_num_samples: _lame_get_num_samples, _strncpy: _strncpy, _lame_set_num_samples: _lame_set_num_samples, _memset: _memset, _memcpy: _memcpy, _lame_get_VBR_mean_bitrate_kbps: _lame_get_VBR_mean_bitrate_kbps, _lame_set_VBR: _lame_set_VBR, _lame_encode_flush: _lame_encode_flush, _lame_set_mode: _lame_set_mode, _lame_set_VBR_mean_bitrate_kbps: _lame_set_VBR_mean_bitrate_kbps, _i64Subtract: _i64Subtract, _lame_set_brate: _lame_set_brate, _lame_set_VBR_q: _lame_set_VBR_q, _realloc: _realloc, _i64Add: _i64Add, _lame_init_params: _lame_init_params, _lame_get_brate: _lame_get_brate, _free: _free, _lame_set_VBR_min_bitrate_kbps: _lame_set_VBR_min_bitrate_kbps, _lame_get_VBR_min_bitrate_kbps: _lame_get_VBR_min_bitrate_kbps, _lame_get_out_samplerate: _lame_get_out_samplerate, _lame_set_out_samplerate: _lame_set_out_samplerate, _lame_encode_buffer_ieee_float: _lame_encode_buffer_ieee_float, _lame_close: _lame_close, _lame_set_in_samplerate: _lame_set_in_samplerate, _get_lame_version: _get_lame_version, _lame_get_VBR: _lame_get_VBR, _malloc: _malloc, _memmove: _memmove, _emscripten_replace_memory: _emscripten_replace_memory, _lame_set_num_channels: _lame_set_num_channels, _lame_get_VBR_q: _lame_get_VBR_q, _lame_get_mode: _lame_get_mode, _strcpy: _strcpy, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiiii: dynCall_iiiii, dynCall_iiidii: dynCall_iiidii, dynCall_vii: dynCall_vii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_iiii: dynCall_iiii, dynCall_viii: dynCall_viii, dynCall_iii: dynCall_iii, dynCall_viiii: dynCall_viiii };
  })
  // EMSCRIPTEN_END_ASM
  ({ "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "byteLength": byteLength }, { "abort": abort, "assert": assert, "min": Math_min, "invoke_iiiii": invoke_iiiii, "invoke_iiidii": invoke_iiidii, "invoke_vii": invoke_vii, "invoke_iiiiiii": invoke_iiiiiii, "invoke_iiii": invoke_iiii, "invoke_viii": invoke_viii, "invoke_iii": invoke_iii, "invoke_viiii": invoke_viiii, "_fabs": _fabs, "_readdir_r": _readdir_r, "_sin": _sin, "_exp": _exp, "_llvm_pow_f64": _llvm_pow_f64, "_send": _send, "_log": _log, "_fread": _fread, "_abort": _abort, "_fmod": _fmod, "_lseek": _lseek, "_llvm_stackrestore": _llvm_stackrestore, "_fmodl": _fmodl, "_vfprintf": _vfprintf, "_log10f": _log10f, "_rmdir": _rmdir, "_logf": _logf, "_floor": _floor, "_ExitMP3": _ExitMP3, "_fflush": _fflush, "_opendir": _opendir, "_pwrite": _pwrite, "_strerror_r": _strerror_r, "_cosf": _cosf, "_log10": _log10, "_fabsf": _fabsf, "_remove": _remove, "_atan": _atan, "_llvm_pow_f32": _llvm_pow_f32, "_strerror": _strerror, "_sbrk": _sbrk, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_exp2": _exp2, "_unlink": _unlink, "_perror": _perror, "_sysconf": _sysconf, "__reallyNegative": __reallyNegative, "_close": _close, "_putc": _putc, "_sinf": _sinf, "_cos": _cos, "_fseek": _fseek, "_fileno": _fileno, "_llvm_stacksave": _llvm_stacksave, "_pread": _pread, "_puts": _puts, "_open": _open, "_fclose": _fclose, "_floorf": _floorf, "_copysignl": _copysignl, "_sqrtf": _sqrtf, "___unlock": ___unlock, "_write": _write, "_fsync": _fsync, "_ftell": _ftell, "___errno_location": ___errno_location, "_stat": _stat, "_recv": _recv, "_copysign": _copysign, "_fputc": _fputc, "_mkport": _mkport, "__exit": __exit, "_read": _read, "___lock": ___lock, "_InitMP3": _InitMP3, "_fwrite": _fwrite, "_time": _time, "_fprintf": _fprintf, "_decodeMP3": _decodeMP3, "___setErrNo": ___setErrNo, "_ceil": _ceil, "__formatString": __formatString, "_closedir": _closedir, "_sqrt": _sqrt, "_fopen": _fopen, "_exit": _exit, "_decodeMP3_unclipped": _decodeMP3_unclipped, "_fputs": _fputs, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "ctlz_i8": ctlz_i8, "NaN": NaN, "Infinity": Infinity, "___progname": ___progname, "_freqs": _freqs, "_stderr": _stderr, "_stdout": _stdout, "_tabsel_123": _tabsel_123 }, buffer);
  var _strlen = Module["_strlen"] = asm["_strlen"];
var _lame_get_num_channels = Module["_lame_get_num_channels"] = asm["_lame_get_num_channels"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _lame_get_in_samplerate = Module["_lame_get_in_samplerate"] = asm["_lame_get_in_samplerate"];
var _lame_init = Module["_lame_init"] = asm["_lame_init"];
var _lame_set_VBR_max_bitrate_kbps = Module["_lame_set_VBR_max_bitrate_kbps"] = asm["_lame_set_VBR_max_bitrate_kbps"];
var _calloc = Module["_calloc"] = asm["_calloc"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _lame_get_VBR_max_bitrate_kbps = Module["_lame_get_VBR_max_bitrate_kbps"] = asm["_lame_get_VBR_max_bitrate_kbps"];
var _lame_get_num_samples = Module["_lame_get_num_samples"] = asm["_lame_get_num_samples"];
var _strncpy = Module["_strncpy"] = asm["_strncpy"];
var _lame_set_num_samples = Module["_lame_set_num_samples"] = asm["_lame_set_num_samples"];
var _memset = Module["_memset"] = asm["_memset"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _lame_get_VBR_mean_bitrate_kbps = Module["_lame_get_VBR_mean_bitrate_kbps"] = asm["_lame_get_VBR_mean_bitrate_kbps"];
var _lame_set_VBR = Module["_lame_set_VBR"] = asm["_lame_set_VBR"];
var _lame_encode_flush = Module["_lame_encode_flush"] = asm["_lame_encode_flush"];
var _lame_set_mode = Module["_lame_set_mode"] = asm["_lame_set_mode"];
var _lame_set_VBR_mean_bitrate_kbps = Module["_lame_set_VBR_mean_bitrate_kbps"] = asm["_lame_set_VBR_mean_bitrate_kbps"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _lame_set_brate = Module["_lame_set_brate"] = asm["_lame_set_brate"];
var _lame_set_VBR_q = Module["_lame_set_VBR_q"] = asm["_lame_set_VBR_q"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _lame_init_params = Module["_lame_init_params"] = asm["_lame_init_params"];
var _lame_get_brate = Module["_lame_get_brate"] = asm["_lame_get_brate"];
var _free = Module["_free"] = asm["_free"];
var _lame_set_VBR_min_bitrate_kbps = Module["_lame_set_VBR_min_bitrate_kbps"] = asm["_lame_set_VBR_min_bitrate_kbps"];
var _lame_get_VBR_min_bitrate_kbps = Module["_lame_get_VBR_min_bitrate_kbps"] = asm["_lame_get_VBR_min_bitrate_kbps"];
var _lame_get_out_samplerate = Module["_lame_get_out_samplerate"] = asm["_lame_get_out_samplerate"];
var _lame_set_out_samplerate = Module["_lame_set_out_samplerate"] = asm["_lame_set_out_samplerate"];
var _lame_encode_buffer_ieee_float = Module["_lame_encode_buffer_ieee_float"] = asm["_lame_encode_buffer_ieee_float"];
var _lame_close = Module["_lame_close"] = asm["_lame_close"];
var _lame_set_in_samplerate = Module["_lame_set_in_samplerate"] = asm["_lame_set_in_samplerate"];
var _get_lame_version = Module["_get_lame_version"] = asm["_get_lame_version"];
var _lame_get_VBR = Module["_lame_get_VBR"] = asm["_lame_get_VBR"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _emscripten_replace_memory = Module["_emscripten_replace_memory"] = asm["_emscripten_replace_memory"];
var _lame_set_num_channels = Module["_lame_set_num_channels"] = asm["_lame_set_num_channels"];
var _lame_get_VBR_q = Module["_lame_get_VBR_q"] = asm["_lame_get_VBR_q"];
var _lame_get_mode = Module["_lame_get_mode"] = asm["_lame_get_mode"];
var _strcpy = Module["_strcpy"] = asm["_strcpy"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iiidii = Module["dynCall_iiidii"] = asm["dynCall_iiidii"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
  
  Runtime.stackAlloc = asm['stackAlloc'];
  Runtime.stackSave = asm['stackSave'];
  Runtime.stackRestore = asm['stackRestore'];
  Runtime.setTempRet0 = asm['setTempRet0'];
  Runtime.getTempRet0 = asm['getTempRet0'];
  

// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (typeof Module['locateFile'] === 'function') {
    memoryInitializer = Module['locateFile'](memoryInitializer);
  } else if (Module['memoryInitializerPrefixURL']) {
    memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['_main'] && shouldRunNow) {
      Module['callMain'](args);
    }

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  if (Module['noExitRuntime']) {
    return;
  }

  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.';

  throw 'abort() at ' + stackTrace() + extra;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



// libmp3lame function wrappers

var BUFSIZE = 8192;

return {
	STEREO: 0, 
	JOINT_STEREO: 1, 
	MONO: 3,

	get_version: Module.cwrap('get_lame_version', 'string'),

	init: Module.cwrap('lame_init', 'number'),
	init_params: Module.cwrap('lame_init_params', 'number', [ 'number' ]),

	set_mode: Module.cwrap('lame_set_mode', 'number', [ 'number', 'number' ]),
	get_mode: Module.cwrap('lame_get_mode', 'number', [ 'number' ]),

	set_num_samples: Module.cwrap('lame_set_num_samples', 'number', [ 'number', 'number' ]),
	get_num_samples: Module.cwrap('lame_get_num_samples', 'number', [ 'number' ]),

	set_num_channels: Module.cwrap('lame_set_num_channels', 'number', [ 'number', 'number' ]),
	get_num_channels: Module.cwrap('lame_get_num_channels', 'number', [ 'number' ]),

	set_in_samplerate: Module.cwrap('lame_set_in_samplerate', 'number', [ 'number', 'number' ]),
	get_in_samplerate: Module.cwrap('lame_get_in_samplerate', 'number', [ 'number' ]),

	set_out_samplerate: Module.cwrap('lame_set_out_samplerate', 'number', [ 'number', 'number' ]),
	get_out_samplerate: Module.cwrap('lame_get_out_samplerate', 'number', [ 'number' ]),

	set_bitrate: Module.cwrap('lame_set_brate', 'number', [ 'number', 'number' ]),
	get_bitrate: Module.cwrap('lame_get_brate', 'number', [ 'number' ]),
	
	set_VBR: Module.cwrap('lame_set_VBR', 'number', [ 'number', 'number' ]),
	get_VBR: Module.cwrap('lame_get_VBR', 'number', [ 'number' ]),
	
	set_VBR_q: Module.cwrap('lame_set_VBR_q', 'number', [ 'number', 'number' ]),
	get_VBR_q: Module.cwrap('lame_get_VBR_q', 'number', [ 'number' ]),
	
	set_VBR_mean_bitrate_kbps: Module.cwrap('lame_set_VBR_mean_bitrate_kbps', 'number', [ 'number', 'number' ]),
	get_VBR_mean_bitrate_kbps: Module.cwrap('lame_get_VBR_mean_bitrate_kbps', 'number', [ 'number' ]),
	
	set_VBR_min_bitrate_kbps: Module.cwrap('lame_set_VBR_min_bitrate_kbps', 'number', [ 'number', 'number' ]),
	get_VBR_min_bitrate_kbps: Module.cwrap('lame_get_VBR_min_bitrate_kbps', 'number', [ 'number' ]),
	
	set_VBR_max_bitrate_kbps: Module.cwrap('lame_set_VBR_max_bitrate_kbps', 'number', [ 'number', 'number' ]),
	get_VBR_max_bitrate_kbps: Module.cwrap('lame_get_VBR_max_bitrate_kbps', 'number', [ 'number' ]),

	encode_buffer_ieee_float: function(handle, channel_l, channel_r) {
        BUFSIZE = channel_l.length * 4;
		var outbuf = _malloc(BUFSIZE);
		var inbuf_l = _malloc(channel_l.length * 4);
		var inbuf_r = _malloc(channel_r.length * 4);
		for (var i=0;i<channel_l.length;i++) {
			setValue(inbuf_l + (i*4), channel_l[i], 'float');
		}
		for (var i=0;i<channel_r.length;i++) {
			setValue(inbuf_r + (i*4), channel_r[i], 'float');
		}
		var nread = Module.ccall('lame_encode_buffer_ieee_float', 'number', [ 'number', 'number', 'number', 'number', 'number', 'number' ], [ handle, inbuf_l, inbuf_r, channel_l.length, outbuf, BUFSIZE ]);
		var arraybuf = new ArrayBuffer(nread);
		var retdata = new Uint8Array(arraybuf);
		retdata.set(HEAPU8.subarray(outbuf, outbuf + nread));
		_free(outbuf);
		_free(inbuf_l);
		_free(inbuf_r);
		return { size: nread, data: retdata };
	},

	encode_flush: function(handle) {
		var outbuf = _malloc(BUFSIZE);
		var nread = Module.ccall('lame_encode_flush', 'number', [ 'number', 'number', 'number' ], [ handle, outbuf, BUFSIZE ]);
		var arraybuf = new ArrayBuffer(nread);
		var retdata = new Uint8Array(arraybuf);
		retdata.set(HEAPU8.subarray(outbuf, outbuf + nread));
		_free(outbuf);
		return { size: nread, data: retdata };
	},

	close: Module.cwrap('lame_close', 'number', [ 'number' ])
};

})();

self.Lame = Lame; // make Lame accessible to other webworker scripts.



